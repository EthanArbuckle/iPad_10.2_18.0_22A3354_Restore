id sub_100006028(_BYTE *a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, long double a9)
{
  return sub_100006060(a1, a5, a2, a3, a4, a6, a7, 0, a9, a8);
}

id sub_100006060(_BYTE *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long double a9, uint64_t a10)
{
  void *v19;
  void *v20;
  id v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __CFString *v28;
  int v29;
  void *v30;
  void *v31;
  __CFString *v32;
  __CFString *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  __CFString *v41;
  void *v42;
  void *v43;
  __CFString *v44;
  __CFString *v45;
  id v46;
  __CFString *v47;
  __CFString *v48;
  id v49;
  __CFString *v50;
  __CFString *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  _BYTE *v64;
  void *v65;
  int v66;
  int v67;
  int v68;

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[_SUITimeFormatData instanceForLocale:](_SUITimeFormatData, "instanceForLocale:", a10));
  v20 = v19;
  if (a9 > 600.0 && a7 != 0)
  {
    if (a9 <= 36000.0)
      v28 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "abbreviatedHourMinuteDateFormatter"));
    else
      v28 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "abbreviatedHourDateFormatter"));
    v33 = v28;
    v34 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString stringFromTimeInterval:](v28, "stringFromTimeInterval:", (double)a9));
    goto LABEL_47;
  }
  v67 = a3;
  v64 = a1;
  v65 = v19;
  v22 = v19;
  v23 = fmod(a9, 1.0);
  v24 = (unint64_t)a9;
  v25 = (unint64_t)a9 / 0x3C;
  v68 = a4;
  v66 = a8;
  if (a5)
  {
    v26 = v25 - 60 * ((unint64_t)((v25 * (unsigned __int128)0x888888888888889uLL) >> 64) >> 1);
    v27 = v24 / 0xE10;
  }
  else
  {
    v27 = 0;
    v26 = (unint64_t)a9 / 0x3C;
  }
  if (v27)
    v29 = 1;
  else
    v29 = a2;
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "singleWidthNumberFormatter"));
  if (v29 == 1)
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v27));
    v32 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "stringFromNumber:", v31));

  }
  else
  {
    v32 = &stru_1000A2060;
    if (!a6)
      goto LABEL_20;
  }
  v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "doubleWidthNumberFormatter"));

  v30 = (void *)v35;
LABEL_20:
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v26));
  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "stringFromNumber:", v36));

  if (v68)
  {
    v38 = v24 - 60 * v25;
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "doubleWidthNumberFormatter"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v38));
    v41 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "stringFromNumber:", v40));

  }
  else
  {
    v41 = &stru_1000A2060;
  }
  if (v67)
  {
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "doubleWidthNumberFormatter"));
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (unint64_t)(v23 * 100.0)));
    v44 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "stringFromNumber:", v43));

  }
  else
  {
    v44 = &stru_1000A2060;
  }
  v45 = objc_retainAutorelease(v32);
  v46 = objc_retainAutorelease(v37);
  v47 = objc_retainAutorelease(v41);
  v48 = objc_retainAutorelease(v44);

  v33 = v45;
  v49 = v46;
  v50 = v47;
  v51 = v48;
  if (v29)
  {
    if (v68 && !a7)
    {
      v52 = v64;
      if ((v67 & 1) != 0)
        v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "formatHourMinSecSubsec"));
      else
        v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "formatHourMinSec"));
      goto LABEL_52;
    }
    v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "formatHourMin"));
  }
  else if ((v68 & 1) != 0)
  {
    if (!a7)
    {
      v52 = v64;
      if ((v67 & 1) != 0)
        v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "formatMinSecSubsec"));
      else
        v53 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "formatMinSec"));
LABEL_52:
      v55 = (void *)v53;
      v20 = v65;
      if (!v52)
        goto LABEL_38;
      goto LABEL_37;
    }
    v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "formatMinSec"));
  }
  else
  {
    v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "formatMin"));
  }
  v55 = (void *)v54;
  v52 = v64;
  v20 = v65;
  if (v64)
LABEL_37:
    *v52 = v29;
LABEL_38:
  if ((v29 & 1) == 0)
  {
    v56 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("HH%@"), v55));

    v55 = (void *)v56;
  }
  v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "stringByReplacingOccurrencesOfString:withString:", CFSTR("HH"), CFSTR("%1$@")));

  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "stringByReplacingOccurrencesOfString:withString:", CFSTR("H"), CFSTR("%1$@")));
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "stringByReplacingOccurrencesOfString:withString:", CFSTR("mm"), CFSTR("%2$@")));

  v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "stringByReplacingOccurrencesOfString:withString:", CFSTR("m"), CFSTR("%2$@")));
  v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v60, "stringByReplacingOccurrencesOfString:withString:", CFSTR("ss"), CFSTR("%3$@")));

  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "stringByReplacingOccurrencesOfString:withString:", CFSTR("SS"), CFSTR("%4$@")));
  if (v66)
  {
    if (-[__CFString length](v51, "length"))
    {

      v51 = CFSTR("−−");
    }
    if (a9 >= 60.0 && -[__CFString length](v50, "length"))
    {

      v50 = CFSTR("−−");
    }
  }
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v62, v33, v49, v50, v51));

LABEL_47:
  return v34;
}

id sub_1000065D4(_BYTE *a1, int a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8, long double a9)
{
  return sub_100006060(a1, a5, a2, a3, a4, a6, a7, 1, a9, a8);
}

void sub_100006704(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSLock);
  v2 = (void *)qword_1000B31B8;
  qword_1000B31B8 = (uint64_t)v1;

}

double sub_100006B6C(double a1)
{
  double v1;
  double v2;
  int v3;

  v1 = a1;
  v2 = a1 * 1000.0;
  if (v2 <= 1.84467441e19)
  {
    v3 = dword_100080738[(121 * ((unint64_t)v2 % 0x64)) >> 12];
    return (double)(unint64_t)((double)(int)(10 * (arc4random_uniform(3u) + v3)) + floor(v1 * 10.0) * 100.0)
         / 1000.0;
  }
  return v1;
}

id sub_100006D4C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  _QWORD v6[4];
  id v7;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100006DE4;
  v6[3] = &unk_10009DF70;
  v7 = *(id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "na_firstObjectPassingTest:", v6));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NAFuture futureWithResult:](NAFuture, "futureWithResult:", v3));

  return v4;
}

id sub_100006DE4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "timerIDString"));
  v4 = objc_msgSend(v3, "isEqualToString:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100006E24(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "timerByUpdatingWithState:", *(_QWORD *)(a1 + 40)));
  v3 = objc_msgSend(*(id *)(a1 + 32), "updateTimer:", v4);

}

int main(int argc, const char **argv, const char **envp)
{
  int v3;
  char **v4;
  uint64_t v5;
  objc_class *ObjCClassFromMetadata;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = static CommandLine.argc.getter(*(_QWORD *)&argc, argv, envp);
  v4 = (char **)static CommandLine.unsafeArgv.getter();
  v5 = type metadata accessor for Application();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v5);
  v7 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = v8;
    v7 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }
  v10 = type metadata accessor for AppDelegate();
  v11 = (objc_class *)swift_getObjCClassFromMetadata(v10);
  v12 = NSStringFromClass(v11);
  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v14 = v13;
    v12 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
  }
  UIApplicationMain(v3, v4, v7, v12);

  return 0;
}

uint64_t variable initialization expression of Atomic.lock()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for CPUnfairLock();
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void type metadata accessor for MTStopwatchState(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEE78, (uint64_t)&unk_10009E210);
}

void type metadata accessor for SBUISystemApertureElementIdentifier(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEE80, (uint64_t)&unk_10009E230);
}

void type metadata accessor for SBUISystemApertureContentRole(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEE88, (uint64_t)&unk_10009E258);
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEE90, (uint64_t)&unk_10009E278);
}

void type metadata accessor for SBUISystemAperturePresentationBehaviors(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEE98, (uint64_t)&unk_10009E298);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEEA0, (uint64_t)&unk_10009E2C0);
}

BOOL sub_100006FDC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100006FF0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100007018(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100007020@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100007034@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_100007048@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100007074@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_100007098(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1000070AC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000070C0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000070D4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000070E8(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000070FC()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_10000710C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100007124(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100007138(uint64_t a1, uint64_t a2)
{
  return sub_100007684(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

_QWORD *sub_100007150@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100007160(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100007174(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000071E8(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100007264@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_1000072A4(uint64_t a1, uint64_t a2)
{
  return sub_100007684(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

_QWORD *sub_1000072B0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000072C4(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000072F4(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100007308(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_10000731C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100007824(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_10000735C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100007368()
{
  return sub_1000073C0(&qword_1000AEEA8, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_100080874);
}

uint64_t sub_100007394()
{
  return sub_1000073C0(&qword_1000AEEB0, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_100080844);
}

uint64_t sub_1000073C0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007400()
{
  return sub_1000073C0(&qword_1000AEEB8, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_10008089C);
}

uint64_t sub_10000742C()
{
  return sub_1000073C0(&qword_1000AEEC0, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemAperturePresentationBehaviors, (uint64_t)&unk_1000808D4);
}

uint64_t sub_10000745C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000073C0(&qword_1000AEF40, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_100080AC4);
  v3 = sub_1000073C0(&qword_1000AEF48, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_100080A6C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000074E0()
{
  return sub_1000073C0(&qword_1000AEEC8, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_100080A34);
}

uint64_t sub_10000750C()
{
  return sub_1000073C0(&qword_1000AEED0, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_100080A0C);
}

uint64_t sub_100007538(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000073C0((unint64_t *)&qword_1000AEFE0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100080D74);
  v3 = sub_1000073C0(&qword_1000AEFE8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100080CC8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000075BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100007600(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000073C0(&qword_1000AF010, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100080F00);
  v3 = sub_1000073C0(&qword_1000AF018, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100080E54);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007684(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_1000076C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100007700(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100007770(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000077F8()
{
  return sub_1000073C0(&qword_1000AEED8, (uint64_t (*)(uint64_t))type metadata accessor for SBUISystemApertureElementIdentifier, (uint64_t)&unk_100080A9C);
}

uint64_t sub_100007824(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AlarmAlertTrailingView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100007890(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000078A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000078C4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEFB0, (uint64_t)&unk_10009E340);
}

void type metadata accessor for ActivationState(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEFB8, (uint64_t)&unk_10009E378);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEFC0, (uint64_t)&unk_10009E398);
}

uint64_t sub_100007938()
{
  return sub_1000073C0(&qword_1000AEFC8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100080C8C);
}

uint64_t sub_100007964()
{
  return sub_1000073C0(&qword_1000AEFD0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100080C60);
}

uint64_t sub_100007990()
{
  return sub_1000073C0(&qword_1000AEFD8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_100080CFC);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000079D0(a1, &qword_1000AEFF0, (uint64_t)&unk_10009E3C0);
}

void sub_1000079D0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100007A14()
{
  return sub_1000073C0(&qword_1000AEFF8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100080E18);
}

uint64_t sub_100007A40()
{
  return sub_1000073C0(&qword_1000AF000, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100080DEC);
}

uint64_t sub_100007A6C()
{
  return sub_1000073C0(&qword_1000AF008, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100080E88);
}

uint64_t sub_100007AC4(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t destroy for AlarmSnoozeCountdownLabelView(uint64_t a1)
{

  return sub_100007AF8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_100007AF8(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t initializeWithCopy for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  id v8;

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v8 = v4;
  sub_100007AC4(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_100007AC4(v7, v8);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  sub_100007AF8(v10, v11);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AlarmSnoozeCountdownLabelView(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v5;
  sub_100007AF8(v6, v7);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlarmSnoozeCountdownLabelView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlarmSnoozeCountdownLabelView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCountdownLabelView()
{
  return &type metadata for AlarmSnoozeCountdownLabelView;
}

uint64_t sub_100007CF0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_100007D18(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AlarmSnoozeCountdownControlView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCountdownControlView()
{
  return &type metadata for AlarmSnoozeCountdownControlView;
}

ValueMetadata *type metadata accessor for AlarmAlertTrailingView()
{
  return &type metadata for AlarmAlertTrailingView;
}

ValueMetadata *type metadata accessor for AlarmAlertLeadingView()
{
  return &type metadata for AlarmAlertLeadingView;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCompressedLeadingView()
{
  return &type metadata for AlarmSnoozeCompressedLeadingView;
}

uint64_t *sub_100007EF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)v10;
    v12 = *((_QWORD *)v10 + 1);
    v13 = v10[16];
    sub_100007AC4(*(_QWORD *)v10, v12);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v9[16] = v13;
  }
  return a1;
}

uint64_t sub_100007FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return sub_100007AF8(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_100007FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_100007AC4(*(_QWORD *)v9, v11);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  return a1;
}

uint64_t sub_100008070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_BYTE *)(v9 + 16);
  sub_100007AC4(*(_QWORD *)v9, v11);
  v13 = *(_QWORD *)v8;
  v14 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  *(_BYTE *)(v8 + 16) = v12;
  sub_100007AF8(v13, v14);
  return a1;
}

uint64_t sub_100008100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t sub_10000816C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 16);
  v11 = *(_QWORD *)v8;
  v12 = *(_QWORD *)(v8 + 8);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = v10;
  sub_100007AF8(v11, v12);
  return a1;
}

uint64_t sub_1000081E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000081F0);
}

uint64_t sub_1000081F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 > 1)
    return (v9 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10000826C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100008278);
}

uint64_t sub_100008278(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20) + 16) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for AlarmSnoozeCompressedTrailingView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000AF138, (uint64_t)&nominal type descriptor for AlarmSnoozeCompressedTrailingView);
}

uint64_t sub_100008308(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100081088;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100008378(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100089690, 1);
}

void sub_100008390(_QWORD *a1@<X8>)
{
  *a1 = 0x69662E6D72616C61;
  a1[1] = 0xEA00000000006C6CLL;
}

uint64_t sub_1000083B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v25;

  v2 = v1;
  v4 = (int *)type metadata accessor for RunningCountdownView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000AF250);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6, v2, v10);
  if (qword_1000AED08 != -1)
    swift_once(&qword_1000AED08, sub_100074508);
  v11 = qword_1000B7028;
  v12 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
  v13 = Color.init(uiColor:)(v12);
  v6[v4[5]] = 0;
  *(_QWORD *)&v6[v4[6]] = 0x402F000000000000;
  *(_QWORD *)&v6[v4[7]] = v11;
  *(_QWORD *)&v6[v4[8]] = v13;
  v6[v4[9]] = 0;
  v14 = sub_1000073C0(&qword_1000AF258, type metadata accessor for RunningCountdownView, (uint64_t)&unk_1000841F8);
  View.accessibilityHidden(_:)(1, v4, v14);
  sub_10000E844((uint64_t)v6, type metadata accessor for RunningCountdownView);
  v15 = (uint64_t *)(v2 + *(int *)(type metadata accessor for AlarmSnoozeCompressedTrailingView(0) + 20));
  v16 = *v15;
  v17 = v15[1];
  v18 = *((unsigned __int8 *)v15 + 16);
  v19 = type metadata accessor for EnvironmentDelegate(0);
  v20 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
  v21 = StateObject.wrappedValue.getter(v16, v17, v18, v19, v20);
  v22 = static ObservableObject.environmentStore.getter(v19, v20);
  sub_100011440((uint64_t)v9, a1, &qword_1000AF250);
  v23 = (uint64_t *)(a1 + *(int *)(sub_10000A58C(&qword_1000AF260) + 36));
  *v23 = v22;
  v23[1] = v21;
  return sub_100011484((uint64_t)v9, &qword_1000AF250);
}

uint64_t sub_100008600(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100089668, 1);
}

uint64_t sub_100008610(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100089640, 1);
}

uint64_t sub_100008620@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  _OWORD v16[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _OWORD v21[3];
  _OWORD v22[5];
  char v23;

  v4 = *a1;
  sub_1000113C0((uint64_t)(a1 + 1), (uint64_t)v21 + 8);
  sub_1000113C0((uint64_t)(a1 + 6), (uint64_t)v22);
  *(_QWORD *)&v21[0] = v4;
  LOBYTE(v4) = static Edge.Set.leading.getter(v4);
  v5 = EdgeInsets.init(_all:)(1.0);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  sub_10000E7A8((uint64_t)v21, (uint64_t)v16);
  BYTE8(v17) = (_BYTE)v4;
  *(double *)&v18 = v5;
  *((_QWORD *)&v18 + 1) = v7;
  *(_QWORD *)&v19 = v9;
  *((_QWORD *)&v19 + 1) = v11;
  v20 = 0;
  sub_100011404((uint64_t)v21);
  v22[3] = v18;
  v22[4] = v19;
  v23 = v20;
  v21[2] = v16[2];
  v22[0] = v16[3];
  v22[1] = v16[4];
  v22[2] = v17;
  v21[0] = v16[0];
  v21[1] = v16[1];
  v12 = *a1;
  sub_100011440((uint64_t)v21, (uint64_t)v16, &qword_1000AF640);
  sub_100011440((uint64_t)v16, a2, &qword_1000AF640);
  *(_QWORD *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 144) = 1;
  *(_QWORD *)(a2 + 152) = v12;
  *(_QWORD *)(a2 + 160) = sub_1000083B0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_WORD *)(a2 + 176) = 256;
  v13 = v12;
  sub_100007AC4((uint64_t)sub_1000083B0, 0);
  v14 = v13;
  sub_100011484((uint64_t)v21, &qword_1000AF640);

  sub_100007AF8((uint64_t)sub_1000083B0, 0);
  return sub_100011484((uint64_t)v16, &qword_1000AF640);
}

uint64_t sub_1000087A4@<X0>(uint64_t a1@<X8>)
{
  void **v1;
  uint64_t v3;
  char v4;
  _QWORD v6[2];
  char v7;
  uint64_t v8;
  _BYTE v9[216];
  __int128 v10;
  __int128 v11;
  char v12;

  v6[0] = static VerticalAlignment.center.getter();
  v6[1] = 0;
  v7 = 1;
  v3 = sub_100008620(v1, (uint64_t)&v8);
  v4 = static Edge.Set.horizontal.getter(v3);
  sub_100011440((uint64_t)v6, (uint64_t)v9, &qword_1000AF630);
  v9[208] = v4;
  v10 = 0u;
  v11 = 0u;
  v12 = 1;
  sub_100011484((uint64_t)v6, &qword_1000AF630);
  sub_100011440((uint64_t)v9, a1, &qword_1000AF638);
  *(_BYTE *)(a1 + 249) = 1;
  return sub_100011484((uint64_t)v9, &qword_1000AF638);
}

uint64_t sub_100008864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v5[2];

  v0 = type metadata accessor for EnvironmentDelegate(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v5[0] = 0;
  v5[1] = 0;
  v2 = sub_10000A58C(&qword_1000AF268);
  Published.init(initialValue:)(v5, v2);
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
  return v1;
}

uint64_t sub_1000088F4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  void (*v33)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t *v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[4];
  int v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  int v71;

  v71 = a4;
  v67 = a2;
  v68 = a3;
  v7 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v7);
  v9 = &v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v70 = &v57[-v15];
  v16 = (int *)type metadata accessor for RunningCountdownView(0);
  __chkstk_darwin(v16);
  v18 = &v57[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v61 = sub_10000A58C(&qword_1000AF180);
  v19 = __chkstk_darwin(v61);
  v69 = &v57[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __chkstk_darwin(v19);
  v60 = &v57[-v22];
  __chkstk_darwin(v21);
  v66 = &v57[-v23];
  v24 = LocalizedStringKey.init(stringLiteral:)(0x657A6F6F6E53, 0xE600000000000000);
  v25 = Text.init(_:tableName:bundle:comment:)(v24);
  v63 = v26;
  v64 = v25;
  v58 = v27;
  v65 = v28;
  if (qword_1000AED00 != -1)
    swift_once(&qword_1000AED00, sub_1000744F8);
  v29 = qword_1000B7020;
  v30 = (void *)objc_opt_self(ClockAngelUtilities);
  v62 = v29;
  swift_retain(v29);
  v59 = Color.init(uiColor:)(objc_msgSend(v30, "mtOrange"));
  v31 = objc_msgSend(a1, "snoozeFireDate");
  if (!v31)
  {
    v34 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_10:
    Date.init()(v34);
    sub_100011484((uint64_t)v9, &qword_1000AF178);
    if ((v71 & 0x100) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v32 = v31;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v33 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32);
  v33(v9, v14, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  v34 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if ((_DWORD)v34 == 1)
    goto LABEL_10;
  v33(v70, v9, v10);
  if ((v71 & 0x100) != 0)
  {
LABEL_6:
    if (qword_1000AECF8 != -1)
      swift_once(&qword_1000AECF8, sub_1000744DC);
    v35 = &qword_1000B7018;
    v36 = 0x4048000000000000;
    goto LABEL_16;
  }
LABEL_11:
  if (qword_1000AED20 != -1)
    swift_once(&qword_1000AED20, sub_100074574);
  v36 = qword_1000B7040;
  if (qword_1000AED28 != -1)
    swift_once(&qword_1000AED28, sub_100074588);
  v35 = &qword_1000B7048;
LABEL_16:
  v37 = v71;
  v38 = (v71 & 0x100) == 0;
  v39 = v58 & 1;
  v40 = *v35;
  v41 = Color.init(uiColor:)(objc_msgSend(v30, "mtOrange"));
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v18, v70, v10);
  v18[v16[5]] = 0;
  *(_QWORD *)&v18[v16[6]] = v36;
  *(_QWORD *)&v18[v16[7]] = v40;
  *(_QWORD *)&v18[v16[8]] = v41;
  v18[v16[9]] = v38;
  v42 = type metadata accessor for EnvironmentDelegate(0);
  v43 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
  v44 = StateObject.wrappedValue.getter(v67, v68, v37 & 1, v42, v43);
  v45 = static ObservableObject.environmentStore.getter(v42, v43);
  v46 = v60;
  sub_10000E800((uint64_t)v18, (uint64_t)v60, type metadata accessor for RunningCountdownView);
  v47 = (uint64_t *)&v46[*(int *)(v61 + 36)];
  *v47 = v45;
  v47[1] = v44;
  sub_10000E844((uint64_t)v18, type metadata accessor for RunningCountdownView);
  v48 = v66;
  sub_1000112A4((uint64_t)v46, (uint64_t)v66, &qword_1000AF180);
  v49 = v69;
  sub_100011440((uint64_t)v48, (uint64_t)v69, &qword_1000AF180);
  v51 = v63;
  v50 = v64;
  *(_QWORD *)a5 = v64;
  *(_QWORD *)(a5 + 8) = v51;
  *(_BYTE *)(a5 + 16) = v39;
  v52 = v65;
  v53 = v62;
  *(_QWORD *)(a5 + 24) = v65;
  *(_QWORD *)(a5 + 32) = v53;
  v54 = v59;
  *(_QWORD *)(a5 + 40) = v59;
  *(_QWORD *)(a5 + 48) = 0;
  *(_BYTE *)(a5 + 56) = 1;
  v55 = sub_10000A58C(&qword_1000AF190);
  sub_100011440((uint64_t)v49, a5 + *(int *)(v55 + 48), &qword_1000AF180);
  sub_10000E764(v50, v51, v39);
  swift_bridgeObjectRetain(v52);
  swift_retain(v53);
  swift_retain(v54);
  sub_100011484((uint64_t)v48, &qword_1000AF180);
  sub_100011484((uint64_t)v49, &qword_1000AF180);
  sub_10000E774(v50, v51, v39);
  swift_release(v54);
  swift_release(v53);
  return swift_bridgeObjectRelease(v52);
}

uint64_t sub_100008E94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;

  v3 = *(void **)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 24);
  v7 = *(unsigned __int8 *)(v1 + 25);
  *(_QWORD *)a1 = static VerticalAlignment.firstTextBaseline.getter();
  *(_QWORD *)(a1 + 8) = 0x4014000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  v8 = a1 + *(int *)(sub_10000A58C(&qword_1000AF170) + 44);
  if (v7)
    v9 = 256;
  else
    v9 = 0;
  return sub_1000088F4(v3, v4, v5, v9 | v6, v8);
}

uint64_t sub_100008F1C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _OWORD v47[5];
  uint64_t v48;

  v2 = v1;
  v46 = a1;
  v3 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v3);
  v45 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BlendMode(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000AF1A0);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000AED10 != -1)
    v11 = swift_once(&qword_1000AED10, sub_100074524);
  v14 = qword_1000B7030;
  v15 = static Font.Weight.medium.getter(v11);
  v16 = enum case for Font.Design.rounded(_:);
  v17 = type metadata accessor for Font.Design(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v9, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v9, 0, 1, v17);
  v41 = static Font.system(size:weight:design:)(*(_QWORD *)&v15, 0, v9, 23.0);
  sub_100011484((uint64_t)v9, &qword_1000AF198);
  v20 = v2[9];
  v19 = v2[10];
  sub_10000E784(v2 + 6, v20);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 56))(v20, v19);
  v22 = v2[9];
  v23 = v2[10];
  sub_10000E784(v2 + 6, v22);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 80))(v22, v23);
  sub_10000E7A8((uint64_t)v2, (uint64_t)v47);
  v25 = swift_allocObject(&unk_10009E760, 104, 7);
  v26 = v47[3];
  *(_OWORD *)(v25 + 48) = v47[2];
  *(_OWORD *)(v25 + 64) = v26;
  *(_OWORD *)(v25 + 80) = v47[4];
  *(_QWORD *)(v25 + 96) = v48;
  v27 = v47[1];
  *(_OWORD *)(v25 + 16) = v47[0];
  *(_OWORD *)(v25 + 32) = v27;
  v29 = v42;
  v28 = v43;
  v30 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for BlendMode.plusLighter(_:), v44);
  v31 = (uint64_t)v45;
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v45, v29, v30);
  sub_10000E800(v31, (uint64_t)v13 + *(int *)(v10 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *v13 = v14;
  v32 = v41;
  v13[1] = v41;
  v13[2] = 0x6B72616D78;
  v13[3] = 0xE500000000000000;
  v13[4] = v21;
  v13[5] = v24;
  v13[6] = (uint64_t)sub_10000E7E0;
  v13[7] = v25;
  swift_retain(v32);
  swift_bridgeObjectRetain(0xE500000000000000);
  swift_retain(v21);
  swift_retain(v24);
  swift_retain(v25);
  sub_10000E844(v31, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  swift_release(v25);
  swift_release(v24);
  swift_release(v21);
  swift_bridgeObjectRelease(0xE500000000000000);
  swift_release(v32);
  v33 = LocalizedStringKey.init(stringLiteral:)(0x7475622E706F7473, 0xEB000000006E6F74);
  v35 = v34;
  LOBYTE(v24) = v36;
  v38 = v37;
  v39 = sub_100011020((unint64_t *)&qword_1000AF1A8, &qword_1000AF1A0, (void (*)(void))sub_10000E8C4);
  View.accessibilityLabel(_:)(v33, v35, v24 & 1, v38, v10, v39);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v35);
  return sub_100011484((uint64_t)v13, &qword_1000AF1A0);
}

uint64_t sub_100009324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  _UNKNOWN **v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v4 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v4);
  v84 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for BlendMode(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v80 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_10000A58C(&qword_1000AF1A0);
  __chkstk_darwin(v85);
  v81 = (uint64_t *)((char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10000A58C(&qword_1000AF1C0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v87 = (uint64_t)&v79 - v12;
  v13 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v13);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000A58C(&qword_1000AF1C8);
  v17 = __chkstk_darwin(v16);
  v86 = (uint64_t)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v79 - v19;
  v21 = objc_msgSend(*(id *)a1, "allowsSnooze");
  v22 = &off_1000AE000;
  v89 = a2;
  v90 = v20;
  v88 = v11;
  if (v21)
  {
    if (qword_1000AED10 != -1)
      swift_once(&qword_1000AED10, sub_100074524);
    v23 = qword_1000B7030;
    v24 = static Font.Weight.semibold.getter();
    v25 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v15, 1, 1, v25);
    v26 = static Font.system(size:weight:design:)(*(_QWORD *)&v24, 0, v15, 24.0);
    v79 = v26;
    sub_100011484((uint64_t)v15, &qword_1000AF198);
    v28 = *(_QWORD *)(a1 + 72);
    v27 = *(_QWORD *)(a1 + 80);
    sub_10000E784((_QWORD *)(a1 + 48), v28);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v28, v27);
    v30 = *(_QWORD *)(a1 + 72);
    v31 = *(_QWORD *)(a1 + 80);
    sub_10000E784((_QWORD *)(a1 + 48), v30);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 32))(v30, v31);
    sub_10000E908(a1, (uint64_t)&v91);
    v33 = swift_allocObject(&unk_10009E7B0, 104, 7);
    v34 = v94;
    *(_OWORD *)(v33 + 48) = v93;
    *(_OWORD *)(v33 + 64) = v34;
    *(_OWORD *)(v33 + 80) = v95;
    *(_QWORD *)(v33 + 96) = v96;
    v35 = v92;
    *(_OWORD *)(v33 + 16) = v91;
    *(_OWORD *)(v33 + 32) = v35;
    *(_QWORD *)&v91 = v23;
    *((_QWORD *)&v91 + 1) = v26;
    *(_QWORD *)&v92 = 8026746;
    *((_QWORD *)&v92 + 1) = 0xE300000000000000;
    *(_QWORD *)&v93 = v29;
    *((_QWORD *)&v93 + 1) = v32;
    *(_QWORD *)&v94 = sub_10000E998;
    *((_QWORD *)&v94 + 1) = v33;
    v36 = LocalizedStringKey.init(stringLiteral:)(0x657A6F6F6E53, 0xE600000000000000);
    v38 = v37;
    LOBYTE(v24) = v39;
    v41 = v40;
    v42 = sub_10000E8C4();
    v43 = (uint64_t)v90;
    View.accessibilityLabel(_:)(v36, v38, LOBYTE(v24) & 1, v41, &type metadata for SmallActionButton, v42);
    swift_release(v33);
    swift_release(v32);
    swift_release(v29);
    swift_bridgeObjectRelease(0xE300000000000000);
    swift_release(v79);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v38);
    v44 = sub_10000A58C(&qword_1000AF1D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
    v22 = &off_1000AE000;
  }
  else
  {
    v45 = sub_10000A58C(&qword_1000AF1D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v20, 1, 1, v45);
  }
  if (v22[418] != (_UNKNOWN *)-1)
    swift_once(&qword_1000AED10, sub_100074524);
  v46 = qword_1000B7030;
  v47 = static Font.Weight.semibold.getter();
  v48 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v15, 1, 1, v48);
  v79 = static Font.system(size:weight:design:)(*(_QWORD *)&v47, 0, v15, 20.0);
  sub_100011484((uint64_t)v15, &qword_1000AF198);
  v49 = *(_QWORD *)(a1 + 72);
  v50 = *(_QWORD *)(a1 + 80);
  sub_10000E784((_QWORD *)(a1 + 48), v49);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 56))(v49, v50);
  v52 = *(_QWORD *)(a1 + 72);
  v53 = *(_QWORD *)(a1 + 80);
  sub_10000E784((_QWORD *)(a1 + 48), v52);
  v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 80))(v52, v53);
  sub_10000E908(a1, (uint64_t)&v91);
  v55 = swift_allocObject(&unk_10009E788, 104, 7);
  v56 = v94;
  *(_OWORD *)(v55 + 48) = v93;
  *(_OWORD *)(v55 + 64) = v56;
  *(_OWORD *)(v55 + 80) = v95;
  *(_QWORD *)(v55 + 96) = v96;
  v57 = v92;
  *(_OWORD *)(v55 + 16) = v91;
  *(_OWORD *)(v55 + 32) = v57;
  v58 = v82;
  v59 = v80;
  v60 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v80, enum case for BlendMode.plusLighter(_:), v83);
  v61 = (uint64_t)v84;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v84, v59, v60);
  v62 = v85;
  v63 = v81;
  sub_10000E800(v61, (uint64_t)v81 + *(int *)(v85 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *v63 = v46;
  v64 = v79;
  v63[1] = v79;
  v63[2] = 0x6B72616D78;
  v63[3] = 0xE500000000000000;
  v63[4] = v51;
  v63[5] = v54;
  v63[6] = (uint64_t)sub_10000E940;
  v63[7] = v55;
  swift_retain(v64);
  swift_bridgeObjectRetain(0xE500000000000000);
  swift_retain(v51);
  swift_retain(v54);
  swift_retain(v55);
  sub_10000E844(v61, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
  swift_release(v55);
  swift_release(v54);
  swift_release(v51);
  swift_bridgeObjectRelease(0xE500000000000000);
  swift_release(v64);
  v65 = LocalizedStringKey.init(stringLiteral:)(0x7475622E706F7473, 0xEB000000006E6F74);
  v67 = v66;
  LOBYTE(v59) = v68;
  v70 = v69;
  v71 = sub_100011020((unint64_t *)&qword_1000AF1A8, &qword_1000AF1A0, (void (*)(void))sub_10000E8C4);
  v72 = (uint64_t)v88;
  View.accessibilityLabel(_:)(v65, v67, v59 & 1, v70, v62, v71);
  swift_bridgeObjectRelease(v70);
  swift_bridgeObjectRelease(v67);
  sub_100011484((uint64_t)v63, &qword_1000AF1A0);
  v73 = v87;
  sub_1000112A4(v72, v87, &qword_1000AF1C0);
  v74 = (uint64_t)v90;
  v75 = v86;
  sub_100011440((uint64_t)v90, v86, &qword_1000AF1C8);
  sub_100011440(v73, v72, &qword_1000AF1C0);
  v76 = v89;
  sub_100011440(v75, v89, &qword_1000AF1C8);
  v77 = sub_10000A58C(&qword_1000AF1D8);
  sub_100011440(v72, v76 + *(int *)(v77 + 48), &qword_1000AF1C0);
  sub_100011484(v73, &qword_1000AF1C0);
  sub_100011484(v74, &qword_1000AF1C8);
  sub_100011484(v72, &qword_1000AF1C0);
  return sub_100011484(v75, &qword_1000AF1C8);
}

uint64_t sub_100009AE4(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_10000E784((_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32));
  v4 = objc_msgSend(*(id *)a1, "alarmIDString");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  a2(v5, v7);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_100009B64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v3 = sub_10000A58C(&qword_1000AF1B8);
  return sub_100009324(v1, a1 + *(int *)(v3 + 44));
}

uint64_t sub_100009BAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  _OWORD v30[3];

  v29[1] = a2;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000AF1E0);
  __chkstk_darwin(v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000AF1E8);
  __chkstk_darwin(v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000A58C(&qword_1000AF1F0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static VerticalAlignment.lastTextBaseline.getter(v14);
  *((_QWORD *)v9 + 1) = 0x4010000000000000;
  v9[16] = 0;
  v17 = sub_10000A58C(&qword_1000AF1F8);
  sub_100009E10(a1, (uint64_t)&v9[*(int *)(v17 + 44)]);
  KeyPath = swift_getKeyPath(&unk_100081280, v18);
  sub_100011440((uint64_t)v9, (uint64_t)v12, &qword_1000AF1E0);
  v20 = &v12[*(int *)(v10 + 36)];
  *(_QWORD *)v20 = KeyPath;
  *((_QWORD *)v20 + 1) = 1;
  v20[16] = 0;
  v21 = sub_100011484((uint64_t)v9, &qword_1000AF1E0);
  v22 = static Alignment.bottomLeading.getter(v21);
  _FrameLayout.init(width:height:alignment:)(v30, 0, 1, 0, 1, v22, v23);
  sub_100011440((uint64_t)v12, (uint64_t)v16, &qword_1000AF1E8);
  v24 = &v16[*(int *)(v13 + 36)];
  v25 = v30[1];
  *(_OWORD *)v24 = v30[0];
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v30[2];
  v26 = sub_100011484((uint64_t)v12, &qword_1000AF1E8);
  static AccessibilityChildBehavior.combine.getter(v26);
  v27 = sub_100011020(&qword_1000AF200, &qword_1000AF1F0, (void (*)(void))sub_10000EA70);
  View.accessibilityElement(children:)(v6, v13, v27);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return sub_100011484((uint64_t)v16, &qword_1000AF1F0);
}

uint64_t sub_100009E10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  id v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[3];

  v114 = a2;
  v3 = type metadata accessor for Text.DateStyle(0);
  __chkstk_darwin(v3);
  v113 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v5);
  v110 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v108 = *(_QWORD *)(v7 - 8);
  v109 = v7;
  __chkstk_darwin(v7);
  v111 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_10000A58C(&qword_1000AF228);
  __chkstk_darwin(v100);
  v105 = (uint64_t *)((char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for Text.TruncationMode(0);
  v103 = *(_QWORD *)(v10 - 8);
  v104 = v10;
  __chkstk_darwin(v10);
  v102 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_10000A58C(&qword_1000AF230);
  __chkstk_darwin(v99);
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_10000A58C(&qword_1000AF238);
  v14 = __chkstk_darwin(v101);
  v107 = (uint64_t)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v115 = (uint64_t)&v97 - v16;
  v112 = a1;
  v17 = objc_msgSend(a1, "displayTitle");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v116[0] = v18;
  v116[1] = v20;
  v21 = sub_10000EB0C();
  v22 = Text.init<A>(_:)(v116, &type metadata for String, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  if (qword_1000AED30 != -1)
    swift_once(&qword_1000AED30, sub_1000745A4);
  v29 = v26 & 1;
  v30 = Text.font(_:)(qword_1000B7050, v22, v24, v26 & 1, v28);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  sub_10000E774(v22, v24, v29);
  swift_bridgeObjectRelease(v28);
  v106 = (id)objc_opt_self(ClockAngelUtilities);
  v37 = Color.init(uiColor:)(objc_msgSend(v106, "mtOrange"));
  v38 = Text.foregroundColor(_:)(v37, v30, v32, v36, v34);
  v40 = v39;
  v42 = v41;
  v98 = v43;
  swift_release(v37);
  LOBYTE(v37) = v42 & 1;
  sub_10000E774(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  KeyPath = swift_getKeyPath(&unk_1000812B0, v44);
  v46 = v102;
  v47 = v103;
  v48 = v104;
  (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, enum case for Text.TruncationMode.tail(_:), v104);
  v50 = swift_getKeyPath(&unk_1000812E0, v49);
  v51 = v105;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))((char *)v105 + *(int *)(v100 + 28), v46, v48);
  *v51 = v50;
  sub_100011440((uint64_t)v51, (uint64_t)&v13[*(int *)(v99 + 36)], &qword_1000AF228);
  *(_QWORD *)v13 = v38;
  *((_QWORD *)v13 + 1) = v40;
  v13[16] = v37;
  v52 = v98;
  *((_QWORD *)v13 + 3) = v98;
  *((_QWORD *)v13 + 4) = KeyPath;
  *((_QWORD *)v13 + 5) = 0x3FE6666666666666;
  sub_10000E764(v38, v40, v37);
  swift_bridgeObjectRetain(v52);
  swift_retain(KeyPath);
  sub_100011484((uint64_t)v51, &qword_1000AF228);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
  sub_10000E774(v38, v40, v37);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v52);
  v53 = v107;
  sub_100011440((uint64_t)v13, v107, &qword_1000AF230);
  *(_WORD *)(v53 + *(int *)(v101 + 36)) = 256;
  sub_100011484((uint64_t)v13, &qword_1000AF230);
  sub_1000112A4(v53, v115, &qword_1000AF238);
  type metadata accessor for Utilities();
  v54 = v112;
  v55 = objc_msgSend(v112, "hour");
  v56 = objc_msgSend(v54, "minute");
  v57 = v110;
  sub_1000510D8((uint64_t)v55, (uint64_t)v56, v110);
  v59 = v108;
  v58 = v109;
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v57, 1, v109);
  if ((_DWORD)v60 == 1)
  {
    v61 = v111;
    Date.init()(v60);
    v62 = sub_100011484(v57, &qword_1000AF178);
  }
  else
  {
    v63 = v58;
    v61 = v111;
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 32))(v111, v57, v63);
  }
  v64 = v113;
  static Text.DateStyle.time.getter(v62);
  v65 = Text.init(_:style:)(v61, v64);
  v67 = v66;
  v69 = v68;
  v71 = v70;
  if (qword_1000AED38 != -1)
    swift_once(&qword_1000AED38, sub_1000745B4);
  v72 = v69 & 1;
  v73 = Text.font(_:)(qword_1000B7058, v65, v67, v72, v71);
  v75 = v74;
  v77 = v76;
  v79 = v78 & 1;
  sub_10000E774(v65, v67, v72);
  swift_bridgeObjectRelease(v71);
  v80 = Color.init(uiColor:)(objc_msgSend(v106, "mtOrange"));
  v81 = Color.opacity(_:)(0.5);
  swift_release(v80);
  v82 = Text.foregroundColor(_:)(v81, v73, v75, v79, v77);
  v84 = v83;
  v86 = v85;
  v88 = v87;
  swift_release(v81);
  v86 &= 1u;
  sub_10000E774(v73, v75, v79);
  swift_bridgeObjectRelease(v77);
  v90 = swift_getKeyPath(&unk_1000812B0, v89);
  v91 = v115;
  sub_100011440(v115, v53, &qword_1000AF238);
  v92 = v114;
  sub_100011440(v53, v114, &qword_1000AF238);
  v93 = sub_10000A58C(&qword_1000AF248);
  v94 = v92 + *(int *)(v93 + 48);
  *(_QWORD *)v94 = v82;
  *(_QWORD *)(v94 + 8) = v84;
  *(_BYTE *)(v94 + 16) = v86;
  *(_QWORD *)(v94 + 24) = v88;
  *(_QWORD *)(v94 + 32) = v90;
  *(_OWORD *)(v94 + 40) = xmmword_100080F50;
  v95 = v92 + *(int *)(v93 + 64);
  *(_QWORD *)v95 = 0x4014000000000000;
  *(_BYTE *)(v95 + 8) = 0;
  sub_10000E764(v82, v84, v86);
  swift_bridgeObjectRetain(v88);
  swift_retain(v90);
  sub_100011484(v91, &qword_1000AF238);
  sub_10000E774(v82, v84, v86);
  swift_release(v90);
  swift_bridgeObjectRelease(v88);
  return sub_100011484(v53, &qword_1000AF238);
}

uint64_t sub_10000A554@<X0>(uint64_t a1@<X8>)
{
  void **v1;

  return sub_100009BAC(*v1, a1);
}

uint64_t sub_10000A55C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100089618, 1);
}

uint64_t sub_10000A56C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000895F0, 1);
}

uint64_t sub_10000A57C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000895C8, 1);
}

uint64_t sub_10000A58C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000A5CC@<X0>(id *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v50;

  v4 = sub_10000A58C(&qword_1000AF3A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000AF3A8);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000AF3B0);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_10000A58C(&qword_1000AF3B8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = GeometryProxy.size.getter(v14);
  *v12 = static Alignment.center.getter();
  v12[1] = v18;
  v19 = *(int *)(sub_10000A58C(&qword_1000AF3C0) + 44);
  if (qword_1000AED50 != -1)
    swift_once(&qword_1000AED50, sub_10007486C);
  v20 = *(double *)&qword_1000B7070;
  if (qword_1000AED58 != -1)
    swift_once(&qword_1000AED58, sub_10007487C);
  v21 = (uint64_t)v12 + v19;
  v22 = *(double *)&qword_1000B7078 * 0.5;
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v23 = sub_10000A58C(&qword_1000AF3C8);
  v24 = sub_10000A924(a1, (uint64_t)&v6[*(int *)(v23 + 44)], v17, v20);
  v25 = static Edge.Set.vertical.getter(v24);
  v26 = EdgeInsets.init(_all:)(v22);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_100011440((uint64_t)v6, (uint64_t)v9, &qword_1000AF3A0);
  v33 = &v9[*(int *)(v7 + 36)];
  *v33 = v25;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  v34 = sub_100011484((uint64_t)v6, &qword_1000AF3A0);
  v35 = static Edge.Set.horizontal.getter(v34);
  v36 = EdgeInsets.init(_all:)(v20);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  sub_100011440((uint64_t)v9, v21, &qword_1000AF3A8);
  v43 = v21 + *(int *)(sub_10000A58C(&qword_1000AF3D0) + 36);
  *(_BYTE *)v43 = v35;
  *(double *)(v43 + 8) = v36;
  *(_QWORD *)(v43 + 16) = v38;
  *(_QWORD *)(v43 + 24) = v40;
  *(_QWORD *)(v43 + 32) = v42;
  *(_BYTE *)(v43 + 40) = 0;
  v44 = sub_100011484((uint64_t)v9, &qword_1000AF3A8);
  v45 = static Color.black.getter(v44);
  v46 = static Edge.Set.all.getter();
  sub_100011440((uint64_t)v12, (uint64_t)v16, &qword_1000AF3B0);
  v47 = &v16[*(int *)(v13 + 36)];
  *(_QWORD *)v47 = v45;
  v47[8] = v46;
  v48 = sub_100011484((uint64_t)v12, &qword_1000AF3B0);
  LOBYTE(v45) = static Edge.Set.vertical.getter(v48);
  sub_100011440((uint64_t)v16, a2, &qword_1000AF3B8);
  *(_BYTE *)(a2 + *(int *)(sub_10000A58C(&qword_1000AF3D8) + 36)) = v45;
  return sub_100011484((uint64_t)v16, &qword_1000AF3B8);
}

uint64_t sub_10000A924@<X0>(id *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE v22[368];
  _BYTE v23[384];
  _QWORD v24[49];
  _QWORD v25[2];
  char v26;
  _BYTE v27[375];

  v8 = sub_10000A58C(&qword_1000AF3E0);
  v9 = __chkstk_darwin(v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v9);
  v14 = &v22[-v13];
  *(_QWORD *)v14 = static VerticalAlignment.top.getter(v12);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = sub_10000A58C(&qword_1000AF3E8);
  v16 = sub_10000AB08(a1, (uint64_t)&v14[*(int *)(v15 + 44)], a3, a4);
  v17 = static VerticalAlignment.center.getter(v16);
  sub_10000D688(a1, v22);
  v23[376] = 1;
  memcpy(&v23[7], v22, 0x170uLL);
  sub_100011440((uint64_t)v14, (uint64_t)v11, &qword_1000AF3E0);
  sub_100011440((uint64_t)v11, a2, &qword_1000AF3E0);
  v18 = sub_10000A58C(&qword_1000AF3F0);
  v19 = a2 + *(int *)(v18 + 48);
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = (void *)(a2 + *(int *)(v18 + 64));
  v24[0] = v17;
  v24[1] = 0;
  LOBYTE(v24[2]) = 1;
  memcpy((char *)&v24[2] + 1, v23, 0x177uLL);
  memcpy(v20, v24, 0x188uLL);
  sub_1000102C4((uint64_t)v24);
  sub_100011484((uint64_t)v14, &qword_1000AF3E0);
  v25[0] = v17;
  v25[1] = 0;
  v26 = 1;
  memcpy(v27, v23, sizeof(v27));
  sub_1000104D0((uint64_t)v25);
  return sub_100011484((uint64_t)v11, &qword_1000AF3E0);
}

uint64_t sub_10000AB08@<X0>(id *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t KeyPath;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  void (*v87)(char *);
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  id *v102;
  char *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const __CTFont *v110;
  CGFloat CapHeight;
  uint64_t v112;
  uint64_t v113;
  CGFloat *v114;
  double v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (**v132)();
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  void (*v146)(char *, _QWORD, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  double v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (**v212)();
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  id *v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  char v300;
  _OWORD v301[3];

  v288 = a2;
  v282 = type metadata accessor for Color.RGBColorSpace(0);
  v280 = *(_QWORD *)(v282 - 8);
  __chkstk_darwin(v282);
  v281 = (char *)&v231 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = type metadata accessor for Font._StylisticAlternative(0);
  v256 = *(_QWORD *)(v257 - 8);
  __chkstk_darwin(v257);
  v255 = (char *)&v231 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000AF410);
  __chkstk_darwin(v9);
  v287 = (char *)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = sub_10000A58C(&qword_1000AF418);
  v262 = *(_QWORD *)(v265 - 8);
  __chkstk_darwin(v265);
  v260 = (char *)&v231 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000AF420);
  __chkstk_darwin(v12);
  v264 = (uint64_t)&v231 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v259 = sub_10000A58C(&qword_1000AF428);
  __chkstk_darwin(v259);
  v266 = (uint64_t)&v231 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_10000A58C(&qword_1000AF430);
  __chkstk_darwin(v261);
  v267 = (uint64_t)&v231 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = sub_10000A58C(&qword_1000AF438);
  __chkstk_darwin(v263);
  v270 = (uint64_t)&v231 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = sub_10000A58C(&qword_1000AF440);
  __chkstk_darwin(v268);
  v271 = (uint64_t)&v231 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = sub_10000A58C(&qword_1000AF448);
  __chkstk_darwin(v269);
  v273 = (uint64_t)&v231 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = sub_10000A58C(&qword_1000AF450);
  __chkstk_darwin(v272);
  v276 = (uint64_t)&v231 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v275 = sub_10000A58C(&qword_1000AF458);
  __chkstk_darwin(v275);
  v277 = (uint64_t)&v231 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v274 = sub_10000A58C(&qword_1000AF460);
  __chkstk_darwin(v274);
  v278 = (uint64_t)&v231 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = sub_10000A58C(&qword_1000AF468);
  __chkstk_darwin(v283);
  v284 = (uint64_t)&v231 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10000A58C(&qword_1000AF470);
  v24 = __chkstk_darwin(v23);
  v286 = (uint64_t)&v231 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v279 = (char *)&v231 - v27;
  __chkstk_darwin(v26);
  v285 = (uint64_t)&v231 - v28;
  v233 = type metadata accessor for Font.Context(0);
  v232 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v231 = (uint64_t)&v231 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v292 = type metadata accessor for DynamicTypeSize(0);
  v240 = *(char **)(v292 - 8);
  __chkstk_darwin(v292);
  v291 = (char *)&v231 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10000A58C(&qword_1000AF478);
  __chkstk_darwin(v31);
  v33 = (char *)&v231 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = sub_10000A58C(&qword_1000AF480);
  __chkstk_darwin(v239);
  v35 = (char *)&v231 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = sub_10000A58C(&qword_1000AF488);
  __chkstk_darwin(v237);
  v37 = (char *)&v231 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = sub_10000A58C(&qword_1000AF490);
  v234 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235);
  v39 = (char *)&v231 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10000A58C(&qword_1000AF498);
  __chkstk_darwin(v40);
  v289 = (uint64_t)&v231 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_10000A58C(&qword_1000AF4A0);
  __chkstk_darwin(v236);
  v43 = (char *)&v231 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = sub_10000A58C(&qword_1000AF4A8);
  __chkstk_darwin(v243);
  v241 = (uint64_t)&v231 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_10000A58C(&qword_1000AF4B0);
  v247 = *(_QWORD *)(v248 - 8);
  __chkstk_darwin(v248);
  v246 = (char *)&v231 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_10000A58C(&qword_1000AF4B8);
  __chkstk_darwin(v242);
  v250 = (char *)&v231 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v249 = sub_10000A58C(&qword_1000AF4C0);
  __chkstk_darwin(v249);
  v251 = (uint64_t)&v231 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = sub_10000A58C(&qword_1000AF4C8);
  __chkstk_darwin(v253);
  v254 = (uint64_t)&v231 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10000A58C(&qword_1000AF4D0);
  v50 = __chkstk_darwin(v49);
  v258 = (uint64_t)&v231 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __chkstk_darwin(v50);
  v252 = (char *)&v231 - v53;
  __chkstk_darwin(v52);
  v294 = (uint64_t)&v231 - v54;
  v55 = type metadata accessor for AlarmAlertFullScreen(0);
  v244 = *(_QWORD *)(v55 - 8);
  v56 = __chkstk_darwin(v55);
  v293 = (uint64_t)&v231 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = v57;
  __chkstk_darwin(v56);
  v59 = (char *)&v231 - v58;
  v60 = objc_msgSend(*a1, "isSleepAlarm");
  v295 = a1;
  sub_10000E800((uint64_t)a1, (uint64_t)v59, type metadata accessor for AlarmAlertFullScreen);
  v290 = v55;
  if (v60)
  {
    v61 = &v59[*(int *)(v55 + 76)];
    v63 = *(_QWORD *)v61;
    v62 = *((_QWORD *)v61 + 1);
    *(_QWORD *)&v301[0] = v63;
    *((_QWORD *)&v301[0] + 1) = v62;
    sub_10000A58C(&qword_1000AF5D0);
    State.wrappedValue.getter(&v296);
    v64 = v296;
    if (qword_1000AECD0 != -1)
      swift_once(&qword_1000AECD0, sub_1000272D4);
    v65 = sub_1000278F4();
    if (v65)
    {
      v66 = v65;
      LODWORD(KeyPath) = objc_msgSend(v65, "isAuthorizedForWidgetUpdates");

      if ((_DWORD)KeyPath)
      {
        KeyPath = swift_getKeyPath(&unk_1000814C0, v68);
        *(_QWORD *)&v301[0] = v64;
        v69 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v301, KeyPath, v69);
        swift_release(KeyPath);
        LOBYTE(KeyPath) = *(_BYTE *)(v64 + 48);
      }
    }
    else
    {
      LOBYTE(KeyPath) = 0;
    }
    swift_release(v64);
  }
  else
  {
    LOBYTE(KeyPath) = 0;
  }
  sub_10000E844((uint64_t)v59, type metadata accessor for AlarmAlertFullScreen);
  v70 = (uint64_t)v295;
  v71 = *v295;
  if (objc_msgSend(*v295, "isSleepAlarm"))
  {
    v72 = sub_10000C414();
    v74 = v73;
  }
  else
  {
    v75 = objc_msgSend(v71, "displayTitle");
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
    v74 = v76;

    v70 = (uint64_t)v295;
  }
  *(_QWORD *)v33 = static HorizontalAlignment.leading.getter();
  *((_QWORD *)v33 + 1) = 0;
  v33[16] = 1;
  v77 = sub_10000A58C(&qword_1000AF4D8);
  sub_10000C6C0(KeyPath, v70, v72, v74, (uint64_t)&v33[*(int *)(v77 + 44)]);
  swift_bridgeObjectRelease(v74);
  v79 = swift_getKeyPath(&unk_100081280, v78);
  sub_100011440((uint64_t)v33, (uint64_t)v35, &qword_1000AF478);
  v80 = &v35[*(int *)(v239 + 36)];
  *(_QWORD *)v80 = v79;
  *((_QWORD *)v80 + 1) = 2;
  v80[16] = 0;
  sub_100011484((uint64_t)v33, &qword_1000AF478);
  if (qword_1000AED60 != -1)
    swift_once(&qword_1000AED60, sub_10007488C);
  v82 = qword_1000B7080;
  v83 = swift_getKeyPath(&unk_100081430, v81);
  sub_100011440((uint64_t)v35, (uint64_t)v37, &qword_1000AF480);
  v84 = v237;
  v85 = (uint64_t *)&v37[*(int *)(v237 + 36)];
  *v85 = v83;
  v85[1] = v82;
  swift_retain(v82);
  sub_100011484((uint64_t)v35, &qword_1000AF480);
  v86 = v240;
  v87 = (void (*)(char *))*((_QWORD *)v240 + 13);
  v88 = v291;
  v238 = enum case for DynamicTypeSize.large(_:);
  v89 = v292;
  v239 = (uint64_t)v87;
  v87(v291);
  v90 = sub_100010B6C();
  View.dynamicTypeSize(_:)(v88, v84, v90);
  v237 = *((_QWORD *)v86 + 1);
  ((void (*)(char *, uint64_t))v237)(v88, v89);
  v91 = sub_100011484((uint64_t)v37, &qword_1000AF488);
  v92 = static Alignment.leading.getter(v91);
  v93 = v289;
  v95 = sub_100061314(0.0, 1, 0.0, 1, a3 * 0.5 - a4, 0, 0.0, 1, v289, 0.0, 1, 0.0, 1, v92, v94);
  (*(void (**)(char *, uint64_t, double))(v234 + 8))(v39, v235, v95);
  if (qword_1000AED78 != -1)
    swift_once(&qword_1000AED78, sub_1000748EC);
  v96 = qword_1000B7098;
  v97 = static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)(v301, 0, 1, v96, 0, v97, v98);
  sub_100011440(v93, (uint64_t)v43, &qword_1000AF498);
  v99 = &v43[*(int *)(v236 + 36)];
  v100 = v301[1];
  *(_OWORD *)v99 = v301[0];
  *((_OWORD *)v99 + 1) = v100;
  *((_OWORD *)v99 + 2) = v301[2];
  sub_100011484(v93, &qword_1000AF498);
  v101 = v290;
  v102 = v295;
  v103 = (char *)v295 + *(int *)(v290 + 40);
  v104 = *v103;
  v240 = v103;
  v105 = *((_QWORD *)v103 + 1);
  LOBYTE(v296) = v104;
  v297 = v105;
  v289 = sub_10000A58C(&qword_1000AF3F8);
  State.wrappedValue.getter(&v300);
  v107 = v293;
  v106 = v294;
  if (v300 == 1)
  {
    v108 = qword_1000B7080;
    v109 = v231;
    sub_100034360(v231);
    v110 = (const __CTFont *)Font.platformFont(in:)(v109, v108);
    (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v109, v233);
    CapHeight = CTFontGetCapHeight(v110);

  }
  else
  {
    CapHeight = 50.0;
  }
  v112 = v241;
  sub_100011440((uint64_t)v43, v241, &qword_1000AF4A0);
  v113 = v243;
  v114 = (CGFloat *)(v112 + *(int *)(v243 + 36));
  *v114 = 0.0;
  v114[1] = CapHeight;
  sub_100011484((uint64_t)v43, &qword_1000AF4A0);
  if (objc_msgSend(*v102, "isSleepAlarm"))
    v115 = 0.0;
  else
    v115 = 1.0;
  v116 = sub_100011020(&qword_1000AF508, &qword_1000AF4A8, (void (*)(void))sub_100010C8C);
  v117 = v246;
  View.hyphenationFactor(_:)(v113, v116, v115);
  sub_100011484(v112, &qword_1000AF4A8);
  v118 = (char *)v102 + *(int *)(v101 + 60);
  v119 = *v118;
  v120 = *((_QWORD *)v118 + 1);
  LOBYTE(v296) = v119;
  v297 = v120;
  State.wrappedValue.getter(&v300);
  if (v300)
    v121 = 1.0;
  else
    v121 = 0.0;
  v122 = v247;
  v123 = (uint64_t)v250;
  v124 = v248;
  (*(void (**)(char *, char *, uint64_t))(v247 + 16))(v250, v117, v248);
  *(double *)(v123 + *(int *)(v242 + 36)) = v121;
  (*(void (**)(char *, uint64_t))(v122 + 8))(v117, v124);
  if (qword_1000AEE58 != -1)
    swift_once(&qword_1000AEE58, sub_100074D70);
  v125 = qword_1000B7178;
  v126 = v251;
  sub_100011440(v123, v251, &qword_1000AF4B8);
  *(_QWORD *)(v126 + *(int *)(v249 + 36)) = v125;
  swift_retain(v125);
  sub_100011484(v123, &qword_1000AF4B8);
  sub_10000E800((uint64_t)v102, v107, type metadata accessor for AlarmAlertFullScreen);
  v127 = *(unsigned __int8 *)(v244 + 80);
  v128 = (v127 + 16) & ~v127;
  v249 = v128 + v245;
  v248 = v127 | 7;
  v129 = swift_allocObject(&unk_10009E928, v128 + v245, v127 | 7);
  v250 = (char *)v128;
  sub_100010234(v107, v129 + v128);
  v130 = v254;
  sub_100011440(v126, v254, &qword_1000AF4C0);
  v131 = v253;
  v132 = (uint64_t (**)())(v130 + *(int *)(v253 + 36));
  *v132 = sub_100010D48;
  v132[1] = (uint64_t (*)())v129;
  v132[2] = 0;
  v132[3] = 0;
  sub_100011484(v126, &qword_1000AF4C0);
  v133 = LocalizedStringKey.init(stringLiteral:)(0x6D72616C41, 0xE500000000000000);
  v135 = v134;
  v137 = v136;
  v139 = v138;
  v140 = sub_100011020(&qword_1000AF520, &qword_1000AF4C8, (void (*)(void))sub_100010D54);
  v141 = v137 & 1;
  v142 = (uint64_t)v252;
  View.accessibilityLabel(_:)(v133, v135, v141, v139, v131, v140);
  swift_bridgeObjectRelease(v139);
  swift_bridgeObjectRelease(v135);
  sub_100011484(v130, &qword_1000AF4C8);
  v143 = sub_1000112A4(v142, v106, &qword_1000AF4D0);
  v144 = v287;
  static TimeZone.current.getter(v143);
  v145 = type metadata accessor for TimeZone(0);
  v146 = *(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v145 - 8) + 56);
  v254 = v145;
  v253 = (uint64_t)v146;
  v146(v144, 0, 1);
  v147 = Text.init(dateFormat:timeZone:)(1835874920, 0xE400000000000000, v144);
  v149 = v148;
  v151 = v150;
  v153 = v152;
  if (qword_1000AED68 != -1)
    swift_once(&qword_1000AED68, sub_1000748B0);
  v154 = v151 & 1;
  v155 = Font.monospacedDigit()(qword_1000B7088);
  v156 = v256;
  v157 = v255;
  v158 = v257;
  (*(void (**)(char *, _QWORD, uint64_t))(v256 + 104))(v255, enum case for Font._StylisticAlternative.three(_:), v257);
  v159 = Font._stylisticAlternative(_:)(v157, v155);
  swift_release(v155);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v158);
  v160 = Text.font(_:)(v159, v147, v149, v154, v153);
  v162 = v161;
  LOBYTE(v156) = v163;
  v165 = v164;
  swift_release(v159);
  sub_10000E774(v147, v149, v154);
  swift_bridgeObjectRelease(v153);
  v296 = v160;
  v297 = v162;
  v298 = v156 & 1;
  v299 = v165;
  v167 = v291;
  v166 = v292;
  ((void (*)(char *, _QWORD, uint64_t))v239)(v291, v238, v292);
  v168 = v260;
  View.dynamicTypeSize(_:)(v167, &type metadata for Text, &protocol witness table for Text);
  ((void (*)(char *, uint64_t))v237)(v167, v166);
  sub_10000E774(v296, v297, v298);
  v169 = swift_bridgeObjectRelease(v299);
  v170 = static Alignment.bottomTrailing.getter(v169);
  v171 = v264;
  v173 = sub_10006136C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v264, 0.0, 1, 0.0, 1, v170, v172);
  v174 = (*(uint64_t (**)(char *, uint64_t, double))(v262 + 8))(v168, v265, v173);
  v175 = static Color.white.getter(v174);
  v177 = swift_getKeyPath(&unk_100081460, v176);
  v178 = v266;
  sub_100011440(v171, v266, &qword_1000AF420);
  v179 = (uint64_t *)(v178 + *(int *)(v259 + 36));
  *v179 = v177;
  v179[1] = v175;
  sub_100011484(v171, &qword_1000AF420);
  v181 = swift_getKeyPath(&unk_100081280, v180);
  v182 = v267;
  sub_100011440(v178, v267, &qword_1000AF428);
  v183 = v182 + *(int *)(v261 + 36);
  *(_QWORD *)v183 = v181;
  *(_QWORD *)(v183 + 8) = 1;
  *(_BYTE *)(v183 + 16) = 0;
  sub_100011484(v178, &qword_1000AF428);
  v185 = swift_getKeyPath(&unk_100081490, v184);
  v186 = v270;
  sub_100011440(v182, v270, &qword_1000AF430);
  v187 = v186 + *(int *)(v263 + 36);
  *(_QWORD *)v187 = v185;
  *(_BYTE *)(v187 + 8) = 1;
  sub_100011484(v182, &qword_1000AF430);
  v188 = v281;
  (*(void (**)(char *, _QWORD, uint64_t))(v280 + 104))(v281, enum case for Color.RGBColorSpace.sRGBLinear(_:), v282);
  v189 = 0.0;
  v190 = Color.init(_:white:opacity:)(v188, 0.0, 0.33);
  v191 = v271;
  sub_100011440(v186, v271, &qword_1000AF438);
  v192 = (uint64_t *)(v191 + *(int *)(v268 + 36));
  *v192 = v190;
  v192[1] = 0x3FF0000000000000;
  v192[2] = 0;
  v192[3] = 0;
  sub_100011484(v186, &qword_1000AF438);
  v194 = swift_getKeyPath(&unk_1000812B0, v193);
  v195 = v273;
  sub_100011440(v191, v273, &qword_1000AF440);
  v196 = (uint64_t *)(v195 + *(int *)(v269 + 36));
  *v196 = v194;
  v196[1] = 0x3FE6666666666666;
  sub_100011484(v191, &qword_1000AF440);
  v197 = *((_QWORD *)v240 + 1);
  LOBYTE(v296) = *v240;
  v297 = v197;
  State.wrappedValue.getter(&v300);
  if (v300)
    v198 = 0.0;
  else
    v198 = 50.0;
  v199 = v276;
  sub_100011440(v195, v276, &qword_1000AF448);
  v200 = v199 + *(int *)(v272 + 36);
  *(_QWORD *)v200 = 0;
  *(double *)(v200 + 8) = v198;
  sub_100011484(v195, &qword_1000AF448);
  v201 = (uint64_t)v295;
  v202 = (char *)v295 + *(int *)(v290 + 56);
  v203 = *v202;
  v204 = *((_QWORD *)v202 + 1);
  LOBYTE(v296) = v203;
  v297 = v204;
  State.wrappedValue.getter(&v300);
  if (v300)
    v189 = 1.0;
  v205 = v277;
  sub_100011440(v199, v277, &qword_1000AF450);
  *(double *)(v205 + *(int *)(v275 + 36)) = v189;
  sub_100011484(v199, &qword_1000AF450);
  v206 = qword_1000B7178;
  v207 = v278;
  sub_100011440(v205, v278, &qword_1000AF458);
  *(_QWORD *)(v207 + *(int *)(v274 + 36)) = v206;
  swift_retain(v206);
  sub_100011484(v205, &qword_1000AF458);
  v208 = v293;
  sub_10000E800(v201, v293, type metadata accessor for AlarmAlertFullScreen);
  v209 = swift_allocObject(&unk_10009E950, v249, v248);
  sub_100010234(v208, (uint64_t)&v250[v209]);
  v210 = v284;
  sub_100011440(v207, v284, &qword_1000AF460);
  v211 = v283;
  v212 = (uint64_t (**)())(v210 + *(int *)(v283 + 36));
  *v212 = sub_100010EA8;
  v212[1] = (uint64_t (*)())v209;
  v212[2] = 0;
  v212[3] = 0;
  v213 = sub_100011484(v207, &qword_1000AF460);
  static TimeZone.current.getter(v213);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v253)(v144, 0, 1, v254);
  v214 = Text.init(dateFormat:timeZone:)(0x61206D6D3A68, 0xE600000000000000, v144);
  v216 = v215;
  v218 = v217;
  v220 = v219 & 1;
  v221 = sub_100011020(&qword_1000AF548, &qword_1000AF468, (void (*)(void))sub_100010EB4);
  v222 = (uint64_t)v279;
  View.accessibilityLabel(_:)(v214, v216, v220, v218, v211, v221);
  sub_10000E774(v214, v216, v220);
  swift_bridgeObjectRelease(v218);
  sub_100011484(v210, &qword_1000AF468);
  v223 = v285;
  sub_1000112A4(v222, v285, &qword_1000AF470);
  v224 = v294;
  v225 = v258;
  sub_100011440(v294, v258, &qword_1000AF4D0);
  v226 = v286;
  sub_100011440(v223, v286, &qword_1000AF470);
  v227 = v288;
  sub_100011440(v225, v288, &qword_1000AF4D0);
  v228 = sub_10000A58C(&qword_1000AF5C8);
  v229 = v227 + *(int *)(v228 + 48);
  *(_QWORD *)v229 = 0;
  *(_BYTE *)(v229 + 8) = 1;
  sub_100011440(v226, v227 + *(int *)(v228 + 64), &qword_1000AF470);
  sub_100011484(v223, &qword_1000AF470);
  sub_100011484(v224, &qword_1000AF4D0);
  sub_100011484(v226, &qword_1000AF470);
  return sub_100011484(v225, &qword_1000AF4D0);
}

uint64_t sub_10000C414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Class isa;
  uint64_t v14;
  Class v15;
  uint64_t v16;
  Class v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  Swift::String v32;
  Swift::String v33;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Calendar(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v10);
  isa = Calendar._bridgeToObjectiveC()().super.isa;
  v14 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  static Date.now.getter(v14);
  v15 = Date._bridgeToObjectiveC()().super.isa;
  v16 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static Locale.current.getter(v16);
  v17 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v18 = -[objc_class hksp_dayPeriodForDate:locale:](isa, "hksp_dayPeriodForDate:locale:", v15, v17);

  v19 = 0x65764520646F6F47;
  v20 = 0xEA00000000007468;
  v21 = 0x67694E20646F6F47;
  if (v18 == (id)2)
  {
    v21 = 0x74664120646F6F47;
    v20 = 0xEE006E6F6F6E7265;
  }
  if (v18 == (id)3)
    v20 = 0xEC000000676E696ELL;
  else
    v19 = v21;
  v22 = (unint64_t)v18 >= 2;
  if ((unint64_t)v18 >= 2)
    v23 = v19;
  else
    v23 = 0x726F4D20646F6F47;
  if (v22)
    v24 = (void *)v20;
  else
    v24 = (void *)0xEC000000676E696ELL;
  v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v33._object = (void *)0x8000000100084D60;
  v26._countAndFlagsBits = v23;
  v26._object = v24;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0xD000000000000014;
  v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v33);
  swift_bridgeObjectRelease(v24);

  v32 = v28;
  v29 = sub_10000EB0C();
  v30 = StringProtocol.localizedUppercase.getter(&type metadata for String, v29);
  swift_bridgeObjectRelease(v28._object);
  return v30;
}

uint64_t sub_10000C6C0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t KeyPath;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;

  v10 = sub_10000A58C(&qword_1000AF5E0);
  __chkstk_darwin(v10);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000A58C(&qword_1000AF5E8);
  __chkstk_darwin(v13);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10000A58C(&qword_1000AF5F0);
  v90 = *(_QWORD *)(v16 - 8);
  v91 = v16;
  __chkstk_darwin(v16);
  v89 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000A58C(&qword_1000AF5F8);
  v19 = __chkstk_darwin(v18);
  v98 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v76 - v22;
  v97 = static VerticalAlignment.center.getter(v21);
  if ((a1 & 1) != 0)
  {
    v24 = sub_10000CD54(a2, (uint64_t)&v99);
    v87 = v99;
    v95 = v100;
    v96 = *((_QWORD *)&v99 + 1);
    v94 = v101;
    v82 = v102;
    v81 = v103;
    v80 = v104;
    v88 = v105;
    v79 = static Color.secondary.getter(v24);
    KeyPath = swift_getKeyPath(&unk_100081460, v25);
    *(_QWORD *)v23 = static VerticalAlignment.center.getter(KeyPath);
    *((_QWORD *)v23 + 1) = 0;
    v23[16] = 1;
    v78 = &v23[*(int *)(sub_10000A58C(&qword_1000AF618) + 44)];
    *(_QWORD *)&v99 = a3;
    *((_QWORD *)&v99 + 1) = a4;
    v26 = sub_10000EB0C();
    swift_bridgeObjectRetain(a4);
    v27 = Text.init<A>(_:)(&v99, &type metadata for String, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32 & 1;
    v34 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
    v35 = Color.init(uiColor:)(v34);
    v86 = a5;
    v36 = v35;
    v37 = Text.foregroundColor(_:)(v35, v27, v29, v33, v31);
    v84 = v10;
    v38 = v37;
    v85 = v13;
    v40 = v39;
    v83 = v12;
    v42 = v41;
    v92 = v23;
    v44 = v43;
    swift_release(v36);
    LOBYTE(v36) = v42 & 1;
    sub_10000E774(v27, v29, v33);
    swift_bridgeObjectRelease(v31);
    *(_QWORD *)&v99 = v38;
    *((_QWORD *)&v99 + 1) = v40;
    LOBYTE(v100) = v42 & 1;
    v101 = v44;
    v45 = v89;
    View.lineLimit(_:reservesSpace:)(2, 1, &type metadata for Text, &protocol witness table for Text);
    sub_10000E774(v38, v40, v36);
    swift_bridgeObjectRelease(v44);
    v47 = v90;
    v46 = v91;
    v48 = v78;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v78, v45, v91);
    *(_WORD *)&v48[*(int *)(sub_10000A58C(&qword_1000AF620) + 36)] = 256;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v45, v46);
    sub_100011440((uint64_t)v92, v98, &qword_1000AF5F8);
    v49 = v96;
    *(_QWORD *)v15 = v97;
    *((_QWORD *)v15 + 1) = 0;
    v15[16] = 1;
    v50 = v87;
    *((_QWORD *)v15 + 3) = v87;
    *((_QWORD *)v15 + 4) = v49;
    v51 = v94;
    LOBYTE(v36) = v95;
    *((_QWORD *)v15 + 5) = v95;
    *((_QWORD *)v15 + 6) = v51;
    v52 = v82;
    v53 = v81;
    *((_QWORD *)v15 + 7) = v82;
    *((_QWORD *)v15 + 8) = v53;
    LOBYTE(v33) = v80;
    v15[72] = v80;
    v54 = v88;
    v55 = KeyPath;
    *((_QWORD *)v15 + 10) = v88;
    *((_QWORD *)v15 + 11) = v55;
    v56 = v79;
    *((_QWORD *)v15 + 12) = v79;
    v77 = v15;
    v57 = sub_10000A58C(&qword_1000AF628);
    sub_100011440(v98, (uint64_t)&v15[*(int *)(v57 + 48)], &qword_1000AF5F8);
    v58 = v50;
    sub_100011350(v50, v49, v36, v51);
    sub_10000E764(v52, v53, v33);
    swift_bridgeObjectRetain(v54);
    v59 = KeyPath;
    swift_retain(KeyPath);
    swift_retain(v56);
    v60 = v58;
    v61 = v58;
    LOBYTE(v51) = v95;
    v62 = v96;
    v63 = v94;
    sub_100011350(v61, v96, v95, v94);
    sub_10000E764(v52, v53, v33);
    swift_bridgeObjectRetain(v54);
    swift_retain(v59);
    swift_retain(v56);
    sub_100011484(v98, &qword_1000AF5F8);
    sub_100011380(v60, v62, v51, v63);
    sub_10000E774(v52, v53, v33);
    swift_release(v56);
    swift_release(v59);
    swift_bridgeObjectRelease(v54);
    v64 = (uint64_t)v77;
    v65 = (uint64_t)v83;
    sub_100011440((uint64_t)v77, (uint64_t)v83, &qword_1000AF5E8);
    swift_storeEnumTagMultiPayload(v65, v84, 0);
    v66 = sub_10000A58C(&qword_1000AF600);
    v67 = sub_100011680(&qword_1000AF608, &qword_1000AF5E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v68 = sub_100011680(&qword_1000AF610, &qword_1000AF600, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v65, v85, v66, v67, v68);
    sub_100011484(v64, &qword_1000AF5E8);
    sub_100011484((uint64_t)v92, &qword_1000AF5F8);
    sub_100011380(v87, v96, v95, v94);
    sub_10000E774(v52, v53, v33);
    swift_release(v56);
    swift_release(KeyPath);
    return swift_bridgeObjectRelease(v88);
  }
  else
  {
    sub_10000D020(a3, a4, (uint64_t *)&v99);
    v70 = v100;
    v71 = v101;
    v72 = v99;
    *(_QWORD *)v12 = v97;
    *((_QWORD *)v12 + 1) = 0;
    v12[16] = 1;
    *(_OWORD *)(v12 + 24) = v72;
    v12[40] = v70;
    *((_QWORD *)v12 + 6) = v71;
    swift_storeEnumTagMultiPayload(v12, v10, 1);
    v73 = sub_10000A58C(&qword_1000AF600);
    v74 = sub_100011680(&qword_1000AF608, &qword_1000AF5E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v75 = sub_100011680(&qword_1000AF610, &qword_1000AF600, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v12, v13, v73, v74, v75);
  }
}

uint64_t sub_10000CD54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 76));
  v9 = *v7;
  v8 = v7[1];
  v40 = *v7;
  v41 = v8;
  v39[1] = sub_10000A58C(&qword_1000AF5D0);
  State.wrappedValue.getter(&v42);
  v10 = v42;
  KeyPath = swift_getKeyPath(&unk_1000814E8, v11);
  v40 = v10;
  v13 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v40, KeyPath, v13);
  swift_release(KeyPath);
  v14 = *(_QWORD *)(v10 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  v15 = *(_QWORD *)(v10 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8);
  swift_bridgeObjectRetain(v15);
  swift_release(v10);
  if (v15)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
    v17 = Image.init(systemName:)(v14, v15);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release(v17);
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
    v19 = LocalizedStringKey.init(stringInterpolation:)(v6);
    v20 = Text.init(_:tableName:bundle:comment:)(v19);
    v22 = v21;
    v15 = v23;
    v25 = v24 & 1;
    v9 = *v7;
    v8 = v7[1];
  }
  else
  {
    v20 = 0;
    v22 = 0;
    v25 = 0;
  }
  v40 = v9;
  v41 = v8;
  State.wrappedValue.getter(&v42);
  v26 = v42;
  v28 = swift_getKeyPath(&unk_100081510, v27);
  v40 = v26;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v40, v28, v13);
  swift_release(v28);
  v30 = *(_QWORD *)(v26 + 96);
  v29 = *(_QWORD *)(v26 + 104);
  swift_bridgeObjectRetain(v29);
  swift_release(v26);
  v40 = v30;
  v41 = v29;
  v31 = sub_10000EB0C();
  v32 = Text.init<A>(_:)(&v40, &type metadata for String, v31);
  v34 = v33;
  v36 = v35;
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  LOBYTE(v28) = v37 & 1;
  *(_QWORD *)(a2 + 16) = v25;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v32;
  *(_QWORD *)(a2 + 40) = v33;
  *(_BYTE *)(a2 + 48) = v37 & 1;
  *(_QWORD *)(a2 + 56) = v35;
  sub_100011350(v20, v22, v25, v15);
  sub_10000E764(v32, v34, v28);
  swift_bridgeObjectRetain(v36);
  sub_10000E774(v32, v34, v28);
  swift_bridgeObjectRelease(v36);
  return sub_100011380(v20, v22, v25, v15);
}

uint64_t sub_10000D020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t result;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD v59[3];

  v58 = a3;
  v5 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 1);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v8);
  if (qword_1000AEE10 != -1)
    swift_once(&qword_1000AEE10, sub_100074BD4);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(qword_1000B7130);
  v9._countAndFlagsBits = 32;
  v9._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
  v10 = LocalizedStringKey.init(stringInterpolation:)(v7);
  v11 = Text.init(_:tableName:bundle:comment:)(v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Color.secondary.getter();
  v19 = Text.foregroundColor(_:)(v18, v11, v13, v17, v15);
  v55 = v20;
  v56 = v19;
  v22 = v21;
  v57 = v23;
  swift_release(v18);
  v54 = v22 & 1;
  sub_10000E774(v11, v13, v17);
  swift_bridgeObjectRelease(v15);
  v59[0] = a1;
  v59[1] = a2;
  v24 = sub_10000EB0C();
  swift_bridgeObjectRetain(a2);
  v25 = Text.init<A>(_:)(v59, &type metadata for String, v24);
  v27 = v26;
  v29 = v28;
  v31 = v30 & 1;
  v32 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
  v33 = Color.init(uiColor:)(v32);
  v34 = Text.foregroundColor(_:)(v33, v25, v27, v31, v29);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  swift_release(v33);
  v41 = v38 & 1;
  sub_10000E774(v25, v27, v31);
  swift_bridgeObjectRelease(v29);
  v43 = v55;
  v42 = v56;
  LOBYTE(v25) = v54;
  v44 = v57;
  v52 = static Text.+ infix(_:_:)(v56, v55, v54, v57, v34, v36, v41, v40);
  v53 = v45;
  v47 = v46;
  LOBYTE(v29) = v48;
  sub_10000E774(v34, v36, v41);
  swift_bridgeObjectRelease(v40);
  sub_10000E774(v42, v43, v25);
  result = swift_bridgeObjectRelease(v44);
  v50 = v58;
  *v58 = v52;
  v50[1] = v47;
  *((_BYTE *)v50 + 16) = v29 & 1;
  v50[3] = v53;
  return result;
}

uint64_t sub_10000D2C0()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE28 != -1)
    swift_once(&qword_1000AEE28, sub_100074C44);
  v0 = __chkstk_darwin(qword_1000B7148);
  withAnimation<A>(_:_:)(v0, sub_100011320);
  if (qword_1000AEE30 != -1)
    swift_once(&qword_1000AEE30, sub_100074C58);
  v1 = __chkstk_darwin(qword_1000B7150);
  return withAnimation<A>(_:_:)(v1, sub_100011338);
}

uint64_t sub_10000D3C4(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 40));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10000D434(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 60));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10000D4A4()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE18 != -1)
    swift_once(&qword_1000AEE18, sub_100074C08);
  v0 = __chkstk_darwin(qword_1000B7138);
  withAnimation<A>(_:_:)(v0, sub_1000112F0);
  if (qword_1000AEE20 != -1)
    swift_once(&qword_1000AEE20, sub_100074C1C);
  v1 = __chkstk_darwin(qword_1000B7140);
  return withAnimation<A>(_:_:)(v1, sub_100011308);
}

uint64_t sub_10000D5A8(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 36));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10000D618(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 56));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

_QWORD *sub_10000D688@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  double v42;
  char *v43;
  char v44;
  uint64_t v45;
  double v46;
  _QWORD *v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  _OWORD v84[3];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _QWORD v105[2];
  __int128 v106;
  __int128 v107;
  uint64_t (*v108)();
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)();
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[23];
  _BYTE v125[183];
  _QWORD v126[2];
  __int128 v127;
  __int128 v128;
  uint64_t (*v129)();
  uint64_t v130;
  char v131;
  _BYTE v132[7];
  uint64_t v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  uint64_t v140;
  char *v141;
  uint64_t (*v142)();
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD v146[24];
  _BYTE v147[7];
  _DWORD v148[2];
  _DWORD v149[6];

  v80 = a2;
  v74 = type metadata accessor for SlideTransition(0);
  v71 = *(_QWORD *)(v74 - 8);
  v3 = __chkstk_darwin(v74);
  v75 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v70 = (char *)&v64 - v5;
  v82 = type metadata accessor for AlarmAlertFullScreen(0);
  v6 = *(_QWORD *)(v82 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v82);
  if (objc_msgSend(*a1, "allowsSnooze"))
    v8 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.17254902, 0.17254902, 0.17254902, 1.0);
  else
    v8 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
  *((_QWORD *)&v79 + 1) = Color.init(uiColor:)(v8);
  *(_QWORD *)&v79 = static Color.white.getter(*((_QWORD *)&v79 + 1));
  sub_10000E800((uint64_t)a1, (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmAlertFullScreen);
  v9 = *(unsigned __int8 *)(v6 + 80);
  *(_QWORD *)&v83 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (v9 + 16) & ~v9;
  v81 = v10 + v7;
  v11 = v9 | 7;
  v78 = swift_allocObject(&unk_10009E888, v10 + v7, v9 | 7);
  sub_100010234(v83, v78 + v10);
  LOBYTE(v146[0]) = 0;
  State.init(wrappedValue:)(v124, v146, &type metadata for Bool);
  v76 = LOBYTE(v124[0]);
  v77 = *((_QWORD *)&v124[0] + 1);
  v12 = v82;
  v13 = (char *)a1 + *(int *)(v82 + 48);
  v15 = *((_QWORD *)v13 + 1);
  LOBYTE(v124[0]) = *v13;
  v14 = v124[0];
  *((_QWORD *)&v124[0] + 1) = v15;
  v16 = sub_10000A58C(&qword_1000AF3F8);
  State.wrappedValue.getter(v146);
  v73 = LOBYTE(v146[0]);
  v17 = (char *)a1 + *(int *)(v12 + 68);
  v18 = *v17;
  v19 = *((_QWORD *)v17 + 1);
  LOBYTE(v124[0]) = v18;
  *((_QWORD *)&v124[0] + 1) = v19;
  State.wrappedValue.getter(v146);
  v72 = LOBYTE(v146[0]);
  LOBYTE(v124[0]) = v14;
  v20 = v11;
  *((_QWORD *)&v124[0] + 1) = v15;
  v69 = v16;
  v21 = State.wrappedValue.getter(v146);
  v22 = LOBYTE(v146[0]);
  v23 = static UnitPoint.center.getter(v21);
  v25 = v24;
  v26 = v70;
  SlideTransition.init()();
  v27 = v71;
  v29 = v74;
  v28 = v75;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v75, v26, v74);
  v30 = sub_1000073C0(&qword_1000AF400, (uint64_t (*)(uint64_t))&type metadata accessor for SlideTransition, (uint64_t)&protocol conformance descriptor for SlideTransition);
  v75 = (char *)AnyTransition.init<A>(_:)(v28, v29, v30);
  v149[0] = *(_DWORD *)v147;
  *(_DWORD *)((char *)v149 + 3) = *(_DWORD *)&v147[3];
  v31 = v26;
  v32 = v20;
  v33 = v81;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v29);
  v148[0] = v149[0];
  *(_DWORD *)((char *)v148 + 3) = *(_DWORD *)((char *)v149 + 3);
  v34 = v10;
  v35 = v83;
  sub_10000E800((uint64_t)a1, v83, type metadata accessor for AlarmAlertFullScreen);
  v74 = swift_allocObject(&unk_10009E8B0, v33, v32);
  sub_100010234(v35, v74 + v34);
  if (objc_msgSend(*a1, "allowsSnooze"))
  {
    LODWORD(v71) = v22;
    if (qword_1000AED90 != -1)
      swift_once(&qword_1000AED90, sub_100074920);
    v70 = (char *)qword_1000B70B0;
    v36 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
    *((_QWORD *)&v68 + 1) = Color.init(uiColor:)(v36);
    *(_QWORD *)&v68 = static Color.white.getter(*((_QWORD *)&v68 + 1));
    sub_10000E800((uint64_t)a1, v35, type metadata accessor for AlarmAlertFullScreen);
    v37 = swift_allocObject(&unk_10009E8D8, v33, v32);
    sub_100010234(v35, v37 + v34);
    LOBYTE(v146[0]) = 0;
    State.init(wrappedValue:)(v124, v146, &type metadata for Bool);
    v67 = LOBYTE(v124[0]);
    v65 = v32;
    v66 = *((_QWORD *)&v124[0] + 1);
    v38 = v82;
    v39 = (char *)a1 + *(int *)(v82 + 52);
    v40 = *v39;
    v41 = *((_QWORD *)v39 + 1);
    LOBYTE(v124[0]) = *v39;
    *((_QWORD *)&v124[0] + 1) = v41;
    v64 = v34;
    State.wrappedValue.getter(v146);
    if (LOBYTE(v146[0]))
      v42 = 0.0;
    else
      v42 = 150.0;
    v43 = (char *)a1 + *(int *)(v38 + 72);
    v44 = *v43;
    v45 = *((_QWORD *)v43 + 1);
    LOBYTE(v124[0]) = v44;
    *((_QWORD *)&v124[0] + 1) = v45;
    State.wrappedValue.getter(v146);
    if (LOBYTE(v146[0]))
      v46 = 1.0;
    else
      v46 = 0.0;
    LOBYTE(v124[0]) = v40;
    *((_QWORD *)&v124[0] + 1) = v41;
    v47 = State.wrappedValue.getter(v146);
    if (LOBYTE(v146[0]))
      v48 = 1.0;
    else
      v48 = 0.8;
    v49 = static UnitPoint.center.getter(v47);
    v51 = v50;
    if (qword_1000AEE58 != -1)
      swift_once(&qword_1000AEE58, sub_100074D70);
    v52 = qword_1000B7178;
    sub_10000E800((uint64_t)a1, v35, type metadata accessor for AlarmAlertFullScreen);
    v53 = swift_allocObject(&unk_10009E900, v81, v65);
    sub_100010234(v35, v53 + v64);
    *(_QWORD *)&v84[0] = 0x657A6F6F6E73;
    *((_QWORD *)&v84[0] + 1) = 0xE600000000000000;
    v84[1] = v68;
    v84[2] = xmmword_100080F60;
    *(_QWORD *)&v85 = sub_100010AA4;
    *((_QWORD *)&v85 + 1) = v37;
    LOBYTE(v86) = v67;
    *((_QWORD *)&v86 + 1) = v66;
    *(_QWORD *)&v87 = 0;
    *((double *)&v87 + 1) = v42;
    *(double *)&v88 = v46;
    *((double *)&v88 + 1) = v48;
    *(double *)&v89 = v48;
    *((double *)&v89 + 1) = v49;
    *(_QWORD *)&v90 = v51;
    *((_QWORD *)&v90 + 1) = v52;
    *(_QWORD *)&v91 = sub_100010AF4;
    v92 = 0;
    v93 = 0;
    *((_QWORD *)&v91 + 1) = v53;
    LOBYTE(v126[0]) = 0;
    *(_OWORD *)&v125[103] = v88;
    *(_OWORD *)&v125[87] = v87;
    *(_OWORD *)&v125[71] = v86;
    *(_OWORD *)&v125[55] = v85;
    *(_OWORD *)&v125[167] = 0u;
    *(_OWORD *)&v125[151] = v91;
    *(_OWORD *)&v125[135] = v90;
    *(_OWORD *)&v125[119] = v89;
    *(_OWORD *)&v125[39] = xmmword_100080F60;
    *(_OWORD *)&v125[23] = v68;
    *(_OWORD *)&v125[7] = v84[0];
    v105[0] = 0x657A6F6F6E73;
    v105[1] = 0xE600000000000000;
    v106 = v68;
    v107 = xmmword_100080F60;
    v108 = sub_100010AA4;
    v109 = v37;
    v110 = v67;
    v111 = v66;
    v112 = 0;
    v113 = v42;
    v114 = v46;
    v115 = v48;
    v116 = v48;
    v117 = v49;
    v118 = v51;
    v119 = v52;
    v120 = sub_100010AF4;
    v123 = 0;
    v121 = v53;
    v122 = 0;
    sub_1000108F4(v84);
    swift_retain(v52);
    sub_100010A00(v105);
    *(_OWORD *)((char *)&v124[8] + 9) = *(_OWORD *)&v125[128];
    *(_OWORD *)((char *)&v124[9] + 9) = *(_OWORD *)&v125[144];
    *(_OWORD *)((char *)&v124[10] + 9) = *(_OWORD *)&v125[160];
    *(_OWORD *)((char *)&v124[4] + 9) = *(_OWORD *)&v125[64];
    *(_OWORD *)((char *)&v124[5] + 9) = *(_OWORD *)&v125[80];
    *(_OWORD *)((char *)&v124[6] + 9) = *(_OWORD *)&v125[96];
    *(_OWORD *)((char *)&v124[7] + 9) = *(_OWORD *)&v125[112];
    *(_OWORD *)((char *)v124 + 9) = *(_OWORD *)v125;
    *(_OWORD *)((char *)&v124[1] + 9) = *(_OWORD *)&v125[16];
    *(_OWORD *)((char *)&v124[2] + 9) = *(_OWORD *)&v125[32];
    *(_QWORD *)&v124[0] = v70;
    BYTE8(v124[0]) = 0;
    *((_QWORD *)&v124[11] + 1) = *(_QWORD *)&v125[175];
    *(_OWORD *)((char *)&v124[3] + 9) = *(_OWORD *)&v125[48];
    Frame.timestamp.getter(v124);
    sub_1000112A4((uint64_t)v124, (uint64_t)v146, &qword_1000AF408);
    v22 = v71;
  }
  else
  {
    sub_1000108D4(v124);
    sub_1000112A4((uint64_t)v124, (uint64_t)v146, &qword_1000AF408);
  }
  if (v22)
    v54 = 1.0;
  else
    v54 = 0.8;
  if (v72)
    v55 = 1.0;
  else
    v55 = 0.0;
  if (v73)
    v56 = 0.0;
  else
    v56 = 150.0;
  sub_1000112A4((uint64_t)v146, (uint64_t)v84, &qword_1000AF408);
  *(_QWORD *)&v94 = 1886352499;
  *((_QWORD *)&v94 + 1) = 0xE400000000000000;
  v57 = v79;
  v95 = v79;
  v83 = xmmword_100080F70;
  v96 = xmmword_100080F70;
  v59 = v77;
  v58 = v78;
  *(_QWORD *)&v97 = sub_10001087C;
  *((_QWORD *)&v97 + 1) = v78;
  v60 = v76;
  LOBYTE(v98) = v76;
  *(_DWORD *)((char *)&v98 + 1) = v148[0];
  DWORD1(v98) = *(_DWORD *)((char *)v148 + 3);
  *((_QWORD *)&v98 + 1) = v77;
  *(_QWORD *)&v99 = 0;
  *((double *)&v99 + 1) = v56;
  *(double *)&v100 = v55;
  *((double *)&v100 + 1) = v54;
  *(double *)&v101 = v54;
  *((double *)&v101 + 1) = v23;
  *(_QWORD *)&v102 = v25;
  v61 = v74;
  v62 = v75;
  *((_QWORD *)&v102 + 1) = v75;
  *(_QWORD *)&v103 = sub_10001088C;
  *((_QWORD *)&v103 + 1) = v74;
  v104 = 0uLL;
  sub_1000112A4((uint64_t)v84, (uint64_t)v105, &qword_1000AF408);
  v124[8] = v102;
  v124[9] = v103;
  v124[10] = v104;
  v124[4] = v98;
  v124[5] = v99;
  v124[6] = v100;
  v124[7] = v101;
  v124[0] = v94;
  v124[1] = v95;
  v124[2] = v96;
  v124[3] = v97;
  sub_1000112A4((uint64_t)v105, (uint64_t)&v124[11], &qword_1000AF408);
  memcpy(v80, v124, 0x170uLL);
  sub_1000112A4((uint64_t)v84, (uint64_t)v125, &qword_1000AF408);
  sub_1000108F4(&v94);
  sub_100010994(v105, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100010430);
  sub_100010994(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100010640);
  v126[0] = 1886352499;
  v126[1] = 0xE400000000000000;
  v127 = v57;
  v128 = v83;
  v129 = sub_10001087C;
  v130 = v58;
  v131 = v60;
  *(_DWORD *)v132 = v148[0];
  *(_DWORD *)&v132[3] = *(_DWORD *)((char *)v148 + 3);
  v133 = v59;
  v134 = 0;
  v135 = v56;
  v136 = v55;
  v137 = v54;
  v138 = v54;
  v139 = v23;
  v140 = v25;
  v141 = v62;
  v142 = sub_10001088C;
  v145 = 0;
  v143 = v61;
  v144 = 0;
  return sub_100010A00(v126);
}

uint64_t sub_10000DFBC()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE38 != -1)
    swift_once(&qword_1000AEE38, sub_100074C6C);
  v0 = __chkstk_darwin(qword_1000B7158);
  withAnimation<A>(_:_:)(v0, sub_100010B34);
  if (qword_1000AEE40 != -1)
    swift_once(&qword_1000AEE40, sub_100074C80);
  v1 = __chkstk_darwin(qword_1000B7160);
  return withAnimation<A>(_:_:)(v1, sub_100010B4C);
}

uint64_t sub_10000E0C0(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 48));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10000E130(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 68));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10000E1A0()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE48 != -1)
    swift_once(&qword_1000AEE48, sub_100074C94);
  v0 = __chkstk_darwin(qword_1000B7168);
  withAnimation<A>(_:_:)(v0, sub_100010B04);
  if (qword_1000AEE50 != -1)
    swift_once(&qword_1000AEE50, sub_100074D00);
  v1 = __chkstk_darwin(qword_1000B7170);
  return withAnimation<A>(_:_:)(v1, sub_100010B1C);
}

uint64_t sub_10000E2A4(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 52));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_10000E314(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for AlarmAlertFullScreen(0) + 72));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

_QWORD *sub_10000E384@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, _QWORD *a9@<X8>, char a10, char a11, char a12, char a13, char a14, char a15, uint64_t a16)
{
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *result;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  *a9 = a1;
  sub_10000EC88(a2, (uint64_t)(a9 + 1));
  sub_10000EC88(a3, (uint64_t)(a9 + 6));
  v22 = (int *)type metadata accessor for AlarmAlertFullScreen(0);
  sub_1000112A4(a4, (uint64_t)a9 + v22[7], (uint64_t *)&unk_1000AFBC0);
  v23 = v22[8];
  v24 = static AnyTransition.move(edge:)(2);
  v25 = static AnyTransition.scale.getter();
  v26 = AnyTransition.combined(with:)(v25, v24);
  swift_release(v24);
  swift_release(v25);
  *(_QWORD *)((char *)a9 + v23) = v26;
  v27 = (char *)a9 + v22[9];
  LOBYTE(v52) = a5;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v28 = v54;
  *v27 = v53;
  *((_QWORD *)v27 + 1) = v28;
  v29 = (char *)a9 + v22[10];
  LOBYTE(v52) = a6;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v30 = v54;
  *v29 = v53;
  *((_QWORD *)v29 + 1) = v30;
  v31 = (char *)a9 + v22[11];
  LOBYTE(v52) = a7;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v32 = v54;
  *v31 = v53;
  *((_QWORD *)v31 + 1) = v32;
  v33 = (char *)a9 + v22[12];
  LOBYTE(v52) = a8;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v34 = v54;
  *v33 = v53;
  *((_QWORD *)v33 + 1) = v34;
  v35 = (char *)a9 + v22[13];
  LOBYTE(v52) = a10;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v36 = v54;
  *v35 = v53;
  *((_QWORD *)v35 + 1) = v36;
  v37 = (char *)a9 + v22[14];
  LOBYTE(v52) = a11;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v38 = v54;
  *v37 = v53;
  *((_QWORD *)v37 + 1) = v38;
  v39 = (char *)a9 + v22[15];
  LOBYTE(v52) = a12;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v40 = v54;
  *v39 = v53;
  *((_QWORD *)v39 + 1) = v40;
  v41 = (char *)a9 + v22[16];
  LOBYTE(v52) = a13;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v42 = v54;
  *v41 = v53;
  *((_QWORD *)v41 + 1) = v42;
  v43 = (char *)a9 + v22[17];
  LOBYTE(v52) = a14;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v44 = v54;
  *v43 = v53;
  *((_QWORD *)v43 + 1) = v44;
  v45 = (char *)a9 + v22[18];
  LOBYTE(v52) = a15;
  State.init(wrappedValue:)(&v53, &v52, &type metadata for Bool);
  v46 = v54;
  *v45 = v53;
  *((_QWORD *)v45 + 1) = v46;
  v47 = (_QWORD *)((char *)a9 + v22[19]);
  v52 = a16;
  v48 = type metadata accessor for WeatherDataProvider(0);
  result = State.init(wrappedValue:)(&v53, &v52, v48);
  v50 = v54;
  *v47 = v53;
  v47[1] = v50;
  return result;
}

uint64_t sub_10000E698()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10000E6B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_10000E800(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AlarmAlertFullScreen);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_10009E860, v7 + v5, v6 | 7);
  result = sub_100010234((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  *(_QWORD *)a2 = sub_100010278;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_10000E764(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10000E774(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

_QWORD *sub_10000E784(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000E7A8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AlarmSnoozeCountdownControlView(a2, a1, &type metadata for AlarmSnoozeCountdownControlView);
  return a2;
}

uint64_t sub_10000E7E0()
{
  uint64_t v0;

  return sub_100009AE4(v0 + 16, (void (*)(uint64_t, uint64_t))sub_10004ADC0);
}

uint64_t sub_10000E800(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000E844(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000E880(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10000E8C4()
{
  unint64_t result;

  result = qword_1000AF1B0;
  if (!qword_1000AF1B0)
  {
    result = swift_getWitnessTable(&unk_100084298, &type metadata for SmallActionButton);
    atomic_store(result, (unint64_t *)&qword_1000AF1B0);
  }
  return result;
}

uint64_t sub_10000E908(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AlarmSnoozeCountdownControlView(a2, a1, &type metadata for AlarmAlertTrailingView);
  return a2;
}

uint64_t sub_10000E940()
{
  uint64_t v0;

  return sub_100009AE4(v0 + 16, (void (*)(uint64_t, uint64_t))sub_10004AAE0);
}

uint64_t sub_10000E964()
{
  uint64_t v0;

  sub_100007CF0((_QWORD *)(v0 + 24));
  sub_100007CF0((_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10000E998()
{
  uint64_t v0;

  return sub_100009AE4(v0 + 16, (void (*)(uint64_t, uint64_t))sub_100047480);
}

uint64_t sub_10000E9B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10000E9E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10000EA18(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10000EA44(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_10000EA70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF208;
  if (!qword_1000AF208)
  {
    v1 = sub_10000E880(&qword_1000AF1E8);
    sub_100011680(&qword_1000AF210, &qword_1000AF1E0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF208);
  }
  return result;
}

unint64_t sub_10000EB0C()
{
  unint64_t result;

  result = qword_1000AF240;
  if (!qword_1000AF240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000AF240);
  }
  return result;
}

void sub_10000EB50(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_10000EB78(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10000EBA0(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10000EBC4(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10000EBE8()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_10000EC08(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Text.TruncationMode(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.truncationMode.setter(v3);
}

uint64_t sub_10000EC88(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t type metadata accessor for AlarmAlertFullScreen(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000AF2D0, (uint64_t)&nominal type descriptor for AlarmAlertFullScreen);
}

uint64_t sub_10000ECB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

char *sub_10000ECE8(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char **v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(char *, char **, uint64_t);
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
  }
  else
  {
    v7 = a1;
    v8 = a1 + 8;
    v9 = a2 + 1;
    v10 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 2) = v10;
    v11 = v10;
    v12 = **(void (***)(char *, char **, uint64_t))(v10 - 8);
    v13 = v4;
    v12(v8, v9, v11);
    v14 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(v7 + 72) = v14;
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(v7 + 48), (uint64_t)(a2 + 6));
    v15 = a3[7];
    v16 = &v7[v15];
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = sub_10000A58C(&qword_1000AF270);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = 1;
    }
    else
    {
      v21 = *v17;
      *(_QWORD *)v16 = *v17;
      swift_retain(v21);
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v18, v20);
    v22 = a3[8];
    v23 = a3[9];
    v24 = *(uint64_t *)((char *)a2 + v22);
    *(_QWORD *)&v7[v22] = v24;
    v25 = &v7[v23];
    v26 = (uint64_t)a2 + v23;
    *v25 = *(_BYTE *)v26;
    v68 = *(_QWORD *)(v26 + 8);
    *((_QWORD *)v25 + 1) = v68;
    v27 = a3[10];
    v28 = a3[11];
    v29 = &v7[v27];
    v30 = (uint64_t)a2 + v27;
    *v29 = *(_BYTE *)v30;
    v66 = *(_QWORD *)(v30 + 8);
    *((_QWORD *)v29 + 1) = v66;
    v31 = &v7[v28];
    v32 = (uint64_t)a2 + v28;
    *v31 = *(_BYTE *)v32;
    v67 = *(_QWORD *)(v32 + 8);
    *((_QWORD *)v31 + 1) = v67;
    v33 = a3[12];
    v34 = a3[13];
    v35 = &v7[v33];
    v36 = (uint64_t)a2 + v33;
    *v35 = *(_BYTE *)v36;
    v37 = *(_QWORD *)(v36 + 8);
    *((_QWORD *)v35 + 1) = v37;
    v38 = &v7[v34];
    v39 = (uint64_t)a2 + v34;
    *v38 = *(_BYTE *)v39;
    v40 = *(_QWORD *)(v39 + 8);
    *((_QWORD *)v38 + 1) = v40;
    v41 = a3[14];
    v42 = a3[15];
    v43 = &v7[v41];
    v44 = (uint64_t)a2 + v41;
    *v43 = *(_BYTE *)v44;
    v45 = *(_QWORD *)(v44 + 8);
    *((_QWORD *)v43 + 1) = v45;
    v46 = &v7[v42];
    v47 = (uint64_t)a2 + v42;
    *v46 = *(_BYTE *)v47;
    v48 = *(_QWORD *)(v47 + 8);
    *((_QWORD *)v46 + 1) = v48;
    v49 = a3[16];
    v50 = a3[17];
    v51 = &v7[v49];
    v52 = (uint64_t)a2 + v49;
    *v51 = *(_BYTE *)v52;
    v53 = *(_QWORD *)(v52 + 8);
    *((_QWORD *)v51 + 1) = v53;
    v54 = &v7[v50];
    v55 = (uint64_t)a2 + v50;
    *v54 = *(_BYTE *)v55;
    v56 = *(_QWORD *)(v55 + 8);
    *((_QWORD *)v54 + 1) = v56;
    v57 = a3[18];
    v58 = a3[19];
    v59 = &v7[v57];
    v60 = (uint64_t)a2 + v57;
    *v59 = *(_BYTE *)v60;
    v61 = *(_QWORD *)(v60 + 8);
    *((_QWORD *)v59 + 1) = v61;
    v62 = &v7[v58];
    v63 = (uint64_t *)((char *)a2 + v58);
    v64 = *v63;
    v4 = (char *)v63[1];
    *(_QWORD *)v62 = *v63;
    *((_QWORD *)v62 + 1) = v4;
    swift_retain(v24);
    swift_retain(v68);
    swift_retain(v66);
    swift_retain(v67);
    swift_retain(v37);
    swift_retain(v40);
    swift_retain(v45);
    swift_retain(v48);
    swift_retain(v53);
    swift_retain(v56);
    swift_retain(v61);
    swift_retain(v64);
  }
  swift_retain(v4);
  return v7;
}

uint64_t sub_10000EFB4(uint64_t a1, int *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = (_QWORD *)(a1 + 48);

  sub_100007CF0((_QWORD *)(a1 + 8));
  sub_100007CF0(v4);
  v5 = (_QWORD *)(a1 + a2[7]);
  v6 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v5, v6) == 1)
  {
    v7 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  else
  {
    swift_release(*v5);
  }
  swift_release(*(_QWORD *)(a1 + a2[8]));
  swift_release(*(_QWORD *)(a1 + a2[9] + 8));
  swift_release(*(_QWORD *)(a1 + a2[10] + 8));
  swift_release(*(_QWORD *)(a1 + a2[11] + 8));
  swift_release(*(_QWORD *)(a1 + a2[12] + 8));
  swift_release(*(_QWORD *)(a1 + a2[13] + 8));
  swift_release(*(_QWORD *)(a1 + a2[14] + 8));
  swift_release(*(_QWORD *)(a1 + a2[15] + 8));
  swift_release(*(_QWORD *)(a1 + a2[16] + 8));
  swift_release(*(_QWORD *)(a1 + a2[17] + 8));
  swift_release(*(_QWORD *)(a1 + a2[18] + 8));
  v8 = (_QWORD *)(a1 + a2[19]);
  swift_release(*v8);
  return swift_release(v8[1]);
}

uint64_t sub_10000F108(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = a1 + 8;
  v8 = a2 + 8;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  v12 = v6;
  v11(v7, v8, v10);
  v13 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
  v14 = a3[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
    v19 = 1;
  }
  else
  {
    v20 = *v16;
    *v15 = *v16;
    swift_retain(v20);
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v15, v17, v19);
  v21 = a3[8];
  v22 = a3[9];
  v23 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v23;
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v68 = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(v24 + 8) = v68;
  v26 = a3[10];
  v27 = a3[11];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  v66 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v28 + 8) = v66;
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_BYTE *)v30 = *(_BYTE *)v31;
  v67 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)(v30 + 8) = v67;
  v32 = a3[12];
  v33 = a3[13];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_BYTE *)v34 = *(_BYTE *)v35;
  v36 = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 8) = v36;
  v37 = a1 + v33;
  v38 = a2 + v33;
  *(_BYTE *)v37 = *(_BYTE *)v38;
  v39 = *(_QWORD *)(v38 + 8);
  *(_QWORD *)(v37 + 8) = v39;
  v40 = a3[14];
  v41 = a3[15];
  v42 = a1 + v40;
  v43 = a2 + v40;
  *(_BYTE *)v42 = *(_BYTE *)v43;
  v44 = *(_QWORD *)(v43 + 8);
  *(_QWORD *)(v42 + 8) = v44;
  v45 = a1 + v41;
  v46 = a2 + v41;
  *(_BYTE *)v45 = *(_BYTE *)v46;
  v47 = *(_QWORD *)(v46 + 8);
  *(_QWORD *)(v45 + 8) = v47;
  v48 = a3[16];
  v49 = a3[17];
  v50 = a1 + v48;
  v51 = a2 + v48;
  *(_BYTE *)v50 = *(_BYTE *)v51;
  v52 = *(_QWORD *)(v51 + 8);
  *(_QWORD *)(v50 + 8) = v52;
  v53 = a1 + v49;
  v54 = a2 + v49;
  *(_BYTE *)v53 = *(_BYTE *)v54;
  v55 = *(_QWORD *)(v54 + 8);
  *(_QWORD *)(v53 + 8) = v55;
  v56 = a3[18];
  v57 = a3[19];
  v58 = a1 + v56;
  v59 = a2 + v56;
  *(_BYTE *)v58 = *(_BYTE *)v59;
  v60 = *(_QWORD *)(v59 + 8);
  *(_QWORD *)(v58 + 8) = v60;
  v61 = (uint64_t *)(a1 + v57);
  v62 = (uint64_t *)(a2 + v57);
  v63 = *v62;
  v64 = v62[1];
  *v61 = *v62;
  v61[1] = v64;
  swift_retain(v23);
  swift_retain(v68);
  swift_retain(v66);
  swift_retain(v67);
  swift_retain(v36);
  swift_retain(v39);
  swift_retain(v44);
  swift_retain(v47);
  swift_retain(v52);
  swift_retain(v55);
  swift_retain(v60);
  swift_retain(v63);
  swift_retain(v64);
  return a1;
}

void **sub_10000F3B4(void **a1, uint64_t a2, int *a3)
{
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v7 = (_QWORD *)(a2 + 48);
  v6 = *(void **)a2;
  v8 = a1 + 1;
  v9 = *a1;
  *a1 = *(void **)a2;
  v10 = a1 + 6;
  v11 = v6;

  sub_100007D18(v8, (_QWORD *)(a2 + 8));
  sub_100007D18(v10, v7);
  if (a1 != (void **)a2)
  {
    v12 = a3[7];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)(a2 + v12);
    sub_100011484((uint64_t)a1 + v12, &qword_1000AF270);
    v15 = sub_10000A58C(&qword_1000AF270);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = 1;
    }
    else
    {
      v18 = *v14;
      *v13 = *v14;
      swift_retain(v18);
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v15, v17);
  }
  v19 = a3[8];
  v20 = *(void **)(a2 + v19);
  v21 = *(uint64_t *)((char *)a1 + v19);
  *(void **)((char *)a1 + v19) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = a3[9];
  v23 = (char *)a1 + v22;
  v24 = (char *)(a2 + v22);
  *v23 = *v24;
  v25 = *((_QWORD *)v23 + 1);
  v26 = *((_QWORD *)v24 + 1);
  *((_QWORD *)v23 + 1) = v26;
  swift_retain(v26);
  swift_release(v25);
  v27 = a3[10];
  v28 = (char *)a1 + v27;
  v29 = (char *)(a2 + v27);
  *v28 = *v29;
  v30 = *((_QWORD *)v28 + 1);
  v31 = *((_QWORD *)v29 + 1);
  *((_QWORD *)v28 + 1) = v31;
  swift_retain(v31);
  swift_release(v30);
  v32 = a3[11];
  v33 = (char *)a1 + v32;
  v34 = (char *)(a2 + v32);
  *v33 = *v34;
  v35 = *((_QWORD *)v33 + 1);
  v36 = *((_QWORD *)v34 + 1);
  *((_QWORD *)v33 + 1) = v36;
  swift_retain(v36);
  swift_release(v35);
  v37 = a3[12];
  v38 = (char *)a1 + v37;
  v39 = (char *)(a2 + v37);
  *v38 = *v39;
  v40 = *((_QWORD *)v38 + 1);
  v41 = *((_QWORD *)v39 + 1);
  *((_QWORD *)v38 + 1) = v41;
  swift_retain(v41);
  swift_release(v40);
  v42 = a3[13];
  v43 = (char *)a1 + v42;
  v44 = (char *)(a2 + v42);
  *v43 = *v44;
  v45 = *((_QWORD *)v43 + 1);
  v46 = *((_QWORD *)v44 + 1);
  *((_QWORD *)v43 + 1) = v46;
  swift_retain(v46);
  swift_release(v45);
  v47 = a3[14];
  v48 = (char *)a1 + v47;
  v49 = (char *)(a2 + v47);
  *v48 = *v49;
  v50 = *((_QWORD *)v48 + 1);
  v51 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v48 + 1) = v51;
  swift_retain(v51);
  swift_release(v50);
  v52 = a3[15];
  v53 = (char *)a1 + v52;
  v54 = (char *)(a2 + v52);
  *v53 = *v54;
  v55 = *((_QWORD *)v53 + 1);
  v56 = *((_QWORD *)v54 + 1);
  *((_QWORD *)v53 + 1) = v56;
  swift_retain(v56);
  swift_release(v55);
  v57 = a3[16];
  v58 = (char *)a1 + v57;
  v59 = (char *)(a2 + v57);
  *v58 = *v59;
  v60 = *((_QWORD *)v58 + 1);
  v61 = *((_QWORD *)v59 + 1);
  *((_QWORD *)v58 + 1) = v61;
  swift_retain(v61);
  swift_release(v60);
  v62 = a3[17];
  v63 = (char *)a1 + v62;
  v64 = (char *)(a2 + v62);
  *v63 = *v64;
  v65 = *((_QWORD *)v63 + 1);
  v66 = *((_QWORD *)v64 + 1);
  *((_QWORD *)v63 + 1) = v66;
  swift_retain(v66);
  swift_release(v65);
  v67 = a3[18];
  v68 = (char *)a1 + v67;
  v69 = (char *)(a2 + v67);
  *v68 = *v69;
  v70 = *((_QWORD *)v68 + 1);
  v71 = *((_QWORD *)v69 + 1);
  *((_QWORD *)v68 + 1) = v71;
  swift_retain(v71);
  swift_release(v70);
  v72 = a3[19];
  v73 = (char *)a1 + v72;
  v74 = a2 + v72;
  v75 = *(void **)(a2 + v72);
  v76 = *(uint64_t *)((char *)a1 + v72);
  *(void **)((char *)a1 + v72) = v75;
  swift_retain(v75);
  swift_release(v76);
  v77 = *((_QWORD *)v73 + 1);
  v78 = *(_QWORD *)(v74 + 8);
  *((_QWORD *)v73 + 1) = v78;
  swift_retain(v78);
  swift_release(v77);
  return a1;
}

uint64_t sub_10000F6C8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v8 = a3[7];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  v11 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  v16 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  v18 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  return a1;
}

uint64_t sub_10000F820(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  sub_100007CF0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_100007CF0((_QWORD *)(a1 + 48));
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (a1 != a2)
  {
    v8 = a3[7];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    sub_100011484(a1 + v8, &qword_1000AF270);
    v11 = sub_10000A58C(&qword_1000AF270);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for Font.Context(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[8];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_release(v14);
  v15 = a3[9];
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  v18 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release(v18);
  v19 = a3[10];
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  v22 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_release(v22);
  v23 = a3[11];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_release(v26);
  v27 = a3[12];
  v28 = a1 + v27;
  v29 = a2 + v27;
  *(_BYTE *)v28 = *(_BYTE *)v29;
  v30 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  swift_release(v30);
  v31 = a3[13];
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_BYTE *)v32 = *(_BYTE *)v33;
  v34 = *(_QWORD *)(v32 + 8);
  *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
  swift_release(v34);
  v35 = a3[14];
  v36 = a1 + v35;
  v37 = a2 + v35;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v38 = *(_QWORD *)(v36 + 8);
  *(_QWORD *)(v36 + 8) = *(_QWORD *)(v37 + 8);
  swift_release(v38);
  v39 = a3[15];
  v40 = a1 + v39;
  v41 = a2 + v39;
  *(_BYTE *)v40 = *(_BYTE *)v41;
  v42 = *(_QWORD *)(v40 + 8);
  *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + 8);
  swift_release(v42);
  v43 = a3[16];
  v44 = a1 + v43;
  v45 = a2 + v43;
  *(_BYTE *)v44 = *(_BYTE *)v45;
  v46 = *(_QWORD *)(v44 + 8);
  *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
  swift_release(v46);
  v47 = a3[17];
  v48 = a1 + v47;
  v49 = a2 + v47;
  *(_BYTE *)v48 = *(_BYTE *)v49;
  v50 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
  swift_release(v50);
  v51 = a3[18];
  v52 = a1 + v51;
  v53 = a2 + v51;
  *(_BYTE *)v52 = *(_BYTE *)v53;
  v54 = *(_QWORD *)(v52 + 8);
  *(_QWORD *)(v52 + 8) = *(_QWORD *)(v53 + 8);
  swift_release(v54);
  v55 = a3[19];
  v56 = a1 + v55;
  v57 = (_QWORD *)(a2 + v55);
  v58 = *(_QWORD *)(a1 + v55);
  *(_QWORD *)(a1 + v55) = *v57;
  swift_release(v58);
  v59 = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v56 + 8) = v57[1];
  swift_release(v59);
  return a1;
}

uint64_t sub_10000FAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000FAE4);
}

uint64_t sub_10000FAE4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000A58C((uint64_t *)&unk_1000AFBC0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_10000FB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000FB70);
}

char *sub_10000FB70(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10000A58C((uint64_t *)&unk_1000AFBC0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

void sub_10000FBE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[16];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "(";
  v4[2] = "(";
  sub_10000FCA0(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_100081340;
    v4[6] = &unk_100081340;
    v4[7] = &unk_100081340;
    v4[8] = &unk_100081340;
    v4[9] = &unk_100081340;
    v4[10] = &unk_100081340;
    v4[11] = &unk_100081340;
    v4[12] = &unk_100081340;
    v4[13] = &unk_100081340;
    v4[14] = &unk_100081340;
    v4[15] = &unk_100081358;
    swift_initStructMetadata(a1, 256, 16, v4, a1 + 16);
  }
}

void sub_10000FCA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000AF2E0)
  {
    v2 = type metadata accessor for Font.Context(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000AF2E0);
  }
}

uint64_t _s10ClockAngel31AlarmSnoozeCountdownControlViewVwxx_0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 48);

  sub_100007CF0((_QWORD *)(a1 + 8));
  return sub_100007CF0(v2);
}

uint64_t _s10ClockAngel31AlarmSnoozeCountdownControlViewVwcp_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  __int128 v11;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  v6 = a2 + 8;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v4;
  v9(v5, v6, v8);
  v11 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v11;
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, a2 + 48);
  return a1;
}

void **_s10ClockAngel31AlarmSnoozeCountdownControlViewVwca_0(void **a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;

  v5 = (_QWORD *)(a2 + 48);
  v4 = *(void **)a2;
  v6 = a1 + 1;
  v7 = *a1;
  *a1 = *(void **)a2;
  v8 = a1 + 6;
  v9 = v4;

  sub_100007D18(v6, (_QWORD *)(a2 + 8));
  sub_100007D18(v8, v5);
  return a1;
}

uint64_t _s10ClockAngel31AlarmSnoozeCountdownControlViewVwta_0(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  sub_100007CF0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  sub_100007CF0((_QWORD *)(a1 + 48));
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCustomLeadingView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCustomLeadingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlarmSnoozeCountdownView()
{
  return &type metadata for AlarmSnoozeCountdownView;
}

uint64_t sub_10000FF38()
{
  return sub_100011680(&qword_1000AF348, &qword_1000AF350, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_10000FF68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF358;
  if (!qword_1000AF358)
  {
    v1 = sub_10000E880(&qword_1000AF1C0);
    sub_100011020((unint64_t *)&qword_1000AF1A8, &qword_1000AF1A0, (void (*)(void))sub_10000E8C4);
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF358);
  }
  return result;
}

uint64_t sub_10001000C()
{
  return sub_100011680(&qword_1000AF368, &qword_1000AF370, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100010038()
{
  _QWORD v1[2];

  v1[0] = sub_10000E880(&qword_1000AF1F0);
  v1[1] = sub_100011020(&qword_1000AF200, &qword_1000AF1F0, (void (*)(void))sub_10000EA70);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

unint64_t sub_1000100A8()
{
  unint64_t result;

  result = qword_1000AF378;
  if (!qword_1000AF378)
  {
    result = swift_getWitnessTable(&unk_100084098, &type metadata for CompressedGlyphLeadingView);
    atomic_store(result, (unint64_t *)&qword_1000AF378);
  }
  return result;
}

unint64_t sub_1000100F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF380;
  if (!qword_1000AF380)
  {
    v1 = sub_10000E880(&qword_1000AF260);
    sub_100010174();
    sub_100011680(&qword_1000AF390, &qword_1000AF398, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF380);
  }
  return result;
}

unint64_t sub_100010174()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF388;
  if (!qword_1000AF388)
  {
    v1 = sub_10000E880(&qword_1000AF250);
    sub_1000073C0(&qword_1000AF258, type metadata accessor for RunningCountdownView, (uint64_t)&unk_1000841F8);
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF388);
  }
  return result;
}

uint64_t sub_100010210(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000896E0, 1);
}

uint64_t sub_100010220(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000896B8, 1);
}

uint64_t sub_100010234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AlarmAlertFullScreen(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010278@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AlarmAlertFullScreen(0) - 8) + 80);
  return sub_10000A5CC((id *)(v1 + ((v3 + 16) & ~v3)), a1);
}

uint64_t sub_1000102C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v17 = *(_QWORD *)(a1 + 192);
  v27 = *(_QWORD *)(a1 + 208);
  v28 = *(_QWORD *)(a1 + 200);
  v25 = *(_QWORD *)(a1 + 224);
  v26 = *(_QWORD *)(a1 + 216);
  v23 = *(_QWORD *)(a1 + 240);
  v24 = *(_QWORD *)(a1 + 232);
  v21 = *(_QWORD *)(a1 + 256);
  v22 = *(_QWORD *)(a1 + 248);
  v19 = *(_OWORD *)(a1 + 280);
  v20 = *(_OWORD *)(a1 + 264);
  v15 = *(_OWORD *)(a1 + 312);
  v16 = *(_OWORD *)(a1 + 296);
  v13 = *(_OWORD *)(a1 + 344);
  v14 = *(_OWORD *)(a1 + 328);
  v12 = *(_OWORD *)(a1 + 360);
  v9 = *(_QWORD *)(a1 + 376);
  v10 = *(_QWORD *)(a1 + 384);
  swift_retain(*(_QWORD *)(a1 + 96));
  swift_retain(v6);
  swift_bridgeObjectRetain(v3);
  swift_retain(v2);
  swift_retain(v4);
  swift_retain(v5);
  sub_100010420(v7, v8);
  sub_100010420(v18, v17);
  sub_100010430(v28, v27, v26, v25, v24, v23, v22, v21, v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t sub_100010420(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100010430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t result;

  if (a4)
  {
    swift_retain(a12);
    swift_retain(a20);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a6);
    swift_retain(a10);
    sub_100010420(a21, a22);
    return sub_100010420(a23, a24);
  }
  return result;
}

uint64_t sub_1000104D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v17 = *(_QWORD *)(a1 + 192);
  v27 = *(_QWORD *)(a1 + 208);
  v28 = *(_QWORD *)(a1 + 200);
  v25 = *(_QWORD *)(a1 + 224);
  v26 = *(_QWORD *)(a1 + 216);
  v23 = *(_QWORD *)(a1 + 240);
  v24 = *(_QWORD *)(a1 + 232);
  v21 = *(_QWORD *)(a1 + 256);
  v22 = *(_QWORD *)(a1 + 248);
  v19 = *(_OWORD *)(a1 + 280);
  v20 = *(_OWORD *)(a1 + 264);
  v15 = *(_OWORD *)(a1 + 312);
  v16 = *(_OWORD *)(a1 + 296);
  v13 = *(_OWORD *)(a1 + 344);
  v14 = *(_OWORD *)(a1 + 328);
  v12 = *(_OWORD *)(a1 + 360);
  v9 = *(_QWORD *)(a1 + 376);
  v10 = *(_QWORD *)(a1 + 384);
  swift_release(*(_QWORD *)(a1 + 160));
  swift_release(v5);
  swift_release(v4);
  swift_release(v2);
  swift_bridgeObjectRelease(v3);
  swift_release(v6);
  sub_100010630(v7, v8);
  sub_100010630(v18, v17);
  sub_100010640(v28, v27, v26, v25, v24, v23, v22, v21, v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t sub_100010630(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100010640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_release(a5);
    swift_release(a6);
    swift_release(a10);
    swift_release(a20);
    swift_release(a12);
    sub_100010630(a21, a22);
    return sub_100010630(a23, a24);
  }
  return result;
}

uint64_t sub_1000106E4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = (int *)type metadata accessor for AlarmAlertFullScreen(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  sub_100007CF0((_QWORD *)(v0 + v4 + 8));
  sub_100007CF0((_QWORD *)(v0 + v4 + 48));
  v7 = (_QWORD *)(v0 + v4 + v1[7]);
  v8 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(v6 + v1[8]));
  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  swift_release(*(_QWORD *)(v6 + v1[10] + 8));
  swift_release(*(_QWORD *)(v6 + v1[11] + 8));
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v6 + v1[13] + 8));
  swift_release(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v6 + v1[15] + 8));
  swift_release(*(_QWORD *)(v6 + v1[16] + 8));
  swift_release(*(_QWORD *)(v6 + v1[17] + 8));
  swift_release(*(_QWORD *)(v6 + v1[18] + 8));
  v10 = (_QWORD *)(v6 + v1[19]);
  swift_release(*v10);
  swift_release(v10[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10001087C()
{
  return sub_100010AB0((void (*)(uint64_t, uint64_t))sub_10004AAE0);
}

uint64_t sub_10001088C()
{
  return sub_100010898((uint64_t (*)(uint64_t))sub_10000DFBC);
}

uint64_t sub_100010898(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AlarmAlertFullScreen(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

double sub_1000108D4(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_QWORD *sub_1000108F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[7];
  v6 = a1[17];
  v7 = a1[18];
  v8 = a1[19];
  v9 = a1[20];
  v10 = a1[21];
  swift_retain(a1[9]);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  sub_100010420(v7, v8);
  sub_100010420(v9, v10);
  return a1;
}

_QWORD *sub_100010994(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

_QWORD *sub_100010A00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[18];
  v8 = a1[19];
  v9 = a1[20];
  v10 = a1[21];
  swift_release(a1[17]);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v6);
  sub_100010630(v7, v8);
  sub_100010630(v9, v10);
  return a1;
}

uint64_t sub_100010AA4()
{
  return sub_100010AB0((void (*)(uint64_t, uint64_t))sub_100047480);
}

uint64_t sub_100010AB0(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AlarmAlertFullScreen(0) - 8) + 80);
  return sub_100009AE4(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_100010AF4()
{
  return sub_100010898((uint64_t (*)(uint64_t))sub_10000E1A0);
}

uint64_t sub_100010B04()
{
  uint64_t v0;

  return sub_10000E2A4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100010B1C()
{
  uint64_t v0;

  return sub_10000E314(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100010B34()
{
  uint64_t v0;

  return sub_10000E0C0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100010B4C()
{
  uint64_t v0;

  return sub_10000E130(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100010B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF4E0;
  if (!qword_1000AF4E0)
  {
    v1 = sub_10000E880(&qword_1000AF488);
    sub_100010BF0();
    sub_100011680(&qword_1000AF4F8, &qword_1000AF500, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF4E0);
  }
  return result;
}

unint64_t sub_100010BF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF4E8;
  if (!qword_1000AF4E8)
  {
    v1 = sub_10000E880(&qword_1000AF480);
    sub_100011680(&qword_1000AF4F0, &qword_1000AF478, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF4E8);
  }
  return result;
}

uint64_t sub_100010C8C()
{
  return sub_100011020(&qword_1000AF510, &qword_1000AF4A0, (void (*)(void))sub_100010CB0);
}

unint64_t sub_100010CB0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000AF518;
  if (!qword_1000AF518)
  {
    v1 = sub_10000E880(&qword_1000AF498);
    v2[0] = sub_10000E880(&qword_1000AF488);
    v2[1] = sub_100010B6C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF518);
  }
  return result;
}

uint64_t sub_100010D48()
{
  return sub_100010898((uint64_t (*)(uint64_t))sub_10000D2C0);
}

unint64_t sub_100010D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF528;
  if (!qword_1000AF528)
  {
    v1 = sub_10000E880(&qword_1000AF4C0);
    sub_100010DD8();
    sub_100011680(&qword_1000AF538, &qword_1000AF540, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF528);
  }
  return result;
}

unint64_t sub_100010DD8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000AF530;
  if (!qword_1000AF530)
  {
    v1 = sub_10000E880(&qword_1000AF4B8);
    v2[0] = sub_10000E880(&qword_1000AF4A8);
    v2[1] = sub_100011020(&qword_1000AF508, &qword_1000AF4A8, (void (*)(void))sub_100010C8C);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.hyphenationFactor(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF530);
  }
  return result;
}

uint64_t sub_100010EA8()
{
  return sub_100010898((uint64_t (*)(uint64_t))sub_10000D4A4);
}

unint64_t sub_100010EB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF550;
  if (!qword_1000AF550)
  {
    v1 = sub_10000E880(&qword_1000AF460);
    sub_100011020(&qword_1000AF558, &qword_1000AF458, (void (*)(void))sub_100010F58);
    sub_100011680(&qword_1000AF538, &qword_1000AF540, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF550);
  }
  return result;
}

uint64_t sub_100010F58()
{
  return sub_100011020(&qword_1000AF560, &qword_1000AF450, (void (*)(void))sub_100010F7C);
}

unint64_t sub_100010F7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF568;
  if (!qword_1000AF568)
  {
    v1 = sub_10000E880(&qword_1000AF448);
    sub_100011020(&qword_1000AF570, &qword_1000AF440, (void (*)(void))sub_100011088);
    sub_100011680(&qword_1000AF5B8, &qword_1000AF5C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF568);
  }
  return result;
}

uint64_t sub_100011020(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000E880(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100011088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF578;
  if (!qword_1000AF578)
  {
    v1 = sub_10000E880(&qword_1000AF438);
    sub_10001110C();
    sub_100011680(&qword_1000AF5A8, &qword_1000AF5B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF578);
  }
  return result;
}

unint64_t sub_10001110C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF580;
  if (!qword_1000AF580)
  {
    v1 = sub_10000E880(&qword_1000AF430);
    sub_100011190();
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF580);
  }
  return result;
}

unint64_t sub_100011190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF588;
  if (!qword_1000AF588)
  {
    v1 = sub_10000E880(&qword_1000AF428);
    sub_100011214();
    sub_100011680(&qword_1000AF598, &qword_1000AF5A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF588);
  }
  return result;
}

unint64_t sub_100011214()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000AF590;
  if (!qword_1000AF590)
  {
    v1 = sub_10000E880(&qword_1000AF420);
    v2[0] = &type metadata for Text;
    v2[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF590);
  }
  return result;
}

uint64_t sub_1000112A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000A58C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000112F0()
{
  uint64_t v0;

  return sub_10000D5A8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100011308()
{
  uint64_t v0;

  return sub_10000D618(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100011320()
{
  uint64_t v0;

  return sub_10000D3C4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100011338()
{
  uint64_t v0;

  return sub_10000D434(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100011350(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000E764(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100011380(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10000E774(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000113C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100011404(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 48);

  sub_100007CF0((_QWORD *)(a1 + 8));
  sub_100007CF0(v2);
  return a1;
}

uint64_t sub_100011440(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000A58C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100011484(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000A58C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000114C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF648;
  if (!qword_1000AF648)
  {
    v1 = sub_10000E880(&qword_1000AF650);
    sub_100011680(&qword_1000AF658, &qword_1000AF660, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    sub_100011548();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF648);
  }
  return result;
}

unint64_t sub_100011548()
{
  unint64_t result;

  result = qword_1000AF668;
  if (!qword_1000AF668)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
    atomic_store(result, (unint64_t *)&qword_1000AF668);
  }
  return result;
}

unint64_t sub_100011590()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF670;
  if (!qword_1000AF670)
  {
    v1 = sub_10000E880(&qword_1000AF678);
    sub_1000115FC();
    sub_100011548();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF670);
  }
  return result;
}

unint64_t sub_1000115FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF680;
  if (!qword_1000AF680)
  {
    v1 = sub_10000E880(&qword_1000AF638);
    sub_100011680(&qword_1000AF688, &qword_1000AF630, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF680);
  }
  return result;
}

uint64_t sub_100011680(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000E880(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id sub_10001170C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Application();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Application()
{
  return objc_opt_self(_TtC10ClockAngel11Application);
}

double sub_10001175C()
{
  return 10.0;
}

double sub_100011764()
{
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  return *(double *)&qword_1000B7030;
}

char *sub_1000117A4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  objc_class *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  NSString v29;
  _QWORD v31[2];
  uint64_t v32;
  unint64_t v33;
  objc_super v34;

  v5 = type metadata accessor for Date(0);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager;
  v10 = qword_1000AECF0;
  v11 = v2;
  if (v10 != -1)
    swift_once(&qword_1000AECF0, sub_1000516A0);
  v12 = (void *)qword_1000B6F10;
  *(_QWORD *)&v11[v9] = qword_1000B6F10;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = 0;
  v13 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  Date.init()(v12);
  v14 = type metadata accessor for ObservableStopwatchModel(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)&v11[v13] = sub_10002F744(206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 1, 3, v7);
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_leadingPadding] = 0x4031000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_verticalPadding] = 0x4031000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_expectedApertureHeight] = 0x4055000000000000;

  v15 = (objc_class *)type metadata accessor for SecureStopwatchController();
  v34.receiver = v11;
  v34.super_class = v15;
  v16 = (char *)objc_msgSendSuper2(&v34, "init");
  v17 = &v16[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  v18 = *(_QWORD *)&v16[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId + 8];
  *(_QWORD *)v17 = a1;
  *((_QWORD *)v17 + 1) = a2;
  v19 = v16;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v18);
  v20 = (void *)objc_opt_self(MTSessionUtilities);
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v21 = objc_msgSend(v19, "description");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._object = (void *)0x8000000100084EE0;
  v26._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v26);
  v31[0] = a1;
  v31[1] = a2;
  v27 = sub_10000A58C(&qword_1000AF7A0);
  _print_unlocked<A, B>(_:_:)(v31, &v32, v27, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(a2);
  v28 = v33;
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v20, "logInfo:", v29);

  (*(void (**)(void))((swift_isaMask & *(_QWORD *)v19) + 0x188))();
  return v19;
}

uint64_t sub_100011ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100011AD4, 0, 0);
}

uint64_t sub_100011AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 24) = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100011B3C, v2, v3);
}

uint64_t sub_100011B3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  sub_100012974();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100011B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v6 = sub_10000A58C(&qword_1000AF7C8);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000155A0(a1, (uint64_t)v8);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100011484((uint64_t)v8, &qword_1000AF7C8);
    v11 = 4096;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
    {
LABEL_3:
      v13 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v12);
      swift_unknownObjectRetain(v12);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v17 = v16;
      swift_unknownObjectRelease(v12);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v11 = v18 | 0x1000;
    v12 = *(_QWORD *)(a3 + 16);
    if (v12)
      goto LABEL_3;
  }
  v15 = 0;
  v17 = 0;
LABEL_6:
  v19 = swift_allocObject(&unk_10009EAF8, 32, 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  if (v17 | v15)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v11, v20, (char *)&type metadata for () + 8, &unk_1000AF7E0, v19);
}

id sub_100011DDC(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  id v14;
  objc_super v16;

  v3 = type metadata accessor for Date(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager;
  v8 = qword_1000AECF0;
  v9 = v1;
  if (v8 != -1)
    swift_once(&qword_1000AECF0, sub_1000516A0);
  v10 = (void *)qword_1000B6F10;
  *(_QWORD *)&v9[v7] = qword_1000B6F10;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = 0;
  v11 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  Date.init()(v10);
  v12 = type metadata accessor for ObservableStopwatchModel(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)&v9[v11] = sub_10002F744(206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 1, 3, v5);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_leadingPadding] = 0x4031000000000000;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_verticalPadding] = 0x4031000000000000;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_expectedApertureHeight] = 0x4055000000000000;

  v13 = (objc_class *)type metadata accessor for SecureStopwatchController();
  v16.receiver = v9;
  v16.super_class = v13;
  v14 = objc_msgSendSuper2(&v16, "initWithCoder:", a1);

  return v14;
}

id sub_100011FD8(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v6 = type metadata accessor for Date(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v3[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v10 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager;
  v11 = qword_1000AECF0;
  v12 = v3;
  if (v11 != -1)
    swift_once(&qword_1000AECF0, sub_1000516A0);
  v13 = (void *)qword_1000B6F10;
  *(_QWORD *)&v3[v10] = qword_1000B6F10;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = 0;
  v14 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  Date.init()(v13);
  v15 = type metadata accessor for ObservableStopwatchModel(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)&v12[v14] = sub_10002F744(206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 206967550000, 0xE500000000000000, 12336, 0xE200000000000000, 1, 3, v8);
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_leadingPadding] = 0x4031000000000000;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_verticalPadding] = 0x4031000000000000;
  *(_QWORD *)&v12[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_expectedApertureHeight] = 0x4055000000000000;

  if (a2)
  {
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v16 = 0;
  }
  v17 = (objc_class *)type metadata accessor for SecureStopwatchController();
  v20.receiver = v12;
  v20.super_class = v17;
  v18 = objc_msgSendSuper2(&v20, "initWithNibName:bundle:", v16, a3);

  return v18;
}

uint64_t sub_100012248()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  NSString v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  NSString v27;
  void *v28;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(27);
  v3 = objc_msgSend(v0, "description", 0);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  v7._countAndFlagsBits = 0xD000000000000019;
  v7._object = (void *)0x8000000100085060;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8, v4);

  v9 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  v10 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v10
    && (v11 = v10,
        v12 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()(),
        v11,
        v13 = objc_msgSend(v12, "state"),
        v12,
        v13 == (id)1))
  {
    _StringGuts.grow(_:)(21);
    v14 = objc_msgSend(v1, "description", 0);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;
    swift_bridgeObjectRelease(0xE000000000000000);

    v18._countAndFlagsBits = 0xD000000000000013;
    v18._object = (void *)0x80000001000850A0;
    String.append(_:)(v18);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    objc_msgSend(v2, "logInfo:", v19, v15);

    v20 = *(void **)((char *)v1 + v9);
    if (v20)
    {
      v21 = v20;
      dispatch thunk of StopwatchViewModel.resumeLapTimer()();
LABEL_7:

    }
  }
  else
  {
    _StringGuts.grow(_:)(20);
    v22 = objc_msgSend(v1, "description", 0);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;
    swift_bridgeObjectRelease(0xE000000000000000);

    v26._object = (void *)0x8000000100085080;
    v26._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v26);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    objc_msgSend(v2, "logInfo:", v27, v23);

    v28 = *(void **)((char *)v1 + v9);
    if (v28)
    {
      v21 = v28;
      dispatch thunk of StopwatchViewModel.pauseLapTimer()();
      goto LABEL_7;
    }
  }
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x1A8))();
}

void sub_100012530()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  NSString v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  NSString v19;
  void *v20;
  id v21;
  id v22;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  v3 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel];
  if (v3
    && (v4 = v3,
        v5 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()(),
        v4,
        v6 = objc_msgSend(v5, "state"),
        v5,
        v6 == (id)2))
  {
    v7 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(20);
    v8 = objc_msgSend(v1, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v10 = v9;
    swift_bridgeObjectRelease(0xE000000000000000);

    v11._object = (void *)0x8000000100085040;
    v11._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v11);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    objc_msgSend(v7, "logInfo:", v12);

    v13 = *(void **)&v1[v2];
    if (v13)
    {
      v21 = v13;
      dispatch thunk of StopwatchViewModel.lapLapTimer()();

    }
  }
  else
  {
    v14 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(23);
    v15 = objc_msgSend(v1, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v17 = v16;
    swift_bridgeObjectRelease(0xE000000000000000);

    v18._countAndFlagsBits = 0xD000000000000015;
    v18._object = (void *)0x8000000100085020;
    String.append(_:)(v18);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    objc_msgSend(v14, "logInfo:", v19);

    v20 = *(void **)&v1[v2];
    if (v20)
    {
      v22 = v20;
      dispatch thunk of StopwatchViewModel.resetLapTimer()();

    }
  }
}

void sub_10001279C()
{
  _QWORD *v0;

  (*(void (**)(void))((swift_isaMask & *v0) + 0x1A8))();
  sub_1000128C0();
}

void sub_1000127C8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSString v8;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v2
    && (v3 = v2,
        v4 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()(),
        v3,
        v5 = objc_msgSend(v4, "state"),
        v4,
        v5 == (id)1))
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage);
    if (!v6)
      return;
  }
  else
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage);
    if (!v6)
      return;
  }
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setState:");

}

void sub_1000128C0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  char v7;
  id v8;
  char v9;
  _BYTE *v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  if (v1)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
    v10 = *(_BYTE **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
    if (v2)
    {
      v3 = v1;
      v4 = v2;
      v5 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

      v6 = objc_msgSend(v5, "state");
      if (v6 == (id)2)
      {
        v7 = 0;
LABEL_7:
        v9 = v10[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode];
        v10[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode] = v7;
        sub_10002E1C8(v9);

        return;
      }
    }
    else
    {
      v8 = v1;
    }
    v7 = 1;
    goto LABEL_7;
  }
  __break(1u);
}

void sub_100012974()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  NSString v21;
  _QWORD aBlock[5];
  _QWORD *v23;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId];
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchId + 8];
  if (v3)
  {
    v4 = *(_QWORD *)v2;
    v5 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager];
    swift_bridgeObjectRetain(v3);
    v6 = objc_msgSend(v5, "getStopwatches");
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend((id)objc_opt_self(NAScheduler), "mainThreadScheduler");
      v9 = objc_msgSend(v7, "reschedule:", v8);
      swift_unknownObjectRelease(v8);

      v10 = (_QWORD *)swift_allocObject(&unk_10009EA80, 40, 7);
      v10[2] = v1;
      v10[3] = v4;
      v10[4] = v3;
      aBlock[4] = sub_100015488;
      v23 = v10;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100012EE4;
      aBlock[3] = &unk_10009EA98;
      v11 = _Block_copy(aBlock);
      v12 = v23;
      v13 = v1;
      swift_release(v12);
      v14 = objc_msgSend(v9, "addCompletionBlock:", v11);
      _Block_release(v11);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v15 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(27);
    v16 = objc_msgSend(v1, "description");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    swift_bridgeObjectRelease(0xE000000000000000);
    aBlock[0] = v17;
    v20._object = (void *)0x8000000100084F70;
    v20._countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v20);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    objc_msgSend(v15, "logInfo:", v21);

  }
}

void sub_100012BB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  NSString v16;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  unint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  if (a2)
  {
    v7 = (void *)objc_opt_self(MTSessionUtilities);
    v39 = 0;
    v40 = 0xE000000000000000;
    swift_errorRetain(a2);
    _StringGuts.grow(_:)(32);
    v8 = objc_msgSend(a3, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(v11);
    v13._object = (void *)0x8000000100085000;
    v13._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v13);
    v38 = a2;
    v14 = sub_10000A58C(&qword_1000B0300);
    _print_unlocked<A, B>(_:_:)(&v38, &v39, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v15 = v40;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    objc_msgSend(v7, "logInfo:", v16);

    swift_errorRelease(a2);
    return;
  }
  if (!a1
    || (v39 = 0,
        v20 = sub_100015494(0, &qword_1000AF7C0, MTStopwatch_ptr),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v39, v20),
        (v21 = v39) == 0))
  {
    v22 = (void *)objc_opt_self(MTSessionUtilities);
    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v23 = v40;
    v24 = objc_msgSend(a3, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v23);

    v39 = v25;
    v40 = v27;
    v28 = 0xD00000000000001ELL;
    v29 = 0x8000000100084FB0;
LABEL_9:
    String.append(_:)(*(Swift::String *)&v28);
    v36 = v40;
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
    objc_msgSend(v22, "logInfo:", v37);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(a5);
  v37 = sub_100014EF8(v21, a4, a5);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(a5);
  if (!v37)
  {
    v22 = (void *)objc_opt_self(MTSessionUtilities);
    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v30 = v40;
    v31 = objc_msgSend(a3, "description");
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;
    swift_bridgeObjectRelease(v30);

    v39 = v32;
    v40 = v34;
    v35._countAndFlagsBits = 0xD000000000000029;
    v35._object = (void *)0x8000000100084FD0;
    String.append(_:)(v35);
    v28 = a4;
    v29 = a5;
    goto LABEL_9;
  }
  sub_100012F58(v37);
LABEL_10:

}

void sub_100012EE4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_100012F58(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  void *v60;
  void *v61;
  id v62;
  void *v63;
  void *v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[4];

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v4);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v82 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v79 - v11;
  __chkstk_darwin(v10);
  v83 = (char *)&v79 - v13;
  v14 = objc_msgSend(a1, "mutableCopy");
  _bridgeAnyObjectToAny(_:)(v87);
  swift_unknownObjectRelease(v14);
  v15 = sub_100015494(0, &qword_1000AF7B8, MTMutableStopwatch_ptr);
  v16 = swift_dynamicCast(&v86, v87, (char *)&type metadata for Any + 8, v15, 6);
  v17 = v86;
  if (!v16)
    v17 = 0;
  v18 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch;
  v19 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch];
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch] = v17;

  v20 = *(void **)&v2[v18];
  v21 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatchManager];
  v22 = objc_allocWithZone((Class)DefaultDateProvider);
  v23 = v20;
  v24 = v21;
  v25 = objc_msgSend(v22, "init");
  v26 = objc_allocWithZone((Class)type metadata accessor for StopwatchViewModel(0));
  v27 = v2;
  v28 = StopwatchViewModel.init(stopwatch:manager:delegate:dateProvider:registerForNotifications:broadcastUpdates:)(v20, v21, v2, v25, 1, 1);
  v29 = *(void **)&v27[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel];
  v84 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  *(_QWORD *)&v27[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel] = v28;

  v30 = *(void **)&v2[v18];
  if (!v30)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v31 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  v32 = *(_QWORD *)&v27[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
  swift_retain(v32);
  v33 = objc_msgSend(v30, "state");
  KeyPath = swift_getKeyPath(&unk_1000815C0, v34);
  v37 = swift_getKeyPath(&unk_1000815E8, v36);
  v87[0] = v33;
  static Published.subscript.setter(v87, v32, KeyPath, v37);
  v38 = *(void **)&v2[v18];
  if (!v38)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v39 = *(_QWORD *)&v27[v31];
  swift_retain(v39);
  objc_msgSend(v38, "offset");
  v41 = v40;
  v43 = swift_getKeyPath(&unk_100081650, v42);
  v45 = swift_getKeyPath(&unk_100081678, v44);
  v87[0] = v41;
  static Published.subscript.setter(v87, v39, v43, v45);
  v46 = *(void **)&v2[v18];
  if (!v46)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v47 = objc_msgSend(v46, "startDate");
  v48 = v85;
  if (!v47)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v6, 1, 1, v7);
LABEL_11:
    sub_100011484((uint64_t)v6, &qword_1000AF178);
    v60 = *(void **)&v2[v18];
    if (!v60)
      goto LABEL_15;
    goto LABEL_12;
  }
  v49 = v47;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v50 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v50(v6, v12, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v6, 1, v7) == 1)
    goto LABEL_11;
  v81 = v31;
  v51 = v83;
  v50(v83, v6, v7);
  v52 = *(_QWORD *)&v27[v81];
  v53 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v53(v12, v51, v7);
  v80 = swift_getKeyPath(&unk_100081608, v54);
  v56 = swift_getKeyPath(&unk_100081630, v55);
  v57 = v82;
  v53(v82, v12, v7);
  swift_retain_n(v52, 2);
  static Published.subscript.setter(v57, v52, v80, v56);
  v58 = *(void (**)(char *, uint64_t))(v85 + 8);
  v58(v12, v7);
  swift_release(v52);
  v59 = v51;
  v31 = v81;
  v58(v59, v7);
  v60 = *(void **)&v2[v18];
  if (!v60)
    goto LABEL_15;
LABEL_12:
  if (objc_msgSend(v60, "state") == (id)2)
  {
    v61 = *(void **)&v27[v84];
    if (!v61)
      goto LABEL_18;
    v62 = v61;
    dispatch thunk of StopwatchViewModel.updateWithDisplayLink()();
    goto LABEL_17;
  }
LABEL_15:
  v63 = *(void **)&v27[v84];
  if (!v63)
    goto LABEL_18;
  v62 = v63;
  dispatch thunk of StopwatchViewModel.updateTime()();
LABEL_17:

LABEL_18:
  (*(void (**)(void))((swift_isaMask & *(_QWORD *)v27) + 0x1A0))();
  v64 = *(void **)&v2[v18];
  if (!v64)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v65 = *(_QWORD *)&v27[v31];
  swift_retain(v65);
  v66 = objc_msgSend(v64, "laps");
  if (v66)
  {
    v67 = v66;
    v68 = sub_100015494(0, &qword_1000AF7A8, NSNumber_ptr);
    v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, v68);

    if ((unint64_t)v69 >> 62)
    {
      if (v69 < 0)
        v78 = v69;
      else
        v78 = v69 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v69);
      v70 = _CocoaArrayWrapper.endIndex.getter(v78);
      swift_bridgeObjectRelease(v69);
    }
    else
    {
      v70 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v69);
    v72 = __OFADD__(v70, 1);
    v73 = v70 + 1;
    if (!v72)
    {
      v74 = swift_getKeyPath(&unk_100081698, v71);
      v76 = swift_getKeyPath(&unk_1000816C0, v75);
      v87[0] = v73;
      v77 = static Published.subscript.setter(v87, v65, v74, v76);
      (*(void (**)(uint64_t))((swift_isaMask & *(_QWORD *)v27) + 0x1C8))(v77);
      return;
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_33:
  __break(1u);
}

void sub_100013510()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t ObjectType;
  uint64_t ObjCClassFromMetadata;
  id v24;
  id v25;
  NSString v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  NSString v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  Class isa;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  NSString v57;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(SBUISystemApertureButton), "buttonWithType:", 0);
  v3 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = v2;

  v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = objc_msgSend(v5, "layer");
  objc_msgSend(v6, "setCornerRadius:", (*(double (**)(void))((swift_isaMask & *(_QWORD *)v0) + 0x178))() * 0.5);

  v7 = *(void **)&v0[v3];
  if (!v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = objc_msgSend(v7, "layer");
  objc_msgSend(v8, "setMasksToBounds:", 1);

  v9 = *(void **)&v1[v3];
  if (!v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = (void *)objc_opt_self(UIColor);
  v11 = v9;
  v12 = objc_msgSend(v10, "grayColor");
  objc_msgSend(v11, "setBackgroundColor:", v12);

  v13 = *(void **)&v1[v3];
  if (!v13)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = *(void **)&v1[v3];
  if (!v14)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v15 = (void *)objc_opt_self(ClockAngelUtilities);
  v16 = v14;
  v17 = objc_msgSend(v15, "mtOrange");
  v18 = objc_msgSend(v17, "colorWithAlphaComponent:", 0.35);

  objc_msgSend(v16, "setBackgroundColor:", v18);
  v19 = *(void **)&v1[v3];
  if (!v19)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  objc_msgSend(v19, "addTarget:action:forControlEvents:", v1, "playPausedAction", 64);
  v20 = objc_msgSend(v1, "view");
  if (!v20)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!*(_QWORD *)&v1[v3])
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v21 = v20;
  objc_msgSend(v20, "addSubview:");

  ObjectType = swift_getObjectType(v1);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
  v24 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v25 = objc_allocWithZone((Class)BSUICAPackageView);
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "initWithPackageName:inBundle:", v26, v24);

  v28 = (void *)objc_opt_self(MTSessionUtilities);
  if (v27)
  {
    _StringGuts.grow(_:)(34);
    v29 = objc_msgSend(v1, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v31 = v30;
    swift_bridgeObjectRelease(0xE000000000000000);

    v32._object = (void *)0x8000000100084F40;
    v32._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v32);
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    objc_msgSend(v28, "logInfo:", v33);

    v34 = *(void **)&v1[v3];
    if (v34)
    {
      objc_msgSend(v34, "addSubview:", v27);
      objc_msgSend(v27, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v27, "setUserInteractionEnabled:", 0);
      v35 = sub_10000A58C((uint64_t *)&unk_1000B2750);
      v36 = swift_allocObject(v35, 64, 7);
      *(_OWORD *)(v36 + 16) = xmmword_100081560;
      v37 = objc_msgSend(v27, "widthAnchor");
      v38 = objc_msgSend(v37, "constraintEqualToConstant:", 24.0);

      *(_QWORD *)(v36 + 32) = v38;
      v39 = objc_msgSend(v27, "heightAnchor");
      v40 = objc_msgSend(v39, "constraintEqualToConstant:", 24.0);

      *(_QWORD *)(v36 + 40) = v40;
      v41 = objc_msgSend(v27, "centerXAnchor");
      v42 = *(void **)&v1[v3];
      if (v42)
      {
        v43 = objc_msgSend(v42, "centerXAnchor");
        v44 = objc_msgSend(v41, "constraintEqualToAnchor:", v43);

        *(_QWORD *)(v36 + 48) = v44;
        v45 = objc_msgSend(v27, "centerYAnchor");
        v46 = *(void **)&v1[v3];
        if (v46)
        {
          v47 = v45;
          v48 = (void *)objc_opt_self(NSLayoutConstraint);
          v49 = objc_msgSend(v46, "centerYAnchor");
          v50 = objc_msgSend(v47, "constraintEqualToAnchor:", v49);

          *(_QWORD *)(v36 + 56) = v50;
          specialized Array._endMutation()();
          sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v36);
          objc_msgSend(v48, "activateConstraints:", isa);

          v52 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage];
          *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_pausePlayPackage] = v27;

          return;
        }
        goto LABEL_26;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  _StringGuts.grow(_:)(50);
  v53 = objc_msgSend(v1, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v55 = v54;
  swift_bridgeObjectRelease(0xE000000000000000);

  v56._countAndFlagsBits = 0xD000000000000030;
  v56._object = (void *)0x8000000100084F00;
  String.append(_:)(v56);
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v55);
  objc_msgSend(v28, "logInfo:", v57);

}

void sub_100013B94()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for UIButton.Configuration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015494(0, &qword_1000B2E80, SBUISystemApertureButton_ptr);
  v5 = objc_msgSend((id)objc_opt_self(UIButtonConfiguration), "sbui_systemApertureSymbolButtonConfiguration");
  static UIButton.Configuration._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = UIButton.init(configuration:primaryAction:)(v4, 0);
  v7 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  v8 = *(void **)((char *)v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton) = v6;

  v9 = *(void **)((char *)v1 + v7);
  if (!v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = *(void **)((char *)v1 + v7);
  if (!v10)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v11 = objc_msgSend(v10, "layer");
  objc_msgSend(v11, "setCornerRadius:", (*(double (**)(void))((swift_isaMask & *v1) + 0x178))() * 0.5);

  v12 = objc_msgSend(v1, "view");
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!*(_QWORD *)((char *)v1 + v7))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = v12;
  objc_msgSend(v12, "addSubview:");

  v14 = objc_allocWithZone((Class)type metadata accessor for SpinnyResetView());
  v15 = sub_10002D82C(0.0, 0.0, 50.0, 50.0, 23.0, 25.0);
  v16 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView;
  v17 = *(void **)((char *)v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView) = v15;

  v18 = *(void **)((char *)v1 + v7);
  if (!v18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_100015494(0, &qword_1000AF7B0, UIAction_ptr);
  v19 = swift_allocObject(&unk_10009EA08, 24, 7);
  *(_QWORD *)(v19 + 16) = v1;
  v20 = v1;
  v21 = v18;
  v22 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100015434, v19);
  objc_msgSend(v21, "addAction:forControlEvents:", v22, 64);

  v23 = *(void **)((char *)v1 + v7);
  if (!v23)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(_QWORD *)((char *)v1 + v16))
  {
    objc_msgSend(v23, "addSubview:");
    return;
  }
LABEL_15:
  __break(1u);
}

void sub_100013E40(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *(void **)(a2 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  if (v2)
  {
    if ((*((_BYTE *)v2 + OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode) & 1) == 0)
    {
      v3 = swift_allocObject(&unk_10009EA30, 24, 7);
      *(_QWORD *)(v3 + 16) = v2;
      v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v9[4] = sub_10001543C;
      v10 = v3;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 1107296256;
      v9[2] = sub_10001C5FC;
      v9[3] = &unk_10009EA48;
      v5 = _Block_copy(v9);
      v6 = v10;
      v7 = v2;
      swift_release(v6);
      v8 = objc_msgSend(v4, "initWithDuration:dampingRatio:animations:", v5, 0.5, 1.0);
      _Block_release(v5);
      objc_msgSend(v8, "startAnimation");

    }
    sub_100012530();
  }
  else
  {
    __break(1u);
  }
}

id sub_100013F94()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureStopwatchController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureStopwatchController()
{
  return objc_opt_self(_TtC10ClockAngel25SecureStopwatchController);
}

uint64_t sub_100014164(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = v2;
  v4 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  v5 = *(void **)((char *)v2 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v5)
  {
    v6 = v5;
    dispatch thunk of StopwatchViewModel.invalidateDisplayLink()();

    v7 = *(void **)((char *)v3 + v4);
    if (v7)
    {
      v8 = v7;
      dispatch thunk of StopwatchViewModel.updateWithDisplayLink()();

    }
  }
  v9 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel);
  KeyPath = swift_getKeyPath(&unk_1000815C0, a2);
  v12 = swift_getKeyPath(&unk_1000815E8, v11);
  v15 = 2;
  swift_retain(v9);
  v13 = static Published.subscript.setter(&v15, v9, KeyPath, v12);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x1A0))(v13);
}

void sub_10001426C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  double v30;

  v3 = v2;
  v4 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  v5 = *(void **)((char *)v2 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v5)
  {
    v6 = v5;
    dispatch thunk of StopwatchViewModel.invalidateDisplayLink()();

  }
  v7 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  v8 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel);
  KeyPath = swift_getKeyPath(&unk_1000815C0, a2);
  v11 = swift_getKeyPath(&unk_1000815E8, v10);
  *(_QWORD *)&v30 = 1;
  swift_retain(v8);
  v12 = static Published.subscript.setter(&v30, v8, KeyPath, v11);
  v13 = *(void **)((char *)v3 + v4);
  if (v13)
  {
    v14 = v13;
    v15 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

    objc_msgSend(v15, "offset");
    v17 = v16;

    v18 = *(_QWORD *)((char *)v3 + v7);
    v19 = *(void **)((char *)v3 + v4);
    swift_retain(v18);
    if (v19)
    {
      v21 = v19;
      v22 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

      objc_msgSend(v22, "previousLapsTotalInterval");
      v24 = v23;

    }
    else
    {
      v24 = 0.0;
    }
    v25 = swift_getKeyPath(&unk_100081650, v20);
    v27 = swift_getKeyPath(&unk_100081678, v26);
    v30 = v17 + v24;
    v12 = static Published.subscript.setter(&v30, v18, v25, v27);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x1A0))(v12);
  v28 = *(void **)((char *)v3 + v4);
  if (v28)
  {
    v29 = v28;
    dispatch thunk of StopwatchViewModel.updateTime()();

  }
}

void sub_100014440()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (!v2)
    goto LABEL_7;
  v3 = v2;
  v4 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

  v5 = objc_msgSend(v4, "laps");
  if (v5)
  {
    v6 = sub_100015494(0, &qword_1000AF7A8, NSNumber_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v15 = v7;
      else
        v15 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v8 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v7);
    v10 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
      v11 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel);
      KeyPath = swift_getKeyPath(&unk_100081698, v9);
      v14 = swift_getKeyPath(&unk_1000816C0, v13);
      v16 = v10;
      swift_retain(v11);
      static Published.subscript.setter(&v16, v11, KeyPath, v14);
LABEL_7:
      (*(void (**)(void))((swift_isaMask & *v1) + 0x1E8))();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100014650()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000AF178);
  v3 = __chkstk_darwin(v2);
  v40 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v39 - v5;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v41 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v39 - v12;
  v14 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel;
  v15 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v15)
  {
    v16 = v15;
    dispatch thunk of StopwatchViewModel.invalidateDisplayLink()();

    v17 = *(void **)((char *)v1 + v14);
    if (v17)
    {
      v18 = v17;
      dispatch thunk of StopwatchViewModel.updateWithDisplayLink()();

    }
  }
  v19 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  v20 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel);
  KeyPath = swift_getKeyPath(&unk_1000815C0, v11);
  v23 = swift_getKeyPath(&unk_1000815E8, v22);
  v42 = 2;
  swift_retain(v20);
  static Published.subscript.setter(&v42, v20, KeyPath, v23);
  v24 = *(_QWORD *)((char *)v1 + v19);
  v25 = *(void **)((char *)v1 + v14);
  if (v25)
  {
    swift_retain(*(_QWORD *)((char *)v1 + v19));
    v26 = v25;
    v27 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()();

    v28 = objc_msgSend(v27, "startDate");
    if (v28)
    {
      v29 = (uint64_t)v40;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v28);

      v30 = 0;
    }
    else
    {
      v30 = 1;
      v29 = (uint64_t)v40;
    }
    v32 = v41;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v29, v30, 1, v7);
    sub_100014E98(v29, (uint64_t)v6);
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
    if ((_DWORD)v31 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    v31 = swift_retain(v24);
    v32 = v41;
  }
  Date.init()(v31);
  sub_100011484((uint64_t)v6, &qword_1000AF178);
LABEL_12:
  v34 = swift_getKeyPath(&unk_100081608, v33);
  v36 = swift_getKeyPath(&unk_100081630, v35);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v32, v13, v7);
  swift_retain(v24);
  static Published.subscript.setter(v32, v24, v34, v36);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  v37 = swift_release(v24);
  return (*(uint64_t (**)(__n128))((swift_isaMask & *v1) + 0x1A0))(v37);
}

void sub_100014990(uint64_t a1, uint64_t a2)
{
  sub_1000149C0(a1, a2, (void (*)(void))&dispatch thunk of StopwatchViewModel.pauseLapTimer());
}

void sub_10001499C(uint64_t a1, uint64_t a2)
{
  sub_1000149C0(a1, a2, (void (*)(void))&dispatch thunk of StopwatchViewModel.lapLapTimer());
}

void sub_1000149A8(uint64_t a1, uint64_t a2)
{
  sub_1000149C0(a1, a2, (void (*)(void))&dispatch thunk of StopwatchViewModel.resumeLapTimer());
}

void sub_1000149B4(uint64_t a1, uint64_t a2)
{
  sub_1000149C0(a1, a2, (void (*)(void))&dispatch thunk of StopwatchViewModel.resetLapTimer());
}

void sub_1000149C0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  _QWORD *v3;
  void *v4;
  id v6;

  v4 = *(void **)(*v3 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v4)
  {
    v6 = v4;
    a3();

  }
}

void sub_100014A1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void (*v19)(void);
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  Class isa;

  v1 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  if (!*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton))
  {
    v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1D0))();
    (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x1D8))(v2);
  }
  v3 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v4 = swift_allocObject(v3, 96, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100081570;
  v5 = *(void **)((char *)v0 + v1);
  if (!v5)
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = objc_msgSend(v5, "leadingAnchor");
  v7 = objc_msgSend(v0, "view");
  if (!v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "leadingAnchor");

  v10 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v9, 17.0);
  *(_QWORD *)(v4 + 32) = v10;
  v11 = *(void **)((char *)v0 + v1);
  if (!v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v12 = objc_msgSend(v11, "trailingAnchor");
  v13 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton);
  if (!v14)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v15 = objc_msgSend(v14, "leadingAnchor");
  v16 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v15, -(*(double (**)(void))((swift_isaMask & *v0) + 0x170))());

  *(_QWORD *)(v4 + 40) = v16;
  v17 = *(void **)((char *)v0 + v1);
  if (!v17)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v18 = objc_msgSend(v17, "widthAnchor");
  v19 = *(void (**)(void))((swift_isaMask & *v0) + 0x178);
  v19();
  v20 = objc_msgSend(v18, "constraintEqualToConstant:");

  *(_QWORD *)(v4 + 48) = v20;
  v21 = *(void **)((char *)v0 + v1);
  if (!v21)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v22 = objc_msgSend(v21, "heightAnchor");
  v19();
  v23 = objc_msgSend(v22, "constraintEqualToConstant:");

  *(_QWORD *)(v4 + 56) = v23;
  v24 = *(void **)((char *)v0 + v1);
  if (!v24)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v25 = objc_msgSend(v24, "centerYAnchor");
  v26 = objc_msgSend(v0, "view");
  if (!v26)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v27 = v26;
  v28 = objc_msgSend(v26, "centerYAnchor");

  v29 = objc_msgSend(v25, "constraintEqualToAnchor:", v28);
  *(_QWORD *)(v4 + 64) = v29;
  v30 = *(void **)((char *)v0 + v13);
  if (!v30)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v31 = objc_msgSend(v30, "widthAnchor");
  v19();
  v32 = objc_msgSend(v31, "constraintEqualToConstant:");

  *(_QWORD *)(v4 + 72) = v32;
  v33 = *(void **)((char *)v0 + v13);
  if (!v33)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v34 = objc_msgSend(v33, "heightAnchor");
  v19();
  v35 = objc_msgSend(v34, "constraintEqualToConstant:");

  *(_QWORD *)(v4 + 80) = v35;
  v36 = *(void **)((char *)v0 + v13);
  if (!v36)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v37 = objc_msgSend(v36, "centerYAnchor");
  v38 = objc_msgSend(v0, "view");
  if (v38)
  {
    v39 = v38;
    v40 = (void *)objc_opt_self(NSLayoutConstraint);
    v41 = objc_msgSend(v39, "centerYAnchor");

    v42 = objc_msgSend(v37, "constraintEqualToAnchor:", v41);
    *(_QWORD *)(v4 + 88) = v42;
    specialized Array._endMutation()();
    sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
    objc_msgSend(v40, "activateConstraints:", isa);

    return;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_100014E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000AF178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100014EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      v6 = 4;
      while (1)
      {
        v7 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v10 = objc_msgSend(v7, "identifier");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v17 = a3;
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v18 = a3;
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      v5 = v20;
    }
    while (v20);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_100015088(char a1, double a2, double a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;

  v7 = (id)FormatTime(0, 1, a3);
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = (id)FormatTime(0, 0, a3);
  if (v12)
  {
    v13 = v12;
    *(double *)&v60 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)(v12));
    v15 = v14;

  }
  else
  {
    *(double *)&v60 = 0.0;
    v15 = 0;
  }
  v16 = (id)FormatTime(0, 1, a2);
  if (v16)
  {
    v17 = v16;
    *(double *)&v18 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)(v16));
    v20 = v19;

  }
  else
  {
    *(double *)&v18 = 0.0;
    v20 = 0;
  }
  v21 = (id)FormatTime(0, 0, a2);
  if (v21)
  {
    v23 = v21;
    *(double *)&v24 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)(v21));
    v26 = v25;

    if ((a1 & 1) != 0)
    {
LABEL_12:
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v20);
      return swift_bridgeObjectRelease(v26);
    }
  }
  else
  {
    *(double *)&v24 = 0.0;
    v26 = 0;
    if ((a1 & 1) != 0)
      goto LABEL_12;
  }
  v58 = *(double *)&v9;
  v59 = v11;
  v28 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel;
  v29 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel);
  KeyPath = swift_getKeyPath(&unk_1000816E0, v22);
  v32 = swift_getKeyPath(&unk_100081708, v31);
  v61 = a2;
  swift_retain(v29);
  static Published.subscript.setter(&v61, v29, KeyPath, v32);
  v33 = *(_QWORD *)(v3 + v28);
  v35 = swift_getKeyPath(&unk_100081728, v34);
  v37 = swift_getKeyPath(&unk_100081750, v36);
  v61 = a3;
  swift_retain(v33);
  result = static Published.subscript.setter(&v61, v33, v35, v37);
  if (!v20)
  {
    __break(1u);
    goto LABEL_20;
  }
  v39 = *(_QWORD *)(v3 + v28);
  v40 = swift_getKeyPath(&unk_100081770, v38);
  v42 = swift_getKeyPath(&unk_100081798, v41);
  v61 = *(double *)&v18;
  v62 = v20;
  swift_retain(v39);
  result = static Published.subscript.setter(&v61, v39, v40, v42);
  if (!v26)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v44 = *(_QWORD *)(v3 + v28);
  v45 = swift_getKeyPath(&unk_1000817B8, v43);
  v47 = swift_getKeyPath(&unk_1000817E0, v46);
  v61 = *(double *)&v24;
  v62 = v26;
  swift_retain(v44);
  result = static Published.subscript.setter(&v61, v44, v45, v47);
  if (!v59)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v49 = *(_QWORD *)(v3 + v28);
  v50 = swift_getKeyPath(&unk_100081800, v48);
  v52 = swift_getKeyPath(&unk_100081828, v51);
  v61 = v58;
  v62 = v59;
  swift_retain(v49);
  result = static Published.subscript.setter(&v61, v49, v50, v52);
  if (v15)
  {
    v54 = *(_QWORD *)(v3 + v28);
    v55 = swift_getKeyPath(&unk_100081848, v53);
    v57 = swift_getKeyPath(&unk_100081870, v56);
    v61 = *(double *)&v60;
    v62 = v15;
    swift_retain(v54);
    return static Published.subscript.setter(&v61, v54, v55, v57);
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100015410()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100015434(uint64_t a1)
{
  uint64_t v1;

  sub_100013E40(a1, *(_QWORD *)(v1 + 16));
}

id sub_10001543C()
{
  uint64_t v0;

  return sub_10002EE50(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100015444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015454(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001545C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100015488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100012BB0(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100015494(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000154CC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000154F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1000AF7D4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100015558;
  v3[2] = v2;
  return swift_task_switch(sub_100011AD4, 0, 0);
}

uint64_t sub_100015558()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000155A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000AF7C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000155E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001560C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000B0F34);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100015558;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000B0F30 + dword_1000B0F30))(a1, v4);
}

uint64_t sub_100015688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = type metadata accessor for Optional(0, *(_QWORD *)(*(_QWORD *)v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)));
  return v0;
}

uint64_t sub_1000156F0()
{
  uint64_t v0;

  sub_100015688();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100015714()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t sub_100015738()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t Atomic.__allocating_init(wrappedValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  Atomic.init(wrappedValue:)(a1);
  return v3;
}

char *Atomic.init(wrappedValue:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)v1;
  v4 = type metadata accessor for CPUnfairLock();
  v5 = swift_allocObject(v4, 20, 7);
  *(_DWORD *)(v5 + 16) = 0;
  *((_QWORD *)v1 + 2) = v5;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))(&v1[*(_QWORD *)(v3 + 96)], a1);
  return v1;
}

uint64_t type metadata accessor for CPUnfairLock()
{
  return objc_opt_self(_TtC10ClockAngel12CPUnfairLock);
}

uint64_t Atomic.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  char *v5;
  uint64_t v7;
  _BYTE v8[24];

  v3 = *v1;
  v4 = (os_unfair_lock_s *)(v1[2] + 16);
  swift_beginAccess(v4, v8, 33, 0);
  os_unfair_lock_lock(v4);
  v5 = (char *)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess(v5, &v7, 0, 0);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v5);
  os_unfair_lock_unlock(v4);
  return swift_endAccess(v8);
}

uint64_t Atomic.wrappedValue.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_100015AB4(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void (*Atomic.wrappedValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  Atomic.wrappedValue.getter((uint64_t)v7);
  return sub_100015978;
}

void sub_100015978(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    sub_100015AB4((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_100015AB4(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

char *Atomic.deinit()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  swift_release(*((_QWORD *)v0 + 2));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 96)]);
  return v0;
}

uint64_t Atomic.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  swift_release(*((_QWORD *)v0 + 2));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 96)]);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100015AA4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 20, 7);
}

uint64_t sub_100015AB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  os_unfair_lock_s *v4;
  char *v5;
  _BYTE v7[24];

  v3 = *v1;
  v4 = (os_unfair_lock_s *)(v1[2] + 16);
  swift_beginAccess(v4, v7, 33, 0);
  os_unfair_lock_lock(v4);
  swift_endAccess(v7);
  v5 = (char *)v1 + *(_QWORD *)(*v1 + 96);
  swift_beginAccess(v5, v7, 33, 0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 24))(v5, a1);
  swift_endAccess(v7);
  swift_beginAccess(v4, v7, 33, 0);
  os_unfair_lock_unlock(v4);
  return swift_endAccess(v7);
}

uint64_t sub_100015B78(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_1000818C8;
    result = swift_initClassMetadata2(a1, 0, 4, v4, a1 + 96);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ObservationStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100015D00(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservationStream);
}

uint64_t sub_100015C18(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 112);
}

uint64_t type metadata accessor for ObservationStreamCollection(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ObservationStreamCollection);
}

uint64_t sub_100015C74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Atomic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100015D00(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Atomic);
}

uint64_t sub_100015D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void sub_100015DAC(void *a1, void (*a2)(char *, uint64_t))
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  Swift::String v41;
  unint64_t v42;
  NSString v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t KeyPath;
  __n128 v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  Swift::String v72;
  id v73;
  uint64_t v74;
  void *v75;
  void *v76;
  Swift::String v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  Swift::String v84;
  id v85;
  uint64_t v86;
  void *v87;
  void *v88;
  Swift::String v89;
  Swift::String v90;
  unint64_t v91;
  NSString v92;
  char v93;
  unint64_t v94;
  char *v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  Swift::String v100;
  unint64_t v101;
  NSString v102;
  char v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  Swift::String v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  void (*v155)(char *, _QWORD, uint64_t, uint64_t, __n128);
  char *v156;
  char *v157;
  id v158;
  uint64_t v159;
  void *v160;
  void *v161;
  Swift::String v162;
  Swift::String v163;
  Swift::String v164;
  void *v165;
  id v166;
  uint64_t v167;
  void *v168;
  void *v169;
  Swift::String v170;
  void *v171;
  uint64_t v172;
  Swift::String v173;
  void *v174;
  char v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  NSString v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  __objc2_ivar *v189;
  __n128 v190;
  uint64_t v191;
  char *v192;
  id v193;
  uint64_t v194;
  void *v195;
  void *v196;
  Swift::String v197;
  Swift::String v198;
  Swift::String v199;
  void *v200;
  id v201;
  uint64_t v202;
  void *v203;
  void *v204;
  Swift::String v205;
  unint64_t v206;
  NSString v207;
  id v208;
  id v209;
  uint64_t v210;
  void *v211;
  void *v212;
  Swift::String v213;
  Swift::String v214;
  id v215;
  uint64_t v216;
  void *v217;
  void *v218;
  Swift::String v219;
  Swift::String v220;
  void *v221;
  uint64_t v222;
  void *v223;
  void *v224;
  Swift::String v225;
  Swift::String v226;
  unint64_t v227;
  NSString v228;
  void *v229;
  char v230;
  char v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  id v242;
  uint64_t v243;
  void *v244;
  void *v245;
  Swift::String v246;
  Swift::String v247;
  id v248;
  uint64_t v249;
  void *v250;
  void *v251;
  Swift::String v252;
  Swift::String v253;
  char *v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  void *v258;
  void *v259;
  Swift::String v260;
  Swift::String v261;
  unint64_t v262;
  NSString v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  id v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  Swift::String v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  Swift::String v279;
  void *object;
  Swift::String v281;
  unint64_t v282;
  NSString v283;
  id v284;
  uint64_t v285;
  unsigned int v286;
  id v287;
  char v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  id v292;
  uint64_t v293;
  void *v294;
  void *v295;
  Swift::String v296;
  Swift::String v297;
  uint64_t v298;
  unint64_t v299;
  NSString v300;
  unint64_t v301;
  id v302;
  uint64_t v303;
  void *v304;
  void *v305;
  Swift::String v306;
  Swift::String v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  NSString v313;
  id v314;
  void *v315;
  id v316;
  id v317;
  id v318;
  uint64_t v319;
  char v320;
  id v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  uint64_t v325;
  void (**v326)();
  uint64_t v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD v332[2];
  uint64_t v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  char *v341;
  char *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  void (*v349)(char *, uint64_t);
  id v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  char *v355;
  id v356;
  uint64_t v357;
  uint64_t v358;
  id v359;
  id v360;
  uint64_t v361;
  void *v362;
  unint64_t v363;

  v3 = v2;
  v349 = a2;
  v359 = a1;
  v333 = type metadata accessor for StopwatchContext(0);
  v332[1] = *(_QWORD *)(v333 - 8);
  __chkstk_darwin(v333);
  v332[0] = (char *)v332 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000A58C(&qword_1000AFBB8);
  v6 = __chkstk_darwin(v5);
  v337 = (char *)v332 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v336 = (char *)v332 - v9;
  v10 = __chkstk_darwin(v8);
  v339 = (char *)v332 - v11;
  __chkstk_darwin(v10);
  v341 = (char *)v332 - v12;
  v344 = type metadata accessor for AlarmActivityAttributes(0);
  v345 = *(_QWORD *)(v344 - 8);
  __chkstk_darwin(v344);
  v338 = (char *)v332 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000A58C(&qword_1000AFBB0);
  v15 = __chkstk_darwin(v14);
  v335 = (char *)v332 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v334 = (char *)v332 - v18;
  v19 = __chkstk_darwin(v17);
  v340 = (char *)v332 - v20;
  __chkstk_darwin(v19);
  v343 = (char *)v332 - v21;
  v353 = type metadata accessor for TimerActivityAttributes(0);
  v346 = *(_QWORD *)(v353 - 8);
  __chkstk_darwin(v353);
  v342 = (char *)v332 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v352 = type metadata accessor for ActivityAttributesType(0);
  v347 = *(_QWORD *)(v352 - 8);
  v23 = __chkstk_darwin(v352);
  v348 = (char *)v332 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v351 = (char *)v332 - v25;
  v26 = sub_10000A58C(&qword_1000AFBF0);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)v332 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)v332 - v30;
  v32 = type metadata accessor for ActivityDescriptor(0);
  v357 = *(_QWORD *)(v32 - 8);
  v358 = v32;
  __chkstk_darwin(v32);
  v355 = (char *)v332 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = (void *)objc_opt_self(MTSessionUtilities);
  v362 = 0;
  v363 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v35 = v363;
  v36 = objc_msgSend(v3, "description");
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;
  swift_bridgeObjectRelease(v35);

  v362 = (void *)v37;
  v363 = v39;
  v40 = v34;
  v41._countAndFlagsBits = 0xD00000000000001ELL;
  v41._object = (void *)0x8000000100085920;
  String.append(_:)(v41);
  v42 = v363;
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v42);
  objc_msgSend(v34, "logInfo:", v43);

  v44 = type metadata accessor for ActivityScene(0);
  v45 = v359;
  v46 = swift_dynamicCastClass(v359, v44);
  if (!v46)
  {
    v362 = 0;
    v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    v67 = v363;
    v68 = objc_msgSend(v3, "description");
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v71 = v70;
    swift_bridgeObjectRelease(v67);

    v362 = (void *)v69;
    v363 = v71;
    v72._countAndFlagsBits = 0xD000000000000017;
    v72._object = (void *)0x80000001000854A0;
    String.append(_:)(v72);
    v73 = objc_msgSend(v45, "description");
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v76 = v75;

    v77._countAndFlagsBits = v74;
    v77._object = v76;
    String.append(_:)(v77);
    swift_bridgeObjectRelease(v76);
    v78 = v363;
    v359 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v78);
    objc_msgSend(v40, "logError:", v359);

    return;
  }
  v47 = (void *)v46;
  v356 = v34;
  v48 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene];
  v354 = v3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene] = v46;
  v359 = v45;

  KeyPath = swift_getKeyPath(&unk_100081C50, v49);
  v350 = v47;
  dispatch thunk of ActivityScene.subscript.getter(&v362, KeyPath, &protocol witness table for SceneSettingScopes.ActivitySettings.ActivityDescriptorKey);
  v51 = swift_release(KeyPath);
  v52 = v362;
  if (!v362)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v357 + 56))(v31, 1, 1, v358, v51);
LABEL_11:
    sub_100011484((uint64_t)v31, &qword_1000AFBF0);
    v362 = 0;
    v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v79 = v363;
    v80 = objc_msgSend(v354, "description");
    v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v83 = v82;
    swift_bridgeObjectRelease(v79);

    v362 = (void *)v81;
    v363 = v83;
    v84._object = (void *)0x8000000100085940;
    v84._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v84);
    v85 = objc_msgSend(v350, "description");
    v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    v88 = v87;

    v89._countAndFlagsBits = v86;
    v89._object = v88;
    String.append(_:)(v89);
    swift_bridgeObjectRelease(v88);
    v90._countAndFlagsBits = 93;
    v90._object = (void *)0xE100000000000000;
    String.append(_:)(v90);
    v91 = v363;
    v92 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v91);
    objc_msgSend(v356, "logError:", v92);

    return;
  }
  v54 = v357;
  v53 = v358;
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v357 + 56);
  v56 = 1;
  v55(v29, 1, 1, v358, v51);
  v57 = sub_1000073C0(&qword_1000AFBF8, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityDescriptor, (uint64_t)&protocol conformance descriptor for ActivityDescriptor);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v52, v29, v53, v57);

  v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
  if (v58(v29, 1, v53) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v31, v29, v53);
    v56 = 0;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v55)(v31, v56, 1, v53);
  if (v58(v31, 1, v53) == 1)
    goto LABEL_11;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v355, v31, v53);
  v59 = objc_msgSend(v349, "role");
  v60 = (void *)static UISceneSessionRole.activityAmbient.getter();
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
  v63 = v62;
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v66 = v64;
  if (v61 == v65 && v63 == v64)
  {

    swift_bridgeObjectRelease_n(v63, 2);
LABEL_13:
    v362 = 0;
    v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v94 = v363;
    v95 = v354;
    v96 = objc_msgSend(v354, "description");
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
    v99 = v98;
    swift_bridgeObjectRelease(v94);

    v362 = (void *)v97;
    v363 = v99;
    v100._countAndFlagsBits = 0xD00000000000001ALL;
    v100._object = (void *)0x8000000100085BB0;
    String.append(_:)(v100);
    v101 = v363;
    v102 = String._bridgeToObjectiveC()();
    v103 = 0;
    goto LABEL_19;
  }
  v93 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v63, v65, v64, 0);

  swift_bridgeObjectRelease(v63);
  swift_bridgeObjectRelease(v66);
  if ((v93 & 1) != 0)
    goto LABEL_13;
  v104 = objc_msgSend(v349, "role");
  v105 = (void *)static UISceneSessionRole.activityAmbientCompact.getter();
  v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
  v108 = v107;
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
  v111 = v109;
  if (v106 == v110 && v108 == v109)
  {

    swift_bridgeObjectRelease_n(v108, 2);
  }
  else
  {
    v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v108, v110, v109, 0);

    swift_bridgeObjectRelease(v108);
    v113 = swift_bridgeObjectRelease(v111);
    if ((v112 & 1) == 0)
      goto LABEL_20;
  }
  v362 = 0;
  v363 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v114 = v363;
  v95 = v354;
  v115 = objc_msgSend(v354, "description");
  v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
  v118 = v117;
  swift_bridgeObjectRelease(v114);

  v362 = (void *)v116;
  v363 = v118;
  v119._countAndFlagsBits = 0xD000000000000022;
  v119._object = (void *)0x8000000100085B80;
  String.append(_:)(v119);
  v101 = v363;
  v102 = String._bridgeToObjectiveC()();
  v103 = 1;
LABEL_19:
  swift_bridgeObjectRelease(v101);
  objc_msgSend(v356, "logInfo:", v102);

  v95[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] = v103;
LABEL_20:
  v120 = v351;
  ActivityDescriptor.attributesType.getter(v113);
  v121 = sub_1000073C0(&qword_1000AFC00, (uint64_t (*)(uint64_t))&type metadata accessor for TimerActivityAttributes, (uint64_t)&protocol conformance descriptor for TimerActivityAttributes);
  v122 = v348;
  v123 = v353;
  ActivityAttributesType.init<A>(from:)(v353, v353, v121);
  v124 = static ActivityAttributesType.== infix(_:_:)(v120, v122);
  v125 = *(void (**)(char *, uint64_t))(v347 + 8);
  v126 = v352;
  v125(v122, v352);
  v127 = ((uint64_t (*)(char *, uint64_t))v125)(v120, v126);
  if ((v124 & 1) != 0)
  {
    v128 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v128, *(unsigned int *)(v128 + 48), *(unsigned __int16 *)(v128 + 52));
    v129 = JSONDecoder.init()();
    v130 = ActivityDescriptor.attributesData.getter();
    v132 = v131;
    v133 = sub_1000073C0(&qword_1000AFC38, (uint64_t (*)(uint64_t))&type metadata accessor for TimerActivityAttributes, (uint64_t)&protocol conformance descriptor for TimerActivityAttributes);
    v134 = v343;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v123, v130, v132, v123, v133);
    v135 = v354;
    v349 = v125;
    sub_10001E8B4(v130, v132);
    v153 = swift_release(v129);
    v154 = v346;
    v155 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v346 + 56);
    v155(v134, 0, 1, v123, v153);
    v156 = v134;
    v157 = v342;
    (*(void (**)(char *, char *, uint64_t))(v154 + 32))(v342, v156, v123);
    v362 = 0;
    v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v158 = objc_msgSend(v135, "description");
    v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v158);
    v161 = v160;

    v162._countAndFlagsBits = v159;
    v162._object = v161;
    String.append(_:)(v162);
    swift_bridgeObjectRelease(v161);
    v163._countAndFlagsBits = 0xD000000000000018;
    v163._object = (void *)0x8000000100085B30;
    String.append(_:)(v163);
    _print_unlocked<A, B>(_:_:)(v157, &v362, v353, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v164._countAndFlagsBits = 0x632068746977205DLL;
    v164._object = (void *)0xEF20747865746E6FLL;
    String.append(_:)(v164);
    v165 = (void *)((uint64_t (*)(void))TimerActivityAttributes.context.getter)();
    v166 = objc_msgSend(v165, "description");
    v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v166);
    v169 = v168;

    v170._countAndFlagsBits = v167;
    v170._object = v169;
    String.append(_:)(v170);

    v171 = v169;
    v172 = v353;
    swift_bridgeObjectRelease(v171);
    v173._countAndFlagsBits = 0x676E69726966202CLL;
    v173._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v173);
    v174 = (void *)((uint64_t (*)(void))TimerActivityAttributes.context.getter)();
    v175 = dispatch thunk of TimerContext.firing.getter();

    if ((v175 & 1) != 0)
      v176 = 1702195828;
    else
      v176 = 0x65736C6166;
    if ((v175 & 1) != 0)
      v177 = 0xE400000000000000;
    else
      v177 = 0xE500000000000000;
    v178 = v177;
    String.append(_:)(*(Swift::String *)&v176);
    swift_bridgeObjectRelease(v177);
    v179 = v363;
    v180 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v179);
    objc_msgSend(v356, "logInfo:", v180);

    v181 = (uint64_t)v340;
    (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v340, v157, v172);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v155)(v181, 0, 1, v172);
    v182 = (uint64_t)&v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
    swift_beginAccess(&v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes], &v362, 33, 0);
    sub_10001E928(v181, v182, &qword_1000AFBB0);
    v183 = swift_endAccess(&v362);
    v184 = (void *)TimerActivityAttributes.context.getter(v183);
    LOBYTE(v182) = dispatch thunk of TimerContext.firing.getter();

    v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = v182 & 1;
    v188 = v355;
    if ((v182 & 1) == 0)
      goto LABEL_43;
    if (v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination])
    {
      if (v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] != 1)
      {
        swift_bridgeObjectRelease(0xE400000000000000);
        goto LABEL_47;
      }
      v185 = 0x41746361706D6F43;
      v186 = 0xEE00746E6569626DLL;
    }
    else
    {
      v185 = 0x69626D416C6C7546;
      v186 = 0xEB00000000746E65;
    }
    v241 = _stringCompareWithSmolCheck(_:_:expecting:)(v185, v186, 1701736270, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v186);
    if ((v241 & 1) == 0)
    {
LABEL_43:
      v362 = 0;
      v363 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v242 = objc_msgSend(v135, "description");
      v243 = static String._unconditionallyBridgeFromObjectiveC(_:)(v242);
      v245 = v244;

      v246._countAndFlagsBits = v243;
      v246._object = v245;
      String.append(_:)(v246);
      swift_bridgeObjectRelease(v245);
      v247._countAndFlagsBits = 0xD000000000000028;
      v189 = &stru_1000AB000;
      v247._object = (void *)0x8000000100085B50;
      String.append(_:)(v247);
      v248 = objc_msgSend(v135, "description");
      v249 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
      v251 = v250;

      v252._countAndFlagsBits = v249;
      v252._object = v251;
      String.append(_:)(v252);
      swift_bridgeObjectRelease(v251);
      v253._countAndFlagsBits = 0x20646920726F6620;
      v253._object = (void *)0xE90000000000005BLL;
      String.append(_:)(v253);
      v254 = v342;
      v256 = (void *)TimerActivityAttributes.context.getter(v255);
      v257 = dispatch thunk of TimerContext.timerId.getter();
      v259 = v258;

      v260._countAndFlagsBits = v257;
      v260._object = v259;
      String.append(_:)(v260);
      swift_bridgeObjectRelease(v259);
      v261._countAndFlagsBits = 93;
      v261._object = (void *)0xE100000000000000;
      String.append(_:)(v261);
      v262 = v363;
      v263 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v262);
      objc_msgSend(v356, "logInfo:", v263);

      if (qword_1000AECC0 != -1)
        swift_once(&qword_1000AECC0, sub_10001EBCC);
      v264 = sub_1000073C0(&qword_1000AFC28, type metadata accessor for SessionSceneDelegate, (uint64_t)&unk_100081BE8);
      v265 = (void *)TimerActivityAttributes.context.getter(v264);
      v266 = dispatch thunk of TimerContext.timerId.getter();
      v268 = v267;

      v360 = (id)v266;
      v361 = v268;
      AnyHashable.init<A>(_:)(&v362, &v360, &type metadata for String, &protocol witness table for String);
      dispatch thunk of DataStore.registerObserver(_:for:)(v135, v264, &v362);
      sub_10001E790((uint64_t)&v362);
      (*(void (**)(char *, uint64_t))(v346 + 8))(v254, v353);
      goto LABEL_48;
    }
LABEL_47:
    (*(void (**)(char *, uint64_t))(v346 + 8))(v342, v172);
    v189 = &stru_1000AB000;
LABEL_48:
    v125 = v349;
    goto LABEL_49;
  }
  ActivityDescriptor.attributesType.getter(v127);
  v136 = type metadata accessor for StopwatchActivityAttributes(0);
  v137 = sub_1000073C0(&qword_1000AFC08, (uint64_t (*)(uint64_t))&type metadata accessor for StopwatchActivityAttributes, (uint64_t)&protocol conformance descriptor for StopwatchActivityAttributes);
  ActivityAttributesType.init<A>(from:)(v136, v136, v137);
  v138 = static ActivityAttributesType.== infix(_:_:)(v120, v122);
  v125(v122, v126);
  v125(v120, v126);
  if ((v138 & 1) == 0)
  {
    v145 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v145, *(unsigned int *)(v145 + 48), *(unsigned __int16 *)(v145 + 52));
    v146 = JSONDecoder.init()();
    v147 = ActivityDescriptor.attributesData.getter();
    v149 = v148;
    v150 = sub_1000073C0(&qword_1000AFC10, (uint64_t (*)(uint64_t))&type metadata accessor for AlarmActivityAttributes, (uint64_t)&protocol conformance descriptor for AlarmActivityAttributes);
    v151 = v341;
    v152 = v344;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v344, v147, v149, v344, v150);
    v349 = v125;
    sub_10001E8B4(v147, v149);
    v190 = swift_release(v146);
    v191 = v345;
    v348 = *(char **)(v345 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t, __n128))v348)(v151, 0, 1, v152, v190);
    v192 = v338;
    (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v338, v151, v152);
    v362 = 0;
    v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v135 = v354;
    v193 = objc_msgSend(v354, "description");
    v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
    v196 = v195;

    v197._countAndFlagsBits = v194;
    v197._object = v196;
    String.append(_:)(v197);
    swift_bridgeObjectRelease(v196);
    v198._countAndFlagsBits = 0xD000000000000018;
    v198._object = (void *)0x8000000100085A80;
    String.append(_:)(v198);
    _print_unlocked<A, B>(_:_:)(v192, &v362, v152, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v199._countAndFlagsBits = 0x632068746977205DLL;
    v199._object = (void *)0xEF20747865746E6FLL;
    String.append(_:)(v199);
    v200 = (void *)AlarmActivityAttributes.context.getter();
    v201 = objc_msgSend(v200, "description");
    v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v201);
    v204 = v203;

    v205._countAndFlagsBits = v202;
    v205._object = v204;
    String.append(_:)(v205);

    swift_bridgeObjectRelease(v204);
    v206 = v363;
    v207 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v206);
    v208 = v356;
    objc_msgSend(v356, "logInfo:", v207);

    v362 = 0;
    v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v209 = objc_msgSend(v135, "description");
    v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
    v212 = v211;

    v213._countAndFlagsBits = v210;
    v213._object = v212;
    String.append(_:)(v213);
    swift_bridgeObjectRelease(v212);
    v214._countAndFlagsBits = 0xD000000000000028;
    v189 = &stru_1000AB000;
    v214._object = (void *)0x8000000100085AA0;
    String.append(_:)(v214);
    v215 = objc_msgSend(v135, "description");
    v216 = static String._unconditionallyBridgeFromObjectiveC(_:)(v215);
    v218 = v217;

    v219._countAndFlagsBits = v216;
    v219._object = v218;
    String.append(_:)(v219);
    swift_bridgeObjectRelease(v218);
    v220._countAndFlagsBits = 0x20646920726F6620;
    v220._object = (void *)0xE90000000000005BLL;
    String.append(_:)(v220);
    v221 = (void *)AlarmActivityAttributes.context.getter();
    v222 = dispatch thunk of AlarmContext.alarmId.getter();
    v224 = v223;

    v225._countAndFlagsBits = v222;
    v225._object = v224;
    String.append(_:)(v225);
    swift_bridgeObjectRelease(v224);
    v226._countAndFlagsBits = 93;
    v226._object = (void *)0xE100000000000000;
    String.append(_:)(v226);
    v227 = v363;
    v228 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v227);
    objc_msgSend(v208, "logInfo:", v228);

    v229 = (void *)AlarmActivityAttributes.context.getter();
    v230 = dispatch thunk of AlarmContext.isSnoozed.getter();

    if ((v230 & 1) != 0)
      v231 = 3;
    else
      v231 = 2;
    v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = v231;
    if (qword_1000AECC8 != -1)
      swift_once(&qword_1000AECC8, sub_10001EE18);
    v232 = sub_1000073C0(&qword_1000AFC28, type metadata accessor for SessionSceneDelegate, (uint64_t)&unk_100081BE8);
    v233 = (void *)AlarmActivityAttributes.context.getter();
    v234 = dispatch thunk of AlarmContext.alarmId.getter();
    v236 = v235;

    v360 = (id)v234;
    v361 = v236;
    AnyHashable.init<A>(_:)(&v362, &v360, &type metadata for String, &protocol witness table for String);
    dispatch thunk of DataStore.registerObserver(_:for:)(v135, v232, &v362);
    sub_10001E790((uint64_t)&v362);
    v237 = v345;
    v238 = (uint64_t)v339;
    v239 = v344;
    (*(void (**)(char *, char *, uint64_t))(v345 + 16))(v339, v192, v344);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v348)(v238, 0, 1, v239);
    v240 = (uint64_t)&v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes];
    swift_beginAccess(&v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes], &v362, 33, 0);
    sub_10001E928(v238, v240, &qword_1000AFBB8);
    swift_endAccess(&v362);
    (*(void (**)(char *, uint64_t))(v237 + 8))(v192, v239);
    v188 = v355;
    goto LABEL_48;
  }
  v139 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v139, *(unsigned int *)(v139 + 48), *(unsigned __int16 *)(v139 + 52));
  v140 = JSONDecoder.init()();
  v141 = ActivityDescriptor.attributesData.getter();
  v143 = v142;
  v144 = sub_1000073C0(&qword_1000AFC30, (uint64_t (*)(uint64_t))&type metadata accessor for StopwatchActivityAttributes, (uint64_t)&protocol conformance descriptor for StopwatchActivityAttributes);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v136, v141, v143, v136, v144);
  sub_10001E8B4(v141, v143);
  swift_release(v140);
  v135 = v354;
  v187 = *(_QWORD *)&v354[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes];
  *(_QWORD *)&v354[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes] = v362;
  swift_release(v187);
  v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = 4;
  v188 = v355;
  v189 = &stru_1000AB000;
LABEL_49:
  v362 = 0;
  v363 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  v269 = v363;
  v270 = objc_msgSend(v135, *(SEL *)&v189[116].align);
  v271 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
  v273 = v272;
  swift_bridgeObjectRelease(v269);

  v362 = (void *)v271;
  v363 = v273;
  v274._countAndFlagsBits = 0xD00000000000001CLL;
  v274._object = (void *)0x80000001000859A0;
  String.append(_:)(v274);
  v275 = v351;
  ActivityDescriptor.attributesType.getter(v276);
  v277 = sub_1000073C0(&qword_1000AFC18, (uint64_t (*)(uint64_t))&type metadata accessor for ActivityAttributesType, (uint64_t)&protocol conformance descriptor for ActivityAttributesType);
  v278 = v352;
  v279._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v352, v277);
  object = v279._object;
  String.append(_:)(v279);
  swift_bridgeObjectRelease(object);
  v125(v275, v278);
  v281._countAndFlagsBits = 93;
  v281._object = (void *)0xE100000000000000;
  String.append(_:)(v281);
  v282 = v363;
  v283 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v282);
  v284 = v356;
  objc_msgSend(v356, "logInfo:", v283);

  v285 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType;
  v286 = v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType];
  v287 = v350;
  if (v286 > 4 || (v288 = 1, ((1 << v286) & 0x19) == 0))
  {
    if (v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination])
    {
      if (v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] != 1)
      {
        v291 = 1;
        v290 = 0xE400000000000000;
        goto LABEL_57;
      }
      v289 = 0x41746361706D6F43;
      v290 = 0xEE00746E6569626DLL;
    }
    else
    {
      v289 = 0x69626D416C6C7546;
      v290 = 0xEB00000000746E65;
    }
    v291 = _stringCompareWithSmolCheck(_:_:expecting:)(v289, v290, 1701736270, 0xE400000000000000, 0);
LABEL_57:
    swift_bridgeObjectRelease(v290);
    v288 = v291 ^ 1;
  }
  if ((objc_msgSend(v287, "SBUI_isHostedBySystemAperture") & 1) != 0)
  {
    v362 = 0;
    v363 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    v292 = objc_msgSend(v135, "description");
    v293 = static String._unconditionallyBridgeFromObjectiveC(_:)(v292);
    v295 = v294;

    v296._countAndFlagsBits = v293;
    v296._object = v295;
    String.append(_:)(v296);
    swift_bridgeObjectRelease(v295);
    v297._object = (void *)0x8000000100085A00;
    v297._countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v297);
    v360 = objc_msgSend(v287, "activationState");
    type metadata accessor for ActivationState(0);
    _print_unlocked<A, B>(_:_:)(&v360, &v362, v298, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v299 = v363;
    v300 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v299);
    objc_msgSend(v284, "logInfo:", v300);

    __asm { BR              X10 }
  }
  if ((v288 & 1) == 0)
    goto LABEL_77;
  v301 = 0xEB00000000746E65;
  v362 = 0;
  v363 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v302 = objc_msgSend(v135, "description");
  v303 = static String._unconditionallyBridgeFromObjectiveC(_:)(v302);
  v305 = v304;

  v306._countAndFlagsBits = v303;
  v306._object = v305;
  String.append(_:)(v306);
  swift_bridgeObjectRelease(v305);
  v307._countAndFlagsBits = 0xD000000000000035;
  v307._object = (void *)0x80000001000859C0;
  String.append(_:)(v307);
  v308 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination;
  if (v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination])
  {
    if (v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] == 1)
    {
      v309 = 0x41746361706D6F43;
      v310 = 0xEE00746E6569626DLL;
    }
    else
    {
      v310 = 0xE400000000000000;
      v309 = 1701736270;
    }
  }
  else
  {
    v309 = 0x69626D416C6C7546;
    v310 = 0xEB00000000746E65;
  }
  v188 = v355;
  v311 = v310;
  String.append(_:)(*(Swift::String *)&v309);
  swift_bridgeObjectRelease(v310);
  v312 = v363;
  v313 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v312);
  objc_msgSend(v284, "logInfo:", v313);

  v314 = objc_msgSend(objc_allocWithZone((Class)SecureWindow), "initWithWindowScene:", v287);
  v315 = *(void **)&v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
  *(_QWORD *)&v135[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window] = v314;

  sub_10001B444(v135[v285]);
  sub_100015494(0, &qword_1000AFC20, UIColor_ptr);
  v316 = sub_1000744A0();
  dispatch thunk of ActivityScene.textColor.setter(v316);
  v317 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v318 = objc_msgSend(v317, "colorWithAlphaComponent:", 0.9);

  dispatch thunk of ActivityScene.backgroundTintColor.setter(v318);
  if (!v135[v308])
  {
    v319 = 0x69626D416C6C7546;
LABEL_70:
    v320 = _stringCompareWithSmolCheck(_:_:expecting:)(v319, v301, 1701736270, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v301);
    if ((v320 & 1) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
  if (v135[v308] == 1)
  {
    v319 = 0x41746361706D6F43;
    v301 = 0xEE00746E6569626DLL;
    goto LABEL_70;
  }
  swift_bridgeObjectRelease(0xE400000000000000);
LABEL_73:
  v321 = objc_allocWithZone((Class)type metadata accessor for ActivitySceneMetrics(0));
  v322 = ActivitySceneMetrics.init(size:cornerRadius:)(0.0, 82.0, 18.0);
  dispatch thunk of ActivityScene.resolvedMetrics.setter(v322);
LABEL_74:
  v323 = v135[v285];
  if (qword_1000AECE8 != -1)
    swift_once(&qword_1000AECE8, sub_1000478C4);
  v324 = qword_1000B6F08;
  v325 = swift_allocObject(&unk_10009F038, 25, 7);
  *(_QWORD *)(v325 + 16) = v135;
  *(_BYTE *)(v325 + 24) = v323;
  v326 = (void (**)())(v324 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
  v327 = *(_QWORD *)(v324 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
  v328 = *(_QWORD *)(v324 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout + 8);
  *v326 = sub_10001E91C;
  v326[1] = (void (*)())v325;
  v329 = v135;
  sub_100010630(v327, v328);
LABEL_77:
  v331 = v357;
  v330 = v358;

  (*(void (**)(char *, uint64_t))(v331 + 8))(v188, v330);
}

uint64_t sub_1000182C4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEB00000000746E65;
  v3 = 0x69626D416C6C7546;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x41746361706D6F43;
    else
      v5 = 1701736270;
    if (v4 == 1)
      v6 = 0xEE00746E6569626DLL;
    else
      v6 = 0xE400000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x69626D416C6C7546;
  v6 = 0xEB00000000746E65;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x41746361706D6F43;
    else
      v3 = 1701736270;
    if (v7 == 1)
      v2 = 0xEE00746E6569626DLL;
    else
      v2 = 0xE400000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_1000183EC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100018458(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000184F0 + 4 * byte_1000819D6[a2]))(0x656C4172656D6954);
}

uint64_t sub_1000184F0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C4172656D6954 && v1 == 0xEA00000000007472)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656C4172656D6954, 0xEA00000000007472, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000007472);
  return v2 & 1;
}

void sub_1000185D4(char a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(87);
  v3 = objc_msgSend(v1, "description", 0, 0xE000000000000000);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0xD00000000000003ALL;
  v8._object = (void *)0x80000001000858C0;
  String.append(_:)(v8);
  __asm { BR              X10 }
}

uint64_t sub_1000186C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned __int8 v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  NSString v20;

  v12._countAndFlagsBits = 0x656C4172656D6954;
  v12._object = (void *)0xEA00000000007472;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(0xEA00000000007472);
  v13._object = (void *)0x8000000100085900;
  v13._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v13);
  v14 = 0x41746361706D6F43;
  v15 = 0xEE00746E6569626DLL;
  if (*(_BYTE *)(v10 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination) != 1)
  {
    v14 = 1701736270;
    v15 = 0xE400000000000000;
  }
  if (*(_BYTE *)(v10 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination))
    v16 = v14;
  else
    v16 = 0x69626D416C6C7546;
  if (*(_BYTE *)(v10 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination))
    v17 = (void *)v15;
  else
    v17 = (void *)0xEB00000000746E65;
  v18 = (void *)objc_opt_self(MTSessionUtilities);
  v19._countAndFlagsBits = v16;
  v19._object = v17;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v17);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  objc_msgSend(v18, "logInfo:", v20);

  return ((uint64_t (*)(void))((char *)&loc_100018840 + *((int *)qword_100018B68 + v11)))();
}

void sub_100018850()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*(_BYTE *)(v0 + v3))
  {
    if (*(_BYTE *)(v0 + v3) != 1)
    {
      swift_bridgeObjectRelease(0xE400000000000000);
      goto LABEL_7;
    }
    v2 = 0x41746361706D6F43;
    v1 = 0xEE00746E6569626DLL;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v1, 1701736270, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  if ((v4 & 1) == 0)
  {
    sub_100019880(*(_BYTE *)(v0 + v3));
    return;
  }
LABEL_7:
  sub_10001923C();
}

char *sub_100018B80()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *result;
  char *v29;
  _QWORD *v30;
  _QWORD v31[2];
  uint64_t v32;
  unint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for StopwatchContext(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v6 = objc_msgSend(v0, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._object = (void *)0x8000000100085880;
  v11._countAndFlagsBits = 0xD00000000000003ELL;
  String.append(_:)(v11);
  v12 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes;
  v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes];
  if (v13)
  {
    v14 = swift_retain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes]);
    dispatch thunk of StopwatchActivityAttributes.context.getter(v14);
    v15 = swift_release(v13);
    v16 = StopwatchContext.id.getter(v15);
    v13 = v17;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v16 = 0;
  }
  v18 = (void *)objc_opt_self(MTSessionUtilities);
  v31[0] = v16;
  v31[1] = v13;
  v19 = sub_10000A58C(&qword_1000AF7A0);
  _print_unlocked<A, B>(_:_:)(v31, &v32, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v13);
  v20 = v33;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v18, "logInfo:", v21);

  v22 = *(_QWORD *)&v1[v12];
  if (v22)
  {
    v23 = swift_retain(*(_QWORD *)&v1[v12]);
    dispatch thunk of StopwatchActivityAttributes.context.getter(v23);
    v24 = swift_release(v22);
    v22 = StopwatchContext.id.getter(v24);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    v26 = 0;
  }
  v27 = (char *)objc_allocWithZone((Class)type metadata accessor for StopwatchLockscreenController());
  *(_QWORD *)&v27[OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView] = 0;
  result = sub_1000117A4(v22, v26);
  v29 = result;
  v30 = *(_QWORD **)&result[OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView];
  if (v30)
  {
    *(_QWORD *)((char *)v30 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v30) + 16) + 8) = &off_10009EF28;
    swift_unknownObjectWeakAssign();
    return v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_100018E04(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  Swift::String v22;
  unint64_t v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  NSString v42;
  id v44;
  char *v45;
  _QWORD v46[2];
  uint64_t v47;
  unint64_t v48;

  v2 = v1;
  v4 = type metadata accessor for StopwatchContext(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(78);
  v8 = objc_msgSend(v1, "description");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0xD000000000000035;
  v13._object = (void *)0x80000001000857E0;
  String.append(_:)(v13);
  v14 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes;
  v15 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes];
  if (v15)
  {
    v16 = swift_retain(*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes]);
    dispatch thunk of StopwatchActivityAttributes.context.getter(v16);
    v17 = swift_release(v15);
    v18 = StopwatchContext.id.getter(v17);
    v15 = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v18 = 0;
  }
  v20 = (void *)objc_opt_self(MTSessionUtilities);
  v46[0] = v18;
  v46[1] = v15;
  v21 = sub_10000A58C(&qword_1000AF7A0);
  _print_unlocked<A, B>(_:_:)(v46, &v47, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v15);
  v22._object = (void *)0x8000000100085820;
  v22._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v22);
  LOBYTE(v46[0]) = a1;
  _print_unlocked<A, B>(_:_:)(v46, &v47, &type metadata for AmbientDestination, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v23 = v48;
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v20, "logInfo:", v24);

  if (a1)
  {
    if (a1 == 1)
    {
      v25 = *(_QWORD *)&v2[v14];
      if (v25)
      {
        v26 = swift_retain(*(_QWORD *)&v2[v14]);
        dispatch thunk of StopwatchActivityAttributes.context.getter(v26);
        v27 = swift_release(v25);
        v25 = StopwatchContext.id.getter(v27);
        v29 = v28;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      }
      else
      {
        v29 = 0;
      }
      v44 = objc_allocWithZone((Class)type metadata accessor for StopwatchStandbyCompressedController());
      return sub_100045744(v25, v29);
    }
    else
    {
      v47 = 0;
      v48 = 0xE000000000000000;
      _StringGuts.grow(_:)(63);
      v35 = objc_msgSend(v2, "description");
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

      v39._countAndFlagsBits = v36;
      v39._object = v38;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v38);
      v40._countAndFlagsBits = 0xD00000000000003DLL;
      v40._object = (void *)0x8000000100085840;
      String.append(_:)(v40);
      v41 = v48;
      v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v41);
      objc_msgSend(v20, "logInfo:", v42);

      return 0;
    }
  }
  else
  {
    v30 = *(_QWORD *)&v2[v14];
    if (v30)
    {
      v31 = swift_retain(*(_QWORD *)&v2[v14]);
      dispatch thunk of StopwatchActivityAttributes.context.getter(v31);
      v32 = swift_release(v30);
      v30 = StopwatchContext.id.getter(v32);
      v34 = v33;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      v34 = 0;
    }
    v45 = (char *)objc_allocWithZone((Class)type metadata accessor for StopwatchStandbyController());
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView] = 0;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView] = 0;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_glyphSize] = 0x404B000000000000;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadButtonPadding] = 0x404A000000000000;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadCountdownPadding] = 0x4038000000000000;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_lapLabelOffset] = 0x4024000000000000;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_buttonBottomPadding] = 0x404A000000000000;
    *(_QWORD *)&v45[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_rightEdgePadding] = 0x4048000000000000;
    return sub_1000117A4(v30, v34);
  }
}

void sub_10001923C()
{
  void *v0;
  void *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  NSString v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  id v55;
  void *v56;
  id v57;
  _QWORD v58[2];
  __int128 v59;
  ValueMetadata *v60;
  _UNKNOWN **v61;
  __int128 v62;
  uint64_t v63;
  _UNKNOWN **v64;

  v1 = v0;
  v2 = (int *)type metadata accessor for SessionsTimerPlatter(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v58 - v6;
  v8 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v8);
  v10 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v58 - v16;
  sub_10001B054((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100011484((uint64_t)v10, &qword_1000B13F0);
  }
  else
  {
    sub_10001E728((uint64_t)v10, (uint64_t)v17);
    v18 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v19 = objc_msgSend(v18, "_backlightLuminance");

    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v58[1] = v1;
    v20 = objc_msgSend(v1, "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v23);
    v25._object = (void *)0x80000001000857A0;
    v25._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v25);
    if (v19 == (id)1)
      v26 = 1702195828;
    else
      v26 = 0x65736C6166;
    if (v19 == (id)1)
      v27 = (void *)0xE400000000000000;
    else
      v27 = (void *)0xE500000000000000;
    v28 = (void *)objc_opt_self(MTSessionUtilities);
    v29._countAndFlagsBits = v26;
    v29._object = v27;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v27);
    v30 = *((_QWORD *)&v62 + 1);
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    objc_msgSend(v28, "logInfo:", v31);

    sub_10000E800((uint64_t)v17, (uint64_t)v15, type metadata accessor for TimerSessionEntry);
    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v32 = (void *)qword_1000B6F08;
    v63 = type metadata accessor for ClockAngelConnectionManager();
    v64 = &off_1000A0AF8;
    *(_QWORD *)&v62 = v32;
    v33 = (void *)objc_opt_self(ClockAngelUtilities);
    v34 = v32;
    v35 = Color.init(uiColor:)(objc_msgSend(v33, "mtOrange"));
    if (v19 == (id)1)
    {
      v36 = Color.opacity(_:)(0.5);
      v37 = objc_msgSend(v33, "mtOrange", swift_release(v35).n128_f64[0]);
      v38 = Color.init(uiColor:)(v37);
      v39 = Color.opacity(_:)(0.14);
      swift_release(v38);
      v41 = static Color.white.getter(v40);
      v42 = Color.opacity(_:)(0.5);
      swift_release(v41);
      v44 = static Color.white.getter(v43);
      v45 = Color.opacity(_:)(0.1);
      swift_release(v44);
      v60 = &type metadata for LowLuminanceSessionUiConfig;
      v61 = &off_1000A14B0;
      v46 = (_QWORD *)swift_allocObject(&unk_10009EFC0, 48, 7);
      v46[2] = v36;
      v46[3] = v39;
      v46[4] = v42;
    }
    else
    {
      v47 = Color.init(uiColor:)(objc_msgSend(v33, "mtOrange"));
      v48 = Color.opacity(_:)(0.28);
      swift_release(v47);
      v50 = static Color.white.getter(v49);
      v51 = static Color.white.getter(v50);
      v45 = Color.opacity(_:)(0.2);
      swift_release(v51);
      v60 = &type metadata for StandardSessionUiConfig;
      v61 = &off_1000A1520;
      v46 = (_QWORD *)swift_allocObject(&unk_10009EF98, 48, 7);
      v46[2] = v35;
      v46[3] = v48;
      v46[4] = v50;
    }
    v46[5] = v45;
    *(_QWORD *)&v59 = v46;
    *(_QWORD *)&v7[v2[7]] = 0x4028000000000000;
    sub_10001E728((uint64_t)v15, (uint64_t)v7);
    sub_10000EC88(&v62, (uint64_t)&v7[v2[5]]);
    sub_10000EC88(&v59, (uint64_t)&v7[v2[6]]);
    v52 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000AFBA8));
    v53 = &v52[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v52) + 16)];
    *((_QWORD *)v53 + 1) = 0;
    swift_unknownObjectWeakInit(v53, 0);
    sub_10000E800((uint64_t)v7, (uint64_t)v5, type metadata accessor for SessionsTimerPlatter);
    v54 = (_QWORD *)UIHostingController.init(rootView:)(v5);
    sub_10000E844((uint64_t)v7, type metadata accessor for SessionsTimerPlatter);
    *(_QWORD *)((char *)v54 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v54) + 16) + 8) = &off_10009EF28;
    swift_unknownObjectWeakAssign();
    v55 = objc_msgSend(v54, "view");
    if (v55)
    {
      v56 = v55;
      v57 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
      objc_msgSend(v56, "setBackgroundColor:", v57);

      sub_10000E844((uint64_t)v17, type metadata accessor for TimerSessionEntry);
    }
    else
    {

      __break(1u);
    }
  }
}

uint64_t sub_100019820(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_10001DD98(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v2 + qword_1000B6DC0) - 8) + 8))(a1);
  return v5;
}

char *sub_100019880(char a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  NSString v10;

  if (!a1)
    return (char *)sub_1000199A8();
  if (a1 == 1)
    return sub_100019FAC();
  v3 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(53);
  v4 = objc_msgSend(v1, "description", 0);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._object = (void *)0x8000000100085760;
  v9._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v9);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000);
  objc_msgSend(v3, "logInfo:", v10);

  return 0;
}

uint64_t sub_1000199A8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  char *(**v33)();
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  void *object;
  uint64_t v48;
  NSString v49;
  uint64_t v50;
  double v51;
  void *v52;
  uint64_t v53;
  char *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t KeyPath;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  _UNKNOWN **v73;

  v1 = v0;
  v2 = sub_10000A58C((uint64_t *)&unk_1000AFBC0);
  __chkstk_darwin(v2);
  v68 = (uint64_t *)((char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for LinearTimerTimelineCountdown(0);
  v5 = __chkstk_darwin(v4);
  v70 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v69 = (uint64_t)&v68 - v7;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for TimerSessionEntry(0);
  v16 = *((_QWORD *)v15 - 1);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v68 - v20;
  sub_10001B054((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15) != 1)
  {
    sub_10001E728((uint64_t)v14, (uint64_t)v21);
    v38 = (void *)objc_opt_self(MTSessionUtilities);
    *(_QWORD *)&v71 = 0;
    *((_QWORD *)&v71 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v39 = objc_msgSend(v0, "description");
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v42 = v41;

    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v42);
    v44._countAndFlagsBits = 0xD000000000000049;
    v44._object = (void *)0x8000000100085710;
    String.append(_:)(v44);
    v45 = sub_1000073C0(&qword_1000AFBD8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v45);
    object = v46._object;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(object);
    v48 = *((_QWORD *)&v71 + 1);
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    objc_msgSend(v38, "logInfo:", v49);

    static Date.now.getter(v50);
    v51 = Date.timeIntervalSince(_:)(v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_10000E800((uint64_t)v21, (uint64_t)v19, type metadata accessor for TimerSessionEntry);
    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v52 = (void *)qword_1000B6F08;
    v72 = type metadata accessor for ClockAngelConnectionManager();
    v73 = &off_1000A0AF8;
    *(_QWORD *)&v71 = v52;
    v54 = &v21[v15[9]];
    if (v21[v15[7]])
    {
      v55 = 0.0;
      if ((v54[8] & 1) != 0)
      {
LABEL_14:
        KeyPath = swift_getKeyPath(&unk_100081C20, v53);
        v60 = (uint64_t)v68;
        *v68 = KeyPath;
        v61 = sub_10000A58C(&qword_1000AF270);
        swift_storeEnumTagMultiPayload(v60, v61, 0);
        v62 = v52;
        v63 = v69;
        sub_10006196C((uint64_t)v19, &v71, v60, 0, 0, 0, 0, 0, v69, v55, 0, 0, 0, 0, 0);
        v64 = (char *)objc_allocWithZone((Class)sub_10000A58C((uint64_t *)&unk_1000AFBE0));
        v65 = &v64[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v64) + 16)];
        *((_QWORD *)v65 + 1) = 0;
        swift_unknownObjectWeakInit(v65, 0);
        v66 = v70;
        sub_10000E800(v63, v70, type metadata accessor for LinearTimerTimelineCountdown);
        v37 = UIHostingController.init(rootView:)(v66);
        sub_10000E844(v63, type metadata accessor for LinearTimerTimelineCountdown);
        sub_10000E844((uint64_t)v21, type metadata accessor for TimerSessionEntry);
        return v37;
      }
      v56 = *(double *)&v21[v15[11]] / *(double *)v54;
      v57 = 1.0;
    }
    else
    {
      v58 = *(double *)v54;
      v57 = 1.0;
      if (v54[8])
        v58 = 1.0;
      v56 = v51 / v58;
    }
    v55 = v57 - v56;
    goto LABEL_14;
  }
  sub_100011484((uint64_t)v14, &qword_1000B13F0);
  v22 = (void *)objc_opt_self(MTSessionUtilities);
  *(_QWORD *)&v71 = 0;
  *((_QWORD *)&v71 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v23 = objc_msgSend(v0, "description");
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v26);
  v28._object = (void *)0x80000001000856D0;
  v28._countAndFlagsBits = 0xD00000000000003ELL;
  String.append(_:)(v28);
  v29 = *((_QWORD *)&v71 + 1);
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  objc_msgSend(v22, "logInfo:", v30);

  if (qword_1000AECE8 != -1)
    swift_once(&qword_1000AECE8, sub_1000478C4);
  v31 = qword_1000B6F08;
  v32 = swift_allocObject(&unk_10009F010, 24, 7);
  *(_QWORD *)(v32 + 16) = v1;
  v33 = (char *(**)())(v31 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
  v34 = *(_QWORD *)(v31 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
  v35 = (uint64_t)v33[1];
  *v33 = sub_10001E874;
  v33[1] = (char *(*)())v32;
  v36 = v1;
  sub_100010630(v34, v35);
  return 0;
}

char *sub_100019FAC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  char *(**v20)();
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  void *object;
  unint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimerSessionEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001B054((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100011484((uint64_t)v4, &qword_1000B13F0);
    v9 = (void *)objc_opt_self(MTSessionUtilities);
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v10 = objc_msgSend(v0, "description");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v13);
    v15._object = (void *)0x8000000100085640;
    v15._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v15);
    v16 = v42;
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    objc_msgSend(v9, "logInfo:", v17);

    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v18 = qword_1000B6F08;
    v19 = swift_allocObject(&unk_10009EFE8, 24, 7);
    *(_QWORD *)(v19 + 16) = v1;
    v20 = (char *(**)())(v18 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
    v21 = *(_QWORD *)(v18 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout);
    v22 = (uint64_t)v20[1];
    *v20 = sub_10001E854;
    v20[1] = (char *(*)())v19;
    v23 = v1;
    sub_100010630(v21, v22);
    return 0;
  }
  else
  {
    sub_10001E728((uint64_t)v4, (uint64_t)v8);
    v25 = (void *)objc_opt_self(MTSessionUtilities);
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(78);
    v26 = objc_msgSend(v0, "description");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v30._countAndFlagsBits = v27;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v29);
    v31._countAndFlagsBits = 0xD00000000000004ALL;
    v31._object = (void *)0x8000000100085680;
    String.append(_:)(v31);
    v32 = type metadata accessor for Date(0);
    v33 = sub_1000073C0(&qword_1000AFBD8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
    object = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(object);
    v36 = v42;
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
    objc_msgSend(v25, "logInfo:", v37);

    v38 = *v8;
    v39 = v8[1];
    objc_allocWithZone((Class)type metadata accessor for TimerCompressedController());
    swift_bridgeObjectRetain(v39);
    v24 = sub_10002BAD0(v38, v39);
    sub_10000E844((uint64_t)v8, type metadata accessor for TimerSessionEntry);
  }
  return v24;
}

char *sub_10001A324(char *result, uint64_t (*a2)(void))
{
  uint64_t v2;
  void *v3;
  char *v5;
  id v6;
  void *v7;

  v2 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window;
  v3 = *(void **)&result[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
  if (v3)
  {
    v5 = result;
    v6 = v3;
    v7 = (void *)a2();
    objc_msgSend(v6, "setRootViewController:", v7);

    result = *(char **)&v5[v2];
    if (result)
      return (char *)objc_msgSend(result, "makeKeyAndVisible");
  }
  return result;
}

void sub_10001A3A8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  NSString v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  id v39;
  _QWORD *v40;
  id v41;
  void *v42;
  id v43;
  __int128 v44;
  uint64_t v45;
  _UNKNOWN **v46;
  __int128 v47;
  ValueMetadata *v48;
  _UNKNOWN **v49;
  void *v50;
  unint64_t v51[5];
  uint64_t v52;

  v1 = v0;
  v2 = sub_10001AE14();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
    v5 = objc_msgSend(v4, "_backlightLuminance");

    v50 = 0;
    v51[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v6 = objc_msgSend(v1, "description");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(v9);
    v11._object = (void *)0x8000000100085600;
    v11._countAndFlagsBits = 0xD00000000000003FLL;
    String.append(_:)(v11);
    if (v5 == (id)1)
      v12 = 1702195828;
    else
      v12 = 0x65736C6166;
    if (v5 == (id)1)
      v13 = (void *)0xE400000000000000;
    else
      v13 = (void *)0xE500000000000000;
    v14 = (void *)objc_opt_self(MTSessionUtilities);
    v15._countAndFlagsBits = v12;
    v15._object = v13;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v13);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51[0]);
    objc_msgSend(v14, "logInfo:", v16);

    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v17 = (void *)qword_1000B6F08;
    v45 = type metadata accessor for ClockAngelConnectionManager();
    v46 = &off_1000A0AD8;
    *(_QWORD *)&v44 = v17;
    v18 = (void *)objc_opt_self(ClockAngelUtilities);
    v19 = v17;
    v20 = Color.init(uiColor:)(objc_msgSend(v18, "mtOrange"));
    if (v5 == (id)1)
    {
      v21 = Color.opacity(_:)(0.5);
      v22 = objc_msgSend(v18, "mtOrange", swift_release(v20).n128_f64[0]);
      v23 = Color.init(uiColor:)(v22);
      v24 = Color.opacity(_:)(0.14);
      swift_release(v23);
      v26 = static Color.white.getter(v25);
      v27 = Color.opacity(_:)(0.5);
      swift_release(v26);
      v29 = static Color.white.getter(v28);
      v30 = Color.opacity(_:)(0.1);
      swift_release(v29);
      v48 = &type metadata for LowLuminanceSessionUiConfig;
      v49 = &off_1000A14B0;
      v31 = (_QWORD *)swift_allocObject(&unk_10009EFC0, 48, 7);
      v31[2] = v21;
      v31[3] = v24;
      v31[4] = v27;
    }
    else
    {
      v32 = Color.init(uiColor:)(objc_msgSend(v18, "mtOrange"));
      v33 = Color.opacity(_:)(0.28);
      swift_release(v32);
      v35 = static Color.white.getter(v34);
      v36 = static Color.white.getter(v35);
      v30 = Color.opacity(_:)(0.2);
      swift_release(v36);
      v48 = &type metadata for StandardSessionUiConfig;
      v49 = &off_1000A1520;
      v31 = (_QWORD *)swift_allocObject(&unk_10009EF98, 48, 7);
      v31[2] = v20;
      v31[3] = v33;
      v31[4] = v35;
    }
    v31[5] = v30;
    *(_QWORD *)&v47 = v31;
    v50 = v3;
    sub_10000EC88(&v44, (uint64_t)v51);
    sub_10000EC88(&v47, (uint64_t)&v52);
    v37 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000AFBA0));
    v38 = &v37[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v37) + 16)];
    *((_QWORD *)v38 + 1) = 0;
    swift_unknownObjectWeakInit(v38, 0);
    sub_10001E7E4((uint64_t)&v50, (uint64_t)&v44);
    v39 = v3;
    v40 = (_QWORD *)UIHostingController.init(rootView:)(&v44);
    sub_10001E820((uint64_t)&v50);
    *(_QWORD *)((char *)v40 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v40) + 16) + 8) = &off_10009EF28;
    swift_unknownObjectWeakAssign();
    v41 = objc_msgSend(v40, "view");
    if (v41)
    {
      v42 = v41;
      v43 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
      objc_msgSend(v42, "setBackgroundColor:", v43);

    }
    else
    {

      __break(1u);
    }
  }
}

uint64_t sub_10001A834(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  NSString v26;
  id v27;
  void *v28;
  unsigned int v29;
  void *v30;
  NSString v31;
  NSString v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  NSString v63;
  __int128 v65;
  ValueMetadata *v66;
  _UNKNOWN **v67;
  __int128 v68;
  uint64_t v69;
  _UNKNOWN **v70;

  v2 = v1;
  v4 = sub_10000A58C((uint64_t *)&unk_1000AFBC0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for AlarmAlertFullScreen(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (_QWORD *)((char *)&v65 - v11);
  if (a1)
  {
    if (a1 == 1)
      v13 = 0x41746361706D6F43;
    else
      v13 = 1701736270;
    if (a1 == 1)
      v14 = 0xEE00746E6569626DLL;
    else
      v14 = 0xE400000000000000;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0x69626D416C6C7546, 0xEB00000000746E65, 0);
    swift_bridgeObjectRelease(v14);
    if ((v15 & 1) == 0)
      goto LABEL_21;
  }
  else
  {
    swift_bridgeObjectRelease(0xEB00000000746E65);
  }
  v16 = sub_10001AE14();
  if (!v16)
  {
LABEL_21:
    v55 = (void *)objc_opt_self(MTSessionUtilities);
    *(_QWORD *)&v68 = 0;
    *((_QWORD *)&v68 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v56 = *((_QWORD *)&v68 + 1);
    v57 = objc_msgSend(v2, "description");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;
    swift_bridgeObjectRelease(v56);

    *(_QWORD *)&v68 = v58;
    *((_QWORD *)&v68 + 1) = v60;
    v61._countAndFlagsBits = 0xD00000000000001ALL;
    v61._object = (void *)0x8000000100085580;
    String.append(_:)(v61);
    v62 = *((_QWORD *)&v68 + 1);
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v62);
    objc_msgSend(v55, "logInfo:", v63);

    return 0;
  }
  v17 = (void *)v16;
  v18 = (void *)objc_opt_self(MTSessionUtilities);
  *(_QWORD *)&v68 = 0;
  *((_QWORD *)&v68 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v19 = *((_QWORD *)&v68 + 1);
  v20 = objc_msgSend(v2, "description");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;
  swift_bridgeObjectRelease(v19);

  *(_QWORD *)&v68 = v21;
  *((_QWORD *)&v68 + 1) = v23;
  v24._countAndFlagsBits = 0xD00000000000001CLL;
  v24._object = (void *)0x80000001000855A0;
  String.append(_:)(v24);
  v25 = *((_QWORD *)&v68 + 1);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v18, "logInfo:", v26);

  if (objc_msgSend(v17, "isSleepAlarm"))
  {
    if (qword_1000AECD0 != -1)
      swift_once(&qword_1000AECD0, sub_1000272D4);
    v27 = sub_1000278F4();
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, "isAuthorizedForWidgetUpdates");

      if (v29)
      {
        v30 = (void *)objc_opt_self(CLInUseAssertion);
        v31 = String._bridgeToObjectiveC()();
        v32 = String._bridgeToObjectiveC()();
        v33 = objc_msgSend(v30, "newAssertionForBundleIdentifier:withReason:", v31, v32);

        v34 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion];
        *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion] = v33;

      }
    }
  }
  v35 = qword_1000AECE8;
  v36 = v17;
  if (v35 != -1)
    swift_once(&qword_1000AECE8, sub_1000478C4);
  v37 = (void *)qword_1000B6F08;
  v69 = type metadata accessor for ClockAngelConnectionManager();
  v70 = &off_1000A0AD8;
  *(_QWORD *)&v68 = v37;
  v38 = (void *)objc_opt_self(ClockAngelUtilities);
  v39 = v37;
  v40 = Color.init(uiColor:)(objc_msgSend(v38, "mtOrange"));
  v41 = Color.init(uiColor:)(objc_msgSend(v38, "mtOrange"));
  v42 = Color.opacity(_:)(0.28);
  swift_release(v41);
  v44 = static Color.white.getter(v43);
  v45 = static Color.white.getter(v44);
  v46 = Color.opacity(_:)(0.2);
  swift_release(v45);
  v66 = &type metadata for StandardSessionUiConfig;
  v67 = &off_1000A1520;
  v47 = (_QWORD *)swift_allocObject(&unk_10009EF98, 48, 7);
  *(_QWORD *)&v65 = v47;
  v47[2] = v40;
  v47[3] = v42;
  v47[4] = v44;
  v47[5] = v46;
  *v6 = swift_getKeyPath(&unk_100081C20, v48);
  v49 = sub_10000A58C(&qword_1000AF270);
  swift_storeEnumTagMultiPayload(v6, v49, 0);
  v50 = type metadata accessor for WeatherDataProvider(0);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  v51 = sub_10003C7E0();
  sub_10000E384((uint64_t)v36, &v68, &v65, (uint64_t)v6, 0, 0, 0, 0, v12, 0, 0, 0, 0, 0, 0, v51);
  v52 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000AFBD0));
  v53 = &v52[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v52) + 16)];
  *((_QWORD *)v53 + 1) = 0;
  swift_unknownObjectWeakInit(v53, 0);
  sub_10000E800((uint64_t)v12, (uint64_t)v10, type metadata accessor for AlarmAlertFullScreen);
  v54 = UIHostingController.init(rootView:)(v10);
  sub_10000E844((uint64_t)v12, type metadata accessor for AlarmAlertFullScreen);

  return v54;
}

uint64_t sub_10001AE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD v20[2];
  _QWORD v21[5];
  uint64_t v22;
  _BYTE v23[24];

  v1 = sub_10000A58C(&qword_1000AFBB8);
  __chkstk_darwin(v1);
  v3 = (char *)&v20[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AlarmActivityAttributes(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes;
  swift_beginAccess(v8, v23, 0, 0);
  sub_100011440(v8, (uint64_t)v3, &qword_1000AFBB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100011484((uint64_t)v3, &qword_1000AFBB8);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (qword_1000AECC8 != -1)
    swift_once(&qword_1000AECC8, sub_10001EE18);
  v9 = (void *)AlarmActivityAttributes.context.getter();
  v10 = dispatch thunk of AlarmContext.alarmId.getter();
  v12 = v11;

  v20[0] = v10;
  v20[1] = v12;
  AnyHashable.init<A>(_:)(v21, v20, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(v21);
  sub_10001E790((uint64_t)v21);
  v13 = v22;
  if (!v22)
  {
    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v14 = (void *)AlarmActivityAttributes.context.getter();
    v15 = dispatch thunk of AlarmContext.alarmId.getter();
    v17 = v16;

    sub_1000466B4(v15, v17, 1);
    swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v13;
}

uint64_t sub_10001B054@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  _QWORD v29[5];
  _BYTE v30[24];

  v3 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v3);
  v5 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000AFBB0);
  __chkstk_darwin(v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimerActivityAttributes(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v1 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes;
  swift_beginAccess(v13, v30, 0, 0);
  sub_100011440(v13, (uint64_t)v8, &qword_1000AFBB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100011484((uint64_t)v8, &qword_1000AFBB0);
LABEL_9:
    v26 = type metadata accessor for TimerSessionEntry(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a1, 1, 1, v26);
  }
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  if (qword_1000AECC0 != -1)
    v14 = swift_once(&qword_1000AECC0, sub_10001EBCC);
  v15 = (void *)TimerActivityAttributes.context.getter(v14);
  v16 = dispatch thunk of TimerContext.timerId.getter();
  v18 = v17;

  v28[0] = v16;
  v28[1] = v18;
  AnyHashable.init<A>(_:)(v29, v28, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(v29);
  sub_10001E790((uint64_t)v29);
  v19 = type metadata accessor for TimerSessionEntry(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v5, 1, v19) == 1)
  {
    v21 = sub_100011484((uint64_t)v5, &qword_1000B13F0);
    if (qword_1000AECE8 != -1)
      v21 = swift_once(&qword_1000AECE8, sub_1000478C4);
    v22 = (void *)TimerActivityAttributes.context.getter(v21);
    v23 = dispatch thunk of TimerContext.timerId.getter();
    v25 = v24;

    sub_100046BB4(v23, v25, 1);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_10001E728((uint64_t)v5, a1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a1, 0, 1, v19);
}

void sub_10001B348(void *a1, char a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  NSString v10;

  v4 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(41);
  v5 = objc_msgSend(a1, "description", 0);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;
  swift_bridgeObjectRelease(0xE000000000000000);

  v9._object = (void *)0x8000000100085BD0;
  v9._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v9);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v4, "logInfo:", v10, v6);

  sub_10001B444(a2);
}

void sub_10001B444(char a1)
{
  char *v1;
  char *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  NSString v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  NSString v35;

  v2 = v1;
  sub_1000185D4(a1);
  if (v3)
  {
    v4 = v3;
    v5 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(52);
    v6 = objc_msgSend(v1, "description");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(v9);
    v11._object = (void *)0x8000000100085500;
    v11._countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v11);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v5, "logInfo:", v12);

    v13 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window;
    v14 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
    if (v14)
      goto LABEL_3;
    v24 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene];
    if (v24)
    {
      v25 = objc_allocWithZone((Class)SecureWindow);
      v26 = v24;
      v27 = objc_msgSend(v25, "initWithWindowScene:", v26);
      v28 = *(void **)&v2[v13];
      *(_QWORD *)&v2[v13] = v27;

      v14 = *(void **)&v2[v13];
      if (!v14)
      {
LABEL_5:

        return;
      }
LABEL_3:
      objc_msgSend(v14, "setRootViewController:", v4);
      v15 = *(void **)&v2[v13];
      if (v15)
      {
        v16 = v15;
        objc_msgSend(v16, "makeKeyAndVisible");

      }
      goto LABEL_5;
    }
    _StringGuts.grow(_:)(54);
    v29 = objc_msgSend(v2, "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v32);
    v34._countAndFlagsBits = 0xD000000000000034;
    v34._object = (void *)0x8000000100085540;
    String.append(_:)(v34);
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v5, "logError:", v35);

  }
  else
  {
    v17 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(55);
    v18 = objc_msgSend(v1, "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v23._countAndFlagsBits = 0xD000000000000035;
    v23._object = (void *)0x80000001000854C0;
    String.append(_:)(v23);
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v17, "logInfo:", v35);
  }

}

void sub_10001B7B0(void *a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  NSString v23;

  v3 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(24);
  v4 = objc_msgSend(v1, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  v7._object = (void *)0x8000000100085480;
  v7._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v3, "logInfo:", v8);

  v9 = type metadata accessor for ActivityScene(0);
  v10 = swift_dynamicCastClass(a1, v9);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = a1;
    v13 = objc_msgSend(v11, "systemApertureElementContext");
    objc_msgSend(v13, "setElementNeedsUpdate");

    swift_unknownObjectRelease(v13);
  }
  else
  {
    _StringGuts.grow(_:)(27);
    v14 = objc_msgSend(v1, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v16 = v15;
    swift_bridgeObjectRelease(0xE000000000000000);

    v17._countAndFlagsBits = 0xD000000000000017;
    v17._object = (void *)0x80000001000854A0;
    String.append(_:)(v17);
    v18 = objc_msgSend(a1, "description");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    objc_msgSend(v3, "logError:", v23);

  }
}

id sub_10001BB84()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  objc_super v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  v3 = objc_msgSend(v0, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v11 = v4;
  v12 = v6;
  v7._countAndFlagsBits = 0x74696E696564203ALL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8);

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for SessionSceneDelegate(0);
  return objc_msgSendSuper2(&v10, "dealloc");
}

uint64_t sub_10001BE20()
{
  return type metadata accessor for SessionSceneDelegate(0);
}

uint64_t type metadata accessor for SessionSceneDelegate(uint64_t a1)
{
  uint64_t result;

  result = qword_1000AFAC0;
  if (!qword_1000AFAC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SessionSceneDelegate);
  return result;
}

id sub_10001BE64()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  objc_class *v16;
  objc_super v18;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)&v0[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_observerId];
  v6 = v0;
  v7 = UUID.init()();
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  *v5 = v8;
  v5[1] = v10;
  v11 = &v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
  v12 = type metadata accessor for TimerActivityAttributes(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = &v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmAttributes];
  v14 = type metadata accessor for AlarmActivityAttributes(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchAttributes] = 0;
  v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] = 2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_currentSessionScene] = 0;
  v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType] = 5;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerApertureElementProvider] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_alarmApertureElementProvider] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_stopwatchApertureElementProvider] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion] = 0;
  v15 = &v6[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_dataStoerObserverId];
  *(_QWORD *)v15 = 0xD000000000000014;
  *((_QWORD *)v15 + 1) = 0x80000001000819F0;

  v16 = (objc_class *)type metadata accessor for SessionSceneDelegate(0);
  v18.receiver = v6;
  v18.super_class = v16;
  return objc_msgSendSuper2(&v18, "init");
}

void sub_10001C050(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  v6[0] = &unk_100081A28;
  sub_10001C12C(319, &qword_1000AFAD0, (uint64_t (*)(uint64_t))&type metadata accessor for TimerActivityAttributes);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001C12C(319, qword_1000AFAD8, (uint64_t (*)(uint64_t))&type metadata accessor for AlarmActivityAttributes);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_100081A40;
      v6[4] = &unk_100081A58;
      v6[5] = &unk_100081A40;
      v6[6] = &unk_100081A70;
      v6[7] = &unk_100081A40;
      v6[8] = &unk_100081A40;
      v6[9] = &unk_100081A40;
      v6[10] = &unk_100081A40;
      v6[11] = &unk_100081A40;
      v6[12] = &unk_100081A28;
      swift_updateClassMetadata2(a1, 256, 13, v6, a1 + 80);
    }
  }
}

void sub_10001C12C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10001C178(uint64_t a1)
{
  void *v2;

  v2 = &unk_100081AA8;
  return swift_initClassMetadata2(a1, 0, 1, &v2, qword_1000B6DC0 + a1 + 16);
}

uint64_t sub_10001C1C4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  NSString v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **aBlock;
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  void (*v35)();
  uint64_t v36;
  uint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(MTSessionUtilities);
  aBlock = 0;
  v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v9 = objc_msgSend(v0, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._object = (void *)0x8000000100085330;
  v14._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v14);
  v37 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
  v15 = sub_10000A58C((uint64_t *)&unk_1000AFB70);
  _print_unlocked<A, B>(_:_:)(&v37, &aBlock, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v16 = v32;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v8, "logInfo:", v17);

  sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter();
  v19 = swift_allocObject(&unk_10009EF48, 24, 7);
  *(_QWORD *)(v19 + 16) = v1;
  v35 = sub_10001DBEC;
  v36 = v19;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_10001C5FC;
  v34 = &unk_10009EF60;
  v20 = _Block_copy(&aBlock);
  v21 = v36;
  v22 = v1;
  swift_release(v21);
  static DispatchQoS.unspecified.getter(v23);
  aBlock = (void **)&_swiftEmptyArrayStorage;
  v24 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v26 = sub_10001DC0C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v25, v26, v2, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v29);
}

void sub_10001C4B8(char *a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  NSString v11;
  char v12;
  uint64_t v13;
  unint64_t v14;

  if (*(_QWORD *)&a1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window])
  {
    v2 = (void *)objc_opt_self(MTSessionUtilities);
    v13 = 0;
    v14 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v3 = objc_msgSend(a1, "description");
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(v6);
    v8._object = (void *)0x8000000100085360;
    v8._countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v8);
    v9 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType;
    v12 = a1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_sessionType];
    _print_unlocked<A, B>(_:_:)(&v12, &v13, &type metadata for SessionType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v10 = v14;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    objc_msgSend(v2, "logInfo:", v11);

    sub_10001B444(a1[v9]);
  }
}

uint64_t sub_10001C5FC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10001C62C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_observerId);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10001C668()
{
  return 1;
}

uint64_t sub_10001C670()
{
  _QWORD *v0;

  return swift_unknownObjectWeakLoadStrong((char *)v0 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v0) + 16));
}

void sub_10001C6BC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  unint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t WitnessTable;
  Swift::String v24;
  unint64_t v25;
  NSString v26;
  uint64_t Strong;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;

  v2 = v1;
  v4 = swift_isaMask & *v2;
  v5 = objc_msgSend(v2, "traitCollection");
  v6 = objc_msgSend(v5, "_backlightLuminance");

  if (v6 == (id)1 && (!a1 || objc_msgSend(a1, "_backlightLuminance") != (id)1))
  {
    v20 = (void *)objc_opt_self(MTSessionUtilities);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    v28 = v2;
    v22 = type metadata accessor for SecureHostingController(0, *(_QWORD *)(v4 + qword_1000B6DC0), *(_QWORD *)(v4 + qword_1000B6DC0 + 8), v21);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v22);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v28, v22, WitnessTable);
    v24._object = (void *)0x80000001000853C0;
    v24._countAndFlagsBits = 0xD000000000000028;
    String.append(_:)(v24);
    v25 = v30;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    objc_msgSend(v20, "logInfo:", v26);

    Strong = swift_unknownObjectWeakLoadStrong((char *)v2 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v2) + 16));
    if (!Strong)
      return;
    v18 = Strong;
    v19 = 1;
    goto LABEL_13;
  }
  v7 = objc_msgSend(v2, "traitCollection");
  v8 = objc_msgSend(v7, "_backlightLuminance");

  if (v8 != (id)1 && a1 != 0 && objc_msgSend(a1, "_backlightLuminance") == (id)1)
  {
    v10 = (void *)objc_opt_self(MTSessionUtilities);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    v28 = v2;
    v12 = type metadata accessor for SecureHostingController(0, *(_QWORD *)(v4 + qword_1000B6DC0), *(_QWORD *)(v4 + qword_1000B6DC0 + 8), v11);
    v13 = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v12);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v28, v12, v13);
    v14._countAndFlagsBits = 0xD00000000000002ALL;
    v14._object = (void *)0x8000000100085390;
    String.append(_:)(v14);
    v15 = v30;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    objc_msgSend(v10, "logInfo:", v16);

    v17 = swift_unknownObjectWeakLoadStrong((char *)v2 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v2) + 16));
    if (v17)
    {
      v18 = v17;
      v19 = 0;
LABEL_13:
      sub_10001CDF8(v19);
      swift_unknownObjectRelease(v18);
    }
  }
}

void sub_10001C994(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = a1;
  sub_10001C6BC(a3);

}

void *sub_10001C9EC(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_10001CA2C(a1, a2);
}

void *sub_10001CA2C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  uint64_t v15;

  v5 = (uint64_t *)((swift_isaMask & *v2) + qword_1000B6DC0);
  v6 = *v5;
  v7 = *(_QWORD *)(*v5 - 8);
  __chkstk_darwin();
  v9 = (char *)&v15 - v8;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v10 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v11 = (void *)UIHostingController.init(coder:rootView:)(a1, v9);
  v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13 = v11;
  v12(a2, v6);
  if (v11)

  return v11;
}

id sub_10001CB08(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  objc_class *v6;
  id v7;
  objc_super v9;

  v3 = swift_isaMask & *v1;
  v4 = (char *)v1 + *(_QWORD *)(qword_1000B6DC0 + v3 + 16);
  *((_QWORD *)v4 + 1) = 0;
  swift_unknownObjectWeakInit(v4, 0);
  v6 = (objc_class *)type metadata accessor for SecureHostingController(0, *(_QWORD *)(v3 + qword_1000B6DC0), *(_QWORD *)(v3 + qword_1000B6DC0 + 8), v5);
  v9.receiver = v1;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

id sub_10001CBA0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10001CB08(a3);
}

uint64_t sub_10001CBC4()
{
  _QWORD *v0;

  return sub_10001E76C((uint64_t)v0 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v0) + 16));
}

id sub_10001CBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for SecureHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1000B6DC0), *(_QWORD *)((swift_isaMask & *v4) + qword_1000B6DC0 + 8), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t sub_10001CC48(_QWORD *a1)
{
  return sub_10001E76C((uint64_t)a1 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *a1) + 16));
}

uint64_t type metadata accessor for SecureHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100015D00(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureHostingController);
}

_BYTE *initializeBufferWithCopyOfBuffer for SpinnyResetView.Mode(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SessionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10001CD68 + 4 * byte_1000819E1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10001CD9C + 4 * byte_1000819DC[v4]))();
}

uint64_t sub_10001CD9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CDA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001CDACLL);
  return result;
}

uint64_t sub_10001CDB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001CDC0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10001CDC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CDCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001CDD8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001CDE0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SessionType()
{
  return &type metadata for SessionType;
}

void sub_10001CDF8(char a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  unint64_t v31;
  NSString v32;
  void *v33;
  char *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  unint64_t v46;
  NSString v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  id v88;
  _QWORD *v89;
  unint64_t v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  Swift::String v95;
  uint64_t v96;
  void *v97;
  void *v98;
  Swift::String v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  void *v109;
  id v110;
  _QWORD v111[2];
  uint64_t v112;
  id v113;
  char *v114;
  _QWORD *v115;
  unint64_t v116;
  ValueMetadata *v117;
  _UNKNOWN **v118;
  _UNKNOWN **v119;
  uint64_t v120;
  _QWORD v121[3];
  ValueMetadata *v122;
  _UNKNOWN **v123;

  v3 = type metadata accessor for SessionsTimerPlatter(0);
  __chkstk_darwin(v3);
  v5 = (char *)v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v6);
  v8 = (char *)v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimerSessionEntry(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window;
  v14 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_window];
  if (!v14)
    goto LABEL_32;
  v15 = objc_msgSend(v14, "rootViewController");
  if (v15)
  {
    v114 = v5;
    v16 = v15;
    v17 = sub_10000A58C(&qword_1000AFBA8);
    v18 = swift_dynamicCastClass(v16, v17);
    if (v18)
    {
      v112 = v3;
      v113 = v16;
      v111[1] = v18;
      v115 = 0;
      v116 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v19 = objc_msgSend(v1, "description");
      v20 = a1;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

      v24._countAndFlagsBits = v21;
      v24._object = v23;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(v23);
      v25._object = (void *)0x8000000100085450;
      v25._countAndFlagsBits = 0xD00000000000002FLL;
      String.append(_:)(v25);
      v26 = v20;
      if ((v20 & 1) != 0)
        v27 = 1702195828;
      else
        v27 = 0x65736C6166;
      if ((v20 & 1) != 0)
        v28 = (void *)0xE400000000000000;
      else
        v28 = (void *)0xE500000000000000;
      v29 = (void *)objc_opt_self(MTSessionUtilities);
      v30._countAndFlagsBits = v27;
      v30._object = v28;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v28);
      v31 = v116;
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v31);
      objc_msgSend(v29, "logInfo:", v32);

      sub_10001B054((uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {

        sub_100011484((uint64_t)v8, &qword_1000B13F0);
        return;
      }
      sub_10001E728((uint64_t)v8, (uint64_t)v12);
      v63 = (void *)objc_opt_self(ClockAngelUtilities);
      v64 = Color.init(uiColor:)(objc_msgSend(v63, "mtOrange"));
      if ((v26 & 1) != 0)
      {
        v65 = Color.opacity(_:)(0.5);
        v66 = objc_msgSend(v63, "mtOrange", swift_release(v64).n128_f64[0]);
        v67 = Color.init(uiColor:)(v66);
        v68 = Color.opacity(_:)(0.14);
        swift_release(v67);
        v70 = static Color.white.getter(v69);
        v71 = Color.opacity(_:)(0.5);
        swift_release(v70);
        v73 = static Color.white.getter(v72);
        v74 = Color.opacity(_:)(0.1);
        swift_release(v73);
        v117 = &type metadata for LowLuminanceSessionUiConfig;
        v118 = &off_1000A14B0;
        v75 = (_QWORD *)swift_allocObject(&unk_10009EFC0, 48, 7);
        v75[2] = v65;
        v75[3] = v68;
        v75[4] = v71;
      }
      else
      {
        v76 = Color.init(uiColor:)(objc_msgSend(v63, "mtOrange"));
        v77 = Color.opacity(_:)(0.28);
        swift_release(v76);
        v79 = static Color.white.getter(v78);
        v80 = static Color.white.getter(v79);
        v74 = Color.opacity(_:)(0.2);
        swift_release(v80);
        v117 = &type metadata for StandardSessionUiConfig;
        v118 = &off_1000A1520;
        v75 = (_QWORD *)swift_allocObject(&unk_10009EF98, 48, 7);
        v75[2] = v64;
        v75[3] = v77;
        v75[4] = v79;
      }
      v75[5] = v74;
      v115 = v75;
      v81 = v114;
      sub_10000E800((uint64_t)v12, (uint64_t)v114, type metadata accessor for TimerSessionEntry);
      v82 = qword_1000AECE8;
      v83 = v113;
      v84 = v112;
      if (v82 != -1)
        swift_once(&qword_1000AECE8, sub_1000478C4);
      v85 = (void *)qword_1000B6F08;
      v86 = v84;
      v87 = &v81[*(int *)(v84 + 20)];
      *((_QWORD *)v87 + 3) = type metadata accessor for ClockAngelConnectionManager();
      *((_QWORD *)v87 + 4) = &off_1000A0AF8;
      *(_QWORD *)v87 = v85;
      sub_1000113C0((uint64_t)&v115, (uint64_t)&v81[*(int *)(v86 + 24)]);
      *(_QWORD *)&v81[*(int *)(v86 + 28)] = 0x4028000000000000;
      v88 = v85;
      dispatch thunk of UIHostingController.rootView.setter(v81);

      sub_10000E844((uint64_t)v12, type metadata accessor for TimerSessionEntry);
      v89 = &v115;
      goto LABEL_44;
    }

  }
  v33 = *(void **)&v1[v13];
  if (!v33)
    goto LABEL_32;
  v34 = (char *)objc_msgSend(v33, "rootViewController");
  if (!v34)
    goto LABEL_32;
  v114 = v34;
  v35 = sub_10000A58C(&qword_1000AFBA0);
  if (!swift_dynamicCastClass(v114, v35))
  {

LABEL_32:
    v115 = 0;
    v116 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v90 = v116;
    v91 = objc_msgSend(v1, "description");
    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
    v94 = v93;
    swift_bridgeObjectRelease(v90);

    v115 = (_QWORD *)v92;
    v116 = v94;
    v95._countAndFlagsBits = 0xD00000000000002DLL;
    v95._object = (void *)0x80000001000853F0;
    String.append(_:)(v95);
    if ((a1 & 1) != 0)
      v96 = 1702195828;
    else
      v96 = 0x65736C6166;
    if ((a1 & 1) != 0)
      v97 = (void *)0xE400000000000000;
    else
      v97 = (void *)0xE500000000000000;
    v98 = (void *)objc_opt_self(MTSessionUtilities);
    v99._countAndFlagsBits = v96;
    v99._object = v97;
    String.append(_:)(v99);
    swift_bridgeObjectRelease(v97);
    v100 = v116;
    v114 = (char *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v100);
    objc_msgSend(v98, "logInfo:", v114);
    goto LABEL_39;
  }
  v115 = 0;
  v116 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v36 = objc_msgSend(v1, "description");
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;

  v40._countAndFlagsBits = v37;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v39);
  v41._object = (void *)0x8000000100085420;
  v41._countAndFlagsBits = 0xD00000000000002FLL;
  String.append(_:)(v41);
  if ((a1 & 1) != 0)
    v42 = 1702195828;
  else
    v42 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v43 = (void *)0xE400000000000000;
  else
    v43 = (void *)0xE500000000000000;
  v44 = (void *)objc_opt_self(MTSessionUtilities);
  v45._countAndFlagsBits = v42;
  v45._object = v43;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v43);
  v46 = v116;
  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  objc_msgSend(v44, "logInfo:", v47);

  v48 = sub_10001AE14();
  if (!v48)
  {
LABEL_39:

    return;
  }
  v49 = (void *)v48;
  v50 = (void *)objc_opt_self(ClockAngelUtilities);
  v51 = Color.init(uiColor:)(objc_msgSend(v50, "mtOrange"));
  if ((a1 & 1) != 0)
  {
    v52 = Color.opacity(_:)(0.5);
    v53 = objc_msgSend(v50, "mtOrange", swift_release(v51).n128_f64[0]);
    v54 = Color.init(uiColor:)(v53);
    v55 = Color.opacity(_:)(0.14);
    swift_release(v54);
    v57 = static Color.white.getter(v56);
    v58 = Color.opacity(_:)(0.5);
    swift_release(v57);
    v60 = static Color.white.getter(v59);
    v61 = Color.opacity(_:)(0.1);
    swift_release(v60);
    v122 = &type metadata for LowLuminanceSessionUiConfig;
    v123 = &off_1000A14B0;
    v62 = (_QWORD *)swift_allocObject(&unk_10009EFC0, 48, 7);
    v62[2] = v52;
    v62[3] = v55;
    v62[4] = v58;
  }
  else
  {
    v101 = Color.init(uiColor:)(objc_msgSend(v50, "mtOrange"));
    v102 = Color.opacity(_:)(0.28);
    swift_release(v101);
    v104 = static Color.white.getter(v103);
    v105 = static Color.white.getter(v104);
    v61 = Color.opacity(_:)(0.2);
    swift_release(v105);
    v122 = &type metadata for StandardSessionUiConfig;
    v123 = &off_1000A1520;
    v62 = (_QWORD *)swift_allocObject(&unk_10009EF98, 48, 7);
    v62[2] = v51;
    v62[3] = v102;
    v62[4] = v104;
  }
  v62[5] = v61;
  v121[0] = v62;
  v106 = qword_1000AECE8;
  v107 = v114;
  v108 = v49;
  if (v106 != -1)
    swift_once(&qword_1000AECE8, sub_1000478C4);
  v109 = (void *)qword_1000B6F08;
  v118 = (_UNKNOWN **)type metadata accessor for ClockAngelConnectionManager();
  v119 = &off_1000A0AD8;
  v116 = (unint64_t)v109;
  sub_1000113C0((uint64_t)v121, (uint64_t)&v120);
  v115 = v108;
  v110 = v109;
  dispatch thunk of UIHostingController.rootView.setter(&v115);

  v89 = v121;
LABEL_44:
  sub_100007CF0(v89);
}

void sub_10001D750(char *a1)
{
  sub_1000183EC(*a1);
}

void sub_10001D75C()
{
  char *v0;

  sub_10001D764(*v0);
}

void sub_10001D764(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10001D7C0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C4172656D6954, 0xEA00000000007472);
  swift_bridgeObjectRelease(0xEA00000000007472);
  return Hasher._finalize()();
}

void sub_10001D868()
{
  __asm { BR              X10 }
}

uint64_t sub_10001D8B0(uint64_t a1)
{
  String.hash(into:)(a1, 0x656C4172656D6954, 0xEA00000000007472);
  return swift_bridgeObjectRelease(0xEA00000000007472);
}

void sub_10001D944(uint64_t a1)
{
  char *v1;

  sub_10001D94C(a1, *v1);
}

void sub_10001D94C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10001D9A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656C4172656D6954, 0xEA00000000007472);
  swift_bridgeObjectRelease(0xEA00000000007472);
  return Hasher._finalize()();
}

unint64_t sub_10001DA4C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10001E69C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001DA78()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10001DAB4 + 4 * byte_1000819F8[*v0]))();
}

void sub_10001DAB4(_QWORD *a1@<X8>)
{
  *a1 = 0x656C4172656D6954;
  a1[1] = 0xEA00000000007472;
}

void sub_10001DAD4(_QWORD *a1@<X8>)
{
  *a1 = 0x656C416D72616C41;
  a1[1] = 0xEA00000000007472;
}

void sub_10001DAF4(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6E536D72616C41;
  a1[1] = 0xEB00000000657A6FLL;
}

void sub_10001DB18(_QWORD *a1@<X8>)
{
  *a1 = 0x63746177706F7453;
  a1[1] = 0xE900000000000068;
}

void sub_10001DB38(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E55;
  a1[1] = 0xE700000000000000;
}

unint64_t sub_10001DB58()
{
  unint64_t result;

  result = qword_1000AFB60;
  if (!qword_1000AFB60)
  {
    result = swift_getWitnessTable(&unk_100081B88, &type metadata for SessionType);
    atomic_store(result, (unint64_t *)&qword_1000AFB60);
  }
  return result;
}

uint64_t sub_10001DB9C()
{
  return sub_1000073C0(&qword_1000AFB68, type metadata accessor for SessionSceneDelegate, (uint64_t)&unk_100081BC0);
}

uint64_t sub_10001DBC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10001DBEC()
{
  uint64_t v0;

  sub_10001C4B8(*(char **)(v0 + 16));
}

uint64_t sub_10001DBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001DC04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10001DC0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AFB90;
  if (!qword_1000AFB90)
  {
    v1 = sub_10000E880((uint64_t *)&unk_1000AFFF0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000AFB90);
  }
  return result;
}

void sub_10001DC58(void *a1, void *a2)
{
  void *v2;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  NSString v16;

  v5 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(43);
  v6 = objc_msgSend(v2, "description", 0);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;
  swift_bridgeObjectRelease(0xE000000000000000);

  v10._object = (void *)0x8000000100085CD0;
  v10._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v10);
  v11 = objc_msgSend(a2, "role", v7);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v5, "logInfo:", v16);

  sub_100015DAC(a1, (void (*)(char *, uint64_t))a2);
}

uint64_t sub_10001DD98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = (uint64_t *)((swift_isaMask & *v1) + qword_1000B6DC0);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 - 8);
  __chkstk_darwin();
  v7 = (char *)&v10 - v6;
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v8 + 16) + 8) = 0;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  return UIHostingController.init(rootView:)(v7);
}

void sub_10001DE44()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  unint64_t v25;
  NSString v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  unint64_t v51;
  NSString v52;
  id v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000AFBB0);
  __chkstk_darwin(v2);
  v4 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimerSessionEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v66 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = 0;
  v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  v11 = v68;
  v12 = objc_msgSend(v1, "description");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;
  swift_bridgeObjectRelease(v11);

  v67 = v13;
  v68 = v15;
  v16._countAndFlagsBits = 0xD000000000000029;
  v16._object = (void *)0x8000000100085C60;
  String.append(_:)(v16);
  v17 = OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination;
  if (v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination])
  {
    if (v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_ambientDestination] != 1)
    {
      swift_bridgeObjectRelease(0xE400000000000000);
      goto LABEL_8;
    }
    v18 = 0x41746361706D6F43;
    v19 = 0xEE00746E6569626DLL;
  }
  else
  {
    v18 = 0x69626D416C6C7546;
    v19 = 0xEB00000000746E65;
  }
  v20 = (void *)0xE400000000000000;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 1701736270, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v19);
  if ((v21 & 1) == 0)
  {
    v22 = 1702195828;
    goto LABEL_9;
  }
LABEL_8:
  v20 = (void *)0xE500000000000000;
  v22 = 0x65736C6166;
LABEL_9:
  v23 = (void *)objc_opt_self(MTSessionUtilities);
  v24._countAndFlagsBits = v22;
  v24._object = v20;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v20);
  v25 = v68;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v23, "logInfo:", v26);

  if (v1[v17])
  {
    if (v1[v17] != 1)
    {
      swift_bridgeObjectRelease(0xE400000000000000);
      return;
    }
    v27 = 0x41746361706D6F43;
    v28 = 0xEE00746E6569626DLL;
  }
  else
  {
    v27 = 0x69626D416C6C7546;
    v28 = 0xEB00000000746E65;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, 1701736270, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v28);
  if ((v29 & 1) == 0)
  {
    v30 = (char *)sub_10001AE14();
    if (v30)
    {
      v66 = v30;
      if (objc_msgSend(v30, "isSleepAlarm"))
      {
        v31 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_inUseAssertion];
        if (v31)
          objc_msgSend(v31, "invalidate");
      }
      if (!objc_msgSend(v66, "isFiring"))
        goto LABEL_32;
      if (v1[v17])
      {
        if (v1[v17] == 1)
        {
          swift_bridgeObjectRelease(0xEE00746E6569626DLL);
          goto LABEL_32;
        }
        v37 = 0xE400000000000000;
        v36 = 1701736270;
      }
      else
      {
        v36 = 0x69626D416C6C7546;
        v37 = 0xEB00000000746E65;
      }
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, 0x41746361706D6F43, 0xEE00746E6569626DLL, 0);
      swift_bridgeObjectRelease(v37);
      if ((v38 & 1) == 0)
      {
        if (qword_1000AECE8 != -1)
          swift_once(&qword_1000AECE8, sub_1000478C4);
        v53 = objc_msgSend(v66, "alarmIDString");
        v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v56 = v55;

        sub_100047094(v54, v56, 0, 0);
        swift_bridgeObjectRelease(v56);
        goto LABEL_33;
      }
LABEL_32:
      v67 = 0;
      v68 = 0xE000000000000000;
      _StringGuts.grow(_:)(57);
      v39 = objc_msgSend(v1, "description");
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      v43._countAndFlagsBits = v40;
      v43._object = v42;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(v42);
      v44._object = (void *)0x8000000100085C90;
      v44._countAndFlagsBits = 0xD00000000000001ALL;
      String.append(_:)(v44);
      v45 = objc_msgSend(v66, "alarmIDString");
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      v49._countAndFlagsBits = v46;
      v49._object = v48;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v48);
      v50._countAndFlagsBits = 0xD00000000000001BLL;
      v50._object = (void *)0x8000000100085CB0;
      String.append(_:)(v50);
      v51 = v68;
      v52 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v51);
      objc_msgSend(v23, "logInfo:", v52);

LABEL_33:
      return;
    }
    sub_10001B054((uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_100011484((uint64_t)v7, &qword_1000B13F0);
      return;
    }
    v32 = (uint64_t *)v66;
    sub_10001E728((uint64_t)v7, (uint64_t)v66);
    if (*((_BYTE *)v32 + *(int *)(v8 + 28)) != 2)
    {
LABEL_48:
      sub_10000E844((uint64_t)v32, type metadata accessor for TimerSessionEntry);
      return;
    }
    v33 = (uint64_t)&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes];
    swift_beginAccess(&v1[OBJC_IVAR____TtC10ClockAngel20SessionSceneDelegate_timerAttributes], &v67, 0, 0);
    sub_100011440(v33, (uint64_t)v4, &qword_1000AFBB0);
    v34 = type metadata accessor for TimerActivityAttributes(0);
    v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v4, 1, v34);
    if ((_DWORD)v35)
    {
      sub_100011484((uint64_t)v4, &qword_1000AFBB0);
      goto LABEL_48;
    }
    v57 = (void *)TimerActivityAttributes.context.getter(v35);
    v58 = sub_100011484((uint64_t)v4, &qword_1000AFBB0);
    v59 = dispatch thunk of TimerContext.firing.getter(v58);

    if ((v59 & 1) == 0)
      goto LABEL_48;
    if (v1[v17])
    {
      if (v1[v17] == 1)
      {
        v60 = 0xEE00746E6569626DLL;
        goto LABEL_47;
      }
      v62 = 0xE400000000000000;
      v61 = 1701736270;
    }
    else
    {
      v61 = 0x69626D416C6C7546;
      v62 = 0xEB00000000746E65;
    }
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v62, 0x41746361706D6F43, 0xEE00746E6569626DLL, 0);
    swift_bridgeObjectRelease(v62);
    if ((v63 & 1) != 0)
      goto LABEL_48;
    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v64 = *v32;
    v65 = (void *)v32[1];
    swift_bridgeObjectRetain(v65);
    sub_100047094(v64, v65, 0, 0);
    v60 = (unint64_t)v65;
LABEL_47:
    swift_bridgeObjectRelease(v60);
    goto LABEL_48;
  }
}

void sub_10001E5B4(Swift::Int a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  NSString v12;

  v7 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(a1);
  v8 = objc_msgSend(v3, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v10 = v9;
  swift_bridgeObjectRelease(0xE000000000000000);

  v11._countAndFlagsBits = a2;
  v11._object = a3;
  String.append(_:)(v11);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v7, "logInfo:", v12);

}

unint64_t sub_10001E69C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009DFE0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_10001E6EC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001E728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E76C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_10001E790(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10001E7C4()
{
  return EnvironmentValues.fontResolutionContext.getter();
}

uint64_t sub_10001E7E4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AlarmSnoozeCountdownControlView(a2, a1, &type metadata for AlarmSnoozeCountdownView);
  return a2;
}

uint64_t sub_10001E820(uint64_t a1)
{
  destroy for AlarmSnoozeCountdownControlView();
  return a1;
}

char *sub_10001E854()
{
  uint64_t v0;

  return sub_10001A324(*(char **)(v0 + 16), sub_100019FAC);
}

char *sub_10001E874()
{
  uint64_t v0;

  return sub_10001A324(*(char **)(v0 + 16), sub_1000199A8);
}

uint64_t sub_10001E894()
{
  return SceneSettingScopes.ActivitySettings.activityDescriptor.getter();
}

uint64_t sub_10001E8B4(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001E8F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_10001E91C()
{
  uint64_t v0;

  sub_10001B348(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10001E928(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000A58C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

BOOL sub_10001E974(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10001E988()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001E9CC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10001E9F4(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10001EA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, double a10@<D0>, uint64_t a11, char a12, uint64_t a13, char a14)
{
  unint64_t object;
  uint64_t v18;
  uint64_t countAndFlagsBits;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  int *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t result;
  _QWORD *v30;
  Swift::String v34;

  object = a4;
  *a9 = a1;
  a9[1] = a2;
  v18 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v18 = a3 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    countAndFlagsBits = a3;
  }
  else
  {
    swift_bridgeObjectRelease(a4);
    v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v34._object = (void *)0x8000000100085D60;
    v21._countAndFlagsBits = 0x72656D6954;
    v21._object = (void *)0xE500000000000000;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    v34._countAndFlagsBits = 0xD000000000000013;
    v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v34);
    countAndFlagsBits = v23._countAndFlagsBits;
    object = (unint64_t)v23._object;

  }
  v24 = (int *)type metadata accessor for TimerSessionEntry(0);
  v25 = (char *)a9 + v24[9];
  v26 = (char *)a9 + v24[10];
  a9[2] = countAndFlagsBits;
  a9[3] = object;
  v27 = (char *)a9 + v24[6];
  v28 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v27, a5, v28);
  *((_BYTE *)a9 + v24[7]) = a6;
  v30 = (_QWORD *)((char *)a9 + v24[8]);
  *v30 = a7;
  v30[1] = a8;
  *(_QWORD *)v25 = a11;
  v25[8] = a12 & 1;
  *(_QWORD *)v26 = a13;
  v26[8] = a14 & 1;
  *(double *)((char *)a9 + v24[11]) = a10;
  return result;
}

uint64_t sub_10001EBCC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for TimerDataStore(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = DataStore.init(identifier:)(0x74614472656D6954, 0xEE0065726F745361);
  qword_1000B6DD0 = result;
  return result;
}

void sub_10001EC2C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  unint64_t v15;
  NSString v16;
  _QWORD v18[2];
  uint64_t v19;
  unint64_t v20;

  v4 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimerSessionEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = a1;
  v18[1] = a2;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(&v19, v18, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(&v19);
  sub_10001E790((uint64_t)&v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001F7A8((uint64_t)v6);
    v11 = (void *)objc_opt_self(MTSessionUtilities);
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v12._countAndFlagsBits = 0xD00000000000001DLL;
    v12._object = (void *)0x8000000100085D80;
    String.append(_:)(v12);
    v13._countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
    v14._object = (void *)0x8000000100085DA0;
    v14._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v14);
    v15 = v20;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    objc_msgSend(v11, "logInfo:", v16);

  }
  else
  {
    sub_10001E728((uint64_t)v6, (uint64_t)v10);
    v10[*(int *)(v7 + 28)] = 2;
    dispatch thunk of DataStore.updateEntry(_:)(v10);
    sub_10001F7E8((uint64_t)v10);
  }
}

uint64_t sub_10001EE0C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001EE18()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for AlarmDataStore(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = DataStore.init(identifier:)(0x7461446D72616C41, 0xEE0065726F745361);
  qword_1000B6DD8 = result;
  return result;
}

uint64_t sub_10001EE74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return DataStore.init(identifier:)(a1, a2);
}

uint64_t sub_10001EEBC()
{
  uint64_t v0;

  v0 = DataStore.deinit();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t MTAlarm.id.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "alarmIDString");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t sub_10001EF2C()
{
  return sub_1000073C0(&qword_1000AFCA0, (uint64_t (*)(uint64_t))sub_10001EF58, (uint64_t)&protocol conformance descriptor for MTAlarm);
}

unint64_t sub_10001EF58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AFCA8;
  if (!qword_1000AFCA8)
  {
    v1 = objc_opt_self(MTAlarm);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000AFCA8);
  }
  return result;
}

void *sub_10001EF94()
{
  return &protocol witness table for String;
}

void sub_10001EFA0(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, "alarmIDString");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t type metadata accessor for TimerDataStore(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000AFCB0, (uint64_t)&nominal type descriptor for TimerDataStore);
}

uint64_t sub_10001F008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001F03C(a1, a2, a3, qword_1000B6DE0);
}

uint64_t sub_10001F014()
{
  return type metadata accessor for TimerDataStore(0);
}

uint64_t type metadata accessor for AlarmDataStore(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000AFD00, (uint64_t)&nominal type descriptor for AlarmDataStore);
}

uint64_t sub_10001F030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001F03C(a1, a2, a3, qword_1000B6DF0);
}

uint64_t sub_10001F03C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE v5[8];

  return swift_initClassMetadata2(a1, 0, 0, v5, a1 + *a4);
}

uint64_t sub_10001F074()
{
  return type metadata accessor for AlarmDataStore(0);
}

_QWORD *sub_10001F07C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[9];
    v19 = a3[10];
    v20 = (char *)v4 + v18;
    v21 = (char *)a2 + v18;
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v20[8] = v21[8];
    v22 = (char *)v4 + v19;
    v23 = (char *)a2 + v19;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    *(_QWORD *)((char *)v4 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain(v17);
  }
  return v4;
}

uint64_t sub_10001F1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

_QWORD *sub_10001F208(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[9];
  v18 = a3[10];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = (char *)a1 + v18;
  v22 = (char *)a2 + v18;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain(v16);
  return a1;
}

_QWORD *sub_10001F300(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v14 = a3[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *(_QWORD *)v20 = v22;
  v23 = a3[10];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)v24 = v26;
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

_OWORD *sub_10001F420(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  v12 = a3[9];
  v13 = a3[10];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

_QWORD *sub_10001F4E0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[9];
  v21 = a3[10];
  v22 = (char *)a1 + v20;
  v23 = (char *)a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = (char *)a1 + v21;
  v25 = (char *)a2 + v21;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10001F5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001F5D4);
}

uint64_t sub_10001F5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10001F650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001F65C);
}

uint64_t sub_10001F65C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TimerSessionEntry(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000AFDA8, (uint64_t)&nominal type descriptor for TimerSessionEntry);
}

uint64_t sub_10001F6E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100081D78;
  v4[1] = &unk_100081D78;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100081D90;
    v4[4] = &unk_100081D78;
    v4[5] = &unk_100081DA8;
    v4[6] = &unk_100081DA8;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10001F77C()
{
  return sub_1000073C0(&qword_1000AFDF8, type metadata accessor for TimerSessionEntry, (uint64_t)&unk_100081DC0);
}

uint64_t sub_10001F7A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000A58C(&qword_1000B13F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001F7E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10001F824(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10001F8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10001F908(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10001F978(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10001F9F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10001FA50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10001FABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001FAC8);
}

uint64_t sub_10001FAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10001FB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001FB50);
}

uint64_t sub_10001FB50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AlarmSessionEntry(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000AFE58, (uint64_t)&nominal type descriptor for AlarmSessionEntry);
}

uint64_t sub_10001FBD8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100081D78;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AmbientDestination(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TimerSessionEntry.TimerState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10001FD28 + 4 * byte_100081C85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001FD5C + 4 * byte_100081C80[v4]))();
}

uint64_t sub_10001FD5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001FD64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001FD6CLL);
  return result;
}

uint64_t sub_10001FD78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001FD80);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001FD84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001FD8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimerSessionEntry.TimerState()
{
  return &type metadata for TimerSessionEntry.TimerState;
}

unint64_t sub_10001FDAC()
{
  unint64_t result;

  result = qword_1000AFE90;
  if (!qword_1000AFE90)
  {
    result = swift_getWitnessTable(&unk_100081E80, &type metadata for TimerSessionEntry.TimerState);
    atomic_store(result, (unint64_t *)&qword_1000AFE90);
  }
  return result;
}

uint64_t sub_10001FDF0()
{
  return sub_1000073C0(&qword_1000AFE98, type metadata accessor for AlarmSessionEntry, (uint64_t)&unk_100081EA8);
}

void sub_1000202BC()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  NSString v10;
  uint64_t v11;
  objc_super v12;

  v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for AlarmApertureElementController(0);
  objc_msgSendSuper2(&v12, "viewDidLoad");
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
  if (v2)
  {
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
    swift_bridgeObjectRetain(v2);
    sub_100021554(v3, v2);
    swift_bridgeObjectRelease(v2);
  }
  v4 = (void *)objc_opt_self(MTSessionUtilities);
  v5 = objc_msgSend(v1, "description");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v11 = v6;
  v9._countAndFlagsBits = 0x6469447765697620;
  v9._object = (void *)0xEC00000064616F4CLL;
  String.append(_:)(v9);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v4, "logInfo:", v10, v11);

  sub_100021864();
}

char *sub_100020414(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *ObjCClassFromMetadata;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_class *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _BYTE v41[12];
  int v42;
  objc_super v43;

  v42 = a3;
  v6 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v6);
  v8 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId];
  v14 = v3;
  v15 = UUID.init()();
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  *v13 = v16;
  v13[1] = v18;
  v19 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 9;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_contentRole] = 2;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 3;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_maximumLayoutMode] = 4;
  v20 = objc_msgSend((id)objc_opt_self(NSURL), "mtURLForSection:", 1);
  if (v20)
  {
    v21 = v20;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
  }
  else
  {
    v23 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
  }
  sub_1000267A8((uint64_t)v8, (uint64_t)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_launchURL]);
  v24 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_associatedAppBundleIdentifier];
  *(_QWORD *)v24 = 0xD000000000000015;
  *((_QWORD *)v24 + 1) = 0x8000000100086910;
  v25 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_timerObserverIdentifier];
  *(_QWORD *)v25 = 0xD00000000000001ELL;
  *((_QWORD *)v25 + 1) = 0x8000000100081F20;
  v26 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 0;
  v27 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView;
  v28 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v28);
  v30 = objc_allocWithZone(ObjCClassFromMetadata);
  v31 = v26;
  *(_QWORD *)&v14[v27] = objc_msgSend(v30, "init");
  v32 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView;
  *(_QWORD *)&v14[v32] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v33 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView;
  *(_QWORD *)&v14[v33] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v34 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_keyColor;
  *(_QWORD *)&v14[v34] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_horizontalPadding] = 0x4030000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelLeadingPadding] = 0x3FF8000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_verticalPadding] = 0x4031000000000000;
  v35 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_buttonSize;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  *(_QWORD *)&v14[v35] = qword_1000B7030;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_labelBottomPadding] = 0x402A000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expandedControlsHeight] = 0x4048000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmSize] = 0x4047800000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmLeadingPadding] = 0x4031800000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmBottomPadding] = 0x4033800000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding] = 0x4033000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = 0;

  v36 = (objc_class *)type metadata accessor for AlarmApertureElementController(0);
  v43.receiver = v14;
  v43.super_class = v36;
  v37 = (char *)objc_msgSendSuper2(&v43, "init");
  v38 = &v37[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  v39 = *(_QWORD *)&v37[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
  *(_QWORD *)v38 = a1;
  *((_QWORD *)v38 + 1) = a2;
  swift_bridgeObjectRelease(v39);
  if ((v42 & 1) != 0)
    *(_QWORD *)&v37[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 2;
  return v37;
}

id sub_1000208BC(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *ObjCClassFromMetadata;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  id v34;
  objc_super v36;

  v3 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId];
  v11 = v1;
  v12 = UUID.init()();
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *v10 = v13;
  v10[1] = v15;
  v16 = &v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 9;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_contentRole] = 2;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 3;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_maximumLayoutMode] = 4;
  v17 = objc_msgSend((id)objc_opt_self(NSURL), "mtURLForSection:", 1);
  if (v17)
  {
    v18 = v17;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 0, 1, v19);
  }
  else
  {
    v20 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
  }
  sub_1000267A8((uint64_t)v5, (uint64_t)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_launchURL]);
  v21 = &v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_associatedAppBundleIdentifier];
  *(_QWORD *)v21 = 0xD000000000000015;
  *((_QWORD *)v21 + 1) = 0x8000000100086910;
  v22 = &v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_timerObserverIdentifier];
  *(_QWORD *)v22 = 0xD00000000000001ELL;
  *((_QWORD *)v22 + 1) = 0x8000000100081F20;
  v23 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 0;
  v24 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView;
  v25 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v25);
  v27 = objc_allocWithZone(ObjCClassFromMetadata);
  v28 = v23;
  *(_QWORD *)&v11[v24] = objc_msgSend(v27, "init");
  v29 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView;
  *(_QWORD *)&v11[v29] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v30 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView;
  *(_QWORD *)&v11[v30] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v31 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_keyColor;
  *(_QWORD *)&v11[v31] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_horizontalPadding] = 0x4030000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelLeadingPadding] = 0x3FF8000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_verticalPadding] = 0x4031000000000000;
  v32 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_buttonSize;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  *(_QWORD *)&v11[v32] = qword_1000B7030;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_labelBottomPadding] = 0x402A000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expandedControlsHeight] = 0x4048000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmSize] = 0x4047800000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmLeadingPadding] = 0x4031800000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmBottomPadding] = 0x4033800000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding] = 0x4033000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = 0;

  v33 = (objc_class *)type metadata accessor for AlarmApertureElementController(0);
  v36.receiver = v11;
  v36.super_class = v33;
  v34 = objc_msgSendSuper2(&v36, "initWithCoder:", a1);

  return v34;
}

id sub_100020D64(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *ObjCClassFromMetadata;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  objc_class *v37;
  id v38;
  _QWORD v40[2];
  objc_super v41;

  v40[1] = a1;
  v6 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v6);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId];
  v14 = v3;
  v15 = UUID.init()();
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *v13 = v16;
  v13[1] = v18;
  v19 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_presentationBehaviors] = 9;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_contentRole] = 2;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 3;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_maximumLayoutMode] = 4;
  v20 = objc_msgSend((id)objc_opt_self(NSURL), "mtURLForSection:", 1);
  if (v20)
  {
    v21 = v20;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v22 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
  }
  else
  {
    v23 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
  }
  sub_1000267A8((uint64_t)v8, (uint64_t)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_launchURL]);
  v24 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_associatedAppBundleIdentifier];
  *(_QWORD *)v24 = 0xD000000000000015;
  *((_QWORD *)v24 + 1) = 0x8000000100086910;
  v25 = &v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_timerObserverIdentifier];
  *(_QWORD *)v25 = 0xD00000000000001ELL;
  *((_QWORD *)v25 + 1) = 0x8000000100081F20;
  v26 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 0;
  v27 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView;
  v28 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v28);
  v30 = objc_allocWithZone(ObjCClassFromMetadata);
  v31 = v26;
  *(_QWORD *)&v14[v27] = objc_msgSend(v30, "init");
  v32 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView;
  *(_QWORD *)&v14[v32] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v33 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView;
  *(_QWORD *)&v14[v33] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v34 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_keyColor;
  *(_QWORD *)&v14[v34] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_horizontalPadding] = 0x4030000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelLeadingPadding] = 0x3FF8000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_verticalPadding] = 0x4031000000000000;
  v35 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_buttonSize;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  *(_QWORD *)&v14[v35] = qword_1000B7030;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_labelBottomPadding] = 0x402A000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expandedControlsHeight] = 0x4048000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmSize] = 0x4047800000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmLeadingPadding] = 0x4031800000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_animatingAlarmBottomPadding] = 0x4033800000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding] = 0x4033000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = 0;

  if (a2)
  {
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v36 = 0;
  }
  v37 = (objc_class *)type metadata accessor for AlarmApertureElementController(0);
  v41.receiver = v14;
  v41.super_class = v37;
  v38 = objc_msgSendSuper2(&v41, "initWithNibName:bundle:", v36, a3);

  return v38;
}

id sub_100021278()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  objc_super v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  v3 = objc_msgSend(v0, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  v13 = v4;
  v14 = v6;
  v7._countAndFlagsBits = 0x74696E69656420;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8);

  v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
  if (v9)
  {
    v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
    swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8]);
    sub_100021560(v10, v9);
    swift_bridgeObjectRelease(v9);
  }
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for AlarmApertureElementController(0);
  return objc_msgSendSuper2(&v12, "dealloc");
}

uint64_t sub_100021510()
{
  return type metadata accessor for AlarmApertureElementController(0);
}

uint64_t type metadata accessor for AlarmApertureElementController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000AFF18;
  if (!qword_1000AFF18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlarmApertureElementController);
  return result;
}

uint64_t sub_100021554(uint64_t a1, uint64_t a2)
{
  return sub_10002156C(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD *))&dispatch thunk of DataStore.registerObserver(_:for:));
}

uint64_t sub_100021560(uint64_t a1, uint64_t a2)
{
  return sub_10002156C(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD *))&dispatch thunk of DataStore.deregisterObserver(_:for:));
}

uint64_t sub_10002156C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, _QWORD *))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  v5 = v3;
  if (qword_1000AECC8 != -1)
    swift_once(&qword_1000AECC8, sub_10001EE18);
  v8 = sub_1000073C0(&qword_1000B0038, type metadata accessor for AlarmApertureElementController, (uint64_t)&unk_100081FF0);
  v11 = a1;
  v12 = a2;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(v13, &v11, &type metadata for String, &protocol witness table for String);
  a3(v3, v8, v13);
  sub_10001E790((uint64_t)v13);
  if (qword_1000AECE0 != -1)
    swift_once(&qword_1000AECE0, sub_1000415B8);
  v9 = *(_QWORD *)(qword_1000B6EF0 + 40);
  v11 = a1;
  v12 = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain(v9);
  AnyHashable.init<A>(_:)(v13, &v11, &type metadata for String, &protocol witness table for String);
  a3(v5, v8, v13);
  swift_release(v9);
  return sub_10001E790((uint64_t)v13);
}

void sub_1000216C0(char a1)
{
  void *v1;
  void *v2;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  NSString v10;
  void *v11;
  void *v12;
  objc_super v13;

  v2 = v1;
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for AlarmApertureElementController(0);
  objc_msgSendSuper2(&v13, "viewWillAppear:", a1 & 1);
  v4 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(17);
  v5 = objc_msgSend(v2, "description", 0);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;
  swift_bridgeObjectRelease(0xE000000000000000);

  v9._countAndFlagsBits = 0x6C69577765697620;
  v9._object = (void *)0xEF7261657070416CLL;
  String.append(_:)(v9);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v4, "logInfo:", v10, v6);

  v11 = sub_100024BE0();
  if (v11)
  {
    v12 = v11;
    if (objc_msgSend(v11, "isFiring"))
    {
      sub_100021F90(v12);
    }
    else if (objc_msgSend(v12, "isSnoozed"))
    {
      sub_10002574C(v12);
    }

  }
}

void sub_100021864()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjCClassFromMetadata;
  id v14;
  NSString v15;
  NSString v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __objc2_ivar *v21;
  id v22;
  void *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  double v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  char *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  uint64_t v67;
  Class isa;
  uint64_t v69;
  char *v70;
  _QWORD v71[2];
  _QWORD v72[5];
  id v73;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v2);
  v4 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
  if (v11)
  {
    v70 = (char *)&v69 - v10;
    v12 = type metadata accessor for AlarmApertureElementController(0);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v12);
    v14 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v15 = String._bridgeToObjectiveC()();
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v14, "localizedStringForKey:value:table:", v15, 0, v16);

    if (!v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v19 = v18;
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v19);
    }
    objc_msgSend(v11, "setAccessibilityLabel:", v17);

    v20 = v11;
    v21 = &stru_1000AB000;
    v22 = objc_msgSend(v1, "view");
    if (v22)
    {
      v23 = v22;
      objc_msgSend(v22, "addSubview:", v20);

      v24 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000AFFB8));
      v25 = &v24[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v24) + 16)];
      *((_QWORD *)v25 + 1) = 0;
      v26 = swift_unknownObjectWeakInit(v25, 0);
      v27 = (void *)UIHostingController.init(rootView:)(v26);
      v28 = objc_msgSend(v27, "view");
      if (v28)
      {
        v29 = v28;
        objc_msgSend(v28, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

        objc_msgSend(v1, "addChildViewController:", v27);
        objc_msgSend(v27, "didMoveToParentViewController:", v1);
        v30 = objc_msgSend(v27, "view");
        if (v30)
        {
          v31 = v30;
          objc_msgSend(v20, "addSubview:", v30);

          v32 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
          if (!v32)
            goto LABEL_17;
          v33 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
          v34 = qword_1000AECC8;
          swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId
                                                + 8]);
          if (v34 != -1)
            swift_once(&qword_1000AECC8, sub_10001EE18);
          v71[0] = v33;
          v71[1] = v32;
          AnyHashable.init<A>(_:)(v72, v71, &type metadata for String, &protocol witness table for String);
          dispatch thunk of DataStore.getEntry(for:)(v72);
          sub_10001E790((uint64_t)v72);
          v35 = v73;
          if (v73)
          {
            v36 = objc_msgSend(v73, "snoozeFireDate");
            v21 = &stru_1000AB000;
            if (v36)
            {
              v37 = v36;
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

              v38 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
              v38(v4, v9, v5);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
              {
                v39 = v70;
                v40 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v70, v4, v5);
                Date.init()(v40);
                v41 = Date.timeIntervalSince(_:)(v9);
                v42 = *(void (**)(char *, uint64_t))(v6 + 8);
                v42(v9, v5);
                sub_100051A6C(v41);
                v44 = v43;
                v45 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v44);
                objc_msgSend(v20, "setAccessibilityLabel:", v45);

                v46 = v39;
                v21 = &stru_1000AB000;
                v42(v46, v5);
                goto LABEL_17;
              }
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
            }

            sub_100011484((uint64_t)v4, &qword_1000AF178);
          }
          else
          {
            v21 = &stru_1000AB000;
          }
LABEL_17:
          v47 = v20;
          v48 = objc_msgSend(v1, v21[114].type);
          if (v48)
          {
            v49 = v48;
            objc_msgSend(v48, "addSubview:", v47);

            v50 = objc_msgSend(v27, v21[114].type);
            if (v50)
            {
              v51 = v50;
              v52 = (void *)objc_opt_self(NSLayoutConstraint);
              v53 = sub_10000A58C((uint64_t *)&unk_1000B2750);
              v54 = swift_allocObject(v53, 64, 7);
              *(_OWORD *)(v54 + 16) = xmmword_100081560;
              v55 = objc_msgSend(v51, "leadingAnchor");
              v56 = objc_msgSend(v47, "leadingAnchor");
              v57 = objc_msgSend(v55, "constraintEqualToAnchor:", v56);

              *(_QWORD *)(v54 + 32) = v57;
              v58 = objc_msgSend(v51, "trailingAnchor");
              v59 = objc_msgSend(v47, "trailingAnchor");
              v60 = objc_msgSend(v58, "constraintEqualToAnchor:", v59);

              *(_QWORD *)(v54 + 40) = v60;
              v61 = objc_msgSend(v51, "topAnchor");
              v62 = objc_msgSend(v47, "topAnchor");
              v63 = objc_msgSend(v61, "constraintEqualToAnchor:", v62);

              *(_QWORD *)(v54 + 48) = v63;
              v64 = objc_msgSend(v51, "bottomAnchor");
              v65 = objc_msgSend(v47, "bottomAnchor");
              v66 = objc_msgSend(v64, "constraintEqualToAnchor:", v65);

              *(_QWORD *)(v54 + 56) = v66;
              v72[0] = v54;
              specialized Array._endMutation()();
              v67 = v72[0];
              sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
              isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v67);
              objc_msgSend(v52, "activateConstraints:", isa);

              return;
            }
LABEL_25:
            __break(1u);
            return;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
}

void sub_100021F90(void *a1)
{
  char *v1;
  char *v2;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  NSString v10;
  uint64_t v11;
  char *v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  Class isa;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  Class v64;
  uint64_t v65;
  _BYTE v66[88];
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _UNKNOWN **v70;
  _QWORD *v71;
  ValueMetadata *v72;
  _UNKNOWN **v73;

  v2 = v1;
  v4 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(0xE000000000000000);
  v67 = 0xD00000000000002BLL;
  v68 = 0x8000000100086630;
  v5 = objc_msgSend(a1, "alarmIDString");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100086630);
  objc_msgSend(v4, "logInfo:", v10);

  sub_10002359C();
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView])
    return;
  sub_1000227BC();
  v11 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost])
  {
    v12 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B0030));
    v13 = &v12[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v12) + 16)];
    *((_QWORD *)v13 + 1) = 0;
    swift_unknownObjectWeakInit(v13, 0);
    v67 = (unint64_t)a1;
    v14 = a1;
    v15 = (void *)UIHostingController.init(rootView:)(&v67);
    v16 = objc_msgSend(v15, "view");
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v18 = objc_msgSend(v15, "view");
      if (v18)
      {
        v19 = v18;
        v20 = objc_msgSend(v18, "layer");

        objc_msgSend(v20, "setAllowsHitTesting:", 0);
        objc_msgSend(v2, "addChildViewController:", v15);
        v21 = objc_msgSend(v2, "view");
        if (v21)
        {
          v22 = v21;
          v23 = objc_msgSend(v15, "view");
          if (v23)
          {
            v24 = v23;
            objc_msgSend(v22, "addSubview:", v23);

            objc_msgSend(v15, "didMoveToParentViewController:", v2);
            v25 = *(void **)&v2[v11];
            *(_QWORD *)&v2[v11] = v15;

            goto LABEL_8;
          }
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_8:
  v26 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost])
  {
    v27 = qword_1000AECE8;
    v28 = a1;
    if (v27 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v29 = (void *)qword_1000B6F08;
    v69 = type metadata accessor for ClockAngelConnectionManager();
    v70 = &off_1000A0AD8;
    v68 = (unint64_t)v29;
    v30 = (void *)objc_opt_self(ClockAngelUtilities);
    v31 = v29;
    v32 = Color.init(uiColor:)(objc_msgSend(v30, "mtOrange"));
    v33 = Color.init(uiColor:)(objc_msgSend(v30, "mtOrange"));
    v34 = Color.opacity(_:)(0.28);
    swift_release(v33);
    v36 = static Color.white.getter(v35);
    v37 = static Color.white.getter(v36);
    v38 = Color.opacity(_:)(0.2);
    swift_release(v37);
    v72 = &type metadata for StandardSessionUiConfig;
    v73 = &off_1000A1520;
    v39 = (_QWORD *)swift_allocObject(&unk_10009F2C0, 48, 7);
    v39[2] = v32;
    v39[3] = v34;
    v39[4] = v36;
    v39[5] = v38;
    v71 = v39;
    v67 = (unint64_t)v28;
    v40 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B0028));
    v41 = &v40[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v40) + 16)];
    *((_QWORD *)v41 + 1) = 0;
    swift_unknownObjectWeakInit(v41, 0);
    sub_10000E908((uint64_t)&v67, (uint64_t)v66);
    v42 = (void *)UIHostingController.init(rootView:)(v66);
    sub_100026748((uint64_t)&v67);
    v43 = objc_msgSend(v42, "view");
    if (v43)
    {
      v44 = v43;
      objc_msgSend(v43, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v45 = objc_msgSend(v42, "view");
      if (v45)
      {
        v46 = v45;
        v47 = objc_msgSend(v45, "layer");

        objc_msgSend(v47, "setAllowsHitTesting:", 1);
        objc_msgSend(v2, "addChildViewController:", v42);
        v48 = objc_msgSend(v2, "view");
        if (v48)
        {
          v49 = v48;
          v50 = objc_msgSend(v42, "view");
          if (v50)
          {
            v51 = v50;
            objc_msgSend(v49, "addSubview:", v50);

            objc_msgSend(v42, "didMoveToParentViewController:", v2);
            v52 = *(void **)&v2[v26];
            *(_QWORD *)&v2[v26] = v42;

            goto LABEL_16;
          }
LABEL_33:
          __break(1u);
          return;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_16:
  v53 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints;
  v54 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints];
  if ((unint64_t)v54 >> 62)
  {
    if (v54 < 0)
      v65 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints];
    else
      v65 = v54 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints]);
    v55 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
    v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v55)
  {
    v56 = (void *)objc_opt_self(NSLayoutConstraint);
    v57 = *(_QWORD *)&v2[v53];
    sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
    swift_bridgeObjectRetain(v57);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v57);
    objc_msgSend(v56, "deactivateConstraints:", isa);

    v59 = *(_QWORD *)&v2[v53];
    *(_QWORD *)&v2[v53] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v59);
  }
  v60 = sub_100022CF4();
  v61 = *(_QWORD *)&v2[v53];
  *(_QWORD *)&v2[v53] = v60;
  swift_bridgeObjectRelease(v61);
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode] = 4;
  v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal] = 1;
  v62 = (void *)objc_opt_self(NSLayoutConstraint);
  v63 = *(_QWORD *)&v2[v53];
  sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v63);
  v64 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v63);
  objc_msgSend(v62, "activateConstraints:", v64);

}

void sub_100022644()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;

  v1 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView];
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v3, "removeFromSuperview");
    v4 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = 0;

  }
  v5 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost;
  v6 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost];
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v7, "view");
    if (!v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return;
    }
    v9 = v8;
    objc_msgSend(v8, "removeFromSuperview");

    objc_msgSend(v7, "didMoveToParentViewController:", 0);
    objc_msgSend(v0, "removeChildViewController:", v7);
    v10 = *(void **)&v0[v5];
    *(_QWORD *)&v0[v5] = 0;

  }
  v11 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost;
  v12 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost];
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v13, "view");
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "removeFromSuperview");

      objc_msgSend(v13, "didMoveToParentViewController:", 0);
      objc_msgSend(v0, "removeChildViewController:", v13);
      v16 = *(id *)&v0[v11];
      *(_QWORD *)&v0[v11] = 0;

      return;
    }
    goto LABEL_11;
  }
}

void sub_1000227BC()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t ObjectType;
  uint64_t ObjCClassFromMetadata;
  id v12;
  id v13;
  NSString v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  NSString v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  id isa;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(SBUISystemApertureButton), "buttonWithType:", 0);
  v3 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView] = v2;

  v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = objc_msgSend(v5, "layer");
  objc_msgSend(v6, "setMasksToBounds:", 1);

  v7 = *(void **)&v1[v3];
  if (!v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v8 = objc_msgSend(v1, "view");
  if (!v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!*(_QWORD *)&v1[v3])
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = v8;
  objc_msgSend(v8, "addSubview:");

  ObjectType = swift_getObjectType(v1);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v13 = objc_allocWithZone((Class)BSUICAPackageView);
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "initWithPackageName:inBundle:", v14, v12);

  v16 = (void *)objc_opt_self(MTSessionUtilities);
  if (!v15)
  {
    _StringGuts.grow(_:)(54);
    v39 = objc_msgSend(v1, "description");
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v42 = v41;

    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v42);
    v44._countAndFlagsBits = 0xD000000000000034;
    v44._object = (void *)0x8000000100086760;
    String.append(_:)(v44);
    isa = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v16, "logInfo:", isa);
    goto LABEL_11;
  }
  _StringGuts.grow(_:)(30);
  v17 = objc_msgSend(v1, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v19 = v18;
  swift_bridgeObjectRelease(0xE000000000000000);

  v20._countAndFlagsBits = 0xD00000000000001CLL;
  v20._object = (void *)0x80000001000867A0;
  String.append(_:)(v20);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v16, "logInfo:", v21);

  v22 = *(void **)&v1[v3];
  if (!v22)
    goto LABEL_16;
  objc_msgSend(v22, "addSubview:", v15);
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v15, "setUserInteractionEnabled:", 0);
  v23 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v24 = swift_allocObject(v23, 64, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100081560;
  v25 = objc_msgSend(v15, "widthAnchor");
  v26 = objc_msgSend(v25, "constraintEqualToConstant:", 47.0);

  *(_QWORD *)(v24 + 32) = v26;
  v27 = objc_msgSend(v15, "heightAnchor");
  v28 = objc_msgSend(v27, "constraintEqualToConstant:", 47.0);

  *(_QWORD *)(v24 + 40) = v28;
  v29 = objc_msgSend(v15, "centerXAnchor");
  v30 = *(void **)&v1[v3];
  if (!v30)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v31 = objc_msgSend(v30, "centerXAnchor");
  v32 = objc_msgSend(v29, "constraintEqualToAnchor:", v31);

  *(_QWORD *)(v24 + 48) = v32;
  v33 = objc_msgSend(v15, "centerYAnchor");
  v34 = *(void **)&v1[v3];
  if (v34)
  {
    v35 = v33;
    v36 = (void *)objc_opt_self(NSLayoutConstraint);
    v37 = objc_msgSend(v34, "centerYAnchor");
    v38 = objc_msgSend(v35, "constraintEqualToAnchor:", v37);

    *(_QWORD *)(v24 + 56) = v38;
    specialized Array._endMutation()();
    sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v36, "activateConstraints:", isa);

LABEL_11:
    return;
  }
LABEL_18:
  __break(1u);
}

id sub_100022CF4()
{
  char *v0;
  id result;
  void *v2;
  double v3;
  void *v4;
  double v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  double v10;
  id v11;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;

  result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost];
  if (!result)
  {
    __break(1u);
    goto LABEL_20;
  }
  result = objc_msgSend(result, "view");
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v2 = result;
  result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost];
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  result = objc_msgSend(result, "view");
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v4 = result;
  LODWORD(v3) = 1132068864;
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0, v3);
  LODWORD(v5) = 1144750080;
  objc_msgSend(v4, "setContentHuggingPriority:forAxis:", 0, v5);
  v6 = objc_msgSend(v4, "trailingAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = result;
  v8 = objc_msgSend(result, "trailingAnchor");

  v9 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, -16.0);
  LODWORD(v10) = 1148846080;
  objc_msgSend(v9, "setPriority:", v10);
  v11 = objc_msgSend(v2, "trailingAnchor");
  v12 = objc_msgSend(v4, "leadingAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  LODWORD(v14) = 1148846080;
  objc_msgSend(v13, "setPriority:", v14);
  v15 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v16 = swift_allocObject(v15, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100081F20;
  v17 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView;
  result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAnimationView];
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v48 = v9;
  v18 = objc_msgSend(result, "leadingAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = result;
  v20 = objc_msgSend(result, "leadingAnchor");

  v21 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v20, 17.5);
  *(_QWORD *)(v16 + 32) = v21;
  result = *(id *)&v0[v17];
  if (!result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v22 = objc_msgSend(result, "trailingAnchor");
  v23 = objc_msgSend(v2, "leadingAnchor");
  v24 = objc_msgSend(v22, "constraintEqualToAnchor:", v23);

  *(_QWORD *)(v16 + 40) = v24;
  result = *(id *)&v0[v17];
  if (!result)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v25 = objc_msgSend(result, "topAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v26 = result;
  v27 = objc_msgSend(result, "topAnchor");

  v28 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v27, 17.0);
  *(_QWORD *)(v16 + 48) = v28;
  result = *(id *)&v0[v17];
  if (!result)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v29 = objc_msgSend(result, "bottomAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v30 = result;
  v31 = objc_msgSend(result, "bottomAnchor");

  v32 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v31, -19.5);
  *(_QWORD *)(v16 + 56) = v32;
  result = *(id *)&v0[v17];
  if (!result)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v33 = objc_msgSend(result, "widthAnchor");
  result = *(id *)&v0[v17];
  if (!result)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v34 = objc_msgSend(result, "heightAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(v16 + 64) = v35;
  *(_QWORD *)(v16 + 72) = v13;
  v47 = v13;
  v36 = objc_msgSend(v4, "bottomAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v37 = result;
  v38 = objc_msgSend(result, "bottomAnchor");

  v39 = objc_msgSend(v36, "constraintEqualToAnchor:constant:", v38, -17.0);
  *(_QWORD *)(v16 + 80) = v39;
  v40 = objc_msgSend(v2, "leadingAnchor");
  result = *(id *)&v0[v17];
  if (!result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v41 = objc_msgSend(result, "trailingAnchor");
  v42 = objc_msgSend(v40, "constraintEqualToAnchor:constant:", v41, 1.5);

  *(_QWORD *)(v16 + 88) = v42;
  v43 = objc_msgSend(v2, "bottomAnchor");
  result = objc_msgSend(v0, "view");
  if (result)
  {
    v44 = result;
    v45 = objc_msgSend(result, "bottomAnchor");

    v46 = objc_msgSend(v43, "constraintEqualToAnchor:constant:", v45, -*(double *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmLabelBottomPadding]);
    *(_QWORD *)(v16 + 96) = v46;
    *(_QWORD *)(v16 + 104) = v48;
    specialized Array._endMutation()();

    return (id)v16;
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_10002335C()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  NSString v21;

  v1 = (void *)objc_opt_self(MTSessionUtilities);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "logInfo:", v2);

  *(_QWORD *)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preferredLayoutMode) = 3;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_preventsInteractiveDismissal) = 0;
  v3 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertLeadingHost);
  if (!v4)
    goto LABEL_16;
  v5 = objc_msgSend(v4, "view");
  if (!v5)
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "superview");

  if (v7)
  {

    v8 = *(void **)(v0 + v3);
    if (!v8)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v9 = objc_msgSend(v8, "view");
    if (!v9)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v10 = v9;
    objc_msgSend(v9, "removeFromSuperview");

  }
  v11 = *(void **)(v0 + v3);
  if (!v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v11, "removeFromParentViewController");
  v12 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost;
  v13 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmAlertTrailingHost);
  if (!v13)
  {
LABEL_16:
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "logInfo:", v21);

    return;
  }
  v14 = objc_msgSend(v13, "view");
  if (!v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, "superview");

  if (!v16)
    goto LABEL_14;

  v17 = *(void **)(v0 + v12);
  if (!v17)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v18 = objc_msgSend(v17, "view");
  if (v18)
  {
    v19 = v18;
    objc_msgSend(v18, "removeFromSuperview");

LABEL_14:
    v20 = *(void **)(v0 + v12);
    if (v20)
    {
      objc_msgSend(v20, "removeFromParentViewController");
      return;
    }
    goto LABEL_22;
  }
LABEL_24:
  __break(1u);
}

void sub_10002359C()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  NSString v21;

  v1 = (void *)objc_opt_self(MTSessionUtilities);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "logInfo:", v2);

  v3 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading);
  if (!v4)
    goto LABEL_16;
  v5 = objc_msgSend(v4, "view");
  if (!v5)
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, "superview");

  if (v7)
  {

    v8 = *(void **)(v0 + v3);
    if (!v8)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v9 = objc_msgSend(v8, "view");
    if (!v9)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v10 = v9;
    objc_msgSend(v9, "removeFromSuperview");

  }
  v11 = *(void **)(v0 + v3);
  if (!v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v11, "removeFromParentViewController");
  v12 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing;
  v13 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing);
  if (!v13)
  {
LABEL_16:
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "logInfo:", v21);

    return;
  }
  v14 = objc_msgSend(v13, "view");
  if (!v14)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, "superview");

  if (!v16)
    goto LABEL_14;

  v17 = *(void **)(v0 + v12);
  if (!v17)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v18 = objc_msgSend(v17, "view");
  if (v18)
  {
    v19 = v18;
    objc_msgSend(v18, "removeFromSuperview");

LABEL_14:
    v20 = *(void **)(v0 + v12);
    if (v20)
    {
      objc_msgSend(v20, "removeFromParentViewController");
      return;
    }
    goto LABEL_22;
  }
LABEL_24:
  __break(1u);
}

void sub_1000237C0(void *a1)
{
  char *v1;
  char *v2;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t (*v14)();
  void *v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  Class isa;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  Class v64;
  uint64_t v65;
  _BYTE v66[88];
  unint64_t v67;
  uint64_t (*v68)();
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  _UNKNOWN **v72;
  _QWORD *v73;
  ValueMetadata *v74;
  _UNKNOWN **v75;

  v2 = v1;
  v4 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(0xE000000000000000);
  v67 = 0xD00000000000002BLL;
  v68 = (uint64_t (*)())0x8000000100086630;
  v5 = objc_msgSend(a1, "alarmIDString");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100086630);
  objc_msgSend(v4, "logInfo:", v10);

  sub_10002335C();
  v11 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading])
  {
    v12 = qword_1000AECE8;
    v13 = a1;
    if (v12 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v14 = (uint64_t (*)())qword_1000B6F08;
    v71 = type metadata accessor for ClockAngelConnectionManager();
    v72 = &off_1000A0AD8;
    v68 = v14;
    v15 = (void *)objc_opt_self(ClockAngelUtilities);
    v16 = v14;
    v17 = Color.init(uiColor:)(objc_msgSend(v15, "mtOrange"));
    v18 = Color.init(uiColor:)(objc_msgSend(v15, "mtOrange"));
    v19 = Color.opacity(_:)(0.28);
    swift_release(v18);
    v21 = static Color.white.getter(v20);
    v22 = static Color.white.getter(v21);
    v23 = Color.opacity(_:)(0.2);
    swift_release(v22);
    v74 = &type metadata for StandardSessionUiConfig;
    v75 = &off_1000A1520;
    v24 = (_QWORD *)swift_allocObject(&unk_10009F2C0, 48, 7);
    v24[2] = v17;
    v24[3] = v19;
    v24[4] = v21;
    v24[5] = v23;
    v73 = v24;
    v67 = (unint64_t)v13;
    v25 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B0020));
    v26 = &v25[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v25) + 16)];
    *((_QWORD *)v26 + 1) = 0;
    swift_unknownObjectWeakInit(v26, 0);
    sub_10000E7A8((uint64_t)&v67, (uint64_t)v66);
    v27 = (void *)UIHostingController.init(rootView:)(v66);
    sub_100011404((uint64_t)&v67);
    v28 = objc_msgSend(v27, "view");
    if (v28)
    {
      v29 = v28;
      objc_msgSend(v28, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v30 = objc_msgSend(v27, "view");
      if (v30)
      {
        v31 = v30;
        v32 = objc_msgSend(v30, "layer");

        objc_msgSend(v32, "setAllowsHitTesting:", 1);
        objc_msgSend(v2, "addChildViewController:", v27);
        v33 = objc_msgSend(v2, "view");
        if (v33)
        {
          v34 = v33;
          v35 = objc_msgSend(v27, "view");
          if (v35)
          {
            v36 = v35;
            objc_msgSend(v34, "addSubview:", v35);

            objc_msgSend(v27, "didMoveToParentViewController:", v2);
            v37 = *(void **)&v2[v11];
            *(_QWORD *)&v2[v11] = v27;

            goto LABEL_9;
          }
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_9:
  v38 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing])
  {
    v39 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B0018));
    v40 = &v39[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v39) + 16)];
    *((_QWORD *)v40 + 1) = 0;
    swift_unknownObjectWeakInit(v40, 0);
    v67 = (unint64_t)a1;
    v68 = sub_1000083B0;
    v69 = 0;
    v70 = 0;
    v41 = a1;
    v42 = (void *)UIHostingController.init(rootView:)(&v67);
    v43 = objc_msgSend(v42, "view");
    if (v43)
    {
      v44 = v43;
      objc_msgSend(v43, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v45 = objc_msgSend(v42, "view");
      if (v45)
      {
        v46 = v45;
        v47 = objc_msgSend(v45, "layer");

        objc_msgSend(v47, "setAllowsHitTesting:", 0);
        objc_msgSend(v2, "addChildViewController:", v42);
        v48 = objc_msgSend(v2, "view");
        if (v48)
        {
          v49 = v48;
          v50 = objc_msgSend(v42, "view");
          if (v50)
          {
            v51 = v50;
            objc_msgSend(v49, "addSubview:", v50);

            objc_msgSend(v42, "didMoveToParentViewController:", v2);
            v52 = *(void **)&v2[v38];
            *(_QWORD *)&v2[v38] = v42;

            goto LABEL_15;
          }
LABEL_31:
          __break(1u);
          return;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_15:
  v53 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints;
  v54 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints];
  if ((unint64_t)v54 >> 62)
  {
    if (v54 < 0)
      v65 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints];
    else
      v65 = v54 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeConstraints]);
    v55 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease(v54);
  }
  else
  {
    v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v55)
  {
    v56 = (void *)objc_opt_self(NSLayoutConstraint);
    v57 = *(_QWORD *)&v2[v53];
    sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
    swift_bridgeObjectRetain(v57);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v57);
    objc_msgSend(v56, "deactivateConstraints:", isa);

    v59 = *(_QWORD *)&v2[v53];
    *(_QWORD *)&v2[v53] = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v59);
  }
  v60 = sub_100023E4C();
  v61 = *(_QWORD *)&v2[v53];
  *(_QWORD *)&v2[v53] = v60;
  swift_bridgeObjectRelease(v61);
  v62 = (void *)objc_opt_self(NSLayoutConstraint);
  v63 = *(_QWORD *)&v2[v53];
  sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v63);
  v64 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v63);
  objc_msgSend(v62, "activateConstraints:", v64);

}

id sub_100023E4C()
{
  char *v0;
  id result;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;

  result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostLeading];
  if (!result)
  {
    __break(1u);
    goto LABEL_11;
  }
  result = objc_msgSend(result, "view");
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v2 = result;
  result = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_alarmSnoozeExpandedHostTrailing];
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  result = objc_msgSend(result, "view");
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v3 = result;
  v4 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100081560;
  v6 = objc_msgSend(v2, "leadingAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = result;
  v8 = objc_msgSend(result, "leadingAnchor");

  v9 = objc_msgSend(v6, "constraintEqualToAnchor:constant:", v8, 16.0);
  *(_QWORD *)(v5 + 32) = v9;
  v10 = objc_msgSend(v2, "bottomAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = result;
  v12 = objc_msgSend(result, "bottomAnchor");

  v13 = objc_msgSend(v10, "constraintEqualToAnchor:constant:", v12, -17.0);
  *(_QWORD *)(v5 + 40) = v13;
  v14 = objc_msgSend(v3, "trailingAnchor");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15 = result;
  v16 = objc_msgSend(result, "SBUISA_systemApertureLegibleContentLayoutMarginsGuide");

  v17 = objc_msgSend(v16, "trailingAnchor");
  v18 = objc_msgSend(v14, "constraintEqualToAnchor:", v17);

  *(_QWORD *)(v5 + 48) = v18;
  v19 = objc_msgSend(v3, "bottomAnchor");
  result = objc_msgSend(v0, "view");
  if (result)
  {
    v20 = result;
    v21 = objc_msgSend(result, "bottomAnchor");

    v22 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v21, -13.0);
    *(_QWORD *)(v5 + 56) = v22;
    specialized Array._endMutation()();

    return (id)v5;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_100024158(uint64_t a1, char *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  NSString v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  NSString v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  NSString v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  NSString v49;
  void *v50;
  NSString v51;
  id v52;

  switch(*(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_activeLayoutMode])
  {
    case 0:
      v3 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(31);
      v4 = objc_msgSend(a2, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v6 = v5;
      swift_bridgeObjectRelease(0xE000000000000000);

      v7._object = (void *)0x80000001000868F0;
      v7._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v7);
      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      objc_msgSend(v3, "logInfo:", v8);

      goto LABEL_5;
    case 1:
      v14 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(32);
      v15 = objc_msgSend(a2, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v17 = v16;
      swift_bridgeObjectRelease(0xE000000000000000);

      v18._countAndFlagsBits = 0xD00000000000001ELL;
      v18._object = (void *)0x8000000100086870;
      String.append(_:)(v18);
      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v17);
      objc_msgSend(v14, "logInfo:", v19);

      sub_100022644();
LABEL_5:
      v20 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v20)
        objc_msgSend(v20, "setHidden:", 1);
      v21 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v21)
        objc_msgSend(v21, "setHidden:", 1);
      v22 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (!v22)
        return;
      goto LABEL_16;
    case 2:
      v23 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(31);
      v24 = objc_msgSend(a2, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v26 = v25;
      swift_bridgeObjectRelease(0xE000000000000000);

      v27._object = (void *)0x80000001000868D0;
      v27._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v27);
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v26);
      objc_msgSend(v23, "logInfo:", v28);

      sub_100022644();
      v29 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (v29)
        objc_msgSend(v29, "setHidden:", 0);
      v30 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v30)
        objc_msgSend(v30, "setHidden:", 1);
      v22 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v22)
LABEL_16:
        objc_msgSend(v22, "setHidden:", 1);
      return;
    case 3:
      v31 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(31);
      v32 = objc_msgSend(a2, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v34 = v33;
      swift_bridgeObjectRelease(0xE000000000000000);

      v35._object = (void *)0x80000001000868B0;
      v35._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v35);
      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
      objc_msgSend(v31, "logInfo:", v36);

      sub_100022644();
      v37 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v37)
        objc_msgSend(v37, "setHidden:", 0);
      v38 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v38)
        objc_msgSend(v38, "setHidden:", 0);
      v39 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (v39)
        objc_msgSend(v39, "setHidden:", 1);
      v40 = objc_msgSend(a2, "systemApertureElementContext");
      v52 = objc_msgSend(v40, "transitionContext");
      swift_unknownObjectRelease(v40);
      if (!v52)
        return;
      if (objc_msgSend(v52, "isUserInitiated"))
        sub_100024968();
      break;
    case 4:
      v41 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
      if (v41)
        objc_msgSend(v41, "setHidden:", 1);
      v42 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
      if (v42)
        objc_msgSend(v42, "setHidden:", 1);
      v43 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_minimalView];
      if (v43)
        objc_msgSend(v43, "setHidden:", 1);
      v44 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(30);
      v45 = objc_msgSend(a2, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v47 = v46;
      swift_bridgeObjectRelease(0xE000000000000000);

      v48._countAndFlagsBits = 0xD00000000000001CLL;
      v48._object = (void *)0x8000000100086890;
      String.append(_:)(v48);
      v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v47);
      objc_msgSend(v44, "logInfo:", v49);

      v50 = sub_100024BE0();
      if (!v50)
        return;
      v52 = v50;
      if (objc_msgSend(v50, "isFiring"))
        sub_100021F90(v52);
      else
        sub_1000237C0(v52);
      break;
    default:
      v9 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(35);
      v10 = objc_msgSend(a2, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v12 = v11;
      swift_bridgeObjectRelease(0xE000000000000000);

      v13._countAndFlagsBits = 0xD000000000000021;
      v13._object = (void *)0x8000000100086840;
      String.append(_:)(v13);
      v51 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      objc_msgSend(v9, "logInfo:", v51);

      return;
  }

}

void sub_100024968()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  NSString v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  NSString v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  v1 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(25);
  v2 = objc_msgSend(v0, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v4 = v3;
  swift_bridgeObjectRelease(0xE000000000000000);

  v5._object = (void *)0x80000001000865F0;
  v5._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v5);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v1, "logInfo:", v6);

  v7 = sub_100024BE0();
  if (v7)
  {
    v22 = v7;
    if (objc_msgSend(v7, "isFiring"))
    {
      _StringGuts.grow(_:)(34);
      v8 = objc_msgSend(v0, "description");
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v10 = v9;
      swift_bridgeObjectRelease(0xE000000000000000);

      v11._countAndFlagsBits = 0xD00000000000001ELL;
      v11._object = (void *)0x8000000100086610;
      String.append(_:)(v11);
      v12 = objc_msgSend(v22, "alarmIDString");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16._countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v15);
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v10);
      objc_msgSend(v1, "logInfo:", v17);

      if (qword_1000AECE8 != -1)
        swift_once(&qword_1000AECE8, sub_1000478C4);
      v18 = objc_msgSend(v22, "alarmIDString");
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      sub_100047480(v19, v21);
      swift_bridgeObjectRelease(v21);
    }

  }
}

void *sub_100024BE0()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  NSString v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  id v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  unint64_t v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  NSString v30;
  _QWORD v32[2];
  uint64_t v33;
  unint64_t v34;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(33);
  v3 = objc_msgSend(v0, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  v33 = v4;
  v34 = v6;
  v7._countAndFlagsBits = 0xD00000000000001FLL;
  v7._object = (void *)0x8000000100086590;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8);

  v9 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8];
  if (!v9)
  {
    _StringGuts.grow(_:)(22);
    v25 = objc_msgSend(v0, "description");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;
    swift_bridgeObjectRelease(0xE000000000000000);

    v33 = v26;
    v29._object = (void *)0x80000001000865B0;
    v29._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v29);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    objc_msgSend(v2, "logInfo:", v30);

    return 0;
  }
  v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId];
  v11 = qword_1000AECC8;
  swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8]);
  if (v11 != -1)
    swift_once(&qword_1000AECC8, sub_10001EE18);
  v32[0] = v10;
  v32[1] = v9;
  swift_bridgeObjectRetain(v9);
  AnyHashable.init<A>(_:)(&v33, v32, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(&v33);
  sub_10001E790((uint64_t)&v33);
  v12 = (void *)v32[0];
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  v13 = v34;
  v14 = objc_msgSend(v1, "description");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;
  swift_bridgeObjectRelease(v13);

  v33 = v15;
  v34 = v17;
  v18._countAndFlagsBits = 0xD00000000000001CLL;
  v18._object = (void *)0x80000001000865D0;
  String.append(_:)(v18);
  v32[0] = v12;
  v19 = v12;
  v20 = sub_10000A58C((uint64_t *)&unk_1000B0000);
  v21._countAndFlagsBits = String.init<A>(describing:)(v32, v20);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23 = v34;
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v2, "logInfo:", v24);

  if (!v12)
  {
    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    sub_1000466B4(v10, v9, 1);
    swift_bridgeObjectRelease(v9);
    return 0;
  }
  swift_bridgeObjectRelease(v9);
  return v12;
}

void sub_100024F78(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  unint64_t v21;
  NSString v22;
  void *v23;
  void *v24;
  NSString v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  unint64_t v42;
  NSString v43;
  NSString v44;
  uint64_t v45;
  void **aBlock;
  unint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  void (*v50)();
  uint64_t v51;
  id v52;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000113C0(a1, (uint64_t)&aBlock);
  v12 = sub_10000A58C(&qword_1000AFFC8);
  v13 = sub_100015494(0, (unint64_t *)&qword_1000AFCA8, MTAlarm_ptr);
  if (swift_dynamicCast(&v52, &aBlock, v12, v13, 6))
  {
    v45 = v5;

    v14 = (void *)objc_opt_self(MTSessionUtilities);
    aBlock = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v15._countAndFlagsBits = 0xD000000000000032;
    v15._object = (void *)0x8000000100086530;
    String.append(_:)(v15);
    v16 = objc_msgSend(v2, "description");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v19);
    v21 = v47;
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    objc_msgSend(v14, "logInfo:", v22);

    v23 = sub_100024BE0();
    if (v23)
    {
      v24 = v23;
      v25 = String._bridgeToObjectiveC()();
      objc_msgSend(v14, "logInfo:", v25);

      sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
      v26 = (void *)static OS_dispatch_queue.main.getter();
      v27 = swift_allocObject(&unk_10009F270, 32, 7);
      *(_QWORD *)(v27 + 16) = v2;
      *(_QWORD *)(v27 + 24) = v24;
      v50 = sub_100026704;
      v51 = v27;
      aBlock = _NSConcreteStackBlock;
      v47 = 1107296256;
      v48 = sub_10001C5FC;
      v49 = &unk_10009F288;
      v28 = _Block_copy(&aBlock);
      v29 = v51;
      v30 = v2;
      v31 = v24;
      swift_release(v29);
      static DispatchQoS.unspecified.getter(v32);
      aBlock = (void **)&_swiftEmptyArrayStorage;
      v33 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v34 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
      v35 = sub_10001DC0C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v34, v35, v4, v33);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v28);
      _Block_release(v28);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      v44 = String._bridgeToObjectiveC()();
      objc_msgSend(v14, "logInfo:", v44);

    }
  }
  else
  {
    v36 = (void *)objc_opt_self(MTSessionUtilities);
    aBlock = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(v47);
    aBlock = (void **)0xD000000000000014;
    v47 = 0x8000000100086510;
    v37 = objc_msgSend(v2, "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;

    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v40);
    v42 = v47;
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v36, "logInfo:", v43);

  }
}

void sub_1000253D8(int a1, id a2)
{
  if (objc_msgSend(a2, "isFiring"))
  {
    sub_100021F90(a2);
  }
  else if ((objc_msgSend(a2, "isSnoozed") & 1) != 0)
  {
    sub_10002574C(a2);
  }
}

uint64_t sub_100025434(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  BOOL v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  unint64_t v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000AFFC0);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AlarmSessionEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_sessionId);
    sub_1000113C0((uint64_t)a1, (uint64_t)&v31);
    swift_bridgeObjectRetain(v12);
    v14 = sub_10000A58C(&qword_1000AFFC8);
    v15 = swift_dynamicCast(v6, &v31, v14, v7, 6);
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    if ((v15 & 1) != 0)
    {
      v16(v6, 0, 1, v7);
      sub_100026658((uint64_t)v6, (uint64_t)v11);
      v17 = v11[1];
      v18 = v13 == *v11 && v12 == v17;
      if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, *v11, v17, 0) & 1) != 0)
      {
        v19 = (void *)objc_opt_self(MTSessionUtilities);
        v31 = 0;
        v32 = 0xE000000000000000;
        _StringGuts.grow(_:)(53);
        v29 = v31;
        v30 = v32;
        v20._object = (void *)0x80000001000864E0;
        v20._countAndFlagsBits = 0xD000000000000026;
        String.append(_:)(v20);
        v21 = a1[3];
        v22 = a1[4];
        sub_10000E784(a1, v21);
        v23 = *(_QWORD *)(v22 + 8);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v23, v21, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, v21, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
        sub_10002669C(&v31);
        dispatch thunk of Identifiable.id.getter(v21, v23);
        v24 = sub_10000A58C((uint64_t *)&unk_1000AFFD0);
        _print_unlocked<A, B>(_:_:)(&v31, &v29, v24, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        sub_100007CF0(&v31);
        v25._countAndFlagsBits = 0x696E61656C63202CLL;
        v25._object = (void *)0xED0000707520676ELL;
        String.append(_:)(v25);
        v26 = v30;
        v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v26);
        objc_msgSend(v19, "logInfo:", v27);

        sub_100021560(v13, v12);
        swift_bridgeObjectRelease(v12);
        return sub_10000E844((uint64_t)v11, type metadata accessor for AlarmSessionEntry);
      }
      else
      {
        sub_10000E844((uint64_t)v11, type metadata accessor for AlarmSessionEntry);
        return swift_bridgeObjectRelease(v12);
      }
    }
    else
    {
      v16(v6, 1, 1, v7);
      swift_bridgeObjectRelease(v12);
      return sub_100011484((uint64_t)v6, &qword_1000AFFC0);
    }
  }
  return result;
}

void sub_10002574C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  id v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  NSString v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  char *v57;
  uint64_t v58;
  double v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  id v64;
  id v65;
  NSString v66;
  void *v67;
  unint64_t v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  Swift::String v73;
  unint64_t v74;
  NSString v75;
  unint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  Swift::String v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  void *v97;
  char *v98;
  uint64_t v99;
  double v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  NSString v104;
  id v105;
  id v106;
  NSString v107;
  unint64_t v108;
  id v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  Swift::String v113;
  unint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  void *v124;
  uint64_t v125;
  char *v126;
  id v127;
  const void *v128;
  void *v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  void (*v132)(uint64_t, char *, uint64_t);
  id v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  void **aBlock;
  unint64_t v140;
  void (*v141)(uint64_t, void *);
  void *v142;
  uint64_t (*v143)(uint64_t);
  uint64_t v144;
  id v145;

  v2 = v1;
  v4 = type metadata accessor for AlarmSnoozeCompressedTrailingView(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v130 - v8;
  v10 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v10);
  v12 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v137 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v138 = (char *)&v130 - v17;
  v18 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost;
  v19 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeTrailingHost];
  if (v19)
  {
    v20 = objc_msgSend(v19, "parentViewController");
    if (v20)
    {

      return;
    }
  }
  v21 = objc_msgSend(a1, "snoozeFireDate");
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
    goto LABEL_16;
  }
  v22 = v21;
  v136 = v13;
  v23 = v137;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);

  v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v25 = v23;
  v26 = v136;
  v24(v12, v25, v136);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v26) == 1)
  {
LABEL_16:
    sub_100011484((uint64_t)v12, &qword_1000AF178);
    v67 = (void *)objc_opt_self(MTSessionUtilities);
    aBlock = 0;
    v140 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    v68 = v140;
    v69 = objc_msgSend(v2, "description");
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v72 = v71;
    swift_bridgeObjectRelease(v68);

    aBlock = (void **)v70;
    v140 = v72;
    v73._object = (void *)0x8000000100086430;
    v73._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v73);
    v74 = v140;
    v75 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v74);
    objc_msgSend(v67, "logInfo:", v75);

    return;
  }
  v132 = (void (*)(uint64_t, char *, uint64_t))v24;
  v24(v138, v12, v26);
  v27 = (void *)objc_opt_self(MTSessionUtilities);
  aBlock = 0;
  v140 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v28 = objc_msgSend(v2, "description");
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v135 = v14;
  v31 = v30;

  v32._countAndFlagsBits = v29;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 0xD00000000000002ELL;
  v33._object = (void *)0x8000000100086450;
  String.append(_:)(v33);
  v34 = objc_msgSend(v2, "view");
  v145 = v34;
  v35 = sub_10000A58C(&qword_1000AFFA0);
  _print_unlocked<A, B>(_:_:)(&v145, &aBlock, v35, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

  v36._countAndFlagsBits = 0x696C69617274202CLL;
  v36._object = (void *)0xEC000000203A676ELL;
  String.append(_:)(v36);
  v134 = *(id *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
  v145 = v134;
  v37 = sub_10000A58C(&qword_1000AFFA8);
  _print_unlocked<A, B>(_:_:)(&v145, &aBlock, v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v38 = v140;
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  v133 = v27;
  v40 = v27;
  v41 = v136;
  objc_msgSend(v40, "logInfo:", v39);

  v42 = v135;
  v43 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
  v43(v9, v138, v41);
  v44 = &v9[*(int *)(v4 + 20)];
  *(_QWORD *)v44 = sub_1000083B0;
  *((_QWORD *)v44 + 1) = 0;
  v44[16] = 0;
  v45 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000AFFB0));
  v46 = &v45[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v45) + 16)];
  *((_QWORD *)v46 + 1) = 0;
  swift_unknownObjectWeakInit(v46, 0);
  sub_100026548((uint64_t)v9, (uint64_t)v7);
  v47 = UIHostingController.init(rootView:)(v7);
  sub_10000E844((uint64_t)v9, type metadata accessor for AlarmSnoozeCompressedTrailingView);
  v48 = *(void **)&v2[v18];
  *(_QWORD *)&v2[v18] = v47;

  v49 = *(void **)&v2[v18];
  if (!v49)
  {
    __break(1u);
    goto LABEL_35;
  }
  v50 = objc_msgSend(v49, "view");
  if (!v50)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v51 = v50;
  objc_msgSend(v50, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  if (!*(_QWORD *)&v2[v18])
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  objc_msgSend(v2, "addChildViewController:");
  v52 = *(void **)&v2[v18];
  if (!v52)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  objc_msgSend(v52, "didMoveToParentViewController:", v2);
  v131 = v43;
  if (v134)
  {
    v53 = *(void **)&v2[v18];
    if (!v53)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v54 = objc_msgSend(v53, "view");
    if (!v54)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v55 = v54;
    v56 = v134;
    objc_msgSend(v134, "addSubview:", v54);

    v57 = v137;
    Date.init()(v58);
    v59 = Date.timeIntervalSince(_:)(v57);
    v60 = v57;
    v41 = v136;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v60, v136);
    sub_100051A6C(v59);
    v62 = v61;
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v62);
    objc_msgSend(v56, "setAccessibilityLabel:", v63);

    v64 = v56;
    v65 = objc_msgSend(v2, "view");
    if (!v65)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v66 = v65;
    objc_msgSend(v65, "addSubview:", v64);

  }
  else
  {
    aBlock = 0;
    v140 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    v76 = v140;
    v77 = objc_msgSend(v2, "description");
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v80 = v79;
    swift_bridgeObjectRelease(v76);

    aBlock = (void **)v78;
    v140 = v80;
    v81._countAndFlagsBits = 0xD000000000000017;
    v81._object = (void *)0x8000000100086480;
    String.append(_:)(v81);
    v82 = v140;
    v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v82);
    objc_msgSend(v133, "logInfo:", v66);
  }

  v83 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000AFFB8));
  v84 = &v83[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v83) + 16)];
  *((_QWORD *)v84 + 1) = 0;
  v85 = swift_unknownObjectWeakInit(v84, 0);
  v86 = UIHostingController.init(rootView:)(v85);
  v87 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost;
  v88 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost];
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_compressedSnoozeLeadingHost] = v86;

  v89 = *(void **)&v2[v87];
  if (!v89)
    goto LABEL_38;
  v90 = objc_msgSend(v89, "view");
  if (!v90)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v91 = v90;
  objc_msgSend(v90, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  if (!*(_QWORD *)&v2[v87])
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  objc_msgSend(v2, "addChildViewController:");
  v92 = *(void **)&v2[v87];
  if (!v92)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  objc_msgSend(v92, "didMoveToParentViewController:", v2);
  v93 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_leadingView];
  if (v93)
  {
    v94 = *(void **)&v2[v87];
    if (v94)
    {
      v95 = objc_msgSend(v94, "view");
      v96 = v135;
      if (v95)
      {
        v97 = v95;
        objc_msgSend(v93, "addSubview:", v95);

        v98 = v137;
        Date.init()(v99);
        v100 = Date.timeIntervalSince(_:)(v98);
        v101 = v98;
        v41 = v136;
        (*(void (**)(char *, uint64_t))(v96 + 8))(v101, v136);
        sub_100051A6C(v100);
        v103 = v102;
        v104 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v103);
        objc_msgSend(v93, "setAccessibilityLabel:", v104);

        v105 = v93;
        v106 = objc_msgSend(v2, "view");
        if (v106)
        {
          v107 = v106;
          objc_msgSend(v106, "addSubview:", v105);

          goto LABEL_28;
        }
LABEL_47:
        __break(1u);
        return;
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  aBlock = 0;
  v140 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v108 = v140;
  v109 = objc_msgSend(v2, "description");
  v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
  v112 = v111;
  swift_bridgeObjectRelease(v108);

  aBlock = (void **)v110;
  v140 = v112;
  v113._countAndFlagsBits = 0xD000000000000016;
  v113._object = (void *)0x80000001000864A0;
  String.append(_:)(v113);
  v114 = v140;
  v107 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v114);
  objc_msgSend(v133, "logInfo:", v107);
LABEL_28:
  v115 = v135;

  if (UIAccessibilityIsVoiceOverRunning()
    || UIAccessibilityIsSwitchControlRunning()
    || _AXSCommandAndControlEnabled())
  {
    v116 = objc_msgSend(v2, "systemApertureElementContext");
    objc_msgSend(v116, "setElementNeedsUpdate");
    swift_unknownObjectRelease(v116);
    v117 = OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer;
    if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_voiceOverTimer])
    {
      v118 = (void *)objc_opt_self(NSTimer);
      v119 = v137;
      v131(v137, v138, v136);
      v120 = *(unsigned __int8 *)(v115 + 80);
      v121 = (v120 + 24) & ~v120;
      v122 = swift_allocObject(&unk_10009F220, v121 + v15, v120 | 7);
      *(_QWORD *)(v122 + 16) = v2;
      v123 = v119;
      v41 = v136;
      v132(v122 + v121, v123, v136);
      v143 = sub_100026600;
      v144 = v122;
      aBlock = _NSConcreteStackBlock;
      v140 = 1107296256;
      v141 = sub_10004A93C;
      v142 = &unk_10009F238;
      v124 = _Block_copy(&aBlock);
      v125 = v144;
      v126 = v2;
      swift_release(v125);
      v127 = objc_msgSend(v118, "scheduledTimerWithTimeInterval:repeats:block:", 1, v124, 1.0);
      v128 = v124;
      v115 = v135;
      _Block_release(v128);
      v129 = *(void **)&v2[v117];
      *(_QWORD *)&v2[v117] = v127;

    }
  }
  (*(void (**)(char *, uint64_t))(v115 + 8))(v138, v41);
}

uint64_t sub_100026258(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v15;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_trailingView];
  if (v8)
  {
    Date.init()(v5);
    v9 = Date.timeIntervalSince(_:)(v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100051A6C(v9);
    v11 = v10;
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    objc_msgSend(v8, "setAccessibilityLabel:", v12);

  }
  v13 = objc_msgSend(a2, "systemApertureElementContext");
  objc_msgSend(v13, "setElementNeedsUpdate");
  return swift_unknownObjectRelease(v13);
}

void sub_100026390(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[36];

  v4[0] = &unk_100081F60;
  v4[1] = &unk_100081F78;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = &unk_100081F90;
  v4[5] = &unk_100081F90;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100026484(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    v4[11] = &unk_100081F78;
    v4[12] = &unk_100081F60;
    v4[13] = &unk_100081F90;
    v4[14] = &unk_100081FA8;
    v4[15] = &unk_100081F90;
    v4[16] = &unk_100081F90;
    v4[17] = &unk_100081F90;
    v4[18] = &unk_100081F90;
    v4[19] = &unk_100081F90;
    v4[20] = &unk_100081F90;
    v4[21] = &unk_100081F90;
    v4[22] = &unk_100081F90;
    v4[23] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[24] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[25] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[26] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[27] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[28] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[29] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[30] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[31] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[32] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[33] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[34] = &unk_100081F90;
    v4[35] = &unk_100081F90;
    swift_updateClassMetadata2(a1, 256, 36, v4, a1 + 80);
  }
}

void sub_100026484(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B2C50)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B2C50);
  }
}

uint64_t sub_1000264E0()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC10ClockAngel30AlarmApertureElementController_observerId);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10002651C()
{
  return sub_1000073C0((unint64_t *)&unk_1000AFF90, type metadata accessor for AlarmApertureElementController, (uint64_t)&unk_100081FC8);
}

uint64_t sub_100026548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AlarmSnoozeCompressedTrailingView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002658C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100026600(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for Date(0);
  return sub_100026258(a1, *(char **)(v1 + 16));
}

uint64_t sub_100026640(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100026650(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100026658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AlarmSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10002669C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_1000266D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100026704()
{
  uint64_t v0;

  sub_1000253D8(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_10002670C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100026748(uint64_t a1)
{
  destroy for AlarmSnoozeCountdownControlView();
  return a1;
}

uint64_t sub_10002677C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000267A0(uint64_t a1)
{
  uint64_t v1;

  sub_100024158(a1, *(char **)(v1 + 16));
}

uint64_t sub_1000267A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000267F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_100026890(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  double result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE v38[24];

  v3 = type metadata accessor for CurrentLocationResult(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v33 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B0310);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000B0318);
  v10 = __chkstk_darwin(v9);
  v35 = (uint64_t)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v34 = (uint64_t)&v32 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v32 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v32 - v17;
  v19 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess(v19, v38, 0, 0);
  v36 = a1;
  sub_10000E800(a1, (uint64_t)v18, type metadata accessor for CurrentLocationResult);
  v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56);
  v20(v18, 0, 1, v3);
  v21 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_100011440(v19, (uint64_t)v8, &qword_1000B0318);
  sub_100011440((uint64_t)v18, v21, &qword_1000B0318);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v22((uint64_t)v8, 1, v3) == 1)
  {
    sub_100011484((uint64_t)v18, &qword_1000B0318);
    if (v22(v21, 1, v3) == 1)
    {
      sub_100011484((uint64_t)v8, &qword_1000B0318);
      return result;
    }
  }
  else
  {
    sub_100011440((uint64_t)v8, (uint64_t)v16, &qword_1000B0318);
    if (v22(v21, 1, v3) != 1)
    {
      v24 = v33;
      sub_10002B89C(v21, v33, type metadata accessor for CurrentLocationResult);
      v25 = sub_10002AB14((uint64_t)v16, v24);
      sub_10000E844(v24, type metadata accessor for CurrentLocationResult);
      sub_100011484((uint64_t)v18, &qword_1000B0318);
      sub_10000E844((uint64_t)v16, type metadata accessor for CurrentLocationResult);
      sub_100011484((uint64_t)v8, &qword_1000B0318);
      if (v25)
        return result;
      goto LABEL_8;
    }
    sub_100011484((uint64_t)v18, &qword_1000B0318);
    sub_10000E844((uint64_t)v16, type metadata accessor for CurrentLocationResult);
  }
  sub_100011484((uint64_t)v8, &qword_1000B0310);
LABEL_8:
  v26 = v34;
  sub_10000E800(v36, v34, type metadata accessor for CurrentLocationResult);
  v20((char *)v26, 0, 1, v3);
  v27 = v26;
  v28 = v35;
  sub_1000112A4(v27, v35, &qword_1000B0318);
  swift_beginAccess(v19, v37, 33, 0);
  sub_10001E928(v28, v19, &qword_1000B0318);
  swift_endAccess(v37);
  v29 = (uint64_t *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112));
  swift_beginAccess(v29, v37, 0, 0);
  v30 = *v29;
  swift_retain(v1);
  v31 = swift_bridgeObjectRetain(v30);
  sub_10002AEA8(v31, v1);
  swift_bridgeObjectRelease(v30);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

void sub_100026C40(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[24];
  char v63[32];

  v3 = sub_10000A58C(&qword_1000B0370);
  v4 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  v56 = v4;
  __chkstk_darwin(v3);
  v51 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = (char *)sub_10000A58C(&qword_1000B0378);
  __chkstk_darwin(v53);
  v54 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000B0380);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v52 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v57 = (uint64_t)&v50 - v11;
  v12 = sub_10000A58C(&qword_1000B0388);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000A58C(&qword_1000B0390);
  v16 = __chkstk_darwin(v15);
  v60 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v59 = (uint64_t)&v50 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v50 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v50 - v23;
  v25 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v58 = v1;
  v26 = v1 + v25;
  swift_beginAccess(v1 + v25, v63, 0, 0);
  v61 = a1;
  sub_100011440(a1, (uint64_t)v24, &qword_1000B0380);
  v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
  v27(v24, 0, 1, v7);
  v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_100011440(v26, (uint64_t)v14, &qword_1000B0390);
  sub_100011440((uint64_t)v24, v28, &qword_1000B0390);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v29((uint64_t)v14, 1, v7) == 1)
  {
    sub_100011484((uint64_t)v24, &qword_1000B0390);
    if (v29(v28, 1, v7) == 1)
    {
      v30 = (uint64_t)v14;
LABEL_10:
      sub_100011484(v30, &qword_1000B0390);
      return;
    }
    v31 = &qword_1000B0388;
    goto LABEL_15;
  }
  sub_100011440((uint64_t)v14, (uint64_t)v22, &qword_1000B0390);
  if (v29(v28, 1, v7) == 1)
  {
    v31 = &qword_1000B0388;
LABEL_14:
    sub_100011484((uint64_t)v24, &qword_1000B0390);
    sub_100011484((uint64_t)v22, &qword_1000B0380);
LABEL_15:
    sub_100011484((uint64_t)v14, v31);
LABEL_16:
    v38 = v59;
    sub_100011440(v61, v59, &qword_1000B0380);
    v27((char *)v38, 0, 1, v7);
    v39 = v38;
    v40 = v60;
    sub_1000112A4(v39, v60, &qword_1000B0390);
    swift_beginAccess(v26, v62, 33, 0);
    sub_10001E928(v40, v26, &qword_1000B0390);
    swift_endAccess(v62);
    v41 = v58;
    v42 = (uint64_t *)(v58 + *(_QWORD *)(*(_QWORD *)v58 + 112));
    swift_beginAccess(v42, v62, 0, 0);
    v43 = *v42;
    swift_retain(v41);
    v44 = swift_bridgeObjectRetain(v43);
    sub_10002B298(v44, v41);
    swift_bridgeObjectRelease(v43);
    swift_release(v41);
    return;
  }
  v50 = v26;
  v32 = v57;
  sub_1000112A4(v28, v57, &qword_1000B0380);
  v33 = v54;
  v34 = v54 + *((int *)v53 + 12);
  v53 = v22;
  sub_100011440((uint64_t)v22, v54, &qword_1000B0380);
  sub_100011440(v32, v34, &qword_1000B0380);
  v35 = v55;
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  if (v36(v33, 1, v55) == 1)
  {
    if (v36(v34, 1, v35) == 1)
    {
      sub_100011484(v33, &qword_1000B0380);
      sub_100011484(v57, &qword_1000B0380);
      sub_100011484((uint64_t)v24, &qword_1000B0390);
      sub_100011484((uint64_t)v53, &qword_1000B0380);
      v30 = (uint64_t)v14;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  v37 = v52;
  sub_100011440(v33, v52, &qword_1000B0380);
  if (v36(v34, 1, v35) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v37, v35);
LABEL_13:
    sub_100011484(v33, &qword_1000B0378);
    sub_100011484(v57, &qword_1000B0380);
    v31 = &qword_1000B0390;
    v22 = v53;
    v26 = v50;
    goto LABEL_14;
  }
  v45 = v56;
  v46 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v51, v34, v35);
  v47 = sub_100011680(&qword_1000B0398, &qword_1000B0370, (uint64_t)&protocol conformance descriptor for Measurement<A>);
  v48 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v46, v35, v47);
  v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  v49(v46, v35);
  v49((char *)v37, v35);
  sub_100011484(v33, &qword_1000B0380);
  sub_100011484(v57, &qword_1000B0380);
  sub_100011484((uint64_t)v24, &qword_1000B0390);
  sub_100011484((uint64_t)v53, &qword_1000B0380);
  sub_100011484((uint64_t)v14, &qword_1000B0390);
  v26 = v50;
  if ((v48 & 1) == 0)
    goto LABEL_16;
}

uint64_t sub_100027258(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  sub_100015494(0, &qword_1000B02E8, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*a1, *a2) & 1) != 0)
    return sub_10002A8E0((uint64_t)a1 + *(int *)(a3 + 20), (uint64_t)a2 + *(int *)(a3 + 20));
  else
    return 0;
}

id sub_1000272D4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LocationDataProvider(0)), "init");
  qword_1000B6ED0 = (uint64_t)result;
  return result;
}

void sub_100027304(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];

  v33 = a1;
  v38 = sub_10000A58C(&qword_1000B03B0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000A58C(&qword_1000B03B8);
  v5 = __chkstk_darwin(v4);
  v39 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v35 = (char *)&v31 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - v9;
  v11 = sub_10000A58C(&qword_1000B0318);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream];
  v18 = (os_unfair_lock_s *)(*(_QWORD *)(v17 + *(_QWORD *)(*(_QWORD *)v17 + 104)) + 16);
  swift_beginAccess(v18, v40, 33, 0);
  swift_retain(v17);
  v19 = v1;
  os_unfair_lock_lock(v18);
  v20 = *(_QWORD *)(*(_QWORD *)v17 + 120);
  v21 = *(_BYTE *)(v17 + v20);
  if ((v21 & 1) == 0)
    *(_BYTE *)(v17 + v20) = 1;
  os_unfair_lock_unlock(v18);
  swift_endAccess(v40);
  v22 = type metadata accessor for CurrentLocationResult(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v16, 1, 1, v22);
  if ((v21 & 1) == 0)
  {
    sub_1000276C8((uint64_t)v14);
    v23(v14, 0, 1, v22);
    sub_10001E928((uint64_t)v14, (uint64_t)v16, &qword_1000B0318);
  }
  v37 = v19;
  v24 = sub_10000A58C((uint64_t *)&unk_1000B03C0);
  v34 = *(_QWORD *)(v24 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v25(v10, 1, 1, v24);
  swift_beginAccess(v18, v40, 33, 0);
  os_unfair_lock_lock(v18);
  v26 = swift_endAccess(v40);
  __chkstk_darwin(v26);
  *(&v31 - 2) = v17;
  *(&v31 - 1) = v27;
  v32 = v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v3, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v38);
  v28 = (uint64_t)v35;
  AsyncStream.init(_:bufferingPolicy:_:)(v22, v3, sub_10002B8E0, &v31 - 4, v22);
  v25((char *)v28, 0, 1, v24);
  sub_10001E928(v28, (uint64_t)v10, &qword_1000B03B8);
  swift_beginAccess(v18, v40, 33, 0);
  os_unfair_lock_unlock(v18);
  swift_endAccess(v40);
  v29 = v39;
  v30 = v34;
  sub_100011440((uint64_t)v10, v39, &qword_1000B03B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v29, 1, v24) == 1)
  {

    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v33, v29, v24);
    sub_100011484((uint64_t)v10, &qword_1000B03B8);
    sub_100011484(v32, &qword_1000B0318);
    swift_release(v17);

  }
}

uint64_t sub_1000276C8@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[2];
  uint64_t v19;
  void *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v19 = a1;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue];
  v10 = swift_allocObject(&unk_10009F388, 24, 7);
  *(_QWORD *)(v10 + 16) = v1;
  aBlock[4] = sub_10002B90C;
  v22 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5FC;
  aBlock[3] = &unk_10009F3A0;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  v20 = &_swiftEmptyArrayStorage;
  v12 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v14 = sub_100011680((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v13, v14, v2, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release(v22);
  v15 = type metadata accessor for CurrentLocation(0);
  v16 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v19, 1, 1, v15);
  result = type metadata accessor for CurrentLocationResult(0);
  *(_BYTE *)(v16 + *(int *)(result + 20)) = 1;
  return result;
}

id sub_1000278F4()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider____lazy_storage___locationManager;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider____lazy_storage___locationManager];
  v3 = v2;
  if (v2 == (void *)1)
  {
    v3 = sub_100027960(v0);
    v4 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v3;
    v5 = v3;
    sub_10002AE88(v4);
  }
  sub_10002AE98(v2);
  return v3;
}

id sub_100027960(char *a1)
{
  void *v2;
  id v3;
  id v4;
  char *v5;
  NSString v6;
  id v7;
  uint64_t v8;
  double v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  NSString v13;
  uint64_t v15;

  v2 = *(void **)&a1[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue];
  v3 = objc_allocWithZone((Class)CLLocationManager);
  v4 = v2;
  v5 = a1;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v3, "initWithEffectiveBundleIdentifier:delegate:onQueue:", v6, v5, v4);

  if (v7)
  {
    swift_beginAccess(&v5[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_distanceFilter], &v15, 32, 0);
    v8 = sub_10000A58C(&qword_1000B0128);
    v9 = Measurement.value.getter(v8);
    swift_endAccess(&v15);
    objc_msgSend(v7, "setDistanceFilter:", v9);
    objc_msgSend(v7, "setDesiredAccuracy:", kCLLocationAccuracyKilometer);
  }
  else
  {
    v10 = (void *)objc_opt_self(MTSessionUtilities);
    v15 = 0;
    _StringGuts.grow(_:)(66);
    v11._countAndFlagsBits = 0xD000000000000040;
    v11._object = (void *)0x8000000100086B20;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0xD000000000000011;
    v12._object = (void *)0x80000001000855C0;
    String.append(_:)(v12);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v10, "logInfo:", v13);

  }
  return v7;
}

id sub_100027B2C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  objc_class *ObjectType;
  objc_super v45;
  void *v46;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000B0130);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating;
  v14 = sub_10000A58C(&qword_1000B0338);
  v15 = swift_allocObject(v14, 25, 7);
  v16 = type metadata accessor for CPUnfairLock();
  v41 = v16;
  v17 = swift_allocObject(v16, 20, 7);
  *(_DWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v15 + 16) = v17;
  *(_BYTE *)(v15 + 24) = 0;
  *(_QWORD *)&v1[v13] = v15;
  v18 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__location;
  v19 = type metadata accessor for CurrentLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  v20 = sub_10000A58C((uint64_t *)&unk_1000B0340);
  v21 = (_QWORD *)swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = swift_allocObject(v16, 20, 7);
  *(_DWORD *)(v22 + 16) = 0;
  v21[2] = v22;
  sub_1000112A4((uint64_t)v12, (uint64_t)v21 + *(_QWORD *)(*v21 + 96), &qword_1000B0130);
  *(_QWORD *)&v1[v18] = v21;
  v23 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue;
  sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
  v24 = v1;
  static DispatchQoS.userInitiated.getter();
  v25 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v42, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  v46 = &_swiftEmptyArrayStorage;
  v26 = sub_1000073C0((unint64_t *)&qword_1000B0350, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v27 = sub_10000A58C(&qword_1000B0358);
  v28 = sub_100011680((unint64_t *)&qword_1000B0360, &qword_1000B0358, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v27, v28, v2, v26);
  *(_QWORD *)&v1[v23] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x8000000100086C30, v9, v29, v25, 0);
  v30 = OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream;
  v31 = sub_10000A58C(&qword_1000B0368);
  v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v33 = v32 + *(_QWORD *)(*(_QWORD *)v32 + 96);
  v34 = type metadata accessor for CurrentLocationResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = *(_QWORD *)(*(_QWORD *)v32 + 104);
  v36 = swift_allocObject(v41, 20, 7);
  *(_DWORD *)(v36 + 16) = 0;
  *(_QWORD *)(v32 + v35) = v36;
  *(_QWORD *)(v32 + *(_QWORD *)(*(_QWORD *)v32 + 112)) = &_swiftEmptyDictionarySingleton;
  *(_BYTE *)(v32 + *(_QWORD *)(*(_QWORD *)v32 + 120)) = 0;
  *(_QWORD *)&v24[v30] = v32;
  v37 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
  v38 = sub_100015494(0, &qword_1000B00C0, NSUnitLength_ptr);
  Measurement.init(value:unit:)(v37, v38, 500.0);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10ClockAngel20LocationDataProvider____lazy_storage___locationManager] = 1;

  v45.receiver = v24;
  v45.super_class = ObjectType;
  return objc_msgSendSuper2(&v45, "init");
}

id sub_100027F78()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100028040()
{
  return type metadata accessor for LocationDataProvider(0);
}

uint64_t type metadata accessor for LocationDataProvider(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B00A8, (uint64_t)&nominal type descriptor for LocationDataProvider);
}

void sub_10002805C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000280F0(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = "\b";
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_1000280F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B00B8)
  {
    v2 = sub_100015494(255, &qword_1000B00C0, NSUnitLength_ptr);
    v3 = type metadata accessor for Measurement(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B00B8);
  }
}

void sub_100028154()
{
  void *v0;
  NSString v1;
  id v2;

  if ((sub_1000281FC() & 1) != 0)
  {
    v0 = (void *)objc_opt_self(MTSessionUtilities);
    v1 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "logInfo:", v1);

    v2 = sub_1000278F4();
    objc_msgSend(v2, "startUpdatingLocation");

  }
}

uint64_t sub_1000281FC()
{
  id v0;
  void *v1;
  void *v2;
  NSString v3;
  id v4;
  void *v5;
  NSString v6;
  uint64_t v7;
  id v8;
  void *v9;
  NSString v10;
  NSString v11;
  void *v12;
  void *v13;

  v0 = sub_1000278F4();
  if (!v0)
    return 0;
  v1 = v0;
  switch(objc_msgSend(v0, "_authorizationStatus"))
  {
    case 0u:
      v2 = (void *)objc_opt_self(MTSessionUtilities);
      v3 = String._bridgeToObjectiveC()();
      objc_msgSend(v2, "logInfo:", v3);

      v4 = sub_1000278F4();
      if (!v4)
        goto LABEL_14;
      v5 = v4;
      v6 = String._bridgeToObjectiveC()();
      objc_msgSend(v2, "logInfo:", v6);

      goto LABEL_8;
    case 1u:
    case 2u:
      v12 = (void *)objc_opt_self(MTSessionUtilities);
      v11 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "logInfo:", v11);
      v7 = 0;
      goto LABEL_11;
    case 3u:
    case 4u:
      v13 = (void *)objc_opt_self(MTSessionUtilities);
      v11 = String._bridgeToObjectiveC()();
      objc_msgSend(v13, "logInfo:", v11);
      v7 = 1;
      goto LABEL_11;
    default:
      v8 = sub_1000278F4();
      if (v8)
      {
        v5 = v8;
        v9 = (void *)objc_opt_self(MTSessionUtilities);
        v10 = String._bridgeToObjectiveC()();
        objc_msgSend(v9, "logInfo:", v10);

LABEL_8:
        objc_msgSend(v5, "requestWhenInUseAuthorizationWithPrompt");
        v7 = 0;
        v11 = v1;
        v1 = v5;
LABEL_11:

      }
      else
      {
LABEL_14:
        v7 = 0;
      }

      break;
  }
  return v7;
}

uint64_t sub_100028470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t result;
  uint64_t v23;
  os_unfair_lock_s *v24;
  id v25;
  void *v26;
  NSString v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  _QWORD *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[24];
  _BYTE v58[24];

  v52 = (char *)a1;
  v55 = type metadata accessor for CurrentLocationResult(0);
  __chkstk_darwin(v55);
  v3 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for CurrentLocation(0);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v50 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000A58C(&qword_1000B02F8);
  __chkstk_darwin(v5);
  v7 = (void **)((char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10000A58C(&qword_1000B0308);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v49 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char **)((char *)&v49 - v13);
  __chkstk_darwin(v12);
  v53 = (void **)((char *)&v49 - v15);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char **)((char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating);
    v24 = (os_unfair_lock_s *)(*(_QWORD *)(v23 + 16) + 16);
    swift_beginAccess(v24, v58, 33, 0);
    swift_retain(v23);
    os_unfair_lock_lock(v24);
    swift_beginAccess(v23 + 24, v57, 1, 0);
    *(_BYTE *)(v23 + 24) = 0;
    os_unfair_lock_unlock(v24);
    swift_endAccess(v58);
    swift_release(v23);
    v51 = v1;
    v25 = sub_1000278F4();
    objc_msgSend(v25, "stopUpdatingLocation");

    sub_100011440((uint64_t)v52, (uint64_t)v7, &qword_1000B02F8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_100011484((uint64_t)v7, &qword_1000B02F8);
      v26 = (void *)objc_opt_self(MTSessionUtilities);
      v27 = String._bridgeToObjectiveC()();
      objc_msgSend(v26, "logInfo:", v27);

      v28 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v3, 1, 1, v56);
      v3[*(int *)(v55 + 20)] = 0;
      v29 = (os_unfair_lock_s *)(*(_QWORD *)(v28 + *(_QWORD *)(*(_QWORD *)v28 + 104)) + 16);
      swift_beginAccess(v29, v58, 33, 0);
      swift_retain(v28);
      os_unfair_lock_lock(v29);
      swift_endAccess(v58);
      sub_100026890((uint64_t)v3);
      swift_beginAccess(v29, v58, 33, 0);
      os_unfair_lock_unlock(v29);
      swift_endAccess(v58);
      swift_release(v28);
      return sub_10000E844((uint64_t)v3, type metadata accessor for CurrentLocationResult);
    }
    else
    {
      v30 = *(int *)(v8 + 48);
      v31 = (char *)v53 + v30;
      v32 = (char *)v7 + v30;
      v33 = *v7;
      *v53 = *v7;
      v34 = sub_10000A58C(&qword_1000B0128);
      v35 = *(_QWORD *)(v34 - 8);
      v52 = v3;
      v36 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v36(v31, v32, v34);
      v37 = (char *)v14 + *(int *)(v8 + 48);
      *v14 = v33;
      v38 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      v38(v37, v31, v34);
      v39 = v50;
      v40 = &v50[*(int *)(v56 + 20)];
      v41 = &v49[*(int *)(v8 + 48)];
      v38(v41, v31, v34);
      v36(v40, v41, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v40, 0, 1, v34);
      v42 = (uint64_t)v39;
      *v39 = v33;
      v43 = *(void (**)(char *, uint64_t))(v35 + 8);
      v44 = v33;
      v43(v37, v34);
      v45 = (uint64_t)v52;
      v46 = *(_QWORD *)(v51 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_stream);
      v47 = v42;
      sub_10000E800(v42, (uint64_t)v52, type metadata accessor for CurrentLocation);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v45, 0, 1, v56);
      *(_BYTE *)(v45 + *(int *)(v55 + 20)) = 2;
      v48 = (os_unfair_lock_s *)(*(_QWORD *)(v46 + *(_QWORD *)(*(_QWORD *)v46 + 104)) + 16);
      swift_beginAccess(v48, v58, 33, 0);
      swift_retain(v46);
      os_unfair_lock_lock(v48);
      swift_endAccess(v58);
      sub_100026890(v45);
      swift_beginAccess(v48, v58, 33, 0);
      os_unfair_lock_unlock(v48);
      swift_endAccess(v58);
      swift_release(v46);
      sub_10000E844(v45, type metadata accessor for CurrentLocationResult);
      sub_10000E844(v47, type metadata accessor for CurrentLocation);
      return sub_100011484((uint64_t)v53, &qword_1000B0308);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000289F8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  double v21;
  void *v22;
  uint64_t v23;
  id v24;
  Swift::String v25;
  void *object;
  unint64_t v27;
  NSString v28;
  uint64_t v29;
  id v30;
  double v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _BYTE v41[24];
  unint64_t v42;
  unint64_t v43;

  v3 = v2;
  v6 = sub_10000A58C(&qword_1000B02F8);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(void **)(v3 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating);
    v16 = (os_unfair_lock_s *)(*(_QWORD *)(v15 + 16) + 16);
    swift_beginAccess(v16, &v42, 33, 0);
    swift_retain(v15);
    os_unfair_lock_lock(v16);
    swift_beginAccess(v15 + 24, v41, 1, 0);
    *(_BYTE *)(v15 + 24) = 1;
    os_unfair_lock_unlock(v16);
    swift_endAccess(&v42);
    swift_release(v15);
    if (!((unint64_t)a2 >> 62))
    {
      v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a2);
      if (v17)
        goto LABEL_4;
LABEL_18:
      swift_bridgeObjectRelease(a2);
      v36 = (void *)objc_opt_self(MTSessionUtilities);
      v37 = String._bridgeToObjectiveC()();
      objc_msgSend(v36, "logInfo:", v37);

      v38 = sub_10000A58C(&qword_1000B0308);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v8, 1, 1, v38);
      sub_100028470((uint64_t)v8);
LABEL_19:
      sub_100011484((uint64_t)v8, &qword_1000B02F8);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  if (a2 < 0)
    v35 = a2;
  else
    v35 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v17 = _CocoaArrayWrapper.endIndex.getter(v35);
  if (!v17)
    goto LABEL_18;
LABEL_4:
  v18 = v17 - 1;
  if (__OFSUB__(v17, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_21:
    v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a2);
LABEL_9:
    v20 = v19;
    swift_bridgeObjectRelease(a2);
    if ((objc_msgSend(a1, "_limitsPrecision") & 1) == 0)
    {
      objc_msgSend(v20, "horizontalAccuracy");
      if (v21 > 1500.0)
      {

        return;
      }
    }
    v22 = (void *)objc_opt_self(MTSessionUtilities);
    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(v43);
    v42 = 0xD000000000000025;
    v43 = 0x8000000100086BD0;
    v40 = v20;
    v23 = sub_100015494(0, &qword_1000B0330, CLLocation_ptr);
    v24 = v20;
    v25._countAndFlagsBits = String.init<A>(reflecting:)(&v40, v23);
    object = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(object);
    v27 = v43;
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    objc_msgSend(v22, "logInfo:", v28);

    v29 = sub_10000A58C(&qword_1000B0308);
    *v8 = v24;
    v30 = v24;
    objc_msgSend(v30, "horizontalAccuracy");
    v32 = v31;
    v33 = objc_msgSend((id)objc_opt_self(NSUnitLength), "meters");
    v34 = sub_100015494(0, &qword_1000B00C0, NSUnitLength_ptr);
    Measurement.init(value:unit:)(v33, v34, v32);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v8, 0, 1, v29);
    sub_100028470((uint64_t)v8);

    goto LABEL_19;
  }
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v18 < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v19 = *(id *)(a2 + 8 * v18 + 32);
    goto LABEL_9;
  }
  __break(1u);
}

void sub_100028F28(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  void *v9;
  NSString v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  char v13;
  double v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = (void *)objc_opt_self(MTSessionUtilities);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "logInfo:", v10);

    if ((sub_1000281FC() & 1) != 0)
    {
      v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider__isLocationUpdating);
      v12 = (os_unfair_lock_s *)(*(_QWORD *)(v11 + 16) + 16);
      swift_beginAccess(v12, v16, 33, 0);
      swift_retain(v11);
      os_unfair_lock_lock(v12);
      swift_beginAccess(v11 + 24, v15, 0, 0);
      v13 = *(_BYTE *)(v11 + 24);
      os_unfair_lock_unlock(v12);
      swift_endAccess(v16);
      *(_QWORD *)&v14 = swift_release(v11).n128_u64[0];
      if ((v13 & 1) == 0)
        objc_msgSend(a1, "startUpdatingLocation", v14);
    }
  }
  else
  {
    __break(1u);
  }
}

char *sub_100029108(char *a1, char **a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for CurrentLocation(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10000A58C(&qword_1000B0130);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = *a2;
      *(_QWORD *)a1 = *a2;
      v12 = *(int *)(v7 + 20);
      v13 = &a1[v12];
      v14 = (char *)a2 + v12;
      v15 = v11;
      v16 = sub_10000A58C(&qword_1000B0128);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      {
        v18 = type metadata accessor for LocationAccuracy(0);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v14, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    a1[*(int *)(a3 + 20)] = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t type metadata accessor for CurrentLocation(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B02A8, (uint64_t)&nominal type descriptor for CurrentLocation);
}

uint64_t type metadata accessor for LocationAccuracy(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B0240, (uint64_t)&nominal type descriptor for LocationAccuracy);
}

uint64_t sub_1000292A4(id *a1)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for CurrentLocation(0);
  result = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {

    v4 = (char *)a1 + *(int *)(v2 + 20);
    v5 = sub_10000A58C(&qword_1000B0128);
    v6 = *(_QWORD *)(v5 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

void **sub_100029348(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for CurrentLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000A58C(&qword_1000B0130);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    v10 = *(int *)(v6 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = v9;
    v14 = sub_10000A58C(&qword_1000B0128);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
    {
      v16 = type metadata accessor for LocationAccuracy(0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v11, v12, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
    }
    (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_100029490(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void **, uint64_t, uint64_t);
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void **v20;
  void **v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;

  v6 = type metadata accessor for CurrentLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v22 = *a2;
      v23 = *a1;
      *a1 = *a2;
      v24 = v22;

      v25 = *(int *)(v6 + 20);
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = sub_10000A58C(&qword_1000B0128);
      v29 = *(_QWORD *)(v28 - 8);
      v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
      v31 = v30(v26, 1, v28);
      v32 = v30(v27, 1, v28);
      if (v31)
      {
        if (!v32)
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v32)
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
          goto LABEL_14;
        }
        (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for LocationAccuracy(0) - 8) + 64);
      v20 = (void **)v26;
      v21 = (void **)v27;
      goto LABEL_8;
    }
    sub_10000E844((uint64_t)a1, type metadata accessor for CurrentLocation);
LABEL_7:
    v19 = *(_QWORD *)(*(_QWORD *)(sub_10000A58C(&qword_1000B0130) - 8) + 64);
    v20 = a1;
    v21 = a2;
LABEL_8:
    memcpy(v20, v21, v19);
    goto LABEL_14;
  }
  if (v10)
    goto LABEL_7;
  v11 = *a2;
  *a1 = *a2;
  v12 = *(int *)(v6 + 20);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = v11;
  v16 = sub_10000A58C(&qword_1000B0128);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
  {
    v18 = type metadata accessor for LocationAccuracy(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v14, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_1000296DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for CurrentLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000A58C(&qword_1000B0130);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = *(int *)(v6 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_10000A58C(&qword_1000B0128);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = type metadata accessor for LocationAccuracy(0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void **sub_100029820(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void **, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void **v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;

  v6 = type metadata accessor for CurrentLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void **, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v20 = *a1;
      *a1 = *a2;

      v21 = *(int *)(v6 + 20);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = sub_10000A58C(&qword_1000B0128);
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
      v27 = v26(v22, 1, v24);
      v28 = v26(v23, 1, v24);
      if (v27)
      {
        if (!v28)
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v28)
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
          goto LABEL_14;
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for LocationAccuracy(0) - 8) + 64);
      v18 = (void **)v22;
      v19 = v23;
      goto LABEL_8;
    }
    sub_10000E844((uint64_t)a1, type metadata accessor for CurrentLocation);
LABEL_7:
    v17 = *(_QWORD *)(*(_QWORD *)(sub_10000A58C(&qword_1000B0130) - 8) + 64);
    v18 = a1;
    v19 = a2;
LABEL_8:
    memcpy(v18, v19, v17);
    goto LABEL_14;
  }
  if (v10)
    goto LABEL_7;
  *a1 = *a2;
  v11 = *(int *)(v6 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_10000A58C(&qword_1000B0128);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = type metadata accessor for LocationAccuracy(0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100029A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100029A70);
}

uint64_t sub_100029A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_10000A58C(&qword_1000B0130);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 5)
    return v9 - 4;
  else
    return 0;
}

uint64_t sub_100029AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100029AF8);
}

uint64_t sub_100029AF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10000A58C(&qword_1000B0130);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  return result;
}

uint64_t type metadata accessor for CurrentLocationResult(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B0190, (uint64_t)&nominal type descriptor for CurrentLocationResult);
}

void sub_100029B88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100029BF8(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100082098;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_100029BF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B01A0)
  {
    v2 = type metadata accessor for CurrentLocation(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B01A0);
  }
}

uint64_t *sub_100029C4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = sub_10000A58C(&qword_1000B0128);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100029D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_10000A58C(&qword_1000B0128);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_100029D84(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10000A58C(&qword_1000B0128);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100029E2C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_10000A58C(&qword_1000B0128);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_100029F20(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10000A58C(&qword_1000B0128);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100029FC8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_10000A58C(&qword_1000B0128);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10002A0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002A0C8);
}

uint64_t sub_10002A0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_10000A58C(&qword_1000B0128);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_10002A118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002A124);
}

uint64_t sub_10002A124(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_10000A58C(&qword_1000B0128);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_10002A178(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000A58C(&qword_1000B0128);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_10002A1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B0128);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

void sub_10002A1F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  sub_1000280F0(319);
  if (v3 <= 0x3F)
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(v2 - 8) + 64, 1);
}

void **sub_10002A24C(void **a1, void **a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = (char *)*a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (void **)&v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = v5;
    v10 = sub_10000A58C(&qword_1000B0128);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      v12 = type metadata accessor for LocationAccuracy(0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v7, v8, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
  }
  return a1;
}

uint64_t sub_10002A330(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_10000A58C(&qword_1000B0128);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

void **sub_10002A3B0(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = v4;
  v9 = sub_10000A58C(&qword_1000B0128);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    v11 = type metadata accessor for LocationAccuracy(0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v7, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  }
  return a1;
}

void **sub_10002A470(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_10000A58C(&qword_1000B0128);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for LocationAccuracy(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

_QWORD *sub_10002A58C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_10000A58C(&qword_1000B0128);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = type metadata accessor for LocationAccuracy(0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void **sub_10002A648(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_10000A58C(&qword_1000B0128);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = type metadata accessor for LocationAccuracy(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10002A760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002A76C);
}

uint64_t sub_10002A76C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for LocationAccuracy(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10002A7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002A7F4);
}

char *sub_10002A7F4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for LocationAccuracy(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10002A868(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for LocationAccuracy(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10002A8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = sub_10000A58C(&qword_1000B0128);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocationAccuracy(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000A58C(&qword_1000B02F0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10000E800(a1, (uint64_t)v14, type metadata accessor for LocationAccuracy);
  sub_10000E800(a2, v15, type metadata accessor for LocationAccuracy);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v14, 1, v4) != 1)
  {
    sub_10000E800((uint64_t)v14, (uint64_t)v10, type metadata accessor for LocationAccuracy);
    if (v16(v15, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      v18 = sub_100015494(0, &qword_1000B00C0, NSUnitLength_ptr);
      v17 = static Measurement.== infix<A, B>(_:_:)(v10, v7, v18, v18, v18);
      v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v7, v4);
      v19(v10, v4);
      sub_10000E844((uint64_t)v14, type metadata accessor for LocationAccuracy);
      return v17 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v16(v15, 1, v4) != 1)
  {
LABEL_6:
    sub_100011484((uint64_t)v14, &qword_1000B02F0);
    v17 = 0;
    return v17 & 1;
  }
  sub_10000E844((uint64_t)v14, type metadata accessor for LocationAccuracy);
  v17 = 1;
  return v17 & 1;
}

BOOL sub_10002AB14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v4 = type metadata accessor for CurrentLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10000A58C(&qword_1000B02E0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000A58C(&qword_1000B0130);
  v12 = __chkstk_darwin(v11);
  v30 = (uint64_t *)((char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v27 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v27 - v17;
  v28 = a1;
  sub_100011440(a1, (uint64_t)&v27 - v17, &qword_1000B0130);
  v29 = a2;
  sub_100011440(a2, (uint64_t)v16, &qword_1000B0130);
  v19 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100011440((uint64_t)v18, (uint64_t)v10, &qword_1000B0130);
  sub_100011440((uint64_t)v16, v19, &qword_1000B0130);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v10, 1, v4) == 1)
  {
    sub_100011484((uint64_t)v16, &qword_1000B0130);
    sub_100011484((uint64_t)v18, &qword_1000B0130);
    if (v20(v19, 1, v4) == 1)
    {
      sub_100011484((uint64_t)v10, &qword_1000B0130);
LABEL_4:
      v21 = type metadata accessor for CurrentLocationResult(0);
      return *(unsigned __int8 *)(v28 + *(int *)(v21 + 20)) == *(unsigned __int8 *)(v29 + *(int *)(v21 + 20));
    }
    goto LABEL_7;
  }
  v23 = v30;
  sub_100011440((uint64_t)v10, (uint64_t)v30, &qword_1000B0130);
  if (v20(v19, 1, v4) == 1)
  {
    sub_100011484((uint64_t)v16, &qword_1000B0130);
    sub_100011484((uint64_t)v18, &qword_1000B0130);
    sub_10000E844((uint64_t)v23, type metadata accessor for CurrentLocation);
LABEL_7:
    v24 = &qword_1000B02E0;
    v25 = (uint64_t)v10;
LABEL_8:
    sub_100011484(v25, v24);
    return 0;
  }
  sub_10002B89C(v19, (uint64_t)v7, type metadata accessor for CurrentLocation);
  sub_100015494(0, &qword_1000B02E8, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(*v23, *v7) & 1) == 0)
  {
    sub_10000E844((uint64_t)v7, type metadata accessor for CurrentLocation);
    sub_100011484((uint64_t)v16, &qword_1000B0130);
    sub_100011484((uint64_t)v18, &qword_1000B0130);
    sub_10000E844((uint64_t)v23, type metadata accessor for CurrentLocation);
    v25 = (uint64_t)v10;
    v24 = &qword_1000B0130;
    goto LABEL_8;
  }
  v26 = sub_10002A8E0((uint64_t)v23 + *(int *)(v4 + 20), (uint64_t)v7 + *(int *)(v4 + 20));
  sub_10000E844((uint64_t)v7, type metadata accessor for CurrentLocation);
  sub_100011484((uint64_t)v16, &qword_1000B0130);
  sub_100011484((uint64_t)v18, &qword_1000B0130);
  sub_10000E844((uint64_t)v23, type metadata accessor for CurrentLocation);
  sub_100011484((uint64_t)v10, &qword_1000B0130);
  if ((v26 & 1) != 0)
    goto LABEL_4;
  return 0;
}

void sub_10002AE88(id a1)
{
  if (a1 != (id)1)

}

id sub_10002AE98(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

void sub_10002AEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[24];
  uint64_t v52;

  v4 = sub_10000A58C(&qword_1000B0320);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  __chkstk_darwin(v4);
  v43 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B0318);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CurrentLocationResult(0);
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  v10 = __chkstk_darwin(v9);
  v42 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v41 = (uint64_t)&v38 - v12;
  v13 = sub_10000A58C(&qword_1000B0328);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  v20 = *(_QWORD *)(a1 + 64);
  v46 = a1 + 64;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v24 = a2 + *(_QWORD *)(*(_QWORD *)a2 + 96);
  v52 = a1;
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(v24, v51, 0, 0);
  v25 = 0;
  v47 = (unint64_t)(v21 + 63) >> 6;
  v39 = v8;
  v40 = v24;
  while (1)
  {
    if (v23)
    {
      v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v27 = v26 | (v25 << 6);
      goto LABEL_24;
    }
    v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v47)
      goto LABEL_26;
    v29 = *(_QWORD *)(v46 + 8 * v28);
    ++v25;
    if (!v29)
    {
      v25 = v28 + 1;
      if (v28 + 1 >= v47)
        goto LABEL_26;
      v29 = *(_QWORD *)(v46 + 8 * v25);
      if (!v29)
      {
        v25 = v28 + 2;
        if (v28 + 2 >= v47)
          goto LABEL_26;
        v29 = *(_QWORD *)(v46 + 8 * v25);
        if (!v29)
        {
          v25 = v28 + 3;
          if (v28 + 3 >= v47)
            goto LABEL_26;
          v29 = *(_QWORD *)(v46 + 8 * v25);
          if (!v29)
            break;
        }
      }
    }
LABEL_23:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v19, *(_QWORD *)(v52 + 56) + *(_QWORD *)(v14 + 72) * v27, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v19, v13);
    sub_100011440(v24, (uint64_t)v8, &qword_1000B0318);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v8, 1, v50) == 1)
    {
      sub_100011484((uint64_t)v8, &qword_1000B0318);
    }
    else
    {
      v31 = (uint64_t)v8;
      v32 = v41;
      v48 = v25;
      sub_10002B89C(v31, v41, type metadata accessor for CurrentLocationResult);
      v33 = v19;
      v34 = v42;
      sub_10000E800(v32, v42, type metadata accessor for CurrentLocationResult);
      v35 = v43;
      v36 = v34;
      v19 = v33;
      AsyncStream.Continuation.yield(_:)(v36, v13);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v45);
      v37 = v32;
      v8 = v39;
      v24 = v40;
      v25 = v48;
      sub_10000E844(v37, type metadata accessor for CurrentLocationResult);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  v30 = v28 + 4;
  if (v30 >= v47)
  {
LABEL_26:
    swift_release(v52);
    return;
  }
  v29 = *(_QWORD *)(v46 + 8 * v30);
  if (v29)
  {
    v25 = v30;
    goto LABEL_23;
  }
  while (1)
  {
    v25 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v25 >= v47)
      goto LABEL_26;
    v29 = *(_QWORD *)(v46 + 8 * v25);
    ++v30;
    if (v29)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

void sub_10002B298(uint64_t a1, int64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51[24];
  int64_t v52;

  v52 = a2;
  v3 = sub_10000A58C(&qword_1000B03A0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  __chkstk_darwin(v3);
  v43 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000A58C(&qword_1000B0390);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000B0380);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v42 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v41 = (uint64_t)&v38 - v12;
  v13 = sub_10000A58C(&qword_1000B03A8);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v49 = (char *)&v38 - v18;
  v50 = a1;
  v19 = *(_QWORD *)(a1 + 64);
  v46 = a1 + 64;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v23 = v52 + *(_QWORD *)(*(_QWORD *)v52 + 96);
  swift_bridgeObjectRetain(a1);
  v48 = v23;
  swift_beginAccess(v23, v51, 0, 0);
  v24 = 0;
  v47 = (unint64_t)(v20 + 63) >> 6;
  v39 = v14;
  v40 = v7;
  while (1)
  {
    if (v22)
    {
      v27 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v52 = v24;
      v28 = v27 | (v24 << 6);
      goto LABEL_24;
    }
    v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v47)
      goto LABEL_26;
    v30 = *(_QWORD *)(v46 + 8 * v29);
    v31 = v24 + 1;
    if (!v30)
    {
      v31 = v24 + 2;
      if (v24 + 2 >= v47)
        goto LABEL_26;
      v30 = *(_QWORD *)(v46 + 8 * v31);
      if (!v30)
      {
        v31 = v24 + 3;
        if (v24 + 3 >= v47)
          goto LABEL_26;
        v30 = *(_QWORD *)(v46 + 8 * v31);
        if (!v30)
        {
          v31 = v24 + 4;
          if (v24 + 4 >= v47)
            goto LABEL_26;
          v30 = *(_QWORD *)(v46 + 8 * v31);
          if (!v30)
            break;
        }
      }
    }
LABEL_23:
    v22 = (v30 - 1) & v30;
    v52 = v31;
    v28 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_24:
    v33 = v49;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v49, *(_QWORD *)(v50 + 56) + *(_QWORD *)(v14 + 72) * v28, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v33, v13);
    sub_100011440(v48, (uint64_t)v7, &qword_1000B0390);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      v25 = (uint64_t)v7;
      v26 = &qword_1000B0390;
    }
    else
    {
      v34 = v41;
      sub_1000112A4((uint64_t)v7, v41, &qword_1000B0380);
      v35 = v13;
      v36 = v42;
      sub_100011440(v34, v42, &qword_1000B0380);
      v37 = v43;
      AsyncStream.Continuation.yield(_:)(v36, v35);
      v13 = v35;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v37, v45);
      v25 = v34;
      v26 = &qword_1000B0380;
      v14 = v39;
      v7 = v40;
    }
    sub_100011484(v25, v26);
    v24 = v52;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  v32 = v24 + 5;
  if (v24 + 5 >= v47)
  {
LABEL_26:
    swift_release(v50);
    return;
  }
  v30 = *(_QWORD *)(v46 + 8 * v32);
  if (v30)
  {
    v31 = v24 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v47)
      goto LABEL_26;
    v30 = *(_QWORD *)(v46 + 8 * v31);
    ++v32;
    if (v30)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10002B6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  unint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000B02F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v2 + OBJC_IVAR____TtC10ClockAngel20LocationDataProvider_locationQueue);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v14 = (void *)objc_opt_self(MTSessionUtilities);
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(v24);
    v23 = 0xD000000000000021;
    v24 = 0x8000000100086B70;
    v22 = a1;
    swift_errorRetain(a1);
    v15 = sub_10000A58C(&qword_1000B0300);
    v16._countAndFlagsBits = String.init<A>(reflecting:)(&v22, v15);
    object = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(object);
    v18 = v24;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v14, "logInfo:", v19);

    v20 = sub_10000A58C(&qword_1000B0308);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
    sub_100028470((uint64_t)v6);
    return sub_100011484((uint64_t)v6, &qword_1000B02F8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002B89C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_10002B8E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100039FC4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10002B8E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10002B90C()
{
  sub_100028154();
}

uint64_t sub_10002B914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002B924(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t getEnumTagSinglePayload for LocationStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10002BA08 + 4 * byte_10008203A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10002BA3C + 4 * byte_100082035[v4]))();
}

uint64_t sub_10002BA3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BA44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002BA4CLL);
  return result;
}

uint64_t sub_10002BA58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002BA60);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10002BA64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BA6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationStatus()
{
  return &type metadata for LocationStatus;
}

unint64_t sub_10002BA8C()
{
  unint64_t result;

  result = qword_1000B03D0;
  if (!qword_1000B03D0)
  {
    result = swift_getWitnessTable(&unk_10008219C, &type metadata for LocationStatus);
    atomic_store(result, (unint64_t *)&qword_1000B03D0);
  }
  return result;
}

char *sub_10002BAD0(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  objc_class *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  void *object;
  Swift::String v43;
  unint64_t v44;
  NSString v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  objc_super v52;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId];
  v10 = v2;
  v11 = UUID.init()();
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *v9 = v12;
  v9[1] = v14;
  v15 = OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation;
  v16 = type metadata accessor for TimerAnimationCountdown(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  v18 = v17 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  v19 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = (_QWORD *)(v17 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v20 = 0;
  v20[1] = 0xE000000000000000;
  *(_QWORD *)&v10[v15] = v17;
  v21 = &v10[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_elementSize] = 0x4040000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_topMargin] = 0x4010000000000000;

  v22 = (objc_class *)type metadata accessor for TimerCompressedController();
  v52.receiver = v10;
  v52.super_class = v22;
  v23 = (char *)objc_msgSendSuper2(&v52, "init");
  v24 = &v23[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  v25 = *(_QWORD *)&v23[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8];
  *(_QWORD *)v24 = a1;
  *((_QWORD *)v24 + 1) = a2;
  v26 = v23;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v25);
  v27 = *((_QWORD *)v24 + 1);
  if (v27)
  {
    v28 = *(_QWORD *)v24;
    v29 = qword_1000AECC0;
    swift_bridgeObjectRetain(*((_QWORD *)v24 + 1));
    if (v29 != -1)
      swift_once(&qword_1000AECC0, sub_10001EBCC);
    v31 = sub_10002D7D4(&qword_1000B0438, v30, (uint64_t (*)(uint64_t))type metadata accessor for TimerCompressedController, (uint64_t)&unk_100082224);
    v50 = v28;
    v51 = v27;
    v32 = v26;
    AnyHashable.init<A>(_:)(&v48, &v50, &type metadata for String, &protocol witness table for String);
    dispatch thunk of DataStore.registerObserver(_:for:)(v32, v31, &v48);

    sub_10001E790((uint64_t)&v48);
  }
  v33 = (void *)objc_opt_self(MTSessionUtilities);
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v34 = v49;
  v35 = objc_msgSend(v26, "description");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;
  swift_bridgeObjectRelease(v34);

  v48 = v36;
  v49 = v38;
  v39._object = (void *)0x8000000100086EC0;
  v39._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v39);
  v50 = a1;
  v51 = a2;
  v40 = sub_10000A58C(&qword_1000AF7A0);
  v41._countAndFlagsBits = String.init<A>(describing:)(&v50, v40);
  object = v41._object;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(object);
  v43._countAndFlagsBits = 32;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  v44 = v49;
  v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v44);
  objc_msgSend(v33, "logInfo:", v45);

  sub_10002C1E4();
  return v26;
}

id sub_10002BE18(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  objc_class *v20;
  id v21;
  objc_super v23;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)&v1[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId];
  v8 = v1;
  v9 = UUID.init()();
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  *v7 = v10;
  v7[1] = v12;
  v13 = OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation;
  v14 = type metadata accessor for TimerAnimationCountdown(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  v16 = v15 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  v17 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (_QWORD *)(v15 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v18 = 0;
  v18[1] = 0xE000000000000000;
  *(_QWORD *)&v8[v13] = v15;
  v19 = &v8[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_elementSize] = 0x4040000000000000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_topMargin] = 0x4010000000000000;

  v20 = (objc_class *)type metadata accessor for TimerCompressedController();
  v23.receiver = v8;
  v23.super_class = v20;
  v21 = objc_msgSendSuper2(&v23, "initWithCoder:", a1);

  return v21;
}

id sub_10002BFC4(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  NSString v23;
  objc_class *v24;
  id v25;
  objc_super v27;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId];
  v11 = v3;
  v12 = UUID.init()();
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *v10 = v13;
  v10[1] = v15;
  v16 = OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation;
  v17 = type metadata accessor for TimerAnimationCountdown(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  v19 = v18 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  v20 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = (_QWORD *)(v18 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v21 = 0;
  v21[1] = 0xE000000000000000;
  *(_QWORD *)&v11[v16] = v18;
  v22 = &v11[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_elementSize] = 0x4040000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_topMargin] = 0x4010000000000000;

  if (a2)
  {
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v23 = 0;
  }
  v24 = (objc_class *)type metadata accessor for TimerCompressedController();
  v27.receiver = v11;
  v27.super_class = v24;
  v25 = objc_msgSendSuper2(&v27, "initWithNibName:bundle:", v23, a3);

  return v25;
}

void sub_10002C1E4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  NSString v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  Class isa;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  Swift::String v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  id v72;
  _QWORD v73[2];
  uint64_t v74;
  unint64_t v75;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v66 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v66 - v9;
  v11 = (_QWORD *)type metadata accessor for TimerSessionEntry(0);
  v12 = *(v11 - 1);
  __chkstk_darwin(v11);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation];
  v16 = sub_1000726E8(1u);
  if (!v16)
  {
    v56 = (void *)objc_opt_self(MTSessionUtilities);
    v74 = 0;
    v75 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v57 = v75;
    v58 = objc_msgSend(v1, "description");
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    v61 = v60;
    swift_bridgeObjectRelease(v57);

    v74 = v59;
    v75 = v61;
    v62._countAndFlagsBits = 0xD00000000000002CLL;
    v62._object = (void *)0x8000000100086E40;
    String.append(_:)(v62);
    v63 = v75;
    v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v63);
    objc_msgSend(v56, "logInfo:", v72);

    return;
  }
  v17 = v16;
  v70 = v14;
  v71 = v12;
  v68 = v15;
  v72 = v11;
  objc_msgSend(v16, "setAccessibilityIgnoresInvertColors:", 1);
  v18 = (void *)objc_opt_self(MTSessionUtilities);
  v74 = 0;
  v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v19 = v75;
  v20 = objc_msgSend(v1, "description");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;
  swift_bridgeObjectRelease(v19);

  v74 = v21;
  v75 = v23;
  v24._object = (void *)0x8000000100086E70;
  v24._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v24);
  v25 = v75;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v18, "logInfo:", v26);

  v27 = objc_msgSend(v1, "view");
  if (!v27)
  {
    __break(1u);
    goto LABEL_15;
  }
  v28 = v27;
  v67 = v8;
  v69 = v5;
  objc_msgSend(v27, "addSubview:", v17);

  objc_msgSend(v17, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v29 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v30 = swift_allocObject(v29, 64, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100081560;
  v31 = objc_msgSend(v17, "topAnchor");
  v32 = objc_msgSend(v1, "view");
  if (!v32)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, "topAnchor");

  v35 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v34, 4.0);
  *(_QWORD *)(v30 + 32) = v35;
  v36 = objc_msgSend(v17, "widthAnchor");
  v37 = objc_msgSend(v36, "constraintEqualToConstant:", 32.0);

  *(_QWORD *)(v30 + 40) = v37;
  v38 = objc_msgSend(v17, "heightAnchor");
  v39 = objc_msgSend(v17, "widthAnchor");
  v40 = objc_msgSend(v38, "constraintEqualToAnchor:", v39);

  *(_QWORD *)(v30 + 48) = v40;
  v41 = objc_msgSend(v17, "centerXAnchor");
  v42 = objc_msgSend(v1, "view");
  if (!v42)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v43 = v42;
  v44 = (void *)objc_opt_self(NSLayoutConstraint);
  v45 = objc_msgSend(v43, "centerXAnchor");

  v46 = objc_msgSend(v41, "constraintEqualToAnchor:", v45);
  *(_QWORD *)(v30 + 56) = v46;
  v74 = v30;
  specialized Array._endMutation()();
  v47 = v74;
  sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v47);
  objc_msgSend(v44, "activateConstraints:", isa);

  v49 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8];
  if (v49)
  {
    v50 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
    v51 = qword_1000AECC0;
    swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8]);
    v52 = (uint64_t)v69;
    v53 = (uint64_t)v70;
    v55 = v71;
    v54 = v72;
    if (v51 != -1)
      swift_once(&qword_1000AECC0, sub_10001EBCC);
    v73[0] = v50;
    v73[1] = v49;
    AnyHashable.init<A>(_:)(&v74, v73, &type metadata for String, &protocol witness table for String);
    dispatch thunk of DataStore.getEntry(for:)(&v74);
    sub_10001E790((uint64_t)&v74);

  }
  else
  {
    v55 = v71;
    v54 = v72;
    (*(void (**)(char *, uint64_t, uint64_t, id))(v71 + 56))(v10, 1, 1, v72);

    v52 = (uint64_t)v69;
    v53 = (uint64_t)v70;
  }
  if ((*(unsigned int (**)(char *, uint64_t, id))(v55 + 48))(v10, 1, v54) == 1)
  {
    sub_10001F7A8((uint64_t)v10);
  }
  else
  {
    sub_10001E728((uint64_t)v10, v53);
    v64 = (uint64_t)v67;
    sub_10001E728(v53, (uint64_t)v67);
    (*(void (**)(uint64_t, _QWORD, uint64_t, id))(v55 + 56))(v64, 0, 1, v54);
    sub_10002D640(v64, v52);
    v65 = v68 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
    swift_beginAccess(v68 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &v74, 33, 0);
    sub_10002D688(v52, v65);
    swift_endAccess(&v74);
  }
}

uint64_t sub_10002C874(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v17[2];
  _QWORD v18[5];
  objc_super v19;

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimerSessionEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (objc_class *)type metadata accessor for TimerCompressedController();
  v19.receiver = v2;
  v19.super_class = v11;
  objc_msgSendSuper2(&v19, "viewWillAppear:", a1 & 1);
  v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8];
  if (v12)
  {
    v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
    v14 = qword_1000AECC0;
    swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8]);
    if (v14 != -1)
      swift_once(&qword_1000AECC0, sub_10001EBCC);
    v17[0] = v13;
    v17[1] = v12;
    AnyHashable.init<A>(_:)(v18, v17, &type metadata for String, &protocol witness table for String);
    dispatch thunk of DataStore.getEntry(for:)(v18);
    sub_10001E790((uint64_t)v18);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      sub_10001E728((uint64_t)v6, (uint64_t)v10);
      sub_10002D19C((uint64_t)v10);
      return sub_10001F7E8((uint64_t)v10);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  return sub_10001F7A8((uint64_t)v6);
}

void sub_10002CA64(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  unint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Swift::String v46;
  unint64_t v47;
  NSString v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  Swift::String v74;
  unint64_t v75;
  NSString v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  id v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void **aBlock;
  unint64_t v95;
  uint64_t (*v96)(uint64_t);
  void *v97;
  void (*v98)();
  uint64_t v99;
  _QWORD v100[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v93 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v92 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v90 = *(_QWORD *)(v6 - 8);
  v91 = v6;
  __chkstk_darwin(v6);
  v89 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v84 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v84 - v18;
  sub_1000113C0(a1, (uint64_t)&aBlock);
  v20 = sub_10000A58C(&qword_1000AFFC8);
  if (swift_dynamicCast(v19, &aBlock, v20, v11, 6))
  {
    v86 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v87 = v17;
    v85 = v4;
    sub_10001F7E8((uint64_t)v19);
    v21 = (void *)objc_opt_self(MTSessionUtilities);
    aBlock = 0;
    v95 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v22 = objc_msgSend(v2, "description");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v25);
    v27._countAndFlagsBits = 0xD000000000000033;
    v27._object = (void *)0x8000000100086DC0;
    String.append(_:)(v27);
    v28 = objc_msgSend(v2, "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v32._countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v31);
    v33 = v95;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    v88 = v21;
    objc_msgSend(v21, "logInfo:", v34);

    v35 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8];
    if (v35)
    {
      v36 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId];
      v37 = qword_1000AECC0;
      swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_sessionId + 8]);
      if (v37 != -1)
        swift_once(&qword_1000AECC0, sub_10001EBCC);
      v100[0] = v36;
      v100[1] = v35;
      AnyHashable.init<A>(_:)(&aBlock, v100, &type metadata for String, &protocol witness table for String);
      dispatch thunk of DataStore.getEntry(for:)(&aBlock);
      sub_10001E790((uint64_t)&aBlock);
      v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
      v40 = (uint64_t)v86;
      v39 = (uint64_t)v87;
      if (v38 != 1)
      {
        sub_10001E728((uint64_t)v10, (uint64_t)v87);
        aBlock = 0;
        v95 = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        v41 = v95;
        v42 = objc_msgSend(v2, "description");
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;
        swift_bridgeObjectRelease(v41);

        aBlock = (void **)v43;
        v95 = v45;
        v46._object = (void *)0x8000000100086E20;
        v46._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v46);
        v47 = v95;
        v48 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v47);
        objc_msgSend(v88, "logInfo:", v48);

        sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
        v49 = (void *)static OS_dispatch_queue.main.getter();
        sub_10002D5FC(v39, v40);
        v50 = *(unsigned __int8 *)(v12 + 80);
        v51 = (v50 + 24) & ~v50;
        v52 = swift_allocObject(&unk_10009F4A0, v51 + v13, v50 | 7);
        *(_QWORD *)(v52 + 16) = v2;
        sub_10001E728(v40, v52 + v51);
        v98 = sub_10002D77C;
        v99 = v52;
        aBlock = _NSConcreteStackBlock;
        v95 = 1107296256;
        v96 = sub_10001C5FC;
        v97 = &unk_10009F4B8;
        v53 = _Block_copy(&aBlock);
        v54 = v99;
        v55 = v2;
        swift_release(v54);
        v56 = v89;
        static DispatchQoS.unspecified.getter(v57);
        aBlock = (void **)&_swiftEmptyArrayStorage;
        v58 = sub_10002D7D4((unint64_t *)&qword_1000AFB80, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v59 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
        v60 = sub_10001DC0C();
        v61 = v92;
        v62 = v85;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v59, v60, v85, v58);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v56, v61, v53);
        _Block_release(v53);

        (*(void (**)(char *, uint64_t))(v93 + 8))(v61, v62);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v56, v91);
        sub_10001F7E8(v39);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    }
    sub_10001F7A8((uint64_t)v10);
    aBlock = 0;
    v95 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v77 = v95;
    v78 = objc_msgSend(v2, "description");
    v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
    v81 = v80;
    swift_bridgeObjectRelease(v77);

    aBlock = (void **)v79;
    v95 = v81;
    v82._countAndFlagsBits = 0xD000000000000011;
    v82._object = (void *)0x8000000100086E00;
    String.append(_:)(v82);
    v83 = v95;
    v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v83);
    objc_msgSend(v88, "logInfo:", v76);
  }
  else
  {
    v63 = (void *)objc_opt_self(MTSessionUtilities);
    aBlock = 0;
    v95 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v64 = v95;
    v65 = objc_msgSend(v2, "description");
    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;
    swift_bridgeObjectRelease(v64);

    aBlock = (void **)v66;
    v95 = v68;
    v69._countAndFlagsBits = 0xD000000000000027;
    v69._object = (void *)0x8000000100086D90;
    String.append(_:)(v69);
    v70 = objc_msgSend(v2, "description");
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
    v73 = v72;

    v74._countAndFlagsBits = v71;
    v74._object = v73;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v73);
    v75 = v95;
    v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v75);
    objc_msgSend(v63, "logInfo:", v76);
  }

}

void sub_10002D19C(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  unint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  NSString v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000B13F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v37 - v8;
  v10 = (void *)objc_opt_self(MTSessionUtilities);
  v11 = objc_msgSend(v1, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v38 = v12;
  v39 = v14;
  v15._countAndFlagsBits = 0x4C65746164707520;
  v15._object = (void *)0xED000074756F7961;
  String.append(_:)(v15);
  v16 = v39;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v10, "logInfo:", v17);

  v18 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_compressedCountdownAnimation];
  sub_10002D5FC(a1, (uint64_t)v9);
  v19 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 0, 1, v19);
  sub_10002D640((uint64_t)v9, (uint64_t)v7);
  v20 = v18 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess(v18 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &v38, 33, 0);
  sub_10002D688((uint64_t)v7, v20);
  swift_endAccess(&v38);
  if (*(_BYTE *)(a1 + *(int *)(v19 + 28)) == 1)
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v21 = objc_msgSend(v2, "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v26._object = (void *)0x8000000100086D50;
    v26._countAndFlagsBits = 0xD000000000000033;
    String.append(_:)(v26);
    v27 = v39;
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    objc_msgSend(v10, "logInfo:", v28);

    sub_100073230();
  }
  else
  {
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v29 = objc_msgSend(v2, "description");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v32);
    v34._countAndFlagsBits = 0xD000000000000034;
    v34._object = (void *)0x8000000100086D10;
    String.append(_:)(v34);
    v35 = v39;
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    objc_msgSend(v10, "logInfo:", v36);

    sub_100072C20();
  }
}

id sub_10002D4F0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimerCompressedController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TimerCompressedController()
{
  return objc_opt_self(_TtC10ClockAngel25TimerCompressedController);
}

uint64_t sub_10002D594()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC10ClockAngel25TimerCompressedController_observerId);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10002D5D0(uint64_t a1, uint64_t a2)
{
  return sub_10002D7D4(&qword_1000B0430, a2, (uint64_t (*)(uint64_t))type metadata accessor for TimerCompressedController, (uint64_t)&unk_1000821FC);
}

uint64_t sub_10002D5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B13F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B13F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for TimerSessionEntry(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002D77C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimerSessionEntry(0) - 8) + 80);
  sub_10002D19C(v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10002D7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002D7CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002D7D4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_10002D814(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

id sub_10002D82C(double a1, double a2, double a3, double a4, double a5, double a6)
{
  _BYTE *v6;
  void *v13;
  char *v14;
  id v15;
  NSString v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  id v32;
  NSString v33;
  Class isa;
  Class v35;
  Class v36;
  NSString v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  Class v43;
  objc_super v45;

  *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_pendingWorkItem] = 0;
  v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode] = 0;
  *(double *)&v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_xmarkSize] = a5;
  *(double *)&v6[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_arrowSize] = a6;
  v13 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v14 = v6;
  v15 = objc_msgSend(v13, "configurationWithPointSize:weight:", 5, a5);
  v16 = String._bridgeToObjectiveC()();
  v17 = (void *)objc_opt_self(UIImage);
  v18 = objc_msgSend(v17, "systemImageNamed:withConfiguration:", v16, v15);

  v19 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v18);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView] = v19;
  v20 = objc_msgSend(v13, "configurationWithPointSize:weight:", 5, a6);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v17, "systemImageNamed:withConfiguration:", v21, v20);

  v23 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v22);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView] = v23;
  v24 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer] = v24;
  v25 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer] = v25;
  v26 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer] = v26;

  v45.receiver = v14;
  v45.super_class = (Class)type metadata accessor for SpinnyResetView();
  v27 = objc_msgSendSuper2(&v45, "initWithFrame:", a1, a2, a3, a4);
  objc_msgSend(v27, "setUserInteractionEnabled:", 0);
  sub_10002DD08();
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterGaussianBlur);
  v29 = v28;
  v30 = objc_allocWithZone((Class)CAFilter);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  v32 = objc_msgSend(v30, "initWithType:", v31);

  v33 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "setName:", v33);

  isa = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v32, "setValue:forKey:", isa, kCAFilterInputRadius);

  v35 = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v32, "setValue:forKey:", v35, kCAFilterInputNormalizeEdges);

  v36 = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v32, "setValue:forKey:", v36, kCAFilterInputHardEdges);

  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "setValue:forKey:", v37, kCAFilterInputQuality);

  v38 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "setValue:forKey:", v38, kCAFilterInputIntermediateBitDepth);

  v39 = objc_msgSend(v27, "layer");
  v40 = sub_10000A58C(&qword_1000B04B8);
  v41 = swift_allocObject(v40, 64, 7);
  *(_OWORD *)(v41 + 16) = xmmword_100082260;
  *(_QWORD *)(v41 + 56) = sub_100015494(0, &qword_1000B04C0, CAFilter_ptr);
  *(_QWORD *)(v41 + 32) = v32;
  v42 = v32;
  v43 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  objc_msgSend(v39, "setFilters:", v43);

  return v27;
}

id sub_10002DD08()
{
  char *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  CGAffineTransform v15;
  CGAffineTransform v16;

  v1 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView], "setContentMode:", 4);
  v2 = *(void **)&v0[v1];
  v3 = (void *)objc_opt_self(UIColor);
  v4 = v2;
  v5 = objc_msgSend(v3, "whiteColor");
  objc_msgSend(v4, "setTintColor:", v5);

  v6 = *(void **)&v0[v1];
  v7 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&v16.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&v16.c = v7;
  *(_OWORD *)&v16.tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
  CGAffineTransformRotate(&v15, &v16, -1.57079633);
  v16 = v15;
  CGAffineTransformScale(&v15, &v16, -1.0, 1.0);
  v16 = v15;
  objc_msgSend(v6, "setTransform:", &v16);
  v8 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer], "addSubview:", *(_QWORD *)&v0[v1]);
  v9 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer], "addSubview:", *(_QWORD *)&v0[v8]);
  v10 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer], "addSubview:", *(_QWORD *)&v0[v9]);
  objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[v10]);
  v11 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView], "setAlpha:", 0.0);
  objc_msgSend(*(id *)&v0[v11], "setContentMode:", 4);
  v12 = *(id *)&v0[v11];
  v13 = objc_msgSend(v3, "whiteColor");
  objc_msgSend(v12, "setTintColor:", v13);

  return objc_msgSend(v0, "addSubview:", *(_QWORD *)&v0[v11]);
}

void sub_10002DEFC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  objc_super v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v22.receiver = v0;
  v22.super_class = (Class)type metadata accessor for SpinnyResetView();
  objc_msgSendSuper2(&v22, "layoutSubviews");
  v1 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapView], "sizeToFit");
  v2 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
  v3 = *(void **)&v0[v1];
  v4 = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer];
  objc_msgSend(v3, "bounds");
  objc_msgSend(v4, "setBounds:");

  v5 = *(void **)&v0[v1];
  v6 = *(id *)&v0[v2];
  objc_msgSend(v5, "bounds");
  CGRectGetWidth(v23);
  objc_msgSend(*(id *)&v0[v1], "bounds");
  CGRectGetHeight(v24);
  Frame.timestamp.getter(v7);
  objc_msgSend(v6, "setCenter:");

  v8 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer;
  v9 = *(void **)&v0[v1];
  v10 = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer];
  objc_msgSend(v9, "bounds");
  objc_msgSend(v10, "setBounds:");

  v11 = *(void **)&v0[v1];
  v12 = *(id *)&v0[v8];
  objc_msgSend(v11, "bounds");
  CGRectGetWidth(v25);
  objc_msgSend(*(id *)&v0[v1], "bounds");
  CGRectGetHeight(v26);
  Frame.timestamp.getter(v13);
  objc_msgSend(v12, "setCenter:");

  v14 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer;
  v15 = *(void **)&v0[v1];
  v16 = *(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewOffsetContainer];
  objc_msgSend(v15, "bounds");
  objc_msgSend(v16, "setBounds:");

  v17 = *(id *)&v0[v14];
  objc_msgSend(v0, "bounds");
  CGRectGetWidth(v27);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v28);
  objc_msgSend(*(id *)&v0[v1], "bounds");
  CGRectGetHeight(v29);
  Frame.timestamp.getter(v18);
  objc_msgSend(v17, "setCenter:");

  v19 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView], "sizeToFit");
  v20 = *(id *)&v0[v19];
  objc_msgSend(v0, "bounds");
  CGRectGetWidth(v30);
  objc_msgSend(v0, "bounds");
  CGRectGetHeight(v31);
  Frame.timestamp.getter(v21);
  objc_msgSend(v20, "setCenter:");

}

uint64_t sub_10002E1C8(char a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  int v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v12);
  v17 = (char *)&v29 - v16;
  v18 = v2[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode];
  if (((((a1 & 1) == 0) ^ v18) & 1) == 0)
  {
    sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
    v29 = static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    + infix(_:_:)(v14, 0.02);
    v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19(v14, v10);
    v20 = swift_allocObject(&unk_10009F5B0, 25, 7);
    *(_QWORD *)(v20 + 16) = v2;
    *(_BYTE *)(v20 + 24) = v18;
    aBlock[4] = sub_10002F2CC;
    v34 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001C5FC;
    aBlock[3] = &unk_10009F5C8;
    v21 = _Block_copy(aBlock);
    v22 = v34;
    v23 = v2;
    v24 = swift_release(v22);
    static DispatchQoS.unspecified.getter(v24);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v25 = sub_10002F2F0();
    v26 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
    v27 = sub_10001DC0C();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v4, v25);
    v28 = (void *)v29;
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v9, v6, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
    return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
  }
  return result;
}

uint64_t sub_10002E458(_BYTE *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  CGFloat tx;
  CGFloat ty;
  CGFloat v28;
  CGFloat v29;
  void *v30;
  CGFloat v31;
  __int128 v32;
  void *v33;
  CGFloat v34;
  _BYTE *v35;
  id v36;
  void *v37;
  CGFloat v38;
  void *v39;
  CGFloat v40;
  void *v41;
  CGFloat v42;
  void *v43;
  void *v44;
  unint64_t v45;
  char *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  double v54;
  void *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  id v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  CGAffineTransform aBlock;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v61 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  result = __chkstk_darwin(v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode;
  if (((a2 & 1) == 0) != a1[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode])
  {
    v68 = v10;
    v69 = v4;
    v16 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_pendingWorkItem;
    v17 = *(_QWORD *)&a1[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_pendingWorkItem];
    v66 = v8;
    v67 = v5;
    if (v17)
    {
      v18 = swift_retain(v17);
      dispatch thunk of DispatchWorkItem.cancel()(v18);
      swift_release(v17);
      v19 = *(_QWORD *)&a1[v16];
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)&a1[v16] = 0;
    swift_release(v19);
    v20 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
    if (a1[v15])
      v21 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView;
    else
      v21 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
    v22 = *(void **)&a1[v21];
    if (a1[v15])
      v20 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewTransitionContainer;
    v23 = *(void **)&a1[v20];
    v24 = v22;
    v64 = v24;
    v25 = v23;
    CGAffineTransformMakeScale(&aBlock, 0.75, 0.75);
    v62 = *(_OWORD *)&aBlock.a;
    v61 = *(_OWORD *)&aBlock.c;
    tx = aBlock.tx;
    ty = aBlock.ty;
    CGAffineTransformMakeScale(&aBlock, 0.65, 0.65);
    v65 = *(_OWORD *)&aBlock.a;
    v63 = *(_OWORD *)&aBlock.c;
    v28 = aBlock.tx;
    v29 = aBlock.ty;
    *(_OWORD *)&aBlock.a = v62;
    *(_OWORD *)&aBlock.c = v61;
    aBlock.tx = tx;
    aBlock.ty = ty;
    objc_msgSend(v24, "setTransform:", &aBlock);
    v30 = (void *)objc_opt_self(UIView);
    v31 = COERCE_DOUBLE(swift_allocObject(&unk_10009F600, 80, 7));
    *(_QWORD *)(*(_QWORD *)&v31 + 16) = a1;
    *(_QWORD *)(*(_QWORD *)&v31 + 24) = v25;
    v32 = v63;
    *(_OWORD *)(*(_QWORD *)&v31 + 32) = v65;
    *(_OWORD *)(*(_QWORD *)&v31 + 48) = v32;
    *(CGFloat *)(*(_QWORD *)&v31 + 64) = v28;
    *(CGFloat *)(*(_QWORD *)&v31 + 72) = v29;
    *(_QWORD *)&aBlock.tx = sub_10002F364;
    aBlock.ty = v31;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_10001C5FC;
    *(_QWORD *)&aBlock.d = &unk_10009F618;
    v33 = _Block_copy(&aBlock);
    v34 = aBlock.ty;
    v35 = a1;
    v36 = v25;
    swift_release(*(_QWORD *)&v34);
    *(_QWORD *)&aBlock.tx = Frame.timestamp.getter;
    aBlock.ty = 0.0;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_10004355C;
    *(_QWORD *)&aBlock.d = &unk_10009F640;
    v37 = _Block_copy(&aBlock);
    objc_msgSend(v30, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 0, v33, v37, 1.0, 0.36, 0.0, 0.0, 0.0, 0.0);
    _Block_release(v37);
    _Block_release(v33);
    v38 = COERCE_DOUBLE(swift_allocObject(&unk_10009F678, 24, 7));
    *(_QWORD *)(*(_QWORD *)&v38 + 16) = v36;
    *(_QWORD *)&aBlock.tx = sub_10002F394;
    aBlock.ty = v38;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_10001C5FC;
    *(_QWORD *)&aBlock.d = &unk_10009F690;
    v39 = _Block_copy(&aBlock);
    v40 = aBlock.ty;
    *(_QWORD *)&v65 = v36;
    swift_release(*(_QWORD *)&v40);
    *(_QWORD *)&aBlock.tx = j___s10ClockAngel5FrameV9timestampSdvg;
    aBlock.ty = 0.0;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_10004355C;
    *(_QWORD *)&aBlock.d = &unk_10009F6B8;
    v41 = _Block_copy(&aBlock);
    objc_msgSend(v30, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 0, v39, v41, 1.0, 0.26, 0.0, 0.0, 0.0, 0.0);
    _Block_release(v41);
    _Block_release(v39);
    v42 = COERCE_DOUBLE(swift_allocObject(&unk_10009F6F0, 32, 7));
    v43 = v64;
    *(_QWORD *)(*(_QWORD *)&v42 + 16) = v35;
    *(_QWORD *)(*(_QWORD *)&v42 + 24) = v43;
    *(_QWORD *)&aBlock.tx = sub_10002F3D4;
    aBlock.ty = v42;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_10001C5FC;
    *(_QWORD *)&aBlock.d = &unk_10009F708;
    v44 = _Block_copy(&aBlock);
    v70 = &_swiftEmptyArrayStorage;
    v45 = sub_10002F2F0();
    v46 = v35;
    v47 = v43;
    v48 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
    v49 = sub_10001DC0C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v48, v49, v11, v45);
    v50 = type metadata accessor for DispatchWorkItem(0);
    swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
    v51 = DispatchWorkItem.init(flags:block:)(v14, v44);
    swift_release(*(_QWORD *)&aBlock.ty);
    v52 = *(_QWORD *)&a1[v16];
    *(_QWORD *)&a1[v16] = v51;
    swift_retain(v51);
    swift_release(v52);
    sub_100015494(0, &qword_1000B02E8, NSObject_ptr);
    v53 = *(id *)&v46[OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_cancelView];
    LOBYTE(v48) = static NSObject.== infix(_:_:)(v47, v53);

    if ((v48 & 1) != 0)
      v54 = 0.1;
    else
      v54 = 0.12;
    sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
    v55 = (void *)static OS_dispatch_queue.main.getter();
    v56 = v66;
    static DispatchTime.now()();
    v57 = v68;
    + infix(_:_:)(v56, v54);
    v58 = *(void (**)(char *, uint64_t))(v67 + 8);
    v59 = v56;
    v60 = v69;
    v58(v59, v69);
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v57, v51);

    swift_release(v51);
    return ((uint64_t (*)(char *, uint64_t))v58)(v57, v60);
  }
  return result;
}

id sub_10002EA20(void *a1, void *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  NSString v8;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v10 = a3[1];
  v11 = *a3;
  v4 = *((_QWORD *)a3 + 4);
  v5 = *((_QWORD *)a3 + 5);
  v6 = objc_msgSend(a1, "layer");
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setValue:forKeyPath:", isa, v8);

  v12[0] = v11;
  v12[1] = v10;
  v13 = v4;
  v14 = v5;
  return objc_msgSend(a2, "setTransform:", v12);
}

void sub_10002EAF0(void *a1, void *a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  void **v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t (*v24)(_QWORD);
  uint64_t v25;

  v4 = (void *)objc_opt_self(UIView);
  v5 = swift_allocObject(&unk_10009F740, 24, 7);
  *(_QWORD *)(v5 + 16) = a1;
  v24 = (uint64_t (*)(_QWORD))sub_10002F3DC;
  v25 = v5;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10001C5FC;
  v23 = &unk_10009F758;
  v6 = _Block_copy(&v20);
  v7 = v25;
  v8 = a1;
  swift_release(v7);
  v24 = j___s10ClockAngel5FrameV9timestampSdvg;
  v25 = 0;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10004355C;
  v23 = &unk_10009F780;
  v9 = _Block_copy(&v20);
  objc_msgSend(v4, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 0, v6, v9, 1.0, 0.36, 0.0, 0.0, 0.0, 0.0);
  _Block_release(v9);
  _Block_release(v6);
  v10 = swift_allocObject(&unk_10009F7B8, 24, 7);
  *(_QWORD *)(v10 + 16) = a2;
  v24 = (uint64_t (*)(_QWORD))sub_10002F3E4;
  v25 = v10;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10001C5FC;
  v23 = &unk_10009F7D0;
  v11 = _Block_copy(&v20);
  v12 = v25;
  v13 = a2;
  swift_release(v12);
  v24 = j___s10ClockAngel5FrameV9timestampSdvg;
  v25 = 0;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10004355C;
  v23 = &unk_10009F7F8;
  v14 = _Block_copy(&v20);
  objc_msgSend(v4, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 0, v11, v14, 1.0, 0.3, 0.0, 0.0, 0.0, 0.0);
  _Block_release(v14);
  _Block_release(v11);
  v15 = swift_allocObject(&unk_10009F830, 24, 7);
  *(_QWORD *)(v15 + 16) = v13;
  v24 = (uint64_t (*)(_QWORD))sub_10002F3F8;
  v25 = v15;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10001C5FC;
  v23 = &unk_10009F848;
  v16 = _Block_copy(&v20);
  v17 = v25;
  v18 = v13;
  swift_release(v17);
  v24 = j___s10ClockAngel5FrameV9timestampSdvg;
  v25 = 0;
  v20 = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_10004355C;
  v23 = &unk_10009F870;
  v19 = _Block_copy(&v20);
  objc_msgSend(v4, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 0, v16, v19, 0.6, 0.42, 0.0, 0.0, 0.0, 0.0);
  _Block_release(v19);
  _Block_release(v16);
}

void sub_10002EDC8(void *a1)
{
  id v1;
  Class isa;
  NSString v3;

  v1 = objc_msgSend(a1, "layer");
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setValue:forKeyPath:", isa, v3);

}

id sub_10002EE50(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  __int128 v6;
  CGAffineTransform v8;
  CGAffineTransform v9;

  v2 = OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer;
  v3 = *(id *)(a1 + OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_lapViewRotationContainer);
  objc_msgSend(v3, "transform");
  CGAffineTransformRotate(&v8, &v9, 2.0943951);
  v9 = v8;
  objc_msgSend(v3, "setTransform:", &v9);

  v4 = *(id *)(a1 + v2);
  objc_msgSend(v4, "transform");
  CGAffineTransformRotate(&v8, &v9, 2.0943951);
  v9 = v8;
  objc_msgSend(v4, "setTransform:", &v9);

  v5 = *(void **)(a1 + v2);
  v6 = *(_OWORD *)&CGAffineTransformIdentity.c;
  *(_OWORD *)&v9.a = *(_OWORD *)&CGAffineTransformIdentity.a;
  *(_OWORD *)&v9.c = v6;
  *(_OWORD *)&v9.tx = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return objc_msgSend(v5, "setTransform:", &v9);
}

id sub_10002F030()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SpinnyResetView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SpinnyResetView()
{
  return objc_opt_self(_TtC10ClockAngel15SpinnyResetView);
}

uint64_t getEnumTagSinglePayload for SpinnyResetView.Mode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SpinnyResetView.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10002F1D4 + 4 * byte_1000822BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002F208 + 4 * byte_1000822B8[v4]))();
}

uint64_t sub_10002F208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002F218);
  return result;
}

uint64_t sub_10002F224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002F22CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10002F230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10002F244(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SpinnyResetView.Mode()
{
  return &type metadata for SpinnyResetView.Mode;
}

unint64_t sub_10002F264()
{
  unint64_t result;

  result = qword_1000B04B0;
  if (!qword_1000B04B0)
  {
    result = swift_getWitnessTable(&unk_100082324, &type metadata for SpinnyResetView.Mode);
    atomic_store(result, (unint64_t *)&qword_1000B04B0);
  }
  return result;
}

uint64_t sub_10002F2A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10002F2CC()
{
  uint64_t v0;

  return sub_10002E458(*(_BYTE **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10002F2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002F2E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10002F2F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AFB80;
  if (!qword_1000AFB80)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000AFB80);
  }
  return result;
}

uint64_t sub_10002F338()
{
  uint64_t v0;

  return swift_deallocObject(v0, 80, 7);
}

id sub_10002F364()
{
  uint64_t v0;

  return sub_10002EA20(*(void **)(v0 + 16), *(void **)(v0 + 24), (__int128 *)(v0 + 32));
}

uint64_t sub_10002F370()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10002F394()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setAlpha:", 0.0);
}

uint64_t sub_10002F3A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10002F3D4()
{
  uint64_t v0;

  sub_10002EAF0(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10002F3DC()
{
  uint64_t v0;

  sub_10002EDC8(*(void **)(v0 + 16));
}

id sub_10002F3E4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setAlpha:", 1.0);
}

id sub_10002F3F8()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  _OWORD v4[3];

  v1 = *(void **)(v0 + 16);
  v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  return objc_msgSend(v1, "setTransform:", v4);
}

uint64_t sub_10002F4A4()
{
  return sub_10002F4F4((uint64_t)&unk_1000827D0, (uint64_t)&unk_1000827F8);
}

uint64_t sub_10002F4B8()
{
  return sub_10002F4F4((uint64_t)&unk_100082A28, (uint64_t)&unk_100082A50);
}

uint64_t sub_10002F4CC()
{
  return sub_10002F4F4((uint64_t)&unk_1000829E0, (uint64_t)&unk_100082A08);
}

uint64_t sub_10002F4E0()
{
  return sub_10002F4F4((uint64_t)&unk_100082998, (uint64_t)&unk_1000829C0);
}

uint64_t sub_10002F4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a1, a2);
  v6 = swift_getKeyPath(a2, v5);
  static Published.subscript.getter(&v8, v2, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  return v8;
}

uint64_t sub_10002F55C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100082878, a2);
  v5 = swift_getKeyPath(&unk_1000828A0, v4);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10002F5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100082740, a2);
  v5 = swift_getKeyPath(&unk_100082768, v4);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10002F63C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000828C0, a1);
  v6 = swift_getKeyPath(&unk_1000828E8, v5);
  static Published.subscript.getter(a2, v2, KeyPath, v6);
  swift_release(KeyPath);
  return swift_release(v6);
}

double sub_10002F6A0()
{
  return sub_10002F6DC((uint64_t)&unk_100082950, (uint64_t)&unk_100082978);
}

double sub_10002F6B4()
{
  return sub_10002F6DC((uint64_t)&unk_100082788, (uint64_t)&unk_1000827B0);
}

double sub_10002F6C8()
{
  return sub_10002F6DC((uint64_t)&unk_100082908, (uint64_t)&unk_100082930);
}

double sub_10002F6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double v8;

  KeyPath = swift_getKeyPath(a1, a2);
  v6 = swift_getKeyPath(a2, v5);
  static Published.subscript.getter(&v8, v2, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  return v8;
}

uint64_t sub_10002F744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];

  v42 = a7;
  v43 = a8;
  v40 = a5;
  v41 = a6;
  v35 = a3;
  v36 = a4;
  v33 = a1;
  v34 = a2;
  v38 = a10;
  v39 = a11;
  v37 = a9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v33 - v17;
  v19 = sub_10000A58C(&qword_1000B0980);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__offset;
  v46[0] = 0;
  Published.init(initialValue:)(v46, &type metadata for Double);
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v24(v23, v22, v19);
  v25 = v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTimeInterval;
  v46[0] = 0;
  Published.init(initialValue:)(v46, &type metadata for Double);
  v24(v25, v22, v19);
  v26 = v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTimeInterval;
  v46[0] = 0;
  Published.init(initialValue:)(v46, &type metadata for Double);
  v27 = ((uint64_t (*)(uint64_t, char *, uint64_t))v24)(v26, v22, v19);
  StopwatchAutoFormatter.init()(v27);
  *(_QWORD *)(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel_msThreshold) = 0x40AC200000000000;
  swift_beginAccess(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTime, v46, 33, 0);
  v44 = v33;
  v45 = v34;
  Published.init(initialValue:)(&v44, &type metadata for String);
  swift_endAccess(v46);
  swift_beginAccess(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTimeWithoutMs, v46, 33, 0);
  v44 = v35;
  v45 = v36;
  Published.init(initialValue:)(&v44, &type metadata for String);
  swift_endAccess(v46);
  swift_beginAccess(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__lap, v46, 33, 0);
  v44 = v37;
  Published.init(initialValue:)(&v44, &type metadata for Int);
  swift_endAccess(v46);
  swift_beginAccess(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__state, v46, 33, 0);
  v44 = v38;
  type metadata accessor for MTStopwatchState(0);
  Published.init(initialValue:)(&v44, v28);
  swift_endAccess(v46);
  v29 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v30 = v39;
  v29(v18, v39, v12);
  swift_beginAccess(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__startingDate, v46, 33, 0);
  v29(v16, v18, v12);
  Published.init(initialValue:)(v16, v12);
  v31 = *(void (**)(char *, uint64_t))(v13 + 8);
  v31(v18, v12);
  swift_endAccess(v46);
  swift_beginAccess(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTime, v46, 33, 0);
  v44 = v40;
  v45 = v41;
  Published.init(initialValue:)(&v44, &type metadata for String);
  swift_endAccess(v46);
  swift_beginAccess(v11 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTimeWithoutMs, v46, 33, 0);
  v44 = v42;
  v45 = v43;
  Published.init(initialValue:)(&v44, &type metadata for String);
  swift_endAccess(v46);
  v31(v30, v12);
  return v11;
}

uint64_t sub_10002FB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTime;
  v2 = sub_10000A58C(&qword_1000B0960);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTimeWithoutMs, v2);
  v3(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTime, v2);
  v3(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTimeWithoutMs, v2);
  v4 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__lap;
  v5 = sub_10000A58C(&qword_1000B0968);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__state;
  v7 = sub_10000A58C(&qword_1000B0970);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__startingDate;
  v9 = sub_10000A58C(&qword_1000B0978);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__offset;
  v11 = sub_10000A58C(&qword_1000B0980);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__totalTimeInterval, v11);
  v12(v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel__currentTimeInterval, v11);
  v13 = v0 + OBJC_IVAR____TtC10ClockAngel24ObservableStopwatchModel_autoFormatter;
  v14 = type metadata accessor for StopwatchAutoFormatter(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return v0;
}

uint64_t sub_10002FCB0()
{
  uint64_t v0;

  sub_10002FB1C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002FCD4()
{
  return type metadata accessor for ObservableStopwatchModel(0);
}

uint64_t type metadata accessor for ObservableStopwatchModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B0540;
  if (!qword_1000B0540)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ObservableStopwatchModel);
  return result;
}

void sub_10002FD18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[7];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  sub_10002FEBC(319, &qword_1000B0550, (uint64_t)&type metadata for String);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    v14[1] = v14[0];
    v14[2] = v14[0];
    v14[3] = v14[0];
    sub_10002FEBC(319, &qword_1000B0558, (uint64_t)&type metadata for Int);
    if (v5 <= 0x3F)
    {
      v14[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_10002FE70(319, &qword_1000B0560, (uint64_t (*)(uint64_t))type metadata accessor for MTStopwatchState);
      if (v7 <= 0x3F)
      {
        v14[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_10002FE70(319, &qword_1000B0568, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
        if (v9 <= 0x3F)
        {
          v14[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_10002FEBC(319, (unint64_t *)&unk_1000B0570, (uint64_t)&type metadata for Double);
          if (v11 <= 0x3F)
          {
            v15 = *(_QWORD *)(v10 - 8) + 64;
            v16 = v15;
            v17 = v15;
            v12 = type metadata accessor for StopwatchAutoFormatter(319);
            if (v13 <= 0x3F)
            {
              v18 = *(_QWORD *)(v12 - 8) + 64;
              v19 = (char *)&value witness table for Builtin.Int64 + 64;
              swift_updateClassMetadata2(a1, 256, 12, v14, a1 + 80);
            }
          }
        }
      }
    }
  }
}

void sub_10002FE70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_10002FEBC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t destroy for StopwatchCustomTrailingView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return sub_100007CF0((_QWORD *)(a1 + 16));
}

__n128 initializeWithTake for StopwatchCustomTrailingView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingView()
{
  return &type metadata for StopwatchCustomTrailingView;
}

double destroy for StopwatchCustomLeadingView(_QWORD *a1)
{
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  sub_100007CF0(a1 + 4);
  *(_QWORD *)&result = swift_release(a1[10]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for StopwatchCustomLeadingView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 4;
  v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  v11(a1 + 32, v8, v10);
  v12 = a2[10];
  *(_QWORD *)(a1 + 72) = a2[9];
  *(_QWORD *)(a1 + 80) = v12;
  swift_retain(v12);
  return a1;
}

uint64_t *assignWithCopy for StopwatchCustomLeadingView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  sub_100007D18(a1 + 4, a2 + 4);
  a1[9] = a2[9];
  v12 = a2[10];
  v13 = a1[10];
  a1[10] = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

uint64_t *assignWithTake for StopwatchCustomLeadingView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_release(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_release(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_release(v7);
  sub_100007CF0(a1 + 4);
  v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v8;
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  v9 = a1[10];
  a1[10] = a2[10];
  swift_release(v9);
  return a1;
}

ValueMetadata *type metadata accessor for StopwatchCustomLeadingView()
{
  return &type metadata for StopwatchCustomLeadingView;
}

uint64_t initializeWithCopy for StopwatchCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for StopwatchCompressedTrailingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 initializeWithTake for StopwatchCompressedTrailingView(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for StopwatchCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCompressedTrailingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCompressedTrailingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCompressedTrailingView()
{
  return &type metadata for StopwatchCompressedTrailingView;
}

_QWORD *initializeBufferWithCopyOfBuffer for StopwatchCompressedLeadingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for StopwatchCompressedLeadingView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for StopwatchCompressedLeadingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

__n128 initializeWithTake for StopwatchCompressedLeadingView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for StopwatchCompressedLeadingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCompressedLeadingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCompressedLeadingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCompressedLeadingView()
{
  return &type metadata for StopwatchCompressedLeadingView;
}

uint64_t sub_100030464(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t destroy for StopwatchCustomLockScreenTrailingView(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

  sub_100007CF0((_QWORD *)(a1 + 24));
  return sub_1000304AC(*(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72));
}

uint64_t sub_1000304AC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t initializeWithCopy for StopwatchCustomLockScreenTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;
  uint64_t v11;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2 + 24;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain(v4);
  v10 = v5;
  v9(a1 + 24, v6, v8);
  v11 = *(_QWORD *)(v2 + 64);
  LOBYTE(v2) = *(_BYTE *)(v2 + 72);
  sub_100030464(v11, v2);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v2;
  return a1;
}

uint64_t assignWithCopy for StopwatchCustomLockScreenTrailingView(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = a2;
  *(_QWORD *)a1 = *a2;
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(void **)(a1 + 16);
  v7 = (void *)v2[2];
  *(_QWORD *)(a1 + 16) = v7;
  v8 = v7;

  sub_100007D18((_QWORD *)(a1 + 24), v2 + 3);
  v9 = v2[8];
  LOBYTE(v2) = *((_BYTE *)v2 + 72);
  sub_100030464(v9, (char)v2);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = (_BYTE)v2;
  sub_1000304AC(v10, v11);
  return a1;
}

__n128 initializeWithTake for StopwatchCustomLockScreenTrailingView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for StopwatchCustomLockScreenTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  sub_100007CF0((_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  sub_1000304AC(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for StopwatchCustomLockScreenTrailingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StopwatchCustomLockScreenTrailingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCustomLockScreenTrailingView()
{
  return &type metadata for StopwatchCustomLockScreenTrailingView;
}

uint64_t _s10ClockAngel27StopwatchCustomTrailingViewVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  sub_100007CF0((_QWORD *)(a1 + 16));
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewTotalTimeSpaced()
{
  return &type metadata for StopwatchCustomTrailingViewTotalTimeSpaced;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewLapSpaced()
{
  return &type metadata for StopwatchCustomTrailingViewLapSpaced;
}

uint64_t sub_10003079C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A9B0, 1);
}

uint64_t sub_1000307AC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ObservableStopwatchModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000307E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v7[136];
  _QWORD v8[2];
  char v9;
  uint64_t v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE v16[184];
  __int128 v17;
  __int128 v18;
  char v19;

  v11[0] = static VerticalAlignment.center.getter(a1);
  v11[1] = 0;
  v12 = 1;
  v8[0] = static HorizontalAlignment.trailing.getter();
  v8[1] = 0;
  v9 = 1;
  sub_100031350(v1, (uint64_t)&v10);
  sub_100011440((uint64_t)v8, (uint64_t)v7, &qword_1000B0848);
  v13 = 0;
  v14 = 1;
  sub_100011440((uint64_t)v7, (uint64_t)&v15, &qword_1000B0848);
  sub_100011484((uint64_t)v8, &qword_1000B0848);
  v2 = sub_100011484((uint64_t)v7, &qword_1000B0848);
  v3 = static Edge.Set.horizontal.getter(v2);
  sub_100011440((uint64_t)v11, (uint64_t)v16, &qword_1000B0850);
  v16[176] = v3;
  v17 = 0u;
  v18 = 0u;
  v19 = 1;
  sub_100011484((uint64_t)v11, &qword_1000B0850);
  v4 = sub_10000A58C(&qword_1000B0858);
  v5 = sub_10003413C();
  View.onTapGesture(count:perform:)(1, sub_100030920, 0, v4, v5);
  return sub_100011484((uint64_t)v16, &qword_1000B0858);
}

uint64_t sub_100030928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return sub_100031350(v2, a2 + 24);
}

uint64_t sub_100030960@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  unint64_t v21;
  _QWORD v23[2];

  v23[1] = a1;
  v2 = sub_10000A58C(&qword_1000B08F8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)v23 - v6;
  v8 = sub_10000A58C(&qword_1000B0900);
  __chkstk_darwin(v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000A58C(&qword_1000B0908);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v12);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v15 = &v10[*(int *)(sub_10000A58C(&qword_1000B0910) + 44)];
  *(_QWORD *)v7 = static HorizontalAlignment.trailing.getter();
  *((_QWORD *)v7 + 1) = 0xC014000000000000;
  v7[16] = 0;
  v16 = sub_10000A58C(&qword_1000B0918);
  sub_100030B90(v1, (uint64_t)&v7[*(int *)(v16 + 44)]);
  sub_100011440((uint64_t)v7, (uint64_t)v5, &qword_1000B08F8);
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v17 = sub_10000A58C(&qword_1000B0920);
  sub_100011440((uint64_t)v5, (uint64_t)&v15[*(int *)(v17 + 48)], &qword_1000B08F8);
  sub_100011484((uint64_t)v7, &qword_1000B08F8);
  v18 = sub_100011484((uint64_t)v5, &qword_1000B08F8);
  v19 = static Edge.Set.horizontal.getter(v18);
  sub_100011440((uint64_t)v10, (uint64_t)v14, &qword_1000B0900);
  v20 = &v14[*(int *)(v11 + 36)];
  *v20 = v19;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  v20[40] = 1;
  sub_100011484((uint64_t)v10, &qword_1000B0900);
  v21 = sub_100035654();
  View.onTapGesture(count:perform:)(1, sub_100030920, 0, v11, v21);
  return sub_100011484((uint64_t)v14, &qword_1000B0908);
}

uint64_t sub_100030B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _QWORD v43[8];
  uint64_t v44;
  char v45;
  __int128 v46;
  _OWORD v47[2];
  uint64_t v48;

  v4 = (int *)type metadata accessor for RunningCountupView(0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10000A58C(&qword_1000B0938);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v43 - v11;
  v13 = *(_QWORD *)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_100082878, v14);
  v17 = swift_getKeyPath(&unk_1000828A0, v16);
  v18 = swift_retain(v13);
  static Published.subscript.getter(v43, v18, KeyPath, v17);
  swift_release(v13);
  swift_release(KeyPath);
  swift_release(v17);
  v19 = v43[0];
  sub_1000356D8(a1, (uint64_t)v43);
  if (v19 < 2)
  {
    sub_10003570C((uint64_t)v43);
  }
  else
  {
    v20 = v44;
    v21 = v45;
    sub_100030464(v44, v45);
    v22 = sub_100034388(v20, v21);
    sub_1000304AC(v20, v21);
    sub_10003570C((uint64_t)v43);
    if ((v22 & 1) == 0)
    {
      v24 = *(_QWORD *)(a1 + 8);
      sub_1000113C0(a1 + 24, (uint64_t)v47);
      v25 = type metadata accessor for ObservableStopwatchModel(0);
      v26 = sub_1000341C0();
      v27 = swift_retain(v24);
      *(_QWORD *)&v46 = ObservedObject.init(wrappedValue:)(v27, v25, v26);
      *((_QWORD *)&v46 + 1) = v23;
      goto LABEL_6;
    }
  }
  v48 = 0;
  memset(v47, 0, sizeof(v47));
  v46 = 0u;
LABEL_6:
  v28 = *(_QWORD *)(a1 + 8);
  v29 = swift_getKeyPath(&unk_1000828C0, v23);
  v31 = swift_getKeyPath(&unk_1000828E8, v30);
  v32 = swift_retain(v28);
  static Published.subscript.getter(v6, v32, v29, v31);
  swift_release(v28);
  swift_release(v29);
  swift_release(v31);
  if (qword_1000AECF8 != -1)
    swift_once(&qword_1000AECF8, sub_1000744DC);
  v33 = qword_1000B7018;
  v34 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
  v35 = Color.init(uiColor:)(v34);
  *((_BYTE *)v6 + v4[5]) = 0;
  *(_QWORD *)((char *)v6 + v4[6]) = 0x4048000000000000;
  *(_QWORD *)((char *)v6 + v4[7]) = v33;
  *(_QWORD *)((char *)v6 + v4[8]) = v35;
  v36 = *(_QWORD *)(a1 + 8);
  v37 = type metadata accessor for ObservableStopwatchModel(0);
  v38 = sub_1000341C0();
  swift_retain(v36);
  v39 = static ObservableObject.environmentStore.getter(v37, v38);
  sub_10000E800((uint64_t)v6, (uint64_t)v10, type metadata accessor for RunningCountupView);
  v40 = (uint64_t *)&v10[*(int *)(v7 + 36)];
  *v40 = v39;
  v40[1] = v36;
  sub_10000E844((uint64_t)v6, type metadata accessor for RunningCountupView);
  sub_100035740((uint64_t)v10, (uint64_t)v12);
  sub_100011440((uint64_t)&v46, (uint64_t)v43, &qword_1000B0940);
  sub_100011440((uint64_t)v12, (uint64_t)v10, &qword_1000B0938);
  sub_100011440((uint64_t)v43, a2, &qword_1000B0940);
  v41 = sub_10000A58C(&qword_1000B0948);
  sub_100011440((uint64_t)v10, a2 + *(int *)(v41 + 48), &qword_1000B0938);
  sub_100011484((uint64_t)v12, &qword_1000B0938);
  sub_100011484((uint64_t)&v46, &qword_1000B0940);
  sub_100011484((uint64_t)v10, &qword_1000B0938);
  return sub_100011484((uint64_t)v43, &qword_1000B0940);
}

uint64_t sub_100030F3C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(NSURL), "mtURLForSection:", 3);
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
  }
  else
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  }
  type metadata accessor for MTSUtilities(0);
  dispatch thunk of static MTSUtilities.launchClockAppIfPossible(_:)(v2);
  return sub_100011484((uint64_t)v2, (uint64_t *)&unk_1000B0040);
}

uint64_t sub_100031030@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;

  v2 = v1;
  v48 = a1;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(4, 1);
  v6._countAndFlagsBits = 542130508;
  v6._object = (void *)0xE400000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v6);
  v7 = v2[1];
  KeyPath = swift_getKeyPath(&unk_100082878, v8);
  v11 = swift_getKeyPath(&unk_1000828A0, v10);
  v12 = swift_retain(v7);
  static Published.subscript.getter(&v49, v12, KeyPath, v11);
  swift_release(v7);
  swift_release(KeyPath);
  v13 = swift_release(v11);
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v49, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int, v13);
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  v15 = LocalizedStringKey.init(stringInterpolation:)(v5);
  v16 = Text.init(_:tableName:bundle:comment:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = v2 + 2;
  v24 = v2[5];
  v25 = v2[6];
  sub_10000E784(v2 + 2, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 24))(v24, v25);
  v27 = Text.font(_:)(v26, v16, v18, v22, v20);
  v29 = v28;
  LOBYTE(v24) = v30;
  v47 = v31;
  swift_release(v26);
  v32 = v24 & 1;
  sub_10000E774(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  v34 = v2[5];
  v33 = v2[6];
  sub_10000E784(v23, v34);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 40))(v34, v33);
  v36 = Color.opacity(_:)(0.7);
  swift_release(v35);
  v37 = v47;
  v38 = Text.foregroundColor(_:)(v36, v27, v29, v32, v47);
  v40 = v39;
  LOBYTE(v34) = v41;
  v43 = v42;
  swift_release(v36);
  sub_10000E774(v27, v29, v32);
  result = swift_bridgeObjectRelease(v37);
  v45 = v48;
  *v48 = v38;
  v45[1] = v40;
  *((_BYTE *)v45 + 16) = v34 & 1;
  v45[3] = v43;
  return result;
}

uint64_t sub_1000312B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v5[136];
  _QWORD v6[2];
  char v7;
  uint64_t v8;

  v6[0] = static VerticalAlignment.center.getter(a1);
  v6[1] = 0;
  v7 = 1;
  sub_100031350(a1, (uint64_t)&v8);
  sub_100011440((uint64_t)v6, (uint64_t)v5, &qword_1000B0958);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  sub_100011440((uint64_t)v5, a2 + 16, &qword_1000B0958);
  sub_100011484((uint64_t)v6, &qword_1000B0958);
  return sub_100011484((uint64_t)v5, &qword_1000B0958);
}

uint64_t sub_100031350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[56];
  _BYTE v13[56];
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = a1 + 16;
  sub_1000113C0(a1 + 16, (uint64_t)&v17);
  v5 = type metadata accessor for ObservableStopwatchModel(0);
  v6 = sub_1000341C0();
  v7 = swift_retain(v3);
  v16[0] = ObservedObject.init(wrappedValue:)(v7, v5, v6);
  v16[1] = v8;
  sub_1000113C0(v4, (uint64_t)&v15);
  v9 = swift_retain(v3);
  v14[0] = ObservedObject.init(wrappedValue:)(v9, v5, v6);
  v14[1] = v10;
  sub_1000357C8((uint64_t)v16, (uint64_t)v13);
  sub_1000357C8((uint64_t)v14, (uint64_t)v12);
  sub_1000357C8((uint64_t)v13, a2);
  sub_1000357C8((uint64_t)v12, a2 + 56);
  sub_100034208((uint64_t)v14);
  sub_100034208((uint64_t)v16);
  sub_100034208((uint64_t)v12);
  return sub_100034208((uint64_t)v13);
}

uint64_t sub_100031440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return sub_1000312B8(v2, a2 + 24);
}

uint64_t sub_100031478(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A988, 1);
}

uint64_t sub_100031488@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String_optional v12;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  Swift::Double v54[2];

  v2 = v1;
  v53 = a1;
  v3 = type metadata accessor for Font._StylisticAlternative(0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[1];
  KeyPath = swift_getKeyPath(&unk_100082908, v7);
  v10 = swift_getKeyPath(&unk_100082930, v9);
  v11 = swift_retain(v6);
  static Published.subscript.getter(v54, v11, KeyPath, v10);
  swift_release(KeyPath);
  swift_release(v10);
  v12 = StopwatchAutoFormatter.formatInterval(_:)(v54[0]);
  swift_release(v6);
  countAndFlagsBits = 12336;
  if (v12.value._object)
    countAndFlagsBits = v12.value._countAndFlagsBits;
  object = (void *)0xE200000000000000;
  if (v12.value._object)
    object = v12.value._object;
  *(_QWORD *)&v54[0] = countAndFlagsBits;
  *(_QWORD *)&v54[1] = object;
  v15 = sub_10000EB0C();
  v16 = Text.init<A>(_:)(v54, &type metadata for String, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v50 = v1 + 2;
  v23 = v1[5];
  v24 = v1[6];
  sub_10000E784(v1 + 2, v23);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
  v26 = Font.monospacedDigit()(v25);
  v27 = swift_release(v25);
  v29 = v51;
  v28 = v52;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v51 + 104))(v5, enum case for Font._StylisticAlternative.three(_:), v52, v27);
  v30 = Font._stylisticAlternative(_:)(v5, v26);
  v31 = swift_release(v26);
  (*(void (**)(char *, uint64_t, __n128))(v29 + 8))(v5, v28, v31);
  v32 = Text.font(_:)(v30, v16, v18, v22, v20);
  v34 = v33;
  LOBYTE(v26) = v35;
  v37 = v36;
  swift_release(v30);
  v38 = v26 & 1;
  sub_10000E774(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  v40 = v2[5];
  v39 = v2[6];
  sub_10000E784(v50, v40);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 40))(v40, v39);
  v42 = Text.foregroundColor(_:)(v41, v32, v34, v38, v37);
  v44 = v43;
  LOBYTE(v16) = v45;
  v47 = v46;
  swift_release(v41);
  sub_10000E774(v32, v34, v38);
  result = swift_bridgeObjectRelease(v37);
  v49 = v53;
  *v53 = v42;
  v49[1] = v44;
  *((_BYTE *)v49 + 16) = v16 & 1;
  v49[3] = v47;
  return result;
}

uint64_t sub_10003170C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = v1;
  v4 = type metadata accessor for Font._StylisticAlternative(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[1];
  KeyPath = swift_getKeyPath(&unk_1000827D0, v8);
  v11 = swift_getKeyPath(&unk_1000827F8, v10);
  v12 = swift_retain(v7);
  static Published.subscript.getter(&v51, v12, KeyPath, v11);
  swift_release(v7);
  swift_release(KeyPath);
  swift_release(v11);
  v13 = sub_10000EB0C();
  v14 = Text.init<A>(_:)(&v51, &type metadata for String, v13);
  v16 = v15;
  v18 = v17 & 1;
  v47 = v19;
  v48 = v2 + 2;
  v21 = v2[5];
  v20 = v2[6];
  sub_10000E784(v2 + 2, v21);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v21, v20);
  v23 = Font.monospacedDigit()(v22);
  v24 = swift_release(v22);
  v26 = v49;
  v25 = v50;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v49 + 104))(v6, enum case for Font._StylisticAlternative.three(_:), v50, v24);
  v27 = Font._stylisticAlternative(_:)(v6, v23);
  v28 = swift_release(v23);
  (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v6, v25, v28);
  v29 = v47;
  v30 = Text.font(_:)(v27, v14, v16, v18, v47);
  v32 = v31;
  LOBYTE(v25) = v33;
  v50 = v34;
  swift_release(v27);
  sub_10000E774(v14, v16, v18);
  swift_bridgeObjectRelease(v29);
  v36 = swift_getKeyPath(&unk_100082CC0, v35);
  v38 = swift_getKeyPath(&unk_100082CF0, v37);
  v40 = v2[5];
  v39 = v2[6];
  sub_10000E784(v48, v40);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 32))(v40, v39);
  v43 = swift_getKeyPath(&unk_100082848, v42);
  result = swift_getKeyPath(&unk_100082CF0, v44);
  *(_QWORD *)a1 = v30;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v25 & 1;
  *(_QWORD *)(a1 + 24) = v50;
  *(_QWORD *)(a1 + 32) = v36;
  *(_QWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v38;
  *(_QWORD *)(a1 + 64) = 0x3FE3333333333333;
  *(_QWORD *)(a1 + 72) = v43;
  *(_QWORD *)(a1 + 80) = v41;
  *(_QWORD *)(a1 + 88) = result;
  *(_QWORD *)(a1 + 96) = 0x3FE3333333333333;
  return result;
}

uint64_t sub_100031978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[56];
  _QWORD v10[2];
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  sub_1000113C0(a1 + 16, (uint64_t)&v11);
  v4 = type metadata accessor for ObservableStopwatchModel(0);
  v5 = sub_1000341C0();
  v6 = swift_retain(v3);
  v10[0] = ObservedObject.init(wrappedValue:)(v6, v4, v5);
  v10[1] = v7;
  sub_1000357C8((uint64_t)v10, (uint64_t)v9);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  sub_1000357C8((uint64_t)v9, a2 + 16);
  sub_100034208((uint64_t)v10);
  return sub_100034208((uint64_t)v9);
}

uint64_t sub_100031A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return sub_100031978(v2, a2 + 24);
}

uint64_t sub_100031A50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A960, 1);
}

uint64_t sub_100031A60(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A938, 1);
}

uint64_t sub_100031A70(uint64_t a1, uint64_t a2)
{
  return sub_100031A94(32.0, a1, a2, (double (*)(uint64_t))&static Font.Weight.regular.getter);
}

uint64_t sub_100031A84(uint64_t a1, uint64_t a2)
{
  return sub_100031A94(15.0, a1, a2, (double (*)(uint64_t))&static Font.Weight.medium.getter);
}

uint64_t sub_100031A94(double a1, uint64_t a2, uint64_t a3, double (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = sub_10000A58C(&qword_1000AF198);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a4(v7);
  v11 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = static Font.system(size:weight:design:)(*(_QWORD *)&v10, 0, v9, a1);
  sub_100011484((uint64_t)v9, &qword_1000AF198);
  return v12;
}

uint64_t sub_100031B5C(uint64_t a1, uint64_t a2)
{
  return sub_100031A94(38.0, a1, a2, (double (*)(uint64_t))&static Font.Weight.light.getter);
}

uint64_t sub_100031B70(uint64_t a1, uint64_t a2)
{
  return sub_100031A94(22.0, a1, a2, (double (*)(uint64_t))&static Font.Weight.semibold.getter);
}

uint64_t sub_100031B80()
{
  __CFString *v0;
  CTFontRef v1;

  v0 = (__CFString *)String._bridgeToObjectiveC()();
  v1 = CTFontCreateWithNameAndOptions(v0, 107.0, 0, 0x20000uLL);

  return Font.init(_:)(v1);
}

uint64_t sub_100031BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_10000A58C(&qword_1000AF198);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = static Font.Weight.semibold.getter(v1);
  v5 = enum case for Font.Design.rounded(_:);
  v6 = type metadata accessor for Font.Design(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v3, v5, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  v8 = static Font.system(size:weight:design:)(*(_QWORD *)&v4, 0, v3, 39.0);
  sub_100011484((uint64_t)v3, &qword_1000AF198);
  return v8;
}

uint64_t sub_100031CCC(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  uint64_t v27;

  v7 = sub_10000A58C(&qword_1000B08C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000B08D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100082788, v13);
  v16 = swift_getKeyPath(&unk_1000827B0, v15);
  v17 = swift_retain(a4);
  static Published.subscript.getter(&v25, v17, KeyPath, v16);
  swift_release(a4);
  swift_release(KeyPath);
  swift_release(v16);
  if (*(double *)&v25 >= 3600.0)
  {
    sub_100032190(a4, (uint64_t *)&v25, a1);
    v22 = v26;
    v23 = v27;
    *(_OWORD *)v9 = v25;
    v9[16] = v22;
    *((_QWORD *)v9 + 3) = v23;
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v24 = sub_100011680(&qword_1000B08D8, &qword_1000B08D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    return _ConditionalContent<>.init(storage:)(v9, v10, &type metadata for Text, v24, &protocol witness table for Text);
  }
  else
  {
    *(_QWORD *)v12 = static VerticalAlignment.center.getter(v18);
    *((_QWORD *)v12 + 1) = 0;
    v12[16] = 0;
    v19 = sub_10000A58C(&qword_1000B08E0);
    sub_100031F28(a4, (uint64_t)&v12[*(int *)(v19 + 44)], a1, a2);
    sub_100011440((uint64_t)v12, (uint64_t)v9, &qword_1000B08D0);
    swift_storeEnumTagMultiPayload(v9, v7, 0);
    v20 = sub_100011680(&qword_1000B08D8, &qword_1000B08D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v9, v10, &type metadata for Text, v20, &protocol witness table for Text);
    return sub_100011484((uint64_t)v12, &qword_1000B08D0);
  }
}

uint64_t sub_100031F28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  id v20;
  double v21;
  double v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v8 = sub_10000A58C(&qword_1000B08E8);
  v40 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v39 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v33 - v11;
  sub_100032190(a1, &v45, a3);
  v36 = v46;
  v37 = v45;
  v35 = v47;
  v38 = v48;
  sub_100032458(a1, &v45, a4);
  v13 = v45;
  v14 = v46;
  v15 = v47;
  v34 = v48;
  v41 = v45;
  v42 = v46;
  v43 = v47;
  v44 = v48;
  v16 = (void *)objc_opt_self(UIFont);
  v17 = objc_msgSend(v16, "systemFontOfSize:weight:", a3, UIFontWeightMedium);
  objc_msgSend(v17, "capHeight");
  v19 = v18;

  v20 = objc_msgSend(v16, "systemFontOfSize:weight:", a4, UIFontWeightBold);
  objc_msgSend(v20, "capHeight");
  v22 = v21;

  View.baselineOffset(_:)(&type metadata for Text, &protocol witness table for Text, v19 - v22);
  sub_10000E774(v13, v14, v15);
  swift_bridgeObjectRelease(v34);
  v23 = v39;
  v24 = v40;
  v25 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v25(v39, v12, v8);
  v27 = v36;
  v26 = v37;
  *(_QWORD *)a2 = v37;
  *(_QWORD *)(a2 + 8) = v27;
  v28 = v35;
  *(_BYTE *)(a2 + 16) = v35;
  v29 = v38;
  *(_QWORD *)(a2 + 24) = v38;
  v30 = sub_10000A58C(&qword_1000B08F0);
  v25((char *)(a2 + *(int *)(v30 + 48)), v23, v8);
  sub_10000E764(v26, v27, v28);
  v31 = *(void (**)(char *, uint64_t))(v24 + 8);
  swift_bridgeObjectRetain(v29);
  v31(v12, v8);
  v31(v23, v8);
  sub_10000E774(v26, v27, v28);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_100032190@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String_optional v17;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  Swift::Double v54[2];

  v53 = a2;
  v5 = type metadata accessor for Font._StylisticAlternative(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100082788, v12);
  v15 = swift_getKeyPath(&unk_1000827B0, v14);
  v16 = swift_retain(a1);
  static Published.subscript.getter(v54, v16, KeyPath, v15);
  swift_release(KeyPath);
  swift_release(v15);
  v17 = StopwatchAutoFormatter.formatInterval(_:)(v54[0]);
  swift_release(a1);
  countAndFlagsBits = 12336;
  if (v17.value._object)
    countAndFlagsBits = v17.value._countAndFlagsBits;
  object = (void *)0xE200000000000000;
  if (v17.value._object)
    object = v17.value._object;
  *(_QWORD *)&v54[0] = countAndFlagsBits;
  *(_QWORD *)&v54[1] = object;
  v20 = sub_10000EB0C();
  v21 = Text.init<A>(_:)(v54, &type metadata for String, v20);
  v23 = v22;
  v25 = v24;
  v27 = v26 & 1;
  v28 = static Font.Weight.medium.getter(v21);
  v29 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v11, 1, 1, v29);
  v30 = static Font.system(size:weight:design:)(*(_QWORD *)&v28, 0, v11, a3);
  sub_100011484((uint64_t)v11, &qword_1000AF198);
  v31 = Font.monospacedDigit()(v30);
  v32 = swift_release(v30);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v6 + 104))(v8, enum case for Font._StylisticAlternative.three(_:), v5, v32);
  v33 = Font._stylisticAlternative(_:)(v8, v31);
  v34 = swift_release(v31);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v34);
  v35 = Text.font(_:)(v33, v21, v23, v27, v25);
  v37 = v36;
  LOBYTE(v31) = v38;
  v40 = v39;
  swift_release(v33);
  v41 = v31 & 1;
  sub_10000E774(v21, v23, v27);
  v42 = swift_bridgeObjectRelease(v25);
  v43 = static Color.orange.getter(v42);
  v44 = Text.foregroundColor(_:)(v43, v35, v37, v41, v40);
  v46 = v45;
  LOBYTE(v23) = v47;
  v49 = v48;
  swift_release(v43);
  sub_10000E774(v35, v37, v41);
  result = swift_bridgeObjectRelease(v40);
  v51 = v53;
  *v53 = v44;
  v51[1] = v46;
  *((_BYTE *)v51 + 16) = v23 & 1;
  v51[3] = v49;
  return result;
}

uint64_t sub_100032458@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>, double a3@<D1>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;

  v61 = a2;
  v5 = type metadata accessor for Font._StylisticAlternative(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000827D0, v12);
  v15 = swift_getKeyPath(&unk_1000827F8, v14);
  v16 = swift_retain(a1);
  static Published.subscript.getter(&v62, v16, KeyPath, v15);
  swift_release(KeyPath);
  swift_release(v15);
  v17 = v63;
  v18 = sub_100035504(2uLL, v62, v63);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_bridgeObjectRelease(v17);
  v25 = static String._fromSubstring(_:)(v18, v20, v22, v24);
  v27 = v26;
  swift_release(a1);
  swift_bridgeObjectRelease(v24);
  v62 = v25;
  v63 = v27;
  v28 = sub_10000EB0C();
  v29 = Text.init<A>(_:)(&v62, &type metadata for String, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v36 = static Font.Weight.bold.getter();
  v37 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v11, 1, 1, v37);
  v38 = static Font.system(size:weight:design:)(*(_QWORD *)&v36, 0, v11, a3);
  sub_100011484((uint64_t)v11, &qword_1000AF198);
  v39 = Font.monospacedDigit()(v38);
  v40 = swift_release(v38);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v6 + 104))(v8, enum case for Font._StylisticAlternative.three(_:), v5, v40);
  v41 = Font._stylisticAlternative(_:)(v8, v39);
  v42 = swift_release(v39);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v42);
  v43 = Text.font(_:)(v41, v29, v31, v35, v33);
  v45 = v44;
  LOBYTE(v39) = v46;
  v48 = v47;
  swift_release(v41);
  v49 = v39 & 1;
  sub_10000E774(v29, v31, v35);
  v50 = swift_bridgeObjectRelease(v33);
  v51 = static Color.orange.getter(v50);
  v52 = Text.foregroundColor(_:)(v51, v43, v45, v49, v48);
  v54 = v53;
  LOBYTE(v31) = v55;
  v57 = v56;
  swift_release(v51);
  sub_10000E774(v43, v45, v49);
  result = swift_bridgeObjectRelease(v48);
  v59 = v61;
  *v61 = v52;
  v59[1] = v54;
  *((_BYTE *)v59 + 16) = v31 & 1;
  v59[3] = v57;
  return result;
}

uint64_t sub_10003273C()
{
  uint64_t v0;

  return sub_100031CCC(*(double *)(v0 + 16), *(double *)(v0 + 24), *(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t sub_100032748@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t KeyPath;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v68 = type metadata accessor for Font._StylisticAlternative(0);
  v66 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = Image.init(systemName:)(0x63746177706F7473, 0xE900000000000068);
  v12 = static Font.Weight.regular.getter();
  v13 = type metadata accessor for Font.Design(0);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v11, 1, 1, v13);
  v67 = static Font.system(size:weight:design:)(*(_QWORD *)&v12, 0, v11, 16.0);
  sub_100011484((uint64_t)v11, &qword_1000AF198);
  KeyPath = swift_getKeyPath(&unk_100082818, v15);
  v64 = static Color.orange.getter(KeyPath);
  v63 = swift_getKeyPath(&unk_100082848, v16);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v17);
  v19 = swift_getKeyPath(&unk_100082878, v18);
  v21 = swift_getKeyPath(&unk_1000828A0, v20);
  v22 = swift_retain(a1);
  static Published.subscript.getter(&v70, v22, v19, v21);
  swift_release(a1);
  swift_release(v19);
  v23 = swift_release(v21);
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v70, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int, v23);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
  v25 = LocalizedStringKey.init(stringInterpolation:)(v8);
  v26 = Text.init(_:tableName:bundle:comment:)(v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = static Font.Weight.regular.getter();
  v14(v11, 1, 1, v13);
  v34 = static Font.system(size:weight:design:)(*(_QWORD *)&v33, 0, v11, 16.0);
  sub_100011484((uint64_t)v11, &qword_1000AF198);
  v35 = Font.monospacedDigit()(v34);
  v36 = swift_release(v34);
  v37 = v66;
  v38 = v68;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v66 + 104))(v5, enum case for Font._StylisticAlternative.three(_:), v68, v36);
  v39 = Font._stylisticAlternative(_:)(v5, v35);
  v40 = swift_release(v35);
  (*(void (**)(char *, uint64_t, __n128))(v37 + 8))(v5, v38, v40);
  v41 = Text.font(_:)(v39, v26, v28, v32, v30);
  v43 = v42;
  LOBYTE(v5) = v44;
  v46 = v45;
  swift_release(v39);
  v47 = v5 & 1;
  sub_10000E774(v26, v28, v32);
  v48 = swift_bridgeObjectRelease(v30);
  v49 = static Color.gray.getter(v48);
  v50 = Text.foregroundColor(_:)(v49, v41, v43, v47, v46);
  v52 = v51;
  LOBYTE(v32) = v53;
  v55 = v54;
  swift_release(v49);
  LOBYTE(v49) = v32 & 1;
  sub_10000E774(v41, v43, v47);
  swift_bridgeObjectRelease(v46);
  v56 = v69;
  v58 = v64;
  v57 = KeyPath;
  *(_QWORD *)a2 = v69;
  *(_QWORD *)(a2 + 8) = v57;
  v59 = v67;
  v60 = v63;
  *(_QWORD *)(a2 + 16) = v67;
  *(_QWORD *)(a2 + 24) = v60;
  *(_QWORD *)(a2 + 32) = v58;
  *(_QWORD *)(a2 + 40) = v50;
  *(_QWORD *)(a2 + 48) = v52;
  *(_BYTE *)(a2 + 56) = v49;
  *(_QWORD *)(a2 + 64) = v55;
  v61 = v56;
  swift_retain(v56);
  swift_retain(v57);
  swift_retain(v59);
  swift_retain(v60);
  swift_retain(v58);
  sub_10000E764(v50, v52, v49);
  swift_bridgeObjectRetain(v55);
  sub_10000E774(v50, v52, v49);
  swift_release(v58);
  swift_release(v60);
  swift_release(v59);
  swift_release(v57);
  swift_release(v61);
  return swift_bridgeObjectRelease(v55);
}

__n128 sub_100032BA8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v4 = *(_QWORD *)(v2 + 8);
  v5 = static VerticalAlignment.center.getter(a1);
  sub_100032748(v4, (uint64_t)&v13);
  v6 = v14;
  v7 = v15;
  v8 = v17;
  v9 = v18;
  v10 = v19;
  result = v16;
  v12 = v13;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_OWORD *)(a2 + 24) = v12;
  *(_QWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(__n128 *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 72) = v8;
  *(_BYTE *)(a2 + 80) = v9;
  *(_QWORD *)(a2 + 88) = v10;
  return result;
}

uint64_t sub_100032C2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A910, 1);
}

uint64_t sub_100032C3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A8E8, 1);
}

uint64_t sub_100032C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a2;
  v41 = sub_10000A58C(&qword_1000B0878);
  __chkstk_darwin(v41);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10000A58C(&qword_1000B0880);
  __chkstk_darwin(v37);
  v39 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_10000A58C(&qword_1000B0888);
  __chkstk_darwin(v38);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000B0890);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  v14 = sub_10000A58C(&qword_1000B0898);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v37 - v18;
  v20 = *(_QWORD *)(a1 + 80);
  KeyPath = swift_getKeyPath(&unk_100082740, v21);
  v24 = swift_getKeyPath(&unk_100082768, v23);
  v25 = swift_retain(v20);
  static Published.subscript.getter(&v42, v25, KeyPath, v24);
  swift_release(v20);
  swift_release(KeyPath);
  swift_release(v24);
  if (v42 == 2)
  {
    sub_1000330A0((uint64_t)v19);
    sub_100033558((uint64_t)v13);
    v26 = &qword_1000B0898;
    sub_100011440((uint64_t)v19, (uint64_t)v17, &qword_1000B0898);
    sub_100011440((uint64_t)v13, (uint64_t)v11, &qword_1000B0890);
    sub_100011440((uint64_t)v17, (uint64_t)v7, &qword_1000B0898);
    v27 = sub_10000A58C(&qword_1000B08B8);
    sub_100011440((uint64_t)v11, (uint64_t)&v7[*(int *)(v27 + 48)], &qword_1000B0890);
    sub_100011484((uint64_t)v11, &qword_1000B0890);
    sub_100011484((uint64_t)v17, &qword_1000B0898);
    v28 = v39;
    sub_100011440((uint64_t)v7, v39, &qword_1000B0888);
    swift_storeEnumTagMultiPayload(v28, v37, 0);
    v29 = sub_100011680(&qword_1000B08A8, &qword_1000B0888, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v30 = sub_100011680(&qword_1000B08B0, &qword_1000B0878, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v28, v38, v41, v29, v30);
    sub_100011484((uint64_t)v7, &qword_1000B0888);
    sub_100011484((uint64_t)v13, &qword_1000B0890);
    v31 = (uint64_t)v19;
  }
  else
  {
    sub_1000338BC((uint64_t)v13);
    sub_100033C30((uint64_t)v19);
    v26 = &qword_1000B0890;
    sub_100011440((uint64_t)v13, (uint64_t)v11, &qword_1000B0890);
    sub_100011440((uint64_t)v19, (uint64_t)v17, &qword_1000B0898);
    sub_100011440((uint64_t)v11, (uint64_t)v4, &qword_1000B0890);
    v32 = sub_10000A58C(&qword_1000B08A0);
    sub_100011440((uint64_t)v17, (uint64_t)&v4[*(int *)(v32 + 48)], &qword_1000B0898);
    sub_100011484((uint64_t)v17, &qword_1000B0898);
    sub_100011484((uint64_t)v11, &qword_1000B0890);
    v33 = v39;
    sub_100011440((uint64_t)v4, v39, &qword_1000B0878);
    swift_storeEnumTagMultiPayload(v33, v37, 1);
    v34 = sub_100011680(&qword_1000B08A8, &qword_1000B0888, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v35 = sub_100011680(&qword_1000B08B0, &qword_1000B0878, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(v33, v38, v41, v34, v35);
    sub_100011484((uint64_t)v4, &qword_1000B0878);
    sub_100011484((uint64_t)v19, &qword_1000B0898);
    v31 = (uint64_t)v13;
  }
  return sub_100011484(v31, v26);
}

uint64_t sub_1000330A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[5];
  uint64_t v59;

  v2 = v1;
  v56 = a1;
  v57 = type metadata accessor for ContentShapeKinds(0);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v54 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000A58C(&qword_1000AF1A0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_10000A58C(&qword_1000AF1C0);
  v17 = __chkstk_darwin(v52);
  v51 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v53 = (char *)&v50 - v20;
  if (qword_1000AED10 != -1)
    v19 = swift_once(&qword_1000AED10, sub_100074524);
  v21 = qword_1000B7030;
  v22 = static Font.Weight.semibold.getter(v19);
  v23 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 1, 1, v23);
  v24 = static Font.system(size:weight:design:)(*(_QWORD *)&v22, 0, v13, 24.0);
  sub_100011484((uint64_t)v13, &qword_1000AF198);
  v25 = v2[2];
  v26 = v2[3];
  sub_100034D84(v2, (uint64_t)v58);
  v27 = swift_allocObject(&unk_10009FCA0, 104, 7);
  v28 = v58[3];
  *(_OWORD *)(v27 + 48) = v58[2];
  *(_OWORD *)(v27 + 64) = v28;
  *(_OWORD *)(v27 + 80) = v58[4];
  *(_QWORD *)(v27 + 96) = v59;
  v29 = v58[1];
  *(_OWORD *)(v27 + 16) = v58[0];
  *(_OWORD *)(v27 + 32) = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for BlendMode.plusLighter(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  v30 = (uint64_t)v16 + *(int *)(v14 + 36);
  v50 = v14;
  sub_10000E800((uint64_t)v6, v30, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *v16 = v21;
  v16[1] = v24;
  v16[2] = 0x69662E6573756170;
  v16[3] = 0xEA00000000006C6CLL;
  v16[4] = v25;
  v16[5] = v26;
  v16[6] = (uint64_t)sub_100034E50;
  v16[7] = v27;
  swift_retain_n(v25, 2);
  swift_retain_n(v26, 2);
  swift_retain(v24);
  swift_bridgeObjectRetain(0xEA00000000006C6CLL);
  swift_retain(v27);
  sub_10000E844((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release(v27);
  swift_release(v26);
  swift_release(v25);
  swift_bridgeObjectRelease(0xEA00000000006C6CLL);
  swift_release(v24);
  v31 = LocalizedStringKey.init(stringLiteral:)(0x6573756150, 0xE500000000000000);
  v33 = v32;
  LOBYTE(v25) = v34;
  v36 = v35;
  v37 = sub_100034E94();
  v38 = v25 & 1;
  v39 = (uint64_t)v51;
  View.accessibilityLabel(_:)(v31, v33, v38, v36, v50, v37);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v33);
  sub_100011484((uint64_t)v16, &qword_1000AF1A0);
  v40 = (uint64_t)v53;
  ModifiedContent<>.accessibilityIdentifier(_:)(0x6573756150, 0xE500000000000000, v52);
  v41 = sub_100011484(v39, &qword_1000AF1C0);
  v42 = v54;
  static ContentShapeKinds.accessibility.getter(v41);
  v43 = sub_10000A58C(&qword_1000B0898);
  v44 = v56;
  v45 = (_BYTE *)(v56 + *(int *)(v43 + 36));
  v46 = sub_10000A58C(&qword_1000B08C0);
  v47 = v55;
  v48 = v57;
  (*(void (**)(_BYTE *, char *, uint64_t))(v55 + 16))(&v45[*(int *)(v46 + 40)], v42, v57);
  *v45 = 0;
  sub_100011440(v40, v44, &qword_1000AF1C0);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v48);
  return sub_100011484(v40, &qword_1000AF1C0);
}

uint64_t sub_100033558@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v41 = a1;
  v42 = type metadata accessor for ContentShapeKinds(0);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v39 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10000A58C(&qword_1000AF1D0);
  v6 = __chkstk_darwin(v37);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v38 = (char *)&v37 - v9;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  v10 = qword_1000B7030;
  v11 = static Font.Weight.thin.getter();
  v12 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
  v13 = static Font.system(size:weight:design:)(*(_QWORD *)&v11, 0, v5, 24.0);
  sub_100011484((uint64_t)v5, &qword_1000AF198);
  v14 = *v1;
  v15 = v1[1];
  sub_100034D84(v1, (uint64_t)&v43);
  v16 = swift_allocObject(&unk_10009FC78, 104, 7);
  v17 = v46;
  *(_OWORD *)(v16 + 48) = v45;
  *(_OWORD *)(v16 + 64) = v17;
  *(_OWORD *)(v16 + 80) = v47;
  *(_QWORD *)(v16 + 96) = v48;
  v18 = v44;
  *(_OWORD *)(v16 + 16) = v43;
  *(_OWORD *)(v16 + 32) = v18;
  *(_QWORD *)&v43 = v10;
  *((_QWORD *)&v43 + 1) = v13;
  *(_QWORD *)&v44 = 0xD000000000000016;
  *((_QWORD *)&v44 + 1) = 0x80000001000871D0;
  *(_QWORD *)&v45 = v14;
  *((_QWORD *)&v45 + 1) = v15;
  *(_QWORD *)&v46 = sub_100034DBC;
  *((_QWORD *)&v46 + 1) = v16;
  swift_retain(v14);
  swift_retain(v15);
  v19 = LocalizedStringKey.init(stringLiteral:)(7364940, 0xE300000000000000);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v26 = sub_10000E8C4();
  View.accessibilityLabel(_:)(v19, v21, v23 & 1, v25, &type metadata for SmallActionButton, v26);
  swift_release(v16);
  swift_release(v15);
  swift_release(v14);
  swift_bridgeObjectRelease(0x80000001000871D0);
  swift_release(v13);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v21);
  v27 = (uint64_t)v38;
  ModifiedContent<>.accessibilityIdentifier(_:)(7364940, 0xE300000000000000, v37);
  v28 = sub_100011484((uint64_t)v8, &qword_1000AF1D0);
  v29 = v39;
  static ContentShapeKinds.accessibility.getter(v28);
  v30 = sub_10000A58C(&qword_1000B0890);
  v31 = v41;
  v32 = (_BYTE *)(v41 + *(int *)(v30 + 36));
  v33 = sub_10000A58C(&qword_1000B08C0);
  v34 = v40;
  v35 = v42;
  (*(void (**)(_BYTE *, char *, uint64_t))(v40 + 16))(&v32[*(int *)(v33 + 40)], v29, v42);
  *v32 = 0;
  sub_100011440(v27, v31, &qword_1000AF1D0);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v35);
  return sub_100011484(v27, &qword_1000AF1D0);
}

uint64_t sub_1000338BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v40 = a1;
  v41 = type metadata accessor for ContentShapeKinds(0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v38 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_10000A58C(&qword_1000AF1D0);
  v6 = __chkstk_darwin(v37);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  v11 = qword_1000B7030;
  v12 = static Font.Weight.thin.getter();
  v13 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
  v14 = static Font.system(size:weight:design:)(*(_QWORD *)&v12, 0, v5, 24.0);
  sub_100011484((uint64_t)v5, &qword_1000AF198);
  v15 = *v1;
  v16 = v1[1];
  sub_100034D84(v1, (uint64_t)&v42);
  v17 = swift_allocObject(&unk_10009FCF0, 104, 7);
  v18 = v45;
  *(_OWORD *)(v17 + 48) = v44;
  *(_OWORD *)(v17 + 64) = v18;
  *(_OWORD *)(v17 + 80) = v46;
  *(_QWORD *)(v17 + 96) = v47;
  v19 = v43;
  *(_OWORD *)(v17 + 16) = v42;
  *(_OWORD *)(v17 + 32) = v19;
  *(_QWORD *)&v42 = v11;
  *((_QWORD *)&v42 + 1) = v14;
  *(_QWORD *)&v43 = 0x6C69662E79616C70;
  *((_QWORD *)&v43 + 1) = 0xE90000000000006CLL;
  *(_QWORD *)&v44 = v15;
  *((_QWORD *)&v44 + 1) = v16;
  *(_QWORD *)&v45 = sub_100034F4C;
  *((_QWORD *)&v45 + 1) = v17;
  swift_retain(v15);
  swift_retain(v16);
  v20 = LocalizedStringKey.init(stringLiteral:)(0x656D75736552, 0xE600000000000000);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v27 = sub_10000E8C4();
  View.accessibilityLabel(_:)(v20, v22, v24 & 1, v26, &type metadata for SmallActionButton, v27);
  swift_release(v17);
  swift_release(v16);
  swift_release(v15);
  swift_bridgeObjectRelease(0xE90000000000006CLL);
  swift_release(v14);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v22);
  ModifiedContent<>.accessibilityIdentifier(_:)(0x656D75736552, 0xE600000000000000, v37);
  v28 = sub_100011484((uint64_t)v8, &qword_1000AF1D0);
  v29 = v38;
  static ContentShapeKinds.accessibility.getter(v28);
  v30 = sub_10000A58C(&qword_1000B0890);
  v31 = v40;
  v32 = (_BYTE *)(v40 + *(int *)(v30 + 36));
  v33 = sub_10000A58C(&qword_1000B08C0);
  v34 = v39;
  v35 = v41;
  (*(void (**)(_BYTE *, char *, uint64_t))(v39 + 16))(&v32[*(int *)(v33 + 40)], v29, v41);
  *v32 = 0;
  sub_100011440((uint64_t)v10, v31, &qword_1000AF1D0);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v35);
  return sub_100011484((uint64_t)v10, &qword_1000AF1D0);
}

uint64_t sub_100033C30@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[5];
  uint64_t v59;

  v2 = v1;
  v56 = a1;
  v57 = type metadata accessor for ContentShapeKinds(0);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v54 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000A58C(&qword_1000AF1A0);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = sub_10000A58C(&qword_1000AF1C0);
  v17 = __chkstk_darwin(v52);
  v51 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v53 = (char *)&v50 - v20;
  if (qword_1000AED10 != -1)
    v19 = swift_once(&qword_1000AED10, sub_100074524);
  v21 = qword_1000B7030;
  v22 = static Font.Weight.semibold.getter(v19);
  v23 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 1, 1, v23);
  v24 = static Font.system(size:weight:design:)(*(_QWORD *)&v22, 0, v13, 20.0);
  sub_100011484((uint64_t)v13, &qword_1000AF198);
  v25 = v2[2];
  v26 = v2[3];
  sub_100034D84(v2, (uint64_t)v58);
  v27 = swift_allocObject(&unk_10009FCC8, 104, 7);
  v28 = v58[3];
  *(_OWORD *)(v27 + 48) = v58[2];
  *(_OWORD *)(v27 + 64) = v28;
  *(_OWORD *)(v27 + 80) = v58[4];
  *(_QWORD *)(v27 + 96) = v59;
  v29 = v58[1];
  *(_OWORD *)(v27 + 16) = v58[0];
  *(_OWORD *)(v27 + 32) = v29;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for BlendMode.plusLighter(_:), v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  v30 = (uint64_t)v16 + *(int *)(v14 + 36);
  v50 = v14;
  sub_10000E800((uint64_t)v6, v30, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *v16 = v21;
  v16[1] = v24;
  v16[2] = 0x6B72616D78;
  v16[3] = 0xE500000000000000;
  v16[4] = v25;
  v16[5] = v26;
  v16[6] = (uint64_t)sub_100034F04;
  v16[7] = v27;
  swift_retain_n(v25, 2);
  swift_retain_n(v26, 2);
  swift_retain(v24);
  swift_bridgeObjectRetain(0xE500000000000000);
  swift_retain(v27);
  sub_10000E844((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release(v27);
  swift_release(v26);
  swift_release(v25);
  swift_bridgeObjectRelease(0xE500000000000000);
  swift_release(v24);
  v31 = LocalizedStringKey.init(stringLiteral:)(0x6C65636E6143, 0xE600000000000000);
  v33 = v32;
  LOBYTE(v25) = v34;
  v36 = v35;
  v37 = sub_100034E94();
  v38 = v25 & 1;
  v39 = (uint64_t)v51;
  View.accessibilityLabel(_:)(v31, v33, v38, v36, v50, v37);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v33);
  sub_100011484((uint64_t)v16, &qword_1000AF1A0);
  v40 = (uint64_t)v53;
  ModifiedContent<>.accessibilityIdentifier(_:)(0x6C65636E6143, 0xE600000000000000, v52);
  v41 = sub_100011484(v39, &qword_1000AF1C0);
  v42 = v54;
  static ContentShapeKinds.accessibility.getter(v41);
  v43 = sub_10000A58C(&qword_1000B0898);
  v44 = v56;
  v45 = (_BYTE *)(v56 + *(int *)(v43 + 36));
  v46 = sub_10000A58C(&qword_1000B08C0);
  v47 = v55;
  v48 = v57;
  (*(void (**)(_BYTE *, char *, uint64_t))(v55 + 16))(&v45[*(int *)(v46 + 40)], v42, v57);
  *v45 = 0;
  sub_100011440(v40, v44, &qword_1000AF1C0);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v48);
  return sub_100011484(v40, &qword_1000AF1C0);
}

uint64_t sub_1000340D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_10000A58C(&qword_1000B0870);
  return sub_100032C4C(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100034120(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A8C0, 1);
}

void *sub_100034130()
{
  return &protocol witness table for ObservableObjectPublisher;
}

unint64_t sub_10003413C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0860;
  if (!qword_1000B0860)
  {
    v1 = sub_10000E880(&qword_1000B0858);
    sub_100011680(&qword_1000B0868, &qword_1000B0850, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0860);
  }
  return result;
}

unint64_t sub_1000341C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2760;
  if (!qword_1000B2760)
  {
    v1 = type metadata accessor for ObservableStopwatchModel(255);
    result = swift_getWitnessTable(&unk_100082708, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2760);
  }
  return result;
}

uint64_t sub_100034208(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  sub_100007CF0((_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_100034240()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100034258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v4 = sub_10000A58C(&qword_1000B0A40);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100082CC0, v7);
  v9 = sub_10000A58C(&qword_1000B0A48);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, a1, v9);
  v10 = &v6[*(int *)(v4 + 36)];
  *(_QWORD *)v10 = KeyPath;
  *((_QWORD *)v10 + 1) = 1;
  v10[16] = 0;
  v12 = swift_getKeyPath(&unk_100082CF0, v11);
  sub_100011440((uint64_t)v6, a2, &qword_1000B0A40);
  v13 = (uint64_t *)(a2 + *(int *)(sub_10000A58C(&qword_1000B0A50) + 36));
  *v13 = v12;
  v13[1] = 0x3FE3333333333333;
  return sub_100011484((uint64_t)v6, &qword_1000B0A40);
}

uint64_t sub_100034360@<X0>(uint64_t a1@<X8>)
{
  return sub_100034538(&qword_1000AF270, (uint64_t (*)(_QWORD))&type metadata accessor for Font.Context, (char *)0x747865746E6F43, (char *)0xE700000000000000, a1);
}

uint64_t sub_100034388(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v10, v9))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v14 = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v11 + 4) = sub_100035020((char *)0x6C6F6F42, (char *)0xE400000000000000, &v14);
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_1000304AC(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_100034514@<X0>(uint64_t a1@<X8>)
{
  return sub_100034538(&qword_1000B0A38, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, (char *)0x656C61636F4CLL, (char *)0xE600000000000000, a1);
}

uint64_t sub_100034538@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v25 = a4;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000A58C(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100011440(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v23 = swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v26 = v24;
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)(v23 + 4) = sub_100035020(a3, v25, &v26);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100034740@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_1000827D0, (uint64_t)&unk_1000827F8, a3);
}

uint64_t sub_100034754(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_1000827D0, (uint64_t)&unk_1000827F8);
}

uint64_t sub_100034768@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_100082A28, (uint64_t)&unk_100082A50, a3);
}

uint64_t sub_10003477C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_100082A28, (uint64_t)&unk_100082A50);
}

uint64_t sub_100034790@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100082878, a2);
  v7 = swift_getKeyPath(&unk_1000828A0, v6);
  static Published.subscript.getter(&v9, v4, KeyPath, v7);
  swift_release(KeyPath);
  result = swift_release(v7);
  *a3 = v9;
  return result;
}

uint64_t sub_10003480C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100082878, a2);
  v6 = swift_getKeyPath(&unk_1000828A0, v5);
  v8 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_10003487C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100082740, a2);
  v7 = swift_getKeyPath(&unk_100082768, v6);
  static Published.subscript.getter(&v9, v4, KeyPath, v7);
  swift_release(KeyPath);
  result = swift_release(v7);
  *a3 = v9;
  return result;
}

uint64_t sub_1000348FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100082740, a2);
  v6 = swift_getKeyPath(&unk_100082768, v5);
  v8 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_100034970@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000828C0, a2);
  v7 = swift_getKeyPath(&unk_1000828E8, v6);
  static Published.subscript.getter(a3, v4, KeyPath, v7);
  swift_release(KeyPath);
  return swift_release(v7);
}

uint64_t sub_1000349D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v18 - v9, a1, v4);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000828C0, v13);
  v16 = swift_getKeyPath(&unk_1000828E8, v15);
  v11(v8, (uint64_t)v10, v4);
  swift_retain(v12);
  static Published.subscript.setter(v8, v12, KeyPath, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_100034ADC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_1000829E0, (uint64_t)&unk_100082A08, a3);
}

uint64_t sub_100034AF0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_1000829E0, (uint64_t)&unk_100082A08);
}

uint64_t sub_100034B04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_100082998, (uint64_t)&unk_1000829C0, a3);
}

uint64_t sub_100034B18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD v13[2];

  v7 = *a1;
  KeyPath = swift_getKeyPath(a3, a2);
  v10 = swift_getKeyPath(a4, v9);
  static Published.subscript.getter(v13, v7, KeyPath, v10);
  swift_release(KeyPath);
  result = swift_release(v10);
  v12 = v13[1];
  *a5 = v13[0];
  a5[1] = v12;
  return result;
}

uint64_t sub_100034B90(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_100082998, (uint64_t)&unk_1000829C0);
}

uint64_t sub_100034BA4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v8 = *a1;
  v7 = a1[1];
  v9 = *a2;
  KeyPath = swift_getKeyPath(a5, a2);
  v12 = swift_getKeyPath(a6, v11);
  v14[0] = v8;
  v14[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  return static Published.subscript.setter(v14, v9, KeyPath, v12);
}

double sub_100034C20@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return sub_100034C84(a1, a2, (uint64_t)&unk_100082950, (uint64_t)&unk_100082978, a3);
}

uint64_t sub_100034C34(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034D10(a1, a2, a3, a4, (uint64_t)&unk_100082950, (uint64_t)&unk_100082978);
}

double sub_100034C48@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return sub_100034C84(a1, a2, (uint64_t)&unk_100082788, (uint64_t)&unk_1000827B0, a3);
}

uint64_t sub_100034C5C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034D10(a1, a2, a3, a4, (uint64_t)&unk_100082788, (uint64_t)&unk_1000827B0);
}

double sub_100034C70@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return sub_100034C84(a1, a2, (uint64_t)&unk_100082908, (uint64_t)&unk_100082930, a3);
}

double sub_100034C84@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, double *a5@<X8>)
{
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  double result;
  double v12;

  v7 = *a1;
  KeyPath = swift_getKeyPath(a3, a2);
  v10 = swift_getKeyPath(a4, v9);
  static Published.subscript.getter(&v12, v7, KeyPath, v10);
  swift_release(KeyPath);
  swift_release(v10);
  result = v12;
  *a5 = v12;
  return result;
}

uint64_t sub_100034CFC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034D10(a1, a2, a3, a4, (uint64_t)&unk_100082908, (uint64_t)&unk_100082930);
}

uint64_t sub_100034D10(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5, a2);
  v11 = swift_getKeyPath(a6, v10);
  v13 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v13, v8, KeyPath, v11);
}

uint64_t sub_100034D84(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for StopwatchCustomLeadingView(a2, a1);
  return a2;
}

uint64_t sub_100034DBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[9];
  v2 = v0[10];
  sub_10000E784(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t sub_100034E04()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  sub_100007CF0(v0 + 6);
  swift_release(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100034E50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[9];
  v2 = v0[10];
  sub_10000E784(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

unint64_t sub_100034E94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AF1A8;
  if (!qword_1000AF1A8)
  {
    v1 = sub_10000E880(&qword_1000AF1A0);
    sub_10000E8C4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000AF1A8);
  }
  return result;
}

uint64_t sub_100034F04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[9];
  v2 = v0[10];
  sub_10000E784(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t sub_100034F4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[9];
  v2 = v0[10];
  sub_10000E784(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

double sub_100034F90@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return sub_100034C84(a1, a2, (uint64_t)&unk_100082788, (uint64_t)&unk_1000827B0, a3);
}

uint64_t sub_100034FB4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034D10(a1, a2, a3, a4, (uint64_t)&unk_100082788, (uint64_t)&unk_1000827B0);
}

uint64_t sub_100034FD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_1000827D0, (uint64_t)&unk_1000827F8, a3);
}

uint64_t sub_100034FFC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_1000827D0, (uint64_t)&unk_1000827F8);
}

char *sub_100035020(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_1000350F0(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100035788((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100035788((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100007CF0(v12);
  return v7;
}

char *sub_1000350F0(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_1000351EC(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

char *sub_1000351EC(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_100035280(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_10003537C(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_10003537C((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_100035280(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100035318(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100035318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10000A58C(&qword_1000B0950);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_10003537C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000A58C(&qword_1000B0950);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_100035464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003548C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000354B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000354DC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_100035504(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    result = String.index(_:offsetBy:limitedBy:)(v4 | (v3 << 16), -(uint64_t)result, 15, a2, a3);
    if ((v5 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000355AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000355D4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000355FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100035624(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_100035654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0928;
  if (!qword_1000B0928)
  {
    v1 = sub_10000E880(&qword_1000B0908);
    sub_100011680(&qword_1000B0930, &qword_1000B0900, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0928);
  }
  return result;
}

uint64_t sub_1000356D8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for StopwatchCustomLockScreenTrailingView(a2, a1);
  return a2;
}

uint64_t sub_10003570C(uint64_t a1)
{
  destroy for StopwatchCustomLockScreenTrailingView(a1);
  return a1;
}

uint64_t sub_100035740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B0938);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035788(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000357C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v3;
  v4 = a2 + 16;
  v5 = a1 + 16;
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 40) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain(v3);
  v8(v4, v5, v7);
  return a2;
}

double sub_100035834@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return sub_100034C84(a1, a2, (uint64_t)&unk_100082908, (uint64_t)&unk_100082930, a3);
}

uint64_t sub_100035858(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034D10(a1, a2, a3, a4, (uint64_t)&unk_100082908, (uint64_t)&unk_100082930);
}

double sub_10003587C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  return sub_100034C84(a1, a2, (uint64_t)&unk_100082950, (uint64_t)&unk_100082978, a3);
}

uint64_t sub_1000358A0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034D10(a1, a2, a3, a4, (uint64_t)&unk_100082950, (uint64_t)&unk_100082978);
}

uint64_t sub_1000358C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_100082998, (uint64_t)&unk_1000829C0, a3);
}

uint64_t sub_1000358E8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_100082998, (uint64_t)&unk_1000829C0);
}

uint64_t sub_10003590C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_1000829E0, (uint64_t)&unk_100082A08, a3);
}

uint64_t sub_100035930(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_1000829E0, (uint64_t)&unk_100082A08);
}

uint64_t sub_100035954@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_100034B18(a1, a2, (uint64_t)&unk_100082A28, (uint64_t)&unk_100082A50, a3);
}

uint64_t sub_100035978(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100034BA4(a1, a2, a3, a4, (uint64_t)&unk_100082A28, (uint64_t)&unk_100082A50);
}

ValueMetadata *type metadata accessor for StandbyConfig()
{
  return &type metadata for StandbyConfig;
}

ValueMetadata *type metadata accessor for LockscreenConfig()
{
  return &type metadata for LockscreenConfig;
}

ValueMetadata *type metadata accessor for ApertureConfig()
{
  return &type metadata for ApertureConfig;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingLapAndTimeView()
{
  return &type metadata for StopwatchCustomTrailingLapAndTimeView;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewTotalTime()
{
  return &type metadata for StopwatchCustomTrailingViewTotalTime;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewCurrentTime()
{
  return &type metadata for StopwatchCustomTrailingViewCurrentTime;
}

uint64_t _s10ClockAngel27StopwatchCustomTrailingViewVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 16;
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain(v3);
  v7(a1 + 16, v4, v6);
  return a1;
}

_QWORD *_s10ClockAngel27StopwatchCustomTrailingViewVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  sub_100007D18(a1 + 2, a2 + 2);
  return a1;
}

uint64_t _s10ClockAngel27StopwatchCustomTrailingViewVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100035B04(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StopwatchCustomTrailingViewLap()
{
  return &type metadata for StopwatchCustomTrailingViewLap;
}

uint64_t sub_100035B60(uint64_t a1)
{
  return sub_100035C68(a1, &qword_1000B0858, (uint64_t (*)(void))sub_10003413C);
}

uint64_t sub_100035B74()
{
  return sub_100011680(&qword_1000B0988, &qword_1000B0990, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_100035BA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0998;
  if (!qword_1000B0998)
  {
    v1 = sub_10000E880(&qword_1000B09A0);
    sub_100011680(&qword_1000B08D8, &qword_1000B08D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0998);
  }
  return result;
}

uint64_t sub_100035C28()
{
  return sub_100011680(&qword_1000B09A8, &qword_1000B09B0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100035C54(uint64_t a1)
{
  return sub_100035C68(a1, &qword_1000B0908, (uint64_t (*)(void))sub_100035654);
}

uint64_t sub_100035C68(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  _QWORD v5[2];

  v5[0] = sub_10000E880(a2);
  v5[1] = a3();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
}

uint64_t sub_100035CB4()
{
  return sub_100011680(&qword_1000B09B8, &qword_1000B09C0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100035CE0()
{
  return sub_100011680(&qword_1000B09C8, &qword_1000B09D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100035D0C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008AA6C, 1);
}

uint64_t sub_100035D1C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008AA44, 1);
}

uint64_t sub_100035D2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008AA1C, 1);
}

uint64_t sub_100035D3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008A9F4, 1);
}

ValueMetadata *type metadata accessor for SingleLineScaled()
{
  return &type metadata for SingleLineScaled;
}

uint64_t sub_100035D6C()
{
  return sub_100011680(&qword_1000B09D8, &qword_1000B0958, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100035D98()
{
  return sub_100035E60(&qword_1000B09E0, &qword_1000B09E8, (void (*)(void))sub_100035DC4);
}

unint64_t sub_100035DC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B09F0;
  if (!qword_1000B09F0)
  {
    v1 = sub_10000E880(&qword_1000B09F8);
    sub_100035E60((unint64_t *)&qword_1000B0A00, &qword_1000B0A08, (void (*)(void))sub_100035EE4);
    sub_100011680(&qword_1000AF598, &qword_1000AF5A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B09F0);
  }
  return result;
}

uint64_t sub_100035E60(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000E880(a2);
    a3();
    sub_100011680(&qword_1000AF5B8, &qword_1000AF5C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100035EE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0A10;
  if (!qword_1000B0A10)
  {
    v1 = sub_10000E880(&qword_1000B0A18);
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0A10);
  }
  return result;
}

unint64_t sub_100035F6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0A20;
  if (!qword_1000B0A20)
  {
    v1 = sub_10000E880(&qword_1000B0A28);
    sub_100035FD8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0A20);
  }
  return result;
}

unint64_t sub_100035FD8()
{
  unint64_t result;

  result = qword_1000B0A30;
  if (!qword_1000B0A30)
  {
    result = swift_getWitnessTable(&unk_100082D34, &type metadata for SingleLineScaled);
    atomic_store(result, (unint64_t *)&qword_1000B0A30);
  }
  return result;
}

uint64_t sub_10003601C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008AA94, 1);
}

uint64_t sub_10003602C()
{
  return sub_100035E60(&qword_1000B0A58, &qword_1000B0A50, (void (*)(void))sub_100036058);
}

unint64_t sub_100036058()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0A60;
  if (!qword_1000B0A60)
  {
    v1 = sub_10000E880(&qword_1000B0A40);
    sub_100011680(&qword_1000B0A68, &qword_1000B0A48, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0A60);
  }
  return result;
}

uint64_t sub_100036100(uint64_t a1, uint64_t a2)
{
  return sub_1000362B4(a1, a2, &qword_1000B0DC8, &qword_1000B0328, &qword_1000B0DB8);
}

uint64_t sub_10003611C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = sub_10000A58C(&qword_1000B0D48);
  __chkstk_darwin(v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000B0D50);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_100011484(a1, &qword_1000B0D48);
    sub_100037D04(a2, (uint64_t)v8);
    v13 = type metadata accessor for CombineIdentifier(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_100011484((uint64_t)v8, &qword_1000B0D48);
  }
  else
  {
    sub_100039BF8(a1, (uint64_t)v11);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_100038C68((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    v16 = *v3;
    *v3 = v19;
    swift_bridgeObjectRelease(v16);
    v17 = type metadata accessor for CombineIdentifier(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
  }
}

uint64_t sub_100036298(uint64_t a1, uint64_t a2)
{
  return sub_1000362B4(a1, a2, &qword_1000B0DD8, &qword_1000B03A8, &qword_1000B0DD0);
}

uint64_t sub_1000362B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = v5;
  v12 = sub_10000A58C(a3);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000A58C(a4);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a1, 1, v15) == 1)
  {
    sub_100011484(a1, a3);
    sub_100037E80(a2, a4, a5, (uint64_t)v14);
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a2, v19);
    return sub_100011484((uint64_t)v14, a3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v18, a1, v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v25 = *v9;
    *v9 = 0x8000000000000000;
    sub_100038DEC((uint64_t)v18, a2, isUniquelyReferenced_nonNull_native, a4, a5);
    v22 = *v9;
    *v9 = v25;
    swift_bridgeObjectRelease(v22);
    v23 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(a2, v23);
  }
}

unint64_t sub_100036458(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_10000A58C(&qword_1000B0DE0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_10000A58C(&qword_1000B0D80);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100011440(v13, (uint64_t)v5, &qword_1000B0DE0);
    result = sub_10003808C((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for CombineIdentifier(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = sub_10000A58C(&qword_1000B0D50);
    result = sub_100039BF8(v10, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10003660C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A58C(&qword_1000B0DE8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_100038124((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_100036714(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    sub_100036780(a2, a3);
    swift_release(v7);
  }
}

uint64_t sub_100036780(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  _QWORD v33[2];
  _BYTE v34[24];

  v3 = v2;
  v6 = sub_10000A58C(&qword_1000B0D50);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v33[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v33[-1] - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (_QWORD *)((char *)&v33[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100037CB4();
  *v16 = static OS_dispatch_queue.main.getter(v17);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v18 & 1) != 0)
  {
    swift_beginAccess(v3 + 24, v34, 0, 0);
    v20 = *(_QWORD *)(v3 + 24);
    v21 = v20 + 64;
    v22 = 1 << *(_BYTE *)(v20 + 32);
    v23 = -1;
    if (v22 < 64)
      v23 = ~(-1 << v22);
    v24 = v23 & *(_QWORD *)(v20 + 64);
    v25 = (unint64_t)(v22 + 63) >> 6;
    result = swift_bridgeObjectRetain_n(v20, 2);
    v26 = 0;
    while (1)
    {
      if (v24)
      {
        v27 = __clz(__rbit64(v24));
        v24 &= v24 - 1;
        v28 = v27 | (v26 << 6);
      }
      else
      {
        v29 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          break;
        }
        if (v29 >= v25)
          goto LABEL_26;
        v30 = *(_QWORD *)(v21 + 8 * v29);
        ++v26;
        if (!v30)
        {
          v26 = v29 + 1;
          if (v29 + 1 >= v25)
            goto LABEL_26;
          v30 = *(_QWORD *)(v21 + 8 * v26);
          if (!v30)
          {
            v26 = v29 + 2;
            if (v29 + 2 >= v25)
              goto LABEL_26;
            v30 = *(_QWORD *)(v21 + 8 * v26);
            if (!v30)
            {
              v26 = v29 + 3;
              if (v29 + 3 >= v25)
                goto LABEL_26;
              v30 = *(_QWORD *)(v21 + 8 * v26);
              if (!v30)
              {
                v26 = v29 + 4;
                if (v29 + 4 >= v25)
                  goto LABEL_26;
                v30 = *(_QWORD *)(v21 + 8 * v26);
                if (!v30)
                {
                  v31 = v29 + 5;
                  if (v31 >= v25)
                  {
LABEL_26:
                    swift_release(v20);
                    return swift_bridgeObjectRelease(v20);
                  }
                  v30 = *(_QWORD *)(v21 + 8 * v31);
                  if (!v30)
                  {
                    while (1)
                    {
                      v26 = v31 + 1;
                      if (__OFADD__(v31, 1))
                        goto LABEL_29;
                      if (v26 >= v25)
                        goto LABEL_26;
                      v30 = *(_QWORD *)(v21 + 8 * v26);
                      ++v31;
                      if (v30)
                        goto LABEL_25;
                    }
                  }
                  v26 = v31;
                }
              }
            }
          }
        }
LABEL_25:
        v24 = (v30 - 1) & v30;
        v28 = __clz(__rbit64(v30)) + (v26 << 6);
      }
      sub_100011440(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v7 + 72) * v28, (uint64_t)v12, &qword_1000B0D50);
      sub_100039BF8((uint64_t)v12, (uint64_t)v10);
      *(double *)v33 = a1;
      *(double *)&v33[1] = a2;
      dispatch thunk of AnySubscriberBase.receive(_:)(v33);
      result = sub_100011484((uint64_t)v10, &qword_1000B0D50);
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100036A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void (*v39)(_QWORD);
  char v40;
  uint64_t (*v41)(uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t (*v58)();
  uint64_t DynamicType;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t (*v106)(uint64_t *, uint64_t);
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char *v110;
  unsigned int v111;
  void (*v112)(uint64_t *, _QWORD, uint64_t);
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;

  v121 = a3;
  v128 = a1;
  v107 = type metadata accessor for CombineIdentifier(0);
  v127 = *(_QWORD *)(v107 - 8);
  v4 = __chkstk_darwin(v107);
  v119 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v117 = (char *)&v101 - v7;
  v116 = v8;
  __chkstk_darwin(v6);
  v126 = (char *)&v101 - v9;
  v10 = sub_10000A58C(&qword_1000B0D48);
  v11 = __chkstk_darwin(v10);
  v118 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v101 - v14;
  v109 = *(_QWORD *)(a2 - 8);
  v16 = *(_QWORD *)(v109 + 64);
  v17 = __chkstk_darwin(v13);
  v102 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v17);
  v105 = (char *)&v101 - v19;
  v20 = __chkstk_darwin(v18);
  v104 = (char *)&v101 - v21;
  v22 = __chkstk_darwin(v20);
  v110 = (char *)&v101 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v101 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v101 - v27;
  v29 = sub_10000A58C(&qword_1000B0D50);
  v108 = *(_QWORD **)(v29 - 8);
  v30 = __chkstk_darwin(v29);
  v103 = (uint64_t)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v123 = (uint64_t *)((char *)&v101 - v33);
  __chkstk_darwin(v32);
  v125 = (uint64_t)&v101 - v34;
  v35 = type metadata accessor for DispatchPredicate(0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (uint64_t *)((char *)&v101 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  v113 = sub_100037CB4();
  *v38 = static OS_dispatch_queue.main.getter(v113);
  v39 = *(void (**)(_QWORD))(v36 + 104);
  v111 = enum case for DispatchPredicate.onQueue(_:);
  v112 = (void (*)(uint64_t *, _QWORD, uint64_t))v39;
  v39(v38);
  v40 = _dispatchPreconditionTest(_:)(v38);
  v41 = *(uint64_t (**)(uint64_t *, uint64_t))(v36 + 8);
  v114 = v38;
  v115 = v35;
  result = v41(v38, v35);
  if ((v40 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v106 = v41;
  v43 = v109;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 16);
  v44(v28, v128, a2);
  v44(v26, (uint64_t)v28, a2);
  v45 = swift_dynamicCast(v15, v26, a2, v29, 6);
  v46 = (_QWORD *)v108[7];
  v47 = v29;
  v48 = v43;
  v49 = v28;
  v124 = a2;
  v108 = v46;
  v122 = v47;
  if (v45)
  {
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v46)(v15, 0, 1, v47);
    v50 = v103;
    sub_100039BF8((uint64_t)v15, v103);
    v51 = v123;
    sub_100039BF8(v50, (uint64_t)v123);
    v52 = v107;
    goto LABEL_13;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v46)(v15, 1, 1, v47);
  sub_100011484((uint64_t)v15, &qword_1000B0D48);
  v53 = v123;
  v54 = v121;
  dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter(a2, *(_QWORD *)(v121 + 8));
  type metadata accessor for AnySubscriberBox(0, a2, v54);
  v55 = v110;
  v44(v110, (uint64_t)v49, a2);
  *v53 = AnySubscriberBox.__allocating_init(_:)(v55);
  v56 = v104;
  v44(v104, (uint64_t)v49, a2);
  v104 = (char *)sub_10000A58C(&qword_1000B0D58);
  if ((swift_dynamicCast(&v129, v56, a2, v104, 6) & 1) != 0)
  {
    sub_10000EC88(&v129, (uint64_t)&v132);
    sub_10000EC88(&v132, (uint64_t)&v129);
    v57 = swift_allocObject(&unk_1000A0270, 56, 7);
    sub_10000EC88(&v129, v57 + 16);
    v58 = sub_100039DC8;
  }
  else
  {
    v131 = 0;
    v129 = 0u;
    v130 = 0u;
    sub_100011484((uint64_t)&v129, &qword_1000B0D60);
    DynamicType = swift_getDynamicType(v49, a2, 0);
    v60 = _typeName(_:qualified:)(DynamicType, 0);
    v61 = v49;
    v63 = v62;
    v57 = swift_allocObject(&unk_1000A0158, 32, 7);
    *(_QWORD *)(v57 + 16) = v60;
    *(_QWORD *)(v57 + 24) = v63;
    v53 = v123;
    v49 = v61;
    v58 = sub_100039928;
  }
  v52 = v107;
  v53[1] = v58;
  v53[2] = v57;
  v64 = v110;
  v44(v110, (uint64_t)v49, a2);
  v65 = *(unsigned __int8 *)(v48 + 80);
  v66 = (v65 + 32) & ~v65;
  v67 = swift_allocObject(&unk_1000A0180, v66 + v16, v65 | 7);
  *(_QWORD *)(v67 + 16) = a2;
  *(_QWORD *)(v67 + 24) = v54;
  v68 = v67 + v66;
  v51 = v123;
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v68, v64, a2);
  v51[3] = sub_100039BB4;
  v51[4] = v67;
  v69 = v105;
  v44(v105, (uint64_t)v49, a2);
  v70 = sub_10000A58C(&qword_1000B0D68);
  v71 = swift_dynamicCast(&v129, v69, a2, v70, 6);
  v47 = v122;
  if (v71)
  {
    sub_10000EC88(&v129, (uint64_t)&v132);
    sub_10000EC88(&v132, (uint64_t)&v129);
    v72 = swift_allocObject(&unk_1000A0248, 56, 7);
    sub_10000EC88(&v129, v72 + 16);
    v73 = sub_100039D80;
LABEL_11:
    v51[5] = v73;
    v51[6] = v72;
    goto LABEL_13;
  }
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  sub_100011484((uint64_t)&v129, &qword_1000B0D70);
  v74 = v102;
  v44(v102, (uint64_t)v49, a2);
  if (swift_dynamicCast(&v129, v74, a2, v104, 6))
  {
    sub_10000EC88(&v129, (uint64_t)&v132);
    sub_10000EC88(&v132, (uint64_t)&v129);
    v72 = swift_allocObject(&unk_1000A0220, 56, 7);
    sub_10000EC88(&v129, v72 + 16);
    v73 = sub_100039D2C;
    goto LABEL_11;
  }
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  sub_100011484((uint64_t)&v129, &qword_1000B0D60);
  v75 = swift_getDynamicType(v49, a2, 0);
  v76 = _typeName(_:qualified:)(v75, 0);
  v78 = v77;
  v79 = swift_allocObject(&unk_1000A01A8, 32, 7);
  *(_QWORD *)(v79 + 16) = v76;
  *(_QWORD *)(v79 + 24) = v78;
  v47 = v122;
  v51[5] = sub_100039BE0;
  v51[6] = v79;
LABEL_13:
  v80 = v125;
  sub_100039BF8((uint64_t)v51, v125);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v124);
  v82 = v126;
  v81 = v127;
  v83 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 16);
  v83(v126, v80 + *(int *)(v47 + 56), v52);
  v84 = swift_allocObject(&unk_1000A01D0, 24, 7);
  v85 = v120;
  swift_weakInit(v84 + 16, v120);
  v86 = v117;
  v83(v117, (uint64_t)v82, v52);
  v87 = *(unsigned __int8 *)(v81 + 80);
  v88 = (v87 + 24) & ~v87;
  v89 = swift_allocObject(&unk_1000A01F8, v88 + v116, v87 | 7);
  *(_QWORD *)(v89 + 16) = v84;
  (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v89 + v88, v86, v52);
  v90 = type metadata accessor for DisplayLink.Subscription();
  v91 = swift_allocObject(v90, 32, 7);
  *(_QWORD *)(v91 + 16) = sub_100039CD8;
  *(_QWORD *)(v91 + 24) = v89;
  v92 = (uint64_t)v119;
  v83(v119, (uint64_t)v82, v52);
  v93 = v80;
  v94 = v118;
  sub_100011440(v93, v118, &qword_1000B0D50);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v108)(v94, 0, 1, v122);
  swift_beginAccess(v85 + 24, &v132, 33, 0);
  sub_10003611C(v94, v92);
  v95 = swift_endAccess(&v132);
  v96 = static OS_dispatch_queue.main.getter(v95);
  v97 = v114;
  *v114 = v96;
  v98 = v115;
  v112(v97, v111, v115);
  LOBYTE(v89) = _dispatchPreconditionTest(_:)(v97);
  result = v106(v97, v98);
  if ((v89 & 1) == 0)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  v99 = *(_QWORD *)(*(_QWORD *)(v85 + 24) + 16);
  v100 = *(void **)(*(_QWORD *)(v85 + 16) + 32);
  if ((((v99 == 0) ^ objc_msgSend(v100, "isPaused")) & 1) != 0)
    objc_msgSend(v100, "setPaused:", v99 == 0);
  v133 = v90;
  v134 = sub_1000073C0(&qword_1000B0D78, (uint64_t (*)(uint64_t))type metadata accessor for DisplayLink.Subscription, (uint64_t)&unk_100082E78);
  *(_QWORD *)&v132 = v91;
  dispatch thunk of Subscriber.receive(subscription:)(&v132, v124, v121);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v126, v52);
  sub_100011484(v125, &qword_1000B0D50);
  return sub_100007CF0(&v132);
}

double sub_10003743C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    sub_100037498(a2);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

id sub_100037498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  char v13;
  uint64_t (*v14)(_QWORD *, uint64_t);
  id result;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  _BYTE v21[24];

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000B0D48);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100037CB4();
  *v10 = ((uint64_t (*)(void))static OS_dispatch_queue.main.getter)();
  v11 = enum case for DispatchPredicate.onQueue(_:);
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 104);
  v12(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = _dispatchPreconditionTest(_:)(v10);
  v14 = *(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8);
  result = (id)v14(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_beginAccess(v2 + 24, v21, 33, 0);
  sub_100037D04(a1, (uint64_t)v6);
  sub_100011484((uint64_t)v6, &qword_1000B0D48);
  v16 = swift_endAccess(v21);
  *v10 = static OS_dispatch_queue.main.getter(v16);
  v12(v10, v11, v7);
  v17 = _dispatchPreconditionTest(_:)(v10);
  result = (id)v14(v10, v7);
  if ((v17 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  v19 = *(void **)(*(_QWORD *)(v2 + 16) + 32);
  result = objc_msgSend(v19, "isPaused");
  if ((v18 == 0) != (_DWORD)result)
    return objc_msgSend(v19, "setPaused:", v18 == 0);
  return result;
}

uint64_t sub_100037668()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100037694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036A44(a1, a2, a3);
}

uint64_t sub_1000376B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = type metadata accessor for DispatchPredicate(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for PlatformDisplayLink();
  swift_allocObject(v4, 48, 7);
  v5 = sub_100037868();
  v6 = type metadata accessor for DisplayLink();
  v7 = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(v7 + 24) = sub_100036458((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100037CB4();
  *v3 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  v9 = _dispatchPreconditionTest(_:)(v3);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
  if ((v9 & 1) != 0)
  {
    *(_QWORD *)(v7 + 16) = v5;
    v11 = swift_allocObject(&unk_1000A01D0, 24, 7);
    swift_weakInit(v11 + 16, v7);
    v12 = v5[2];
    v13 = v5[3];
    v5[2] = sub_100039E50;
    v5[3] = v11;
    result = sub_100010630(v12, v13);
    qword_1000B6EE8 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000377F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100037818()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100037848()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

_QWORD *sub_100037868()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for PlatformDisplayLink.DisplayLinkTarget();
  v0[2] = 0;
  v0[3] = 0;
  v2 = swift_allocObject(v1, 32, 7);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v0[5] = v2;
  v3 = objc_msgSend((id)objc_opt_self(CADisplayLink), "displayLinkWithTarget:selector:", v2, "frame:");
  v0[4] = v3;
  objc_msgSend(v3, "setPaused:", 1);
  v4 = (void *)objc_opt_self(NSRunLoop);
  v5 = v3;
  v6 = objc_msgSend(v4, "mainRunLoop");
  objc_msgSend(v5, "addToRunLoop:forMode:", v6, NSRunLoopCommonModes);

  v7 = v0[5];
  v8 = swift_unownedRetainStrong(v0);
  v9 = swift_unownedRetain(v8);
  swift_unownedRetain(v9);
  swift_retain(v7);
  swift_unownedRelease(v0);
  swift_unownedRelease(v0);
  v10 = swift_unownedRetain(v0);
  swift_release(v10);
  v11 = swift_allocObject(&unk_1000A0298, 24, 7);
  *(_QWORD *)(v11 + 16) = v0;
  v13 = *(_QWORD *)(v7 + 16);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 16) = sub_100039E7C;
  *(_QWORD *)(v7 + 24) = v11;
  sub_100010630(v13, v12);
  swift_release(v7);
  return v0;
}

void sub_1000379C4(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  void (*v7)(double, double);
  uint64_t v8;

  v6 = swift_unownedRetainStrong();
  v7 = *(void (**)(double, double))(v6 + 16);
  v8 = *(_QWORD *)(v6 + 24);
  sub_100010420((uint64_t)v7, v8);
  swift_release(a1);
  if (v7)
  {
    v7(a2, a3);
    sub_100010630((uint64_t)v7, v8);
  }
}

uint64_t sub_100037A40()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 32), "invalidate");
  sub_100010630(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_100037B1C()
{
  uint64_t v0;

  sub_100010630(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

void Frame.timestamp.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*Frame.timestamp.modify())()
{
  return Frame.timestamp.getter;
}

double Frame.duration.getter(double a1, double a2)
{
  return a2;
}

void Frame.duration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*Frame.duration.modify())()
{
  return Frame.timestamp.getter;
}

uint64_t type metadata accessor for DisplayLink()
{
  return objc_opt_self(_TtC10ClockAngel11DisplayLink);
}

uint64_t type metadata accessor for DisplayLink.Subscription()
{
  return objc_opt_self(_TtCC10ClockAngel11DisplayLinkP33_CF2ECDB2B0AE6D6C88870E4CE5D8169812Subscription);
}

uint64_t type metadata accessor for PlatformDisplayLink()
{
  return objc_opt_self(_TtC10ClockAngelP33_CF2ECDB2B0AE6D6C88870E4CE5D8169819PlatformDisplayLink);
}

uint64_t type metadata accessor for PlatformDisplayLink.DisplayLinkTarget()
{
  return objc_opt_self(_TtCC10ClockAngelP33_CF2ECDB2B0AE6D6C88870E4CE5D8169819PlatformDisplayLink17DisplayLinkTarget);
}

uint64_t getEnumTagSinglePayload for Frame(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Frame(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Frame()
{
  return &type metadata for Frame;
}

uint64_t sub_100037C50()
{
  return sub_1000073C0(&qword_1000B0D38, (uint64_t (*)(uint64_t))type metadata accessor for DisplayLink.Subscription, (uint64_t)&unk_100082E50);
}

uint64_t sub_100037C7C()
{
  return sub_1000073C0(&qword_1000B0D40, (uint64_t (*)(uint64_t))type metadata accessor for DisplayLink.Subscription, (uint64_t)&unk_100082E28);
}

void *sub_100037CA8()
{
  return &protocol witness table for Never;
}

unint64_t sub_100037CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AFFE0;
  if (!qword_1000AFFE0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000AFFE0);
  }
  return result;
}

uint64_t sub_100037CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100037E80(a1, &qword_1000B0328, &qword_1000B0DB8, a2);
}

uint64_t sub_100037D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10003808C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000393A4();
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for CombineIdentifier(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = sub_10000A58C(&qword_1000B0D50);
    v15 = *(_QWORD *)(v14 - 8);
    sub_100039BF8(v13 + *(_QWORD *)(v15 + 72) * v7, a2);
    sub_1000389A0(v7, v10, (uint64_t (*)(uint64_t))&type metadata accessor for CombineIdentifier, &qword_1000B0D88, (uint64_t)&protocol conformance descriptor for CombineIdentifier, &qword_1000B0D50);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = sub_10000A58C(&qword_1000B0D50);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_100037E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100037E80(a1, &qword_1000B03A8, &qword_1000B0DD0, a2);
}

uint64_t sub_100037E80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v7 = v4;
  v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  v11 = sub_100037FF4(a1);
  LOBYTE(a1) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v14 = *v7;
    v23 = *v7;
    *v7 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100039628(a2, a3);
      v14 = v23;
    }
    v15 = *(_QWORD *)(v14 + 48);
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v11, v16);
    v17 = *(_QWORD *)(v14 + 56);
    v18 = sub_10000A58C(a2);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 32))(a4, v17 + *(_QWORD *)(v19 + 72) * v11, v18);
    sub_1000389A0(v11, v14, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000B0DB0, (uint64_t)&protocol conformance descriptor for UUID, a2);
    v20 = *v7;
    *v7 = v14;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(a4, 0, 1, v18);
  }
  else
  {
    v22 = sub_10000A58C(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a4, 1, 1, v22);
  }
}

unint64_t sub_100037FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_1000073C0(&qword_1000B0DB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100039100(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000B0DC0, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10003808C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for CombineIdentifier(0);
  v6 = sub_1000073C0(&qword_1000B0D88, (uint64_t (*)(uint64_t))&type metadata accessor for CombineIdentifier, (uint64_t)&protocol conformance descriptor for CombineIdentifier);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100039100(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for CombineIdentifier, &qword_1000B0D90, (uint64_t)&protocol conformance descriptor for CombineIdentifier);
}

unint64_t sub_100038124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100039230(a1, v7);
}

void sub_1000381A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v3 = v2;
  v6 = sub_10000A58C(&qword_1000B0D50);
  v51 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CombineIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000A58C(&qword_1000B0D80);
  v52 = a2;
  v13 = a2;
  v14 = v12;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, v13);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_43;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v49 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v47 = v2;
  v48 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  swift_retain(v14);
  v22 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v26 >= v48)
      break;
    v27 = v49;
    v28 = v49[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v48)
        goto LABEL_36;
      v28 = v49[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v48)
        {
LABEL_36:
          swift_release(v14);
          v3 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v49[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v48)
              goto LABEL_36;
            v28 = v49[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v20 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(_QWORD *)(v9 + 72);
    v31 = *(_QWORD *)(v14 + 48) + v30 * v25;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v31, v8);
      v32 = *(_QWORD *)(v14 + 56);
      v33 = *(_QWORD *)(v51 + 72);
      sub_100039BF8(v32 + v33 * v25, v53);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
      v34 = *(_QWORD *)(v14 + 56);
      v33 = *(_QWORD *)(v51 + 72);
      sub_100011440(v34 + v33 * v25, v53, &qword_1000B0D50);
    }
    v35 = *(_QWORD *)(v16 + 40);
    v36 = sub_1000073C0(&qword_1000B0D88, (uint64_t (*)(uint64_t))&type metadata accessor for CombineIdentifier, (uint64_t)&protocol conformance descriptor for CombineIdentifier);
    v37 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    v38 = -1 << *(_BYTE *)(v16 + 32);
    v39 = v37 & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v21 + 8 * (v39 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v21 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v21 + 8 * v40);
      }
      while (v44 == -1);
      v23 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v21 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v16 + 48) + v30 * v23, v11, v8);
    sub_100039BF8(v53, *(_QWORD *)(v16 + 56) + v33 * v23);
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release(v14);
  v3 = v47;
  v27 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v45 = 1 << *(_BYTE *)(v14 + 32);
  if (v45 >= 64)
    bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v45;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_43:
  swift_release(v14);
  *v3 = v16;
}

void sub_1000385A4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[4];
  int v51;
  uint64_t *v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;

  v6 = v4;
  v9 = sub_10000A58C(a3);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  __chkstk_darwin(v9);
  v58 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10000A58C(a4);
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
    v47 = v14;
LABEL_44:
    swift_release(v47);
    *v6 = v16;
    return;
  }
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v54 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v52 = v6;
  v53 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  v56 = v14;
  v22 = swift_retain(v14);
  v23 = 0;
  v51 = a2;
  v24 = 16;
  if ((a2 & 1) != 0)
    v24 = 32;
  v55 = v24;
  v25 = v24;
  while (1)
  {
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v23 << 6);
      goto LABEL_26;
    }
    v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v53)
    {
      v48 = v56;
      swift_release(v56);
      v6 = v52;
      v30 = v54;
      if ((v51 & 1) != 0)
      {
LABEL_39:
        v49 = 1 << *(_BYTE *)(v48 + 32);
        if (v49 >= 64)
          bzero(v30, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v30 = -1 << v49;
        *(_QWORD *)(v48 + 16) = 0;
      }
LABEL_43:
      v47 = v48;
      goto LABEL_44;
    }
    v30 = v54;
    v31 = v54[v29];
    ++v23;
    if (!v31)
    {
      v23 = v29 + 1;
      if (v29 + 1 >= v53)
        goto LABEL_36;
      v31 = v54[v23];
      if (!v31)
        break;
    }
LABEL_25:
    v20 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_26:
    v33 = v56;
    v34 = *(_QWORD *)(v57 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t, __n128))(v57 + v25))(v13, *(_QWORD *)(v56 + 48) + v34 * v28, v11, v22);
    v35 = *(_QWORD *)(v33 + 56);
    v36 = *(_QWORD *)(v59 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v59 + v25))(v58, v35 + v36 * v28, v60);
    v37 = *(_QWORD *)(v16 + 40);
    v38 = sub_1000073C0(&qword_1000B0DB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v40 = -1 << *(_BYTE *)(v16 + 32);
    v41 = v39 & ~v40;
    v42 = v41 >> 6;
    if (((-1 << v41) & ~*(_QWORD *)(v21 + 8 * (v41 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v41) & ~*(_QWORD *)(v21 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v43 = 0;
      v44 = (unint64_t)(63 - v40) >> 6;
      do
      {
        if (++v42 == v44 && (v43 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v45 = v42 == v44;
        if (v42 == v44)
          v42 = 0;
        v43 |= v45;
        v46 = *(_QWORD *)(v21 + 8 * v42);
      }
      while (v46 == -1);
      v26 = __clz(__rbit64(~v46)) + (v42 << 6);
    }
    *(_QWORD *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v57 + 32))(*(_QWORD *)(v16 + 48) + v34 * v26, v13, v11);
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v59 + 32))(*(_QWORD *)(v16 + 56) + v36 * v26, v58, v60);
    ++*(_QWORD *)(v16 + 16);
  }
  v32 = v29 + 2;
  if (v32 >= v53)
  {
LABEL_36:
    v48 = v56;
    swift_release(v56);
    v6 = v52;
    if ((v51 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v31 = v54[v32];
  if (v31)
  {
    v23 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v23 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v23 >= v53)
      goto LABEL_36;
    v31 = v54[v23];
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
}

unint64_t sub_1000389A0(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(char *, unint64_t, uint64_t);
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v46 = a6;
  v50 = a4;
  v51 = a5;
  v49 = a3;
  v8 = a3(0);
  v52 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8);
  v11 = (char *)&v45 - v10;
  v12 = a2 + 64;
  v13 = -1 << *(_BYTE *)(a2 + 32);
  v14 = (a1 + 1) & ~v13;
  if (((1 << v14) & *(_QWORD *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    v15 = ~v13;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(_QWORD *)(v12 + 8 * (v14 >> 6)) & (1 << v14)) != 0)
    {
      v48 = (result + 1) & v15;
      v16 = *(_QWORD *)(v52 + 72);
      v47 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      v17 = v15;
      do
      {
        v18 = v12;
        v19 = v16;
        v20 = v16 * v14;
        v47(v11, *(_QWORD *)(a2 + 48) + v16 * v14, v8);
        v21 = v17;
        v22 = *(_QWORD *)(a2 + 40);
        v23 = sub_1000073C0(v50, v49, v51);
        v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
        result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v8);
        v25 = v24 & v21;
        v17 = v21;
        if (a1 >= (uint64_t)v48)
        {
          if (v25 >= v48 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            v28 = *(_QWORD *)(a2 + 48);
            v29 = v28 + v19 * a1;
            v30 = v28 + v20;
            if (v19 * a1 < v20 || v29 >= v30 + v19)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v30, 1, v8);
            }
            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v31 = *(_QWORD *)(a2 + 56);
            v32 = sub_10000A58C(v46);
            v33 = *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72);
            v34 = v33 * a1;
            result = v31 + v33 * a1;
            v35 = v33 * v14;
            v36 = v31 + v33 * v14;
            v37 = v36 + v33;
            v38 = v34 < v35 || result >= v37;
            v12 = v18;
            if (v38)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v36, 1, v32);
              a1 = v14;
              v17 = v21;
            }
            else
            {
              a1 = v14;
              v17 = v21;
              if (v34 != v35)
              {
                result = swift_arrayInitWithTakeBackToFront();
                a1 = v14;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v25 >= v48 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }
        v12 = v18;
LABEL_5:
        v14 = (v14 + 1) & v17;
        v16 = v19;
      }
      while (((*(_QWORD *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
    }
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v40 = *v39;
    v41 = (-1 << a1) - 1;
  }
  else
  {
    v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v41 = *v39;
    v40 = (-1 << a1) - 1;
  }
  *v39 = v41 & v40;
  v42 = *(_QWORD *)(a2 + 16);
  v43 = __OFSUB__(v42, 1);
  v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100038C68(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CombineIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10003808C(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = sub_10000A58C(&qword_1000B0D50);
        return sub_100039E08(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1000393A4();
      goto LABEL_7;
    }
    sub_1000381A4(v17, a3 & 1);
    v24 = sub_10003808C(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_100038F90(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_100038DEC(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = a5;
  v29 = a1;
  v7 = (_QWORD **)v5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_100037FF4(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];
        v24 = sub_10000A58C(a4);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, v29, v24);
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a3 & 1) == 0)
    {
      sub_100039628(a4, v28);
      goto LABEL_7;
    }
    sub_1000385A4(v19, a3 & 1, a4, v28);
    v26 = sub_100037FF4(a2);
    if ((v20 & 1) == (v27 & 1))
    {
      v16 = v26;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      return sub_100039044(v16, (uint64_t)v13, v29, v22, a4);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
  return result;
}

uint64_t sub_100038F90(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CombineIdentifier(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = sub_10000A58C(&qword_1000B0D50);
  result = sub_100039BF8(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_100039044(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = sub_10000A58C(a5);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a3, v13);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

unint64_t sub_100039100(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_1000073C0(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100039230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void sub_1000393A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  v1 = sub_10000A58C(&qword_1000B0D50);
  v27 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CombineIdentifier(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A58C(&qword_1000B0D80);
  v24 = v0;
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)(*v0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_23:
    swift_release(v8);
    *v24 = v10;
    return;
  }
  v11 = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)v11 >= v8 + 64 + 8 * v12)
    memmove(v11, (const void *)(v8 + 64), 8 * v12);
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v25 = v8 + 64;
  v26 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v26)
        goto LABEL_23;
      v22 = *(_QWORD *)(v25 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_22:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v5 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v19, v4);
    v20 = *(_QWORD *)(v27 + 72) * v18;
    sub_100011440(*(_QWORD *)(v8 + 56) + v20, (uint64_t)v3, &qword_1000B0D50);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v19, v7, v4);
    sub_100039BF8((uint64_t)v3, *(_QWORD *)(v10 + 56) + v20);
  }
  v23 = v21 + 2;
  if (v23 >= v26)
    goto LABEL_23;
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v26)
      goto LABEL_23;
    v22 = *(_QWORD *)(v25 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

void sub_100039628(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;

  v44 = sub_10000A58C(a1);
  v40 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000A58C(a2);
  v36 = v2;
  v6 = *v2;
  v7 = static _DictionaryStorage.copy(original:)(*v2);
  v8 = *(_QWORD *)(v6 + 16);
  v46 = v7;
  if (!v8)
  {
    swift_release(v6);
    v35 = v46;
    v34 = v36;
LABEL_25:
    *v34 = v35;
    return;
  }
  v9 = v7;
  v10 = (char *)(v7 + 64);
  v11 = (char *)(v6 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v37 = v6 + 64;
  if (v9 != v6 || v10 >= &v11[8 * v12])
  {
    memmove(v10, v11, 8 * v12);
    v9 = v46;
  }
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v45 = v6;
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v38 = (unint64_t)(v14 + 63) >> 6;
  v17 = v39;
  v18 = v40;
  v20 = v41;
  v19 = v42;
  v21 = v44;
  v22 = v46;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v47 = v13;
      v24 = v23 | (v13 << 6);
      v25 = v45;
      goto LABEL_9;
    }
    v30 = v13 + 1;
    v25 = v45;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v38)
      goto LABEL_23;
    v31 = *(_QWORD *)(v37 + 8 * v30);
    v32 = v13 + 1;
    if (!v31)
    {
      v32 = v30 + 1;
      if (v30 + 1 >= v38)
        goto LABEL_23;
      v31 = *(_QWORD *)(v37 + 8 * v32);
      if (!v31)
        break;
    }
LABEL_22:
    v16 = (v31 - 1) & v31;
    v47 = v32;
    v24 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    v26 = *(_QWORD *)(v17 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v20, *(_QWORD *)(v25 + 48) + v26, v19);
    v27 = *(_QWORD *)(v18 + 72) * v24;
    v28 = *(_QWORD *)(v25 + 56) + v27;
    v29 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v43, v28, v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v22 + 48) + v26, v20, v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v22 + 56) + v27, v29, v21);
    v13 = v47;
  }
  v33 = v30 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    swift_release(v45);
    v34 = v36;
    v35 = v46;
    goto LABEL_25;
  }
  v31 = *(_QWORD *)(v37 + 8 * v33);
  if (v31)
  {
    v32 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v32 >= v38)
      goto LABEL_23;
    v31 = *(_QWORD *)(v37 + 8 * v32);
    ++v33;
    if (v31)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_100039904()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039928()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_100039954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26[2];
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000B0D98);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)v26 - v17;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20((char *)v26 - v17, a1, a4);
  v21 = sub_10000A58C(&qword_1000B0DA0);
  if ((swift_dynamicCast(v26, v18, a4, v21, 6) & 1) != 0)
  {
    sub_10000EC88(v26, (uint64_t)v28);
    v22 = v29;
    v23 = v30;
    sub_10000E784(v28, v29);
    dispatch thunk of CustomReflectable.customMirror.getter(v22, v23);
    return sub_100007CF0(v28);
  }
  else
  {
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    sub_100011484((uint64_t)v26, &qword_1000B0DA8);
    v20(v16, a1, a4);
    v25 = type metadata accessor for Mirror.DisplayStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v13, 1, 1, v25);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Mirror.AncestorRepresentation.generated(_:), v6);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v16, &_swiftEmptyArrayStorage, v13, v9, a4);
  }
}

uint64_t sub_100039B5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100039BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return sub_100039954(v0 + ((v2 + 32) & ~v2), (uint64_t)&type metadata for Frame, (uint64_t)&type metadata for Never, v1);
}

uint64_t sub_100039BE0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  a1[3] = &type metadata for String;
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100039BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B0D50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100039C40()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CombineIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_100039CD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CombineIdentifier(0) - 8) + 80);
  return sub_10003743C(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100039D08()
{
  uint64_t v0;

  sub_100007CF0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100039D2C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = v1[5];
  v4 = v1[6];
  sub_10000E784(v1 + 2, v3);
  result = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
  a1[3] = (uint64_t)&type metadata for String;
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t sub_100039D80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_10000E784(v0 + 2, v1);
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter(v1, v2);
}

uint64_t sub_100039DC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  sub_10000E784(v0 + 2, v1);
  return dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
}

uint64_t sub_100039E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B0D50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100039E50(double a1, double a2)
{
  uint64_t v2;

  sub_100036714(v2, a1, a2);
}

uint64_t sub_100039E58()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100039E7C(double a1, double a2)
{
  uint64_t v2;

  sub_1000379C4(*(_QWORD *)(v2 + 16), a1, a2);
}

uint64_t sub_100039E90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100083128, a2);
  v7 = v2;
  v4 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8));
  return v5;
}

uint64_t sub_100039F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000830D8, a2);
  v8 = v2;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v2 + 96);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + 104));
  return v6;
}

double sub_100039FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37[24];

  v33 = a3;
  v35 = a1;
  v34 = sub_10000A58C(&qword_1000B0320);
  v4 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000B0318);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = type metadata accessor for CurrentLocationResult(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v32 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v32 - v21;
  v23 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  v36 = a2;
  v24 = a2 + v23;
  swift_beginAccess(v24, v37, 0, 0);
  sub_100011440(v24, (uint64_t)v12, &qword_1000B0318);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v25(v12, 1, v13) == 1)
  {
    sub_100011484((uint64_t)v12, &qword_1000B0318);
    sub_100011440(v33, (uint64_t)v10, &qword_1000B0318);
    v26 = v25(v10, 1, v13);
    v27 = v35;
    if (v26 == 1)
    {
      sub_100011484((uint64_t)v10, &qword_1000B0318);
    }
    else
    {
      sub_100040E78((uint64_t)v10, (uint64_t)v17);
      sub_1000411D8((uint64_t)v17, (uint64_t)v20);
      v30 = sub_10000A58C(&qword_1000B0328);
      AsyncStream.Continuation.yield(_:)(v20, v30);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v34);
      sub_100026890((uint64_t)v17);
      sub_10000E844((uint64_t)v17, type metadata accessor for CurrentLocationResult);
    }
  }
  else
  {
    sub_100040E78((uint64_t)v12, (uint64_t)v22);
    sub_1000411D8((uint64_t)v22, (uint64_t)v20);
    v28 = sub_10000A58C(&qword_1000B0328);
    v29 = v35;
    AsyncStream.Continuation.yield(_:)(v20, v28);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v34);
    sub_10000E844((uint64_t)v22, type metadata accessor for CurrentLocationResult);
    v27 = v29;
  }
  return sub_10003A570(v27);
}

double sub_10003A28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[24];

  v36 = a3;
  v38 = a1;
  v37 = sub_10000A58C(&qword_1000B03A0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000B0390);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v13 = sub_10000A58C(&qword_1000B0380);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v35 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v35 - v21;
  v23 = *(_QWORD *)(*(_QWORD *)a2 + 96);
  v39 = a2;
  v24 = a2 + v23;
  swift_beginAccess(v24, v40, 0, 0);
  sub_100011440(v24, (uint64_t)v12, &qword_1000B0390);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v25(v12, 1, v13) == 1)
  {
    v26 = v37;
    sub_100011484((uint64_t)v12, &qword_1000B0390);
    sub_100011440(v36, (uint64_t)v10, &qword_1000B0390);
    v27 = v25(v10, 1, v13);
    v28 = v38;
    if (v27 == 1)
    {
      v29 = &qword_1000B0390;
      v30 = (uint64_t)v10;
    }
    else
    {
      sub_1000112A4((uint64_t)v10, (uint64_t)v17, &qword_1000B0380);
      sub_100011440((uint64_t)v17, (uint64_t)v20, &qword_1000B0380);
      v33 = sub_10000A58C(&qword_1000B03A8);
      AsyncStream.Continuation.yield(_:)(v20, v33);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v26);
      sub_100026C40((uint64_t)v17);
      v30 = (uint64_t)v17;
      v29 = &qword_1000B0380;
    }
    sub_100011484(v30, v29);
  }
  else
  {
    sub_1000112A4((uint64_t)v12, (uint64_t)v22, &qword_1000B0380);
    sub_100011440((uint64_t)v22, (uint64_t)v20, &qword_1000B0380);
    v31 = sub_10000A58C(&qword_1000B03A8);
    v32 = v38;
    AsyncStream.Continuation.yield(_:)(v20, v31);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v37);
    sub_100011484((uint64_t)v22, &qword_1000B0380);
    v28 = v32;
  }
  return sub_10003A784(v28);
}

double sub_10003A570(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v25 = a1;
  v2 = sub_10000A58C(&qword_1000B0DC8);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v23 - v11;
  UUID.init()(v10);
  v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v13(v9, v12, v5);
  v14 = sub_10000A58C(&qword_1000B0328);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v4, a1, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v4, 0, 1, v14);
  v16 = v24;
  swift_beginAccess(v24 + *(_QWORD *)(*(_QWORD *)v24 + 112), v26, 33, 0);
  sub_100036100((uint64_t)v4, (uint64_t)v9);
  swift_endAccess(v26);
  v17 = swift_allocObject(&unk_1000A0490, 24, 7);
  swift_weakInit(v17 + 16, v16);
  v13(v9, v12, v5);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = swift_allocObject(&unk_1000A04B8, v19 + v7, v18 | 7);
  *(_QWORD *)(v20 + 16) = v17;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v9, v5);
  v21 = swift_retain(v17);
  AsyncStream.Continuation.onTermination.setter(sub_100041220, v20, v14, v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

double sub_10003A784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  double result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v25 = a1;
  v2 = sub_10000A58C(&qword_1000B0DD8);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v23 - v11;
  UUID.init()(v10);
  v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v13(v9, v12, v5);
  v14 = sub_10000A58C(&qword_1000B03A8);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v4, a1, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v4, 0, 1, v14);
  v16 = v24;
  swift_beginAccess(v24 + *(_QWORD *)(*(_QWORD *)v24 + 112), v26, 33, 0);
  sub_100036298((uint64_t)v4, (uint64_t)v9);
  swift_endAccess(v26);
  v17 = swift_allocObject(&unk_1000A0530, 24, 7);
  swift_weakInit(v17 + 16, v16);
  v13(v9, v12, v5);
  v18 = *(unsigned __int8 *)(v6 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = swift_allocObject(&unk_1000A0558, v19 + v7, v18 | 7);
  *(_QWORD *)(v20 + 16) = v17;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v9, v5);
  v21 = swift_retain(v17);
  AsyncStream.Continuation.onTermination.setter(sub_100041278, v20, v14, v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  return result;
}

double sub_10003A998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t Strong;
  double result;
  uint64_t v15;
  _BYTE v16[24];

  v12 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v12);
  if (Strong)
  {
    v15 = Strong;
    sub_10003AA28(a3, a4, a5, a6, a7);
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

double sub_10003AA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  double result;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v34 = a4;
  v35 = a5;
  v33 = a3;
  v30[0] = a2;
  v31 = a1;
  v36 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.background(_:), v13);
  v32 = static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v17 = swift_allocObject(v30[0], 24, 7);
  swift_weakInit(v17 + 16, v30[1]);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v31, v10);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = swift_allocObject(v33, v19 + v12, v18 | 7);
  *(_QWORD *)(v20 + 16) = v17;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v20 + v19, (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = v34;
  v42 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5FC;
  aBlock[3] = v35;
  v21 = _Block_copy(aBlock);
  swift_retain(v17);
  static DispatchQoS.unspecified.getter(v22);
  v40 = &_swiftEmptyArrayStorage;
  v23 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v25 = sub_100011680((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0, (uint64_t)&protocol conformance descriptor for [A]);
  v26 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v24, v25, v36, v23);
  v27 = (void *)v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v26);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v38);
  v28 = v42;
  swift_release(v17);
  *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  return result;
}

double sub_10003AD40(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t Strong;
  double result;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _BYTE v15[24];
  _BYTE v16[24];

  v8 = sub_10000A58C(a3);
  __chkstk_darwin(v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v16, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v13 = Strong;
    v14 = (os_unfair_lock_s *)(*(_QWORD *)(Strong + *(_QWORD *)(*(_QWORD *)Strong + 104)) + 16);
    swift_beginAccess(v14, v15, 33, 0);
    os_unfair_lock_lock(v14);
    swift_endAccess(v15);
    swift_beginAccess(v13 + *(_QWORD *)(*(_QWORD *)v13 + 112), v15, 33, 0);
    a4(a2);
    sub_100011484((uint64_t)v10, a3);
    swift_endAccess(v15);
    swift_beginAccess(v14, v15, 33, 0);
    os_unfair_lock_unlock(v14);
    swift_endAccess(v15);
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  return result;
}

uint64_t sub_10003AE88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100083038, a2);
  v6 = v2;
  v4 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + 48);
}

double sub_10003AF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100082FE8, a2);
  v6 = v2;
  v4 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v2 + 32)).n128_u64[0];
  return result;
}

double sub_10003AF94@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100082FE8, a2);
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 32);
  *a3 = v7;
  *(_QWORD *)&result = swift_retain(v7).n128_u64[0];
  return result;
}

double sub_10003B024(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100082FE8, a2);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003DDC8, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

double sub_10003B0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100083010, a2);
  v6 = v2;
  v4 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v2 + 40)).n128_u64[0];
  return result;
}

double sub_10003B164@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100083010, a2);
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 40);
  *a3 = v7;
  *(_QWORD *)&result = swift_retain(v7).n128_u64[0];
  return result;
}

double sub_10003B1F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100083010, a2);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003DD90, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

void sub_10003B2AC(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100083038, a2);
  v7 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v6);
  swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + 48);
}

double sub_10003B338(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100083038, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000413F0, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_10003B3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100083088, a2);
  v6 = v2;
  v4 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(id *)(v2 + 56);
}

id sub_10003B464@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100083088, a2);
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(void **)(v4 + 56);
  *a3 = v7;
  return v7;
}

void sub_10003B4F0(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100083088, a2);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100040D7C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_10003B5A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  _QWORD *v20;

  KeyPath = swift_getKeyPath(&unk_1000830D8, a2);
  v20 = v2;
  v4 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v4);
  swift_release(KeyPath);
  v6 = v2[12];
  v5 = v2[13];
  v8 = swift_getKeyPath(&unk_1000830B0, v7);
  v20 = v2;
  swift_bridgeObjectRetain(v5);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v8, v4);
  swift_release(v8);
  v9 = v2[8];
  v10 = v2[9];
  if (v6 == v9 && v5 == v10)
    return swift_bridgeObjectRelease(v5);
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v9, v10, 0);
  result = swift_bridgeObjectRelease(v5);
  if ((v12 & 1) == 0)
  {
    v14 = swift_getKeyPath(&unk_1000830B0, v13);
    v20 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v14, v4);
    swift_release(v14);
    v16 = v2[8];
    v15 = v2[9];
    v18 = swift_getKeyPath(&unk_1000830D8, v17);
    __chkstk_darwin(v18);
    v19[2] = v2;
    v19[3] = v16;
    v19[4] = v15;
    v20 = v2;
    swift_bridgeObjectRetain(v15);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v20, v18, sub_100040D2C, v19, (char *)&type metadata for () + 8, v4);
    swift_release(v18);
    return swift_bridgeObjectRelease(v15);
  }
  return result;
}

uint64_t sub_10003B764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000830B0, a2);
  v8 = v2;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + 72));
  return v6;
}

uint64_t sub_10003B7F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000830B0, a2);
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 72);
  *a3 = *(_QWORD *)(v4 + 64);
  a3[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10003B888(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000830B0, a2);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100040D10, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

void sub_10003B944(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  uint64_t v20;

  KeyPath = swift_getKeyPath(&unk_100083128, a2);
  v20 = v2;
  v4 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v4);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8);
  v8 = swift_getKeyPath(&unk_100083100, v7);
  v20 = v2;
  swift_bridgeObjectRetain(v5);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v8, v4);
  swift_release(v8);
  v10 = *(_QWORD *)(v2 + 88);
  if (!v5)
  {
    if (!v10)
      return;
    goto LABEL_12;
  }
  if (!v10)
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_12;
  }
  v11 = *(_QWORD *)(v2 + 80);
  if (v6 == v11 && v5 == v10)
  {
    swift_bridgeObjectRelease(v5);
    return;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v11, v10, 0);
  swift_bridgeObjectRelease(v5);
  if ((v13 & 1) == 0)
  {
LABEL_12:
    v14 = swift_getKeyPath(&unk_100083100, v9);
    v20 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, v14, v4);
    swift_release(v14);
    v16 = *(_QWORD *)(v2 + 80);
    v15 = *(_QWORD *)(v2 + 88);
    v18 = swift_getKeyPath(&unk_100083128, v17);
    __chkstk_darwin(v18);
    v19[2] = v2;
    v19[3] = v16;
    v19[4] = v15;
    v20 = v2;
    swift_bridgeObjectRetain(v15);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v20, v18, sub_100041130, v19, (char *)&type metadata for () + 8, v4);
    swift_release(v18);
    swift_bridgeObjectRelease(v15);
  }
}

uint64_t sub_10003BB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_100083100, a2);
  v8 = v2;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v2 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + 88));
  return v6;
}

uint64_t sub_10003BBC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100083100, a2);
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 88);
  *a3 = *(_QWORD *)(v4 + 80);
  a3[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10003BC50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100083100, a2);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100041114, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10003BD0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000830D8, a2);
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 104);
  *a3 = *(_QWORD *)(v4 + 96);
  a3[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10003BD9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000830D8, a2);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100040D2C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10003BE58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];

  v2 = v1;
  v50 = a1;
  v3 = sub_10000A58C(&qword_1000B0370);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v46 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - v7;
  v9 = sub_10000A58C(&qword_1000B0380);
  v10 = __chkstk_darwin(v9);
  v47 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - v12;
  v14 = sub_10000A58C(&qword_1000B0378);
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100083060, v17);
  v19 = v1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider___observationRegistrar;
  v52[0] = v2;
  v20 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  v48 = v19;
  v49 = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v52, KeyPath, v20);
  swift_release(KeyPath);
  v21 = v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess(v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature, v52, 0, 0);
  v22 = (uint64_t)&v16[*(int *)(v14 + 48)];
  sub_100011440(v21, (uint64_t)v16, &qword_1000B0380);
  sub_100011440(v50, v22, &qword_1000B0380);
  v50 = v4;
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v23((uint64_t)v16, 1, v3) == 1)
  {
    if (v23(v22, 1, v3) == 1)
      return sub_100011484((uint64_t)v16, &qword_1000B0380);
  }
  else
  {
    sub_100011440((uint64_t)v16, (uint64_t)v13, &qword_1000B0380);
    if (v23(v22, 1, v3) != 1)
    {
      v27 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v8, v22, v3);
      v28 = sub_100011680(&qword_1000B0398, &qword_1000B0370, (uint64_t)&protocol conformance descriptor for Measurement<A>);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v8, v3, v28);
      v30 = *(void (**)(char *, uint64_t))(v27 + 8);
      v30(v8, v3);
      v30(v13, v3);
      result = sub_100011484((uint64_t)v16, &qword_1000B0380);
      v26 = v49;
      if ((v29 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v3);
  }
  sub_100011484((uint64_t)v16, &qword_1000B0378);
  v26 = v49;
LABEL_8:
  v31 = swift_getKeyPath(&unk_100083060, v25);
  v51 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v31, v26);
  swift_release(v31);
  v32 = v47;
  sub_100011440(v21, v47, &qword_1000B0380);
  if (v23(v32, 1, v3) == 1)
    return sub_100011484(v32, &qword_1000B0380);
  v33 = v50;
  v34 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v46, v32, v3);
  v36 = swift_getKeyPath(&unk_100083088, v35);
  v51 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v51, v36, v26);
  swift_release(v36);
  v37 = *(void **)(v2 + 56);
  v38 = sub_100015494(0, &qword_1000B0F60, NSUnitTemperature_ptr);
  v39 = v37;
  v40 = NSMeasurementFormatter.string<A>(from:)(v34, v38);
  v42 = v41;

  v44 = swift_getKeyPath(&unk_1000830B0, v43);
  __chkstk_darwin(v44);
  *(&v46 - 4) = (char *)v2;
  *(&v46 - 3) = (char *)v40;
  *(&v46 - 2) = v42;
  v51 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v51, v44, sub_100040D10, &v46 - 6, (char *)&type metadata for () + 8, v45);
  swift_release(v44);
  swift_bridgeObjectRelease(v42);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v3);
}

uint64_t sub_10003C2F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_100083060, a1);
  v8[0] = v2;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess(v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature, v8, 0, 0);
  return sub_100011440(v6, a2, &qword_1000B0380);
}

uint64_t sub_10003C3A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100083060, a2);
  v9[0] = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = v4 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess(v4 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature, v9, 0, 0);
  return sub_100011440(v7, a3, &qword_1000B0380);
}

uint64_t sub_10003C460(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = sub_10000A58C(&qword_1000B0380);
  __chkstk_darwin(v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100011440(a1, (uint64_t)v6, &qword_1000B0380);
  v7 = *a2;
  KeyPath = swift_getKeyPath(&unk_100083060, v8);
  v13 = v7;
  v14 = v6;
  v15 = v7;
  v10 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_100041438, v12, (char *)&type metadata for () + 8, v10);
  swift_release(KeyPath);
  return sub_100011484((uint64_t)v6, &qword_1000B0380);
}

uint64_t sub_10003C568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v4 = sub_10000A58C(&qword_1000B0380);
  v5 = __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v12[-v8];
  sub_100011440(a2, (uint64_t)&v12[-v8], &qword_1000B0380);
  v10 = a1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  swift_beginAccess(a1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature, v13, 0, 0);
  sub_100011440(v10, (uint64_t)v7, &qword_1000B0380);
  swift_beginAccess(v10, v12, 33, 0);
  sub_100040CB8((uint64_t)v9, v10);
  swift_endAccess(v12);
  sub_10003BE58((uint64_t)v7);
  sub_100011484((uint64_t)v9, &qword_1000B0380);
  return sub_100011484((uint64_t)v7, &qword_1000B0380);
}

uint64_t sub_10003C688@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100083128, a2);
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8);
  *a3 = *(_QWORD *)(v4 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  a3[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10003C724(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100083128, a2);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100041130, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10003C7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000AF7C8);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WeatherService(0);
  *(_QWORD *)(v0 + 16) = WeatherService.__allocating_init()();
  v5 = sub_10000A58C(&qword_1000B0F18);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v7 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 96);
  v8 = sub_10000A58C(&qword_1000B0380);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = *(_QWORD *)(*(_QWORD *)v6 + 104);
  v10 = type metadata accessor for CPUnfairLock();
  v11 = swift_allocObject(v10, 20, 7);
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v6 + v9) = v11;
  *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 112)) = &_swiftEmptyDictionarySingleton;
  *(_BYTE *)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 120)) = 0;
  *(_QWORD *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 32) = 0;
  v12 = type metadata accessor for NWPathMonitor(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v1 + 40) = NWPathMonitor.init()();
  *(_BYTE *)(v1 + 48) = 1;
  v13 = objc_msgSend(objc_allocWithZone((Class)NSMeasurementFormatter), "init");
  objc_msgSend(v13, "setUnitOptions:", 1);
  objc_msgSend(v13, "setUnitStyle:", 2);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v14, "setNumberStyle:", 1);
  objc_msgSend(v14, "setMaximumFractionDigits:", 0);
  objc_msgSend(v13, "setNumberFormatter:", v14);

  *(_QWORD *)(v1 + 56) = v13;
  *(_QWORD *)(v1 + 64) = 11565;
  *(_QWORD *)(v1 + 72) = 0xE200000000000000;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 11565;
  *(_QWORD *)(v1 + 104) = 0xE200000000000000;
  v15 = v1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature;
  v16 = sub_10000A58C(&qword_1000B0370);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v18 = (_QWORD *)(v1 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  *v18 = 0;
  v18[1] = 0;
  ObservationRegistrar.init()(v17);
  sub_10003CB40();
  if (qword_1000AECD0 != -1)
    swift_once(&qword_1000AECD0, sub_1000272D4);
  v19 = sub_1000278F4();
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, "isAuthorizedForWidgetUpdates");

    if (v21)
    {
      KeyPath = swift_getKeyPath(&unk_100083038, v22);
      v30 = v1;
      v24 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v24);
      swift_release(KeyPath);
      if (*(_BYTE *)(v1 + 48) == 1)
      {
        v25 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v4, 1, 1, v25);
        v26 = (_QWORD *)swift_allocObject(&unk_1000A0328, 40, 7);
        v26[2] = 0;
        v26[3] = 0;
        v26[4] = v1;
        swift_retain(v1);
        v27 = sub_10003D8FC((uint64_t)v4, (uint64_t)&unk_1000B0F28, (uint64_t)v26);
        swift_release(v27);
      }
    }
  }
  return v1;
}

void sub_10003CB40()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v26 = *(_QWORD *)(v2 - 8);
  v27 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100083010, v11);
  v28 = v0;
  v13 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v13);
  swift_release(KeyPath);
  v14 = v0[5];
  v15 = swift_allocObject(&unk_1000A03C8, 24, 7);
  swift_weakInit(v15 + 16, v1);
  swift_retain(v14);
  swift_retain(v15);
  sub_100010420((uint64_t)sub_100041400, v15);
  NWPathMonitor.pathUpdateHandler.setter(sub_100041400, v15);
  v16 = swift_release(v14);
  swift_release_n(v15, 2, v16);
  v18 = swift_getKeyPath(&unk_100083010, v17);
  v28 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v18, v13);
  swift_release(v18);
  v19 = v1[5];
  sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
  v20 = swift_retain(v19);
  static DispatchQoS.unspecified.getter(v20);
  v28 = &_swiftEmptyArrayStorage;
  v21 = sub_1000073C0((unint64_t *)&qword_1000B0350, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_10000A58C(&qword_1000B0358);
  v23 = sub_100011680((unint64_t *)&qword_1000B0360, &qword_1000B0358, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v5, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v27);
  v24 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x8000000100087560, v10, v7, v4, 0);
  NWPathMonitor.start(queue:)();
  swift_release(v19);

}

uint64_t sub_10003CE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[6] = a4;
  v5 = sub_10000A58C(&qword_1000B0380);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[9] = v7;
  v4[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000AF7C8);
  v4[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000B0390);
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000B0F38);
  v4[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[14] = v11;
  v4[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000B0F40);
  v4[16] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[17] = v13;
  v4[18] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003CF34, 0, 0);
}

uint64_t sub_10003CF34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[13];
  sub_10003D2E8(v1);
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[19] = v4;
  *v4 = v0;
  v4[1] = sub_10003CFDC;
  return AsyncStream.Iterator.next(isolation:)(v0[12], 0, 0, v0[16]);
}

uint64_t sub_10003CFDC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_10003D030, 0, 0);
}

uint64_t sub_10003D030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v2 + 48))(v1, 1, *(_QWORD *)(v0 + 56)) == 1)
  {
    v3 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(v3, *(_QWORD *)(v0 + 128));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 48);
  v12 = type metadata accessor for TaskPriority(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v12);
  sub_1000112A4(v1, v9, &qword_1000B0380);
  type metadata accessor for MainActor(0);
  v14 = swift_retain(v11);
  v15 = static MainActor.shared.getter(v14);
  v16 = *(unsigned __int8 *)(v2 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = (_QWORD *)swift_allocObject(&unk_1000A0378, v17 + v10, v16 | 7);
  v18[2] = v15;
  v18[3] = &protocol witness table for MainActor;
  v18[4] = v11;
  sub_1000112A4(v9, (uint64_t)v18 + v17, &qword_1000B0380);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12);
  v20 = *(_QWORD *)(v0 + 88);
  if (v19 != 1)
  {
    v28 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v20, v12);
    v21 = v28 | 0x1C00;
    v22 = v18[2];
    if (v22)
      goto LABEL_5;
LABEL_7:
    v25 = 0;
    v27 = 0;
    goto LABEL_8;
  }
  sub_100011484(*(_QWORD *)(v0 + 88), &qword_1000AF7C8);
  v21 = 7168;
  v22 = v18[2];
  if (!v22)
    goto LABEL_7;
LABEL_5:
  v23 = v18[3];
  ObjectType = swift_getObjectType(v22);
  swift_unknownObjectRetain(v22);
  v25 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v23);
  v27 = v26;
  swift_unknownObjectRelease(v22);
LABEL_8:
  v29 = swift_allocObject(&unk_1000A03A0, 32, 7);
  *(_QWORD *)(v29 + 16) = &unk_1000B0F50;
  *(_QWORD *)(v29 + 24) = v18;
  if (v27 | v25)
  {
    v30 = v0 + 16;
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = v25;
    *(_QWORD *)(v0 + 40) = v27;
  }
  else
  {
    v30 = 0;
  }
  v31 = swift_task_create(v21, v30, (char *)&type metadata for () + 8, &unk_1000B0F58, v29);
  swift_release(v31);
  v32 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 152) = v32;
  *v32 = v0;
  v32[1] = sub_10003CFDC;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 96), 0, 0, *(_QWORD *)(v0 + 128));
}

void sub_10003D2E8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];

  v2 = v1;
  v40 = a1;
  v44 = sub_10000A58C(&qword_1000B0F68);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000A58C(&qword_1000B0F70);
  v5 = __chkstk_darwin(v4);
  v45 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v41 = (char *)&v38 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v38 - v9;
  v11 = sub_10000A58C(&qword_1000AF7C8);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000A58C(&qword_1000B0390);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v38 - v18;
  v20 = *(_QWORD *)(v1 + 24);
  v21 = (os_unfair_lock_s *)(*(_QWORD *)(v20 + *(_QWORD *)(*(_QWORD *)v20 + 104)) + 16);
  swift_beginAccess(v21, v47, 33, 0);
  swift_retain(v1);
  os_unfair_lock_lock(v21);
  v22 = *(_QWORD *)(*(_QWORD *)v20 + 120);
  v23 = *(_BYTE *)(v20 + v22);
  if ((v23 & 1) == 0)
    *(_BYTE *)(v20 + v22) = 1;
  os_unfair_lock_unlock(v21);
  swift_endAccess(v47);
  v24 = sub_10000A58C(&qword_1000B0380);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v19, 1, 1, v24);
  if ((v23 & 1) == 0)
  {
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v13, 1, 1, v26);
    v27 = swift_allocObject(&unk_1000A03C8, 24, 7);
    swift_weakInit(v27 + 16, v2);
    v28 = (_QWORD *)swift_allocObject(&unk_1000A03F0, 40, 7);
    v28[2] = 0;
    v28[3] = 0;
    v28[4] = v27;
    v29 = sub_10003EA40((uint64_t)v13, (uint64_t)&unk_1000B0F80, (uint64_t)v28);
    swift_release(v29);
    v30 = sub_10000A58C(&qword_1000B0370);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v17, 1, 1, v30);
    v25(v17, 0, 1, v24);
    sub_10001E928((uint64_t)v17, (uint64_t)v19, &qword_1000B0390);
  }
  v46 = v2;
  v31 = sub_10000A58C(&qword_1000B0F38);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v33(v10, 1, 1, v31);
  swift_beginAccess(v21, v47, 33, 0);
  os_unfair_lock_lock(v21);
  v34 = swift_endAccess(v47);
  __chkstk_darwin(v34);
  *(&v38 - 2) = v20;
  *(&v38 - 1) = (uint64_t)v19;
  v39 = v19;
  v35 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v43, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v44);
  v36 = (uint64_t)v41;
  AsyncStream.init(_:bufferingPolicy:_:)(v24, v35, sub_100040DB0, &v38 - 4, v24);
  v33((char *)v36, 0, 1, v31);
  sub_10001E928(v36, (uint64_t)v10, &qword_1000B0F70);
  swift_beginAccess(v21, v47, 33, 0);
  os_unfair_lock_unlock(v21);
  swift_endAccess(v47);
  v37 = v45;
  sub_100011440((uint64_t)v10, v45, &qword_1000B0F70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v37, 1, v31) == 1)
  {
    swift_release(v46);
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v40, v37, v31);
    sub_100011484((uint64_t)v10, &qword_1000B0F70);
    sub_100011484((uint64_t)v39, &qword_1000B0390);
    swift_release(v46);
  }
}

uint64_t sub_10003D768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v5[3] = a4;
  v5[4] = a5;
  v6 = sub_10000A58C(&qword_1000B0380);
  v5[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[6] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_10003D7F8, v9, v10);
}

uint64_t sub_10003D7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 48));
  sub_100011440(v2, v1, &qword_1000B0380);
  KeyPath = swift_getKeyPath(&unk_100083060, v4);
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v3;
  v7 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100040CA0, v6, (char *)&type metadata for () + 8, v7);
  swift_release(KeyPath);
  swift_task_dealloc(v6);
  sub_100011484(v1, &qword_1000B0380);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003D8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100011484(a1, &qword_1000AF7C8);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1000A0350, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000AF7E0, v16);
}

uint64_t sub_10003DA48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_100082FE8, a2);
  v5 = v2 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider___observationRegistrar;
  v13 = v2;
  v6 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, KeyPath, v6);
  swift_release(KeyPath);
  v8 = *(_QWORD *)(v2 + 32);
  if (v8)
  {
    swift_retain(*(_QWORD *)(v3 + 32));
    sub_10000A58C(&qword_1000B0300);
    Task.cancel()();
    swift_release(v8);
  }
  v9 = swift_getKeyPath(&unk_100083010, v7);
  v13 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, v9, v6);
  swift_release(v9);
  v10 = *(_QWORD *)(v3 + 40);
  swift_retain(v10);
  NWPathMonitor.cancel()();
  swift_release(v10);
  swift_release(*(_QWORD *)(v3 + 16));
  swift_release(*(_QWORD *)(v3 + 24));
  swift_release(*(_QWORD *)(v3 + 32));
  swift_release(*(_QWORD *)(v3 + 40));

  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 104));
  sub_100011484(v3 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__currentTemperature, &qword_1000B0380);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName + 8));
  v11 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v5, v11);
  return v3;
}

uint64_t sub_10003DBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003DA48(a1, a2);
  return swift_deallocClassInstance(v2, *(unsigned int *)(*(_QWORD *)v2 + 48), *(unsigned __int16 *)(*(_QWORD *)v2 + 52));
}

uint64_t sub_10003DC14()
{
  return type metadata accessor for WeatherDataProvider(0);
}

uint64_t type metadata accessor for WeatherDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B0E30;
  if (!qword_1000B0E30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WeatherDataProvider);
  return result;
}

void sub_10003DC58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[2] = "\b";
  v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[4] = &unk_100082F80;
  v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[6] = &unk_100082F98;
  v6[7] = &unk_100082FB0;
  v6[8] = &unk_100082F98;
  sub_10003DD28(319);
  if (v3 <= 0x3F)
  {
    v6[9] = *(_QWORD *)(v2 - 8) + 64;
    v6[10] = &unk_100082FB0;
    v4 = type metadata accessor for ObservationRegistrar(319);
    if (v5 <= 0x3F)
    {
      v6[11] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 12, v6, a1 + 80);
    }
  }
}

void sub_10003DD28(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B0E40)
  {
    v2 = sub_10000E880(&qword_1000B0370);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B0E40);
  }
}

uint64_t sub_10003DD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_10003DDC8()
{
  return sub_100040F78();
}

uint64_t sub_10003DDE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000B0F24);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100041408;
  return sub_10003CE2C(a1, v4, v5, v6);
}

double sub_10003DE54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  void (*v13)(_BYTE *, uint64_t);
  uint64_t Strong;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t KeyPath;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  _BYTE v26[24];

  v3 = type metadata accessor for NWPath.Status(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v5);
  v10 = &v24[-v9];
  v11 = a2 + 16;
  NWPath.status.getter(v8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for NWPath.Status.satisfied(_:), v3);
  v12 = static NWPath.Status.== infix(_:_:)(v10, v7);
  v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v10, v3);
  if ((v12 & 1) != 0)
  {
    swift_beginAccess(v11, v26, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    if (!Strong)
      return result;
    v17 = Strong;
    KeyPath = swift_getKeyPath(&unk_100083038, v15);
    __chkstk_darwin(KeyPath);
    v19 = &v24[-32];
    *(_QWORD *)&v24[-16] = v17;
    v24[-8] = 1;
    v25 = v17;
    v20 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
    v21 = (char *)&type metadata for () + 8;
  }
  else
  {
    swift_beginAccess(v11, v26, 0, 0);
    v22 = swift_weakLoadStrong(v11);
    if (!v22)
      return result;
    v17 = v22;
    KeyPath = swift_getKeyPath(&unk_100083038, v23);
    __chkstk_darwin(KeyPath);
    v19 = &v24[-32];
    *(_QWORD *)&v24[-16] = v17;
    v24[-8] = 0;
    v25 = v17;
    v20 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
    v21 = (char *)&type metadata for () + 8;
  }
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v25, KeyPath, sub_100041424, v19, v21, v20);
  swift_release(v17);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10003E098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4[17] = a4;
  v5 = sub_10000A58C(&qword_1000AF7C8);
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B0380);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10000A58C(&qword_1000B0F88) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[20] = swift_task_alloc(v7);
  v4[21] = swift_task_alloc(v7);
  v8 = sub_10000A58C(&qword_1000B0130);
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CurrentLocationResult(0);
  v4[23] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[24] = v10;
  v4[25] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000A58C(&qword_1000B0318);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C((uint64_t *)&unk_1000B03C0);
  v4[27] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[28] = v13;
  v4[29] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000A58C(&qword_1000B0F90);
  v4[30] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[31] = v15;
  v4[32] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003E214, 0, 0);
}

uint64_t sub_10003E214()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (qword_1000AECD0 != -1)
    swift_once(&qword_1000AECD0, sub_1000272D4);
  v2 = v0[28];
  v1 = v0[29];
  v3 = v0[27];
  v4 = v0[17] + 16;
  sub_100027304(v1);
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess(v4, v0 + 6, 0, 0);
  v0[33] = 0;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[34] = v5;
  *v5 = v0;
  v5[1] = sub_10003E314;
  return AsyncStream.Iterator.next(isolation:)(v0[26], 0, 0, v0[30]);
}

uint64_t sub_10003E314()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  return swift_task_switch(sub_10003E368, 0, 0);
}

uint64_t sub_10003E368()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  id *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ObjectType;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;

  v1 = v0[26];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[24] + 48))(v1, 1, v0[23]) == 1)
    goto LABEL_8;
  v2 = v0[17] + 16;
  sub_100040E78(v1, v0[25]);
  Strong = swift_weakLoadStrong(v2);
  if (!Strong)
  {
    sub_10000E844(v0[25], type metadata accessor for CurrentLocationResult);
    v1 = v0[26];
LABEL_8:
    v21 = v0[32];
    v22 = v0[29];
    v23 = v0[25];
    v25 = v0[21];
    v24 = v0[22];
    v27 = v0[19];
    v26 = v0[20];
    v28 = v0[18];
    (*(void (**)(uint64_t, _QWORD))(v0[31] + 8))(v21, v0[30]);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v1);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  v5 = Strong;
  KeyPath = swift_getKeyPath(&unk_100082FE8, v4);
  v0[15] = v5;
  v7 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 15, KeyPath, v7);
  v8 = swift_release(KeyPath);
  v9 = *(_QWORD *)(v5 + 32);
  if (v9)
  {
    swift_retain(*(_QWORD *)(v5 + 32));
    sub_10000A58C(&qword_1000B0300);
    Task.cancel()();
    v8 = swift_release(v9);
  }
  v10 = v0[33];
  static Task<>.checkCancellation()(v8);
  if (v10)
  {
    v11 = v0[31];
    v12 = v0[32];
    v14 = v0[29];
    v13 = v0[30];
    v16 = v0[25];
    v15 = v0[26];
    v17 = v5;
    v19 = v0[21];
    v18 = v0[22];
    v72 = v0[20];
    v73 = v0[19];
    v74 = v0[18];
    swift_release(v17);
    sub_10000E844(v16, type metadata accessor for CurrentLocationResult);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  v30 = v0[22];
  sub_100011440(v0[25], v30, &qword_1000B0130);
  v31 = type metadata accessor for CurrentLocation(0);
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31);
  v33 = (id *)v0[22];
  v71 = v5;
  if (v32 == 1)
  {
    v35 = v0[20];
    v34 = v0[21];
    sub_100011484((uint64_t)v33, &qword_1000B0130);
    v36 = type metadata accessor for CurrentWeather(0);
    v37 = *(_QWORD *)(v36 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v34, 1, 1, v36);
    v38 = *(_QWORD *)(v5 + 24);
    sub_100011440(v34, v35, &qword_1000B0F88);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36);
    v41 = v0[19];
    v40 = v0[20];
    if (v39 == 1)
    {
      sub_100011484(v0[20], &qword_1000B0F88);
      v42 = sub_10000A58C(&qword_1000B0370);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
    }
    else
    {
      CurrentWeather.temperature.getter();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v40, v36);
      v54 = sub_10000A58C(&qword_1000B0370);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v41, 0, 1, v54);
    }
    v55 = v0[25];
    v56 = v0[21];
    v57 = v0[19];
    v58 = (os_unfair_lock_s *)(*(_QWORD *)(v38 + *(_QWORD *)(*(_QWORD *)v38 + 104)) + 16);
    swift_beginAccess(v58, v0 + 9, 33, 0);
    os_unfair_lock_lock(v58);
    swift_endAccess(v0 + 9);
    sub_100026C40(v57);
    swift_beginAccess(v58, v0 + 12, 33, 0);
    os_unfair_lock_unlock(v58);
    swift_endAccess(v0 + 12);
    sub_100011484(v57, &qword_1000B0380);
    sub_100011484(v56, &qword_1000B0F88);
    sub_10000E844(v55, type metadata accessor for CurrentLocationResult);
    swift_release(v71);
  }
  else
  {
    v43 = v0[18];
    v75 = *v33;
    sub_10000E844((uint64_t)v33, type metadata accessor for CurrentLocation);
    v44 = type metadata accessor for TaskPriority(0);
    v45 = *(_QWORD *)(v44 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v43, 1, 1, v44);
    v46 = swift_allocObject(&unk_1000A03C8, 24, 7);
    swift_weakInit(v46 + 16, v5);
    v47 = (_QWORD *)swift_allocObject(&unk_1000A0418, 56, 7);
    v47[2] = 0;
    v48 = v47 + 2;
    v47[3] = 0;
    v47[4] = v46;
    v47[5] = v75;
    v47[6] = v5;
    LODWORD(v46) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44);
    v76 = v75;
    v49 = swift_retain(v5);
    v50 = v0[18];
    if ((_DWORD)v46 == 1)
    {
      sub_100011484(v0[18], &qword_1000AF7C8);
      v51 = 0;
      v52 = 0;
      v53 = 7168;
    }
    else
    {
      v59 = TaskPriority.rawValue.getter(v49);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v50, v44);
      v53 = v59 | 0x1C00;
      v60 = *v48;
      if (*v48)
      {
        v61 = v47[3];
        ObjectType = swift_getObjectType(*v48);
        swift_unknownObjectRetain(v60);
        v51 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v61);
        v52 = v63;
        swift_unknownObjectRelease(v60);
      }
      else
      {
        v51 = 0;
        v52 = 0;
      }
    }
    if (v52 | v51)
    {
      v64 = v0 + 2;
      v0[2] = 0;
      v0[3] = 0;
      v0[4] = v51;
      v0[5] = v52;
    }
    else
    {
      v64 = 0;
    }
    v65 = v0[25];
    v66 = swift_task_create(v53, v64, (char *)&type metadata for () + 8, &unk_1000B0FA0, v47);
    v68 = swift_getKeyPath(&unk_100082FE8, v67);
    v69 = swift_task_alloc(32);
    *(_QWORD *)(v69 + 16) = v71;
    *(_QWORD *)(v69 + 24) = v66;
    v0[16] = v71;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v68, sub_10003DDC8, v69, (char *)&type metadata for () + 8, v7);
    swift_release(v66);
    swift_release(v68);

    swift_release(v71);
    swift_task_dealloc(v69);
    sub_10000E844(v65, type metadata accessor for CurrentLocationResult);
  }
  v0[33] = 0;
  v70 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[34] = v70;
  *v70 = v0;
  v70[1] = sub_10003E314;
  return AsyncStream.Iterator.next(isolation:)(v0[26], 0, 0, v0[30]);
}

uint64_t sub_10003EA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100011484(a1, &qword_1000AF7C8);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10003EB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6[26] = a5;
  v6[27] = a6;
  v6[25] = a4;
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v6[28] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[29] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[30] = swift_task_alloc(v9);
  v6[31] = swift_task_alloc(v9);
  v10 = type metadata accessor for ContinuousClock(0);
  v6[32] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[33] = v11;
  v6[34] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000AF7C8);
  v6[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CurrentWeather(0);
  v6[36] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[37] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v6[38] = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[39] = swift_task_alloc(v16);
  v6[40] = swift_task_alloc(v16);
  v17 = sub_10000A58C(&qword_1000B0FA8);
  v6[41] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v6[42] = v18;
  v6[43] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_10000A58C(&qword_1000B0F88) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[44] = swift_task_alloc(v19);
  v6[45] = swift_task_alloc(v19);
  v6[46] = swift_task_alloc(v19);
  return swift_task_switch(sub_10003ECDC, 0, 0);
}

uint64_t sub_10003ECDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 200) + 16;
  swift_beginAccess(v2, v0 + 96, 0, 0);
  swift_beginAccess(v2, v0 + 48, 0, 0);
  v3 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1 + 56);
  *(_QWORD *)(v0 + 376) = v3;
  v4 = *(_QWORD *)(v0 + 200) + 16;
  v3(*(_QWORD *)(v0 + 368), 1, 1, *(_QWORD *)(v0 + 288));
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v0 + 288);
    v8 = *(_QWORD *)(Strong + 16);
    *(_QWORD *)(v0 + 384) = v8;
    swift_retain(v8);
    v9 = swift_release(v6);
    static WeatherQuery.current.getter(v7, v9);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to WeatherService.weather<A>(for:including:)[1]);
    *(_QWORD *)(v0 + 392) = v10;
    *v10 = v0;
    v10[1] = sub_10003F278;
    return WeatherService.weather<A>(for:including:)(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 288));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 368);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 376);
    v14 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD *)(v0 + 288);
    sub_100011484(v12, &qword_1000B0F88);
    v13(v14, 1, 1, v15);
    sub_1000112A4(v14, v12, &qword_1000B0F88);
    v16 = *(_QWORD *)(v0 + 352);
    v17 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 296);
    sub_100011440(*(_QWORD *)(v0 + 368), v16, &qword_1000B0F88);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      sub_100011484(*(_QWORD *)(v0 + 352), &qword_1000B0F88);
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 200) + 16;
      v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 32);
      v21(*(char **)(v0 + 320), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 288));
      v22 = swift_weakLoadStrong(v20);
      v23 = *(_QWORD *)(v0 + 320);
      if (v22)
      {
        v24 = *(_QWORD *)(v0 + 312);
        v65 = v22;
        v66 = *(_QWORD *)(v0 + 304);
        v26 = *(_QWORD *)(v0 + 288);
        v25 = *(_QWORD *)(v0 + 296);
        v27 = *(_QWORD *)(v0 + 280);
        v67 = v27;
        v28 = *(_QWORD *)(v0 + 216);
        v29 = type metadata accessor for TaskPriority(0);
        v30 = *(_QWORD *)(v29 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v27, 1, 1, v29);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v23, v26);
        type metadata accessor for MainActor(0);
        v31 = swift_retain(v28);
        v32 = static MainActor.shared.getter(v31);
        v33 = *(unsigned __int8 *)(v25 + 80);
        v34 = (v33 + 40) & ~v33;
        v35 = (char *)swift_allocObject(&unk_1000A0440, v34 + v66, v33 | 7);
        *((_QWORD *)v35 + 2) = v32;
        *((_QWORD *)v35 + 3) = &protocol witness table for MainActor;
        *((_QWORD *)v35 + 4) = v28;
        v21(&v35[v34], v24, v26);
        v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v67, 1, v29);
        v38 = *(_QWORD *)(v0 + 280);
        if (v36 == 1)
        {
          sub_100011484(*(_QWORD *)(v0 + 280), &qword_1000AF7C8);
          v39 = 7168;
        }
        else
        {
          v40 = TaskPriority.rawValue.getter(v37);
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v38, v29);
          v39 = v40 | 0x1C00;
        }
        v41 = *((_QWORD *)v35 + 2);
        if (v41)
        {
          v42 = *((_QWORD *)v35 + 3);
          ObjectType = swift_getObjectType(*((_QWORD *)v35 + 2));
          swift_unknownObjectRetain(v41);
          v44 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v42);
          v46 = v45;
          swift_unknownObjectRelease(v41);
        }
        else
        {
          v44 = 0;
          v46 = 0;
        }
        v47 = swift_allocObject(&unk_1000A0468, 32, 7);
        *(_QWORD *)(v47 + 16) = &unk_1000B0FC8;
        *(_QWORD *)(v47 + 24) = v35;
        if (v46 | v44)
        {
          v48 = v0 + 16;
          *(_QWORD *)(v0 + 16) = 0;
          *(_QWORD *)(v0 + 24) = 0;
          *(_QWORD *)(v0 + 32) = v44;
          *(_QWORD *)(v0 + 40) = v46;
        }
        else
        {
          v48 = 0;
        }
        v49 = *(_QWORD *)(v0 + 320);
        v51 = *(_QWORD *)(v0 + 288);
        v50 = *(_QWORD *)(v0 + 296);
        v52 = swift_task_create(v39, v48, (char *)&type metadata for () + 8, &unk_1000B0FD0, v47);
        swift_release(v65);
        swift_release(v52);
        v19.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
      }
      else
      {
        v19.n128_f64[0] = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288));
      }
    }
    v53 = static Task<>.checkCancellation()(v19);
    v54 = *(_QWORD *)(v0 + 256);
    v56 = *(_QWORD *)(v0 + 232);
    v55 = *(_QWORD *)(v0 + 240);
    v57 = *(_QWORD *)(v0 + 224);
    v58 = static Duration.seconds(_:)(v53, 300.0);
    v60 = v59;
    ContinuousClock.init()();
    *(_QWORD *)(v0 + 160) = v58;
    *(_QWORD *)(v0 + 168) = v60;
    *(_QWORD *)(v0 + 128) = 0;
    *(_QWORD *)(v0 + 120) = 0;
    *(_BYTE *)(v0 + 136) = 1;
    v61 = sub_1000073C0(&qword_1000B0FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
    dispatch thunk of Clock.now.getter(v54, v61);
    v62 = sub_1000073C0(&qword_1000B0FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)(v0 + 160, v57, v62);
    v63 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    *(_QWORD *)(v0 + 408) = v63;
    v63(v55, v57);
    v64 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
    *(_QWORD *)(v0 + 416) = v64;
    *v64 = v0;
    v64[1] = sub_10003F7AC;
    return dispatch thunk of Clock.sleep(until:tolerance:)(*(_QWORD *)(v0 + 248), v0 + 120, *(_QWORD *)(v0 + 256), v61);
  }
}

uint64_t sub_10003F278()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc(v3);
  v4 = v2[48];
  (*(void (**)(_QWORD, _QWORD))(v2[42] + 8))(v2[43], v2[41]);
  swift_release(v4);
  if (v0)
    v5 = sub_10003FF08;
  else
    v5 = sub_10003F300;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10003F300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 376);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 288);
  sub_100011484(v2, &qword_1000B0F88);
  v3(v4, 0, 1, v5);
  sub_1000112A4(v4, v2, &qword_1000B0F88);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 296);
  sub_100011440(*(_QWORD *)(v0 + 368), v6, &qword_1000B0F88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100011484(*(_QWORD *)(v0 + 352), &qword_1000B0F88);
    v10 = static Task<>.checkCancellation()(v9);
    if (v1)
    {
LABEL_3:
      v11 = *(_QWORD *)(v0 + 360);
      v12 = *(_QWORD *)(v0 + 368);
      v14 = *(_QWORD *)(v0 + 344);
      v13 = *(_QWORD *)(v0 + 352);
      v16 = *(_QWORD *)(v0 + 312);
      v15 = *(_QWORD *)(v0 + 320);
      v18 = *(_QWORD *)(v0 + 272);
      v17 = *(_QWORD *)(v0 + 280);
      v67 = *(_QWORD *)(v0 + 248);
      v69 = *(_QWORD *)(v0 + 240);
      sub_100011484(v12, &qword_1000B0F88);
      swift_task_dealloc(v12);
      swift_task_dealloc(v11);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 200) + 16;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 32);
    v21(*(char **)(v0 + 320), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 288));
    Strong = swift_weakLoadStrong(v20);
    v23 = *(_QWORD *)(v0 + 320);
    if (Strong)
    {
      v65 = Strong;
      v66 = v1;
      v24 = *(_QWORD *)(v0 + 312);
      v26 = *(_QWORD *)(v0 + 288);
      v25 = *(_QWORD *)(v0 + 296);
      v27 = *(_QWORD *)(v0 + 280);
      v68 = *(_QWORD *)(v0 + 304);
      v70 = v27;
      v28 = *(_QWORD *)(v0 + 216);
      v29 = type metadata accessor for TaskPriority(0);
      v30 = *(_QWORD *)(v29 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v27, 1, 1, v29);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v23, v26);
      type metadata accessor for MainActor(0);
      v31 = swift_retain(v28);
      v32 = static MainActor.shared.getter(v31);
      v33 = *(unsigned __int8 *)(v25 + 80);
      v34 = (v33 + 40) & ~v33;
      v35 = (char *)swift_allocObject(&unk_1000A0440, v34 + v68, v33 | 7);
      *((_QWORD *)v35 + 2) = v32;
      *((_QWORD *)v35 + 3) = &protocol witness table for MainActor;
      *((_QWORD *)v35 + 4) = v28;
      v21(&v35[v34], v24, v26);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v70, 1, v29);
      v38 = *(_QWORD *)(v0 + 280);
      if (v36 == 1)
      {
        sub_100011484(*(_QWORD *)(v0 + 280), &qword_1000AF7C8);
        v39 = 7168;
      }
      else
      {
        v41 = TaskPriority.rawValue.getter(v37);
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v38, v29);
        v39 = v41 | 0x1C00;
      }
      v1 = v66;
      v42 = *((_QWORD *)v35 + 2);
      if (v42)
      {
        v43 = *((_QWORD *)v35 + 3);
        ObjectType = swift_getObjectType(*((_QWORD *)v35 + 2));
        swift_unknownObjectRetain(v42);
        v45 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v43);
        v47 = v46;
        swift_unknownObjectRelease(v42);
      }
      else
      {
        v45 = 0;
        v47 = 0;
      }
      v48 = swift_allocObject(&unk_1000A0468, 32, 7);
      *(_QWORD *)(v48 + 16) = &unk_1000B0FC8;
      *(_QWORD *)(v48 + 24) = v35;
      if (v47 | v45)
      {
        v49 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v45;
        *(_QWORD *)(v0 + 40) = v47;
      }
      else
      {
        v49 = 0;
      }
      v50 = *(_QWORD *)(v0 + 320);
      v52 = *(_QWORD *)(v0 + 288);
      v51 = *(_QWORD *)(v0 + 296);
      v53 = swift_task_create(v39, v49, (char *)&type metadata for () + 8, &unk_1000B0FD0, v48);
      swift_release(v65);
      swift_release(v53);
      v40.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v51 + 8))(v50, v52);
    }
    else
    {
      v40.n128_f64[0] = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288));
    }
    v10 = static Task<>.checkCancellation()(v40);
    if (v1)
      goto LABEL_3;
  }
  v54 = *(_QWORD *)(v0 + 256);
  v56 = *(_QWORD *)(v0 + 232);
  v55 = *(_QWORD *)(v0 + 240);
  v57 = *(_QWORD *)(v0 + 224);
  v58 = static Duration.seconds(_:)(v10, 300.0);
  v60 = v59;
  ContinuousClock.init()();
  *(_QWORD *)(v0 + 160) = v58;
  *(_QWORD *)(v0 + 168) = v60;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  v61 = sub_1000073C0(&qword_1000B0FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v54, v61);
  v62 = sub_1000073C0(&qword_1000B0FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 160, v57, v62);
  v63 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
  *(_QWORD *)(v0 + 408) = v63;
  v63(v55, v57);
  v64 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  *(_QWORD *)(v0 + 416) = v64;
  *v64 = v0;
  v64[1] = sub_10003F7AC;
  return dispatch thunk of Clock.sleep(until:tolerance:)(*(_QWORD *)(v0 + 248), v0 + 120, *(_QWORD *)(v0 + 256), v61);
}

uint64_t sub_10003F7AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 416);
  *(_QWORD *)(*v1 + 424) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 408))(*(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 224));
    v4 = sub_10003FE30;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 264);
    v5 = *(_QWORD *)(v2 + 272);
    v7 = *(_QWORD *)(v2 + 256);
    (*(void (**)(_QWORD, _QWORD))(v2 + 408))(*(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 224));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v4 = sub_10003F84C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10003F84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ObjectType;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v1 = sub_100011484(*(_QWORD *)(v0 + 368), &qword_1000B0F88);
  if ((static Task<>.isCancelled.getter(v1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 344);
    v3 = *(_QWORD *)(v0 + 352);
    v6 = *(_QWORD *)(v0 + 312);
    v5 = *(_QWORD *)(v0 + 320);
    v8 = *(_QWORD *)(v0 + 272);
    v7 = *(_QWORD *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 240);
    v9 = *(_QWORD *)(v0 + 248);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  v13 = *(_QWORD *)(v0 + 424);
  v14 = *(_QWORD *)(v0 + 200) + 16;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 376))(*(_QWORD *)(v0 + 368), 1, 1, *(_QWORD *)(v0 + 288));
  Strong = swift_weakLoadStrong(v14);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(Strong + 16);
    *(_QWORD *)(v0 + 384) = v18;
    swift_retain(v18);
    v19 = swift_release(v16);
    static WeatherQuery.current.getter(v17, v19);
    v20 = (_QWORD *)swift_task_alloc(async function pointer to WeatherService.weather<A>(for:including:)[1]);
    *(_QWORD *)(v0 + 392) = v20;
    *v20 = v0;
    v20[1] = sub_10003F278;
    return WeatherService.weather<A>(for:including:)(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 288));
  }
  v21 = *(_QWORD *)(v0 + 368);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 376);
  v23 = *(_QWORD *)(v0 + 360);
  v24 = *(_QWORD *)(v0 + 288);
  sub_100011484(v21, &qword_1000B0F88);
  v22(v23, 1, 1, v24);
  sub_1000112A4(v23, v21, &qword_1000B0F88);
  v25 = *(_QWORD *)(v0 + 352);
  v26 = *(_QWORD *)(v0 + 288);
  v27 = *(_QWORD *)(v0 + 296);
  sub_100011440(*(_QWORD *)(v0 + 368), v25, &qword_1000B0F88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_100011484(*(_QWORD *)(v0 + 352), &qword_1000B0F88);
    v29 = static Task<>.checkCancellation()(v28);
    if (v13)
    {
LABEL_8:
      v30 = *(_QWORD *)(v0 + 360);
      v31 = *(_QWORD *)(v0 + 368);
      v33 = *(_QWORD *)(v0 + 344);
      v32 = *(_QWORD *)(v0 + 352);
      v35 = *(_QWORD *)(v0 + 312);
      v34 = *(_QWORD *)(v0 + 320);
      v37 = *(_QWORD *)(v0 + 272);
      v36 = *(_QWORD *)(v0 + 280);
      v85 = *(_QWORD *)(v0 + 248);
      v87 = *(_QWORD *)(v0 + 240);
      sub_100011484(v31, &qword_1000B0F88);
      swift_task_dealloc(v31);
      swift_task_dealloc(v30);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v85);
      swift_task_dealloc(v87);
      v11 = *(uint64_t (**)(void))(v0 + 8);
      return v11();
    }
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 200) + 16;
    v39 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 32);
    v39(*(char **)(v0 + 320), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 288));
    v40 = swift_weakLoadStrong(v38);
    v41 = *(_QWORD *)(v0 + 320);
    if (v40)
    {
      v83 = v40;
      v84 = v13;
      v42 = *(_QWORD *)(v0 + 312);
      v44 = *(_QWORD *)(v0 + 288);
      v43 = *(_QWORD *)(v0 + 296);
      v45 = *(_QWORD *)(v0 + 280);
      v86 = *(_QWORD *)(v0 + 304);
      v88 = v45;
      v46 = *(_QWORD *)(v0 + 216);
      v47 = type metadata accessor for TaskPriority(0);
      v48 = *(_QWORD *)(v47 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v45, 1, 1, v47);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v42, v41, v44);
      type metadata accessor for MainActor(0);
      v49 = swift_retain(v46);
      v50 = static MainActor.shared.getter(v49);
      v51 = *(unsigned __int8 *)(v43 + 80);
      v52 = (v51 + 40) & ~v51;
      v53 = (char *)swift_allocObject(&unk_1000A0440, v52 + v86, v51 | 7);
      *((_QWORD *)v53 + 2) = v50;
      *((_QWORD *)v53 + 3) = &protocol witness table for MainActor;
      *((_QWORD *)v53 + 4) = v46;
      v39(&v53[v52], v42, v44);
      v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v88, 1, v47);
      v56 = *(_QWORD *)(v0 + 280);
      if (v54 == 1)
      {
        sub_100011484(*(_QWORD *)(v0 + 280), &qword_1000AF7C8);
        v57 = 7168;
      }
      else
      {
        v59 = TaskPriority.rawValue.getter(v55);
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v56, v47);
        v57 = v59 | 0x1C00;
      }
      v13 = v84;
      v60 = *((_QWORD *)v53 + 2);
      if (v60)
      {
        v61 = *((_QWORD *)v53 + 3);
        ObjectType = swift_getObjectType(*((_QWORD *)v53 + 2));
        swift_unknownObjectRetain(v60);
        v63 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v61);
        v65 = v64;
        swift_unknownObjectRelease(v60);
      }
      else
      {
        v63 = 0;
        v65 = 0;
      }
      v66 = swift_allocObject(&unk_1000A0468, 32, 7);
      *(_QWORD *)(v66 + 16) = &unk_1000B0FC8;
      *(_QWORD *)(v66 + 24) = v53;
      if (v65 | v63)
      {
        v67 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v63;
        *(_QWORD *)(v0 + 40) = v65;
      }
      else
      {
        v67 = 0;
      }
      v68 = *(_QWORD *)(v0 + 320);
      v70 = *(_QWORD *)(v0 + 288);
      v69 = *(_QWORD *)(v0 + 296);
      v71 = swift_task_create(v57, v67, (char *)&type metadata for () + 8, &unk_1000B0FD0, v66);
      swift_release(v83);
      swift_release(v71);
      v58.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    }
    else
    {
      v58.n128_f64[0] = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288));
    }
    v29 = static Task<>.checkCancellation()(v58);
    if (v13)
      goto LABEL_8;
  }
  v72 = *(_QWORD *)(v0 + 256);
  v74 = *(_QWORD *)(v0 + 232);
  v73 = *(_QWORD *)(v0 + 240);
  v75 = *(_QWORD *)(v0 + 224);
  v76 = static Duration.seconds(_:)(v29, 300.0);
  v78 = v77;
  ContinuousClock.init()();
  *(_QWORD *)(v0 + 160) = v76;
  *(_QWORD *)(v0 + 168) = v78;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  v79 = sub_1000073C0(&qword_1000B0FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v72, v79);
  v80 = sub_1000073C0(&qword_1000B0FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 160, v75, v80);
  v81 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  *(_QWORD *)(v0 + 408) = v81;
  v81(v73, v75);
  v82 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  *(_QWORD *)(v0 + 416) = v82;
  *v82 = v0;
  v82[1] = sub_10003F7AC;
  return dispatch thunk of Clock.sleep(until:tolerance:)(*(_QWORD *)(v0 + 248), v0 + 120, *(_QWORD *)(v0 + 256), v79);
}

uint64_t sub_10003FE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
  v2 = *(_QWORD *)(v0 + 360);
  v1 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 240);
  sub_100011484(v1, &qword_1000B0F88);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003FF08()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  void *object;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 184));
  *(_QWORD *)(v0 + 144) = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 152) = 0x8000000100087540;
  swift_getErrorValue(v1, v0 + 192, v0 + 72);
  v3._countAndFlagsBits = Error.localizedDescription.getter(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v2, "logInfo:", v6);

  swift_errorRelease(v1);
  v7 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 296);
  sub_100011440(*(_QWORD *)(v0 + 368), v7, &qword_1000B0F88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100011484(*(_QWORD *)(v0 + 352), &qword_1000B0F88);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 200) + 16;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 32);
    v12(*(char **)(v0 + 320), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 288));
    Strong = swift_weakLoadStrong(v11);
    v14 = *(_QWORD *)(v0 + 320);
    if (Strong)
    {
      v15 = *(_QWORD *)(v0 + 312);
      v58 = *(_QWORD *)(v0 + 304);
      v17 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 296);
      v18 = *(_QWORD *)(v0 + 280);
      v59 = v18;
      v56 = Strong;
      v57 = *(_QWORD *)(v0 + 216);
      v19 = type metadata accessor for TaskPriority(0);
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
      type metadata accessor for MainActor(0);
      v21 = swift_retain(v57);
      v22 = static MainActor.shared.getter(v21);
      v23 = *(unsigned __int8 *)(v16 + 80);
      v24 = (v23 + 40) & ~v23;
      v25 = (char *)swift_allocObject(&unk_1000A0440, v24 + v58, v23 | 7);
      *((_QWORD *)v25 + 2) = v22;
      *((_QWORD *)v25 + 3) = &protocol witness table for MainActor;
      *((_QWORD *)v25 + 4) = v57;
      v12(&v25[v24], v15, v17);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v59, 1, v19);
      v28 = *(_QWORD *)(v0 + 280);
      if (v26 == 1)
      {
        sub_100011484(*(_QWORD *)(v0 + 280), &qword_1000AF7C8);
        v29 = 7168;
      }
      else
      {
        v30 = TaskPriority.rawValue.getter(v27);
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v28, v19);
        v29 = v30 | 0x1C00;
      }
      v31 = *((_QWORD *)v25 + 2);
      if (v31)
      {
        v32 = *((_QWORD *)v25 + 3);
        ObjectType = swift_getObjectType(*((_QWORD *)v25 + 2));
        swift_unknownObjectRetain(v31);
        v34 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v32);
        v36 = v35;
        swift_unknownObjectRelease(v31);
      }
      else
      {
        v34 = 0;
        v36 = 0;
      }
      v37 = swift_allocObject(&unk_1000A0468, 32, 7);
      *(_QWORD *)(v37 + 16) = &unk_1000B0FC8;
      *(_QWORD *)(v37 + 24) = v25;
      if (v36 | v34)
      {
        v38 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v34;
        *(_QWORD *)(v0 + 40) = v36;
      }
      else
      {
        v38 = 0;
      }
      v39 = *(_QWORD *)(v0 + 320);
      v40 = *(_QWORD *)(v0 + 288);
      v41 = *(_QWORD *)(v0 + 296);
      v42 = swift_task_create(v29, v38, (char *)&type metadata for () + 8, &unk_1000B0FD0, v37);
      swift_release(v56);
      swift_release(v42);
      v10.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    }
    else
    {
      v10.n128_f64[0] = (*(double (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288));
    }
  }
  v43 = static Task<>.checkCancellation()(v10);
  v44 = *(_QWORD *)(v0 + 256);
  v46 = *(_QWORD *)(v0 + 232);
  v45 = *(_QWORD *)(v0 + 240);
  v47 = *(_QWORD *)(v0 + 224);
  v48 = static Duration.seconds(_:)(v43, 300.0);
  v50 = v49;
  ContinuousClock.init()();
  *(_QWORD *)(v0 + 160) = v48;
  *(_QWORD *)(v0 + 168) = v50;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  v51 = sub_1000073C0(&qword_1000B0FB0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v44, v51);
  v52 = sub_1000073C0(&qword_1000B0FB8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 160, v47, v52);
  v53 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  *(_QWORD *)(v0 + 408) = v53;
  v53(v45, v47);
  v54 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  *(_QWORD *)(v0 + 416) = v54;
  *v54 = v0;
  v54[1] = sub_10003F7AC;
  return dispatch thunk of Clock.sleep(until:tolerance:)(*(_QWORD *)(v0 + 248), v0 + 120, *(_QWORD *)(v0 + 256), v51);
}

uint64_t sub_100040438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;

  v5[5] = a4;
  v5[6] = a5;
  v6 = sub_10000A58C(&qword_1000B0370);
  v5[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[8] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[9] = swift_task_alloc(v8);
  v5[10] = swift_task_alloc(v8);
  v9 = type metadata accessor for MainActor(0);
  v5[11] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000404E0, v11, v12);
}

uint64_t sub_1000404E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 88));
  KeyPath = swift_getKeyPath(&unk_100083088, v3);
  *(_QWORD *)(v0 + 16) = v2;
  v5 = sub_1000073C0(&qword_1000AF5D8, type metadata accessor for WeatherDataProvider, (uint64_t)&unk_100082FC8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(id *)(v2 + 56);
  CurrentWeather.temperature.getter();
  v7 = (void *)Measurement.unit.getter(v1);
  v8 = sub_100040780();
  v9 = sub_100015494(0, &qword_1000B0F60, NSUnitTemperature_ptr);
  v10 = static NSObject.== infix(_:_:)(v7, v8);

  if ((v10 & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 56);
    v12 = sub_100040780();
    Measurement<>.converted(to:)(v12, v11);

  }
  v13 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = *(void (**)(void))(*(_QWORD *)(v0 + 64) + 8);
  v16();
  v17 = NSMeasurementFormatter.string<A>(from:)(v13, v9);
  v19 = v18;

  ((void (*)(uint64_t, uint64_t))v16)(v13, v14);
  v21 = swift_getKeyPath(&unk_1000830B0, v20);
  v22 = (_QWORD *)swift_task_alloc(48);
  v22[2] = v15;
  v22[3] = v17;
  v22[4] = v19;
  *(_QWORD *)(v0 + 24) = v15;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, v21, sub_100040D10, v22, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v19);
  swift_release(v21);
  v23 = swift_task_dealloc(v22);
  v24 = CurrentWeather.symbolName.getter(v23);
  v26 = v25;
  v27 = swift_getKeyPath(&unk_100083100, v25);
  v28 = (_QWORD *)swift_task_alloc(48);
  v28[2] = v15;
  v28[3] = v24;
  v28[4] = v26;
  *(_QWORD *)(v0 + 32) = v15;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 32, v27, sub_100041114, v28, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v26);
  swift_release(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100040780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v0 = type metadata accessor for Locale.MeasurementSystem(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v31 - v5;
  v7 = type metadata accessor for Locale(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NSLocale), "_preferredTemperatureUnit");
  if (!v11)
    goto LABEL_14;
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocaleTemperatureUnitCelsius);
  if (v13 == v16 && v15 == v17)
  {
    swift_bridgeObjectRelease(v15);
    goto LABEL_11;
  }
  v19 = v17;
  v32 = v1;
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0);
  swift_bridgeObjectRelease(v19);
  if ((v20 & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease(v15);
    return objc_msgSend((id)objc_opt_self(NSUnitTemperature), "celsius");
  }
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocaleTemperatureUnitFahrenheit);
  v23 = v21;
  v1 = v32;
  if (v13 == v22 && v15 == v21)
  {
    swift_bridgeObjectRelease_n(v15, 2);
    return objc_msgSend((id)objc_opt_self(NSUnitTemperature), "fahrenheit");
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v22, v21, 0);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v15);
  if ((v25 & 1) != 0)
    return objc_msgSend((id)objc_opt_self(NSUnitTemperature), "fahrenheit");
LABEL_14:
  v26 = static Locale.current.getter();
  Locale.measurementSystem.getter(v26);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static Locale.MeasurementSystem.us.getter(v27);
  v28 = static Locale.MeasurementSystem.== infix(_:_:)(v6, v4);
  v29 = *(void (**)(char *, uint64_t))(v1 + 8);
  v29(v4, v0);
  v29(v6, v0);
  v30 = (void *)objc_opt_self(NSUnitTemperature);
  if ((v28 & 1) != 0)
    return objc_msgSend(v30, "fahrenheit");
  else
    return objc_msgSend(v30, "celsius");
}

uint64_t sub_100040A10(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100040A74;
  return v6(a1);
}

uint64_t sub_100040A74()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100040AC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040AE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000B0F34);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100041408;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000B0F30 + dword_1000B0F30))(a1, v4);
}

uint64_t sub_100040B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10000A58C(&qword_1000B0380) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 40) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v5 = sub_10000A58C(&qword_1000B0370);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100040C00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000A58C(&qword_1000B0380) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1000B0F4C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100041408;
  return sub_10003D768(a1, v5, v6, v7, v8);
}

uint64_t sub_100040CA0()
{
  uint64_t v0;

  return sub_10003C568(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100040CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B0380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040D10()
{
  return sub_1000410C0();
}

uint64_t sub_100040D2C()
{
  return sub_100040D40();
}

uint64_t sub_100040D40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = v0[3];
  *(_QWORD *)(v1 + 104) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

void sub_100040D7C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = v2;
  v4 = v2;

}

double sub_100040DB0(uint64_t a1)
{
  uint64_t v1;

  return sub_10003A28C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100040DB8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100040DE0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100040E0C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1000B0F7C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100015558;
  return sub_10003E098(a1, v4, v5, v6);
}

uint64_t sub_100040E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentLocationResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100040EBC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100040EF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1000B0F9C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100041408;
  return sub_10003EB74(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100040F78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_100040FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for CurrentWeather(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10004102C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CurrentWeather(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1000B0FC4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100015558;
  return sub_100040438(a1, v5, v6, v7, v8);
}

uint64_t sub_1000410C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 64) = v0[3];
  *(_QWORD *)(v1 + 72) = v2;
  swift_bridgeObjectRetain(v2);
  v4 = swift_bridgeObjectRelease(v3);
  return sub_10003B5A4(v4, v5);
}

void sub_100041114()
{
  sub_10004118C();
}

uint64_t sub_100041130()
{
  return sub_100041144();
}

uint64_t sub_100041144()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[4];
  v2 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC10ClockAngel19WeatherDataProvider__weatherSymbolName);
  v3 = v2[1];
  *v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

void sub_10004118C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 80) = v0[3];
  *(_QWORD *)(v1 + 88) = v2;
  swift_bridgeObjectRetain(v2);
  v4 = swift_bridgeObjectRelease(v3);
  sub_10003B944(v4, v5);
}

uint64_t sub_1000411D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CurrentLocationResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_100041220(uint64_t a1)
{
  return sub_10004129C(a1, (uint64_t)&unk_1000A0490, (uint64_t)&unk_1000A04E0, (uint64_t)sub_100041248, (uint64_t)&unk_1000A04F8);
}

double sub_100041248()
{
  return sub_10004139C(&qword_1000B0DC8, (void (*)(uint64_t))sub_100037CF0);
}

uint64_t sub_10004125C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004126C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_100041278(uint64_t a1)
{
  return sub_10004129C(a1, (uint64_t)&unk_1000A0530, (uint64_t)&unk_1000A0580, (uint64_t)sub_100041388, (uint64_t)&unk_1000A0598);
}

double sub_10004129C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10003A998(a1, *(_QWORD *)(v5 + 16), v5 + ((v11 + 24) & ~v11), a2, a3, a4, a5);
}

uint64_t sub_100041314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_100041388()
{
  return sub_10004139C(&qword_1000B0DD8, (void (*)(uint64_t))sub_100037E6C);
}

double sub_10004139C(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10003AD40(*(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a1, a2);
}

void sub_1000413F0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 48) = *(_BYTE *)(v0 + 24);
}

double sub_100041400(uint64_t a1)
{
  uint64_t v1;

  return sub_10003DE54(a1, v1);
}

void sub_100041424()
{
  sub_1000413F0();
}

uint64_t sub_100041438()
{
  return sub_100040CA0();
}

id sub_100041568()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ViewController()
{
  return objc_opt_self(_TtC10ClockAngel14ViewController);
}

_QWORD *sub_1000415B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for AlertCoordinator();
  v1 = swift_allocObject(v0, 48, 7);
  result = sub_100042C3C();
  qword_1000B6EF0 = v1;
  return result;
}

double sub_1000415F0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  NSString v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void **aBlock;
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  void (*v40)();
  _QWORD *v41;

  v5 = v4;
  v31 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)objc_opt_self(MTSessionUtilities);
  aBlock = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(v37);
  aBlock = (void **)0xD000000000000020;
  v37 = 0x8000000100087820;
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  v17._countAndFlagsBits = 0x644972656D697420;
  v17._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = a3;
  v18._object = a4;
  String.append(_:)(v18);
  v19 = v37;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v15, "logInfo:", v20);

  sub_100041CB0(a1, (uint64_t)a2, a3, (uint64_t)a4);
  v21 = (_QWORD *)swift_allocObject(&unk_1000A07E8, 40, 7);
  v21[2] = v5;
  v21[3] = a3;
  v21[4] = a4;
  v40 = sub_100043528;
  v41 = v21;
  aBlock = _NSConcreteStackBlock;
  v37 = 1107296256;
  v38 = sub_10001C5FC;
  v39 = &unk_1000A0800;
  v22 = _Block_copy(&aBlock);
  swift_retain(v5);
  v23 = swift_bridgeObjectRetain(a4);
  static DispatchQoS.unspecified.getter(v23);
  v35 = &_swiftEmptyArrayStorage;
  v24 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v26 = sub_1000433C0((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0);
  v27 = v25;
  v28 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v27, v26, v31, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
  *(_QWORD *)&result = swift_release(v41).n128_u64[0];
  return result;
}

void sub_1000418B8(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1000AECC0 != -1)
      swift_once(&qword_1000AECC0, sub_10001EBCC);
    sub_10001EC2C(a2, a3);
  }
}

double sub_100041924(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  unint64_t v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void **aBlock;
  unint64_t v41;
  uint64_t (*v42)(uint64_t);
  void *v43;
  uint64_t (*v44)();
  uint64_t v45;

  v4 = v3;
  v34 = a2;
  v35 = (uint64_t)a3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v11 - 8);
  v37 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)objc_opt_self(MTSessionUtilities);
  aBlock = 0;
  v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v41);
  aBlock = (void **)0xD000000000000020;
  v41 = 0x80000001000877F0;
  v15._countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  v16._countAndFlagsBits = 0x206D72616C61202CLL;
  v16._object = (void *)0xEC000000203A6469;
  String.append(_:)(v16);
  v17 = objc_msgSend(a1, "alarmIDString");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22 = v41;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  objc_msgSend(v14, "logInfo:", v23);

  v24 = objc_msgSend(a1, "alarmIDString");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  sub_100041CB0(v34, v35, v25, v27);
  swift_bridgeObjectRelease(v27);
  v28 = swift_allocObject(&unk_1000A0798, 32, 7);
  *(_QWORD *)(v28 + 16) = v4;
  *(_QWORD *)(v28 + 24) = a1;
  v44 = sub_1000434F4;
  v45 = v28;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_10001C5FC;
  v43 = &unk_1000A07B0;
  v29 = _Block_copy(&aBlock);
  swift_retain(v4);
  static DispatchQoS.unspecified.getter(a1);
  v39 = &_swiftEmptyArrayStorage;
  v30 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v32 = sub_1000433C0((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v31, v32, v8, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v37);
  *(_QWORD *)&result = swift_release(v45).n128_u64[0];
  return result;
}

uint64_t sub_100041C48(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)(result + 16))
  {
    if (qword_1000AECC8 != -1)
      swift_once(&qword_1000AECC8, sub_10001EE18);
    v3 = a2;
    return dispatch thunk of DataStore.updateEntry(_:)(&v3);
  }
  return result;
}

double sub_100041CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  _QWORD v23[2];
  uint64_t v24;
  void *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004240C();
  v23[1] = *(_QWORD *)(v4 + 32);
  v16 = (_QWORD *)swift_allocObject(&unk_1000A06D0, 56, 7);
  v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_100043440;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5FC;
  aBlock[3] = &unk_1000A06E8;
  v17 = _Block_copy(aBlock);
  swift_retain(v4);
  swift_bridgeObjectRetain(a2);
  v18 = swift_bridgeObjectRetain(a4);
  static DispatchQoS.unspecified.getter(v18);
  v25 = &_swiftEmptyArrayStorage;
  v19 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v21 = sub_1000433C0((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  return result;
}

char *sub_100041EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  char *result;
  unint64_t v16;
  unint64_t v17;
  char *v18;

  v10 = swift_allocObject(&unk_1000A0720, 24, 7);
  swift_weakInit(v10 + 16, a1);
  v11 = (_QWORD *)swift_allocObject(&unk_1000A0748, 40, 7);
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = v10;
  objc_allocWithZone((Class)type metadata accessor for ProminentPresentationAssertion(0));
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  v12 = ProminentPresentationAssertion.init(explanation:activityIdentifier:duration:invalidationHandler:)(0xD000000000000019, 0x8000000100087740, a2, a3, sub_1000434B0, v11, 0.0);
  v13 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;

  v14 = *(char **)(a1 + 24);
  swift_bridgeObjectRetain(a5);
  result = (char *)swift_isUniquelyReferenced_nonNull_native(v14);
  *(_QWORD *)(a1 + 24) = v14;
  if ((result & 1) == 0)
  {
    result = sub_10004B0EC(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v14 = result;
    *(_QWORD *)(a1 + 24) = result;
  }
  v17 = *((_QWORD *)v14 + 2);
  v16 = *((_QWORD *)v14 + 3);
  if (v17 >= v16 >> 1)
  {
    result = sub_10004B0EC((char *)(v16 > 1), v17 + 1, 1, v14);
    v14 = result;
    *(_QWORD *)(a1 + 24) = result;
  }
  *((_QWORD *)v14 + 2) = v17 + 1;
  v18 = &v14[16 * v17];
  *((_QWORD *)v18 + 4) = a4;
  *((_QWORD *)v18 + 5) = a5;
  return result;
}

void sub_10004202C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  void *v17;
  unint64_t v18;
  NSString v19;
  uint64_t Strong;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  unint64_t v29;
  NSString v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **aBlock;
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  void (*v51)();
  void *v52;
  void *v53;
  char v54[24];

  v46 = a1;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a5 + 16;
  v15 = (void *)objc_opt_self(MTSessionUtilities);
  aBlock = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v48);
  aBlock = (void **)0xD00000000000002DLL;
  v48 = 0x8000000100087760;
  v45 = a3;
  v16._countAndFlagsBits = a3;
  v17 = a4;
  v16._object = a4;
  String.append(_:)(v16);
  v18 = v48;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v15, "logInfo:", v19);

  swift_beginAccess(v14, v54, 0, 0);
  Strong = swift_weakLoadStrong(v14);
  if (Strong)
  {
    v21 = (void *)Strong;
    aBlock = 0;
    v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v53 = v21;
    v22 = type metadata accessor for AlertCoordinator();
    _print_unlocked<A, B>(_:_:)(&v53, &aBlock, v22, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v23._countAndFlagsBits = 0xD000000000000039;
    v23._object = (void *)0x80000001000877B0;
    String.append(_:)(v23);
    v24._countAndFlagsBits = ((uint64_t (*)(void))dispatch thunk of ProminentPresentationAssertion.activityIdentifier.getter)();
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    v26._countAndFlagsBits = 0x207472656C61202CLL;
    v26._object = (void *)0xEC000000203A6469;
    String.append(_:)(v26);
    v27 = v45;
    v28._countAndFlagsBits = v45;
    v41 = v17;
    v28._object = v17;
    String.append(_:)(v28);
    v29 = v48;
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v15, "logInfo:", v30);

    v51 = sub_1000434BC;
    v52 = v21;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_10001C5FC;
    v50 = &unk_1000A0760;
    v31 = _Block_copy(&aBlock);
    swift_retain(v21);
    static DispatchQoS.unspecified.getter(v32);
    v53 = &_swiftEmptyArrayStorage;
    v33 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
    v35 = sub_1000433C0((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v34, v35, v8, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v31);
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
    v36 = swift_release(v52);
    v37 = dispatch thunk of ProminentPresentationAssertion.activityIdentifier.getter(v36);
    v39 = v38;
    sub_10004301C(v27, v41, v37, v38, 0);
    swift_release(v21);
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "logInfo:", v40);

  }
}

double sub_10004240C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + 32);
  aBlock[4] = sub_100043400;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001C5FC;
  aBlock[3] = &unk_1000A0698;
  v9 = _Block_copy(aBlock);
  swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  v16 = &_swiftEmptyArrayStorage;
  v11 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v13 = sub_1000433C0((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

void sub_1000425D8(uint64_t a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  Swift::String v6;
  unint64_t v7;
  NSString v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v1 = *(void **)(a1 + 16);
  if (v1)
  {
    v3 = (void *)objc_opt_self(MTSessionUtilities);
    v11 = 0;
    v12 = 0xE000000000000000;
    v4 = v1;
    _StringGuts.grow(_:)(28);
    v10 = a1;
    v5 = type metadata accessor for AlertCoordinator();
    _print_unlocked<A, B>(_:_:)(&v10, &v11, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v6._object = (void *)0x8000000100087720;
    v6._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v6);
    v7 = v12;
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    objc_msgSend(v3, "logInfo:", v8);

    dispatch thunk of ProminentPresentationAssertion.invalidate()();
    v9 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
}

void sub_1000426D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  void **v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  NSString v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  NSString v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  NSString v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v8 = *(_QWORD **)(a1 + 24);
  v9 = v8[2];
  if (v9)
  {
    v12 = (void **)(v8 + 5);
    while (1)
    {
      v13 = (uint64_t)*(v12 - 1);
      v14 = *v12;
      v15 = v13 == a2 && v14 == a3;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, a2, a3, 0) & 1) != 0)
        break;
      v12 += 2;
      if (!--v9)
        goto LABEL_9;
    }
    v22 = sub_1000429FC(a2, (uint64_t)a3, v8);
    if ((v23 & 1) == 0)
    {
      v35 = v22;
      v24 = (void *)objc_opt_self(MTSessionUtilities);
      v37 = 0;
      v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      v36 = a1;
      v25 = type metadata accessor for AlertCoordinator();
      _print_unlocked<A, B>(_:_:)(&v36, &v37, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v26._countAndFlagsBits = 0xD00000000000001DLL;
      v26._object = (void *)0x80000001000876B0;
      String.append(_:)(v26);
      v27._countAndFlagsBits = a2;
      v27._object = a3;
      String.append(_:)(v27);
      v28 = v38;
      v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v28);
      objc_msgSend(v24, "logInfo:", v29);

      if (qword_1000AECE8 != -1)
        swift_once(&qword_1000AECE8, sub_1000478C4);
      sub_100047094(a2, a3, a4, a5);
      v37 = 0;
      v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      v36 = a1;
      _print_unlocked<A, B>(_:_:)(&v36, &v37, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v30._object = (void *)0x80000001000876D0;
      v30._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v30);
      v31._countAndFlagsBits = a2;
      v31._object = a3;
      String.append(_:)(v31);
      v32 = v38;
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32);
      objc_msgSend(v24, "logInfo:", v33);

      sub_100042AE0(v35);
      swift_bridgeObjectRelease(v34);
    }
  }
  else
  {
LABEL_9:
    v16 = (void *)objc_opt_self(MTSessionUtilities);
    v37 = 0;
    v38 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v36 = a1;
    v17 = type metadata accessor for AlertCoordinator();
    _print_unlocked<A, B>(_:_:)(&v36, &v37, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v18._countAndFlagsBits = 0xD000000000000032;
    v18._object = (void *)0x8000000100087670;
    String.append(_:)(v18);
    v19._countAndFlagsBits = a2;
    v19._object = a3;
    String.append(_:)(v19);
    v20 = v38;
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    objc_msgSend(v16, "logInfo:", v21);

  }
}

uint64_t sub_1000429FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  v9 = v7 == a1 && v8 == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0) & 1) != 0)
    return 0;
  v11 = 0;
  v12 = a3 + 7;
  v13 = 1;
  while (1)
  {
    if (v3 == v13)
      return 0;
    ++v11;
    v14 = *(v12 - 1);
    v15 = *v12;
    if (v14 == a1 && v15 == a2)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0);
    result = v13++;
    v12 += 2;
    if ((v17 & 1) != 0)
      return result;
  }
  return v11;
}

char *sub_100042AE0(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) == 0)
  {
    result = sub_100043008(v3);
    v3 = (uint64_t)result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    v6 = v5 - 1;
    v7 = v3 + 16 * a1;
    v8 = *(_QWORD *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
    return (char *)v8;
  }
  return result;
}

uint64_t sub_100042B68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for AlertCoordinator()
{
  return objc_opt_self(_TtC10ClockAngel16AlertCoordinator);
}

uint64_t type metadata accessor for AlertStore(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B1118;
  if (!qword_1000B1118)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AlertStore);
  return result;
}

uint64_t sub_100042C00(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000B6EF8);
}

_QWORD *sub_100042C3C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  void *v18;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = &_swiftEmptyArrayStorage;
  v17 = sub_100037CB4();
  static DispatchQoS.unspecified.getter(v17);
  v18 = &_swiftEmptyArrayStorage;
  v12 = sub_1000073C0((unint64_t *)&qword_1000B0350, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10000A58C(&qword_1000B0358);
  v14 = sub_1000433C0((unint64_t *)&qword_1000B0360, &qword_1000B0358);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v13, v14, v6, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000025, 0x80000001000876F0, v11, v8, v5, 0);
  v15 = type metadata accessor for AlertStore(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v1[5] = DataStore.init(identifier:)(0xD000000000000010, 0x8000000100083180);
  return v1;
}

uint64_t sub_100042E3C()
{
  return type metadata accessor for AlertStore(0);
}

uint64_t destroy for AlertEntry(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s10ClockAngel10AlertEntryVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for AlertEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for AlertEntry(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AlertEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertEntry()
{
  return &type metadata for AlertEntry;
}

unint64_t sub_100042FC4()
{
  unint64_t result;

  result = qword_1000B1168;
  if (!qword_1000B1168)
  {
    result = swift_getWitnessTable(&unk_1000831E4, &type metadata for AlertEntry);
    atomic_store(result, (unint64_t *)&qword_1000B1168);
  }
  return result;
}

char *sub_100043008(uint64_t a1)
{
  return sub_10004B0EC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

double sub_10004301C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  unint64_t v28;
  NSString v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **aBlock;
  unint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  uint64_t (*v51)();
  _QWORD *v52;
  _QWORD v53[2];

  v6 = v5;
  v43 = a5;
  v40 = a4;
  v41 = a1;
  v42 = a2;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v53[0] = v5;
  v16 = type metadata accessor for AlertCoordinator();
  _print_unlocked<A, B>(_:_:)(v53, &aBlock, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v17._object = (void *)0x8000000100087630;
  v17._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v17);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x697669746361202CLL;
  v19._object = (void *)0xEE00203A64497974;
  String.append(_:)(v19);
  v20 = a3;
  v21 = v40;
  v53[0] = a3;
  v53[1] = v40;
  v22 = sub_10000A58C(&qword_1000AF7A0);
  _print_unlocked<A, B>(_:_:)(v53, &aBlock, v22, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v23._object = (void *)0x8000000100087650;
  v23._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v23);
  if ((v43 & 1) != 0)
    v24 = 1702195828;
  else
    v24 = 0x65736C6166;
  if ((v43 & 1) != 0)
    v25 = (void *)0xE400000000000000;
  else
    v25 = (void *)0xE500000000000000;
  v26 = (void *)objc_opt_self(MTSessionUtilities);
  v27._countAndFlagsBits = v24;
  v27._object = v25;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v25);
  v28 = v48;
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v26, "logInfo:", v29);

  v30 = (_QWORD *)swift_allocObject(&unk_1000A0658, 56, 7);
  v31 = v41;
  v32 = v42;
  v30[2] = v6;
  v30[3] = v31;
  v30[4] = v32;
  v30[5] = v20;
  v30[6] = v21;
  v51 = sub_10004339C;
  v52 = v30;
  aBlock = _NSConcreteStackBlock;
  v48 = 1107296256;
  v49 = sub_10001C5FC;
  v50 = &unk_1000A0670;
  v33 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(v21);
  swift_retain(v6);
  v34 = swift_bridgeObjectRetain(v32);
  static DispatchQoS.unspecified.getter(v34);
  v53[0] = &_swiftEmptyArrayStorage;
  v35 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
  v37 = sub_1000433C0((unint64_t *)&qword_1000AFB90, (uint64_t *)&unk_1000AFFF0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v53, v36, v37, v10, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v45);
  *(_QWORD *)&result = swift_release(v52).n128_u64[0];
  return result;
}

uint64_t sub_10004339C()
{
  return sub_10004344C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000426D8);
}

uint64_t sub_1000433A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000433B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000433C0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000E880(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100043400()
{
  uint64_t v0;

  sub_1000425D8(v0);
}

uint64_t sub_10004340C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100043440()
{
  return sub_10004344C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100041EC0);
}

uint64_t sub_10004344C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100043460()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100043484()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000434B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10004202C(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1000434BC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0;

}

uint64_t sub_1000434C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000434F4()
{
  uint64_t v0;

  return sub_100041C48(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000434FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100043528()
{
  uint64_t v0;

  sub_1000418B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10004355C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

double sub_1000435A4()
{
  if (qword_1000AEDF8 != -1)
    swift_once(&qword_1000AEDF8, sub_100074B84);
  return *(double *)&qword_1000B7118;
}

double sub_1000435E4()
{
  return 28.0;
}

void sub_1000435EC()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  id v96;
  void *v97;
  id v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  void *v106;
  id v107;
  id v108;
  void *v109;
  id v110;
  void *v111;
  id v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  id v118;
  uint64_t v119;
  Class isa;
  _BYTE v121[56];
  uint64_t v122;
  uint64_t v123;
  ValueMetadata *v124;
  _UNKNOWN **v125;

  v1 = v0;
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_44;
  }
  v3 = v2;
  v4 = (void *)objc_opt_self(UIColor);
  v5 = objc_msgSend(v4, "blackColor");
  objc_msgSend(v3, "setBackgroundColor:", v5);

  v6 = OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView;
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView])
  {
    v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
    v124 = &type metadata for StandbyConfig;
    v125 = &off_10009FF68;
    v8 = type metadata accessor for ObservableStopwatchModel(0);
    v9 = sub_1000341C0();
    swift_retain(v7);
    v122 = ObservedObject.init(wrappedValue:)(v10, v8, v9);
    v123 = v11;
    v12 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B1218));
    v13 = &v12[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v12) + 16)];
    *((_QWORD *)v13 + 1) = 0;
    swift_unknownObjectWeakInit(v13, 0);
    sub_100046314((uint64_t)&v122, (uint64_t)v121);
    v14 = (void *)UIHostingController.init(rootView:)(v121);
    sub_100046350((uint64_t)&v122);
    v15 = objc_msgSend(v14, "view");
    if (!v15)
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    v16 = v15;
    objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    v17 = objc_msgSend(v14, "view");
    if (!v17)
    {
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    v18 = v17;
    v19 = objc_msgSend(v17, "layer");

    objc_msgSend(v19, "setAllowsHitTesting:", 0);
    v20 = objc_msgSend(v14, "view");
    if (!v20)
    {
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    v21 = v20;
    v22 = objc_msgSend(v4, "clearColor");
    objc_msgSend(v21, "setBackgroundColor:", v22);

    objc_msgSend(v1, "addChildViewController:", v14);
    v23 = objc_msgSend(v1, "view");
    if (!v23)
    {
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    v24 = v23;
    v25 = objc_msgSend(v14, "view");
    if (!v25)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v26 = v25;
    objc_msgSend(v24, "addSubview:", v25);

    objc_msgSend(v14, "didMoveToParentViewController:", v1);
    v27 = *(void **)&v1[v6];
    *(_QWORD *)&v1[v6] = v14;

  }
  v28 = OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView;
  v29 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView];
  if (v29)
    goto LABEL_16;
  v30 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
  v124 = &type metadata for StandbyConfig;
  v125 = &off_10009FF68;
  v31 = type metadata accessor for ObservableStopwatchModel(0);
  v32 = sub_1000341C0();
  swift_retain(v30);
  v122 = ObservedObject.init(wrappedValue:)(v33, v31, v32);
  v123 = v34;
  v35 = (char *)objc_allocWithZone((Class)sub_10000A58C((uint64_t *)&unk_1000B30F0));
  v36 = &v35[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v35) + 16)];
  *((_QWORD *)v36 + 1) = 0;
  swift_unknownObjectWeakInit(v36, 0);
  sub_1000462A4((uint64_t)&v122, (uint64_t)v121);
  v37 = (void *)UIHostingController.init(rootView:)(v121);
  sub_1000462E0((uint64_t)&v122);
  v38 = objc_msgSend(v37, "view");
  if (!v38)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  v39 = v38;
  objc_msgSend(v38, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v40 = objc_msgSend(v37, "view");
  if (!v40)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v41 = v40;
  v42 = objc_msgSend(v40, "layer");

  objc_msgSend(v42, "setAllowsHitTesting:", 0);
  v43 = objc_msgSend(v37, "view");
  if (!v43)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v44 = v43;
  v45 = objc_msgSend(v4, "clearColor");
  objc_msgSend(v44, "setBackgroundColor:", v45);

  objc_msgSend(v1, "addChildViewController:", v37);
  v46 = objc_msgSend(v1, "view");
  if (!v46)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v47 = v46;
  v48 = objc_msgSend(v37, "view");
  if (!v48)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v49 = v48;
  objc_msgSend(v47, "addSubview:", v48);

  objc_msgSend(v37, "didMoveToParentViewController:", v1);
  v50 = *(void **)&v1[v28];
  *(_QWORD *)&v1[v28] = v37;

  v29 = *(void **)&v1[v28];
  if (v29)
  {
LABEL_16:
    v51 = objc_msgSend(v29, "view");
    if (v51)
    {
      v52 = v51;
      v53 = objc_msgSend(v51, "leadingAnchor");

      sub_100045EEC();
      v54 = sub_10000A58C((uint64_t *)&unk_1000B2750);
      v55 = swift_allocObject(v54, 96, 7);
      *(_OWORD *)(v55 + 16) = xmmword_100081570;
      v56 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
      v57 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
      if (v57)
      {
        v58 = objc_msgSend(v57, "bottomAnchor");
        v59 = objc_msgSend(v1, "view");
        if (v59)
        {
          v60 = v59;
          v61 = objc_msgSend(v59, "bottomAnchor");

          v62 = objc_msgSend(v58, "constraintEqualToAnchor:constant:", v61, -52.0);
          *(_QWORD *)(v55 + 32) = v62;
          v63 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
          v64 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton];
          if (v64)
          {
            v65 = objc_msgSend(v64, "centerYAnchor");
            v66 = *(void **)&v1[v56];
            if (v66)
            {
              v67 = objc_msgSend(v66, "centerYAnchor");
              v68 = objc_msgSend(v65, "constraintEqualToAnchor:", v67);

              *(_QWORD *)(v55 + 40) = v68;
              v69 = *(void **)&v1[v28];
              if (v69)
              {
                v70 = objc_msgSend(v69, "view");
                if (v70)
                {
                  v71 = v70;
                  v72 = objc_msgSend(v70, "leadingAnchor");

                  v73 = *(void **)&v1[v56];
                  if (v73)
                  {
                    v74 = objc_msgSend(v73, "trailingAnchor");
                    v75 = objc_msgSend(v72, "constraintEqualToAnchor:constant:", v74, 17.0);

                    *(_QWORD *)(v55 + 48) = v75;
                    v76 = *(void **)&v1[v28];
                    if (v76)
                    {
                      v77 = objc_msgSend(v76, "view");
                      if (v77)
                      {
                        v78 = v77;
                        v79 = objc_msgSend(v77, "trailingAnchor");

                        v80 = objc_msgSend(v1, "view");
                        if (v80)
                        {
                          v81 = v80;
                          v82 = objc_msgSend(v80, "trailingAnchor");

                          v83 = objc_msgSend(v79, "constraintEqualToAnchor:constant:", v82, -48.0);
                          *(_QWORD *)(v55 + 56) = v83;
                          v84 = *(void **)&v1[v28];
                          if (v84)
                          {
                            v85 = objc_msgSend(v84, "view");
                            if (v85)
                            {
                              v86 = v85;
                              v87 = objc_msgSend(v85, "centerYAnchor");

                              v88 = *(void **)&v1[v63];
                              if (v88)
                              {
                                v89 = objc_msgSend(v88, "centerYAnchor");
                                v90 = objc_msgSend(v87, "constraintEqualToAnchor:", v89);

                                *(_QWORD *)(v55 + 64) = v90;
                                v91 = *(void **)&v1[v6];
                                if (v91)
                                {
                                  v92 = objc_msgSend(v91, "view");
                                  if (v92)
                                  {
                                    v93 = v92;
                                    v94 = objc_msgSend(v92, "trailingAnchor");

                                    v95 = *(void **)&v1[v28];
                                    if (v95)
                                    {
                                      v96 = objc_msgSend(v95, "view");
                                      if (v96)
                                      {
                                        v97 = v96;
                                        v98 = objc_msgSend(v96, "trailingAnchor");

                                        v99 = objc_msgSend(v94, "constraintEqualToAnchor:", v98);
                                        *(_QWORD *)(v55 + 72) = v99;
                                        v100 = *(void **)&v1[v6];
                                        if (v100)
                                        {
                                          v101 = objc_msgSend(v100, "view");
                                          if (v101)
                                          {
                                            v102 = v101;
                                            v103 = objc_msgSend(v101, "leadingAnchor");

                                            v104 = *(void **)&v1[v28];
                                            if (v104)
                                            {
                                              v105 = objc_msgSend(v104, "view");
                                              if (v105)
                                              {
                                                v106 = v105;
                                                v107 = objc_msgSend(v105, "leadingAnchor");

                                                v108 = objc_msgSend(v103, "constraintEqualToAnchor:", v107);
                                                *(_QWORD *)(v55 + 80) = v108;
                                                v109 = *(void **)&v1[v6];
                                                if (v109)
                                                {
                                                  v110 = objc_msgSend(v109, "view");
                                                  if (v110)
                                                  {
                                                    v111 = v110;
                                                    v112 = objc_msgSend(v110, "bottomAnchor");

                                                    v113 = *(void **)&v1[v28];
                                                    if (v113)
                                                    {
                                                      v114 = objc_msgSend(v113, "view");
                                                      if (v114)
                                                      {
                                                        v115 = v114;
                                                        v116 = (void *)objc_opt_self(NSLayoutConstraint);
                                                        v117 = objc_msgSend(v115, "topAnchor");

                                                        v118 = objc_msgSend(v112, "constraintEqualToAnchor:constant:", v117, 10.0);
                                                        *(_QWORD *)(v55 + 88) = v118;
                                                        v122 = v55;
                                                        specialized Array._endMutation()();
                                                        v119 = v122;
                                                        sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
                                                        isa = Array._bridgeToObjectiveC()().super.isa;
                                                        swift_bridgeObjectRelease(v119);
                                                        objc_msgSend(v116, "activateConstraints:", isa);

                                                        return;
                                                      }
                                                      goto LABEL_69;
                                                    }
LABEL_68:
                                                    __break(1u);
LABEL_69:
                                                    __break(1u);
                                                    goto LABEL_70;
                                                  }
LABEL_67:
                                                  __break(1u);
                                                  goto LABEL_68;
                                                }
LABEL_66:
                                                __break(1u);
                                                goto LABEL_67;
                                              }
LABEL_65:
                                              __break(1u);
                                              goto LABEL_66;
                                            }
LABEL_64:
                                            __break(1u);
                                            goto LABEL_65;
                                          }
LABEL_63:
                                          __break(1u);
                                          goto LABEL_64;
                                        }
LABEL_62:
                                        __break(1u);
                                        goto LABEL_63;
                                      }
LABEL_61:
                                      __break(1u);
                                      goto LABEL_62;
                                    }
LABEL_60:
                                    __break(1u);
                                    goto LABEL_61;
                                  }
LABEL_59:
                                  __break(1u);
                                  goto LABEL_60;
                                }
LABEL_58:
                                __break(1u);
                                goto LABEL_59;
                              }
LABEL_57:
                              __break(1u);
                              goto LABEL_58;
                            }
LABEL_56:
                            __break(1u);
                            goto LABEL_57;
                          }
LABEL_55:
                          __break(1u);
                          goto LABEL_56;
                        }
LABEL_54:
                        __break(1u);
                        goto LABEL_55;
                      }
LABEL_53:
                      __break(1u);
                      goto LABEL_54;
                    }
LABEL_52:
                    __break(1u);
                    goto LABEL_53;
                  }
LABEL_51:
                  __break(1u);
                  goto LABEL_52;
                }
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
LABEL_49:
              __break(1u);
              goto LABEL_50;
            }
LABEL_48:
            __break(1u);
            goto LABEL_49;
          }
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_80:
  __break(1u);
}

void sub_1000440E8()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 0);
  v3 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton] = v2;

  v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_16;
  }
  v6 = (void *)objc_opt_self(UIColor);
  v7 = v5;
  v8 = objc_msgSend(v6, "systemGray4Color");
  objc_msgSend(v7, "setBackgroundColor:", v8);

  v9 = *(void **)&v1[v3];
  if (!v9)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = *(void **)&v1[v3];
  if (!v10)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_100015494(0, &qword_1000AF7B0, UIAction_ptr);
  v11 = swift_allocObject(&unk_1000A0A30, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v12 = v10;
  v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100046384, v11);
  v14 = swift_allocObject(&unk_1000A0A58, 24, 7);
  *(_QWORD *)(v14 + 16) = v12;
  v15 = v12;
  v16 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100046388, v14);
  objc_msgSend(v15, "addAction:forControlEvents:", v13, 17);
  objc_msgSend(v15, "addAction:forControlEvents:", v16, 352);

  v17 = *(void **)&v1[v3];
  if (!v17)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18 = (void *)objc_opt_self(UIImageSymbolConfiguration);
  v19 = v17;
  v20 = objc_msgSend(v18, "configurationWithPointSize:", 54.0);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v21, v20);

  objc_msgSend(v19, "setImage:forState:", v22, 0);
  v23 = *(void **)&v1[v3];
  if (!v23)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v23, "setAdjustsImageWhenHighlighted:", 0);
  v24 = *(void **)&v1[v3];
  if (!v24)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v25 = objc_msgSend(v24, "layer");
  if (qword_1000AEDF8 != -1)
    swift_once(&qword_1000AEDF8, sub_100074B84);
  objc_msgSend(v25, "setCornerRadius:", *(double *)&qword_1000B7118 * 0.5);

  v26 = *(void **)&v1[v3];
  if (!v26)
    goto LABEL_21;
  v27 = (void *)objc_opt_self(ClockAngelUtilities);
  v28 = v26;
  v29 = objc_msgSend(v27, "mtOrange");
  objc_msgSend(v28, "setTintColor:", v29);

  v30 = *(void **)&v1[v3];
  if (!v30)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v31 = v30;
  v32 = objc_msgSend(v27, "mtOrange");
  v33 = objc_msgSend(v32, "colorWithAlphaComponent:", 0.35);

  objc_msgSend(v31, "setBackgroundColor:", v33);
  v34 = *(void **)&v1[v3];
  if (!v34)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v34, "addTarget:action:forControlEvents:", v1, "playPausedAction", 64);
  v35 = objc_msgSend(v1, "view");
  if (!v35)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_QWORD *)&v1[v3])
  {
    v36 = v35;
    objc_msgSend(v35, "addSubview:");

    return;
  }
LABEL_25:
  __break(1u);
}

void sub_100044574()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  double v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  void *v31;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIButton), "buttonWithType:", 0);
  v3 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton] = v2;

  v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v6 = *(void **)&v0[v3];
  if (!v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = (void *)objc_opt_self(UIColor);
  v8 = v6;
  v9 = objc_msgSend(v7, "systemGray4Color");
  objc_msgSend(v8, "setBackgroundColor:", v9);

  v10 = *(void **)&v1[v3];
  if (!v10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_100015494(0, &qword_1000AF7B0, UIAction_ptr);
  v11 = swift_allocObject(&unk_1000A0878, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v12 = v10;
  v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100045EAC, v11);
  v14 = swift_allocObject(&unk_1000A08A0, 24, 7);
  *(_QWORD *)(v14 + 16) = v12;
  v15 = v12;
  v16 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100045EB4, v14);
  objc_msgSend(v15, "addAction:forControlEvents:", v13, 17);
  objc_msgSend(v15, "addAction:forControlEvents:", v16, 352);

  v17 = *(void **)&v1[v3];
  if (!v17)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v18 = objc_msgSend(v17, "layer");
  if (qword_1000AEDF8 != -1)
    swift_once(&qword_1000AEDF8, sub_100074B84);
  objc_msgSend(v18, "setCornerRadius:", *(double *)&qword_1000B7118 * 0.5);

  v19 = objc_msgSend(v1, "view");
  if (!v19)
    goto LABEL_17;
  if (!*(_QWORD *)&v1[v3])
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v20 = v19;
  objc_msgSend(v19, "addSubview:");

  v21 = *(double *)&qword_1000B7118;
  v22 = objc_allocWithZone((Class)type metadata accessor for SpinnyResetView());
  v23 = sub_10002D82C(0.0, 0.0, v21, v21, 54.0, 54.0);
  v24 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView;
  v25 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView] = v23;

  v26 = *(void **)&v1[v3];
  if (!v26)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v27 = swift_allocObject(&unk_1000A08C8, 24, 7);
  *(_QWORD *)(v27 + 16) = v1;
  v28 = v1;
  v29 = v26;
  v30 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100045EBC, v27);
  objc_msgSend(v29, "addAction:forControlEvents:", v30, 64);

  v31 = *(void **)&v1[v3];
  if (!v31)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(_QWORD *)&v1[v24])
  {
    objc_msgSend(v31, "addSubview:");
    return;
  }
LABEL_21:
  __break(1u);
}

void sub_100044940(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v9[5];
  uint64_t v10;

  v2 = *(void **)(a2 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_spinnyResetView);
  if (v2)
  {
    if ((*((_BYTE *)v2 + OBJC_IVAR____TtC10ClockAngel15SpinnyResetView_mode) & 1) == 0)
    {
      v3 = swift_allocObject(&unk_1000A08F0, 24, 7);
      *(_QWORD *)(v3 + 16) = v2;
      v4 = objc_allocWithZone((Class)UIViewPropertyAnimator);
      v9[4] = sub_10001543C;
      v10 = v3;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 1107296256;
      v9[2] = sub_10001C5FC;
      v9[3] = &unk_1000A0908;
      v5 = _Block_copy(v9);
      v6 = v10;
      v7 = v2;
      swift_release(v6);
      v8 = objc_msgSend(v4, "initWithDuration:dampingRatio:animations:", v5, 0.5, 1.0);
      _Block_release(v5);
      objc_msgSend(v8, "startAnimation");

    }
    sub_100012530();
  }
  else
  {
    __break(1u);
  }
}

void sub_100044A6C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  NSString v10;
  id v11;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel);
  if (v2
    && (v3 = v2,
        v4 = (void *)dispatch thunk of StopwatchViewModel.getStopwatch()(),
        v3,
        v5 = objc_msgSend(v4, "state"),
        v4,
        v5 == (id)1))
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton);
    if (v6)
      goto LABEL_6;
  }
  else
  {
    v6 = *(void **)(v1 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton);
    if (v6)
    {
LABEL_6:
      v7 = (void *)objc_opt_self(UIImageSymbolConfiguration);
      v8 = v6;
      v9 = objc_msgSend(v7, "configurationWithPointSize:", 54.0);
      v10 = String._bridgeToObjectiveC()();
      v11 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v10, v9);

      objc_msgSend(v8, "setImage:forState:", v11, 0);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void sub_100044C44()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView);
  if (v1)
  {
    v2 = objc_msgSend(v1, "view");
    if (v2)
    {
      v4 = v2;
      v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel);
      KeyPath = swift_getKeyPath(&unk_1000832C8, v3);
      v8 = swift_getKeyPath(&unk_1000832F0, v7);
      v9 = swift_retain(v5);
      static Published.subscript.getter(&v10, v9, KeyPath, v8);
      swift_release(v5);
      swift_release(KeyPath);
      swift_release(v8);
      objc_msgSend(v4, "setHidden:", v10 < 2);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_100044D20(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_glyphSize] = 0x404B000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadButtonPadding] = 0x404A000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadCountdownPadding] = 0x4038000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_lapLabelOffset] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_buttonBottomPadding] = 0x404A000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_rightEdgePadding] = 0x4048000000000000;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for StopwatchStandbyController();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_100044E04(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  NSString v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingLapView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_customTrailingTimeView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_glyphSize] = 0x404B000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadButtonPadding] = 0x404A000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_leadCountdownPadding] = 0x4038000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_lapLabelOffset] = 0x4024000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_buttonBottomPadding] = 0x404A000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel26StopwatchStandbyController_rightEdgePadding] = 0x4048000000000000;
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for StopwatchStandbyController();
  v7 = objc_msgSendSuper2(&v9, "initWithNibName:bundle:", v6, a3);

  return v7;
}

void sub_100044F00()
{
  uint64_t v0;

}

id sub_100044F2C()
{
  return sub_100045AE4(type metadata accessor for StopwatchStandbyController);
}

uint64_t type metadata accessor for StopwatchStandbyController()
{
  return objc_opt_self(_TtC10ClockAngel26StopwatchStandbyController);
}

void sub_100044F94()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  NSString v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  Swift::String v35;
  Swift::String v36;
  id isa;

  v1 = v0;
  v2 = sub_100078D98();
  if (!v2)
  {
    v30 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(58);
    v31 = objc_msgSend(v0, "description");
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    v35._countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease(v34);
    v36._countAndFlagsBits = 0xD000000000000038;
    v36._object = (void *)0x80000001000879C0;
    String.append(_:)(v36);
    isa = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v30, "logInfo:", isa);
    goto LABEL_7;
  }
  v3 = v2;
  objc_msgSend(v2, "setAccessibilityIgnoresInvertColors:", 1);
  v4 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(50);
  v5 = objc_msgSend(v0, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v7 = v6;
  swift_bridgeObjectRelease(0xE000000000000000);

  v8._object = (void *)0x8000000100087A00;
  v8._countAndFlagsBits = 0xD000000000000030;
  String.append(_:)(v8);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v4, "logInfo:", v9);

  v10 = objc_msgSend(v0, "view");
  if (!v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  v11 = v10;
  objc_msgSend(v10, "addSubview:", v3);

  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v12 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100081560;
  v14 = objc_msgSend(v3, "topAnchor");
  v15 = objc_msgSend(v1, "view");
  if (!v15)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "topAnchor");

  v18 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v17, 4.0);
  *(_QWORD *)(v13 + 32) = v18;
  v19 = objc_msgSend(v3, "widthAnchor");
  v20 = objc_msgSend(v19, "constraintEqualToConstant:", 32.0);

  *(_QWORD *)(v13 + 40) = v20;
  v21 = objc_msgSend(v3, "heightAnchor");
  v22 = objc_msgSend(v3, "widthAnchor");
  v23 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

  *(_QWORD *)(v13 + 48) = v23;
  v24 = objc_msgSend(v3, "centerXAnchor");
  v25 = objc_msgSend(v1, "view");
  if (v25)
  {
    v26 = v25;
    v27 = (void *)objc_opt_self(NSLayoutConstraint);
    v28 = objc_msgSend(v26, "centerXAnchor");

    v29 = objc_msgSend(v24, "constraintEqualToAnchor:", v28);
    *(_QWORD *)(v13 + 56) = v29;
    specialized Array._endMutation()();
    sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    objc_msgSend(v27, "activateConstraints:", isa);

LABEL_7:
    return;
  }
LABEL_10:
  __break(1u);
}

void sub_1000453FC(char a1, char a2, double a3, double a4, long double a5, double a6)
{
  char *v6;
  uint64_t v13;
  void *v14;
  long double v15;
  void *v16;
  id v17;
  CGFloat v18;
  CATransform3D v19;
  objc_super v20;

  v20.receiver = v6;
  v20.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  objc_msgSendSuper2(&v20, "didUpdateCurrentInterval:adjustedCurrentInterval:totalInterval:adjustedTotalInterval:isStopwatchRunning:isStopwatchStopped:", a1 & 1, a2 & 1, a3, a4, (double)a5, a6);
  v13 = *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation];
  objc_msgSend((id)objc_opt_self(CATransaction), "setDisableActions:", 1);
  v14 = *(void **)(v13 + 32);
  if (v14)
  {
    v15 = 360.0 - fmod(a5, 60.0) / 60.0 * 360.0;
    v16 = (void *)objc_opt_self(ClockAngelUtilities);
    v17 = v14;
    objc_msgSend(v16, "radFromDeg:", (double)v15);
    CATransform3DMakeRotation(&v19, v18, 0.0, 0.0, 1.0);
    objc_msgSend(v17, "setTransform:", &v19);

  }
}

void sub_1000455C8()
{
  char *v0;
  void *v1;
  id v2;
  NSString v3;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  objc_msgSendSuper2(&v4, "didPauseLapTimer");
  v1 = *(void **)(*(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation]
                + 16);
  if (v1)
  {
    v2 = v1;
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setState:", v3);

  }
}

void sub_100045684()
{
  char *v0;
  void *v1;
  id v2;
  NSString v3;
  objc_super v4;

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  objc_msgSendSuper2(&v4, "didResumeLapTimer");
  v1 = *(void **)(*(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation]
                + 16);
  if (v1)
  {
    v2 = v1;
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setState:", v3);

  }
}

char *sub_100045744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation;
  v6 = type metadata accessor for StopwatchRunningAnimation(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  v8 = v7 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  v9 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)(v2 + v5) = v7;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_elementSize) = 0x4040000000000000;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_topMargin) = 0x4010000000000000;
  return sub_1000117A4(a1, a2);
}

id sub_100045810(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v3 = OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation;
  v4 = type metadata accessor for StopwatchRunningAnimation(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  v6 = v5 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  v7 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v1[v3] = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_elementSize] = 0x4040000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_topMargin] = 0x4010000000000000;
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  v8 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);

  return v8;
}

id sub_100045924(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  id v12;
  objc_super v14;

  v6 = OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation;
  v7 = type metadata accessor for StopwatchRunningAnimation(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  v9 = v8 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  v10 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)(v8 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v3[v6] = v8;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_elementSize] = 0x4040000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_topMargin] = 0x4010000000000000;
  if (a2)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v11 = 0;
  }
  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for StopwatchStandbyCompressedController();
  v12 = objc_msgSendSuper2(&v14, "initWithNibName:bundle:", v11, a3);

  return v12;
}

uint64_t sub_100045A5C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, void *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  if (a3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a4;
  return a5(v7, v9, a4);
}

uint64_t sub_100045AC8()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0
                                 + OBJC_IVAR____TtC10ClockAngel36StopwatchStandbyCompressedController_minimalAnimation));
}

id sub_100045AD8()
{
  return sub_100045AE4(type metadata accessor for StopwatchStandbyCompressedController);
}

id sub_100045AE4(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for StopwatchStandbyCompressedController()
{
  return objc_opt_self(_TtC10ClockAngel36StopwatchStandbyCompressedController);
}

void sub_100045B44(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id (*v13)();
  uint64_t v14;

  v3 = (void *)objc_opt_self(UIView);
  v4 = swift_allocObject(&unk_1000A09B8, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v13 = sub_100045EE4;
  v14 = v4;
  v9 = _NSConcreteStackBlock;
  v10 = 1107296256;
  v11 = sub_10001C5FC;
  v12 = &unk_1000A09D0;
  v5 = _Block_copy(&v9);
  v6 = v14;
  v7 = a2;
  swift_release(v6);
  v13 = (id (*)())j___s10ClockAngel5FrameV9timestampSdvg;
  v14 = 0;
  v9 = _NSConcreteStackBlock;
  v10 = 1107296256;
  v11 = sub_10004355C;
  v12 = &unk_1000A09F8;
  v8 = _Block_copy(&v9);
  objc_msgSend(v3, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 1, v5, v8, 1.0, 0.3, 0.0, 0.0, 0.0, 0.0);
  _Block_release(v8);
  _Block_release(v5);
}

id sub_100045C7C(void *a1)
{
  CGAffineTransform v3;

  CGAffineTransformMakeScale(&v3, 0.9, 0.9);
  objc_msgSend(a1, "setTransform:", &v3);
  return objc_msgSend(a1, "setAlpha:", 0.75);
}

void sub_100045CEC(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id (*v13)();
  uint64_t v14;

  v3 = (void *)objc_opt_self(UIView);
  v4 = swift_allocObject(&unk_1000A0940, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v13 = sub_100045EDC;
  v14 = v4;
  v9 = _NSConcreteStackBlock;
  v10 = 1107296256;
  v11 = sub_10001C5FC;
  v12 = &unk_1000A0958;
  v5 = _Block_copy(&v9);
  v6 = v14;
  v7 = a2;
  swift_release(v6);
  v13 = (id (*)())Frame.timestamp.getter;
  v14 = 0;
  v9 = _NSConcreteStackBlock;
  v10 = 1107296256;
  v11 = sub_10004355C;
  v12 = &unk_1000A0980;
  v8 = _Block_copy(&v9);
  objc_msgSend(v3, "_animateUsingSpringWithDampingRatio:response:tracking:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:animations:completion:", 1, v5, v8, 1.0, 0.4, 0.0, 0.0, 0.0, 0.0);
  _Block_release(v8);
  _Block_release(v5);
}

id sub_100045E20(void *a1)
{
  __int128 v2;
  _OWORD v4[3];

  v2 = *(_OWORD *)&CGAffineTransformIdentity.c;
  v4[0] = *(_OWORD *)&CGAffineTransformIdentity.a;
  v4[1] = v2;
  v4[2] = *(_OWORD *)&CGAffineTransformIdentity.tx;
  objc_msgSend(a1, "setTransform:", v4);
  return objc_msgSend(a1, "setAlpha:", 1.0);
}

uint64_t sub_100045E88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100045EAC(uint64_t a1)
{
  uint64_t v1;

  sub_100045B44(a1, *(void **)(v1 + 16));
}

void sub_100045EB4(uint64_t a1)
{
  uint64_t v1;

  sub_100045CEC(a1, *(void **)(v1 + 16));
}

void sub_100045EBC(uint64_t a1)
{
  uint64_t v1;

  sub_100044940(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100045EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100045ED4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_100045EDC()
{
  uint64_t v0;

  return sub_100045E20(*(void **)(v0 + 16));
}

id sub_100045EE4()
{
  uint64_t v0;

  return sub_100045C7C(*(void **)(v0 + 16));
}

void sub_100045EEC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  Class isa;

  v1 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_playPauseButton])
  {
    sub_1000440E8();
    sub_100044574();
  }
  v2 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v3 = swift_allocObject(v2, 80, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100083250;
  v4 = *(void **)&v0[v1];
  if (!v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = objc_msgSend(v4, "leadingAnchor");
  v6 = objc_msgSend(v0, "view");
  if (!v6)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "leadingAnchor");

  v9 = objc_msgSend(v5, "constraintEqualToAnchor:constant:", v8, 52.0);
  *(_QWORD *)(v3 + 32) = v9;
  v10 = OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton;
  v11 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
  if (!v11)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = objc_msgSend(v11, "leadingAnchor");
  v13 = *(void **)&v0[v1];
  if (!v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v14 = objc_msgSend(v13, "trailingAnchor");
  v15 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v14, 28.0);

  *(_QWORD *)(v3 + 40) = v15;
  v16 = *(void **)&v0[v1];
  if (!v16)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v17 = objc_msgSend(v16, "widthAnchor");
  v18 = *(void **)&v0[v1];
  if (!v18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v19 = objc_msgSend(v18, "heightAnchor");
  v20 = objc_msgSend(v17, "constraintEqualToAnchor:", v19);

  *(_QWORD *)(v3 + 48) = v20;
  v21 = *(void **)&v0[v1];
  if (!v21)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v22 = objc_msgSend(v21, "widthAnchor");
  v23 = *(void **)&v0[v10];
  if (!v23)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v24 = objc_msgSend(v23, "widthAnchor");
  v25 = objc_msgSend(v22, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v3 + 56) = v25;
  v26 = *(void **)&v0[v1];
  if (!v26)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v27 = objc_msgSend(v26, "widthAnchor");
  v28 = *(void **)&v0[v10];
  if (!v28)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v29 = objc_msgSend(v28, "heightAnchor");
  v30 = objc_msgSend(v27, "constraintEqualToAnchor:", v29);

  *(_QWORD *)(v3 + 64) = v30;
  v31 = *(void **)&v0[v1];
  if (!v31)
  {
LABEL_27:
    __break(1u);
    return;
  }
  v32 = (void *)objc_opt_self(NSLayoutConstraint);
  v33 = objc_msgSend(v31, "widthAnchor");
  if (qword_1000AEDF8 != -1)
    swift_once(&qword_1000AEDF8, sub_100074B84);
  v34 = objc_msgSend(v33, "constraintEqualToConstant:", *(double *)&qword_1000B7118);

  *(_QWORD *)(v3 + 72) = v34;
  specialized Array._endMutation()();
  sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v32, "activateConstraints:", isa);

}

uint64_t sub_1000462A4(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for StopwatchCustomTrailingView(a2, a1);
  return a2;
}

uint64_t sub_1000462E0(uint64_t a1)
{
  destroy for StopwatchCustomTrailingViewLapSpaced();
  return a1;
}

uint64_t sub_100046314(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for StopwatchCustomTrailingView(a2, a1);
  return a2;
}

uint64_t sub_100046350(uint64_t a1)
{
  destroy for StopwatchCustomTrailingViewLapSpaced();
  return a1;
}

id sub_10004660C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC10ClockAngel11AppDelegate);
}

unint64_t sub_10004666C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000AEFE0;
  if (!qword_1000AEFE0)
  {
    type metadata accessor for LaunchOptionsKey(255);
    result = swift_getWitnessTable(&unk_100080D74, v1);
    atomic_store(result, (unint64_t *)&qword_1000AEFE0);
  }
  return result;
}

void sub_1000466B4(uint64_t a1, void *a2, char a3)
{
  char *v3;
  void *v4;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  NSString v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  NSString v29;
  NSString v30;
  char v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  NSString v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  __int128 aBlock;
  __int128 v55;
  void (*v56)(uint64_t);
  _QWORD *v57;
  _OWORD v58[2];

  v4 = v3;
  v8 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(41);
  v9 = objc_msgSend(v3, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&aBlock = v10;
  *((_QWORD *)&aBlock + 1) = v12;
  v13._object = (void *)0x8000000100088310;
  v13._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v13);
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v8, "logInfo:", v15);

  v16 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v16)
  {
    aBlock = 0u;
    v55 = 0u;
LABEL_9:
    v53 = a1;
    v31 = a3;
    sub_100011484((uint64_t)&aBlock, &qword_1000B13D0);
    goto LABEL_11;
  }
  v17 = objc_msgSend(v16, "remoteTarget");
  if (v17)
  {
    v18 = v17;
    _bridgeAnyObjectToAny(_:)(v58);
    swift_unknownObjectRelease(v18);
  }
  else
  {
    memset(v58, 0, sizeof(v58));
  }
  sub_10004B0A4((uint64_t)v58, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v55 + 1))
    goto LABEL_9;
  v19 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v58, &aBlock, (char *)&type metadata for Any + 8, v19, 6) & 1) != 0)
  {
    v20 = *(void **)&v58[0];
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v21 = objc_msgSend(v4, "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v26._countAndFlagsBits = 0xD000000000000035;
    v26._object = (void *)0x80000001000883D0;
    String.append(_:)(v26);
    v27._countAndFlagsBits = a1;
    v27._object = a2;
    String.append(_:)(v27);
    v28 = *((_QWORD *)&aBlock + 1);
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    objc_msgSend(v8, "logInfo:", v29);

    v30 = String._bridgeToObjectiveC()();
    objc_msgSend(v20, "resendAlarmDataEntryWithId:", v30);
    swift_unknownObjectRelease(v20);
LABEL_15:

    return;
  }
  v53 = a1;
  v31 = a3;
LABEL_11:
  *(_QWORD *)&aBlock = 0;
  *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v32 = objc_msgSend(v4, "description");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  v36._countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v35);
  v37._countAndFlagsBits = 0xD000000000000037;
  v37._object = (void *)0x8000000100088340;
  String.append(_:)(v37);
  v38 = *((_QWORD *)&aBlock + 1);
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  objc_msgSend(v8, "logInfo:", v39);

  if ((v31 & 1) == 0)
  {
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v46 = *((_QWORD *)&aBlock + 1);
    v47 = objc_msgSend(v4, "description");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;
    swift_bridgeObjectRelease(v46);

    *(_QWORD *)&aBlock = v48;
    *((_QWORD *)&aBlock + 1) = v50;
    v51._countAndFlagsBits = 0xD00000000000002DLL;
    v51._object = (void *)0x8000000100088380;
    String.append(_:)(v51);
    v52 = *((_QWORD *)&aBlock + 1);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v52);
    objc_msgSend(v8, "logInfo:", v30);
    goto LABEL_15;
  }
  v40 = sub_100047904();
  v30 = objc_msgSend(v40, "alarms");

  if (v30)
  {
    v41 = swift_allocObject(&unk_1000A0CF0, 24, 7);
    swift_unknownObjectWeakInit(v41 + 16, v4);
    v42 = (_QWORD *)swift_allocObject(&unk_1000A0D18, 40, 7);
    v42[2] = v41;
    v42[3] = v53;
    v42[4] = a2;
    v56 = sub_10004B98C;
    v57 = v42;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v55 = sub_1000480B4;
    *((_QWORD *)&v55 + 1) = &unk_1000A0D30;
    v43 = _Block_copy(&aBlock);
    v44 = v57;
    swift_bridgeObjectRetain(a2);
    v45 = objc_msgSend(v30, "addSuccessBlock:", v43, swift_release(v44).n128_f64[0]);
    _Block_release(v43);

    goto LABEL_15;
  }
  __break(1u);
}

void sub_100046BB4(uint64_t a1, uint64_t a2, char a3)
{
  char *v3;
  void *v4;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  NSString v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  NSString v27;
  NSString v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  NSString v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  __int128 aBlock;
  __int128 v56;
  void (*v57)(uint64_t);
  _QWORD *v58;
  _OWORD v59[2];

  v4 = v3;
  v8 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(29);
  v9 = objc_msgSend(v3, "description");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&aBlock = v10;
  *((_QWORD *)&aBlock + 1) = v12;
  v13._object = (void *)0x8000000100088470;
  v13._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v13);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v8, "logInfo:", v14);

  v15 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v15)
  {
    aBlock = 0u;
    v56 = 0u;
LABEL_9:
    v29 = a2;
    v30 = a3;
    v54 = v29;
    v31 = a1;
    sub_100011484((uint64_t)&aBlock, &qword_1000B13D0);
    goto LABEL_11;
  }
  v16 = objc_msgSend(v15, "remoteTarget");
  if (v16)
  {
    v17 = v16;
    _bridgeAnyObjectToAny(_:)(v59);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    memset(v59, 0, sizeof(v59));
  }
  sub_10004B0A4((uint64_t)v59, (uint64_t)&aBlock);
  if (!*((_QWORD *)&v56 + 1))
    goto LABEL_9;
  v18 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v59, &aBlock, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
  {
    v19 = *(void **)&v59[0];
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v20 = *((_QWORD *)&aBlock + 1);
    v21 = objc_msgSend(v4, "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;
    swift_bridgeObjectRelease(v20);

    *(_QWORD *)&aBlock = v22;
    *((_QWORD *)&aBlock + 1) = v24;
    v25._countAndFlagsBits = 0xD000000000000026;
    v25._object = (void *)0x8000000100088500;
    String.append(_:)(v25);
    v26 = *((_QWORD *)&aBlock + 1);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    objc_msgSend(v8, "logInfo:", v27);

    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "resendTimerDataEntryWithId:", v28);
    swift_unknownObjectRelease(v19);
LABEL_15:

    return;
  }
  v32 = a2;
  v30 = a3;
  v54 = v32;
  v31 = a1;
LABEL_11:
  *(_QWORD *)&aBlock = 0;
  *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v33 = objc_msgSend(v4, "description");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v36);
  v38._countAndFlagsBits = 0xD000000000000037;
  v38._object = (void *)0x8000000100088490;
  String.append(_:)(v38);
  v39 = *((_QWORD *)&aBlock + 1);
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v39);
  objc_msgSend(v8, "logInfo:", v40);

  if ((v30 & 1) == 0)
  {
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v47 = *((_QWORD *)&aBlock + 1);
    v48 = objc_msgSend(v4, "description");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;
    swift_bridgeObjectRelease(v47);

    *(_QWORD *)&aBlock = v49;
    *((_QWORD *)&aBlock + 1) = v51;
    v52._countAndFlagsBits = 0xD00000000000002DLL;
    v52._object = (void *)0x80000001000884D0;
    String.append(_:)(v52);
    v53 = *((_QWORD *)&aBlock + 1);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
    objc_msgSend(v8, "logInfo:", v28);
    goto LABEL_15;
  }
  v41 = sub_1000478F0();
  v28 = objc_msgSend(v41, "timers");

  if (v28)
  {
    v42 = swift_allocObject(&unk_1000A0CF0, 24, 7);
    swift_unknownObjectWeakInit(v42 + 16, v4);
    v43 = (_QWORD *)swift_allocObject(&unk_1000A0D68, 40, 7);
    v43[2] = v42;
    v43[3] = v31;
    v43[4] = v54;
    v57 = sub_10004B9C8;
    v58 = v43;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v56 = sub_1000480B4;
    *((_QWORD *)&v56 + 1) = &unk_1000A0D80;
    v44 = _Block_copy(&aBlock);
    v45 = v58;
    swift_bridgeObjectRetain(v54);
    v46 = objc_msgSend(v28, "addSuccessBlock:", v44, swift_release(v45).n128_f64[0]);
    _Block_release(v44);

    goto LABEL_15;
  }
  __break(1u);
}

void sub_100047094(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  char *v4;
  void *v5;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  NSString v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  NSString v33;
  unint64_t v34;
  NSString v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  uint64_t v43;
  _OWORD v45[2];
  __int128 v46;
  __int128 v47;

  v5 = v4;
  v9 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(29);
  v10 = objc_msgSend(v4, "description");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&v46 = v11;
  *((_QWORD *)&v46 + 1) = v13;
  v14._object = (void *)0x8000000100087FF0;
  v14._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v14);
  v15._countAndFlagsBits = a1;
  v15._object = a2;
  String.append(_:)(v15);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v9, "logInfo:", v16);

  v17 = *(void **)&v4[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v17)
  {
    v46 = 0u;
    v47 = 0u;
LABEL_12:
    sub_100011484((uint64_t)&v46, &qword_1000B13D0);
    goto LABEL_13;
  }
  v18 = objc_msgSend(v17, "remoteTarget");
  if (v18)
  {
    v19 = v18;
    _bridgeAnyObjectToAny(_:)(v45);
    swift_unknownObjectRelease(v19);
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  sub_10004B0A4((uint64_t)v45, (uint64_t)&v46);
  if (!*((_QWORD *)&v47 + 1))
    goto LABEL_12;
  v20 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v45, &v46, (char *)&type metadata for Any + 8, v20, 6) & 1) == 0)
  {
LABEL_13:
    *(_QWORD *)&v46 = 0;
    *((_QWORD *)&v46 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v36 = *((_QWORD *)&v46 + 1);
    v37 = objc_msgSend(v5, "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;
    swift_bridgeObjectRelease(v36);

    *(_QWORD *)&v46 = v38;
    *((_QWORD *)&v46 + 1) = v40;
    v41._countAndFlagsBits = 0xD00000000000001FLL;
    v41._object = (void *)0x8000000100088010;
    String.append(_:)(v41);
    v42._countAndFlagsBits = a1;
    v42._object = a2;
    String.append(_:)(v42);
    v43 = *((_QWORD *)&v46 + 1);
    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v43);
    objc_msgSend(v9, "logInfo:", v35);
    goto LABEL_14;
  }
  v21 = *(void **)&v45[0];
  *(_QWORD *)&v46 = 0;
  *((_QWORD *)&v46 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(68);
  v22 = objc_msgSend(v5, "description");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v27._countAndFlagsBits = 0xD000000000000030;
  v27._object = (void *)0x8000000100088030;
  String.append(_:)(v27);
  v28._countAndFlagsBits = a1;
  v28._object = a2;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x697669746361202CLL;
  v29._object = (void *)0xEE00203A64497974;
  String.append(_:)(v29);
  *(_QWORD *)&v45[0] = a3;
  *((_QWORD *)&v45[0] + 1) = a4;
  v30 = sub_10000A58C(&qword_1000AF7A0);
  _print_unlocked<A, B>(_:_:)(v45, &v46, v30, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v31 = *((_QWORD *)&v46 + 1);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  objc_msgSend(v9, "logInfo:", v32);

  v33 = String._bridgeToObjectiveC()();
  if (a4)
    v34 = a4;
  else
    v34 = 0xE000000000000000;
  swift_bridgeObjectRetain(a4);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  objc_msgSend(v21, "didEndAlertWithId:activityId:", v33, v35);
  swift_unknownObjectRelease(v21);

LABEL_14:
}

void sub_100047480(uint64_t a1, void *a2)
{
  char *v2;
  void *v3;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  NSString v20;
  NSString v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSString v30;
  id v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;

  v3 = v2;
  v6 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v6)
  {
    v33 = 0u;
    v34 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v33, &qword_1000B13D0);
    goto LABEL_10;
  }
  v7 = objc_msgSend(v6, "remoteTarget");
  if (v7)
  {
    v8 = v7;
    _bridgeAnyObjectToAny(_:)(v32);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  sub_10004B0A4((uint64_t)v32, (uint64_t)&v33);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_9;
  v9 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v32, &v33, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
  {
LABEL_10:
    v22 = (void *)objc_opt_self(MTSessionUtilities);
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v23 = *((_QWORD *)&v33 + 1);
    v24 = objc_msgSend(v3, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v23);

    *(_QWORD *)&v33 = v25;
    *((_QWORD *)&v33 + 1) = v27;
    v28._countAndFlagsBits = 0xD00000000000002ELL;
    v28._object = (void *)0x8000000100087C90;
    String.append(_:)(v28);
    v29 = *((_QWORD *)&v33 + 1);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v22, "logInfo:", v30);

    v31 = sub_100047904();
    v21 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  v10 = *(void **)&v32[0];
  v11 = (void *)objc_opt_self(MTSessionUtilities);
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v12 = *((_QWORD *)&v33 + 1);
  v13 = objc_msgSend(v3, "description");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v12);

  *(_QWORD *)&v33 = v14;
  *((_QWORD *)&v33 + 1) = v16;
  v17._object = (void *)0x8000000100087CC0;
  v17._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v17);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.append(_:)(v18);
  v19 = *((_QWORD *)&v33 + 1);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v11, "logInfo:", v20);

  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "snoozeAlarmWithId:", v21);
  swift_unknownObjectRelease(v10);
LABEL_11:

}

id sub_100047760()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface);
  }
  else
  {
    v4 = sub_1000477BC();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1000477BC()
{
  NSString v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(BSMutableServiceInterface), "interfaceWithIdentifier:", v0);

  v2 = (void *)objc_opt_self(BSObjCProtocol);
  v3 = objc_msgSend(v2, "protocolForProtocol:", &OBJC_PROTOCOL___ClockAngelServer);
  objc_msgSend(v1, "setServer:", v3);

  v4 = objc_msgSend(v2, "protocolForProtocol:", &OBJC_PROTOCOL___ClockAngelClient);
  objc_msgSend(v1, "setClient:", v4);

  objc_msgSend(v1, "setClientMessagingExpectation:", 0);
  return v1;
}

id sub_1000478C4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClockAngelConnectionManager()), "init");
  qword_1000B6F08 = (uint64_t)result;
  return result;
}

id sub_1000478F0()
{
  return sub_100047918(&OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___timerManager, (Class *)MTTimerManager_ptr);
}

id sub_100047904()
{
  return sub_100047918(&OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___alarmManager, (Class *)MTAlarmManager_ptr);
}

id sub_100047918(uint64_t *a1, Class *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone(*a2), "init");
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

void sub_100047980()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  objc_class *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char *v22;
  id v23;
  __n128 v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  id v32;
  _QWORD aBlock[5];
  uint64_t v34;
  objc_super v35;

  v1 = v0;
  v30 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection] = 0;
  v29 = OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connectionManagerQueue;
  sub_100037CB4();
  v11 = v1;
  static DispatchQoS.unspecified.getter(v11);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v12 = sub_10004B8B8();
  v13 = sub_10000A58C(&qword_1000B0358);
  v14 = sub_10004B900();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v13, v14, v5, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v30);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x8000000100088280, v10, v7, v4, 0);
  *(_QWORD *)&v1[v29] = v15;
  v16 = &v11[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_reloadLayout];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___interface] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___timerManager] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager____lazy_storage___alarmManager] = 0;

  v17 = (objc_class *)type metadata accessor for ClockAngelConnectionManager();
  v35.receiver = v11;
  v35.super_class = v17;
  v18 = objc_msgSendSuper2(&v35, "init");
  v32 = v18;
  v19 = swift_allocObject(&unk_1000A0CA0, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10004B94C;
  *(_QWORD *)(v19 + 24) = &v31;
  aBlock[4] = sub_10004BA10;
  v34 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100047D74;
  aBlock[3] = &unk_1000A0CB8;
  v20 = _Block_copy(aBlock);
  v21 = (void *)objc_opt_self(BSServiceConnectionListener);
  v22 = (char *)v18;
  v23 = objc_msgSend(v21, "listenerWithConfigurator:", v20, swift_retain(v19).n128_f64[0]);
  _Block_release(v20);
  v24 = swift_release(v34);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v19, "", 0, 0, 0, 1, v24);
  swift_release(v19);
  if ((v20 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v25 = OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener;
    v26 = *(void **)&v22[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener];
    *(_QWORD *)&v22[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_publicListener] = v23;

    v27 = *(void **)&v22[v25];
    if (v27)
    {
      v28 = v27;
      objc_msgSend(v28, "activate");

      return;
    }
  }
  __break(1u);
}

id sub_100047CC8(void *a1, uint64_t a2)
{
  NSString v4;
  NSString v5;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setDomain:", v4);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setService:", v5);

  return objc_msgSend(a1, "setDelegate:", a2);
}

void sub_100047D98(void *a1, char *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char *v17;
  void **v18;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  void *v22;
  uint64_t v23;

  objc_msgSend(a1, "setTargetQueue:", *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connectionManagerQueue]);
  v4 = objc_msgSend((id)objc_opt_self(BSServiceQuality), "userInitiated");
  objc_msgSend(a1, "setServiceQuality:", v4);

  v5 = sub_100047760();
  objc_msgSend(a1, "setInterface:", v5);

  objc_msgSend(a1, "setInterfaceTarget:", a2);
  v6 = swift_allocObject(&unk_1000A0BB0, 24, 7);
  *(_QWORD *)(v6 + 16) = a2;
  v22 = sub_10004B8A0;
  v23 = v6;
  v18 = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_1000480B4;
  v21 = &unk_1000A0BC8;
  v7 = _Block_copy(&v18);
  v8 = v23;
  v9 = a2;
  objc_msgSend(a1, "setActivationHandler:", v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);
  v10 = swift_allocObject(&unk_1000A0C00, 24, 7);
  *(_QWORD *)(v10 + 16) = v9;
  v22 = sub_10004B8A8;
  v23 = v10;
  v18 = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_1000480B4;
  v21 = &unk_1000A0C18;
  v11 = _Block_copy(&v18);
  v12 = v23;
  v13 = v9;
  objc_msgSend(a1, "setInvalidationHandler:", v11, swift_release(v12).n128_f64[0]);
  _Block_release(v11);
  v14 = swift_allocObject(&unk_1000A0C50, 24, 7);
  *(_QWORD *)(v14 + 16) = v13;
  v22 = sub_10004B8B0;
  v23 = v14;
  v18 = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_1000480B4;
  v21 = &unk_1000A0C68;
  v15 = _Block_copy(&v18);
  v16 = v23;
  v17 = v13;
  objc_msgSend(a1, "setInterruptionHandler:", v15, swift_release(v16).n128_f64[0]);
  _Block_release(v15);
}

void sub_100047FD0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;

  v3 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(28);
  v4 = objc_msgSend(a2, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  v7._object = (void *)0x8000000100088260;
  v7._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v3, "logInfo:", v8);

}

void sub_1000480B8(uint64_t a1, char *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  NSString v9;
  void *v10;

  v3 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(30);
  v4 = objc_msgSend(a2, "description", 0);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;
  swift_bridgeObjectRelease(0xE000000000000000);

  v8._object = (void *)0x8000000100088240;
  v8._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v8);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v3, "logInfo:", v9, v5);

  v10 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection] = 0;

}

id sub_1000481AC(void *a1, void *a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  NSString v10;

  v4 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(30);
  v5 = objc_msgSend(a2, "description", 0);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;
  swift_bridgeObjectRelease(0xE000000000000000);

  v9._object = (void *)0x8000000100088220;
  v9._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v9);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v4, "logInfo:", v10, v6);

  return objc_msgSend(a1, "activate");
}

uint64_t sub_1000482A0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

id sub_10004835C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClockAngelConnectionManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ClockAngelConnectionManager()
{
  return objc_opt_self(_TtC10ClockAngel27ClockAngelConnectionManager);
}

uint64_t sub_100048438(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  unint64_t v23;
  NSString v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v7 = v6;
  v29 = a5;
  v30 = a6;
  v32 = a3;
  v33 = a4;
  v31 = a1;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TimerSessionEntry(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (void *)objc_opt_self(MTSessionUtilities);
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  v17 = v35;
  v18 = objc_msgSend(v7, "description");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;
  swift_bridgeObjectRelease(v17);

  v34 = v19;
  v35 = v21;
  v22._object = (void *)0x8000000100088100;
  v22._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v22);
  v23 = v35;
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v16, "logInfo:", v24);

  if (qword_1000AECE0 != -1)
    swift_once(&qword_1000AECE0, sub_1000415B8);
  sub_10004240C();
  if (qword_1000AECC0 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v29, v9);
  swift_bridgeObjectRetain(a2);
  v25 = v33;
  swift_bridgeObjectRetain(v33);
  objc_msgSend(v30, "doubleValue");
  sub_10001EA34(v31, a2, v32, v25, (uint64_t)v12, 0, 0, 0xE000000000000000, v15, 0.0, v26, 0, 0, 1);
  dispatch thunk of DataStore.updateEntry(_:)(v15);
  return sub_10001F7E8((uint64_t)v15);
}

uint64_t sub_1000487A0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  unint64_t v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v10 = v9;
  v40 = a3;
  v41 = a7;
  v38 = a6;
  v39 = a1;
  v36 = a5;
  v37 = a9;
  v14 = type metadata accessor for Date(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TimerSessionEntry(0);
  __chkstk_darwin(v17);
  v19 = (id *)((char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = (void *)objc_opt_self(MTSessionUtilities);
  v42 = 0;
  v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  v21 = v43;
  v22 = objc_msgSend(v10, "description");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;
  swift_bridgeObjectRelease(v21);

  v42 = v23;
  v43 = v25;
  v26._object = (void *)0x80000001000880D0;
  v26._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v26);
  v27 = v43;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  objc_msgSend(v20, "logInfo:", v28);

  if (qword_1000AECC0 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  swift_bridgeObjectRetain(a2);
  v29 = swift_bridgeObjectRetain(a4);
  Date.init()(v29);
  swift_bridgeObjectRetain(a8);
  objc_msgSend(v36, "doubleValue");
  v31 = v30;
  objc_msgSend(v37, "doubleValue");
  v33 = v32;
  objc_msgSend(v38, "doubleValue");
  sub_10001EA34(v39, a2, v40, a4, (uint64_t)v16, 1, v41, a8, v19, v34, v31, 0, v33, 0);
  dispatch thunk of DataStore.updateEntry(_:)(v19);
  return sub_10001F7E8((uint64_t)v19);
}

double sub_100048B5C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  NSString v11;
  _QWORD v13[2];
  _QWORD v14[5];

  v5 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(46);
  v6 = objc_msgSend(v2, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;
  swift_bridgeObjectRelease(0xE000000000000000);

  v14[0] = v7;
  v14[1] = v9;
  v10._object = (void *)0x80000001000880A0;
  v10._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v10);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v5, "logInfo:", v11);

  if (qword_1000AECC0 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(v14, v13, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.clear(for:)(v14);
  sub_10001E790((uint64_t)v14);
  if (qword_1000AECE0 != -1)
    swift_once(&qword_1000AECE0, sub_1000415B8);
  return sub_10004240C();
}

void sub_100048EBC()
{
  sub_10001E5B4(38, 0xD000000000000024, (void *)0x8000000100088070);
}

uint64_t sub_1000490C8(void *a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  NSString v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD v21[2];

  v3 = (void *)objc_opt_self(MTSessionUtilities);
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v4 = objc_msgSend(v1, "description", 0);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._object = (void *)0x8000000100087FB0;
  v9._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v9);
  v10 = objc_msgSend(a1, "alarmIDString");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000);
  objc_msgSend(v3, "logInfo:", v15);

  if (qword_1000AECE0 != -1)
    swift_once(&qword_1000AECE0, sub_1000415B8);
  v16 = objc_msgSend(a1, "alarmIDString");
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v19 = v18;

  sub_10004301C(v17, v19, 0, 0, 1);
  swift_bridgeObjectRelease(v19);
  if (qword_1000AECC8 != -1)
    swift_once(&qword_1000AECC8, sub_10001EE18);
  v21[0] = a1;
  return dispatch thunk of DataStore.updateEntry(_:)(v21);
}

uint64_t sub_10004935C(uint64_t a1)
{
  void *v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];
  _QWORD v25[4];
  uint64_t v26;
  uint64_t v27;

  v3 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(33);
  v4 = objc_msgSend(v1, "description");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;
  swift_bridgeObjectRelease(0xE000000000000000);

  v24[0] = v5;
  v24[1] = v7;
  v8._object = (void *)0x8000000100087F60;
  v8._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v8);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v3, "logInfo:", v9);

  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = (char *)_swiftEmptyArrayStorage;
    v18 = _swiftEmptyArrayStorage[2];
    if (!v18)
      return swift_bridgeObjectRelease(v12);
    goto LABEL_15;
  }
  v11 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v12 = (char *)_swiftEmptyArrayStorage;
  do
  {
    sub_100035788(v11, (uint64_t)v24);
    sub_100035788((uint64_t)v24, (uint64_t)v25);
    if ((swift_dynamicCast(&v26, v25, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    {
      v26 = 0;
      v27 = 0;
    }
    sub_100007CF0(v24);
    v14 = v27;
    if (v27)
    {
      v15 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
        v12 = sub_10004B0EC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
      v17 = *((_QWORD *)v12 + 2);
      v16 = *((_QWORD *)v12 + 3);
      if (v17 >= v16 >> 1)
        v12 = sub_10004B0EC((char *)(v16 > 1), v17 + 1, 1, v12);
      *((_QWORD *)v12 + 2) = v17 + 1;
      v13 = &v12[16 * v17];
      *((_QWORD *)v13 + 4) = v15;
      *((_QWORD *)v13 + 5) = v14;
    }
    v11 += 32;
    --v10;
  }
  while (v10);
  swift_bridgeObjectRelease(a1);
  v18 = *((_QWORD *)v12 + 2);
  if (v18)
  {
LABEL_15:
    swift_bridgeObjectRetain(v12);
    v19 = v12 + 40;
    do
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = qword_1000AECC8;
      swift_bridgeObjectRetain(*v19);
      if (v22 != -1)
        swift_once(&qword_1000AECC8, sub_10001EE18);
      v19 += 2;
      v25[0] = v20;
      v25[1] = v21;
      swift_bridgeObjectRetain(v21);
      AnyHashable.init<A>(_:)(v24, v25, &type metadata for String, &protocol witness table for String);
      dispatch thunk of DataStore.clear(for:)(v24);
      sub_10001E790((uint64_t)v24);
      swift_bridgeObjectRelease(v21);
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v12);
  }
  return swift_bridgeObjectRelease(v12);
}

void sub_1000496F0()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  NSString v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSString v30;
  void *v31;
  NSString v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(33);
  v3 = objc_msgSend(v0, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&v34 = v4;
  *((_QWORD *)&v34 + 1) = v6;
  v7._object = (void *)0x8000000100087EE0;
  v7._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8);

  v9 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v9)
  {
    v34 = 0u;
    v35 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v34, &qword_1000B13D0);
    goto LABEL_10;
  }
  v10 = objc_msgSend(v9, "remoteTarget");
  if (v10)
  {
    v11 = v10;
    _bridgeAnyObjectToAny(_:)(v33);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    memset(v33, 0, sizeof(v33));
  }
  sub_10004B0A4((uint64_t)v33, (uint64_t)&v34);
  if (!*((_QWORD *)&v35 + 1))
    goto LABEL_9;
  v12 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v33, &v34, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v23 = *((_QWORD *)&v34 + 1);
    v24 = objc_msgSend(v1, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v23);

    *(_QWORD *)&v34 = v25;
    *((_QWORD *)&v34 + 1) = v27;
    v28._countAndFlagsBits = 0xD00000000000002DLL;
    v28._object = (void *)0x8000000100087F00;
    String.append(_:)(v28);
    v29 = *((_QWORD *)&v34 + 1);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v2, "logInfo:", v30);

    v31 = (void *)objc_opt_self(ClockAngelUtilities);
    v32 = String._bridgeToObjectiveC()();
    v22 = sub_1000478F0();
    objc_msgSend(v31, "updateTimerWithID:toState:withManager:", v32, 2, v22);

    goto LABEL_11;
  }
  v13 = *(void **)&v33[0];
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v14 = *((_QWORD *)&v34 + 1);
  v15 = objc_msgSend(v1, "description");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;
  swift_bridgeObjectRelease(v14);

  *(_QWORD *)&v34 = v16;
  *((_QWORD *)&v34 + 1) = v18;
  v19._countAndFlagsBits = 0xD000000000000028;
  v19._object = (void *)0x8000000100087F30;
  String.append(_:)(v19);
  v20 = *((_QWORD *)&v34 + 1);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v2, "logInfo:", v21);

  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "pauseTimerWithId:", v22);
  swift_unknownObjectRelease(v13);
LABEL_11:

}

void sub_100049A50()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  NSString v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSString v30;
  void *v31;
  NSString v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(34);
  v3 = objc_msgSend(v0, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&v34 = v4;
  *((_QWORD *)&v34 + 1) = v6;
  v7._countAndFlagsBits = 0xD000000000000020;
  v7._object = (void *)0x8000000100087E60;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8);

  v9 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v9)
  {
    v34 = 0u;
    v35 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v34, &qword_1000B13D0);
    goto LABEL_10;
  }
  v10 = objc_msgSend(v9, "remoteTarget");
  if (v10)
  {
    v11 = v10;
    _bridgeAnyObjectToAny(_:)(v33);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    memset(v33, 0, sizeof(v33));
  }
  sub_10004B0A4((uint64_t)v33, (uint64_t)&v34);
  if (!*((_QWORD *)&v35 + 1))
    goto LABEL_9;
  v12 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v33, &v34, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v23 = *((_QWORD *)&v34 + 1);
    v24 = objc_msgSend(v1, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v23);

    *(_QWORD *)&v34 = v25;
    *((_QWORD *)&v34 + 1) = v27;
    v28._countAndFlagsBits = 0xD00000000000002ELL;
    v28._object = (void *)0x8000000100087E90;
    String.append(_:)(v28);
    v29 = *((_QWORD *)&v34 + 1);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v2, "logInfo:", v30);

    v31 = (void *)objc_opt_self(ClockAngelUtilities);
    v32 = String._bridgeToObjectiveC()();
    v22 = sub_1000478F0();
    objc_msgSend(v31, "updateTimerWithID:toState:withManager:", v32, 3, v22);

    goto LABEL_11;
  }
  v13 = *(void **)&v33[0];
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  v14 = *((_QWORD *)&v34 + 1);
  v15 = objc_msgSend(v1, "description");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;
  swift_bridgeObjectRelease(v14);

  *(_QWORD *)&v34 = v16;
  *((_QWORD *)&v34 + 1) = v18;
  v19._object = (void *)0x8000000100087EC0;
  v19._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v19);
  v20 = *((_QWORD *)&v34 + 1);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v2, "logInfo:", v21);

  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "resumeTimerWithId:", v22);
  swift_unknownObjectRelease(v13);
LABEL_11:

}

void sub_100049DA8()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  NSString v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSString v30;
  void *v31;
  NSString v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(32);
  v3 = objc_msgSend(v0, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&v34 = v4;
  *((_QWORD *)&v34 + 1) = v6;
  v7._countAndFlagsBits = 0xD00000000000001ELL;
  v7._object = (void *)0x8000000100087DF0;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8);

  v9 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v9)
  {
    v34 = 0u;
    v35 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v34, &qword_1000B13D0);
    goto LABEL_10;
  }
  v10 = objc_msgSend(v9, "remoteTarget");
  if (v10)
  {
    v11 = v10;
    _bridgeAnyObjectToAny(_:)(v33);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    memset(v33, 0, sizeof(v33));
  }
  sub_10004B0A4((uint64_t)v33, (uint64_t)&v34);
  if (!*((_QWORD *)&v35 + 1))
    goto LABEL_9;
  v12 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v33, &v34, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)&v34 = 0;
    *((_QWORD *)&v34 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v23 = *((_QWORD *)&v34 + 1);
    v24 = objc_msgSend(v1, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v23);

    *(_QWORD *)&v34 = v25;
    *((_QWORD *)&v34 + 1) = v27;
    v28._countAndFlagsBits = 0xD00000000000002CLL;
    v28._object = (void *)0x8000000100087E10;
    String.append(_:)(v28);
    v29 = *((_QWORD *)&v34 + 1);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v2, "logInfo:", v30);

    v31 = (void *)objc_opt_self(ClockAngelUtilities);
    v32 = String._bridgeToObjectiveC()();
    v22 = sub_1000478F0();
    objc_msgSend(v31, "updateTimerWithID:toState:withManager:", v32, 1, v22);

    goto LABEL_11;
  }
  v13 = *(void **)&v33[0];
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  v14 = *((_QWORD *)&v34 + 1);
  v15 = objc_msgSend(v1, "description");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;
  swift_bridgeObjectRelease(v14);

  *(_QWORD *)&v34 = v16;
  *((_QWORD *)&v34 + 1) = v18;
  v19._object = (void *)0x8000000100087E40;
  v19._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v19);
  v20 = *((_QWORD *)&v34 + 1);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v2, "logInfo:", v21);

  v22 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "stopTimerWithId:", v22);
  swift_unknownObjectRelease(v13);
LABEL_11:

}

void sub_10004A100(uint64_t a1, void *a2)
{
  char *v2;
  void *v3;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  NSString v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  NSString v27;
  NSString v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  NSString v36;
  id v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;

  v3 = v2;
  v6 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(48);
  v7 = objc_msgSend(v2, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&v39 = v8;
  *((_QWORD *)&v39 + 1) = v10;
  v11._object = (void *)0x8000000100087D50;
  v11._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v6, "logInfo:", v13);

  v14 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v14)
  {
    v39 = 0u;
    v40 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v39, &qword_1000B13D0);
    goto LABEL_10;
  }
  v15 = objc_msgSend(v14, "remoteTarget");
  if (v15)
  {
    v16 = v15;
    _bridgeAnyObjectToAny(_:)(v38);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    memset(v38, 0, sizeof(v38));
  }
  sub_10004B0A4((uint64_t)v38, (uint64_t)&v39);
  if (!*((_QWORD *)&v40 + 1))
    goto LABEL_9;
  v17 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v38, &v39, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v29 = *((_QWORD *)&v39 + 1);
    v30 = objc_msgSend(v3, "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;
    swift_bridgeObjectRelease(v29);

    *(_QWORD *)&v39 = v31;
    *((_QWORD *)&v39 + 1) = v33;
    v34._countAndFlagsBits = 0xD00000000000002FLL;
    v34._object = (void *)0x8000000100087D80;
    String.append(_:)(v34);
    v35 = *((_QWORD *)&v39 + 1);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    objc_msgSend(v6, "logInfo:", v36);

    v37 = sub_1000478F0();
    v28 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  v18 = *(void **)&v38[0];
  *(_QWORD *)&v39 = 0;
  *((_QWORD *)&v39 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v19 = objc_msgSend(v3, "description");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v24._countAndFlagsBits = 0xD000000000000034;
  v24._object = (void *)0x8000000100087DB0;
  String.append(_:)(v24);
  v25._countAndFlagsBits = a1;
  v25._object = a2;
  String.append(_:)(v25);
  v26 = *((_QWORD *)&v39 + 1);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  objc_msgSend(v6, "logInfo:", v27);

  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v18, "dismissTimerWithIdentifier:", v28);
  swift_unknownObjectRelease(v18);
LABEL_11:

}

void sub_10004A484(uint64_t a1, void *a2)
{
  char *v2;
  void *v3;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  NSString v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  NSString v27;
  NSString v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  NSString v36;
  id v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;

  v3 = v2;
  v6 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(47);
  v7 = objc_msgSend(v2, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;
  swift_bridgeObjectRelease(0xE000000000000000);

  *(_QWORD *)&v39 = v8;
  *((_QWORD *)&v39 + 1) = v10;
  v11._object = (void *)0x8000000100088580;
  v11._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v6, "logInfo:", v13);

  v14 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v14)
  {
    v39 = 0u;
    v40 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v39, &qword_1000B13D0);
    goto LABEL_10;
  }
  v15 = objc_msgSend(v14, "remoteTarget");
  if (v15)
  {
    v16 = v15;
    _bridgeAnyObjectToAny(_:)(v38);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    memset(v38, 0, sizeof(v38));
  }
  sub_10004B0A4((uint64_t)v38, (uint64_t)&v39);
  if (!*((_QWORD *)&v40 + 1))
    goto LABEL_9;
  v17 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v38, &v39, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
  {
LABEL_10:
    *(_QWORD *)&v39 = 0;
    *((_QWORD *)&v39 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v29 = *((_QWORD *)&v39 + 1);
    v30 = objc_msgSend(v3, "description");
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;
    swift_bridgeObjectRelease(v29);

    *(_QWORD *)&v39 = v31;
    *((_QWORD *)&v39 + 1) = v33;
    v34._countAndFlagsBits = 0xD00000000000002ELL;
    v34._object = (void *)0x80000001000885B0;
    String.append(_:)(v34);
    v35 = *((_QWORD *)&v39 + 1);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    objc_msgSend(v6, "logInfo:", v36);

    v37 = sub_1000478F0();
    v28 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  v18 = *(void **)&v38[0];
  *(_QWORD *)&v39 = 0;
  *((_QWORD *)&v39 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  v19 = *((_QWORD *)&v39 + 1);
  v20 = objc_msgSend(v3, "description");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;
  swift_bridgeObjectRelease(v19);

  *(_QWORD *)&v39 = v21;
  *((_QWORD *)&v39 + 1) = v23;
  v24._countAndFlagsBits = 0xD00000000000002DLL;
  v24._object = (void *)0x80000001000885E0;
  String.append(_:)(v24);
  v25._countAndFlagsBits = a1;
  v25._object = a2;
  String.append(_:)(v25);
  v26 = *((_QWORD *)&v39 + 1);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  objc_msgSend(v6, "logInfo:", v27);

  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v18, "repeatTimerWithIdentifier:", v28);
  swift_unknownObjectRelease(v18);
LABEL_11:

}

void sub_10004A7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  void *Strong;
  uint64_t v9;
  Swift::String v10;
  unint64_t v11;
  NSString v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  _QWORD v18[3];

  v6 = a2 + 16;
  v7 = (void *)objc_opt_self(MTSessionUtilities);
  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(76);
  v15 = 0;
  v16 = 0xE000000000000000;
  swift_beginAccess(v6, v18, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
  v17 = Strong;
  v9 = sub_10000A58C(&qword_1000B14B8);
  _print_unlocked<A, B>(_:_:)(&v17, &v15, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

  v10._object = (void *)0x8000000100088530;
  v10._countAndFlagsBits = 0xD00000000000004ALL;
  String.append(_:)(v10);
  v11 = v16;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v7, "logInfo:", v12);

  swift_beginAccess(v6, &v15, 0, 0);
  v13 = swift_unknownObjectWeakLoadStrong(v6);
  if (v13)
  {
    v14 = (void *)v13;
    sub_100046BB4(a3, a4, 0);

  }
}

void sub_10004A93C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10004A98C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7;
  void *Strong;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  NSString v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD v19[3];

  v6 = a2 + 16;
  v7 = (void *)objc_opt_self(MTSessionUtilities);
  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(88);
  v16 = 0;
  v17 = 0xE000000000000000;
  swift_beginAccess(v6, v19, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
  v18 = Strong;
  v9 = sub_10000A58C(&qword_1000B14B8);
  _print_unlocked<A, B>(_:_:)(&v18, &v16, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);

  v10._object = (void *)0x8000000100088410;
  v10._countAndFlagsBits = 0xD000000000000054;
  String.append(_:)(v10);
  v11._countAndFlagsBits = a3;
  v11._object = a4;
  String.append(_:)(v11);
  v12 = v17;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v7, "logInfo:", v13);

  swift_beginAccess(v6, &v16, 0, 0);
  v14 = swift_unknownObjectWeakLoadStrong(v6);
  if (v14)
  {
    v15 = (void *)v14;
    sub_1000466B4(a3, a4, 0);

  }
}

void sub_10004AAE0(uint64_t a1, void *a2)
{
  char *v2;
  void *v3;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  NSString v20;
  NSString v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSString v30;
  id v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;

  v3 = v2;
  v6 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v6)
  {
    v33 = 0u;
    v34 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v33, &qword_1000B13D0);
    goto LABEL_10;
  }
  v7 = objc_msgSend(v6, "remoteTarget");
  if (v7)
  {
    v8 = v7;
    _bridgeAnyObjectToAny(_:)(v32);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  sub_10004B0A4((uint64_t)v32, (uint64_t)&v33);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_9;
  v9 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v32, &v33, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
  {
LABEL_10:
    v22 = (void *)objc_opt_self(MTSessionUtilities);
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v23 = *((_QWORD *)&v33 + 1);
    v24 = objc_msgSend(v3, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v23);

    *(_QWORD *)&v33 = v25;
    *((_QWORD *)&v33 + 1) = v27;
    v28._countAndFlagsBits = 0xD00000000000002FLL;
    v28._object = (void *)0x8000000100087CF0;
    String.append(_:)(v28);
    v29 = *((_QWORD *)&v33 + 1);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v22, "logInfo:", v30);

    v31 = sub_100047904();
    v21 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  v10 = *(void **)&v32[0];
  v11 = (void *)objc_opt_self(MTSessionUtilities);
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v12 = *((_QWORD *)&v33 + 1);
  v13 = objc_msgSend(v3, "description");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v12);

  *(_QWORD *)&v33 = v14;
  *((_QWORD *)&v33 + 1) = v16;
  v17._object = (void *)0x8000000100087D20;
  v17._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v17);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.append(_:)(v18);
  v19 = *((_QWORD *)&v33 + 1);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v11, "logInfo:", v20);

  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "dismissAlarmWithId:", v21);
  swift_unknownObjectRelease(v10);
LABEL_11:

}

void sub_10004ADC0(uint64_t a1, void *a2)
{
  char *v2;
  void *v3;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  NSString v20;
  NSString v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  NSString v30;
  id v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;

  v3 = v2;
  v6 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
  if (!v6)
  {
    v33 = 0u;
    v34 = 0u;
LABEL_9:
    sub_100011484((uint64_t)&v33, &qword_1000B13D0);
    goto LABEL_10;
  }
  v7 = objc_msgSend(v6, "remoteTarget");
  if (v7)
  {
    v8 = v7;
    _bridgeAnyObjectToAny(_:)(v32);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  sub_10004B0A4((uint64_t)v32, (uint64_t)&v33);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_9;
  v9 = sub_10000A58C(&qword_1000B13D8);
  if ((swift_dynamicCast(v32, &v33, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
  {
LABEL_10:
    v22 = (void *)objc_opt_self(MTSessionUtilities);
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v23 = *((_QWORD *)&v33 + 1);
    v24 = objc_msgSend(v3, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;
    swift_bridgeObjectRelease(v23);

    *(_QWORD *)&v33 = v25;
    *((_QWORD *)&v33 + 1) = v27;
    v28._countAndFlagsBits = 0xD00000000000002CLL;
    v28._object = (void *)0x8000000100087C30;
    String.append(_:)(v28);
    v29 = *((_QWORD *)&v33 + 1);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v22, "logInfo:", v30);

    v31 = sub_100047904();
    v21 = String._bridgeToObjectiveC()();

    goto LABEL_11;
  }
  v10 = *(void **)&v32[0];
  v11 = (void *)objc_opt_self(MTSessionUtilities);
  *(_QWORD *)&v33 = 0;
  *((_QWORD *)&v33 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  v12 = *((_QWORD *)&v33 + 1);
  v13 = objc_msgSend(v3, "description");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v12);

  *(_QWORD *)&v33 = v14;
  *((_QWORD *)&v33 + 1) = v16;
  v17._object = (void *)0x8000000100087C60;
  v17._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v17);
  v18._countAndFlagsBits = a1;
  v18._object = a2;
  String.append(_:)(v18);
  v19 = *((_QWORD *)&v33 + 1);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v11, "logInfo:", v20);

  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "stopSnoozeAlarmWithId:", v21);
  swift_unknownObjectRelease(v10);
LABEL_11:

}

uint64_t sub_10004B0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000B13D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_10004B0EC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000A58C((uint64_t *)&unk_1000B13E0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void sub_10004B1EC(void *a1)
{
  void *v1;
  id v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  double v12;
  void *v13;
  id v14;
  void *v15;
  Swift::String v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  NSString v24;
  _QWORD v25[5];
  uint64_t v26;

  v3 = objc_msgSend(a1, "remoteProcess");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "hasEntitlement:", v4);

  if (v5)
  {
    v6 = swift_allocObject(&unk_1000A0B38, 24, 7);
    *(_QWORD *)(v6 + 16) = v1;
    v7 = swift_allocObject(&unk_1000A0B60, 32, 7);
    *(_QWORD *)(v7 + 16) = sub_10004B850;
    *(_QWORD *)(v7 + 24) = v6;
    v25[4] = sub_10004B868;
    v26 = v7;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1107296256;
    v25[2] = sub_100047D74;
    v25[3] = &unk_1000A0B78;
    v8 = _Block_copy(v25);
    v9 = v26;
    v10 = v1;
    swift_retain(v7);
    objc_msgSend(a1, "configureConnection:", v8, swift_release(v9).n128_f64[0]);
    _Block_release(v8);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v7, "", 91, 67, 34, 1, v11);
    *(_QWORD *)&v12 = swift_release(v7).n128_u64[0];
    if ((v8 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      objc_msgSend(a1, "activate", v12);
      v13 = *(void **)&v10[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection];
      *(_QWORD *)&v10[OBJC_IVAR____TtC10ClockAngel27ClockAngelConnectionManager_connection] = a1;
      v14 = a1;
      swift_release(v6);

    }
  }
  else
  {
    v15 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(53);
    v16._countAndFlagsBits = 0x202D20726F727265;
    v16._object = (void *)0xE900000000000022;
    String.append(_:)(v16);
    v17 = objc_msgSend(a1, "remoteProcess", 0);
    v18 = objc_msgSend(v17, "description");

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
    v23._countAndFlagsBits = 0xD00000000000002ALL;
    v23._object = (void *)0x8000000100088180;
    String.append(_:)(v23);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE000000000000000);
    objc_msgSend(v15, "logError:", v24);

    objc_msgSend(a1, "invalidate");
  }
}

uint64_t sub_10004B4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[5];

  v8 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v18[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AECC0 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  v18[0] = a1;
  v18[1] = a2;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(v19, v18, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(v19);
  sub_10001E790((uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_100011484((uint64_t)v10, &qword_1000B13F0);
  sub_10001E728((uint64_t)v10, (uint64_t)v14);
  v16 = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v16);
  *((_QWORD *)v14 + 2) = a3;
  *((_QWORD *)v14 + 3) = a4;
  dispatch thunk of DataStore.updateEntry(_:)(v14);
  return sub_10001F7E8((uint64_t)v14);
}

uint64_t sub_10004B660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1000AECE0 != -1)
    swift_once(&qword_1000AECE0, sub_1000415B8);
  v0 = *(_QWORD *)(qword_1000B6EF0 + 24);
  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return 0;
  v2 = v0 + 16 * v1;
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + 24));
  return v3;
}

double sub_10004B6D8(uint64_t a1, void *a2)
{
  void *v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  NSString v13;

  v5 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(55);
  v6 = objc_msgSend(v2, "description", 0);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._object = (void *)0x8000000100087FB0;
  v11._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v11);
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000);
  objc_msgSend(v5, "logInfo:", v13);

  if (qword_1000AECE0 != -1)
    swift_once(&qword_1000AECE0, sub_1000415B8);
  return sub_10004301C(a1, a2, 0, 0, 1);
}

uint64_t sub_10004B82C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10004B850(void *a1)
{
  uint64_t v1;

  sub_100047D98(a1, *(char **)(v1 + 16));
}

uint64_t sub_10004B858()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004B868()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10004B888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004B898(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10004B8A0(uint64_t a1)
{
  uint64_t v1;

  sub_100047FD0(a1, *(void **)(v1 + 16));
}

void sub_10004B8A8(uint64_t a1)
{
  uint64_t v1;

  sub_1000480B8(a1, *(char **)(v1 + 16));
}

id sub_10004B8B0(void *a1)
{
  uint64_t v1;

  return sub_1000481AC(a1, *(void **)(v1 + 16));
}

unint64_t sub_10004B8B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0350;
  if (!qword_1000B0350)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0350);
  }
  return result;
}

unint64_t sub_10004B900()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0360;
  if (!qword_1000B0360)
  {
    v1 = sub_10000E880(&qword_1000B0358);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B0360);
  }
  return result;
}

id sub_10004B94C(void *a1)
{
  uint64_t v1;

  return sub_100047CC8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10004B954()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004B964()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10004B98C(uint64_t a1)
{
  uint64_t v1;

  sub_10004A98C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10004B99C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10004B9C8(uint64_t a1)
{
  uint64_t *v1;

  sub_10004A7F8(a1, v1[2], v1[3], v1[4]);
}

_QWORD *sub_10004BA14(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
  }
  swift_retain(v10);
  return a1;
}

uint64_t sub_10004BAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 32)));
}

uint64_t sub_10004BAFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_retain(v9);
  return a1;
}

uint64_t sub_10004BB78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_10004BC08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_10004BC80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_10004BD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004BD0C);
}

uint64_t sub_10004BD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10004BD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004BD94);
}

uint64_t sub_10004BD94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for RunningCountupView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1518, (uint64_t)&nominal type descriptor for RunningCountupView);
}

uint64_t sub_10004BE20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100083408;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10004BEB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B0B0, 1);
}

uint64_t sub_10004BEC0@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;

  v90 = a1;
  v89 = a2;
  v3 = type metadata accessor for Font._StylisticAlternative(0);
  v87 = *(_QWORD *)(v3 - 8);
  v88 = v3;
  __chkstk_darwin(v3);
  v85 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v5);
  v76 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = v10;
  v11 = (int *)type metadata accessor for TimelineCountupView(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10000A58C(&qword_1000B1560);
  __chkstk_darwin(v78);
  v75 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_10000A58C(&qword_1000B1568);
  __chkstk_darwin(v81);
  v77 = (uint64_t)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10000A58C(&qword_1000B1570);
  __chkstk_darwin(v82);
  v79 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_10000A58C(&qword_1000B1578);
  __chkstk_darwin(v84);
  v80 = (uint64_t)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10000A58C(&qword_1000B1580);
  __chkstk_darwin(v86);
  v83 = (uint64_t)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v2, v7);
  v20 = (int *)type metadata accessor for RunningCountupView(0);
  v21 = v20[6];
  v22 = *(_QWORD *)(v2 + v21);
  KeyPath = swift_getKeyPath(&unk_100083470, v23);
  v26 = swift_getKeyPath(&unk_1000834A0, v25);
  v27 = (uint64_t *)&v13[v11[5]];
  *v27 = v26;
  v28 = sub_10000A58C(&qword_1000B0A38);
  swift_storeEnumTagMultiPayload(v27, v28, 0);
  v29 = type metadata accessor for ObservableStopwatchModel(0);
  v30 = sub_1000073C0((unint64_t *)&qword_1000B2760, type metadata accessor for ObservableStopwatchModel, (uint64_t)&unk_100082708);
  v31 = EnvironmentObject.init()(v29, v30);
  v33 = v32;
  *(_QWORD *)v13 = KeyPath;
  v13[8] = 0;
  v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v11[6]], v74, v19);
  v13[v11[7]] = v90;
  *(_QWORD *)&v13[v11[8]] = v22;
  static Calendar.current.getter(v34);
  *(_QWORD *)&v13[v11[10]] = 1;
  v35 = (uint64_t *)&v13[v11[11]];
  *v35 = v31;
  v35[1] = v33;
  v36 = v2;
  v37 = *(double *)(v2 + v21);
  v38 = *(_QWORD *)(v2 + v20[7]);
  v39 = type metadata accessor for Font.Design(0);
  v40 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v76, 1, 1, v39);
  v41 = static Font.system(size:weight:design:)(v38, 0, v40, v37);
  sub_100011484(v40, &qword_1000AF198);
  v42 = Font.monospacedDigit()(v41);
  v43 = swift_release(v41);
  v45 = v87;
  v44 = v88;
  v46 = v85;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v87 + 104))(v85, enum case for Font._StylisticAlternative.three(_:), v88, v43);
  v47 = Font._stylisticAlternative(_:)(v46, v42);
  v48 = swift_release(v42);
  (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v46, v44, v48);
  v50 = swift_getKeyPath(&unk_1000834D0, v49);
  v51 = v75;
  sub_10000E800((uint64_t)v13, v75, type metadata accessor for TimelineCountupView);
  v52 = (uint64_t *)(v51 + *(int *)(v78 + 36));
  *v52 = v50;
  v52[1] = v47;
  sub_10000E844((uint64_t)v13, type metadata accessor for TimelineCountupView);
  v53 = *(_QWORD *)(v36 + v20[8]);
  v55 = swift_getKeyPath(&unk_100083500, v54);
  v56 = v77;
  sub_100011440(v51, v77, &qword_1000B1560);
  v57 = (uint64_t *)(v56 + *(int *)(v81 + 36));
  *v57 = v55;
  v57[1] = v53;
  swift_retain(v53);
  sub_100011484(v51, &qword_1000B1560);
  v59 = swift_getKeyPath(&unk_100083530, v58);
  v60 = v79;
  sub_100011440(v56, v79, &qword_1000B1568);
  v61 = v60 + *(int *)(v82 + 36);
  *(_QWORD *)v61 = v59;
  *(_BYTE *)(v61 + 8) = 1;
  sub_100011484(v56, &qword_1000B1568);
  v63 = swift_getKeyPath(&unk_100083560, v62);
  v64 = v80;
  sub_100011440(v60, v80, &qword_1000B1570);
  v65 = v64 + *(int *)(v84 + 36);
  *(_QWORD *)v65 = v63;
  *(_QWORD *)(v65 + 8) = 1;
  *(_BYTE *)(v65 + 16) = 0;
  sub_100011484(v60, &qword_1000B1570);
  if ((v90 & 1) != 0)
    v67 = 1.0;
  else
    v67 = 0.4;
  v68 = swift_getKeyPath(&unk_100083590, v66);
  v69 = v83;
  sub_100011440(v64, v83, &qword_1000B1578);
  v70 = v86;
  v71 = v69 + *(int *)(v86 + 36);
  *(_QWORD *)v71 = v68;
  *(double *)(v71 + 8) = v67;
  sub_100011484(v64, &qword_1000B1578);
  v72 = sub_10004DFF8();
  View.accessibilityIdentifier(_:)(0x6E696E69616D6572, 0xEE00656D69742D67, v70, v72);
  return sub_100011484(v69, &qword_1000B1580);
}

uint64_t sub_10004C4E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10004BEC0(*(unsigned __int8 *)(v2 + *(int *)(a1 + 20)), a2);
}

uint64_t type metadata accessor for TimelineCountupView(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B1618, (uint64_t)&nominal type descriptor for TimelineCountupView);
}

uint64_t sub_10004C508@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long double v46;
  uint64_t v47;
  Class isa;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[2];

  v77 = a1;
  v2 = type metadata accessor for Locale(0);
  v70 = *(_QWORD *)(v2 - 8);
  v71 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_10000A58C(&qword_1000B1680);
  __chkstk_darwin(v76);
  v74 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimelineCountupView(0);
  v66 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v66 + 64);
  __chkstk_darwin(v6);
  v72 = type metadata accessor for StopwatchTimelineSchedule(0);
  v8 = __chkstk_darwin(v72);
  v69 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v66 - v10);
  v75 = sub_10000A58C(&qword_1000B1688);
  v73 = *(_QWORD *)(v75 - 8);
  v12 = __chkstk_darwin(v75);
  v67 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v68 = (char *)&v66 - v15;
  v16 = (uint64_t *)(v1 + *(int *)(v6 + 44));
  v17 = *v16;
  if (*v16)
  {
    KeyPath = swift_getKeyPath(&unk_100083658, v14);
    v20 = swift_getKeyPath(&unk_100083680, v19);
    swift_retain(v17);
    static Published.subscript.getter(v78, v21, KeyPath, v20);
    swift_release(v17);
    swift_release(KeyPath);
    swift_release(v20);
    if (v78[0] == 2)
    {
      v23 = v1 + *(int *)(v6 + 24);
      v24 = v72;
      v25 = (char *)v11 + *(int *)(v72 + 20);
      v26 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v25, v23, v26);
      *v11 = 0x3F91111111111111;
      sub_10000E800(v1, (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimelineCountupView);
      v27 = *(unsigned __int8 *)(v66 + 80);
      v28 = (v27 + 16) & ~v27;
      v29 = swift_allocObject(&unk_1000A0DB8, v28 + v7, v27 | 7);
      sub_10002B89C((uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28, type metadata accessor for TimelineCountupView);
      v30 = v69;
      sub_10000E800((uint64_t)v11, v69, type metadata accessor for StopwatchTimelineSchedule);
      v31 = swift_allocObject(&unk_1000A0DE0, 32, 7);
      *(_QWORD *)(v31 + 16) = sub_10004EFD4;
      *(_QWORD *)(v31 + 24) = v29;
      v32 = sub_10000A58C(&qword_1000B1690);
      v33 = sub_1000073C0(&qword_1000B16A8, type metadata accessor for StopwatchTimelineSchedule, (uint64_t)&unk_10008374C);
      v34 = sub_10004EE58();
      v35 = v67;
      TimelineView<>.init(_:content:)(v30, sub_10004FBF8, v31, v24, v32, v33, v34);
      sub_10000E844((uint64_t)v11, type metadata accessor for StopwatchTimelineSchedule);
      v36 = v73;
      v37 = v68;
      v38 = v75;
      (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v68, v35, v75);
      v39 = v74;
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v74, v37, v38);
      swift_storeEnumTagMultiPayload(v39, v76, 0);
      v40 = sub_10004EDF4();
      _ConditionalContent<>.init(storage:)(v39, v38, v32, v40, v34);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v37, v38);
    }
    else
    {
      v42 = swift_getKeyPath(&unk_1000836A0, v22);
      v44 = swift_getKeyPath(&unk_1000836C8, v43);
      swift_retain(v17);
      static Published.subscript.getter(v78, v45, v42, v44);
      swift_release(v17);
      swift_release(v42);
      swift_release(v44);
      v46 = *(double *)v78;
      static Locale.current.getter(v47);
      isa = Locale._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v4, v71);
      v49 = sub_100006028(0, 1, 1, 1, 0, 1, 0, (uint64_t)isa, v46);

      if (v49)
      {
        v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        v52 = v51;

      }
      else
      {
        v52 = 0xE200000000000000;
        v50 = 11565;
      }
      v53 = v76;
      v54 = v74;
      v55 = v75;
      v78[0] = v50;
      v78[1] = v52;
      v56 = sub_10000EB0C();
      *(_QWORD *)v54 = Text.init<A>(_:)(v78, &type metadata for String, v56);
      *((_QWORD *)v54 + 1) = v57;
      v54[16] = v58 & 1;
      *((_QWORD *)v54 + 3) = v59;
      *((_WORD *)v54 + 16) = 256;
      swift_storeEnumTagMultiPayload(v54, v53, 1);
      v60 = sub_10000A58C(&qword_1000B1690);
      v61 = sub_10004EDF4();
      v62 = sub_10004EE58();
      return _ConditionalContent<>.init(storage:)(v54, v55, v60, v61, v62);
    }
  }
  else
  {
    v63 = v16[1];
    v64 = type metadata accessor for ObservableStopwatchModel(0);
    v65 = sub_1000073C0((unint64_t *)&qword_1000B2760, type metadata accessor for ObservableStopwatchModel, (uint64_t)&unk_100082708);
    result = EnvironmentObject.error()(0, v63, v64, v65);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004CA88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B16B0);
  TimelineView.Context.date.getter(v6);
  v7 = sub_10004CB68((uint64_t)v5);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15[0] = v7;
  v15[1] = v9;
  v10 = sub_10000EB0C();
  result = Text.init<A>(_:)(v15, &type metadata for String, v10);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v13 & 1;
  *(_QWORD *)(a1 + 24) = v14;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

uint64_t sub_10004CB68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;

  v2 = v1;
  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for TimelineCountupView(0);
  sub_100034514((uint64_t)v7);
  v9 = *(_QWORD *)v1;
  v10 = *(_BYTE *)(v1 + 8);
  sub_100030464(*(_QWORD *)v2, *(_BYTE *)(v2 + 8));
  v11 = sub_100034388(v9, v10);
  sub_1000304AC(v9, v10);
  v13 = (uint64_t *)(v2 + v8[11]);
  v14 = *v13;
  if (*v13)
  {
    v15 = v8[6];
    v16 = *(_BYTE *)(v2 + v8[7]);
    v17 = v2 + v15;
    KeyPath = swift_getKeyPath(&unk_1000836E8, v12);
    v20 = swift_getKeyPath(&unk_100083710, v19);
    swift_retain(v14);
    static Published.subscript.getter(&v29, v21, KeyPath, v20);
    swift_release(v14);
    swift_release(KeyPath);
    swift_release(v20);
    sub_10004FC08(v17, v29, a1, (uint64_t)v7, v11 & 1, v16);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v23;
  }
  else
  {
    v25 = v13[1];
    v26 = type metadata accessor for ObservableStopwatchModel(0);
    v27 = sub_1000073C0((unint64_t *)&qword_1000B2760, type metadata accessor for ObservableStopwatchModel, (uint64_t)&unk_100082708);
    result = EnvironmentObject.error()(0, v25, v26, v27);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004CD24@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;

  v3 = sub_10000A58C(&qword_1000AF178);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = (uint64_t)v1 + *(int *)(type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries(0) + 20);
  sub_100011440(v9, (uint64_t)v8, &qword_1000AF178);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_100011484((uint64_t)v8, &qword_1000AF178);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v8, v10);
    Date.addingTimeInterval(_:)(v13, *v1);
    v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    v14(v6, 0, 1, v10);
    sub_100050104((uint64_t)v6, v9);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(a1, 0, 1, v10);
  }
}

uint64_t sub_10004CE88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002B89C(v1, a1, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_10004CEAC()
{
  return 0;
}

uint64_t sub_10004CEB4()
{
  return 2;
}

uint64_t sub_10004CEBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F02C(v0, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
  v2 = v1;
  sub_10000E844(v0, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
  return v2;
}

uint64_t sub_10004CF04(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_10004F7B4(a1, a2, a3, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_10004CF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004CF34(a1, a2, a3, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry, (void (*)(uint64_t))sub_100052628);
}

uint64_t sub_10004CF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;

  v8 = v5;
  v30 = a3;
  v11 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a4(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v27 - v19;
  result = sub_10002B89C(v8, (uint64_t)&v27 - v19, a4);
  if (!a2)
  {
    v22 = 0;
    goto LABEL_12;
  }
  v22 = v30;
  if (!v30)
  {
LABEL_12:
    sub_10002B89C((uint64_t)v20, a1, a4);
    return v22;
  }
  if ((v30 & 0x8000000000000000) == 0)
  {
    v28 = a1;
    v29 = a4;
    a5(result);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      v22 = 0;
LABEL_10:
      sub_100011484((uint64_t)v13, &qword_1000AF178);
      a1 = v28;
      a4 = v29;
    }
    else
    {
      v23 = v22;
      v22 = 0;
      v24 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v25 = v23 - 1;
      while (1)
      {
        v24(v17, v13, v14);
        v26 = ((uint64_t (*)(uint64_t, char *, uint64_t))v24)(a2, v17, v14);
        if (v25 == v22)
          break;
        a2 += *(_QWORD *)(v15 + 72);
        a5(v26);
        ++v22;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
          goto LABEL_10;
      }
      a1 = v28;
      a4 = v29;
      v22 = v30;
    }
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004D124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_10004D148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v55 = a1;
  v65 = a2;
  v3 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  __chkstk_darwin(v3);
  v52 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Calendar.SearchDirection(0);
  v62 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v50 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.MatchingPolicy(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  __chkstk_darwin(v6);
  v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v8);
  v59 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Calendar(0);
  v10 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for DateComponents(0);
  v13 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v18 = v48(a2, 1, 1, v16);
  static Calendar.current.getter(v18);
  v19 = sub_10000A58C(&qword_1000B1780);
  v20 = type metadata accessor for Calendar.Component(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned __int8 *)(v21 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(v19, v23 + *(_QWORD *)(v21 + 72), v22 | 7);
  *(_OWORD *)(v24 + 16) = xmmword_100082260;
  v25 = v24 + v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v25, enum case for Calendar.Component.second(_:), v20);
  v26 = sub_100051814(v24);
  swift_setDeallocating(v24);
  swift_arrayDestroy(v25, 1, v20);
  swift_deallocClassInstance(v24, 32, 7);
  v27 = v55;
  Calendar.dateComponents(_:from:)(v26, v55);
  swift_bridgeObjectRelease(v26);
  v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29 = v63;
  v28(v12, v63);
  v30 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(0);
  v31 = v65;
  v32 = v65 + *(int *)(v30 + 24);
  v58 = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v32, v15, v64);
  v33 = v31 + *(int *)(v30 + 20);
  v56 = v17;
  v57 = v16;
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v33, v27, v16);
  v35 = Date.addingTimeInterval(_:)(v34, 60.0);
  static Calendar.current.getter(v35);
  v36 = v27;
  LOBYTE(v30) = Calendar.date(_:matchesComponents:)(v27, v15);
  v47 = v28;
  v37 = ((uint64_t (*)(char *, uint64_t))v28)(v12, v29);
  if ((v30 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v64);
    v38 = v65;
    sub_100011484(v65, &qword_1000AF178);
    v39 = v57;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v38, v27, v57);
    return v48(v38, 0, 1, v39);
  }
  else
  {
    static Calendar.current.getter(v37);
    v41 = v49;
    (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v49, enum case for Calendar.MatchingPolicy.nextTime(_:), v61);
    v43 = v50;
    v42 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v50, enum case for Calendar.SearchDirection.forward(_:), v51);
    v45 = v52;
    v44 = v53;
    v46 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for Calendar.RepeatedTimePolicy.first(_:), v54);
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v36, v15, v41, v45, v43);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v36, v57);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v42);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v41, v61);
    v47(v12, v63);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v64);
    return sub_100050104(v59, v65);
  }
}

uint64_t sub_10004D5F8@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t (*v64)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(uint64_t, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, char *, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;

  v93 = a1;
  v88 = type metadata accessor for Calendar.SearchDirection(0);
  v86 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v87 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v89 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v84 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar.MatchingPolicy(0);
  v91 = *(_QWORD *)(v4 - 8);
  v92 = v4;
  __chkstk_darwin(v4);
  v90 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000AF178);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v74 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v74 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v74 - v20;
  v22 = type metadata accessor for Date(0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v94 = (char *)&v74 - v26;
  v95 = v1;
  v27 = v1;
  v29 = v28;
  sub_100011440(v27, (uint64_t)v21, &qword_1000AF178);
  v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  v96 = v22;
  v31 = v22;
  v32 = v30;
  if (v30((uint64_t)v21, 1, v31) == 1)
  {
    sub_100011484((uint64_t)v21, &qword_1000AF178);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v93, 1, 1, v96);
  }
  else
  {
    v77 = v25;
    v78 = v32;
    v79 = v7;
    v80 = v6;
    v35 = v90;
    v34 = v91;
    v81 = v13;
    v82 = v16;
    v36 = v92;
    v83 = v19;
    v37 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v38 = v94;
    v39 = v96;
    v37(v94, v21, v96);
    v40 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(0);
    v41 = v95 + *(int *)(v40 + 28);
    v42 = sub_1000073C0(&qword_1000B18D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v43 = dispatch thunk of static Comparable.< infix(_:_:)(v41, v38, v39, v42);
    if ((v43 & 1) != 0)
    {
      v74 = v41;
      v76 = v29;
      v75 = (void (*)(uint64_t, char *, uint64_t))v37;
      v44 = v9;
      static Calendar.current.getter(v43);
      v45 = v95 + *(int *)(v40 + 24);
      v46 = v35;
      (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v35, enum case for Calendar.MatchingPolicy.nextTime(_:), v36);
      v48 = v84;
      v47 = v85;
      (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v84, enum case for Calendar.RepeatedTimePolicy.first(_:), v85);
      v49 = v86;
      v50 = v87;
      v51 = v88;
      (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v87, enum case for Calendar.SearchDirection.forward(_:), v88);
      v52 = (uint64_t)v82;
      v53 = v94;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v94, v45, v46, v48, v50);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v48, v47);
      v54 = v46;
      v55 = v52;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v54, v92);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v44, v80);
      v56 = (uint64_t)v81;
      sub_100011440(v52, (uint64_t)v81, &qword_1000AF178);
      v57 = v96;
      v58 = v78(v56, 1, v96);
      v59 = v95;
      if (v58 == 1)
      {
        sub_100011484(v55, &qword_1000AF178);
        sub_100011484(v56, &qword_1000AF178);
        sub_100011484(v59, &qword_1000AF178);
        v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
        v60(v59, 1, 1, v57);
        v61 = v93;
        v75((uint64_t)v93, v53, v57);
      }
      else
      {
        v67 = v77;
        v68 = v75;
        v75((uint64_t)v77, (char *)v56, v57);
        v69 = v74;
        v70 = static Date.< infix(_:_:)(v67, v74);
        v61 = v93;
        if ((v70 & 1) != 0)
        {
          v71 = v76;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v67, v57);
          sub_100011484(v55, &qword_1000AF178);
          sub_100011484(v59, &qword_1000AF178);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v59, v69, v57);
          v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56);
          v60(v59, 0, 1, v57);
        }
        else
        {
          v72 = (uint64_t)v83;
          Date.addingTimeInterval(_:)(v70, 1.0);
          v73 = v76;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v67, v57);
          sub_100011484(v55, &qword_1000AF178);
          v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
          v60(v72, 0, 1, v57);
          sub_100050104(v72, v59);
        }
        v68((uint64_t)v61, v53, v57);
      }
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v60)(v61, 0, 1, v57);
    }
    else
    {
      v62 = (uint64_t)v83;
      v63 = v94;
      Date.addingTimeInterval(_:)(v43, 1.0);
      v64 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      v65 = v96;
      v64((char *)v62, 0, 1, v96);
      sub_100050104(v62, v95);
      v66 = v93;
      v37(v93, v63, v65);
      return v64(v66, 0, 1, v65);
    }
  }
}

uint64_t sub_10004DC20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002B89C(v1, a1, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t sub_10004DC44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F480(v0, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry, (void (*)(_QWORD))sub_10004D5F8);
  v2 = v1;
  sub_10000E844(v0, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry);
  return v2;
}

uint64_t sub_10004DC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004CF34(a1, a2, a3, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry, (void (*)(uint64_t))sub_10004D5F8);
}

_QWORD *sub_10004DCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v32 = a1;
  v3 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(0);
  __chkstk_darwin(v3);
  v31 = (uint64_t)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries(0);
  v10 = __chkstk_darwin(v9);
  v12 = (_QWORD *)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)v30 - v13;
  v15 = type metadata accessor for TimelineScheduleMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for TimelineScheduleMode.normal(_:), v15);
  LOBYTE(a2) = static TimelineScheduleMode.== infix(_:_:)(a2, v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if ((a2 & 1) != 0)
  {
    v19 = *(_QWORD *)v30[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v32, v5);
    *v12 = 0x3F91111111111111;
    v20 = (uint64_t)v12 + *(int *)(v9 + 20);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v21(v20, 1, 1, v5);
    sub_100011484(v20, &qword_1000AF178);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v20, v8, v5);
    v21(v20, 0, 1, v5);
    *v12 = v19;
    sub_10002B89C((uint64_t)v12, (uint64_t)v14, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries);
    v22 = sub_10000A58C(&qword_1000B1778);
    v23 = (_QWORD *)swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v24 = (uint64_t)v23 + *(_QWORD *)(class metadata base offset for _SequenceBox + *v23 + 16);
    v25 = (uint64_t)v14;
    v26 = type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v32, v5);
    v27 = v31;
    sub_10004D148((uint64_t)v8, v31);
    v28 = sub_10000A58C(&qword_1000B1770);
    v23 = (_QWORD *)swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    v24 = (uint64_t)v23 + *(_QWORD *)(class metadata base offset for _SequenceBox + *v23 + 16);
    v26 = type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry;
    v25 = v27;
  }
  sub_10002B89C(v25, v24, v26);
  return v23;
}

_QWORD *sub_10004DF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = sub_10004DCBC(a1, a2);
  *a3 = result;
  return result;
}

unint64_t sub_10004DFF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1588;
  if (!qword_1000B1588)
  {
    v1 = sub_10000E880(&qword_1000B1580);
    sub_10004E07C();
    sub_100011680(&qword_1000AF5B8, &qword_1000AF5C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1588);
  }
  return result;
}

unint64_t sub_10004E07C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1590;
  if (!qword_1000B1590)
  {
    v1 = sub_10000E880(&qword_1000B1578);
    sub_10004E100();
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1590);
  }
  return result;
}

unint64_t sub_10004E100()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1598;
  if (!qword_1000B1598)
  {
    v1 = sub_10000E880(&qword_1000B1570);
    sub_10004E184();
    sub_100011680(&qword_1000AF5A8, &qword_1000AF5B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1598);
  }
  return result;
}

unint64_t sub_10004E184()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B15A0;
  if (!qword_1000B15A0)
  {
    v1 = sub_10000E880(&qword_1000B1568);
    sub_10004E208();
    sub_100011680(&qword_1000AF598, &qword_1000AF5A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B15A0);
  }
  return result;
}

unint64_t sub_10004E208()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B15A8;
  if (!qword_1000B15A8)
  {
    v1 = sub_10000E880(&qword_1000B1560);
    sub_1000073C0(&qword_1000B15B0, type metadata accessor for TimelineCountupView, (uint64_t)&unk_100083608);
    sub_100011680(&qword_1000AF4F8, &qword_1000AF500, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B15A8);
  }
  return result;
}

unint64_t sub_10004E2A4(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100030464(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_10000A58C(&qword_1000B0A38);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[8];
    *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
    *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
    v22 = a3[9];
    v23 = a1 + v22;
    v24 = a2 + v22;
    v25 = type metadata accessor for Calendar(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v26 = a3[11];
    *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
    v27 = (uint64_t *)(a1 + v26);
    v28 = (uint64_t *)(a2 + v26);
    v15 = *v28;
    v29 = v28[1];
    *v27 = v15;
    v27[1] = v29;
  }
  swift_retain(v15);
  return a1;
}

double sub_10004E420(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  sub_1000304AC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = a1 + a2[6];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[9];
  v10 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[11])).n128_u64[0];
  return result;
}

uint64_t sub_10004E4F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100030464(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v27 = *v26;
  v28 = v26[1];
  *v25 = v27;
  v25[1] = v28;
  swift_retain(v27);
  return a1;
}

uint64_t sub_10004E648(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100030464(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000304AC(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100011484(a1 + v10, &qword_1000B0A38);
    v13 = sub_10000A58C(&qword_1000B0A38);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v21 = a3[9];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v25 = a3[11];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = *(_QWORD *)(a1 + v25);
  v29 = *v27;
  *(_QWORD *)(a1 + v25) = *v27;
  swift_retain(v29);
  swift_release(v28);
  *(_QWORD *)(v26 + 8) = v27[1];
  return a1;
}

uint64_t sub_10004E7DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for Locale(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[9];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  return a1;
}

uint64_t sub_10004E91C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000304AC(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100011484(a1 + v10, &qword_1000B0A38);
    v13 = sub_10000A58C(&qword_1000B0A38);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for Locale(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)(a1 + v19) = *(uint64_t *)((char *)a2 + v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = (uint64_t)a2 + v20;
  v23 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  v25 = a1 + v24;
  v26 = (uint64_t *)((char *)a2 + v24);
  v27 = *(_QWORD *)(a1 + v24);
  *(_QWORD *)(a1 + v24) = *v26;
  swift_release(v27);
  *(_QWORD *)(v25 + 8) = v26[1];
  return a1;
}

uint64_t sub_10004EA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004EAA4);
}

uint64_t sub_10004EAA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  int v14;

  v6 = sub_10000A58C(&qword_1000B15B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = type metadata accessor for Calendar(0);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[11]);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  v14 = v13 - 1;
  if (v14 < 0)
    v14 = -1;
  return (v14 + 1);
}

uint64_t sub_10004EB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004EB88);
}

uint64_t sub_10004EB88(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = sub_10000A58C(&qword_1000B15B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for Calendar(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11]) = a2;
  return result;
}

void sub_10004EC50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = "\t";
  sub_10005075C(319, (unint64_t *)&qword_1000B1628, (uint64_t (*)(uint64_t))&type metadata accessor for Locale, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_100083408;
      v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v6 = type metadata accessor for Calendar(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = (char *)&value witness table for Builtin.Int64 + 64;
        v8[7] = &unk_1000835F0;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

unint64_t sub_10004ED3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1670;
  if (!qword_1000B1670)
  {
    v1 = sub_10000E880(&qword_1000B1678);
    sub_10004DFF8();
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1670);
  }
  return result;
}

uint64_t sub_10004EDC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B100, 1);
}

uint64_t type metadata accessor for StopwatchTimelineSchedule(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1718, (uint64_t)&nominal type descriptor for StopwatchTimelineSchedule);
}

unint64_t sub_10004EDF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1698;
  if (!qword_1000B1698)
  {
    v1 = sub_10000E880(&qword_1000B1688);
    sub_10004EE58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1698);
  }
  return result;
}

unint64_t sub_10004EE58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B16A0;
  if (!qword_1000B16A0)
  {
    v1 = sub_10000E880(&qword_1000B1690);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B16A0);
  }
  return result;
}

uint64_t sub_10004EEBC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for TimelineCountupView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_1000304AC(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = v3 | 7;
  v11 = v4 + v5;
  v12 = v6 + v1[6];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v6 + v1[9];
  v15 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release(*(_QWORD *)(v6 + v1[11]));
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_10004EFD4@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineCountupView(0);
  return sub_10004CA88(a1);
}

void sub_10004F020(uint64_t a1)
{
  sub_10004F02C(a1, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
}

void sub_10004F02C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, _QWORD *);
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  void (*v37)(char *, _QWORD, uint64_t, _QWORD *);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  __n128 v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  int64_t v50;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v58;
  int v59;
  void (*v60)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t (*v61)(_QWORD);
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  double *v72;
  char *v73;
  _QWORD *v74;

  v4 = sub_10000A58C(&qword_1000AF178);
  v5 = __chkstk_darwin(v4);
  v70 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v65 - v8;
  __chkstk_darwin(v7);
  v71 = (char *)&v65 - v10;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v73 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2(0);
  __chkstk_darwin(v14);
  v16 = (double *)((char *)&v65 - v15);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v66 = a2;
  v18 = a2;
  v19 = (_QWORD *)v12;
  v20 = (uint64_t)v9;
  sub_10000E800(a1, (uint64_t)&v65 - v15, v18);
  v21 = *(int *)(v14 + 20);
  v72 = v16;
  v22 = (uint64_t)v16 + v21;
  sub_100011440((uint64_t)v16 + v21, (uint64_t)v9, &qword_1000AF178);
  v23 = (uint64_t (*)(char *, uint64_t, uint64_t))v19[6];
  v74 = (_QWORD *)v11;
  v24 = v23(v9, 1, v11);
  v25 = _swiftEmptyArrayStorage;
  if (v24 != 1)
  {
    v26 = 0;
    v68 = (v17 + 32) & ~v17;
    v69 = v20;
    v28 = (char *)_swiftEmptyArrayStorage + v68;
    v29 = v17;
    v30 = (uint64_t (*)(char *, uint64_t, _QWORD *))v19[4];
    v67 = v29 | 7;
    v31 = _swiftEmptyArrayStorage;
    v27 = v74;
    while (1)
    {
      v74 = v31;
      v32 = v71;
      v33 = v22;
      v34 = v30(v71, v20, v27);
      v35 = v70;
      Date.addingTimeInterval(_:)(v34, *v72);
      v36 = v19;
      v37 = (void (*)(char *, _QWORD, uint64_t, _QWORD *))v19[7];
      v37(v35, 0, 1, v27);
      v38 = (uint64_t)v35;
      v22 = v33;
      sub_100050104(v38, v33);
      v37(v32, 0, 1, v27);
      v39 = (uint64_t)v32;
      v40 = v32;
      v41 = v23;
      if (v23(v40, 1, (uint64_t)v27) == 1)
      {
        v61 = v66;
        v25 = v74;
        goto LABEL_32;
      }
      v30(v73, v39, v27);
      if (v26)
      {
        v25 = v74;
        goto LABEL_28;
      }
      v43 = v74[3];
      if ((uint64_t)((v43 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_37;
      v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
      if (v44 <= 1)
        v45 = 1;
      else
        v45 = v44;
      v46 = sub_10000A58C(&qword_1000B18C8);
      v47 = v36[9];
      v48 = v68;
      v25 = (_QWORD *)swift_allocObject(v46, v68 + v47 * v45, v67);
      v49 = j__malloc_size(v25);
      if (!v47)
        goto LABEL_38;
      v50 = v49 - v48;
      if (v49 - v48 == 0x8000000000000000 && v47 == -1)
        goto LABEL_39;
      v52 = v50 / v47;
      v25[2] = v45;
      v25[3] = 2 * (v50 / v47);
      v53 = (char *)v25 + v48;
      v54 = v74;
      v55 = v74[3] >> 1;
      v56 = v55 * v47;
      if (v74[2])
        break;
LABEL_27:
      v28 = &v53[v56];
      v26 = (v52 & 0x7FFFFFFFFFFFFFFFLL) - v55;
      v42 = swift_release(v54);
LABEL_28:
      v19 = v36;
      v58 = __OFSUB__(v26--, 1);
      v20 = v69;
      if (v58)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return;
      }
      ((void (*)(char *, char *, _QWORD *, __n128))v30)(v28, v73, v27, v42);
      v28 += v19[9];
      sub_100011440(v22, v20, &qword_1000AF178);
      v23 = v41;
      v59 = v41((char *)v20, 1, (uint64_t)v27);
      v31 = v25;
      if (v59 == 1)
        goto LABEL_30;
    }
    if (v25 < v74 || v53 >= (char *)v74 + v68 + v56)
    {
      swift_arrayInitWithTakeFrontToBack(v53, (char *)v74 + v68, v55, v27);
    }
    else
    {
      if (v25 == v74)
      {
LABEL_26:
        v54[2] = 0;
        goto LABEL_27;
      }
      swift_arrayInitWithTakeBackToFront(v53);
    }
    v54 = v74;
    goto LABEL_26;
  }
  v26 = 0;
  v27 = v74;
LABEL_30:
  sub_100011484(v20, &qword_1000AF178);
  v60 = (void (*)(char *, uint64_t, uint64_t, _QWORD *))v19[7];
  v39 = (uint64_t)v71;
  v60(v71, 1, 1, v27);
  v61 = v66;
LABEL_32:
  sub_10000E844((uint64_t)v72, v61);
  sub_100011484(v39, &qword_1000AF178);
  v62 = v25[3];
  if (v62 >= 2)
  {
    v63 = v62 >> 1;
    v58 = __OFSUB__(v63, v26);
    v64 = v63 - v26;
    if (v58)
      goto LABEL_40;
    v25[2] = v64;
  }
}

void sub_10004F46C(uint64_t a1)
{
  sub_10004F480(a1, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry, (void (*)(_QWORD))sub_100052628);
}

void sub_10004F480(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  void (*v17)(_QWORD);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  char *v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(_QWORD);
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  int64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  void (*v55)(_QWORD, _QWORD, _QWORD);

  v6 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v51 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - v13;
  v15 = *(unsigned __int8 *)(v10 + 80);
  v49 = a2;
  v16 = a2;
  v17 = a3;
  v18 = sub_10000E800(a1, (uint64_t)&v48 - v13, v16);
  v54 = v14;
  a3(v18);
  v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v19 = _swiftEmptyArrayStorage;
  if (v53(v8, 1, v9) != 1)
  {
    v20 = 0;
    v52 = (v15 + 32) & ~v15;
    v25 = (char *)_swiftEmptyArrayStorage + v52;
    v26 = *(void (**)(_QWORD, _QWORD, _QWORD))(v10 + 32);
    v50 = v15 | 7;
    v27 = _swiftEmptyArrayStorage;
    v28 = v10;
    v29 = v51;
    v55 = v26;
    v26(v51, v8, v9);
    while (1)
    {
      if (v20)
      {
        v19 = v27;
        v23 = __OFSUB__(v20--, 1);
        if (v23)
          goto LABEL_33;
      }
      else
      {
        v31 = v27[3];
        if ((uint64_t)((v31 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_34;
        v32 = v17;
        v33 = v31 & 0xFFFFFFFFFFFFFFFELL;
        if (v33 <= 1)
          v34 = 1;
        else
          v34 = v33;
        v35 = sub_10000A58C(&qword_1000B18C8);
        v36 = *(_QWORD *)(v28 + 72);
        v37 = v52;
        v19 = (_QWORD *)swift_allocObject(v35, v52 + v36 * v34, v50);
        v38 = j__malloc_size(v19);
        if (!v36)
          goto LABEL_35;
        v39 = v38 - v37;
        if (v38 - v37 == 0x8000000000000000 && v36 == -1)
          goto LABEL_36;
        v41 = v28;
        v42 = v39 / v36;
        v19[2] = v34;
        v19[3] = 2 * (v39 / v36);
        v43 = (char *)v19 + v37;
        v44 = v27[3] >> 1;
        v45 = v44 * v36;
        if (v27[2])
        {
          if (v19 < v27 || v43 >= (char *)v27 + v52 + v45)
          {
            swift_arrayInitWithTakeFrontToBack(v43, (char *)v27 + v52, v44, v9);
          }
          else if (v19 != v27)
          {
            swift_arrayInitWithTakeBackToFront(v43);
          }
          v27[2] = 0;
        }
        v25 = &v43[v45];
        v47 = (v42 & 0x7FFFFFFFFFFFFFFFLL) - v44;
        swift_release(v27);
        v17 = v32;
        v28 = v41;
        v29 = v51;
        v26 = v55;
        v23 = __OFSUB__(v47, 1);
        v20 = v47 - 1;
        if (v23)
        {
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return;
        }
      }
      v30 = ((uint64_t (*)(char *, char *, uint64_t))v26)(v25, v29, v9);
      v25 += *(_QWORD *)(v28 + 72);
      v17(v30);
      v26 = v55;
      v27 = v19;
      if (v53(v8, 1, v9) == 1)
        goto LABEL_3;
      v26(v29, v8, v9);
    }
  }
  v20 = 0;
LABEL_3:
  sub_10000E844((uint64_t)v54, v49);
  sub_100011484((uint64_t)v8, &qword_1000AF178);
  v21 = v19[3];
  if (v21 >= 2)
  {
    v22 = v21 >> 1;
    v23 = __OFSUB__(v22, v20);
    v24 = v22 - v20;
    if (v23)
      goto LABEL_37;
    v19[2] = v24;
  }
}

uint64_t sub_10004F7A8(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_10004F7B4(a1, a2, a3, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_10004F7B4(uint64_t a1, char *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  double *v42;

  v6 = v4;
  v10 = sub_10000A58C(&qword_1000AF178);
  v11 = __chkstk_darwin(v10);
  v40 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v35 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v35 - v16;
  v18 = type metadata accessor for Date(0);
  v41 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v39 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a4(0);
  __chkstk_darwin(v20);
  v42 = (double *)((char *)&v35 - v21);
  result = sub_10002B89C(v6, (uint64_t)&v35 - v21, a4);
  if (!a2)
  {
    v23 = 0;
    goto LABEL_13;
  }
  v23 = a3;
  if (!a3)
  {
LABEL_13:
    sub_10002B89C((uint64_t)v42, a1, a4);
    return v23;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v36 = a1;
    v37 = a4;
    v24 = (uint64_t)v42 + *(int *)(v20 + 20);
    sub_100011440(v24, (uint64_t)v15, &qword_1000AF178);
    v25 = v41;
    v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    if (v26(v15, 1, v18) == 1)
    {
      v27 = 0;
      v28 = v25;
LABEL_11:
      sub_100011484((uint64_t)v15, &qword_1000AF178);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v17, 1, 1, v18);
    }
    else
    {
      v27 = 0;
      v29 = *(uint64_t (**)(char *, char *, uint64_t))(v25 + 32);
      v35 = v23;
      v38 = v23 - 1;
      v28 = v25;
      while (1)
      {
        v30 = (uint64_t)v15;
        v31 = v29(v17, v15, v18);
        v32 = (uint64_t)v40;
        Date.addingTimeInterval(_:)(v31, *v42);
        v33 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56);
        v33(v32, 0, 1, v18);
        sub_100050104(v32, v24);
        v33((uint64_t)v17, 0, 1, v18);
        if (v26(v17, 1, v18) == 1)
          break;
        v34 = v39;
        v29(v39, v17, v18);
        v29(a2, v34, v18);
        if (v38 == v27)
        {
          a1 = v36;
          a4 = v37;
          v23 = v35;
          goto LABEL_13;
        }
        v28 = v41;
        a2 += *(_QWORD *)(v41 + 72);
        v15 = (char *)v30;
        sub_100011440(v24, v30, &qword_1000AF178);
        v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
        ++v27;
        if (v26((char *)v30, 1, v18) == 1)
          goto LABEL_11;
      }
    }
    a1 = v36;
    a4 = v37;
    sub_100011484((uint64_t)v17, &qword_1000AF178);
    v23 = v27;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004FAD8@<X0>(uint64_t a1@<X0>, void (*a2)(__int128 *__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;

  v6 = sub_10000A58C(&qword_1000B16B0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  result = sub_10000A58C(&qword_1000B16B8);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    a2(&v14, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    v10 = v15;
    v11 = v16;
    v12 = v17;
    v13 = v18;
    *(_OWORD *)a3 = v14;
    *(_BYTE *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 24) = v11;
    *(_BYTE *)(a3 + 32) = v12;
    *(_BYTE *)(a3 + 33) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004FBD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004FBF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10004FAD8(a1, *(void (**)(__int128 *__return_ptr, char *))(v2 + 16), a2);
}

void sub_10004FC08(uint64_t a1, double a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  double v9;
  double v10;
  double v11;
  NSLocale v12;
  int v13;
  long double v14;
  _BYTE *v15;
  id v16;

  v9 = Date.timeIntervalSince(_:)(a1);
  v10 = -0.0;
  if (a2 > 0.0)
    v10 = a2;
  v11 = v9 + v10;
  v12.super.isa = Locale._bridgeToObjectiveC()().super.isa;
  v13 = a6 & 1;
  v14 = v11;
  v15 = 0;
  if ((a5 & 1) != 0)
  {
    v16 = sub_1000065D4(0, 0, 1, 1, 0, 1, v13, (uint64_t)v12.super.isa, v11);

    if (v16)
    {
LABEL_7:
      static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

      return;
    }
    __break(1u);
  }
  v16 = sub_100006028(v15, 1, 1, 1, 0, 1, v13, (uint64_t)v12.super.isa, v14);

  if (v16)
    goto LABEL_7;
  __break(1u);
}

uint64_t *sub_10004FCFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10004FD84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_10004FDBC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10004FE18(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10004FE74(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10004FED0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10004FF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004FF38);
}

uint64_t sub_10004FF38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_10004FF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004FF84);
}

uint64_t sub_10004FF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_10004FFC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100050044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1750;
  if (!qword_1000B1750)
  {
    v1 = sub_10000E880(&qword_1000B1758);
    sub_10004EDF4();
    sub_10004EE58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1750);
  }
  return result;
}

uint64_t sub_1000500B0()
{
  return sub_100011680((unint64_t *)&qword_1000B1760, &qword_1000B1768, (uint64_t)&protocol conformance descriptor for AnySequence<A>);
}

uint64_t type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1878, (uint64_t)&nominal type descriptor for StopwatchTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B17E0, (uint64_t)&nominal type descriptor for StopwatchTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_100050104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000AF178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10005014C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      v10 = sub_10000A58C(&qword_1000AF178);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_100050234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_QWORD *sub_1000502A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_10000A58C(&qword_1000AF178);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *sub_10005035C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v12 = sub_10000A58C(&qword_1000AF178);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

_QWORD *sub_100050464(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_10000A58C(&qword_1000AF178);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *sub_100050520(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v12 = sub_10000A58C(&qword_1000AF178);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_100050628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100050634);
}

uint64_t sub_100050634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_10000A58C(&qword_1000AF178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_100050678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050684);
}

uint64_t sub_100050684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_10000A58C(&qword_1000AF178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_1000506CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10005075C(319, (unint64_t *)&qword_1000B17F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10005075C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t *sub_1000507B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10000A58C(&qword_1000AF178);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    }
    else
    {
      v10 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v10(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v10((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for DateComponents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v10((uint64_t *)((char *)a1 + a3[7]), (uint64_t *)((char *)a2 + a3[7]), v7);
  }
  return a1;
}

uint64_t sub_1000508F0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6)
    v10(a1, v4);
  v10(a1 + a2[5], v4);
  v7 = a1 + a2[6];
  v8 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1 + a2[7], v4);
}

char *sub_1000509A8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000A58C(&qword_1000AF178);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for DateComponents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *sub_100050AB8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10000A58C(&qword_1000AF178);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for DateComponents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *sub_100050C0C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000A58C(&qword_1000AF178);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9(&a1[a3[5]], &a2[a3[5]], v6);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for DateComponents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v9(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

char *sub_100050D1C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10000A58C(&qword_1000AF178);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
  v12(&a1[a3[5]], &a2[a3[5]], v6);
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for DateComponents(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v12(&a1[a3[7]], &a2[a3[7]], v6);
  return a1;
}

uint64_t sub_100050E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100050E7C);
}

uint64_t sub_100050E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_10000A58C(&qword_1000AF178);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for DateComponents(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100050F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050F24);
}

uint64_t sub_100050F24(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_10000A58C(&qword_1000AF178);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for DateComponents(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100050FC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[4];

  sub_10005075C(319, (unint64_t *)&qword_1000B17F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v9[1] = v6;
      v7 = type metadata accessor for DateComponents(319);
      if (v8 <= 0x3F)
      {
        v9[2] = *(_QWORD *)(v7 - 8) + 64;
        v9[3] = v6;
        swift_initStructMetadata(a1, 256, 4, v9, a1 + 16);
      }
    }
  }
}

uint64_t sub_100051080()
{
  return sub_1000073C0(&qword_1000B18B8, type metadata accessor for StopwatchTimelineSchedule.ReducedFrequencyEntry, (uint64_t)&unk_1000837C8);
}

uint64_t sub_1000510AC()
{
  return sub_1000073C0(&qword_1000B18C0, type metadata accessor for StopwatchTimelineSchedule.TimePeriodEntries, (uint64_t)&unk_100083860);
}

uint64_t sub_1000510D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a3;
  v32 = a2;
  v35 = a1;
  v3 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateComponents(0);
  v29 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar.Identifier(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Calendar(0);
  v13 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Calendar.Identifier.gregorian(_:), v9);
  Calendar.init(identifier:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v16 = sub_10000A58C(&qword_1000B1780);
  v17 = type metadata accessor for Calendar.Component(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v16, v21 + 6 * v19, v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100083900;
  v23 = v22 + v21;
  v24 = *(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104);
  v24(v23, enum case for Calendar.Component.minute(_:), v17);
  v24(v23 + v19, enum case for Calendar.Component.hour(_:), v17);
  v24(v23 + 2 * v19, enum case for Calendar.Component.weekday(_:), v17);
  v24(v23 + 3 * v19, enum case for Calendar.Component.weekdayOrdinal(_:), v17);
  v24(v23 + 4 * v19, enum case for Calendar.Component.month(_:), v17);
  v24(v23 + 5 * v19, enum case for Calendar.Component.year(_:), v17);
  v25 = sub_100051814(v22);
  swift_setDeallocating(v22);
  swift_arrayDestroy(v23, 6, v17);
  v26 = swift_deallocClassInstance(v22, 32, 7);
  Date.init(timeIntervalSinceReferenceDate:)(v26, 0.0);
  Calendar.dateComponents(_:from:)(v25, v5);
  swift_bridgeObjectRelease(v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v34);
  result = v35;
  if (v35 < 0)
  {
    __break(1u);
  }
  else
  {
    DateComponents.hour.setter();
    result = v32;
    if ((v32 & 0x8000000000000000) == 0)
    {
      DateComponents.minute.setter();
      Calendar.date(from:)(v8);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v28);
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Utilities()
{
  return objc_opt_self(_TtC10ClockAngel9Utilities);
}

uint64_t sub_100051420(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000182C4(*a1, *a2);
}

Swift::Int sub_10005142C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEE00746E6569626DLL;
  v3 = 0x41746361706D6F43;
  if (v1 != 1)
  {
    v3 = 1701736270;
    v2 = 0xE400000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x69626D416C6C7546;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEB00000000746E65;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000514D8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEE00746E6569626DLL;
  v3 = 0x41746361706D6F43;
  if (*v1 != 1)
  {
    v3 = 1701736270;
    v2 = 0xE400000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x69626D416C6C7546;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEB00000000746E65;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100051560(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEE00746E6569626DLL;
  v4 = 0x41746361706D6F43;
  if (v2 != 1)
  {
    v4 = 1701736270;
    v3 = 0xE400000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x69626D416C6C7546;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEB00000000746E65;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100051608@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100051E00(*a1);
  *a2 = result;
  return result;
}

void sub_100051634(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEB00000000746E65;
  v4 = 0xEE00746E6569626DLL;
  v5 = 0x41746361706D6F43;
  if (v2 != 1)
  {
    v5 = 1701736270;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x69626D416C6C7546;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

id sub_1000516A0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)MTStopwatchManager), "init");
  qword_1000B6F10 = (uint64_t)result;
  return result;
}

uint64_t sub_1000516D0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for GlobalStopwatchManager()
{
  return objc_opt_self(_TtC10ClockAngel22GlobalStopwatchManager);
}

uint64_t storeEnumTagSinglePayload for AmbientDestination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10005174C + 4 * byte_100083925[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100051780 + 4 * byte_100083920[v4]))();
}

uint64_t sub_100051780(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100051788(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100051790);
  return result;
}

uint64_t sub_10005179C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000517A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000517A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000517B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AmbientDestination()
{
  return &type metadata for AmbientDestination;
}

unint64_t sub_1000517D0()
{
  unint64_t result;

  result = qword_1000B1A28;
  if (!qword_1000B1A28)
  {
    result = swift_getWitnessTable(&unk_1000839EC, &type metadata for AmbientDestination);
    atomic_store(result, (unint64_t *)&qword_1000B1A28);
  }
  return result;
}

void *sub_100051814(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_10000A58C(&qword_1000B1A30);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100051E48(&qword_1000B1A38, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100051E48(&qword_1000B1A40, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_100051A6C(double a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  void *object;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = type metadata accessor for DateComponents(0);
  v59 = *(_QWORD *)(v2 - 8);
  v60 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Calendar(0);
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v54 - v13;
  v15 = Date.init()(v12);
  v16 = Date.addingTimeInterval(_:)(v15, -a1);
  static Calendar.current.getter(v16);
  v17 = sub_10000A58C(&qword_1000B1780);
  v18 = type metadata accessor for Calendar.Component(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 72);
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(v17, v22 + 3 * v20, v21 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_100083910;
  v24 = v23 + v22;
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104);
  v25(v24, enum case for Calendar.Component.hour(_:), v18);
  v25(v24 + v20, enum case for Calendar.Component.minute(_:), v18);
  v25(v24 + 2 * v20, enum case for Calendar.Component.second(_:), v18);
  v26 = sub_100051814(v23);
  swift_setDeallocating(v23);
  swift_arrayDestroy(v24, 3, v18);
  swift_deallocClassInstance(v23, 32, 7);
  Calendar.dateComponents(_:from:to:)(v26, v11, v14);
  v27 = swift_bridgeObjectRelease(v26);
  v28 = DateComponents.hour.getter(v27);
  if ((v29 & 1) != 0
    || (v30 = v28, v31 = DateComponents.minute.getter(), (v32 & 1) != 0)
    || (v33 = v31, v34 = DateComponents.second.getter(), (v35 & 1) != 0))
  {
    v42 = v59;
    v41 = v60;
    v44 = v57;
    v43 = v58;
    v46 = v55;
    v45 = v56;
    v47 = 0x30303A30303A3030;
  }
  else
  {
    v36 = v34;
    if (v30)
    {
      v61 = v30;
      v62 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v63 = v37;
      v38._countAndFlagsBits = 58;
      v38._object = (void *)0xE100000000000000;
      String.append(_:)(v38);
      v61 = v33;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(object);
    }
    else
    {
      v61 = v33;
      v62 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v63 = v50;
    }
    v51._countAndFlagsBits = 58;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    v61 = v36;
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v53 = v52._object;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v53);
    v47 = v62;
    v42 = v59;
    v41 = v60;
    v44 = v57;
    v43 = v58;
    v46 = v55;
    v45 = v56;
  }
  (*(void (**)(char *, uint64_t))(v42 + 8))(v4, v41);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v43);
  v48 = *(void (**)(char *, uint64_t))(v46 + 8);
  v48(v11, v45);
  v48(v14, v45);
  return v47;
}

unint64_t sub_100051E00(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009E090, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100051E48(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100051E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051E98);
}

uint64_t sub_100051E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_100051ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051EE4);
}

uint64_t sub_100051EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata accessor for TimersTimelineSchedule(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1AA0, (uint64_t)&nominal type descriptor for TimersTimelineSchedule);
}

uint64_t sub_100051F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053094(a1, a2, a3, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
}

unint64_t sub_100051F4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1760;
  if (!qword_1000B1760)
  {
    v1 = sub_10000E880(&qword_1000B1768);
    result = swift_getWitnessTable(&protocol conformance descriptor for AnySequence<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1760);
  }
  return result;
}

uint64_t sub_100051F98@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void (*v14)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v15;

  v3 = sub_10000A58C(&qword_1000AF178);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = (uint64_t)v1 + *(int *)(type metadata accessor for TimersTimelineSchedule.TimePeriodEntries(0) + 20);
  sub_1000533B0(v9, (uint64_t)v8);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
  {
    sub_100052FA4((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v8, v10);
    Date.addingTimeInterval(_:)(v13, *v1);
    v14 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    v14(v6, 0, 1, v10);
    sub_100050104((uint64_t)v6, v9);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14)(a1, 0, 1, v10);
  }
}

uint64_t sub_1000520EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002B89C(v1, a1, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_100052110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F020(v0);
  v2 = v1;
  sub_10000E844(v0, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
  return v2;
}

uint64_t sub_100052150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  void (*v43)(char *, _QWORD, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v60 = a2;
  v73 = a1;
  v70 = a3;
  v4 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  __chkstk_darwin(v4);
  v57 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar.SearchDirection(0);
  v68 = *(_QWORD *)(v6 - 8);
  v69 = v6;
  __chkstk_darwin(v6);
  v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Calendar.MatchingPolicy(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v55 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000AF178);
  __chkstk_darwin(v9);
  v66 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Calendar(0);
  v11 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for DateComponents(0);
  v14 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v19 = v54(a3, 1, 1, v17);
  static Calendar.current.getter(v19);
  v20 = sub_10000A58C(&qword_1000B1780);
  v21 = type metadata accessor for Calendar.Component(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v20, v24 + *(_QWORD *)(v22 + 72), v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_100082260;
  v26 = v25 + v24;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v26, enum case for Calendar.Component.second(_:), v21);
  v27 = sub_100051814(v25);
  swift_setDeallocating(v25);
  swift_arrayDestroy(v26, 1, v21);
  swift_deallocClassInstance(v25, 32, 7);
  v28 = v60;
  Calendar.dateComponents(_:from:)(v27, v60);
  swift_bridgeObjectRelease(v27);
  v29 = *(void (**)(char *, uint64_t))(v11 + 8);
  v30 = v28;
  v31 = v71;
  v29(v13, v71);
  v32 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(0);
  v33 = v70;
  v34 = v70 + *(int *)(v32 + 24);
  v64 = v14;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v34, v16, v72);
  v35 = v33 + *(int *)(v32 + 20);
  v61 = v18;
  v62 = v17;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v35, v30, v17);
  v37 = Date.addingTimeInterval(_:)(v36, -60.0);
  static Calendar.current.getter(v37);
  v63 = v16;
  LOBYTE(v32) = Calendar.date(_:matchesComponents:)(v73, v16);
  v38 = ((uint64_t (*)(char *, uint64_t))v29)(v13, v31);
  if ((v32 & 1) != 0)
  {
    v40 = v61;
    v39 = v62;
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v30, v62);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v72);
    sub_100052FA4(v33);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v33, v73, v39);
    return v54(v33, 0, 1, v39);
  }
  else
  {
    static Calendar.current.getter(v38);
    v42 = v55;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v55, enum case for Calendar.MatchingPolicy.nextTime(_:), v67);
    v43 = *(void (**)(char *, _QWORD, uint64_t))(v68 + 104);
    v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v29;
    v44 = v56;
    v43(v56, enum case for Calendar.SearchDirection.backward(_:), v69);
    v46 = v57;
    v45 = v58;
    v47 = v59;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v57, enum case for Calendar.RepeatedTimePolicy.first(_:), v59);
    v48 = v73;
    v49 = v63;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v73, v63, v42, v46, v44);
    v50 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v51 = v30;
    v52 = v62;
    v50(v51, v62);
    v50(v48, v52);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v69);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v42, v67);
    ((void (*)(char *, uint64_t))v54)(v13, v71);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v49, v72);
    return sub_100050104(v66, v70);
  }
}

uint64_t sub_100052628@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t (*v57)(char *, _QWORD, uint64_t, uint64_t);
  char *v58;
  char *v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  char *v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;

  v2 = v1;
  v85 = a1;
  v80 = type metadata accessor for Calendar.SearchDirection(0);
  v77 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v79 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v82 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v76 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Calendar.MatchingPolicy(0);
  v84 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v83 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Calendar(0);
  v6 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000AF178);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v65 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v65 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v65 - v19;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v86 = (char *)&v65 - v26;
  v87 = v2;
  sub_1000533B0(v2, (uint64_t)v20);
  v27 = v21;
  v28 = v21;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  if (v29((uint64_t)v20, 1, v28) == 1)
  {
    sub_100052FA4((uint64_t)v20);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v85, 1, 1, v27);
  }
  else
  {
    v69 = v25;
    v70 = v29;
    v71 = v6;
    v72 = v12;
    v31 = v83;
    v32 = v84;
    v73 = v15;
    v74 = v18;
    v33 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v34 = v86;
    v35 = v27;
    v33(v86, v20, v27);
    v36 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(0);
    v37 = v87 + *(int *)(v36 + 28);
    v38 = sub_1000073C0(&qword_1000B18D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v39 = dispatch thunk of static Comparable.< infix(_:_:)(v34, v37, v35, v38);
    if ((v39 & 1) != 0)
    {
      v66 = v37;
      v67 = v22;
      v68 = (void (*)(uint64_t, char *, uint64_t))v33;
      v40 = v8;
      static Calendar.current.getter(v39);
      v41 = v87 + *(int *)(v36 + 24);
      v42 = v31;
      (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v31, enum case for Calendar.MatchingPolicy.nextTime(_:), v81);
      v43 = v76;
      v44 = v78;
      (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v76, enum case for Calendar.RepeatedTimePolicy.first(_:), v78);
      v45 = v77;
      v46 = v79;
      v47 = v80;
      (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v79, enum case for Calendar.SearchDirection.forward(_:), v80);
      v48 = (uint64_t)v73;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v86, v41, v42, v43, v46);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v43, v44);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v42, v81);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v40, v75);
      v49 = (uint64_t)v72;
      sub_1000533B0(v48, (uint64_t)v72);
      v50 = v70(v49, 1, v35);
      v51 = v86;
      v52 = v87;
      if (v50 == 1)
      {
        sub_100052FA4(v48);
        sub_100052FA4(v49);
        sub_100052FA4(v52);
        v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56);
        v53(v52, 1, 1, v35);
        v54 = v85;
        v68((uint64_t)v85, v51, v35);
      }
      else
      {
        v60 = v68;
        v59 = v69;
        v68((uint64_t)v69, (char *)v49, v35);
        v61 = v66;
        v62 = static Date.> infix(_:_:)(v59, v66);
        v54 = v85;
        v63 = v67;
        if ((v62 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v67 + 8))(v59, v35);
          sub_100052FA4(v48);
          sub_100052FA4(v52);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v52, v61, v35);
          v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
          v53(v52, 0, 1, v35);
        }
        else
        {
          v64 = (uint64_t)v74;
          Date.addingTimeInterval(_:)(v62, 1.0);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v59, v35);
          sub_100052FA4(v48);
          v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
          v53(v64, 0, 1, v35);
          sub_100050104(v64, v52);
        }
        v60((uint64_t)v54, v51, v35);
      }
      return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v53)(v54, 0, 1, v35);
    }
    else
    {
      v55 = (uint64_t)v74;
      v56 = v86;
      Date.addingTimeInterval(_:)(v39, 1.0);
      v57 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
      v57((char *)v55, 0, 1, v35);
      sub_100050104(v55, v87);
      v58 = v85;
      v33(v85, v56, v35);
      return v57(v58, 0, 1, v35);
    }
  }
}

uint64_t sub_100052BD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002B89C(v1, a1, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t sub_100052BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10004F46C(v0);
  v2 = v1;
  sub_10000E844(v0, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry);
  return v2;
}

_QWORD *sub_100052C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  v37 = a1;
  v3 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(0);
  __chkstk_darwin(v3);
  v36 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v35 - v10;
  v12 = type metadata accessor for TimersTimelineSchedule.TimePeriodEntries(0);
  v13 = __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  v35 = (uint64_t)&v35 - v16;
  v17 = type metadata accessor for TimelineScheduleMode(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for TimelineScheduleMode.normal(_:), v17);
  LOBYTE(a2) = static TimelineScheduleMode.== infix(_:_:)(a2, v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if ((a2 & 1) != 0)
  {
    v21 = *v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v37, v5);
    *v15 = 0x3FA999999999999ALL;
    v22 = (uint64_t)v15 + *(int *)(v12 + 20);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v23(v22, 1, 1, v5);
    sub_100052FA4(v22);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v22, v11, v5);
    v23(v22, 0, 1, v5);
    *v15 = v21;
    v24 = v35;
    sub_10002B89C((uint64_t)v15, v35, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries);
    v25 = sub_10000A58C(&qword_1000B1AE0);
    v26 = (_QWORD *)swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v27 = (uint64_t)v26 + *(_QWORD *)(class metadata base offset for _SequenceBox + *v26 + 16);
    v28 = v24;
    v29 = type metadata accessor for TimersTimelineSchedule.TimePeriodEntries;
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v30(v11, v37, v5);
    v31 = type metadata accessor for TimersTimelineSchedule(0);
    v30(v9, (uint64_t)v38 + *(int *)(v31 + 20), v5);
    v32 = v36;
    sub_100052150((uint64_t)v11, (uint64_t)v9, v36);
    v33 = sub_10000A58C(&qword_1000B1AD8);
    v26 = (_QWORD *)swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    v27 = (uint64_t)v26 + *(_QWORD *)(class metadata base offset for _SequenceBox + *v26 + 16);
    v29 = type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry;
    v28 = v32;
  }
  sub_10002B89C(v28, v27, v29);
  return v26;
}

_QWORD *sub_100052F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = sub_100052C3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1BD0, (uint64_t)&nominal type descriptor for TimersTimelineSchedule.ReducedFrequencyEntry);
}

uint64_t type metadata accessor for TimersTimelineSchedule.TimePeriodEntries(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1B40, (uint64_t)&nominal type descriptor for TimersTimelineSchedule.TimePeriodEntries);
}

uint64_t sub_100052FA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000A58C(&qword_1000AF178);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100052FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100052FF0);
}

uint64_t sub_100052FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_10000A58C(&qword_1000AF178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_100053034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053040);
}

uint64_t sub_100053040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_10000A58C(&qword_1000AF178);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_100053088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100053094(a1, a2, a3, (uint64_t (*)(uint64_t))sub_10005310C);
}

uint64_t sub_100053094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  v7[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v7, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10005310C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B17F0)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B17F0);
  }
}

uint64_t sub_100053160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005316C);
}

uint64_t sub_10005316C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_10000A58C(&qword_1000AF178);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for DateComponents(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100053208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053214);
}

uint64_t sub_100053214(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_10000A58C(&qword_1000AF178);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for DateComponents(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000532B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[4];

  sub_10005310C(319);
  if (v3 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6 = *(_QWORD *)(v4 - 8) + 64;
      v9[1] = v6;
      v7 = type metadata accessor for DateComponents(319);
      if (v8 <= 0x3F)
      {
        v9[2] = *(_QWORD *)(v7 - 8) + 64;
        v9[3] = v6;
        swift_initStructMetadata(a1, 256, 4, v9, a1 + 16);
      }
    }
  }
}

uint64_t sub_100053358()
{
  return sub_1000073C0(&qword_1000B1C10, type metadata accessor for TimersTimelineSchedule.ReducedFrequencyEntry, (uint64_t)&unk_100083AB8);
}

uint64_t sub_100053384()
{
  return sub_1000073C0(&qword_1000B1C18, type metadata accessor for TimersTimelineSchedule.TimePeriodEntries, (uint64_t)&unk_100083B50);
}

uint64_t sub_1000533B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A58C(&qword_1000AF178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000533F8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  _OWORD v37[4];
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000A58C(&qword_1000B2610);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v34 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v33 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v35 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v35 << 6);
      goto LABEL_28;
    }
    v11 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v33)
      goto LABEL_37;
    v12 = *(_QWORD *)(v34 + 8 * v11);
    v13 = v35 + 1;
    if (!v12)
    {
      v13 = v35 + 2;
      if (v35 + 2 >= v33)
        goto LABEL_37;
      v12 = *(_QWORD *)(v34 + 8 * v13);
      if (!v12)
      {
        v13 = v35 + 3;
        if (v35 + 3 >= v33)
          goto LABEL_37;
        v12 = *(_QWORD *)(v34 + 8 * v13);
        if (!v12)
        {
          v13 = v35 + 4;
          if (v35 + 4 >= v33)
            goto LABEL_37;
          v12 = *(_QWORD *)(v34 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v35 = v13;
LABEL_28:
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v39[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v15 = *(void **)&v39[0];
    *(_QWORD *)&v38[0] = v16;
    v17 = sub_1000604C0();
    v18 = v15;
    v19 = v16;
    swift_dynamicCast((char *)v39 + 8, v38, v17, (char *)&type metadata for Any + 8, 7);
    v20 = *(_QWORD *)&v39[0];
    sub_1000604FC((_OWORD *)((char *)v39 + 8), v37);
    sub_1000604FC(v37, v39);
    sub_1000604FC(v39, v38);
    v21 = v3[5];
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;
    Hasher.init(_seed:)(&v36, v21);
    String.hash(into:)(&v36, v22, v24);
    v25 = Hasher._finalize()();
    swift_bridgeObjectRelease(v24);
    v26 = -1 << *((_BYTE *)v3 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)&v7[8 * (v27 >> 6)]) != 0)
    {
      v8 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)&v7[8 * (v27 >> 6)])) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)&v7[8 * v28];
      }
      while (v32 == -1);
      v8 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)&v7[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v20;
    sub_1000604FC(v38, (_OWORD *)(v3[7] + 32 * v8));
    ++v3[2];
  }
  v14 = v35 + 5;
  if (v35 + 5 >= v33)
  {
LABEL_37:
    swift_release(v3);
    sub_10006050C(a1);
    return;
  }
  v12 = *(_QWORD *)(v34 + 8 * v14);
  if (v12)
  {
    v13 = v35 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v33)
      goto LABEL_37;
    v12 = *(_QWORD *)(v34 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_100053798@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v2 = v1;
  v30 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B2308);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000B2310);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000B2318);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  v17 = sub_10000A58C(&qword_1000B2320);
  v18 = sub_1000539C8((uint64_t)v1, (uint64_t)&v8[*(int *)(v17 + 44)]);
  v19 = static Edge.Set.horizontal.getter(v18);
  sub_100011440((uint64_t)v8, (uint64_t)v11, &qword_1000B2308);
  v20 = &v11[*(int *)(v9 + 36)];
  *v20 = v19;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  v20[40] = 1;
  v21 = sub_100011484((uint64_t)v8, &qword_1000B2308);
  static AccessibilityChildBehavior.contain.getter(v21);
  v22 = sub_10005E28C();
  View.accessibilityElement(children:)(v5, v9, v22);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
  sub_100011484((uint64_t)v11, &qword_1000B2310);
  v23 = *v1;
  v24 = v2[1];
  v31[0] = v9;
  v31[1] = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v31, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityIdentifier(_:)(v23, v24, v12, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_1000539C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = a2;
  v62 = type metadata accessor for TimerCountdownCustomView(0);
  v3 = __chkstk_darwin(v62);
  v63 = (uint64_t)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v60 - v5;
  v7 = sub_10000A58C(&qword_1000B2338);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000B2340);
  __chkstk_darwin(v10);
  v64 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_10000A58C(&qword_1000B2348);
  __chkstk_darwin(v66);
  v61 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000A58C(&qword_1000B2350);
  v67 = *(_QWORD *)(v13 - 8);
  v68 = v13;
  v14 = __chkstk_darwin(v13);
  v60 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v65 = (char *)&v60 - v16;
  v17 = type metadata accessor for TimerControlsCustomView(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10000A58C(&qword_1000B1F40);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v60 - v24;
  sub_10000E800(a1, (uint64_t)v19, type metadata accessor for TimerSessionEntry);
  v26 = (int *)type metadata accessor for SessionsTimerPlatter(0);
  sub_1000113C0(a1 + v26[5], (uint64_t)&v19[*(int *)(v17 + 20)]);
  v27 = sub_1000113C0(a1 + v26[6], (uint64_t)&v19[*(int *)(v17 + 24)]);
  LOBYTE(v17) = static Edge.Set.leading.getter(v27);
  v28 = EdgeInsets.init(_all:)(1.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_10000E800((uint64_t)v19, (uint64_t)v23, type metadata accessor for TimerControlsCustomView);
  v35 = &v23[*(int *)(v20 + 36)];
  *v35 = v17;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  sub_10000E844((uint64_t)v19, type metadata accessor for TimerControlsCustomView);
  v36 = sub_1000112A4((uint64_t)v23, (uint64_t)v25, &qword_1000B1F40);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v36);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v37 = &v9[*(int *)(sub_10000A58C(&qword_1000B2358) + 44)];
  v38 = *(_QWORD *)(a1 + v26[7]);
  v39 = v62;
  sub_10000E800(a1, (uint64_t)&v6[*(int *)(v62 + 20)], type metadata accessor for TimerSessionEntry);
  *(_QWORD *)v6 = sub_10005AA10;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v6[*(int *)(v39 + 24)] = 1;
  v40 = v63;
  sub_10000E800((uint64_t)v6, v63, type metadata accessor for TimerCountdownCustomView);
  *(_QWORD *)v37 = v38;
  v37[8] = 0;
  v41 = sub_10000A58C(&qword_1000B2360);
  sub_10000E800(v40, (uint64_t)&v37[*(int *)(v41 + 48)], type metadata accessor for TimerCountdownCustomView);
  sub_10000E844((uint64_t)v6, type metadata accessor for TimerCountdownCustomView);
  v42 = sub_10000E844(v40, type metadata accessor for TimerCountdownCustomView);
  v43 = static Alignment.center.getter(v42);
  v44 = v64;
  sub_1000613C4(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v64, 0.0, 1, INFINITY, 0, v43, v45);
  sub_100011484((uint64_t)v9, &qword_1000B2338);
  v46 = v61;
  sub_100011440(v44, v61, &qword_1000B2340);
  v47 = v66;
  *(_BYTE *)(v46 + *(int *)(v66 + 36)) = 0;
  sub_100011484(v44, &qword_1000B2340);
  v48 = sub_10005E310();
  v49 = v60;
  View.onTapGesture(count:perform:)(1, sub_100053F18, 0, v47, v48);
  sub_100011484(v46, &qword_1000B2348);
  v51 = v67;
  v50 = v68;
  v52 = v65;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v65, v49, v68);
  sub_100011440((uint64_t)v25, (uint64_t)v23, &qword_1000B1F40);
  v53 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v54 = v51;
  v55 = v50;
  v53(v49, v52, v50);
  v56 = v69;
  sub_100011440((uint64_t)v23, v69, &qword_1000B1F40);
  v57 = sub_10000A58C(&qword_1000B2390);
  v53((char *)(v56 + *(int *)(v57 + 48)), v49, v55);
  v58 = *(void (**)(char *, uint64_t))(v54 + 8);
  v58(v52, v55);
  sub_100011484((uint64_t)v25, &qword_1000B1F40);
  v58(v49, v55);
  return sub_100011484((uint64_t)v23, &qword_1000B1F40);
}

uint64_t sub_100053F18()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(NSURL), "mtURLForSection:", 4);
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
  }
  else
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v2, 1, 1, v6);
  }
  type metadata accessor for MTSUtilities(0);
  dispatch thunk of static MTSUtilities.launchClockAppIfPossible(_:)(v2);
  return sub_100011484((uint64_t)v2, (uint64_t *)&unk_1000B0040);
}

uint64_t sub_10005400C()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

uint64_t sub_100054014()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_10005401C()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100054024()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10005402C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100083F30, a2);
  v5 = swift_getKeyPath(&unk_100083F58, v4);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10005409C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate__resizeDelegate;
  v2 = sub_10000A58C(&qword_1000B1F98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100054104()
{
  return type metadata accessor for EnvironmentDelegate(0);
}

uint64_t type metadata accessor for EnvironmentDelegate(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B1C50, (uint64_t)&nominal type descriptor for EnvironmentDelegate);
}

void sub_100054120(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000541A0(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100083C48;
    v4[2] = &unk_100083C60;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_1000541A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B1C60)
  {
    v2 = sub_10000E880(&qword_1000AF268);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B1C60);
  }
}

uint64_t sub_100054210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005421C);
}

uint64_t sub_100054220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005422C);
}

uint64_t type metadata accessor for AlertingTimerView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1DD0, (uint64_t)&nominal type descriptor for AlertingTimerView);
}

unint64_t sub_100054248(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v29 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v29);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_100007AC4(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(int *)(a3 + 20);
    v11 = (_QWORD *)(a1 + v10);
    v12 = a2 + v10;
    v13 = *(_QWORD *)(a2 + v10 + 8);
    *v11 = *(_QWORD *)(a2 + v10);
    v11[1] = v13;
    v14 = *(_QWORD *)(a2 + v10 + 24);
    v11[2] = *(_QWORD *)(a2 + v10 + 16);
    v11[3] = v14;
    v15 = (int *)type metadata accessor for TimerSessionEntry(0);
    v16 = v15[6];
    v31 = v12 + v16;
    v32 = (char *)v11 + v16;
    v17 = type metadata accessor for Date(0);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    v18(v32, v31, v17);
    *((_BYTE *)v11 + v15[7]) = *(_BYTE *)(v12 + v15[7]);
    v19 = v15[8];
    v20 = (_QWORD *)((char *)v11 + v19);
    v21 = (_QWORD *)(v12 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = v15[9];
    v24 = (char *)v11 + v23;
    v25 = v12 + v23;
    v24[8] = *(_BYTE *)(v25 + 8);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    v26 = v15[10];
    v27 = (char *)v11 + v26;
    v28 = v12 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = *(_BYTE *)(v28 + 8);
    *(_QWORD *)((char *)v11 + v15[11]) = *(_QWORD *)(v12 + v15[11]);
    *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain(v22);
  }
  return a1;
}

uint64_t sub_1000543C0(uint64_t *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  sub_100007AF8(*a1, a1[1]);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease(*((_QWORD *)v4 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v4 + 3));
  v5 = type metadata accessor for TimerSessionEntry(0);
  v6 = &v4[*(int *)(v5 + 24)];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v5 + 32) + 8]);
}

uint64_t sub_10005444C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100007AC4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)(a1 + v9);
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a2 + v9 + 8);
  *v10 = *(_QWORD *)(a2 + v9);
  v10[1] = v12;
  v13 = *(_QWORD *)(a2 + v9 + 24);
  v10[2] = *(_QWORD *)(a2 + v9 + 16);
  v10[3] = v13;
  v14 = (int *)type metadata accessor for TimerSessionEntry(0);
  v15 = v14[6];
  v30 = (char *)v10 + v15;
  v16 = v11 + v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  v18(v30, v16, v17);
  *((_BYTE *)v10 + v14[7]) = *(_BYTE *)(v11 + v14[7]);
  v19 = v14[8];
  v20 = (_QWORD *)((char *)v10 + v19);
  v21 = (_QWORD *)(v11 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v14[9];
  v24 = (char *)v10 + v23;
  v25 = v11 + v23;
  v24[8] = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = v14[10];
  v27 = (char *)v10 + v26;
  v28 = v11 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = *(_BYTE *)(v28 + 8);
  *(_QWORD *)((char *)v10 + v14[11]) = *(_QWORD *)(v11 + v14[11]);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_1000545A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100007AC4(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_100007AF8(v9, v10);
  v11 = *(int *)(a3 + 20);
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  *v12 = *(_QWORD *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  v15 = *(_QWORD *)(a1 + v11 + 8);
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v12[2] = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  v17 = v12[3];
  v12[3] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = (int *)type metadata accessor for TimerSessionEntry(0);
  v19 = v18[6];
  v20 = (char *)v12 + v19;
  v21 = v13 + v19;
  v22 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  *((_BYTE *)v12 + v18[7]) = *(_BYTE *)(v13 + v18[7]);
  v23 = v18[8];
  v24 = (_QWORD *)((char *)v12 + v23);
  v25 = (_QWORD *)(v13 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = v18[9];
  v29 = (char *)v12 + v28;
  v30 = (uint64_t *)(v13 + v28);
  v31 = *v30;
  v29[8] = *((_BYTE *)v30 + 8);
  *(_QWORD *)v29 = v31;
  v32 = v18[10];
  v33 = (char *)v12 + v32;
  v34 = (uint64_t *)(v13 + v32);
  v35 = *v34;
  v33[8] = *((_BYTE *)v34 + 8);
  *(_QWORD *)v33 = v35;
  *(_QWORD *)((char *)v12 + v18[11]) = *(_QWORD *)(v13 + v18[11]);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10005471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = (_OWORD *)(a1 + v6);
  v8 = a2 + v6;
  v9 = *(_OWORD *)(a2 + v6 + 16);
  *v7 = *(_OWORD *)(a2 + v6);
  v7[1] = v9;
  v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  v11 = v10[6];
  v12 = (char *)v7 + v11;
  v13 = v8 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *((_BYTE *)v7 + v10[7]) = *(_BYTE *)(v8 + v10[7]);
  *(_OWORD *)((char *)v7 + v10[8]) = *(_OWORD *)(v8 + v10[8]);
  v15 = v10[9];
  v16 = (char *)v7 + v15;
  v17 = v8 + v15;
  v16[8] = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = v10[10];
  v19 = (char *)v7 + v18;
  v20 = v8 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = *(_BYTE *)(v20 + 8);
  *(_QWORD *)((char *)v7 + v10[11]) = *(_QWORD *)(v8 + v10[11]);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100054820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100007AF8(v7, v8);
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)(a1 + v9);
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a2 + v9 + 8);
  v13 = *(_QWORD *)(a1 + v9 + 8);
  *v10 = *(_QWORD *)(a2 + v9);
  v10[1] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = v10[3];
  v10[2] = *(_QWORD *)(v11 + 16);
  v10[3] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = (int *)type metadata accessor for TimerSessionEntry(0);
  v17 = v16[6];
  v18 = (char *)v10 + v17;
  v19 = v11 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *((_BYTE *)v10 + v16[7]) = *(_BYTE *)(v11 + v16[7]);
  v21 = v16[8];
  v22 = (_QWORD *)((char *)v10 + v21);
  v23 = (uint64_t *)(v11 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v16[9];
  v28 = (char *)v10 + v27;
  v29 = v11 + v27;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v28[8] = *(_BYTE *)(v29 + 8);
  v30 = v16[10];
  v31 = (char *)v10 + v30;
  v32 = v11 + v30;
  v31[8] = *(_BYTE *)(v32 + 8);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_QWORD *)((char *)v10 + v16[11]) = *(_QWORD *)(v11 + v16[11]);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10005495C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100054968);
}

uint64_t sub_100054968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005515C(a1, a2, a3, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_100054974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100054980);
}

uint64_t sub_100054980(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000551E8(a1, a2, a3, a4, type metadata accessor for TimerSessionEntry);
}

uint64_t type metadata accessor for TimerCountdownCustomView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1E68, (uint64_t)&nominal type descriptor for TimerCountdownCustomView);
}

uint64_t sub_1000549A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100083CD0;
  result = type metadata accessor for TimerSessionEntry(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100083C60;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

double destroy for TimerLabelCustomView(uint64_t a1)
{
  double result;

  sub_10000E774(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 32)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for TimerLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000E764(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for TimerLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000E764(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000E774(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

__n128 initializeWithTake for TimerPausedCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TimerLabelCustomView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10000E774(v5, v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimerLabelCustomView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimerLabelCustomView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimerLabelCustomView()
{
  return &type metadata for TimerLabelCustomView;
}

void destroy for TimerPausedCompressedTrailingView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));

}

uint64_t initializeWithCopy for TimerPausedCompressedTrailingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  v6 = v4;
  v7 = v5;
  return a1;
}

_QWORD *assignWithCopy for TimerPausedCompressedTrailingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (void *)a2[3];
  v7 = (void *)a1[3];
  a1[3] = v6;
  v8 = v6;

  v9 = (void *)a2[4];
  v10 = (void *)a1[4];
  a1[4] = v9;
  v11 = v9;

  return a1;
}

_QWORD *assignWithTake for TimerPausedCompressedTrailingView(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *a1 = *(_QWORD *)a2;
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(a1[2]);
  v4 = (void *)a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);

  v5 = (void *)a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for TimerPausedCompressedTrailingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimerPausedCompressedTrailingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimerPausedCompressedTrailingView()
{
  return &type metadata for TimerPausedCompressedTrailingView;
}

unint64_t sub_100054E50(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_100007AC4(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(int *)(a3 + 20);
    v11 = a1 + v10;
    v12 = a2 + v10;
    v13 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t sub_100054F00(uint64_t *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  sub_100007AF8(*a1, a1[1]);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100054F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100007AC4(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

uint64_t sub_100054FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  sub_100007AC4(*(_QWORD *)a2, v7);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  sub_100007AF8(v9, v10);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_100055064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(int *)(a3 + 20);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000550C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  sub_100007AF8(v7, v8);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_100055144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055150);
}

uint64_t sub_100055150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005515C(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_10005515C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  unsigned int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 254)
  {
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (v5 > 1)
      return (v5 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v9 = a4(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_1000551D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000551DC);
}

uint64_t sub_1000551DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1000551E8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_1000551E8(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  uint64_t v8;

  v6 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  else
  {
    v8 = a5(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6 + *(int *)(a4 + 20), a2, a2, v8);
  }
  return result;
}

uint64_t type metadata accessor for TimerRunningCompressedTrailingView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1F00, (uint64_t)&nominal type descriptor for TimerRunningCompressedTrailingView);
}

uint64_t sub_10005526C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100083CD0;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000552E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B690, 1);
}

uint64_t sub_1000552F0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for EnvironmentDelegate(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005532C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  long double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v89 = a3;
  v87 = sub_10000A58C(&qword_1000B2600);
  __chkstk_darwin(v87);
  v88 = (uint64_t *)((char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v76 = type metadata accessor for _ContentTransitionModifier(0);
  __chkstk_darwin(v76);
  v81 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContentTransition(0);
  v79 = *(_QWORD *)(v7 - 8);
  v80 = v7;
  __chkstk_darwin(v7);
  v78 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_10000A58C(&qword_1000B25F0);
  v9 = __chkstk_darwin(v91);
  v77 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v82 = (uint64_t)&v73 - v11;
  v86 = type metadata accessor for Locale(0);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_10000A58C(&qword_1000B16B0);
  v90 = a1;
  TimelineView.Context.date.getter(v85);
  v18 = type metadata accessor for TimelineCountdownView(0);
  sub_100034514((uint64_t)v13);
  v19 = *(_QWORD *)a2;
  v20 = *(_BYTE *)(a2 + 8);
  sub_100030464(*(_QWORD *)a2, v20);
  v21 = sub_100034388(v19, v20);
  sub_1000304AC(v19, v20);
  v22 = *(_BYTE *)(a2 + *(int *)(v18 + 28));
  v23 = Date.timeIntervalSince(_:)(v17);
  sub_1000603EC(v23, (uint64_t)v13, v21 & 1, v22);
  v25 = v24;
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v84 + 8))(v13, v86);
  v28 = *(void (**)(char *, uint64_t))(v15 + 8);
  v86 = (uint64_t)v17;
  v84 = v14;
  v28(v17, v14);
  v29 = *(int *)(v18 + 36);
  v83 = a2;
  v30 = a2 + v29;
  v31 = *(_QWORD *)(a2 + v29);
  if (v31)
  {
    if ((*(_BYTE *)(v31 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) & 1) != 0)
    {
      v92 = v25;
      v93 = v27;
      v32 = sub_10000EB0C();
      v73 = v25;
      v33 = v32;
      swift_bridgeObjectRetain(v27);
      v34 = Text.init<A>(_:)(&v92, &type metadata for String, v33);
      v36 = v35;
      v38 = v37;
      v40 = v39 & 1;
      v74 = v27;
      v41 = v78;
      static ContentTransition.numericText(countsDown:)(1);
      v42 = static Animation.easeInOut(duration:)(1.0);
      v43 = static ContentTransition.Options.animatesDifferentContent.getter();
      v75 = v28;
      v44 = v43;
      v46 = v79;
      v45 = v80;
      v47 = (uint64_t)v81;
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v81, v41, v80);
      v48 = v76;
      *(_QWORD *)(v47 + *(int *)(v76 + 20)) = v42;
      *(_DWORD *)(v47 + *(int *)(v48 + 24)) = v44;
      v49 = (uint64_t)v77;
      sub_10000E800(v47, (uint64_t)&v77[*(int *)(v91 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
      *(_QWORD *)v49 = v34;
      *(_QWORD *)(v49 + 8) = v36;
      *(_BYTE *)(v49 + 16) = v40;
      *(_QWORD *)(v49 + 24) = v38;
      *(_WORD *)(v49 + 32) = 256;
      sub_10000E764(v34, v36, v40);
      swift_bridgeObjectRetain(v38);
      sub_10000E844(v47, (uint64_t (*)(_QWORD))&type metadata accessor for _ContentTransitionModifier);
      v50 = v41;
      v51 = v45;
      v52 = v73;
      v27 = v74;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v51);
      sub_10000E774(v34, v36, v40);
      swift_bridgeObjectRelease(v38);
      v53 = v82;
      sub_1000112A4(v49, v82, &qword_1000B25F0);
      v54 = v88;
      sub_100011440(v53, (uint64_t)v88, &qword_1000B25F0);
      swift_storeEnumTagMultiPayload(v54, v87, 0);
      v55 = sub_10000A58C(&qword_1000B1690);
      v56 = sub_100060390();
      v57 = sub_10004EE58();
      v58 = v54;
      v28 = v75;
      _ConditionalContent<>.init(storage:)(v58, v91, v55, v56, v57);
      sub_100011484(v53, &qword_1000B25F0);
    }
    else
    {
      v92 = v25;
      v93 = v27;
      v52 = v25;
      v59 = sub_10000EB0C();
      swift_bridgeObjectRetain(v27);
      v60 = Text.init<A>(_:)(&v92, &type metadata for String, v59);
      v61 = v88;
      *v88 = v60;
      v61[1] = v62;
      *((_BYTE *)v61 + 16) = v63 & 1;
      v61[3] = v64;
      *((_WORD *)v61 + 16) = 256;
      swift_storeEnumTagMultiPayload(v61, v87, 1);
      v65 = sub_10000A58C(&qword_1000B1690);
      v66 = sub_100060390();
      v67 = sub_10004EE58();
      _ConditionalContent<>.init(storage:)(v61, v91, v65, v66, v67);
    }
    sub_1000558B0(v52, v27);
    swift_bridgeObjectRelease(v27);
    v68 = v86;
    TimelineView.Context.date.getter(v85);
    sub_100055BA8(v68);
    return ((uint64_t (*)(uint64_t, uint64_t))v28)(v68, v84);
  }
  else
  {
    v70 = *(_QWORD *)(v30 + 8);
    v71 = type metadata accessor for EnvironmentDelegate(0);
    v72 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
    result = EnvironmentObject.error()(0, v70, v71, v72);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000558B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t inited;
  NSString *v20;
  id v21;
  unint64_t v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  Class isa;
  id v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[6];
  _BYTE v36[48];

  v5 = type metadata accessor for TimelineCountdownView(0);
  v7 = (uint64_t *)(v2 + *(int *)(v5 + 36));
  v8 = *v7;
  if (!*v7)
    goto LABEL_10;
  v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue + 8);
  if (!((v9 & 0x2000000000000000) != 0
       ? HIBYTE(v9) & 0xF
       : *(_QWORD *)(v8 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue) & 0xFFFFFFFFFFFFLL))
    goto LABEL_9;
  if (*(_BYTE *)(v8 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) != 1)
    goto LABEL_9;
  v11 = v5;
  KeyPath = swift_getKeyPath(&unk_100083F30, v6);
  v14 = swift_getKeyPath(&unk_100083F58, v13);
  swift_retain(v8);
  static Published.subscript.getter(v35, v15, KeyPath, v14);
  swift_release(v8);
  swift_release(KeyPath);
  swift_release(v14);
  v16 = (void *)v35[0];
  if (!v35[0])
    goto LABEL_9;
  v17 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", *(double *)(v2 + *(int *)(v11 + 32)));
  v18 = sub_10000A58C(&qword_1000B2608);
  inited = swift_initStackObject(v18, v36);
  *(_OWORD *)(inited + 16) = xmmword_100082260;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  *(_QWORD *)(inited + 40) = v17;
  v20 = NSFontAttributeName;
  v21 = v17;
  v22 = sub_10003660C(inited);
  v23 = String._bridgeToObjectiveC()();
  sub_1000533F8(v22);
  v25 = v24;
  swift_bridgeObjectRelease(v22);
  type metadata accessor for Key(0);
  sub_1000073C0(&qword_1000AF010, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100080F00);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  objc_msgSend(v23, "sizeWithAttributes:", isa);

  v27 = objc_msgSend(v16, "systemApertureElementContext");
  v35[4] = Frame.timestamp.getter;
  v35[5] = 0;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 1107296256;
  v35[2] = sub_10001C5FC;
  v35[3] = &unk_1000A1740;
  v28 = _Block_copy(v35);
  objc_msgSend(v27, "setElementNeedsUpdateWithCoordinatedAnimations:", v28);
  _Block_release(v28);
  swift_unknownObjectRelease(v16);
  swift_unknownObjectRelease(v27);
  v8 = *v7;
  if (!*v7)
  {
LABEL_10:
    v32 = v7[1];
    v33 = type metadata accessor for EnvironmentDelegate(0);
    v34 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
    result = EnvironmentObject.error()(0, v32, v33, v34);
    __break(1u);
  }
  else
  {
LABEL_9:
    v29 = (_QWORD *)(v8 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
    v30 = *(_QWORD *)(v8 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue + 8);
    *v29 = a1;
    v29[1] = a2;
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRelease(v30);
  }
  return result;
}

void sub_100055BA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  long double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  long double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  char v66;
  char v67;
  long double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, __n128);
  __n128 v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, __n128);
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122[3];

  v2 = v1;
  v121 = a1;
  v3 = (int *)type metadata accessor for TimelineCountdownView(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for Calendar.Component(0);
  v6 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v8 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000A58C(&qword_1000AF178);
  v10 = __chkstk_darwin(v9);
  v112 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v99 - v12;
  v117 = type metadata accessor for Date(0);
  v120 = *(_QWORD *)(v117 - 8);
  v14 = __chkstk_darwin(v117);
  v114 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v116 = (char *)&v99 - v16;
  v119 = type metadata accessor for Locale(0);
  v17 = *(_QWORD *)(v119 - 8);
  __chkstk_darwin(v119);
  v118 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = (_QWORD *)(v1 + v3[9]);
  v20 = *v109;
  if (!*v109)
    goto LABEL_21;
  KeyPath = swift_getKeyPath(&unk_100083F30, v18);
  v23 = swift_getKeyPath(&unk_100083F58, v22);
  swift_retain(v20);
  static Published.subscript.getter(v122, v24, KeyPath, v23);
  swift_release(KeyPath);
  swift_release(v23);
  v25 = v122[0];
  swift_release(v20);
  if (!v25)
    return;
  v105 = v5;
  swift_unknownObjectRelease(v25);
  v27 = v3[5];
  v26 = v3[6];
  v111 = v6;
  v28 = v2 + v26;
  v29 = v118;
  v103 = v2 + v27;
  sub_100034514(v118);
  v30 = *(_QWORD *)v2;
  v31 = *(_BYTE *)(v2 + 8);
  sub_100030464(*(_QWORD *)v2, v31);
  v32 = sub_100034388(v30, v31);
  sub_1000304AC(v30, v31);
  v101 = v3[7];
  v33 = *(_BYTE *)(v2 + v101);
  v110 = v13;
  v34 = v121;
  v104 = v28;
  v35 = Date.timeIntervalSince(_:)(v121);
  sub_1000603EC(v35, v29, v32 & 1, v33);
  v106 = v36;
  v113 = v37;
  v102 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v102(v29, v119);
  v38 = enum case for Calendar.Component.second(_:);
  v39 = v111;
  v40 = v115;
  v107 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 104);
  v107(v8, enum case for Calendar.Component.second(_:), v115);
  v41 = v117;
  v100 = v3;
  v42 = v3[11];
  v108 = v2;
  v43 = v34;
  v44 = (uint64_t)v110;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v8, *(_QWORD *)(v2 + v42), v43, 0);
  v45 = *(void (**)(char *, uint64_t))(v39 + 8);
  v45(v8, v40);
  v46 = v120;
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
  if (v47(v44, 1, v41) == 1)
  {
    swift_bridgeObjectRelease(v113);
    v48 = v44;
LABEL_8:
    sub_100011484(v48, &qword_1000AF178);
    return;
  }
  v49 = v44;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 32);
  v50(v116, v49, v41);
  v107(v8, v38, v40);
  v51 = *(_QWORD *)(v108 + v42);
  if (__OFSUB__(0, v51))
  {
    __break(1u);
LABEL_21:
    v81 = v109;
    goto LABEL_22;
  }
  v52 = v112;
  Calendar.date(byAdding:value:to:wrappingComponents:)(v8, -v51, v121, 0);
  v45(v8, v40);
  if (v47((uint64_t)v52, 1, v41) == 1)
  {
    (*(void (**)(char *, uint64_t))(v120 + 8))(v116, v41);
    swift_bridgeObjectRelease(v113);
    v48 = (uint64_t)v52;
    goto LABEL_8;
  }
  v50(v114, (uint64_t)v52, v41);
  v53 = v118;
  sub_100034514(v118);
  v54 = v108;
  v55 = *(_QWORD *)v108;
  v56 = *(_BYTE *)(v108 + 8);
  sub_100030464(*(_QWORD *)v108, v56);
  v57 = sub_100034388(v55, v56);
  sub_1000304AC(v55, v56);
  v58 = v101;
  LOBYTE(v55) = *(_BYTE *)(v54 + v101);
  v59 = Date.timeIntervalSince(_:)(v116);
  sub_1000603EC(v59, v53, v57 & 1, v55);
  v121 = v60;
  v62 = v61;
  v63 = v119;
  v64 = v102;
  v102(v53, v119);
  sub_100034514(v53);
  v65 = *(_QWORD *)v54;
  v66 = *(_BYTE *)(v54 + 8);
  sub_100030464(*(_QWORD *)v54, v66);
  v67 = sub_100034388(v65, v66);
  sub_1000304AC(v65, v66);
  LOBYTE(v65) = *(_BYTE *)(v54 + v58);
  v68 = Date.timeIntervalSince(_:)(v114);
  sub_1000603EC(v68, v53, v67 & 1, v65);
  v70 = v69;
  v72 = v71;
  v64(v53, v63);
  v73 = v109;
  v74 = *v109;
  if (!*v109)
    goto LABEL_23;
  v75 = swift_retain(*v109);
  v76 = v113;
  v77 = String.count.getter(v106, v113, v75);
  v79 = String.count.getter(v121, v62, v78);
  swift_release(v74);
  swift_bridgeObjectRelease(v62);
  v80 = (uint64_t)v105;
  sub_10000E800(v54, (uint64_t)v105, type metadata accessor for TimelineCountdownView);
  if (v77 != v79)
  {
    sub_10000E844(v80, type metadata accessor for TimelineCountdownView);
    swift_bridgeObjectRelease(v76);
    swift_bridgeObjectRelease(v72);
    v88 = v120;
LABEL_16:
    v89 = *v73;
    if (*v73)
    {
      v93 = *(void (**)(char *, uint64_t, __n128))(v88 + 8);
      v94 = swift_retain(*v73);
      v95 = v117;
      v93(v114, v117, v94);
      ((void (*)(char *, uint64_t))v93)(v116, v95);
      *(_BYTE *)(v89 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 1;
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  v81 = (_QWORD *)(v80 + v100[9]);
  v82 = *v81;
  if (!*v81)
  {
LABEL_22:
    v96 = v81[1];
LABEL_24:
    v97 = type metadata accessor for EnvironmentDelegate(0);
    v98 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
    EnvironmentObject.error()(0, v96, v97, v98);
    __break(1u);
    return;
  }
  v83 = swift_retain(*v81);
  v84 = v113;
  v85 = String.count.getter(v106, v113, v83);
  v87 = String.count.getter(v70, v72, v86);
  swift_release(v82);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v84);
  sub_10000E844(v80, type metadata accessor for TimelineCountdownView);
  v88 = v120;
  if (v85 != v87)
    goto LABEL_16;
  v89 = *v73;
  if (!*v73)
  {
LABEL_23:
    v96 = v73[1];
    goto LABEL_24;
  }
  v90 = *(void (**)(char *, uint64_t, __n128))(v120 + 8);
  v91 = swift_retain(*v73);
  v92 = v117;
  v90(v114, v117, v91);
  ((void (*)(char *, uint64_t))v90)(v116, v92);
  *(_BYTE *)(v89 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
LABEL_18:
  swift_release(v89);
}

uint64_t sub_1000562BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[1] = a2;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimersTimelineSchedule(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (_QWORD *)((char *)v25 - v12);
  v14 = v2 + *(int *)(a1 + 24);
  v15 = (char *)v25 + *(int *)(v11 + 20) - v12;
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, v14, v16);
  *v13 = 0x3FA999999999999ALL;
  sub_10000E800(v2, (uint64_t)v6, type metadata accessor for TimelineCountdownView);
  v17 = *(unsigned __int8 *)(v4 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_1000A1700, v18 + v5, v17 | 7);
  sub_10002B89C((uint64_t)v6, v19 + v18, type metadata accessor for TimelineCountdownView);
  sub_10000E800((uint64_t)v13, (uint64_t)v10, type metadata accessor for TimersTimelineSchedule);
  v20 = swift_allocObject(&unk_1000A1728, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100060318;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = sub_10000A58C(&qword_1000B25D0);
  v22 = sub_1000073C0(&qword_1000B25D8, type metadata accessor for TimersTimelineSchedule, (uint64_t)&unk_100083A48);
  v23 = sub_10005FEB4(&qword_1000B25E0, &qword_1000B25D0, (void (*)(void))sub_100060390, (void (*)(void))sub_10004EE58);
  TimelineView<>.init(_:content:)(v10, sub_100060388, v20, v7, v21, v22, v23);
  return sub_10000E844((uint64_t)v13, type metadata accessor for TimersTimelineSchedule);
}

uint64_t sub_1000564D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = a1;
  v49 = sub_10000A58C(&qword_1000B2268);
  __chkstk_darwin(v49);
  v50 = (uint64_t)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ContentTransition.Style(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  __chkstk_darwin(v3);
  v44 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContentTransition(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10000A58C(&qword_1000B2270);
  v9 = __chkstk_darwin(v48);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v44 - v12;
  v14 = sub_10000A58C(&qword_1000B2278);
  __chkstk_darwin(v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10000A58C(&qword_1000B2280);
  v17 = __chkstk_darwin(v47);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v44 - v20;
  v22 = type metadata accessor for RunningCountdownView(0);
  if (*(_BYTE *)(v1 + *(int *)(v22 + 36)) == 1)
  {
    sub_1000568C4(0, (uint64_t)v13);
    static ContentTransition.numericText(countsDown:)(1);
    v23 = static Animation.easeInOut(duration:)(0.5);
    v24 = static ContentTransition.Options.animatesDifferentContent.getter();
    v25 = &v16[*(int *)(v14 + 36)];
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v25, v8, v5);
    v26 = type metadata accessor for _ContentTransitionModifier(0);
    *(_QWORD *)&v25[*(int *)(v26 + 20)] = v23;
    *(_DWORD *)&v25[*(int *)(v26 + 24)] = v24;
    sub_100011440((uint64_t)v13, (uint64_t)v16, &qword_1000B2270);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100011484((uint64_t)v13, &qword_1000B2270);
    KeyPath = swift_getKeyPath(&unk_1000843D8, v27);
    v29 = v44;
    static ContentTransition.Style.sessionWidget.getter();
    v30 = v47;
    v31 = (uint64_t *)&v19[*(int *)(v47 + 36)];
    v32 = sub_10000A58C(&qword_1000B2300);
    v34 = v45;
    v33 = v46;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))((char *)v31 + *(int *)(v32 + 28), v29, v46);
    *v31 = KeyPath;
    sub_100011440((uint64_t)v16, (uint64_t)v19, &qword_1000B2278);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v33);
    sub_100011484((uint64_t)v16, &qword_1000B2278);
    v35 = &qword_1000B2280;
    sub_1000112A4((uint64_t)v19, (uint64_t)v21, &qword_1000B2280);
    v36 = v50;
    sub_100011440((uint64_t)v21, v50, &qword_1000B2280);
    swift_storeEnumTagMultiPayload(v36, v49, 0);
    v37 = sub_10005DE14();
    v38 = sub_10005DEB8();
    _ConditionalContent<>.init(storage:)(v36, v30, v48, v37, v38);
    v39 = (uint64_t)v21;
  }
  else
  {
    sub_1000568C4(*(unsigned __int8 *)(v1 + *(int *)(v22 + 20)), (uint64_t)v11);
    v35 = &qword_1000B2270;
    v40 = v50;
    sub_100011440((uint64_t)v11, v50, &qword_1000B2270);
    swift_storeEnumTagMultiPayload(v40, v49, 1);
    v41 = sub_10005DE14();
    v42 = sub_10005DEB8();
    _ConditionalContent<>.init(storage:)(v40, v47, v48, v41, v42);
    v39 = (uint64_t)v11;
  }
  return sub_100011484(v39, v35);
}

uint64_t sub_1000568C4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;

  v90 = a1;
  v89 = a2;
  v3 = type metadata accessor for Font._StylisticAlternative(0);
  v87 = *(_QWORD *)(v3 - 8);
  v88 = v3;
  __chkstk_darwin(v3);
  v85 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v5);
  v76 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for TimelineCountdownView(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10000A58C(&qword_1000B22E8);
  __chkstk_darwin(v78);
  v75 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_10000A58C(&qword_1000B22D8);
  __chkstk_darwin(v81);
  v77 = (uint64_t)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10000A58C(&qword_1000B22C8);
  __chkstk_darwin(v82);
  v79 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_10000A58C(&qword_1000B22B8);
  __chkstk_darwin(v84);
  v80 = (uint64_t)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10000A58C(&qword_1000B22A8);
  __chkstk_darwin(v86);
  v83 = (uint64_t)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v2, v7);
  v74 = type metadata accessor for RunningCountdownView(0);
  v20 = *(int *)(v74 + 24);
  v21 = *(_QWORD *)(v2 + v20);
  KeyPath = swift_getKeyPath(&unk_100084408, v22);
  v25 = swift_getKeyPath(&unk_100084438, v24);
  v26 = (uint64_t *)&v13[v11[5]];
  *v26 = v25;
  v27 = sub_10000A58C(&qword_1000B0A38);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = type metadata accessor for EnvironmentDelegate(0);
  v29 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
  v30 = EnvironmentObject.init()(v28, v29);
  v32 = v31;
  *(_QWORD *)v13 = KeyPath;
  v13[8] = 0;
  v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(&v13[v11[6]], v10, v19);
  v13[v11[7]] = v90;
  *(_QWORD *)&v13[v11[8]] = v21;
  v34 = (uint64_t *)&v13[v11[9]];
  *v34 = v30;
  v34[1] = v32;
  static Calendar.current.getter(v33);
  *(_QWORD *)&v13[v11[11]] = 1;
  v35 = *(double *)(v2 + v20);
  v36 = v74;
  v37 = *(_QWORD *)(v2 + *(int *)(v74 + 28));
  v38 = v2;
  v39 = type metadata accessor for Font.Design(0);
  v40 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v76, 1, 1, v39);
  v41 = static Font.system(size:weight:design:)(v37, 0, v40, v35);
  sub_100011484(v40, &qword_1000AF198);
  v42 = Font.monospacedDigit()(v41);
  v43 = swift_release(v41);
  v44 = v87;
  v45 = v88;
  v46 = v85;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v87 + 104))(v85, enum case for Font._StylisticAlternative.three(_:), v88, v43);
  v47 = Font._stylisticAlternative(_:)(v46, v42);
  v48 = swift_release(v42);
  (*(void (**)(char *, uint64_t, __n128))(v44 + 8))(v46, v45, v48);
  v50 = swift_getKeyPath(&unk_1000842E8, v49);
  v51 = v75;
  sub_10000E800((uint64_t)v13, v75, type metadata accessor for TimelineCountdownView);
  v52 = (uint64_t *)(v51 + *(int *)(v78 + 36));
  *v52 = v50;
  v52[1] = v47;
  sub_10000E844((uint64_t)v13, type metadata accessor for TimelineCountdownView);
  v53 = *(_QWORD *)(v38 + *(int *)(v36 + 32));
  v55 = swift_getKeyPath(&unk_100084318, v54);
  v56 = v77;
  sub_100011440(v51, v77, &qword_1000B22E8);
  v57 = (uint64_t *)(v56 + *(int *)(v81 + 36));
  *v57 = v55;
  v57[1] = v53;
  swift_retain(v53);
  sub_100011484(v51, &qword_1000B22E8);
  v59 = swift_getKeyPath(&unk_100084348, v58);
  v60 = v79;
  sub_100011440(v56, v79, &qword_1000B22D8);
  v61 = v60 + *(int *)(v82 + 36);
  *(_QWORD *)v61 = v59;
  *(_BYTE *)(v61 + 8) = 1;
  sub_100011484(v56, &qword_1000B22D8);
  v63 = swift_getKeyPath(&unk_100084378, v62);
  v64 = v80;
  sub_100011440(v60, v80, &qword_1000B22C8);
  v65 = v64 + *(int *)(v84 + 36);
  *(_QWORD *)v65 = v63;
  *(_QWORD *)(v65 + 8) = 1;
  *(_BYTE *)(v65 + 16) = 0;
  sub_100011484(v60, &qword_1000B22C8);
  if ((v90 & 1) != 0)
    v67 = 1.0;
  else
    v67 = 0.4;
  v68 = swift_getKeyPath(&unk_1000843A8, v66);
  v69 = v83;
  sub_100011440(v64, v83, &qword_1000B22B8);
  v70 = v86;
  v71 = v69 + *(int *)(v86 + 36);
  *(_QWORD *)v71 = v68;
  *(double *)(v71 + 8) = v67;
  sub_100011484(v64, &qword_1000B22B8);
  v72 = sub_10005DF3C();
  View.accessibilityIdentifier(_:)(0x6E696E69616D6572, 0xEE00656D69742D67, v70, v72);
  return sub_100011484(v69, &qword_1000B22A8);
}

uint64_t sub_100056EF0@<X0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;

  v42 = a1;
  v2 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *((_QWORD *)v1 + 1);
  v43 = *v1;
  v44 = v5;
  v6 = sub_10000EB0C();
  swift_bridgeObjectRetain(v5);
  v7 = Text.init<A>(_:)(&v43, &type metadata for String, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = v1[2];
  v15 = *((_QWORD *)v1 + 3);
  v16 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
  v17 = static Font.system(size:weight:design:)(v15, 0, v4, v14);
  sub_100011484((uint64_t)v4, &qword_1000AF198);
  v18 = Font.monospacedDigit()(v17);
  swift_release(v17);
  v19 = Text.font(_:)(v18, v7, v9, v13, v11);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  v26 = v23 & 1;
  sub_10000E774(v7, v9, v13);
  swift_bridgeObjectRelease(v11);
  v27 = Text.foregroundColor(_:)(*((_QWORD *)v1 + 4), v19, v21, v26, v25);
  v29 = v28;
  v31 = v30;
  LOBYTE(v9) = v32 & 1;
  sub_10000E774(v19, v21, v26);
  swift_bridgeObjectRelease(v25);
  KeyPath = swift_getKeyPath(&unk_100084348, v33);
  v36 = swift_getKeyPath(&unk_100084378, v35);
  v38 = swift_getKeyPath(&unk_1000843A8, v37);
  v43 = *(double *)&v27;
  v44 = v29;
  v45 = v9;
  v46 = v31;
  v47 = KeyPath;
  v48 = 1;
  v49 = v36;
  v50 = 1;
  v51 = 0;
  v52 = v38;
  v53 = 0x3FD999999999999ALL;
  v39 = sub_10000A58C(&qword_1000B2238);
  v40 = sub_10005DCEC();
  View.accessibilityIdentifier(_:)(0x6E696E69616D6572, 0xEE00656D69742D67, v39, v40);
  sub_10000E774(v27, v29, v9);
  swift_release(v38);
  swift_release(v36);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v31);
}

uint64_t sub_10005717C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *object;
  uint64_t countAndFlagsBits;
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __n128 v39;
  char v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[2];
  Swift::String v53;

  v4 = type metadata accessor for TimerControlsCustomView(0);
  __chkstk_darwin(v4);
  v6 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000B1F40);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v52 - v11;
  sub_10000E800(a1, (uint64_t)v6, type metadata accessor for TimerSessionEntry);
  v13 = type metadata accessor for AlertingTimerView(0);
  sub_1000113C0(a1 + *(int *)(v13 + 20), (uint64_t)&v6[*(int *)(v4 + 20)]);
  v14 = sub_1000113C0(a1 + *(int *)(v13 + 24), (uint64_t)&v6[*(int *)(v4 + 24)]);
  LOBYTE(v4) = static Edge.Set.leading.getter(v14);
  v15 = EdgeInsets.init(_all:)(23.0);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_10000E800((uint64_t)v6, (uint64_t)v10, type metadata accessor for TimerControlsCustomView);
  v22 = &v10[*(int *)(v7 + 36)];
  *v22 = v4;
  *((double *)v22 + 1) = v15;
  *((_QWORD *)v22 + 2) = v17;
  *((_QWORD *)v22 + 3) = v19;
  *((_QWORD *)v22 + 4) = v21;
  v22[40] = 0;
  sub_10000E844((uint64_t)v6, type metadata accessor for TimerControlsCustomView);
  sub_1000112A4((uint64_t)v10, (uint64_t)v12, &qword_1000B1F40);
  countAndFlagsBits = *(_QWORD *)(a1 + 16);
  object = *(void **)(a1 + 24);
  if (countAndFlagsBits == 0x5F544E4552525543 && object == (void *)0xED000052454D4954
    || (_stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 0x5F544E4552525543, 0xED000052454D4954, 0) & 1) != 0)
  {
    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v53._object = (void *)0x8000000100085D60;
    v26._countAndFlagsBits = 0x72656D6954;
    v26._object = (void *)0xE500000000000000;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    v53._countAndFlagsBits = 0xD000000000000013;
    v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v53);
    countAndFlagsBits = v28._countAndFlagsBits;
    object = v28._object;

  }
  else
  {
    swift_bridgeObjectRetain(object);
  }
  v52[0] = countAndFlagsBits;
  v52[1] = object;
  v29 = sub_10000EB0C();
  v30 = Text.init<A>(_:)(v52, &type metadata for String, v29);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  if (qword_1000AED48 != -1)
    swift_once(&qword_1000AED48, sub_100074760);
  v37 = v34 & 1;
  v38 = qword_1000B7068;
  v39 = swift_retain(qword_1000B7068);
  v40 = static Edge.Set.bottom.getter(v39);
  v41 = EdgeInsets.init(_all:)(7.0);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  sub_100011440((uint64_t)v12, (uint64_t)v10, &qword_1000B1F40);
  sub_100011440((uint64_t)v10, a2, &qword_1000B1F40);
  v48 = sub_10000A58C(&qword_1000B1F48);
  v49 = a2 + *(int *)(v48 + 48);
  *(_QWORD *)v49 = 0;
  *(_BYTE *)(v49 + 8) = 1;
  v50 = a2 + *(int *)(v48 + 64);
  *(_QWORD *)v50 = v30;
  *(_QWORD *)(v50 + 8) = v32;
  *(_BYTE *)(v50 + 16) = v37;
  *(_QWORD *)(v50 + 24) = v36;
  *(_QWORD *)(v50 + 32) = v38;
  *(_BYTE *)(v50 + 40) = v40;
  *(double *)(v50 + 48) = v41;
  *(_QWORD *)(v50 + 56) = v43;
  *(_QWORD *)(v50 + 64) = v45;
  *(_QWORD *)(v50 + 72) = v47;
  *(_BYTE *)(v50 + 80) = 0;
  sub_10000E764(v30, v32, v37);
  swift_bridgeObjectRetain(v36);
  swift_retain(v38);
  sub_100011484((uint64_t)v12, &qword_1000B1F40);
  sub_10000E774(v30, v32, v37);
  swift_release(v38);
  swift_bridgeObjectRelease(v36);
  return sub_100011484((uint64_t)v10, &qword_1000B1F40);
}

uint64_t sub_100057554@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  *(_QWORD *)a1 = static VerticalAlignment.bottom.getter();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  v3 = sub_10000A58C(&qword_1000B1F38);
  return sub_10005717C(v1, a1 + *(int *)(v3 + 44));
}

uint64_t sub_10005759C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;

  v45 = a2;
  v44 = sub_10000A58C(&qword_1000B2210);
  __chkstk_darwin(v44);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v5);
  v7 = (double *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10000A58C(&qword_1000B21E0);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(double *)a1;
  v13 = *(double *)a1;
  swift_retain(v11);
  v15 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v46, *(_QWORD *)&v13, 0, *(_QWORD *)&v13, 0, v15, v16);
  v17 = v46;
  v18 = v47;
  v43 = v48;
  v42 = v49;
  v40 = v51;
  v41 = v50;
  v19 = v12 * 0.5;
  v20 = (char *)v7 + *(int *)(v5 + 20);
  v21 = enum case for RoundedCornerStyle.continuous(_:);
  v22 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
  *v7 = v19;
  v7[1] = v19;
  sub_10000E800((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v4[*(int *)(v44 + 36)] = 256;
  sub_100011440((uint64_t)v4, (uint64_t)&v10[*(int *)(v8 + 36)], &qword_1000B2210);
  *(_QWORD *)v10 = v11;
  *((_WORD *)v10 + 4) = 256;
  *((_QWORD *)v10 + 2) = v17;
  v10[24] = v18;
  *((_QWORD *)v10 + 4) = v43;
  v10[40] = v42;
  v23 = v40;
  *((_QWORD *)v10 + 6) = v41;
  *((_QWORD *)v10 + 7) = v23;
  swift_retain(v11);
  sub_100011484((uint64_t)v4, &qword_1000B2210);
  sub_10000E844((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v11);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v29);
  v30 = Image.init(systemName:)(v28, v29);
  v31 = *(_QWORD *)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_1000842E8, v32);
  v34 = *(_QWORD *)(a1 + 32);
  v36 = swift_getKeyPath(&unk_100084318, v35);
  v37 = v45;
  sub_100011440((uint64_t)v10, v45, &qword_1000B21E0);
  v38 = (uint64_t *)(v37 + *(int *)(sub_10000A58C(&qword_1000B21C8) + 36));
  *v38 = v30;
  v38[1] = KeyPath;
  v38[2] = v31;
  v38[3] = v36;
  v38[4] = v34;
  v38[5] = v25;
  v38[6] = v27;
  swift_retain(v31);
  swift_retain(v34);
  return sub_100011484((uint64_t)v10, &qword_1000B21E0);
}

uint64_t sub_10005787C@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _BYTE v20[16];
  _OWORD *v21;
  _OWORD v22[4];

  v19[1] = a1;
  v2 = type metadata accessor for BorderlessButtonStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B21C0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1[1];
  v22[0] = *v1;
  v22[1] = v10;
  v11 = v1[3];
  v22[2] = v1[2];
  v22[3] = v11;
  v12 = v11;
  v21 = v22;
  swift_retain(*((_QWORD *)&v11 + 1));
  v13 = sub_10000A58C(&qword_1000B21C8);
  v14 = sub_10005D9D0();
  v15 = Button.init(action:label:)(v12, *((_QWORD *)&v12 + 1), sub_10005D9C8, v20, v13, v14);
  BorderlessButtonStyle.init()(v15);
  v16 = sub_100011680(&qword_1000B2228, &qword_1000B21C0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v17 = sub_1000073C0(&qword_1000B2230, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  View.buttonStyle<A>(_:)(v5, v6, v2, v16, v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100057A14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _OWORD v25[3];

  v4 = sub_10000A58C(&qword_1000B2648);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000B2638);
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (char *)a1 + *(int *)(type metadata accessor for MediumActionButton(0) + 24);
  v11 = type metadata accessor for Material(0);
  v12 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v6, v10, v11);
  *(_WORD *)&v6[*(int *)(v4 + 56)] = 256;
  if (qword_1000AEDF8 != -1)
    v12 = swift_once(&qword_1000AEDF8, sub_100074B84);
  v13 = qword_1000B7118;
  v14 = static Alignment.center.getter(v12);
  _FrameLayout.init(width:height:alignment:)(v25, v13, 0, v13, 0, v14, v15);
  sub_100011440((uint64_t)v6, (uint64_t)v9, &qword_1000B2648);
  v16 = &v9[*(int *)(v7 + 36)];
  v17 = v25[1];
  *(_OWORD *)v16 = v25[0];
  *((_OWORD *)v16 + 1) = v17;
  *((_OWORD *)v16 + 2) = v25[2];
  v18 = sub_100011484((uint64_t)v6, &qword_1000B2648);
  v19 = static Alignment.center.getter(v18);
  v21 = v20;
  v22 = a2 + *(int *)(sub_10000A58C(&qword_1000B2620) + 36);
  sub_100057BF0(a1, v22);
  v23 = (uint64_t *)(v22 + *(int *)(sub_10000A58C(&qword_1000B2658) + 36));
  *v23 = v19;
  v23[1] = v21;
  return sub_1000112A4((uint64_t)v9, a2, &qword_1000B2638);
}

uint64_t sub_100057BF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[5];

  v30 = a2;
  v3 = sub_10000A58C(&qword_1000B2660);
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B2668);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *a1;
  v10 = a1[1];
  swift_bridgeObjectRetain(v10);
  v12 = Image.init(systemName:)(v9, v10);
  if (qword_1000AEDF0 != -1)
    swift_once(&qword_1000AEDF0, sub_100074A78);
  v13 = qword_1000B7110;
  KeyPath = swift_getKeyPath(&unk_1000842E8, v11);
  v15 = a1[2];
  v17 = swift_getKeyPath(&unk_100084318, v16);
  v18 = type metadata accessor for MediumActionButton(0);
  v19 = (_OWORD *)((char *)a1 + *(int *)(v18 + 28));
  v20 = v19[3];
  v31[2] = v19[2];
  v31[3] = v20;
  v31[4] = v19[4];
  v21 = v19[1];
  v31[0] = *v19;
  v31[1] = v21;
  swift_retain(v13);
  v22 = swift_retain(v15);
  View._colorMatrix(_:)(v31, &type metadata for _BackdropEffectPlaceholder, &protocol witness table for _BackdropEffectPlaceholder, v22);
  sub_100011440((uint64_t)v5, (uint64_t)v8 + *(int *)(v6 + 36), &qword_1000B2660);
  *v8 = v12;
  v8[1] = KeyPath;
  v8[2] = v13;
  v8[3] = v17;
  v8[4] = v15;
  sub_100011484((uint64_t)v5, &qword_1000B2660);
  v23 = (char *)a1 + *(int *)(v18 + 32);
  v24 = sub_10000A58C(&qword_1000B2670);
  v25 = v30;
  v26 = v30 + *(int *)(v24 + 36);
  v27 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, v23, v27);
  return sub_1000112A4((uint64_t)v8, v25, &qword_1000B2668);
}

uint64_t sub_100057DFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  v3 = *v2;
  v4 = v2[1];
  swift_retain(v4);
  v5 = sub_10000A58C(&qword_1000B2620);
  v6 = sub_10006051C();
  return Button.init(action:label:)(v3, v4, sub_100060514, &v8, v5, v6);
}

uint64_t sub_100057E78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[16];
  uint64_t v58;
  __int128 v59;
  uint64_t v60;

  v2 = v1;
  v56 = a1;
  v3 = type metadata accessor for BorderlessButtonStyle(0);
  v48 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B2678);
  v46 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_10000A58C(&qword_1000B2680);
  v49 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10000A58C(&qword_1000B2688);
  __chkstk_darwin(v47);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_10000A58C(&qword_1000B2690);
  __chkstk_darwin(v52);
  v50 = (uint64_t)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000A58C(&qword_1000B2698);
  v54 = *(_QWORD *)(v14 - 8);
  v55 = v14;
  __chkstk_darwin(v14);
  v53 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v2 + 48);
  v16 = *(_QWORD *)(v2 + 56);
  v58 = v2;
  swift_retain(v16);
  v18 = sub_10000A58C(&qword_1000B26A0);
  v19 = sub_10006062C();
  v20 = Button.init(action:label:)(v17, v16, sub_100060624, v57, v18, v19);
  BorderlessButtonStyle.init()(v20);
  v21 = sub_100011680(&qword_1000B26E0, &qword_1000B2678, (uint64_t)&protocol conformance descriptor for Button<A>);
  v22 = sub_1000073C0(&qword_1000B2230, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  View.buttonStyle<A>(_:)(v5, v6, v3, v21, v22);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v6);
  v59 = *(_OWORD *)(v2 + 64);
  sub_10000A58C(&qword_1000AF3F8);
  v23 = State.wrappedValue.getter(&v60);
  if ((_BYTE)v60)
    v24 = 0.9;
  else
    v24 = 1.0;
  v25 = static UnitPoint.center.getter(v23);
  v27 = v26;
  v28 = v49;
  v29 = v51;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v12, v10, v51);
  v30 = &v12[*(int *)(v47 + 36)];
  *(double *)v30 = v24;
  *((double *)v30 + 1) = v24;
  *((double *)v30 + 2) = v25;
  *((_QWORD *)v30 + 3) = v27;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v29);
  v31 = static Animation.spring(response:dampingFraction:blendDuration:)(*(double *)(v2 + 32), *(double *)(v2 + 40), 0.0);
  v32 = swift_allocObject(&unk_1000A1778, 24, 7);
  *(_QWORD *)(v32 + 16) = v31;
  v33 = v50;
  sub_100011440((uint64_t)v12, v50, &qword_1000B2688);
  v34 = v52;
  v35 = (_QWORD *)(v33 + *(int *)(v52 + 36));
  *v35 = sub_100060758;
  v35[1] = v32;
  sub_100011484((uint64_t)v12, &qword_1000B2688);
  v36 = (_OWORD *)swift_allocObject(&unk_1000A17A0, 96, 7);
  v37 = *(_OWORD *)(v2 + 48);
  v36[3] = *(_OWORD *)(v2 + 32);
  v36[4] = v37;
  v36[5] = *(_OWORD *)(v2 + 64);
  v38 = *(_OWORD *)(v2 + 16);
  v36[1] = *(_OWORD *)v2;
  v36[2] = v38;
  v39 = (_OWORD *)swift_allocObject(&unk_1000A17C8, 96, 7);
  v40 = *(_OWORD *)(v2 + 48);
  v39[3] = *(_OWORD *)(v2 + 32);
  v39[4] = v40;
  v39[5] = *(_OWORD *)(v2 + 64);
  v41 = *(_OWORD *)(v2 + 16);
  v39[1] = *(_OWORD *)v2;
  v39[2] = v41;
  sub_100060840((_QWORD *)v2);
  sub_100060840((_QWORD *)v2);
  v42 = sub_100011020(&qword_1000B26E8, &qword_1000B2690, (void (*)(void))sub_1000608A4);
  v43 = v53;
  View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)(sub_1000607F8, v39, sub_100060764, v36, v34, v42, 0.1, 10.0);
  swift_release(v36);
  swift_release(v39);
  sub_100011484(v33, &qword_1000B2690);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v56, v43, v55);
}

uint64_t sub_100058314@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v34[3];
  _OWORD v35[8];

  v4 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10000A58C(&qword_1000B26C8);
  __chkstk_darwin(v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A58C(&qword_1000B26B8);
  __chkstk_darwin(v10);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000AED98 != -1)
    swift_once(&qword_1000AED98, sub_100074930);
  v13 = qword_1000B70B8;
  v14 = (char *)v6 + *(int *)(v4 + 20);
  v15 = enum case for RoundedCornerStyle.continuous(_:);
  v16 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v14, v15, v16);
  *v6 = v13;
  v6[1] = v13;
  v17 = a1[3];
  sub_10000E800((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&v9[*(int *)(v7 + 52)] = v17;
  *(_WORD *)&v9[*(int *)(v7 + 56)] = 256;
  swift_retain(v17);
  v18 = sub_10000E844((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  if (qword_1000AEDA0 != -1)
    v18 = swift_once(&qword_1000AEDA0, sub_100074940);
  v19 = qword_1000B70C0;
  v20 = static Alignment.center.getter(v18);
  _FrameLayout.init(width:height:alignment:)(v34, 0, 1, v19, 0, v20, v21);
  sub_100011440((uint64_t)v9, (uint64_t)v12, &qword_1000B26C8);
  v22 = &v12[*(int *)(v10 + 36)];
  v23 = v34[1];
  *(_OWORD *)v22 = v34[0];
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v34[2];
  v24 = sub_100011484((uint64_t)v9, &qword_1000B26C8);
  v25 = static Alignment.center.getter(v24);
  v27 = v26;
  sub_1000585CC(a1, (uint64_t)v35);
  sub_100011440((uint64_t)v12, a2, &qword_1000B26B8);
  v28 = a2 + *(int *)(sub_10000A58C(&qword_1000B26A0) + 36);
  v29 = v35[5];
  *(_OWORD *)(v28 + 64) = v35[4];
  *(_OWORD *)(v28 + 80) = v29;
  v30 = v35[7];
  *(_OWORD *)(v28 + 96) = v35[6];
  *(_OWORD *)(v28 + 112) = v30;
  v31 = v35[1];
  *(_OWORD *)v28 = v35[0];
  *(_OWORD *)(v28 + 16) = v31;
  v32 = v35[3];
  *(_OWORD *)(v28 + 32) = v35[2];
  *(_OWORD *)(v28 + 48) = v32;
  *(_QWORD *)(v28 + 128) = v25;
  *(_QWORD *)(v28 + 136) = v27;
  return sub_100011484((uint64_t)v12, &qword_1000B26B8);
}

void sub_1000585CC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[7];
  _BYTE v52[7];
  _BYTE v53[7];

  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain(v5);
  v6 = LocalizedStringKey.init(_:)(v4, v5);
  v7 = Text.init(_:tableName:bundle:comment:)(v6);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if (qword_1000AED70 != -1)
    swift_once(&qword_1000AED70, sub_1000748C8);
  v14 = v11 & 1;
  v15 = Text.font(_:)(qword_1000B7090, v7, v9, v14, v13);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  sub_10000E774(v7, v9, v14);
  swift_bridgeObjectRelease(v13);
  v49 = a1[2];
  v48 = v49;
  v22 = swift_retain(v49);
  v23 = Text.foregroundStyle<A>(_:)(&v48, v15, v17, v21, v19, &type metadata for Color, &protocol witness table for Color, v22);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_10000E774(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  v30 = sub_100060994(&v49);
  v31 = static Edge.Set.top.getter(v30);
  if (qword_1000AED80 != -1)
    swift_once(&qword_1000AED80, sub_1000748FC);
  v32.n128_f64[0] = EdgeInsets.init(_all:)(*(double *)&qword_1000B70A0);
  v33 = v32.n128_u64[0];
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v40 = static Edge.Set.bottom.getter(v32);
  if (qword_1000AED88 != -1)
    swift_once(&qword_1000AED88, sub_10007490C);
  v41 = EdgeInsets.init(_all:)(*(double *)&qword_1000B70A8);
  v50 = 0;
  *(_QWORD *)a2 = v23;
  *(_QWORD *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 16) = v27 & 1;
  *(_DWORD *)(a2 + 17) = v48;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v48 + 3);
  *(_QWORD *)(a2 + 24) = v29;
  *(_BYTE *)(a2 + 32) = v31;
  v42 = *(_DWORD *)v53;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v53[3];
  *(_DWORD *)(a2 + 33) = v42;
  *(_QWORD *)(a2 + 40) = v33;
  *(_QWORD *)(a2 + 48) = v35;
  *(_QWORD *)(a2 + 56) = v37;
  *(_QWORD *)(a2 + 64) = v39;
  *(_BYTE *)(a2 + 72) = 0;
  v43 = *(_DWORD *)v52;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)&v52[3];
  *(_DWORD *)(a2 + 73) = v43;
  *(_BYTE *)(a2 + 80) = v40;
  v44 = *(_DWORD *)v51;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)&v51[3];
  *(_DWORD *)(a2 + 81) = v44;
  *(double *)(a2 + 88) = v41;
  *(_QWORD *)(a2 + 96) = v45;
  *(_QWORD *)(a2 + 104) = v46;
  *(_QWORD *)(a2 + 112) = v47;
  *(_BYTE *)(a2 + 120) = v50;
}

uint64_t sub_100058854@<X0>(uint64_t a1@<X8>)
{
  return sub_100057E78(a1);
}

double sub_100058894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double result;
  _QWORD v19[6];

  v4 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  v7 = Image.init(_internalSystemName:)(a1, a2);
  v8 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
  v9 = Color.init(uiColor:)(v8);
  KeyPath = swift_getKeyPath(&unk_100084318, v10);
  v12 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = static Font.system(size:weight:design:)(0, 1, v6, 15.5);
  sub_100011484((uint64_t)v6, &qword_1000AF198);
  v15 = swift_getKeyPath(&unk_1000842E8, v14);
  v19[1] = v7;
  v19[2] = KeyPath;
  v19[3] = v9;
  v19[4] = v15;
  v19[5] = v13;
  v16 = sub_10000A58C(&qword_1000B2418);
  v17 = sub_10005E680();
  View.accessibilityHidden(_:)(1, v16, v17);
  swift_release(v13);
  swift_release(v15);
  swift_release(v9);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

double sub_100058A1C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  v4 = v2[1];
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v6;
  sub_10000A58C(&qword_1000B2410);
  return sub_100058894(v5, v4);
}

uint64_t sub_100058A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for EnvironmentDelegate(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v13 = 0;
  v14 = 0;
  swift_unknownObjectRetain(a1);
  v6 = sub_10000A58C(&qword_1000AF268);
  Published.init(initialValue:)(&v13, v6);
  v7 = (_QWORD *)(v5 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
  *v7 = 0;
  v7[1] = 0xE000000000000000;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
  KeyPath = swift_getKeyPath(&unk_100083F30, v8);
  v11 = swift_getKeyPath(&unk_100083F58, v10);
  v13 = a1;
  v14 = a2;
  swift_retain(v5);
  static Published.subscript.setter(&v13, v5, KeyPath, v11);
  return v5;
}

uint64_t sub_100058B54()
{
  uint64_t *v0;
  int *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v22;

  v1 = (int *)type metadata accessor for RunningCountdownView(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000A58C(&qword_1000AF180);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)v0 + *(int *)(type metadata accessor for TimerRunningCompressedTrailingView(0) + 20);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v3, v7, v8);
  if (qword_1000AED08 != -1)
    swift_once(&qword_1000AED08, sub_100074508);
  v9 = qword_1000B7028;
  v10 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
  v11 = Color.init(uiColor:)(v10);
  v3[v1[5]] = 1;
  *(_QWORD *)&v3[v1[6]] = 0x402F000000000000;
  *(_QWORD *)&v3[v1[7]] = v9;
  *(_QWORD *)&v3[v1[8]] = v11;
  v3[v1[9]] = 0;
  v12 = *v0;
  v13 = v0[1];
  v14 = *((unsigned __int8 *)v0 + 16);
  v15 = type metadata accessor for EnvironmentDelegate(0);
  v16 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
  v17 = StateObject.wrappedValue.getter(v12, v13, v14, v15, v16);
  v18 = static ObservableObject.environmentStore.getter(v15, v16);
  sub_10000E800((uint64_t)v3, (uint64_t)v6, type metadata accessor for RunningCountdownView);
  v19 = (uint64_t *)&v6[*(int *)(v4 + 36)];
  *v19 = v18;
  v19[1] = v17;
  sub_10000E844((uint64_t)v3, type metadata accessor for RunningCountdownView);
  v20 = sub_10005B5D8();
  View.accessibilityHidden(_:)(1, v4, v20);
  return sub_100011484((uint64_t)v6, &qword_1000AF180);
}

uint64_t sub_100058D88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B668, 1);
}

uint64_t sub_100058D98(double a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;

  if (a1 <= 36000.0)
  {
    if (a1 <= 600.0)
      goto LABEL_7;
    v2 = objc_msgSend(*(id *)(v1 + 32), "stringFromTimeInterval:");
    if (!v2)
      goto LABEL_7;
  }
  else
  {
    v2 = objc_msgSend(*(id *)(v1 + 24), "stringFromTimeInterval:");
    if (!v2)
    {
LABEL_7:
      v4 = *(_QWORD *)(v1 + 8);
      swift_bridgeObjectRetain(*(_QWORD *)(v1 + 16));
      return v4;
    }
  }
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v4;
}

uint64_t sub_100058E48()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v6;

  sub_100058D98(*v0);
  v2 = v1;
  if (qword_1000AED08 != -1)
    swift_once(&qword_1000AED08, sub_100074508);
  v3 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
  v6 = Color.init(uiColor:)(v3);
  v4 = sub_10005B594();
  View.accessibilityHidden(_:)(1, &type metadata for PausedCountdownView, v4);
  swift_release(v6);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100058F3C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B640, 1);
}

uint64_t sub_100058F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = sub_10000A58C(&qword_1000B2398);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000A58C(&qword_1000B23A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000A58C(&qword_1000B23A8);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimerSessionEntry(0);
  v11 = *(unsigned __int8 *)(v0 + *(int *)(v10 + 28));
  v12 = static VerticalAlignment.center.getter(v10);
  if (v11 == 2)
  {
    *(_QWORD *)v9 = v12;
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    v13 = sub_10000A58C(&qword_1000B23C8);
    sub_100059D5C((uint64_t)&v9[*(int *)(v13 + 44)]);
    sub_100011440((uint64_t)v9, (uint64_t)v6, &qword_1000B23A8);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v14 = sub_100011680(&qword_1000B23B8, &qword_1000B23A8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v15 = sub_100011680(&qword_1000B23C0, &qword_1000B2398, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v6, v7, v1, v14, v15);
    v16 = (uint64_t)v9;
    v17 = &qword_1000B23A8;
  }
  else
  {
    *(_QWORD *)v3 = v12;
    *((_QWORD *)v3 + 1) = 0;
    v3[16] = 0;
    v18 = sub_10000A58C(&qword_1000B23B0);
    sub_1000591B8(v0, (uint64_t)&v3[*(int *)(v18 + 44)]);
    sub_100011440((uint64_t)v3, (uint64_t)v6, &qword_1000B2398);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v19 = sub_100011680(&qword_1000B23B8, &qword_1000B23A8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v20 = sub_100011680(&qword_1000B23C0, &qword_1000B2398, (uint64_t)&protocol conformance descriptor for HStack<A>);
    _ConditionalContent<>.init(storage:)(v6, v7, v1, v19, v20);
    v16 = (uint64_t)v3;
    v17 = &qword_1000B2398;
  }
  return sub_100011484(v16, v17);
}

uint64_t sub_1000591B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v41 = a2;
  v3 = sub_10000A58C(&qword_1000B0898);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10000A58C(&qword_1000B23D0);
  v6 = __chkstk_darwin(v40);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v11 = sub_10000A58C(&qword_1000B23E0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000A58C(&qword_1000B0890);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000A58C(&qword_1000B23E8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v40 - v21;
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28)) == 1)
  {
    sub_100059538((uint64_t)v16);
    sub_100011440((uint64_t)v16, (uint64_t)v13, &qword_1000B0890);
    v23 = v13;
    v24 = v11;
    v25 = 0;
  }
  else
  {
    sub_100059938((uint64_t)v16);
    sub_100011440((uint64_t)v16, (uint64_t)v13, &qword_1000B0890);
    v23 = v13;
    v24 = v11;
    v25 = 1;
  }
  swift_storeEnumTagMultiPayload(v23, v24, v25);
  v26 = sub_10005E508();
  _ConditionalContent<>.init(storage:)(v13, v14, v14, v26, v26);
  sub_100011484((uint64_t)v16, &qword_1000B0890);
  v27 = sub_10005A424((uint64_t)&unk_1000A1618, (uint64_t)sub_10005E624, 0x6C65636E6143, 0xE600000000000000, (uint64_t)v5);
  v28 = static Edge.Set.leading.getter(v27);
  v29 = EdgeInsets.init(_all:)(10.0);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_100011440((uint64_t)v5, (uint64_t)v8, &qword_1000B0898);
  v36 = &v8[*(int *)(v40 + 36)];
  *v36 = v28;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_100011484((uint64_t)v5, &qword_1000B0898);
  sub_1000112A4((uint64_t)v8, (uint64_t)v10, &qword_1000B23D0);
  sub_100011440((uint64_t)v22, (uint64_t)v20, &qword_1000B23E8);
  sub_100011440((uint64_t)v10, (uint64_t)v8, &qword_1000B23D0);
  v37 = v41;
  sub_100011440((uint64_t)v20, v41, &qword_1000B23E8);
  v38 = sub_10000A58C(&qword_1000B2408);
  sub_100011440((uint64_t)v8, v37 + *(int *)(v38 + 48), &qword_1000B23D0);
  sub_100011484((uint64_t)v10, &qword_1000B23D0);
  sub_100011484((uint64_t)v22, &qword_1000B23E8);
  sub_100011484((uint64_t)v8, &qword_1000B23D0);
  return sub_100011484((uint64_t)v20, &qword_1000B23E8);
}

uint64_t sub_100059538@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)();
  uint64_t v61;

  v2 = v1;
  v52 = a1;
  v53 = type metadata accessor for ContentShapeKinds(0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimerControlsCustomView(0);
  v47 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v47 + 64);
  __chkstk_darwin(v4);
  v6 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10000A58C(&qword_1000AF1D0);
  v9 = __chkstk_darwin(v49);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v48 = (char *)&v46 - v13;
  if (qword_1000AED10 != -1)
    v12 = swift_once(&qword_1000AED10, sub_100074524);
  v14 = qword_1000B7030;
  v15 = static Font.Weight.medium.getter(v12);
  v16 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  v17 = static Font.system(size:weight:design:)(*(_QWORD *)&v15, 0, v8, 25.0);
  sub_100011484((uint64_t)v8, &qword_1000AF198);
  v18 = (_QWORD *)(v2 + *(int *)(v4 + 24));
  v19 = v18[3];
  v20 = v18[4];
  sub_10000E784(v18, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
  v23 = v18[3];
  v22 = v18[4];
  sub_10000E784(v18, v23);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v23, v22);
  sub_10000E800(v2, (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimerControlsCustomView);
  v25 = *(unsigned __int8 *)(v47 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_1000A15F0, v26 + v5, v25 | 7);
  sub_10002B89C((uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, type metadata accessor for TimerControlsCustomView);
  v54 = v14;
  v55 = v17;
  v56 = 0x6C69662E79616C70;
  v57 = 0xE90000000000006CLL;
  v58 = v21;
  v59 = v24;
  v60 = sub_10005E614;
  v61 = v27;
  v28 = LocalizedStringKey.init(stringLiteral:)(0x656D75736552, 0xE600000000000000);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = sub_10000E8C4();
  View.accessibilityLabel(_:)(v28, v30, v32 & 1, v34, &type metadata for SmallActionButton, v35);
  swift_release(v27);
  swift_release(v24);
  swift_release(v21);
  swift_bridgeObjectRelease(0xE90000000000006CLL);
  swift_release(v17);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v30);
  v36 = (uint64_t)v48;
  ModifiedContent<>.accessibilityIdentifier(_:)(0x656D75736552, 0xE600000000000000, v49);
  v37 = sub_100011484((uint64_t)v11, &qword_1000AF1D0);
  v38 = v50;
  static ContentShapeKinds.accessibility.getter(v37);
  v39 = sub_10000A58C(&qword_1000B0890);
  v40 = v52;
  v41 = (_BYTE *)(v52 + *(int *)(v39 + 36));
  v42 = sub_10000A58C(&qword_1000B08C0);
  v43 = v51;
  v44 = v53;
  (*(void (**)(_BYTE *, char *, uint64_t))(v51 + 16))(&v41[*(int *)(v42 + 40)], v38, v53);
  *v41 = 0;
  sub_100011440(v36, v40, &qword_1000AF1D0);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v44);
  return sub_100011484(v36, &qword_1000AF1D0);
}

uint64_t sub_100059938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)();
  uint64_t v61;

  v2 = v1;
  v52 = a1;
  v53 = type metadata accessor for ContentShapeKinds(0);
  v51 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimerControlsCustomView(0);
  v47 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v47 + 64);
  __chkstk_darwin(v4);
  v6 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10000A58C(&qword_1000AF1D0);
  v9 = __chkstk_darwin(v49);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v48 = (char *)&v46 - v13;
  if (qword_1000AED10 != -1)
    v12 = swift_once(&qword_1000AED10, sub_100074524);
  v14 = qword_1000B7030;
  v15 = static Font.Weight.medium.getter(v12);
  v16 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  v17 = static Font.system(size:weight:design:)(*(_QWORD *)&v15, 0, v8, 25.0);
  sub_100011484((uint64_t)v8, &qword_1000AF198);
  v18 = (_QWORD *)(v2 + *(int *)(v4 + 24));
  v19 = v18[3];
  v20 = v18[4];
  sub_10000E784(v18, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
  v23 = v18[3];
  v22 = v18[4];
  sub_10000E784(v18, v23);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 32))(v23, v22);
  sub_10000E800(v2, (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimerControlsCustomView);
  v25 = *(unsigned __int8 *)(v47 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = swift_allocObject(&unk_1000A1640, v26 + v5, v25 | 7);
  sub_10002B89C((uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v26, type metadata accessor for TimerControlsCustomView);
  v54 = v14;
  v55 = v17;
  v56 = 0x69662E6573756170;
  v57 = 0xEA00000000006C6CLL;
  v58 = v21;
  v59 = v24;
  v60 = sub_10005E634;
  v61 = v27;
  v28 = LocalizedStringKey.init(stringLiteral:)(0x6573756150, 0xE500000000000000);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = sub_10000E8C4();
  View.accessibilityLabel(_:)(v28, v30, v32 & 1, v34, &type metadata for SmallActionButton, v35);
  swift_release(v27);
  swift_release(v24);
  swift_release(v21);
  swift_bridgeObjectRelease(0xEA00000000006C6CLL);
  swift_release(v17);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v30);
  v36 = (uint64_t)v48;
  ModifiedContent<>.accessibilityIdentifier(_:)(0x6573756150, 0xE500000000000000, v49);
  v37 = sub_100011484((uint64_t)v11, &qword_1000AF1D0);
  v38 = v50;
  static ContentShapeKinds.accessibility.getter(v37);
  v39 = sub_10000A58C(&qword_1000B0890);
  v40 = v52;
  v41 = (_BYTE *)(v52 + *(int *)(v39 + 36));
  v42 = sub_10000A58C(&qword_1000B08C0);
  v43 = v51;
  v44 = v53;
  (*(void (**)(_BYTE *, char *, uint64_t))(v51 + 16))(&v41[*(int *)(v42 + 40)], v38, v53);
  *v41 = 0;
  sub_100011440(v36, v40, &qword_1000AF1D0);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v44);
  return sub_100011484(v36, &qword_1000AF1D0);
}

uint64_t sub_100059D38@<X0>(uint64_t a1@<X8>)
{
  return sub_10005A424((uint64_t)&unk_1000A1618, (uint64_t)sub_10005E624, 0x6C65636E6143, 0xE600000000000000, a1);
}

uint64_t sub_100059D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v1 = sub_10000A58C(&qword_1000B0898);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000A58C(&qword_1000B23D0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v29 - v8;
  v10 = sub_10000A58C(&qword_1000B0890);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  sub_100059FC0((uint64_t)&v29 - v14);
  v16 = sub_10005A424((uint64_t)&unk_1000A15A0, (uint64_t)sub_10005E41C, 0x7373696D736944, 0xE700000000000000, (uint64_t)v3);
  v17 = static Edge.Set.leading.getter(v16);
  v18 = EdgeInsets.init(_all:)(10.0);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  sub_100011440((uint64_t)v3, (uint64_t)v7, &qword_1000B0898);
  v25 = &v7[*(int *)(v4 + 36)];
  *v25 = v17;
  *((double *)v25 + 1) = v18;
  *((_QWORD *)v25 + 2) = v20;
  *((_QWORD *)v25 + 3) = v22;
  *((_QWORD *)v25 + 4) = v24;
  v25[40] = 0;
  sub_100011484((uint64_t)v3, &qword_1000B0898);
  sub_1000112A4((uint64_t)v7, (uint64_t)v9, &qword_1000B23D0);
  sub_100011440((uint64_t)v15, (uint64_t)v13, &qword_1000B0890);
  sub_100011440((uint64_t)v9, (uint64_t)v7, &qword_1000B23D0);
  v26 = v30;
  sub_100011440((uint64_t)v13, v30, &qword_1000B0890);
  v27 = sub_10000A58C(&qword_1000B23D8);
  sub_100011440((uint64_t)v7, v26 + *(int *)(v27 + 48), &qword_1000B23D0);
  sub_100011484((uint64_t)v9, &qword_1000B23D0);
  sub_100011484((uint64_t)v15, &qword_1000B0890);
  sub_100011484((uint64_t)v7, &qword_1000B23D0);
  return sub_100011484((uint64_t)v13, &qword_1000B0890);
}

uint64_t sub_100059FC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)();
  uint64_t v62;

  v53 = a1;
  v54 = type metadata accessor for ContentShapeKinds(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v51 = (char *)&v47 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for TimerControlsCustomView(0);
  v47 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v47 + 64);
  __chkstk_darwin(v2);
  v4 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v4);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10000A58C(&qword_1000AF1D0);
  v7 = __chkstk_darwin(v50);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v48 = (char *)&v47 - v11;
  if (qword_1000AED10 != -1)
    v10 = swift_once(&qword_1000AED10, sub_100074524);
  v12 = qword_1000B7030;
  v13 = static Font.Weight.semibold.getter(v10);
  v14 = enum case for Font.Design.rounded(_:);
  v15 = type metadata accessor for Font.Design(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v6, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v6, 0, 1, v15);
  v17 = static Font.system(size:weight:design:)(*(_QWORD *)&v13, 0, v6, 25.0);
  sub_100011484((uint64_t)v6, &qword_1000AF198);
  v18 = v49;
  v19 = (_QWORD *)(v49 + *(int *)(v2 + 24));
  v20 = v19[3];
  v21 = v19[4];
  sub_10000E784(v19, v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
  v24 = v19[3];
  v23 = v19[4];
  sub_10000E784(v19, v24);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 32))(v24, v23);
  sub_10000E800(v18, (uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimerControlsCustomView);
  v26 = *(unsigned __int8 *)(v47 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = swift_allocObject(&unk_1000A15C8, v27 + v3, v26 | 7);
  sub_10002B89C((uint64_t)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27, type metadata accessor for TimerControlsCustomView);
  v55 = v12;
  v56 = v17;
  v57 = 0x6C632E776F727261;
  v58 = 0xEF657369776B636FLL;
  v59 = v22;
  v60 = v25;
  v61 = sub_10005E4FC;
  v62 = v28;
  v29 = LocalizedStringKey.init(stringLiteral:)(0x746165706552, 0xE600000000000000);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v36 = sub_10000E8C4();
  View.accessibilityLabel(_:)(v29, v31, v33 & 1, v35, &type metadata for SmallActionButton, v36);
  swift_release(v28);
  swift_release(v25);
  swift_release(v22);
  swift_bridgeObjectRelease(0xEF657369776B636FLL);
  swift_release(v17);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v31);
  v37 = (uint64_t)v48;
  ModifiedContent<>.accessibilityIdentifier(_:)(0x746165706552, 0xE600000000000000, v50);
  v38 = sub_100011484((uint64_t)v9, &qword_1000AF1D0);
  v39 = v51;
  static ContentShapeKinds.accessibility.getter(v38);
  v40 = sub_10000A58C(&qword_1000B0890);
  v41 = v53;
  v42 = (_BYTE *)(v53 + *(int *)(v40 + 36));
  v43 = sub_10000A58C(&qword_1000B08C0);
  v44 = v52;
  v45 = v54;
  (*(void (**)(_BYTE *, char *, uint64_t))(v52 + 16))(&v42[*(int *)(v43 + 40)], v39, v54);
  *v42 = 0;
  sub_100011440(v37, v41, &qword_1000AF1D0);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v39, v45);
  return sub_100011484(v37, &qword_1000AF1D0);
}

uint64_t sub_10005A3FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10005A424((uint64_t)&unk_1000A15A0, (uint64_t)sub_10005E41C, 0x7373696D736944, 0xE700000000000000, a1);
}

uint64_t sub_10005A424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v75 = a3;
  v76 = a4;
  v73 = a2;
  v67 = a1;
  v79 = a5;
  v80 = type metadata accessor for ContentShapeKinds(0);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v77 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v6);
  v72 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for BlendMode(0);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v65 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimerControlsCustomView(0);
  v64 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v64 + 64);
  __chkstk_darwin(v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v12);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_10000A58C(&qword_1000AF1A0);
  __chkstk_darwin(v81);
  v16 = (uint64_t *)((char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = sub_10000A58C(&qword_1000AF1C0);
  v17 = __chkstk_darwin(v70);
  v68 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v74 = (char *)&v63 - v20;
  if (qword_1000AED10 != -1)
    v19 = swift_once(&qword_1000AED10, sub_100074524);
  v21 = qword_1000B7030;
  v22 = static Font.Weight.medium.getter(v19);
  v23 = enum case for Font.Design.rounded(_:);
  v24 = type metadata accessor for Font.Design(0);
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v14, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v14, 0, 1, v24);
  v26 = static Font.system(size:weight:design:)(*(_QWORD *)&v22, 0, v14, 23.0);
  sub_100011484((uint64_t)v14, &qword_1000AF198);
  v27 = v66;
  v28 = (_QWORD *)(v66 + *(int *)(v9 + 24));
  v29 = v28[3];
  v30 = v28[4];
  sub_10000E784(v28, v29);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 56))(v29, v30);
  v33 = v28[3];
  v32 = v28[4];
  sub_10000E784(v28, v33);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 80))(v33, v32);
  sub_10000E800(v27, (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TimerControlsCustomView);
  v35 = *(unsigned __int8 *)(v64 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = swift_allocObject(v67, v36 + v10, v35 | 7);
  sub_10002B89C((uint64_t)v11, v37 + v36, type metadata accessor for TimerControlsCustomView);
  v38 = v69;
  v39 = v65;
  v40 = v71;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v65, enum case for BlendMode.plusLighter(_:), v71);
  v41 = (uint64_t)v72;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v72, v39, v40);
  sub_10000E800(v41, (uint64_t)v16 + *(int *)(v81 + 36), (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *v16 = v21;
  v16[1] = v26;
  v16[2] = 0x6B72616D78;
  v16[3] = 0xE500000000000000;
  v16[4] = v31;
  v42 = v73;
  v16[5] = v34;
  v16[6] = v42;
  v16[7] = v37;
  swift_retain(v26);
  swift_bridgeObjectRetain(0xE500000000000000);
  swift_retain(v31);
  swift_retain(v34);
  swift_retain(v37);
  sub_10000E844(v41, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  swift_release(v37);
  swift_release(v34);
  swift_release(v31);
  swift_bridgeObjectRelease(0xE500000000000000);
  swift_release(v26);
  v44 = v75;
  v43 = v76;
  v45 = LocalizedStringKey.init(stringLiteral:)(v75, v76);
  v47 = v46;
  LOBYTE(v34) = v48;
  v50 = v49;
  v51 = sub_100011020((unint64_t *)&qword_1000AF1A8, &qword_1000AF1A0, (void (*)(void))sub_10000E8C4);
  v52 = (uint64_t)v68;
  View.accessibilityLabel(_:)(v45, v47, v34 & 1, v50, v81, v51);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v47);
  sub_100011484((uint64_t)v16, &qword_1000AF1A0);
  v53 = (uint64_t)v74;
  ModifiedContent<>.accessibilityIdentifier(_:)(v44, v43, v70);
  v54 = sub_100011484(v52, &qword_1000AF1C0);
  v55 = v77;
  static ContentShapeKinds.accessibility.getter(v54);
  v56 = sub_10000A58C(&qword_1000B0898);
  v57 = v79;
  v58 = (_BYTE *)(v79 + *(int *)(v56 + 36));
  v59 = sub_10000A58C(&qword_1000B08C0);
  v60 = v78;
  v61 = v80;
  (*(void (**)(_BYTE *, char *, uint64_t))(v78 + 16))(&v58[*(int *)(v59 + 40)], v55, v80);
  *v58 = 0;
  sub_100011440(v53, v57, &qword_1000AF1C0);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v55, v61);
  return sub_100011484(v53, &qword_1000AF1C0);
}

uint64_t sub_10005A9C4(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v4;

  v4 = type metadata accessor for TimerControlsCustomView(0);
  sub_10000E784((_QWORD *)((char *)a1 + *(int *)(v4 + 20)), *(_QWORD *)((char *)a1 + *(int *)(v4 + 20) + 24));
  return a2(*a1, a1[1]);
}

uint64_t sub_10005AA10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v5[2];

  v0 = type metadata accessor for EnvironmentDelegate(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v5[0] = 0;
  v5[1] = 0;
  v2 = sub_10000A58C(&qword_1000AF268);
  Published.init(initialValue:)(v5, v2);
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_countdownValue);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10ClockAngel19EnvironmentDelegate_apertureNeedsResize) = 0;
  return v1;
}

uint64_t sub_10005AA98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _OWORD v25[3];

  v3 = sub_10000A58C(&qword_1000B1F50);
  __chkstk_darwin(v3);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000A58C(&qword_1000B1F58);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static VerticalAlignment.firstTextBaseline.getter(v7);
  *((_QWORD *)v5 + 1) = 0x4014000000000000;
  v5[16] = 0;
  v10 = sub_10000A58C(&qword_1000B1F60);
  v11 = sub_10005AC6C(v1, (uint64_t *)&v5[*(int *)(v10 + 44)]);
  v12 = static Alignment.trailing.getter(v11);
  _FrameLayout.init(width:height:alignment:)(v25, 0, 1, 0, 1, v12, v13);
  sub_100011440((uint64_t)v5, (uint64_t)v9, &qword_1000B1F50);
  v14 = &v9[*(int *)(v6 + 36)];
  v15 = v25[1];
  *(_OWORD *)v14 = v25[0];
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v25[2];
  sub_100011484((uint64_t)v5, &qword_1000B1F50);
  v16 = *(_QWORD *)v1;
  v17 = *(_QWORD *)(v1 + 8);
  v18 = *(unsigned __int8 *)(v1 + 16);
  v19 = type metadata accessor for EnvironmentDelegate(0);
  v20 = sub_1000073C0(&qword_1000AF188, type metadata accessor for EnvironmentDelegate, (uint64_t)&unk_100083EF4);
  v21 = StateObject.wrappedValue.getter(v16, v17, v18, v19, v20);
  v22 = static ObservableObject.environmentStore.getter(v19, v20);
  sub_100011440((uint64_t)v9, a1, &qword_1000B1F58);
  v23 = (uint64_t *)(a1 + *(int *)(sub_10000A58C(&qword_1000B1F68) + 36));
  *v23 = v22;
  v23[1] = v21;
  return sub_100011484((uint64_t)v9, &qword_1000B1F58);
}

uint64_t sub_10005AC6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t countAndFlagsBits;
  void *object;
  BOOL v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD v30[2];
  Swift::String v31;

  v4 = sub_10000A58C(&qword_1000B1F70);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v30 - v8;
  v10 = type metadata accessor for TimerCountdownCustomView(0);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (*(_BYTE *)(a1 + *(int *)(v10 + 24)) == 1)
  {
    v16 = a1 + *(int *)(v10 + 20);
    countAndFlagsBits = *(_QWORD *)(v16 + 16);
    object = *(void **)(v16 + 24);
    v19 = countAndFlagsBits == 0x5F544E4552525543 && object == (void *)0xED000052454D4954;
    if (v19
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), 0x5F544E4552525543, 0xED000052454D4954, 0) & 1) != 0)
    {
      v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v31._object = (void *)0x8000000100085D60;
      v21._countAndFlagsBits = 0x72656D6954;
      v21._object = (void *)0xE500000000000000;
      v22._countAndFlagsBits = 0;
      v22._object = (void *)0xE000000000000000;
      v31._countAndFlagsBits = 0xD000000000000013;
      v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, (Swift::String_optional)0, (NSBundle)v20, v22, v31);
      countAndFlagsBits = v23._countAndFlagsBits;
      object = v23._object;

    }
    else
    {
      swift_bridgeObjectRetain(object);
    }
    v30[0] = countAndFlagsBits;
    v30[1] = object;
    v24 = sub_10000EB0C();
    v11 = Text.init<A>(_:)(v30, &type metadata for String, v24);
    v12 = v25;
    v14 = v26;
    v13 = v27 & 1;
    if (qword_1000AED00 != -1)
      swift_once(&qword_1000AED00, sub_1000744F8);
    v15 = qword_1000B7020;
    swift_retain(qword_1000B7020);
  }
  sub_10005AF20(a1, (uint64_t)v9);
  sub_100011440((uint64_t)v9, (uint64_t)v7, &qword_1000B1F70);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  a2[4] = v15;
  v28 = sub_10000A58C(&qword_1000B1F78);
  sub_100011440((uint64_t)v7, (uint64_t)a2 + *(int *)(v28 + 48), &qword_1000B1F70);
  sub_10005B508(v11, v12, v13, v14, v15);
  sub_100011484((uint64_t)v9, &qword_1000B1F70);
  sub_100011484((uint64_t)v7, &qword_1000B1F70);
  return sub_10005B544(v11, v12, v13, v14, v15);
}

uint64_t sub_10005AF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = a2;
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for RunningCountdownView(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v39 - v11;
  v39[0] = sub_10000A58C(&qword_1000B1F80);
  __chkstk_darwin(v39[0]);
  v14 = (_QWORD *)((char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for TimerCountdownCustomView(0);
  v16 = a1 + *(int *)(v15 + 20);
  v17 = (int *)type metadata accessor for TimerSessionEntry(0);
  if (*(_BYTE *)(v16 + v17[7]) == 1)
  {
    v18 = (uint64_t *)(v16 + v17[8]);
    v19 = *v18;
    v20 = v18[1];
    if ((*(_BYTE *)(a1 + *(int *)(v15 + 24)) & 1) != 0)
    {
      v21 = qword_1000AECF8;
      swift_bridgeObjectRetain(v20);
      if (v21 != -1)
        swift_once(&qword_1000AECF8, sub_1000744DC);
      v22 = &qword_1000B7018;
      v23 = 0x4048000000000000;
    }
    else
    {
      v27 = qword_1000AED20;
      swift_bridgeObjectRetain(v20);
      if (v27 != -1)
        swift_once(&qword_1000AED20, sub_100074574);
      v23 = qword_1000B7040;
      if (qword_1000AED28 != -1)
        swift_once(&qword_1000AED28, sub_100074588);
      v22 = &qword_1000B7048;
    }
    v28 = *v22;
    v29 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
    v30 = Color.init(uiColor:)(v29);
    *v14 = v19;
    v14[1] = v20;
    v14[2] = v23;
    v14[3] = v28;
    v14[4] = v30;
    swift_storeEnumTagMultiPayload(v14, v39[0], 0);
    v31 = sub_10005B594();
    v32 = sub_1000073C0(&qword_1000AF258, type metadata accessor for RunningCountdownView, (uint64_t)&unk_1000841F8);
    return _ConditionalContent<>.init(storage:)(v14, &type metadata for PausedCountdownView, v7, v31, v32);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v16 + v17[6], v3);
    v24 = *(unsigned __int8 *)(a1 + *(int *)(v15 + 24));
    if (v24 == 1)
    {
      if (qword_1000AECF8 != -1)
        swift_once(&qword_1000AECF8, sub_1000744DC);
      v25 = &qword_1000B7018;
      v26 = 0x4048000000000000;
    }
    else
    {
      if (qword_1000AED20 != -1)
        swift_once(&qword_1000AED20, sub_100074574);
      v26 = qword_1000B7040;
      if (qword_1000AED28 != -1)
        swift_once(&qword_1000AED28, sub_100074588);
      v25 = &qword_1000B7048;
    }
    v34 = *v25;
    v35 = objc_msgSend((id)objc_opt_self(ClockAngelUtilities), "mtOrange");
    v36 = Color.init(uiColor:)(v35);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
    v10[v7[5]] = 0;
    *(_QWORD *)&v10[v7[6]] = v26;
    *(_QWORD *)&v10[v7[7]] = v34;
    *(_QWORD *)&v10[v7[8]] = v36;
    v10[v7[9]] = v24 ^ 1;
    sub_10002B89C((uint64_t)v10, (uint64_t)v12, type metadata accessor for RunningCountdownView);
    sub_10000E800((uint64_t)v12, (uint64_t)v14, type metadata accessor for RunningCountdownView);
    swift_storeEnumTagMultiPayload(v14, v39[0], 1);
    v37 = sub_10005B594();
    v38 = sub_1000073C0(&qword_1000AF258, type metadata accessor for RunningCountdownView, (uint64_t)&unk_1000841F8);
    _ConditionalContent<>.init(storage:)(v14, &type metadata for PausedCountdownView, v7, v37, v38);
    return sub_10000E844((uint64_t)v12, type metadata accessor for RunningCountdownView);
  }
}

uint64_t sub_10005B36C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v8 = (void *)objc_opt_self(ClockAngelUtilities);
  sub_10000E764(v3, v4, v5);
  swift_bridgeObjectRetain(v7);
  v9 = objc_msgSend(v8, "mtOrange", swift_retain(v6).n128_f64[0]);
  result = Color.init(uiColor:)(v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_10005B410(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B618, 1);
}

uint64_t sub_10005B420(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B5F0, 1);
}

uint64_t type metadata accessor for TimerControlsCustomView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B2090, (uint64_t)&nominal type descriptor for TimerControlsCustomView);
}

uint64_t sub_10005B444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_BYTE *)(v1 + 56);
  v6 = Text.font(_:)(*(_QWORD *)(v1 + 32), *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24));
  v8 = v7;
  v10 = v9;
  v12 = v11;
  KeyPath = swift_getKeyPath(&unk_100084378, v7);
  v15 = swift_getKeyPath(&unk_1000843A8, v14);
  v17 = swift_getKeyPath(&unk_100084318, v16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = v10 & 1;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = 0x3FEB333333333333;
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = v3;
  return swift_retain(v3);
}

double sub_10005B508(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a4)
  {
    sub_10000E764(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  }
  return result;
}

uint64_t sub_10005B544(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_10000E774(result, a2, a3 & 1);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t type metadata accessor for RunningCountdownView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B2128, (uint64_t)&nominal type descriptor for RunningCountdownView);
}

unint64_t sub_10005B594()
{
  unint64_t result;

  result = qword_1000B1F88;
  if (!qword_1000B1F88)
  {
    result = swift_getWitnessTable(&unk_100084248, &type metadata for PausedCountdownView);
    atomic_store(result, (unint64_t *)&qword_1000B1F88);
  }
  return result;
}

unint64_t sub_10005B5D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B1F90;
  if (!qword_1000B1F90)
  {
    v1 = sub_10000E880(&qword_1000AF180);
    sub_1000073C0(&qword_1000AF258, type metadata accessor for RunningCountdownView, (uint64_t)&unk_1000841F8);
    sub_100011680(&qword_1000AF390, &qword_1000AF398, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1F90);
  }
  return result;
}

uint64_t sub_10005B674()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_10005B694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005B6A8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

uint64_t sub_10005B6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

double sub_10005B724@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_100083F30, a2);
  v7 = swift_getKeyPath(&unk_100083F58, v6);
  static Published.subscript.getter(&v9, v4, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  result = *(double *)&v9;
  *a3 = v9;
  return result;
}

uint64_t sub_10005B7A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100083F30, a2);
  v7 = swift_getKeyPath(&unk_100083F58, v6);
  v9[0] = v2;
  v9[1] = v3;
  swift_unknownObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v9, v4, KeyPath, v7);
}

ValueMetadata *type metadata accessor for LowLuminanceSessionUiConfig()
{
  return &type metadata for LowLuminanceSessionUiConfig;
}

_QWORD *sub_10005B850(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v33);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = (int *)type metadata accessor for TimerSessionEntry(0);
    v10 = v9[6];
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13);
    *((_BYTE *)v4 + v9[7]) = *((_BYTE *)a2 + v9[7]);
    v15 = v9[8];
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v9[9];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v20[8] = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v22 = v9[10];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *(_QWORD *)((char *)v4 + v9[11]) = *(_QWORD *)((char *)a2 + v9[11]);
    v25 = a3[5];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_OWORD *)((char *)a2 + v25 + 24);
    *(_OWORD *)((char *)v4 + v25 + 24) = v28;
    v29 = v28;
    v30 = **(void (***)(char *, char *, uint64_t))(v28 - 8);
    swift_bridgeObjectRetain(v18);
    v30(v26, v27, v29);
    v31 = a3[6];
    v32 = *(_OWORD *)((char *)a2 + v31 + 24);
    *(_OWORD *)((char *)v4 + v31 + 24) = v32;
    (**(void (***)(void))(v32 - 8))();
    *(_QWORD *)((char *)v4 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  }
  return v4;
}

_QWORD *sub_10005B9E8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  __int128 v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = (int *)type metadata accessor for TimerSessionEntry(0);
  v9 = v8[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v13(v10, v11, v12);
  *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
  v14 = v8[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v8[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = v8[10];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
  v24 = a3[5];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_OWORD *)((char *)a2 + v24 + 24);
  *(_OWORD *)((char *)a1 + v24 + 24) = v27;
  v28 = v27;
  v29 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
  swift_bridgeObjectRetain(v17);
  v29(v25, v26, v28);
  v30 = a3[6];
  v31 = *(_OWORD *)((char *)a2 + v30 + 24);
  *(_OWORD *)((char *)a1 + v30 + 24) = v31;
  (**(void (***)(void))(v31 - 8))();
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_10005BB54(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  v11 = v10[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
  v15 = v10[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = v10[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = v10[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  *(_QWORD *)((char *)a1 + v10[11]) = *(_QWORD *)((char *)a2 + v10[11]);
  sub_100007D18((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]));
  sub_100007D18((_QWORD *)((char *)a1 + a3[6]), (_QWORD *)((char *)a2 + a3[6]));
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_OWORD *sub_10005BCAC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  v12 = v7[9];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v13[8] = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = v7[10];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
  v18 = a3[5];
  v19 = a3[6];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  v23 = (char *)a1 + v19;
  v24 = (char *)a2 + v19;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_10005BDC0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  v11 = v10[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
  v15 = v10[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v10[9];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = v10[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v25[8] = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_QWORD *)((char *)a1 + v10[11]) = *(_QWORD *)((char *)a2 + v10[11]);
  v27 = a3[5];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  sub_100007CF0((_QWORD *)((char *)a1 + v27));
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  sub_100007CF0((_QWORD *)((char *)a1 + v31));
  v34 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v34;
  *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_10005BF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005BF1C);
}

uint64_t sub_10005BF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005BF2C);
}

uint64_t type metadata accessor for SessionsTimerPlatter(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B1FF8, (uint64_t)&nominal type descriptor for SessionsTimerPlatter);
}

uint64_t sub_10005BF44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for TimerSessionEntry(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_10005BFC4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v33);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = (int *)type metadata accessor for TimerSessionEntry(0);
    v10 = v9[6];
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13);
    *((_BYTE *)v4 + v9[7]) = *((_BYTE *)a2 + v9[7]);
    v15 = v9[8];
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v9[9];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v20[8] = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v22 = v9[10];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *(_QWORD *)((char *)v4 + v9[11]) = *(_QWORD *)((char *)a2 + v9[11]);
    v25 = *(int *)(a3 + 20);
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_OWORD *)((char *)a2 + v25 + 24);
    *(_OWORD *)((char *)v4 + v25 + 24) = v28;
    v29 = v28;
    v30 = **(void (***)(char *, char *, uint64_t))(v28 - 8);
    swift_bridgeObjectRetain(v18);
    v30(v26, v27, v29);
    v31 = *(int *)(a3 + 24);
    v32 = *(_OWORD *)((char *)a2 + v31 + 24);
    *(_OWORD *)((char *)v4 + v31 + 24) = v32;
    (**(void (***)(void))(v32 - 8))();
  }
  return v4;
}

uint64_t sub_10005C150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = type metadata accessor for TimerSessionEntry(0);
  v5 = a1 + *(int *)(v4 + 24);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v4 + 32) + 8));
  sub_100007CF0((_QWORD *)(a1 + *(int *)(a2 + 20)));
  return sub_100007CF0((_QWORD *)(a1 + *(int *)(a2 + 24)));
}

_QWORD *sub_10005C1DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  __int128 v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = (int *)type metadata accessor for TimerSessionEntry(0);
  v9 = v8[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v13(v10, v11, v12);
  *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
  v14 = v8[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v8[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = v8[10];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
  v24 = *(int *)(a3 + 20);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_OWORD *)((char *)a2 + v24 + 24);
  *(_OWORD *)((char *)a1 + v24 + 24) = v27;
  v28 = v27;
  v29 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
  swift_bridgeObjectRetain(v17);
  v29(v25, v26, v28);
  v30 = *(int *)(a3 + 24);
  v31 = *(_OWORD *)((char *)a2 + v30 + 24);
  *(_OWORD *)((char *)a1 + v30 + 24) = v31;
  (**(void (***)(void))(v31 - 8))();
  return a1;
}

_QWORD *sub_10005C33C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  v11 = v10[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
  v15 = v10[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = v10[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = v10[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  *(_QWORD *)((char *)a1 + v10[11]) = *(_QWORD *)((char *)a2 + v10[11]);
  sub_100007D18((_QWORD *)((char *)a1 + *(int *)(a3 + 20)), (_QWORD *)((char *)a2 + *(int *)(a3 + 20)));
  sub_100007D18((_QWORD *)((char *)a1 + *(int *)(a3 + 24)), (_QWORD *)((char *)a2 + *(int *)(a3 + 24)));
  return a1;
}

_OWORD *sub_10005C488(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  v12 = v7[9];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v13[8] = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = v7[10];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
  v18 = *(int *)(a3 + 20);
  v19 = *(int *)(a3 + 24);
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  v23 = (char *)a1 + v19;
  v24 = (char *)a2 + v19;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  return a1;
}

_QWORD *sub_10005C590(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  v11 = v10[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
  v15 = v10[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v10[9];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = v10[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v25[8] = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_QWORD *)((char *)a1 + v10[11]) = *(_QWORD *)((char *)a2 + v10[11]);
  v27 = *(int *)(a3 + 20);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  sub_100007CF0((_QWORD *)((char *)a1 + v27));
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  v31 = *(int *)(a3 + 24);
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  sub_100007CF0((_QWORD *)((char *)a1 + v31));
  v34 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v34;
  *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
  return a1;
}

uint64_t sub_10005C6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005C6E0);
}

uint64_t sub_10005C6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for TimerSessionEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10005C764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005C770);
}

uint64_t sub_10005C774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TimerSessionEntry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_10005C7F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for TimerSessionEntry(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for PausedCountdownView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for PausedCountdownView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for PausedCountdownView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for PausedCountdownView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PausedCountdownView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PausedCountdownView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PausedCountdownView()
{
  return &type metadata for PausedCountdownView;
}

double destroy for CountdownLabelCustomView(uint64_t a1)
{
  double result;

  sub_10000E774(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 40)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000E764(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_retain(v10);
  return a1;
}

uint64_t assignWithCopy for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10000E764(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10000E774(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  return a1;
}

__n128 initializeWithTake for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CountdownLabelCustomView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10000E774(v5, v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for CountdownLabelCustomView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CountdownLabelCustomView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CountdownLabelCustomView()
{
  return &type metadata for CountdownLabelCustomView;
}

uint64_t destroy for SmallActionButton(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for SmallActionButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v6;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v8);
  swift_retain(v6);
  return a1;
}

_QWORD *assignWithCopy for SmallActionButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v11);
  v13 = a2[6];
  v12 = a2[7];
  v14 = a1[7];
  a1[6] = v13;
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v14);
  return a1;
}

__n128 initializeWithTake for SmallActionButton(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for SmallActionButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *(_QWORD *)a2;
  v4 = a1[1];
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  swift_release(a1[5]);
  v6 = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  v7 = a1[7];
  a1[7] = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SmallActionButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SmallActionButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SmallActionButton()
{
  return &type metadata for SmallActionButton;
}

_QWORD *initializeBufferWithCopyOfBuffer for CompressedGlyphLeadingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for CompressedGlyphLeadingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for CompressedGlyphLeadingView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for CompressedGlyphLeadingView()
{
  return &type metadata for CompressedGlyphLeadingView;
}

_QWORD *sub_10005D044(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  swift_retain(v10);
  return a1;
}

uint64_t sub_10005D0F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_retain(v9);
  return a1;
}

uint64_t sub_10005D17C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v7 = a3[8];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10005D218(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10005D29C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_release(v9);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10005D328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005D334);
}

uint64_t sub_10005D334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10005D3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005D3BC);
}

uint64_t sub_10005D3BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_10005D434(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100083C60;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_100083C60;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t _s10ClockAngel23StandardSessionUiConfigVwxx_0(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *_s10ClockAngel23StandardSessionUiConfigVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *_s10ClockAngel23StandardSessionUiConfigVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *_s10ClockAngel23StandardSessionUiConfigVwta_0(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t _s10ClockAngel23StandardSessionUiConfigVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10005D678(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StandardSessionUiConfig()
{
  return &type metadata for StandardSessionUiConfig;
}

uint64_t sub_10005D6C8()
{
  return sub_100011680(&qword_1000B2170, &qword_1000B2178, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_10005D6F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2180;
  if (!qword_1000B2180)
  {
    v1 = sub_10000E880(&qword_1000B1F68);
    sub_10005D77C();
    sub_100011680(&qword_1000AF390, &qword_1000AF398, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2180);
  }
  return result;
}

unint64_t sub_10005D77C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2188;
  if (!qword_1000B2188)
  {
    v1 = sub_10000E880(&qword_1000B1F58);
    sub_100011680(&qword_1000B2190, &qword_1000B1F50, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2188);
  }
  return result;
}

unint64_t sub_10005D804()
{
  unint64_t result;

  result = qword_1000B2198;
  if (!qword_1000B2198)
  {
    result = swift_getWitnessTable(&unk_1000840E8, &type metadata for CountdownLabelCustomView);
    atomic_store(result, (unint64_t *)&qword_1000B2198);
  }
  return result;
}

unint64_t sub_10005D84C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B21A0;
  if (!qword_1000B21A0)
  {
    v1 = sub_10000E880(&qword_1000B21A8);
    sub_10005B594();
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B21A0);
  }
  return result;
}

unint64_t sub_10005D8D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B21B0;
  if (!qword_1000B21B0)
  {
    v1 = sub_10000E880(&qword_1000B21B8);
    sub_10005B5D8();
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B21B0);
  }
  return result;
}

uint64_t sub_10005D958(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B814, 1);
}

uint64_t sub_10005D968(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B7EC, 1);
}

uint64_t sub_10005D978(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B7C4, 1);
}

uint64_t sub_10005D988(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B79C, 1);
}

uint64_t sub_10005D998(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B774, 1);
}

uint64_t sub_10005D9A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B74C, 1);
}

uint64_t sub_10005D9B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B724, 1);
}

uint64_t sub_10005D9C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005759C(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10005D9D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B21D0;
  if (!qword_1000B21D0)
  {
    v1 = sub_10000E880(&qword_1000B21C8);
    sub_10005DA54();
    sub_100011680(&qword_1000B2218, &qword_1000B2220, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B21D0);
  }
  return result;
}

unint64_t sub_10005DA54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B21D8;
  if (!qword_1000B21D8)
  {
    v1 = sub_10000E880(&qword_1000B21E0);
    sub_10005DAD8();
    sub_100011680(&qword_1000B2208, &qword_1000B2210, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B21D8);
  }
  return result;
}

unint64_t sub_10005DAD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B21E8;
  if (!qword_1000B21E8)
  {
    v1 = sub_10000E880(&qword_1000B21F0);
    sub_100011680(&qword_1000B21F8, &qword_1000B2200, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B21E8);
  }
  return result;
}

uint64_t sub_10005DB5C(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = sub_10000A58C(&qword_1000B16B0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  result = sub_10000A58C(&qword_1000B25F8);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v6)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    a2((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10005DC3C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005DC68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10005DC94(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_10005DCB8(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

unint64_t sub_10005DCEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2240;
  if (!qword_1000B2240)
  {
    v1 = sub_10000E880(&qword_1000B2238);
    sub_10005DD70();
    sub_100011680(&qword_1000AF5B8, &qword_1000AF5C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2240);
  }
  return result;
}

unint64_t sub_10005DD70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2248;
  if (!qword_1000B2248)
  {
    v1 = sub_10000E880(&qword_1000B2250);
    sub_100060124(&qword_1000B2258, &qword_1000B2260, &qword_1000AF5A8, &qword_1000AF5B0);
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2248);
  }
  return result;
}

unint64_t sub_10005DE14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2288;
  if (!qword_1000B2288)
  {
    v1 = sub_10000E880(&qword_1000B2280);
    sub_100011020(&qword_1000B2290, &qword_1000B2278, (void (*)(void))sub_10005DEB8);
    sub_100011680(&qword_1000B22F8, &qword_1000B2300, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2288);
  }
  return result;
}

unint64_t sub_10005DEB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2298;
  if (!qword_1000B2298)
  {
    v1 = sub_10000E880(&qword_1000B2270);
    sub_10005DF3C();
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2298);
  }
  return result;
}

unint64_t sub_10005DF3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B22A0;
  if (!qword_1000B22A0)
  {
    v1 = sub_10000E880(&qword_1000B22A8);
    sub_10005DFC0();
    sub_100011680(&qword_1000AF5B8, &qword_1000AF5C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B22A0);
  }
  return result;
}

unint64_t sub_10005DFC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B22B0;
  if (!qword_1000B22B0)
  {
    v1 = sub_10000E880(&qword_1000B22B8);
    sub_10005E044();
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B22B0);
  }
  return result;
}

unint64_t sub_10005E044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B22C0;
  if (!qword_1000B22C0)
  {
    v1 = sub_10000E880(&qword_1000B22C8);
    sub_10005E0C8();
    sub_100011680(&qword_1000AF5A8, &qword_1000AF5B0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B22C0);
  }
  return result;
}

unint64_t sub_10005E0C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B22D0;
  if (!qword_1000B22D0)
  {
    v1 = sub_10000E880(&qword_1000B22D8);
    sub_10005E14C();
    sub_100011680(&qword_1000AF598, &qword_1000AF5A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B22D0);
  }
  return result;
}

unint64_t sub_10005E14C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B22E0;
  if (!qword_1000B22E0)
  {
    v1 = sub_10000E880(&qword_1000B22E8);
    sub_1000073C0(&qword_1000B22F0, type metadata accessor for TimelineCountdownView, (uint64_t)&unk_1000845A4);
    sub_100011680(&qword_1000AF4F8, &qword_1000AF500, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B22E0);
  }
  return result;
}

uint64_t type metadata accessor for TimelineCountdownView(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B2490, (uint64_t)&nominal type descriptor for TimelineCountdownView);
}

uint64_t sub_10005E1FC()
{
  return EnvironmentValues.contentTransitionStyle.getter();
}

uint64_t sub_10005E21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005B6A8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ContentTransition.Style, (uint64_t (*)(char *))&EnvironmentValues.contentTransitionStyle.setter);
}

uint64_t sub_10005E248()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_10005E268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005B6A8(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for Locale, (uint64_t (*)(char *))&EnvironmentValues.locale.setter);
}

unint64_t sub_10005E28C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2328;
  if (!qword_1000B2328)
  {
    v1 = sub_10000E880(&qword_1000B2310);
    sub_100011680(&qword_1000B2330, &qword_1000B2308, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2328);
  }
  return result;
}

unint64_t sub_10005E310()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2368;
  if (!qword_1000B2368)
  {
    v1 = sub_10000E880(&qword_1000B2348);
    sub_10005E394();
    sub_100011680(&qword_1000B2380, &qword_1000B2388, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2368);
  }
  return result;
}

unint64_t sub_10005E394()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2370;
  if (!qword_1000B2370)
  {
    v1 = sub_10000E880(&qword_1000B2340);
    sub_100011680(&qword_1000B2378, &qword_1000B2338, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2370);
  }
  return result;
}

uint64_t sub_10005E41C()
{
  return sub_10005E640((uint64_t (*)(_QWORD, _QWORD))sub_10004A100);
}

uint64_t sub_10005E42C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for TimerControlsCustomView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 24));
  v8 = type metadata accessor for TimerSessionEntry(0);
  v9 = v7 + *(int *)(v8 + 24);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v8 + 32) + 8));
  sub_100007CF0((_QWORD *)(v7 + *(int *)(v1 + 20)));
  sub_100007CF0((_QWORD *)(v7 + *(int *)(v1 + 24)));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005E4FC()
{
  return sub_10005E640((uint64_t (*)(_QWORD, _QWORD))sub_10004A484);
}

unint64_t sub_10005E508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B23F0;
  if (!qword_1000B23F0)
  {
    v1 = sub_10000E880(&qword_1000B0890);
    sub_10005E58C();
    sub_100011680(&qword_1000B2400, &qword_1000B08C0, (uint64_t)&protocol conformance descriptor for _ContentShapeKindModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B23F0);
  }
  return result;
}

unint64_t sub_10005E58C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B23F8;
  if (!qword_1000B23F8)
  {
    v1 = sub_10000E880(&qword_1000AF1D0);
    sub_10000E8C4();
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B23F8);
  }
  return result;
}

uint64_t sub_10005E614()
{
  return sub_10005E640((uint64_t (*)(_QWORD, _QWORD))sub_100049A50);
}

uint64_t sub_10005E624()
{
  return sub_10005E640((uint64_t (*)(_QWORD, _QWORD))sub_100049DA8);
}

uint64_t sub_10005E634()
{
  return sub_10005E640((uint64_t (*)(_QWORD, _QWORD))sub_1000496F0);
}

uint64_t sub_10005E640(uint64_t (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimerControlsCustomView(0) - 8) + 80);
  return sub_10005A9C4((_QWORD *)(v1 + ((v3 + 16) & ~v3)), a1);
}

unint64_t sub_10005E680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2420;
  if (!qword_1000B2420)
  {
    v1 = sub_10000E880(&qword_1000B2418);
    sub_10005E704();
    sub_100011680(&qword_1000AF4F8, &qword_1000AF500, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2420);
  }
  return result;
}

unint64_t sub_10005E704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2428;
  if (!qword_1000B2428)
  {
    v1 = sub_10000E880(&qword_1000B2430);
    sub_100011680(&qword_1000AF598, &qword_1000AF5A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2428);
  }
  return result;
}

unint64_t sub_10005E788(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100030464(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_10000A58C(&qword_1000B0A38);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[8];
    *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
    *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
    v22 = a3[9];
    v23 = a3[10];
    v24 = (_QWORD *)(a1 + v22);
    v25 = (uint64_t *)(a2 + v22);
    v27 = *v25;
    v26 = v25[1];
    *v24 = v27;
    v24[1] = v26;
    v28 = a1 + v23;
    v29 = a2 + v23;
    v30 = type metadata accessor for Calendar(0);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
    v32 = swift_retain(v27);
    v31(v28, v29, v30, v32);
    *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  }
  return a1;
}

uint64_t sub_10005E918(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000304AC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = a1 + a2[6];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(a1 + a2[9]));
  v9 = a1 + a2[10];
  v10 = type metadata accessor for Calendar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t sub_10005E9EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100030464(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Locale(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  v20 = a3[9];
  v21 = a3[10];
  v22 = (_QWORD *)(a1 + v20);
  v23 = (uint64_t *)(a2 + v20);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  v26 = a1 + v21;
  v27 = a2 + v21;
  v28 = type metadata accessor for Calendar(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
  v30 = swift_retain(v25);
  v29(v26, v27, v28, v30);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10005EB50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100030464(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000304AC(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100011484(a1 + v10, &qword_1000B0A38);
    v13 = sub_10000A58C(&qword_1000B0A38);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for Locale(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v21 = a3[9];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)(a1 + v21);
  v25 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v25;
  swift_retain(v25);
  swift_release(v24);
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  v26 = a3[10];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10005ECE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for Locale(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10005EE24(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_1000304AC(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100011484(a1 + v10, &qword_1000B0A38);
    v13 = sub_10000A58C(&qword_1000B0A38);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for Locale(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *(_QWORD *)(a1 + v19) = *(uint64_t *)((char *)a2 + v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = (uint64_t)a2 + v20;
  v23 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = *(uint64_t *)((char *)a2 + v20);
  swift_release(v23);
  *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = (uint64_t)a2 + v24;
  v27 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  *(_QWORD *)(a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  return a1;
}

uint64_t sub_10005EFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005EFB0);
}

uint64_t sub_10005EFB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;

  v6 = sub_10000A58C(&qword_1000B15B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = type metadata accessor for Calendar(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[9]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  v12 = v11 - 1;
  if (v12 < 0)
    v12 = -1;
  return (v12 + 1);
}

uint64_t sub_10005F088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F094);
}

uint64_t sub_10005F094(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_10000A58C(&qword_1000B15B8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    result = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = result;
      v11 = a4[6];
    }
    else
    {
      if (a3 == 2147483646)
      {
        *(_QWORD *)(a1 + a4[9]) = a2;
        return result;
      }
      v10 = type metadata accessor for Calendar(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[10];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_10005F15C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = "\t";
  sub_10005F228(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_100083C60;
      v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[5] = &unk_1000844A0;
      v6 = type metadata accessor for Calendar(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        v8[7] = (char *)&value witness table for Builtin.Int64 + 64;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

void sub_10005F228(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B1628)
  {
    v2 = type metadata accessor for Locale(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B1628);
  }
}

uint64_t *sub_10005F27C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[2];
    a1[2] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Material(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_retain(v8);
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = (_OWORD *)((char *)v4 + v14);
    v17 = (_OWORD *)((char *)a2 + v14);
    v18 = v17[3];
    v16[2] = v17[2];
    v16[3] = v18;
    v16[4] = v17[4];
    v19 = v17[1];
    *v16 = *v17;
    v16[1] = v19;
    v20 = (char *)v4 + v15;
    v21 = (char *)a2 + v15;
    v22 = type metadata accessor for BlendMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[9];
    v24 = (uint64_t *)((char *)v4 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
  }
  swift_retain(v26);
  return v4;
}

uint64_t sub_10005F3A0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for Material(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_release(*(_QWORD *)(a1 + a2[9] + 8));
}

_QWORD *sub_10005F42C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[2];
  a1[2] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Material(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = (_OWORD *)((char *)a1 + v13);
  v16 = (_OWORD *)((char *)a2 + v13);
  v17 = v16[3];
  v15[2] = v16[2];
  v15[3] = v17;
  v15[4] = v16[4];
  v18 = v16[1];
  *v15 = *v16;
  v15[1] = v18;
  v19 = (char *)a1 + v14;
  v20 = (char *)a2 + v14;
  v21 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = a3[9];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_retain(v25);
  return a1;
}

_QWORD *sub_10005F528(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Material(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[7];
  v15 = (_DWORD *)((char *)a1 + v14);
  v16 = (_DWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  v15[2] = v16[2];
  v15[3] = v16[3];
  v15[4] = v16[4];
  v15[5] = v16[5];
  v15[6] = v16[6];
  v15[7] = v16[7];
  v15[8] = v16[8];
  v15[9] = v16[9];
  v15[10] = v16[10];
  v15[11] = v16[11];
  v15[12] = v16[12];
  v15[13] = v16[13];
  v15[14] = v16[14];
  v15[15] = v16[15];
  v15[16] = v16[16];
  v15[17] = v16[17];
  v15[18] = v16[18];
  v15[19] = v16[19];
  v17 = a3[8];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = a3[9];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = v23[1];
  v25 = v22[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_retain(v24);
  swift_release(v25);
  return a1;
}

uint64_t sub_10005F6C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Material(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (_OWORD *)(a1 + v10);
  v13 = (_OWORD *)(a2 + v10);
  v14 = v13[3];
  v12[2] = v13[2];
  v12[3] = v14;
  v12[4] = v13[4];
  v15 = v13[1];
  *v12 = *v13;
  v12[1] = v15;
  v16 = a1 + v11;
  v17 = a2 + v11;
  v18 = type metadata accessor for BlendMode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

_QWORD *sub_10005F78C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[2];
  a1[2] = a2[2];
  swift_release(v8);
  v9 = a3[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Material(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[7];
  v14 = a3[8];
  v15 = (_OWORD *)((char *)a1 + v13);
  v16 = (_OWORD *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v16[3];
  v15[2] = v16[2];
  v15[3] = v18;
  v15[4] = v16[4];
  v19 = (char *)a1 + v14;
  v20 = (char *)a2 + v14;
  v21 = type metadata accessor for BlendMode(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = a3[9];
  v23 = *(_QWORD *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  swift_release(v23);
  return a1;
}

uint64_t sub_10005F874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005F880);
}

uint64_t sub_10005F880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Material(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = type metadata accessor for BlendMode(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10005F920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005F92C);
}

uint64_t sub_10005F92C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Material(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for BlendMode(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for MediumActionButton(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B2538, (uint64_t)&nominal type descriptor for MediumActionButton);
}

uint64_t sub_10005F9DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = &unk_100083C48;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for Material(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = "P";
    result = type metadata accessor for BlendMode(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for LargeActionButton(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[7]);
  return swift_release(a1[9]);
}

uint64_t initializeWithCopy for LargeActionButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t assignWithCopy for LargeActionButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_retain(v10);
  swift_release(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v13;
  swift_retain(v13);
  swift_release(v12);
  return a1;
}

__n128 initializeWithTake for LargeActionButton(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for LargeActionButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  swift_release(v6);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LargeActionButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LargeActionButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LargeActionButton()
{
  return &type metadata for LargeActionButton;
}

uint64_t sub_10005FD58()
{
  _QWORD v1[4];

  v1[0] = sub_10000E880(&qword_1000B21C0);
  v1[1] = type metadata accessor for BorderlessButtonStyle(255);
  v1[2] = sub_100011680(&qword_1000B2228, &qword_1000B21C0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v1[3] = sub_1000073C0(&qword_1000B2230, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
}

unint64_t sub_10005FDFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2580;
  if (!qword_1000B2580)
  {
    v1 = sub_10000E880(&qword_1000B2588);
    sub_10005DCEC();
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2580);
  }
  return result;
}

uint64_t sub_10005FE80()
{
  return sub_10005FEB4(&qword_1000B2590, &qword_1000B2598, (void (*)(void))sub_10005DE14, (void (*)(void))sub_10005DEB8);
}

uint64_t sub_10005FEB4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E880(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005FF28()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B25A0;
  if (!qword_1000B25A0)
  {
    v1 = sub_10000E880(&qword_1000B25A8);
    v2[0] = sub_10000E880(&qword_1000B2310);
    v2[1] = sub_10005E28C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000073C0(&qword_1000AF360, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B25A0);
  }
  return result;
}

unint64_t sub_10005FFD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B25B0;
  if (!qword_1000B25B0)
  {
    v1 = sub_10000E880(&qword_1000B25B8);
    sub_100011680(&qword_1000B23B8, &qword_1000B23A8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100011680(&qword_1000B23C0, &qword_1000B2398, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B25B0);
  }
  return result;
}

unint64_t sub_100060080()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0A00;
  if (!qword_1000B0A00)
  {
    v1 = sub_10000E880(&qword_1000B0A08);
    sub_100060124((unint64_t *)&qword_1000B0A10, &qword_1000B0A18, &qword_1000AF218, &qword_1000AF220);
    sub_100011680(&qword_1000AF5B8, &qword_1000AF5C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0A00);
  }
  return result;
}

uint64_t sub_100060124(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_10000E880(a2);
    sub_100011680(a3, a4, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000601A4()
{
  return sub_100011680(&qword_1000B25C0, &qword_1000B25C8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_1000601D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B88C, 1);
}

uint64_t sub_1000601E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B864, 1);
}

uint64_t sub_1000601F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B83C, 1);
}

uint64_t sub_100060200()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for TimelineCountdownView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_1000304AC(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_10000A58C(&qword_1000B0A38);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for Locale(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = v3 | 7;
  v11 = v4 + v5;
  v12 = v6 + v1[6];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)(v6 + v1[9]));
  v14 = v6 + v1[10];
  v15 = type metadata accessor for Calendar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100060318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimelineCountdownView(0) - 8) + 80);
  return sub_10005532C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100060364()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100060388(uint64_t a1)
{
  uint64_t v1;

  return sub_10005DB5C(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_100060390()
{
  return sub_100011020(&qword_1000B25E8, &qword_1000B25F0, (void (*)(void))sub_10004EE58);
}

uint64_t sub_1000603B4(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = Transaction.disablesAnimations.getter(*a1);
  if ((result & 1) == 0)
  {
    v4 = swift_retain(a2);
    return Transaction.animation.setter(v4);
  }
  return result;
}

void sub_1000603EC(long double a1, uint64_t a2, char a3, char a4)
{
  NSLocale v7;
  int v8;
  long double v9;
  _BYTE *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  Class isa;
  id v17;

  v7.super.isa = Locale._bridgeToObjectiveC()().super.isa;
  v8 = a4 & 1;
  v9 = a1;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 1;
  v14 = 0;
  v15 = 0;
  isa = v7.super.isa;
  if ((a3 & 1) != 0)
  {
    v17 = sub_1000065D4(0, 0, 1, 1, 0, 0, v8, (uint64_t)v7.super.isa, a1);

    if (v17)
    {
LABEL_5:
      static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

      return;
    }
    __break(1u);
  }
  v17 = sub_100006028(v10, v11, v12, v13, v14, v15, v8, (uint64_t)isa, v9);

  if (v17)
    goto LABEL_5;
  __break(1u);
}

uint64_t sub_1000604A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000604B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000604C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2618;
  if (!qword_1000B2618)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B2618);
  }
  return result;
}

_OWORD *sub_1000604FC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10006050C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100060514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100057A14(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10006051C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2628;
  if (!qword_1000B2628)
  {
    v1 = sub_10000E880(&qword_1000B2620);
    sub_1000605A0();
    sub_100011680(&qword_1000B2650, &qword_1000B2658, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2628);
  }
  return result;
}

unint64_t sub_1000605A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2630;
  if (!qword_1000B2630)
  {
    v1 = sub_10000E880(&qword_1000B2638);
    sub_100011680(&qword_1000B2640, &qword_1000B2648, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2630);
  }
  return result;
}

uint64_t sub_100060624@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100058314(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_10006062C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B26A8;
  if (!qword_1000B26A8)
  {
    v1 = sub_10000E880(&qword_1000B26A0);
    sub_1000606B0();
    sub_100011680(&qword_1000B26D0, &qword_1000B26D8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B26A8);
  }
  return result;
}

unint64_t sub_1000606B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B26B0;
  if (!qword_1000B26B0)
  {
    v1 = sub_10000E880(&qword_1000B26B8);
    sub_100011680(&qword_1000B26C0, &qword_1000B26C8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B26B0);
  }
  return result;
}

uint64_t sub_100060734()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100060758(_QWORD *a1)
{
  uint64_t v1;

  return sub_1000603B4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100060764()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 80);
  v3 = 1;
  v1 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_1000607B4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000607F8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  __int128 v5;

  v5 = *(_OWORD *)(v1 + 80);
  v4 = a1;
  v2 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(&v4, v2);
}

_QWORD *sub_100060840(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[7];
  swift_retain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

unint64_t sub_1000608A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000B26F0;
  if (!qword_1000B26F0)
  {
    v1 = sub_10000E880(&qword_1000B2688);
    v2[0] = sub_10000E880(&qword_1000B2678);
    v2[1] = type metadata accessor for BorderlessButtonStyle(255);
    v2[2] = sub_100011680(&qword_1000B26E0, &qword_1000B2678, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000073C0(&qword_1000B2230, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B26F0);
  }
  return result;
}

_QWORD *sub_100060994(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

unint64_t sub_1000609C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B26F8;
  if (!qword_1000B26F8)
  {
    v1 = sub_10000E880(&qword_1000B2700);
    sub_10005FEB4(&qword_1000B25E0, &qword_1000B25D0, (void (*)(void))sub_100060390, (void (*)(void))sub_10004EE58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B26F8);
  }
  return result;
}

uint64_t sub_100060A44()
{
  return sub_100011680(&qword_1000B2708, (uint64_t *)&unk_1000B2710, (uint64_t)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_100060A70()
{
  _QWORD v1[2];

  v1[0] = sub_10000E880(&qword_1000B2690);
  v1[1] = sub_100011020(&qword_1000B26E8, &qword_1000B2690, (void (*)(void))sub_1000608A4);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onLongPressGesture(minimumDuration:maximumDistance:pressing:perform:)>>, 1);
}

void sub_100060AF0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  Class isa;
  __int128 v57;
  ValueMetadata *v58;
  _UNKNOWN **v59;
  _QWORD v60[3];
  _QWORD v61[6];
  char v62;

  v3 = v2;
  v4 = OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView;
  v5 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel29StopwatchLockscreenController_customTrailingView];
  if (v5)
    goto LABEL_7;
  v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
  v7 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel];
  v58 = &type metadata for LockscreenConfig;
  v59 = &off_10009FF98;
  KeyPath = swift_getKeyPath(&unk_100084650, a2);
  v9 = type metadata accessor for ObservableStopwatchModel(0);
  v10 = sub_1000341C0();
  swift_retain(v6);
  v11 = v7;
  v60[0] = ObservedObject.init(wrappedValue:)(v6, v9, v10);
  v60[1] = v12;
  v60[2] = v7;
  sub_10000EC88(&v57, (uint64_t)v61);
  v61[5] = KeyPath;
  v62 = 0;
  v13 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B2768));
  v14 = &v13[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v13) + 16)];
  *((_QWORD *)v14 + 1) = 0;
  swift_unknownObjectWeakInit(v14, 0);
  sub_1000356D8((uint64_t)v60, (uint64_t)&v57);
  v15 = (void *)UIHostingController.init(rootView:)(&v57);
  sub_10003570C((uint64_t)v60);
  v16 = objc_msgSend(v15, "view");
  if (!v16)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v17 = v16;
  objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v18 = objc_msgSend(v15, "view");
  if (!v18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v19 = v18;
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v19, "setBackgroundColor:", v20);

  objc_msgSend(v3, "addChildViewController:", v15);
  v21 = objc_msgSend(v3, "view");
  if (!v21)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v22 = v21;
  v23 = objc_msgSend(v15, "view");
  if (!v23)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v24 = v23;
  objc_msgSend(v22, "addSubview:", v23);

  objc_msgSend(v15, "didMoveToParentViewController:", v3);
  v25 = *(void **)&v3[v4];
  *(_QWORD *)&v3[v4] = v15;

  v5 = *(void **)&v3[v4];
  if (v5)
  {
LABEL_7:
    v26 = objc_msgSend(v5, "view");
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend(v26, "leadingAnchor");

      sub_100014A1C();
      v29 = sub_10000A58C((uint64_t *)&unk_1000B2750);
      v30 = swift_allocObject(v29, 56, 7);
      *(_OWORD *)(v30 + 16) = xmmword_100084600;
      v31 = *(void **)&v3[v4];
      if (v31)
      {
        v32 = objc_msgSend(v31, "view");
        if (v32)
        {
          v33 = v32;
          v34 = objc_msgSend(v32, "leadingAnchor");

          v35 = *(void **)&v3[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
          if (v35)
          {
            v36 = objc_msgSend(v35, "trailingAnchor");
            v37 = objc_msgSend(v34, "constraintEqualToAnchor:", v36);

            *(_QWORD *)(v30 + 32) = v37;
            v38 = *(void **)&v3[v4];
            if (v38)
            {
              v39 = objc_msgSend(v38, "view");
              if (v39)
              {
                v40 = v39;
                v41 = objc_msgSend(v39, "trailingAnchor");

                v42 = objc_msgSend(v3, "view");
                if (v42)
                {
                  v43 = v42;
                  v44 = objc_msgSend(v42, "trailingAnchor");

                  v45 = objc_msgSend(v41, "constraintEqualToAnchor:", v44);
                  *(_QWORD *)(v30 + 40) = v45;
                  v46 = *(void **)&v3[v4];
                  if (v46)
                  {
                    v47 = objc_msgSend(v46, "view");
                    if (v47)
                    {
                      v48 = v47;
                      v49 = objc_msgSend(v47, "centerYAnchor");

                      v50 = objc_msgSend(v3, "view");
                      if (v50)
                      {
                        v51 = v50;
                        v52 = (void *)objc_opt_self(NSLayoutConstraint);
                        v53 = objc_msgSend(v51, "centerYAnchor");

                        v54 = objc_msgSend(v49, "constraintEqualToAnchor:", v53);
                        *(_QWORD *)(v30 + 48) = v54;
                        v60[0] = v30;
                        specialized Array._endMutation()();
                        v55 = v60[0];
                        sub_100061288();
                        isa = Array._bridgeToObjectiveC()().super.isa;
                        swift_bridgeObjectRelease(v55);
                        objc_msgSend(v52, "activateConstraints:", isa);

                        return;
                      }
                      goto LABEL_27;
                    }
LABEL_26:
                    __break(1u);
LABEL_27:
                    __break(1u);
                    goto LABEL_28;
                  }
LABEL_25:
                  __break(1u);
                  goto LABEL_26;
                }
LABEL_24:
                __break(1u);
                goto LABEL_25;
              }
LABEL_23:
              __break(1u);
              goto LABEL_24;
            }
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

void sub_1000611C8()
{
  uint64_t v0;

}

id sub_1000611D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StopwatchLockscreenController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StopwatchLockscreenController()
{
  return objc_opt_self(_TtC10ClockAngel29StopwatchLockscreenController);
}

uint64_t sub_100061238@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100061264(unsigned __int8 *a1)
{
  return EnvironmentValues.isLuminanceReduced.setter(*a1);
}

unint64_t sub_100061288()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B0010;
  if (!qword_1000B0010)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B0010);
  }
  return result;
}

uint64_t sub_1000612C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isLuminanceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000612F0(unsigned __int8 *a1)
{
  return EnvironmentValues.isLuminanceReduced.setter(*a1);
}

double sub_100061314@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10006141C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000AF490, &qword_1000AF498).n128_u64[0];
  return result;
}

double sub_10006136C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_10006141C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000AF418, &qword_1000AF420).n128_u64[0];
  return result;
}

double sub_1000613C4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_1000617A0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000B2338, &qword_1000B2340).n128_u64[0];
  return result;
}

__n128 sub_10006141C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = a9;
  v19 = a16;
  v21 = a14;
  v20 = a15;
  v22 = a12;
  v23 = a10;
  v24 = a2 & 1;
  v25 = a1;
  if ((_DWORD)v24)
    v25 = -INFINITY;
  v26 = a4 & 1;
  v27 = a3;
  if ((_DWORD)v26)
    v27 = v25;
  v28 = a6 & 1;
  v29 = a8 & 1;
  v30 = a5;
  if ((a6 & 1) != 0)
    v30 = v27;
  if (v25 > v27 || v27 > v30)
    goto LABEL_22;
  v32 = a7;
  if ((a8 & 1) != 0)
    v32 = -INFINITY;
  v33 = a10;
  if ((a11 & 1) != 0)
    v33 = v32;
  v34 = a12;
  if ((a13 & 1) != 0)
    v34 = v33;
  if (v32 > v33 || v33 > v34)
  {
LABEL_22:
    v49 = a7;
    v50 = a5;
    v47 = a1;
    v48 = a3;
    v46 = v24;
    v36 = v26;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v18 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v26 = v36;
    v21 = a14;
    v20 = a15;
    v24 = v46;
    v23 = a10;
    v22 = a12;
    a1 = v47;
    a3 = v48;
    a7 = v49;
    a5 = v50;
    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v24, *(_QWORD *)&a3, v26, *(_QWORD *)&a5, v28, *(_QWORD *)&a7, v29, *(_QWORD *)&v23, a11 & 1, *(_QWORD *)&v22, a13 & 1, v21, v20);
  v41 = sub_10000A58C(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v18, v17, v41);
  v42 = v18 + *(int *)(sub_10000A58C(a17) + 36);
  v43 = v51[5];
  *(_OWORD *)(v42 + 64) = v51[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v51[6];
  v44 = v51[1];
  *(_OWORD *)v42 = v51[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v51[3];
  *(_OWORD *)(v42 + 32) = v51[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

uint64_t sub_1000615F8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _OWORD v43[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v42 = a7;
    v40 = a1;
    v41 = a5;
    v39 = a3;
    v38 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v38;
    v19 = a10;
    a3 = v39;
    a1 = v40;
    a5 = v41;
    v18 = a12;
    a7 = v42;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v43[2];
  *(_OWORD *)(a9 + 56) = v43[3];
  v35 = v43[5];
  *(_OWORD *)(a9 + 72) = v43[4];
  *(_OWORD *)(a9 + 88) = v35;
  *(_OWORD *)(a9 + 104) = v43[6];
  v36 = v43[1];
  *(_OWORD *)(a9 + 8) = v43[0];
  *(_OWORD *)(a9 + 24) = v36;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v34;
  return swift_retain(a16);
}

__n128 sub_1000617A0@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_100011440(v18, v19, a16);
  v41 = v19 + *(int *)(sub_10000A58C(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

_QWORD *sub_10006196C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, char a11, char a12, char a13, char a14, char a15)
{
  int *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *result;
  uint64_t v52;
  double v58;
  uint64_t v59;
  uint64_t v60;

  sub_10002B89C(a1, a9, type metadata accessor for TimerSessionEntry);
  v19 = (int *)type metadata accessor for LinearTimerTimelineCountdown(0);
  v20 = (_QWORD *)(a9 + v19[5]);
  v21 = (void *)objc_opt_self(ClockAngelUtilities);
  v22 = Color.init(uiColor:)(objc_msgSend(v21, "mtOrange"));
  v23 = Color.init(uiColor:)(objc_msgSend(v21, "mtOrange"));
  v24 = Color.opacity(_:)(0.28);
  swift_release(v23);
  v26 = static Color.white.getter(v25);
  v27 = static Color.white.getter(v26);
  v28 = Color.opacity(_:)(0.2);
  swift_release(v27);
  v20[3] = &type metadata for StandardSessionUiConfig;
  v20[4] = &off_1000A1520;
  v29 = (_QWORD *)swift_allocObject(&unk_1000A18A8, 48, 7);
  *v20 = v29;
  v29[2] = v22;
  v29[3] = v24;
  v29[4] = v26;
  v29[5] = v28;
  sub_10000EC88(a2, a9 + v19[6]);
  sub_1000112A4(a3, a9 + v19[7], (uint64_t *)&unk_1000AFBC0);
  v30 = (_QWORD *)(a9 + v19[8]);
  v58 = a10;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for CGFloat);
  v31 = v60;
  *v30 = v59;
  v30[1] = v31;
  v32 = a9 + v19[9];
  LOBYTE(v58) = a4;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v33 = v60;
  *(_BYTE *)v32 = v59;
  *(_QWORD *)(v32 + 8) = v33;
  v34 = a9 + v19[10];
  LOBYTE(v58) = a5;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v35 = v60;
  *(_BYTE *)v34 = v59;
  *(_QWORD *)(v34 + 8) = v35;
  v36 = a9 + v19[11];
  LOBYTE(v58) = a6;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v37 = v60;
  *(_BYTE *)v36 = v59;
  *(_QWORD *)(v36 + 8) = v37;
  v38 = a9 + v19[12];
  LOBYTE(v58) = a7;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v39 = v60;
  *(_BYTE *)v38 = v59;
  *(_QWORD *)(v38 + 8) = v39;
  v40 = a9 + v19[13];
  LOBYTE(v58) = a8;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v41 = v60;
  *(_BYTE *)v40 = v59;
  *(_QWORD *)(v40 + 8) = v41;
  v42 = a9 + v19[14];
  LOBYTE(v58) = a11;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v43 = v60;
  *(_BYTE *)v42 = v59;
  *(_QWORD *)(v42 + 8) = v43;
  v44 = a9 + v19[15];
  LOBYTE(v58) = a12;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v45 = v60;
  *(_BYTE *)v44 = v59;
  *(_QWORD *)(v44 + 8) = v45;
  v46 = a9 + v19[16];
  LOBYTE(v58) = a13;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v47 = v60;
  *(_BYTE *)v46 = v59;
  *(_QWORD *)(v46 + 8) = v47;
  v48 = a9 + v19[17];
  LOBYTE(v58) = a14;
  State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v49 = v60;
  *(_BYTE *)v48 = v59;
  *(_QWORD *)(v48 + 8) = v49;
  v50 = a9 + v19[18];
  LOBYTE(v58) = a15;
  result = State.init(wrappedValue:)(&v59, &v58, &type metadata for Bool);
  v52 = v60;
  *(_BYTE *)v50 = v59;
  *(_QWORD *)(v50 + 8) = v52;
  return result;
}

uint64_t type metadata accessor for LinearTimerTimelineCountdown(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B27D8;
  if (!qword_1000B27D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LinearTimerTimelineCountdown);
  return result;
}

uint64_t sub_100061D54()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_100061D90(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v83;
  uint64_t v84;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v39 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v39 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = (int *)type metadata accessor for TimerSessionEntry(0);
    v10 = v9[6];
    v11 = (char *)v4 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13);
    *((_BYTE *)v4 + v9[7]) = *((_BYTE *)a2 + v9[7]);
    v15 = v9[8];
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v9[9];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v20[8] = v21[8];
    *(_QWORD *)v20 = *(_QWORD *)v21;
    v22 = v9[10];
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    *(_QWORD *)((char *)v4 + v9[11]) = *(_QWORD *)((char *)a2 + v9[11]);
    v25 = a3[5];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(_OWORD *)((char *)a2 + v25 + 24);
    *(_OWORD *)((char *)v4 + v25 + 24) = v28;
    v29 = v28;
    v30 = **(void (***)(char *, char *, uint64_t))(v28 - 8);
    swift_bridgeObjectRetain(v18);
    v30(v26, v27, v29);
    v31 = a3[6];
    v32 = *(_OWORD *)((char *)a2 + v31 + 24);
    *(_OWORD *)((char *)v4 + v31 + 24) = v32;
    (**(void (***)(void))(v32 - 8))();
    v33 = a3[7];
    v34 = (_QWORD *)((char *)v4 + v33);
    v35 = (_QWORD *)((char *)a2 + v33);
    v36 = sub_10000A58C(&qword_1000AF270);
    if (swift_getEnumCaseMultiPayload(v35, v36) == 1)
    {
      v37 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v34, v35, v37);
      v38 = 1;
    }
    else
    {
      v40 = *v35;
      *v34 = *v35;
      swift_retain(v40);
      v38 = 0;
    }
    swift_storeEnumTagMultiPayload(v34, v36, v38);
    v41 = a3[8];
    v42 = a3[9];
    v43 = (_QWORD *)((char *)v4 + v41);
    v44 = (_QWORD *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = (char *)v4 + v42;
    v47 = (char *)a2 + v42;
    *v46 = *v47;
    v84 = *((_QWORD *)v47 + 1);
    *((_QWORD *)v46 + 1) = v84;
    v48 = a3[10];
    v49 = a3[11];
    v50 = (char *)v4 + v48;
    v51 = (char *)a2 + v48;
    *v50 = *v51;
    v52 = *((_QWORD *)v51 + 1);
    *((_QWORD *)v50 + 1) = v52;
    v53 = (char *)v4 + v49;
    v54 = (char *)a2 + v49;
    *v53 = *v54;
    v83 = *((_QWORD *)v54 + 1);
    *((_QWORD *)v53 + 1) = v83;
    v55 = a3[12];
    v56 = a3[13];
    v57 = (char *)v4 + v55;
    v58 = (char *)a2 + v55;
    *v57 = *v58;
    v59 = *((_QWORD *)v58 + 1);
    *((_QWORD *)v57 + 1) = v59;
    v60 = (char *)v4 + v56;
    v61 = (char *)a2 + v56;
    *v60 = *v61;
    v62 = *((_QWORD *)v61 + 1);
    *((_QWORD *)v60 + 1) = v62;
    v63 = a3[14];
    v64 = a3[15];
    v65 = (char *)v4 + v63;
    v66 = (char *)a2 + v63;
    *v65 = *v66;
    v67 = *((_QWORD *)v66 + 1);
    *((_QWORD *)v65 + 1) = v67;
    v68 = (char *)v4 + v64;
    v69 = (char *)a2 + v64;
    *v68 = *v69;
    v70 = *((_QWORD *)v69 + 1);
    *((_QWORD *)v68 + 1) = v70;
    v71 = a3[16];
    v72 = a3[17];
    v73 = (char *)v4 + v71;
    v74 = (char *)a2 + v71;
    *v73 = *v74;
    v75 = *((_QWORD *)v74 + 1);
    *((_QWORD *)v73 + 1) = v75;
    v76 = (char *)v4 + v72;
    v77 = (char *)a2 + v72;
    *v76 = *v77;
    v78 = *((_QWORD *)v77 + 1);
    *((_QWORD *)v76 + 1) = v78;
    v79 = a3[18];
    v80 = (char *)v4 + v79;
    v81 = (char *)a2 + v79;
    *v80 = *v81;
    v39 = *((_QWORD *)v81 + 1);
    *((_QWORD *)v80 + 1) = v39;
    swift_retain(v45);
    swift_retain(v84);
    swift_retain(v52);
    swift_retain(v83);
    swift_retain(v59);
    swift_retain(v62);
    swift_retain(v67);
    swift_retain(v70);
    swift_retain(v75);
    swift_retain(v78);
  }
  swift_retain(v39);
  return v4;
}

double sub_100062108(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = type metadata accessor for TimerSessionEntry(0);
  v5 = a1 + *(int *)(v4 + 24);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v4 + 32) + 8));
  sub_100007CF0((_QWORD *)(a1 + a2[5]));
  sub_100007CF0((_QWORD *)(a1 + a2[6]));
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_release(*(_QWORD *)(a1 + a2[8] + 8));
  swift_release(*(_QWORD *)(a1 + a2[9] + 8));
  swift_release(*(_QWORD *)(a1 + a2[10] + 8));
  swift_release(*(_QWORD *)(a1 + a2[11] + 8));
  swift_release(*(_QWORD *)(a1 + a2[12] + 8));
  swift_release(*(_QWORD *)(a1 + a2[13] + 8));
  swift_release(*(_QWORD *)(a1 + a2[14] + 8));
  swift_release(*(_QWORD *)(a1 + a2[15] + 8));
  swift_release(*(_QWORD *)(a1 + a2[16] + 8));
  swift_release(*(_QWORD *)(a1 + a2[17] + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + a2[18] + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_100062294(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = (int *)type metadata accessor for TimerSessionEntry(0);
  v9 = v8[6];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v13(v10, v11, v12);
  *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
  v14 = v8[8];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v8[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v19[8] = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = v8[10];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)((char *)a1 + v8[11]) = *(_QWORD *)((char *)a2 + v8[11]);
  v24 = a3[5];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_OWORD *)((char *)a2 + v24 + 24);
  *(_OWORD *)((char *)a1 + v24 + 24) = v27;
  v28 = v27;
  v29 = **(void (***)(char *, char *, uint64_t))(v27 - 8);
  swift_bridgeObjectRetain(v17);
  v29(v25, v26, v28);
  v30 = a3[6];
  v31 = *(_OWORD *)((char *)a2 + v30 + 24);
  *(_OWORD *)((char *)a1 + v30 + 24) = v31;
  (**(void (***)(void))(v31 - 8))();
  v32 = a3[7];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for Font.Context(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
    v37 = 1;
  }
  else
  {
    v38 = *v34;
    *v33 = *v34;
    swift_retain(v38);
    v37 = 0;
  }
  swift_storeEnumTagMultiPayload(v33, v35, v37);
  v39 = a3[8];
  v40 = a3[9];
  v41 = (_QWORD *)((char *)a1 + v39);
  v42 = (_QWORD *)((char *)a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = (char *)a1 + v40;
  v45 = (char *)a2 + v40;
  *v44 = *v45;
  v83 = *((_QWORD *)v45 + 1);
  *((_QWORD *)v44 + 1) = v83;
  v46 = a3[10];
  v47 = a3[11];
  v48 = (char *)a1 + v46;
  v49 = (char *)a2 + v46;
  *v48 = *v49;
  v50 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v48 + 1) = v50;
  v51 = (char *)a1 + v47;
  v52 = (char *)a2 + v47;
  *v51 = *v52;
  v82 = *((_QWORD *)v52 + 1);
  *((_QWORD *)v51 + 1) = v82;
  v53 = a3[12];
  v54 = a3[13];
  v55 = (char *)a1 + v53;
  v56 = (char *)a2 + v53;
  *v55 = *v56;
  v57 = *((_QWORD *)v56 + 1);
  *((_QWORD *)v55 + 1) = v57;
  v58 = (char *)a1 + v54;
  v59 = (char *)a2 + v54;
  *v58 = *v59;
  v60 = *((_QWORD *)v59 + 1);
  *((_QWORD *)v58 + 1) = v60;
  v61 = a3[14];
  v62 = a3[15];
  v63 = (char *)a1 + v61;
  v64 = (char *)a2 + v61;
  *v63 = *v64;
  v65 = *((_QWORD *)v64 + 1);
  *((_QWORD *)v63 + 1) = v65;
  v66 = (char *)a1 + v62;
  v67 = (char *)a2 + v62;
  *v66 = *v67;
  v68 = *((_QWORD *)v67 + 1);
  *((_QWORD *)v66 + 1) = v68;
  v69 = a3[16];
  v70 = a3[17];
  v71 = (char *)a1 + v69;
  v72 = (char *)a2 + v69;
  *v71 = *v72;
  v73 = *((_QWORD *)v72 + 1);
  *((_QWORD *)v71 + 1) = v73;
  v74 = (char *)a1 + v70;
  v75 = (char *)a2 + v70;
  *v74 = *v75;
  v76 = *((_QWORD *)v75 + 1);
  *((_QWORD *)v74 + 1) = v76;
  v77 = a3[18];
  v78 = (char *)a1 + v77;
  v79 = (char *)a2 + v77;
  *v78 = *v79;
  v80 = *((_QWORD *)v79 + 1);
  *((_QWORD *)v78 + 1) = v80;
  swift_retain(v43);
  swift_retain(v83);
  swift_retain(v50);
  swift_retain(v82);
  swift_retain(v57);
  swift_retain(v60);
  swift_retain(v65);
  swift_retain(v68);
  swift_retain(v73);
  swift_retain(v76);
  swift_retain(v80);
  return a1;
}

_QWORD *sub_1000625E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  v11 = v10[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
  v15 = v10[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = v10[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)v22;
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = v10[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  *(_QWORD *)((char *)a1 + v10[11]) = *(_QWORD *)((char *)a2 + v10[11]);
  sub_100007D18((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]));
  sub_100007D18((_QWORD *)((char *)a1 + a3[6]), (_QWORD *)((char *)a2 + a3[6]));
  if (a1 != a2)
  {
    v28 = a3[7];
    v29 = (_QWORD *)((char *)a1 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    sub_100011484((uint64_t)a1 + v28, &qword_1000AF270);
    v31 = sub_10000A58C(&qword_1000AF270);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for Font.Context(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
  }
  v35 = a3[8];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v38 = v36[1];
  v39 = v37[1];
  v36[1] = v39;
  swift_retain(v39);
  swift_release(v38);
  v40 = a3[9];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  *v41 = *v42;
  v43 = *((_QWORD *)v41 + 1);
  v44 = *((_QWORD *)v42 + 1);
  *((_QWORD *)v41 + 1) = v44;
  swift_retain(v44);
  swift_release(v43);
  v45 = a3[10];
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  *v46 = *v47;
  v48 = *((_QWORD *)v46 + 1);
  v49 = *((_QWORD *)v47 + 1);
  *((_QWORD *)v46 + 1) = v49;
  swift_retain(v49);
  swift_release(v48);
  v50 = a3[11];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  *v51 = *v52;
  v53 = *((_QWORD *)v51 + 1);
  v54 = *((_QWORD *)v52 + 1);
  *((_QWORD *)v51 + 1) = v54;
  swift_retain(v54);
  swift_release(v53);
  v55 = a3[12];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  *v56 = *v57;
  v58 = *((_QWORD *)v56 + 1);
  v59 = *((_QWORD *)v57 + 1);
  *((_QWORD *)v56 + 1) = v59;
  swift_retain(v59);
  swift_release(v58);
  v60 = a3[13];
  v61 = (char *)a1 + v60;
  v62 = (char *)a2 + v60;
  *v61 = *v62;
  v63 = *((_QWORD *)v61 + 1);
  v64 = *((_QWORD *)v62 + 1);
  *((_QWORD *)v61 + 1) = v64;
  swift_retain(v64);
  swift_release(v63);
  v65 = a3[14];
  v66 = (char *)a1 + v65;
  v67 = (char *)a2 + v65;
  *v66 = *v67;
  v68 = *((_QWORD *)v66 + 1);
  v69 = *((_QWORD *)v67 + 1);
  *((_QWORD *)v66 + 1) = v69;
  swift_retain(v69);
  swift_release(v68);
  v70 = a3[15];
  v71 = (char *)a1 + v70;
  v72 = (char *)a2 + v70;
  *v71 = *v72;
  v73 = *((_QWORD *)v71 + 1);
  v74 = *((_QWORD *)v72 + 1);
  *((_QWORD *)v71 + 1) = v74;
  swift_retain(v74);
  swift_release(v73);
  v75 = a3[16];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  *v76 = *v77;
  v78 = *((_QWORD *)v76 + 1);
  v79 = *((_QWORD *)v77 + 1);
  *((_QWORD *)v76 + 1) = v79;
  swift_retain(v79);
  swift_release(v78);
  v80 = a3[17];
  v81 = (char *)a1 + v80;
  v82 = (char *)a2 + v80;
  *v81 = *v82;
  v83 = *((_QWORD *)v81 + 1);
  v84 = *((_QWORD *)v82 + 1);
  *((_QWORD *)v81 + 1) = v84;
  swift_retain(v84);
  swift_release(v83);
  v85 = a3[18];
  v86 = (char *)a1 + v85;
  v87 = (char *)a2 + v85;
  *v86 = *v87;
  v88 = *((_QWORD *)v86 + 1);
  v89 = *((_QWORD *)v87 + 1);
  *((_QWORD *)v86 + 1) = v89;
  swift_retain(v89);
  swift_release(v88);
  return a1;
}

_OWORD *sub_1000629A0(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for TimerSessionEntry(0);
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
  *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
  v12 = v7[9];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v13[8] = v14[8];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = v7[10];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
  v18 = a3[5];
  v19 = a3[6];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  v23 = (char *)a1 + v19;
  v24 = (char *)a2 + v19;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_QWORD *)v23 + 4) = *((_QWORD *)v24 + 4);
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v28, v29) == 1)
  {
    v30 = type metadata accessor for Font.Context(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v27, v28, v30);
    swift_storeEnumTagMultiPayload(v27, v29, 1);
  }
  else
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  v31 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
  v32 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v32) = *(_OWORD *)((char *)a2 + v32);
  v33 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v33) = *(_OWORD *)((char *)a2 + v33);
  v34 = a3[15];
  *(_OWORD *)((char *)a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v34) = *(_OWORD *)((char *)a2 + v34);
  v35 = a3[17];
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  *(_OWORD *)((char *)a1 + v35) = *(_OWORD *)((char *)a2 + v35);
  *(_OWORD *)((char *)a1 + a3[18]) = *(_OWORD *)((char *)a2 + a3[18]);
  return a1;
}

_QWORD *sub_100062B90(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for TimerSessionEntry(0);
  v11 = v10[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *((_BYTE *)a1 + v10[7]) = *((_BYTE *)a2 + v10[7]);
  v15 = v10[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = v10[9];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = v10[10];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v25[8] = v26[8];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_QWORD *)((char *)a1 + v10[11]) = *(_QWORD *)((char *)a2 + v10[11]);
  v27 = a3[5];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  sub_100007CF0((_QWORD *)((char *)a1 + v27));
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
  v31 = a3[6];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  sub_100007CF0((_QWORD *)((char *)a1 + v31));
  v34 = *((_OWORD *)v33 + 1);
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_OWORD *)v32 + 1) = v34;
  *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
  if (a1 != a2)
  {
    v35 = a3[7];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    sub_100011484((uint64_t)a1 + v35, &qword_1000AF270);
    v38 = sub_10000A58C(&qword_1000AF270);
    if (swift_getEnumCaseMultiPayload(v37, v38) == 1)
    {
      v39 = type metadata accessor for Font.Context(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v36, v37, v39);
      swift_storeEnumTagMultiPayload(v36, v38, 1);
    }
    else
    {
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
  }
  v40 = a3[8];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  *v41 = *v42;
  v43 = v41[1];
  v41[1] = v42[1];
  swift_release(v43);
  v44 = a3[9];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  *v45 = *v46;
  v47 = *((_QWORD *)v45 + 1);
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  swift_release(v47);
  v48 = a3[10];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  *v49 = *v50;
  v51 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = *((_QWORD *)v50 + 1);
  swift_release(v51);
  v52 = a3[11];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  *v53 = *v54;
  v55 = *((_QWORD *)v53 + 1);
  *((_QWORD *)v53 + 1) = *((_QWORD *)v54 + 1);
  swift_release(v55);
  v56 = a3[12];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  *v57 = *v58;
  v59 = *((_QWORD *)v57 + 1);
  *((_QWORD *)v57 + 1) = *((_QWORD *)v58 + 1);
  swift_release(v59);
  v60 = a3[13];
  v61 = (char *)a1 + v60;
  v62 = (char *)a2 + v60;
  *v61 = *v62;
  v63 = *((_QWORD *)v61 + 1);
  *((_QWORD *)v61 + 1) = *((_QWORD *)v62 + 1);
  swift_release(v63);
  v64 = a3[14];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  *v65 = *v66;
  v67 = *((_QWORD *)v65 + 1);
  *((_QWORD *)v65 + 1) = *((_QWORD *)v66 + 1);
  swift_release(v67);
  v68 = a3[15];
  v69 = (char *)a1 + v68;
  v70 = (char *)a2 + v68;
  *v69 = *v70;
  v71 = *((_QWORD *)v69 + 1);
  *((_QWORD *)v69 + 1) = *((_QWORD *)v70 + 1);
  swift_release(v71);
  v72 = a3[16];
  v73 = (char *)a1 + v72;
  v74 = (char *)a2 + v72;
  *v73 = *v74;
  v75 = *((_QWORD *)v73 + 1);
  *((_QWORD *)v73 + 1) = *((_QWORD *)v74 + 1);
  swift_release(v75);
  v76 = a3[17];
  v77 = (char *)a1 + v76;
  v78 = (char *)a2 + v76;
  *v77 = *v78;
  v79 = *((_QWORD *)v77 + 1);
  *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
  swift_release(v79);
  v80 = a3[18];
  v81 = (char *)a1 + v80;
  v82 = (char *)a2 + v80;
  *v81 = *v82;
  v83 = *((_QWORD *)v81 + 1);
  *((_QWORD *)v81 + 1) = *((_QWORD *)v82 + 1);
  swift_release(v83);
  return a1;
}

uint64_t sub_100062EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062EFC);
}

uint64_t sub_100062EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for TimerSessionEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_10000A58C((uint64_t *)&unk_1000AFBC0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100062FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062FB8);
}

uint64_t sub_100062FB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for TimerSessionEntry(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
      return result;
    }
    v10 = sub_10000A58C((uint64_t *)&unk_1000AFBC0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100063064(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[15];

  v2 = type metadata accessor for TimerSessionEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "(";
    v6[2] = "(";
    sub_10000FCA0(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_100084778;
      v6[5] = &unk_100084778;
      v6[6] = &unk_100084778;
      v6[7] = &unk_100084778;
      v6[8] = &unk_100084778;
      v6[9] = &unk_100084778;
      v6[10] = &unk_100084778;
      v6[11] = &unk_100084778;
      v6[12] = &unk_100084778;
      v6[13] = &unk_100084778;
      v6[14] = &unk_100084778;
      swift_initStructMetadata(a1, 256, 15, v6, a1 + 16);
    }
  }
}

uint64_t sub_100063110(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008B944, 1);
}

uint64_t sub_100063120@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v87 = a2;
  v3 = sub_10000A58C(&qword_1000B2848);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v86 = sub_10000A58C(&qword_1000B2850);
  v6 = __chkstk_darwin(v86);
  v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v78 - v9;
  v84 = sub_10000A58C(&qword_1000B2858);
  __chkstk_darwin(v84);
  v85 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000B2860);
  __chkstk_darwin(v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_10000A58C(&qword_1000B2868);
  __chkstk_darwin(v79);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000A58C(&qword_1000B2870);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v80 = sub_10000A58C(&qword_1000B2878);
  __chkstk_darwin(v80);
  v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10000A58C(&qword_1000B2880);
  v22 = __chkstk_darwin(v83);
  v24 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v81 = (uint64_t)&v78 - v26;
  v27 = GeometryProxy.size.getter(v25);
  v28 = type metadata accessor for TimerSessionEntry(0);
  v29 = *(int *)(v28 + 28);
  v82 = a1;
  if (*(_BYTE *)(a1 + v29) == 2)
  {
    *v19 = static Alignment.center.getter(v28);
    v19[1] = v30;
    v31 = (uint64_t)v19 + *(int *)(sub_10000A58C(&qword_1000B28C8) + 44);
    if (qword_1000AED50 != -1)
      swift_once(&qword_1000AED50, sub_10007486C);
    v32 = *(double *)&qword_1000B7070;
    if (qword_1000AED58 != -1)
      swift_once(&qword_1000AED58, sub_10007487C);
    v33 = *(double *)&qword_1000B7078 * 0.5;
    *(_QWORD *)v14 = static HorizontalAlignment.center.getter();
    *((_QWORD *)v14 + 1) = 0;
    v14[16] = 1;
    v34 = sub_10000A58C(&qword_1000B28D0);
    v35 = sub_10006378C(v82, (uint64_t)&v14[*(int *)(v34 + 44)], v27, v32);
    v36 = static Edge.Set.vertical.getter(v35);
    v37 = EdgeInsets.init(_all:)(v33);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    sub_100011440((uint64_t)v14, (uint64_t)v16, &qword_1000B2860);
    v44 = &v16[*(int *)(v79 + 36)];
    *v44 = v36;
    *((double *)v44 + 1) = v37;
    *((_QWORD *)v44 + 2) = v39;
    *((_QWORD *)v44 + 3) = v41;
    *((_QWORD *)v44 + 4) = v43;
    v44[40] = 0;
    v45 = sub_100011484((uint64_t)v14, &qword_1000B2860);
    v46 = static Edge.Set.horizontal.getter(v45);
    v47 = EdgeInsets.init(_all:)(v32);
    v49 = v48;
    v51 = v50;
    v53 = v52;
    sub_100011440((uint64_t)v16, v31, &qword_1000B2868);
    v54 = v31 + *(int *)(sub_10000A58C(&qword_1000B28D8) + 36);
    *(_BYTE *)v54 = v46;
    *(double *)(v54 + 8) = v47;
    *(_QWORD *)(v54 + 16) = v49;
    *(_QWORD *)(v54 + 24) = v51;
    *(_QWORD *)(v54 + 32) = v53;
    *(_BYTE *)(v54 + 40) = 0;
    v55 = sub_100011484((uint64_t)v16, &qword_1000B2868);
    v56 = static Color.black.getter(v55);
    v57 = static Edge.Set.all.getter(v56);
    sub_100011440((uint64_t)v19, (uint64_t)v21, &qword_1000B2870);
    v58 = &v21[*(int *)(v80 + 36)];
    *(_QWORD *)v58 = v56;
    v58[8] = v57;
    v59 = sub_100011484((uint64_t)v19, &qword_1000B2870);
    v60 = static Edge.Set.vertical.getter(v59);
    sub_100011440((uint64_t)v21, (uint64_t)v24, &qword_1000B2878);
    v61 = v83;
    v24[*(int *)(v83 + 36)] = v60;
    sub_100011484((uint64_t)v21, &qword_1000B2878);
    v62 = &qword_1000B2880;
    v63 = v81;
    sub_1000112A4((uint64_t)v24, v81, &qword_1000B2880);
    v64 = v85;
    sub_100011440(v63, v85, &qword_1000B2880);
    swift_storeEnumTagMultiPayload(v64, v84, 0);
    v65 = sub_100011020(&qword_1000B2890, &qword_1000B2880, (void (*)(void))sub_10006855C);
    v66 = sub_1000685F8();
    _ConditionalContent<>.init(storage:)(v64, v61, v86, v65, v66);
    v67 = v63;
  }
  else
  {
    if (GeometryProxy.safeAreaInsets.getter() == 0.0)
    {
      if (qword_1000AEDA8 != -1)
        swift_once(&qword_1000AEDA8, sub_100074954);
      v68 = *(double *)&qword_1000B70C8;
    }
    else
    {
      v68 = GeometryProxy.safeAreaInsets.getter();
    }
    *v5 = static Alignment.bottom.getter();
    v5[1] = v69;
    v70 = sub_10000A58C(&qword_1000B2888);
    v71 = sub_100065E18(v82, (uint64_t)v5 + *(int *)(v70 + 44), v27, v68);
    v72 = static Edge.Set.all.getter(v71);
    sub_100011440((uint64_t)v5, (uint64_t)v8, &qword_1000B2848);
    v73 = v86;
    v8[*(int *)(v86 + 36)] = v72;
    sub_100011484((uint64_t)v5, &qword_1000B2848);
    v62 = &qword_1000B2850;
    sub_1000112A4((uint64_t)v8, (uint64_t)v10, &qword_1000B2850);
    v74 = v85;
    sub_100011440((uint64_t)v10, v85, &qword_1000B2850);
    swift_storeEnumTagMultiPayload(v74, v84, 1);
    v75 = sub_100011020(&qword_1000B2890, &qword_1000B2880, (void (*)(void))sub_10006855C);
    v76 = sub_1000685F8();
    _ConditionalContent<>.init(storage:)(v74, v83, v73, v75, v76);
    v67 = (uint64_t)v10;
  }
  return sub_100011484(v67, v62);
}

uint64_t sub_10006378C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE v22[368];
  _BYTE v23[384];
  _QWORD v24[49];
  _QWORD v25[2];
  char v26;
  _BYTE v27[375];

  v8 = sub_10000A58C(&qword_1000B28E0);
  v9 = __chkstk_darwin(v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v9);
  v14 = &v22[-v13];
  *(_QWORD *)v14 = static VerticalAlignment.top.getter(v12);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = sub_10000A58C(&qword_1000B28E8);
  v16 = sub_100063970(a1, (uint64_t)&v14[*(int *)(v15 + 44)], a3, a4);
  v17 = static VerticalAlignment.center.getter(v16);
  sub_1000651F4(a1, (uint64_t)v22);
  v23[376] = 1;
  memcpy(&v23[7], v22, 0x170uLL);
  sub_100011440((uint64_t)v14, (uint64_t)v11, &qword_1000B28E0);
  sub_100011440((uint64_t)v11, a2, &qword_1000B28E0);
  v18 = sub_10000A58C(&qword_1000B28F0);
  v19 = a2 + *(int *)(v18 + 48);
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = (void *)(a2 + *(int *)(v18 + 64));
  v24[0] = v17;
  v24[1] = 0;
  LOBYTE(v24[2]) = 1;
  memcpy((char *)&v24[2] + 1, v23, 0x177uLL);
  memcpy(v20, v24, 0x188uLL);
  sub_10006867C(v24);
  sub_100011484((uint64_t)v14, &qword_1000B28E0);
  v25[0] = v17;
  v25[1] = 0;
  v26 = 1;
  memcpy(v27, v23, sizeof(v27));
  sub_1000687A0(v25);
  return sub_100011484((uint64_t)v11, &qword_1000B28E0);
}

uint64_t sub_100063970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const __CTFont *v59;
  CGFloat CapHeight;
  CGFloat *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (**v73)();
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (**v106)();
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  _OWORD v149[3];

  v144 = a2;
  v133 = type metadata accessor for Date(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v130 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000B28F8);
  __chkstk_darwin(v8);
  v134 = (uint64_t)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_10000A58C(&qword_1000B2900);
  __chkstk_darwin(v131);
  v137 = (uint64_t)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_10000A58C(&qword_1000B2908);
  __chkstk_darwin(v136);
  v138 = (uint64_t)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = sub_10000A58C(&qword_1000B2910);
  __chkstk_darwin(v135);
  v141 = (uint64_t)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_10000A58C(&qword_1000B2918);
  v13 = __chkstk_darwin(v140);
  v143 = (uint64_t)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v139 = (uint64_t)&v114 - v16;
  __chkstk_darwin(v15);
  v142 = (uint64_t)&v114 - v17;
  v145 = type metadata accessor for LinearTimerTimelineCountdown(0);
  v125 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v126 = v18;
  v129 = (uint64_t)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for Font.Context(0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v115 = (uint64_t)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10000A58C(&qword_1000B2920);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10000A58C(&qword_1000B2928);
  __chkstk_darwin(v24);
  v26 = (char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_10000A58C(&qword_1000B2930);
  __chkstk_darwin(v118);
  v28 = (char *)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_10000A58C(&qword_1000B2938);
  __chkstk_darwin(v120);
  v30 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_10000A58C(&qword_1000B2940);
  __chkstk_darwin(v119);
  v32 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_10000A58C(&qword_1000B2948);
  __chkstk_darwin(v121);
  v34 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_10000A58C(&qword_1000B2950);
  __chkstk_darwin(v123);
  v124 = (uint64_t)&v114 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_10000A58C(&qword_1000B2958);
  v37 = __chkstk_darwin(v36);
  v128 = (uint64_t)&v114 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v122 = (char *)&v114 - v40;
  __chkstk_darwin(v39);
  v127 = (uint64_t)&v114 - v41;
  v42 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.764705882, 0.0431372549, 1.0));
  sub_10006467C(a1, v42);
  swift_release(v42);
  v44 = static Alignment.leading.getter(v43);
  v46 = sub_10006141C(0.0, 1, 0.0, 1, a3 * 0.5 - a4, 0, 0.0, 1, (uint64_t)v26, 0.0, 1, 0.0, 1, v44, v45, &qword_1000B2920, &qword_1000B2928);
  (*(void (**)(char *, uint64_t, __n128))(v21 + 8))(v23, v20, v46);
  if (qword_1000AED78 != -1)
    swift_once(&qword_1000AED78, sub_1000748EC);
  v47 = qword_1000B7098;
  v48 = static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)(v149, 0, 1, v47, 0, v48, v49);
  sub_100011440((uint64_t)v26, (uint64_t)v28, &qword_1000B2928);
  v50 = &v28[*(int *)(v118 + 36)];
  v51 = v149[1];
  *(_OWORD *)v50 = v149[0];
  *((_OWORD *)v50 + 1) = v51;
  *((_OWORD *)v50 + 2) = v149[2];
  sub_100011484((uint64_t)v26, &qword_1000B2928);
  v52 = v145;
  v53 = a1 + *(int *)(v145 + 40);
  v54 = *(_BYTE *)v53;
  v118 = v53;
  v55 = *(_QWORD *)(v53 + 8);
  v146 = v54;
  v147 = v55;
  v56 = sub_10000A58C(&qword_1000AF3F8);
  State.wrappedValue.getter(&v148);
  if (v148 == 1)
  {
    if (qword_1000AED60 != -1)
      swift_once(&qword_1000AED60, sub_10007488C);
    v57 = qword_1000B7080;
    v58 = v115;
    sub_100034360(v115);
    v59 = (const __CTFont *)Font.platformFont(in:)(v58, v57);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v58, v117);
    CapHeight = CTFontGetCapHeight(v59);

  }
  else
  {
    CapHeight = 50.0;
  }
  sub_100011440((uint64_t)v28, (uint64_t)v30, &qword_1000B2930);
  v61 = (CGFloat *)&v30[*(int *)(v120 + 36)];
  *v61 = 0.0;
  v61[1] = CapHeight;
  sub_100011484((uint64_t)v28, &qword_1000B2930);
  v62 = a1 + *(int *)(v52 + 60);
  v63 = *(_BYTE *)v62;
  v64 = *(_QWORD *)(v62 + 8);
  v146 = v63;
  v147 = v64;
  v120 = v56;
  State.wrappedValue.getter(&v148);
  if (v148)
    v65 = 1.0;
  else
    v65 = 0.0;
  sub_100011440((uint64_t)v30, (uint64_t)v32, &qword_1000B2938);
  *(double *)&v32[*(int *)(v119 + 36)] = v65;
  sub_100011484((uint64_t)v30, &qword_1000B2938);
  if (qword_1000AEE58 != -1)
    swift_once(&qword_1000AEE58, sub_100074D70);
  v66 = qword_1000B7178;
  sub_100011440((uint64_t)v32, (uint64_t)v34, &qword_1000B2940);
  *(_QWORD *)&v34[*(int *)(v121 + 36)] = v66;
  swift_retain(v66);
  sub_100011484((uint64_t)v32, &qword_1000B2940);
  v67 = v129;
  sub_10000E800(a1, v129, type metadata accessor for LinearTimerTimelineCountdown);
  v68 = *(unsigned __int8 *)(v125 + 80);
  v69 = (v68 + 16) & ~v68;
  v126 += v69;
  v125 = v68 | 7;
  v70 = swift_allocObject(&unk_1000A1998, v126, v68 | 7);
  sub_10002B89C(v67, v70 + v69, type metadata accessor for LinearTimerTimelineCountdown);
  v71 = v124;
  sub_100011440((uint64_t)v34, v124, &qword_1000B2948);
  v72 = v123;
  v73 = (uint64_t (**)())(v71 + *(int *)(v123 + 36));
  *v73 = sub_1000689E0;
  v73[1] = (uint64_t (*)())v70;
  v73[2] = 0;
  v73[3] = 0;
  sub_100011484((uint64_t)v34, &qword_1000B2948);
  v74 = LocalizedStringKey.init(stringLiteral:)(0x72656D6954, 0xE500000000000000);
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v81 = a1;
  v82 = sub_100011020(&qword_1000B2960, &qword_1000B2950, (void (*)(void))sub_1000689EC);
  v83 = v78 & 1;
  v84 = (uint64_t)v122;
  View.accessibilityLabel(_:)(v74, v76, v83, v80, v72, v82);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v76);
  sub_100011484(v71, &qword_1000B2950);
  v85 = v127;
  v86 = sub_1000112A4(v84, v127, &qword_1000B2958);
  v87 = v130;
  v88 = static Date.now.getter(v86);
  if (qword_1000AED68 != -1)
    v88 = swift_once(&qword_1000AED68, sub_1000748B0);
  v89 = qword_1000B7088;
  v90 = static Color.white.getter(v88);
  v91 = v134;
  sub_100064A08(v81, v87, v89, v90, v134);
  v92 = swift_release(v90);
  (*(void (**)(void *, uint64_t, __n128))(v132 + 8))(v87, v133, v92);
  v93 = *(_QWORD *)(v118 + 8);
  v146 = *(_BYTE *)v118;
  v147 = v93;
  State.wrappedValue.getter(&v148);
  v94 = 0.0;
  if (v148)
    v95 = 0.0;
  else
    v95 = 50.0;
  v96 = v137;
  sub_100011440(v91, v137, &qword_1000B28F8);
  v97 = v96 + *(int *)(v131 + 36);
  *(_QWORD *)v97 = 0;
  *(double *)(v97 + 8) = v95;
  sub_100011484(v91, &qword_1000B28F8);
  v98 = v81 + *(int *)(v145 + 56);
  v99 = *(_BYTE *)v98;
  v100 = *(_QWORD *)(v98 + 8);
  v146 = v99;
  v147 = v100;
  State.wrappedValue.getter(&v148);
  if (v148)
    v94 = 1.0;
  v101 = v138;
  sub_100011440(v96, v138, &qword_1000B2900);
  *(double *)(v101 + *(int *)(v136 + 36)) = v94;
  sub_100011484(v96, &qword_1000B2900);
  v102 = qword_1000B7178;
  v103 = v141;
  sub_100011440(v101, v141, &qword_1000B2908);
  *(_QWORD *)(v103 + *(int *)(v135 + 36)) = v102;
  swift_retain(v102);
  sub_100011484(v101, &qword_1000B2908);
  sub_10000E800(v81, v67, type metadata accessor for LinearTimerTimelineCountdown);
  v104 = swift_allocObject(&unk_1000A19C0, v126, v125);
  sub_10002B89C(v67, v104 + v69, type metadata accessor for LinearTimerTimelineCountdown);
  v105 = v139;
  sub_100011440(v103, v139, &qword_1000B2910);
  v106 = (uint64_t (**)())(v105 + *(int *)(v140 + 36));
  *v106 = sub_100068CF4;
  v106[1] = (uint64_t (*)())v104;
  v106[2] = 0;
  v106[3] = 0;
  sub_100011484(v103, &qword_1000B2910);
  v107 = v142;
  sub_1000112A4(v105, v142, &qword_1000B2918);
  v108 = v128;
  sub_100011440(v85, v128, &qword_1000B2958);
  v109 = v143;
  sub_100011440(v107, v143, &qword_1000B2918);
  v110 = v144;
  sub_100011440(v108, v144, &qword_1000B2958);
  v111 = sub_10000A58C(&qword_1000B29D0);
  v112 = v110 + *(int *)(v111 + 48);
  *(_QWORD *)v112 = 0;
  *(_BYTE *)(v112 + 8) = 1;
  sub_100011440(v109, v110 + *(int *)(v111 + 64), &qword_1000B2918);
  sub_100011484(v107, &qword_1000B2918);
  sub_100011484(v85, &qword_1000B2958);
  sub_100011484(v109, &qword_1000B2918);
  return sub_100011484(v108, &qword_1000B2958);
}

double sub_10006467C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006787C(a1, a2, &v24);
  v9 = v24;
  v10 = v25;
  v11 = v26;
  v12 = v27;
  if (qword_1000AED60 != -1)
    swift_once(&qword_1000AED60, sub_10007488C);
  v13 = qword_1000B7080;
  KeyPath = swift_getKeyPath(&unk_1000848A0, v8);
  v16 = swift_getKeyPath(&unk_100084810, v15);
  v24 = v9;
  v25 = v10;
  v26 = v11;
  v27 = v12;
  v28 = 256;
  v29 = KeyPath;
  v30 = v13;
  v31 = v16;
  v32 = 2;
  v33 = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.large(_:), v4);
  swift_retain(v13);
  v17 = sub_10000A58C(&qword_1000B2990);
  v18 = sub_100068B6C();
  View.dynamicTypeSize(_:)(v7, v17, v18);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v19 = v27;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  sub_10000E774(v24, v25, v26);
  swift_release(v22);
  swift_release(v20);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_100064824()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE28 != -1)
    swift_once(&qword_1000AEE28, sub_100074C44);
  v0 = __chkstk_darwin(qword_1000B7148);
  withAnimation<A>(_:_:)(v0, sub_100068D50);
  if (qword_1000AEE30 != -1)
    swift_once(&qword_1000AEE30, sub_100074C58);
  v1 = __chkstk_darwin(qword_1000B7150);
  return withAnimation<A>(_:_:)(v1, sub_100068D68);
}

uint64_t sub_100064928(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 40));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100064998(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 60));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100064A08@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t KeyPath;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;

  v90 = a4;
  v92 = a5;
  v91 = type metadata accessor for Color.RGBColorSpace(0);
  v89 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v88 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DynamicTypeSize(0);
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  __chkstk_darwin(v9);
  v75 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Font._StylisticAlternative(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000A58C(&qword_1000AF418);
  v82 = *(_QWORD *)(v15 - 8);
  v83 = v15;
  __chkstk_darwin(v15);
  v74 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000A58C(&qword_1000AF420);
  __chkstk_darwin(v17);
  v76 = (uint64_t)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_10000A58C(&qword_1000AF428);
  __chkstk_darwin(v79);
  v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_10000A58C(&qword_1000B29D8);
  __chkstk_darwin(v85);
  v80 = (uint64_t)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10000A58C(&qword_1000B29E0);
  __chkstk_darwin(v86);
  v81 = (uint64_t)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_10000A58C(&qword_1000B29E8);
  __chkstk_darwin(v87);
  v84 = (uint64_t)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100067664(a1, a2);
  v93 = v24;
  v94 = v25;
  v26 = sub_10000EB0C();
  v27 = Text.init<A>(_:)(&v93, &type metadata for String, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = Font.monospacedDigit()(a3);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Font._StylisticAlternative.three(_:), v11);
  v35 = Font._stylisticAlternative(_:)(v14, v34);
  v36 = swift_release(v34);
  (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v36);
  v37 = Text.font(_:)(v35, v27, v29, v33, v31);
  v39 = v38;
  LOBYTE(v34) = v40;
  v42 = v41;
  swift_release(v35);
  sub_10000E774(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  v93 = v37;
  v94 = v39;
  v95 = v34 & 1;
  v96 = v42;
  v44 = v77;
  v43 = v78;
  v45 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v75, enum case for DynamicTypeSize.large(_:), v78);
  v46 = v74;
  View.dynamicTypeSize(_:)(v45, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v43);
  sub_10000E774(v93, v94, v95);
  v47 = swift_bridgeObjectRelease(v96);
  v48 = static Alignment.bottomTrailing.getter(v47);
  v49 = v76;
  v51 = sub_10006141C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v76, 0.0, 1, 0.0, 1, v48, v50, &qword_1000AF418, &qword_1000AF420);
  (*(void (**)(char *, uint64_t, __n128))(v82 + 8))(v46, v83, v51);
  KeyPath = swift_getKeyPath(&unk_1000847E0, v52);
  sub_100011440(v49, (uint64_t)v20, &qword_1000AF420);
  v54 = (uint64_t *)&v20[*(int *)(v79 + 36)];
  v55 = v90;
  *v54 = KeyPath;
  v54[1] = v55;
  swift_retain(v55);
  sub_100011484(v49, &qword_1000AF420);
  v56 = v88;
  (*(void (**)(char *, _QWORD, uint64_t))(v89 + 104))(v88, enum case for Color.RGBColorSpace.sRGBLinear(_:), v91);
  v57 = Color.init(_:white:opacity:)(v56, 0.0, 0.33);
  v58 = v80;
  sub_100011440((uint64_t)v20, v80, &qword_1000AF428);
  v59 = (uint64_t *)(v58 + *(int *)(v85 + 36));
  *v59 = v57;
  v59[1] = 0x3FF0000000000000;
  v59[2] = 0;
  v59[3] = 0;
  sub_100011484((uint64_t)v20, &qword_1000AF428);
  v61 = swift_getKeyPath(&unk_100084810, v60);
  v62 = v81;
  sub_100011440(v58, v81, &qword_1000B29D8);
  v63 = v62 + *(int *)(v86 + 36);
  *(_QWORD *)v63 = v61;
  *(_QWORD *)(v63 + 8) = 1;
  *(_BYTE *)(v63 + 16) = 0;
  sub_100011484(v58, &qword_1000B29D8);
  v65 = swift_getKeyPath(&unk_100084840, v64);
  v66 = v84;
  sub_100011440(v62, v84, &qword_1000B29E0);
  v67 = v66 + *(int *)(v87 + 36);
  *(_QWORD *)v67 = v65;
  *(_BYTE *)(v67 + 8) = 1;
  sub_100011484(v62, &qword_1000B29E0);
  v69 = swift_getKeyPath(&unk_100084870, v68);
  v70 = v92;
  sub_100011440(v66, v92, &qword_1000B29E8);
  v71 = (uint64_t *)(v70 + *(int *)(sub_10000A58C(&qword_1000B28F8) + 36));
  *v71 = v69;
  v71[1] = 0x3FE6666666666666;
  return sub_100011484(v66, &qword_1000B29E8);
}

uint64_t sub_100065010()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE18 != -1)
    swift_once(&qword_1000AEE18, sub_100074C08);
  v0 = __chkstk_darwin(qword_1000B7138);
  withAnimation<A>(_:_:)(v0, sub_100068D00);
  if (qword_1000AEE20 != -1)
    swift_once(&qword_1000AEE20, sub_100074C1C);
  v1 = __chkstk_darwin(qword_1000B7140);
  return withAnimation<A>(_:_:)(v1, sub_100068D18);
}

uint64_t sub_100065114(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 36));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100065184(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 56));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

_QWORD *sub_1000651F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  int v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  double v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE v133[183];
  char v134;
  _QWORD v135[4];
  __int128 v136;
  uint64_t (*v137)();
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)();
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD v153[4];
  __int128 v154;
  uint64_t (*v155)();
  uint64_t v156;
  char v157;
  _BYTE v158[7];
  uint64_t v159;
  uint64_t v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  char *v167;
  uint64_t (*v168)();
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE v172[7];
  _DWORD v173[2];
  _DWORD v174[4];

  v99 = type metadata accessor for SlideTransition(0);
  v97 = *(_QWORD *)(v99 - 8);
  v4 = __chkstk_darwin(v99);
  v100 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v96 = (char *)&v85 - v6;
  *(double *)&v7 = COERCE_DOUBLE(type metadata accessor for LinearTimerTimelineCountdown(0));
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = static Color.white.getter(v10);
  v109 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.17254902, 0.17254902, 0.17254902, 1.0));
  sub_10000E800(a1, (uint64_t)v11, type metadata accessor for LinearTimerTimelineCountdown);
  v12 = *(unsigned __int8 *)(v8 + 80);
  v107 = ((v12 + 16) & ~v12) + v9;
  *(_QWORD *)&v108 = (v12 + 16) & ~v12;
  v13 = v108;
  v14 = v12 | 7;
  v105 = swift_allocObject(&unk_1000A18F8, v107, v12 | 7);
  sub_10002B89C((uint64_t)v11, v105 + v13, type metadata accessor for LinearTimerTimelineCountdown);
  LOBYTE(v153[0]) = 0;
  State.init(wrappedValue:)(v133, v153, &type metadata for Bool);
  v103 = v133[0];
  v104 = *(_QWORD *)&v133[8];
  v15 = a1 + *(int *)(v7 + 48);
  v17 = *(_QWORD *)(v15 + 8);
  v133[0] = *(_BYTE *)v15;
  v16 = v133[0];
  *(_QWORD *)&v133[8] = v17;
  v18 = sub_10000A58C(&qword_1000AF3F8);
  State.wrappedValue.getter(v153);
  LODWORD(v93) = LOBYTE(v153[0]);
  v98 = *(double *)&v7;
  v19 = a1 + *(int *)(v7 + 68);
  v20 = *(_BYTE *)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v133[0] = v20;
  *(_QWORD *)&v133[8] = v21;
  State.wrappedValue.getter(v153);
  v92 = LOBYTE(v153[0]);
  v133[0] = v16;
  v22 = v107;
  *(_QWORD *)&v133[8] = v17;
  v23 = a1;
  v88 = v18;
  v24 = State.wrappedValue.getter(v153);
  v89 = LOBYTE(v153[0]);
  v25 = static UnitPoint.center.getter(v24);
  v101 = v26;
  v102 = v25;
  v27 = v96;
  SlideTransition.init()();
  v28 = v97;
  v29 = v99;
  v30 = v100;
  (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v100, v27, v99);
  v31 = sub_1000073C0(&qword_1000AF400, (uint64_t (*)(uint64_t))&type metadata accessor for SlideTransition, (uint64_t)&protocol conformance descriptor for SlideTransition);
  v100 = (char *)AnyTransition.init<A>(_:)(v30, v29, v31);
  v174[0] = *(_DWORD *)v172;
  *(_DWORD *)((char *)v174 + 3) = *(_DWORD *)&v172[3];
  v32 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33 = v108;
  v32(v27, v29);
  v173[0] = v174[0];
  *(_DWORD *)((char *)v173 + 3) = *(_DWORD *)((char *)v174 + 3);
  sub_10000E800(v23, (uint64_t)v11, type metadata accessor for LinearTimerTimelineCountdown);
  v99 = swift_allocObject(&unk_1000A1920, v22, v14);
  v34 = sub_10002B89C((uint64_t)v11, v99 + v33, type metadata accessor for LinearTimerTimelineCountdown);
  if (qword_1000AED90 != -1)
    v34 = swift_once(&qword_1000AED90, sub_100074920);
  v97 = qword_1000B70B0;
  v96 = (char *)static Color.black.getter(v34);
  v35 = 1.0;
  v95 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.764705882, 0.0431372549, 1.0));
  sub_10000E800(v23, (uint64_t)v11, type metadata accessor for LinearTimerTimelineCountdown);
  v94 = swift_allocObject(&unk_1000A1948, v22, v14);
  sub_10002B89C((uint64_t)v11, v94 + v33, type metadata accessor for LinearTimerTimelineCountdown);
  LOBYTE(v153[0]) = 0;
  State.init(wrappedValue:)(v133, v153, &type metadata for Bool);
  v91 = v133[0];
  v90 = *(_QWORD *)&v133[8];
  v36 = v98;
  v37 = v23 + *(int *)(*(_QWORD *)&v98 + 52);
  v38 = *(_BYTE *)v37;
  v87 = v11;
  v39 = *(_QWORD *)(v37 + 8);
  v133[0] = v38;
  *(_QWORD *)&v133[8] = v39;
  State.wrappedValue.getter(v153);
  v40 = LOBYTE(v153[0]);
  v41 = v23 + *(int *)(*(_QWORD *)&v36 + 72);
  v42 = *(_BYTE *)v41;
  v43 = *(_QWORD *)(v41 + 8);
  v133[0] = v42;
  *(_QWORD *)&v133[8] = v43;
  State.wrappedValue.getter(v153);
  v86 = v14;
  v44 = v23;
  v45 = LOBYTE(v153[0]);
  v133[0] = v38;
  *(_QWORD *)&v133[8] = v39;
  v46 = State.wrappedValue.getter(v153);
  v47 = LOBYTE(v153[0]);
  v48 = static UnitPoint.center.getter(v46);
  v50 = v49;
  if (qword_1000AEE58 != -1)
    swift_once(&qword_1000AEE58, sub_100074D70);
  if (v47)
    v51 = 1.0;
  else
    v51 = 0.8;
  if (v45)
    v52 = 1.0;
  else
    v52 = 0.0;
  if (v40)
    v53 = 0.0;
  else
    v53 = 150.0;
  if (v89)
    v54 = 1.0;
  else
    v54 = 0.8;
  if (!v92)
    v35 = 0.0;
  v98 = v35;
  if (LODWORD(v93))
    v55 = 0.0;
  else
    v55 = 150.0;
  v93 = v55;
  v56 = qword_1000B7178;
  v57 = (uint64_t)v87;
  sub_10000E800(v44, (uint64_t)v87, type metadata accessor for LinearTimerTimelineCountdown);
  v58 = swift_allocObject(&unk_1000A1970, v107, v86);
  sub_10002B89C(v57, v58 + v108, type metadata accessor for LinearTimerTimelineCountdown);
  *(_QWORD *)&v110 = 0x746165706572;
  *((_QWORD *)&v110 + 1) = 0xE600000000000000;
  v59 = v105;
  v60 = v106;
  *(_QWORD *)&v111 = v106;
  *((_QWORD *)&v111 + 1) = v109;
  v108 = xmmword_100080F70;
  v112 = xmmword_100080F70;
  *(_QWORD *)&v113 = sub_1000688C4;
  *((_QWORD *)&v113 + 1) = v105;
  v61 = v103;
  LOBYTE(v114) = v103;
  *(_DWORD *)((char *)&v114 + 1) = v173[0];
  DWORD1(v114) = *(_DWORD *)((char *)v173 + 3);
  v62 = v104;
  *((_QWORD *)&v114 + 1) = v104;
  *(_QWORD *)&v115 = 0;
  *((double *)&v115 + 1) = v55;
  *(double *)&v116 = v35;
  *((double *)&v116 + 1) = v54;
  *(double *)&v117 = v54;
  v64 = v101;
  v63 = v102;
  *((double *)&v117 + 1) = v102;
  *(_QWORD *)&v118 = v101;
  v65 = v99;
  v66 = v100;
  *((_QWORD *)&v118 + 1) = v100;
  *(_QWORD *)&v119 = sub_1000688D4;
  v120 = 0uLL;
  *((_QWORD *)&v119 + 1) = v99;
  v123 = xmmword_100080F60;
  v67 = v94;
  *(_QWORD *)&v124 = sub_100068920;
  *((_QWORD *)&v124 + 1) = v94;
  v68 = v91;
  LOBYTE(v125) = v91;
  v69 = v90;
  *((_QWORD *)&v125 + 1) = v90;
  *(_QWORD *)&v126 = 0;
  *((double *)&v126 + 1) = v53;
  *(double *)&v127 = v52;
  *((double *)&v127 + 1) = v51;
  *(double *)&v128 = v51;
  *((double *)&v128 + 1) = v48;
  *(_QWORD *)&v129 = v50;
  *((_QWORD *)&v129 + 1) = v56;
  *(_QWORD *)&v130 = sub_100068970;
  *((_QWORD *)&v130 + 1) = v58;
  v70 = v119;
  *(_OWORD *)(a2 + 128) = v118;
  *(_OWORD *)(a2 + 144) = v70;
  *(_OWORD *)(a2 + 160) = v120;
  v71 = v115;
  *(_OWORD *)(a2 + 64) = v114;
  *(_OWORD *)(a2 + 80) = v71;
  v72 = v117;
  *(_OWORD *)(a2 + 96) = v116;
  *(_OWORD *)(a2 + 112) = v72;
  v73 = v111;
  *(_OWORD *)a2 = v110;
  *(_OWORD *)(a2 + 16) = v73;
  v74 = v113;
  *(_OWORD *)(a2 + 32) = v112;
  *(_OWORD *)(a2 + 48) = v74;
  *(_OWORD *)&v133[71] = v125;
  *(_OWORD *)&v133[55] = v124;
  *(_OWORD *)&v133[119] = v128;
  *(_OWORD *)&v133[135] = v129;
  *(_QWORD *)&v121 = 1886352499;
  *((_QWORD *)&v121 + 1) = 0xE400000000000000;
  v76 = v95;
  v75 = v96;
  *(_QWORD *)&v122 = v96;
  *((_QWORD *)&v122 + 1) = v95;
  v132 = 0;
  v131 = 0;
  *(_OWORD *)&v133[151] = v130;
  *(_OWORD *)&v133[167] = 0u;
  *(_OWORD *)&v133[87] = v126;
  *(_OWORD *)&v133[103] = v127;
  *(_OWORD *)&v133[7] = v121;
  *(_OWORD *)&v133[23] = v122;
  *(_OWORD *)&v133[39] = v123;
  v77 = *(_OWORD *)&v133[128];
  v78 = *(_OWORD *)&v133[160];
  *(_OWORD *)(a2 + 329) = *(_OWORD *)&v133[144];
  *(_OWORD *)(a2 + 345) = v78;
  v79 = *(_OWORD *)&v133[80];
  *(_OWORD *)(a2 + 249) = *(_OWORD *)&v133[64];
  v80 = *(_OWORD *)&v133[96];
  v81 = *(_OWORD *)&v133[112];
  *(_OWORD *)(a2 + 265) = v79;
  *(_OWORD *)(a2 + 281) = v80;
  *(_OWORD *)(a2 + 297) = v81;
  *(_OWORD *)(a2 + 313) = v77;
  v82 = *(_OWORD *)&v133[16];
  *(_OWORD *)(a2 + 185) = *(_OWORD *)v133;
  *(_OWORD *)(a2 + 201) = v82;
  v83 = *(_OWORD *)&v133[48];
  *(_OWORD *)(a2 + 217) = *(_OWORD *)&v133[32];
  v134 = 0;
  *(_QWORD *)(a2 + 176) = v97;
  *(_BYTE *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 360) = *(_QWORD *)&v133[175];
  *(_OWORD *)(a2 + 233) = v83;
  v135[0] = 1886352499;
  v135[1] = 0xE400000000000000;
  v135[2] = v75;
  v135[3] = v76;
  v136 = xmmword_100080F60;
  v137 = sub_100068920;
  v138 = v67;
  v139 = v68;
  v140 = v69;
  v141 = 0;
  v142 = v53;
  v143 = v52;
  v144 = v51;
  v145 = v51;
  v146 = v48;
  v147 = v50;
  v148 = v56;
  v149 = sub_100068970;
  v152 = 0;
  v150 = v58;
  v151 = 0;
  sub_1000108F4(&v110);
  sub_1000108F4(&v121);
  swift_retain(v56);
  sub_100010A00(v135);
  v153[0] = 0x746165706572;
  v153[1] = 0xE600000000000000;
  v153[2] = v60;
  v153[3] = v109;
  v154 = v108;
  v155 = sub_1000688C4;
  v156 = v59;
  v157 = v61;
  *(_DWORD *)v158 = v173[0];
  *(_DWORD *)&v158[3] = *(_DWORD *)((char *)v173 + 3);
  v159 = v62;
  v160 = 0;
  v161 = v93;
  v162 = v98;
  v163 = v54;
  v164 = v54;
  v165 = v63;
  v166 = v64;
  v167 = v66;
  v168 = sub_1000688D4;
  v171 = 0;
  v169 = v65;
  v170 = 0;
  return sub_100010A00(v153);
}

uint64_t sub_100065A50()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE38 != -1)
    swift_once(&qword_1000AEE38, sub_100074C6C);
  v0 = __chkstk_darwin(qword_1000B7158);
  withAnimation<A>(_:_:)(v0, sub_1000689AC);
  if (qword_1000AEE40 != -1)
    swift_once(&qword_1000AEE40, sub_100074C80);
  v1 = __chkstk_darwin(qword_1000B7160);
  return withAnimation<A>(_:_:)(v1, sub_1000689C4);
}

uint64_t sub_100065B54(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 48));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100065BC4(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 68));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100065C34()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1000AEE48 != -1)
    swift_once(&qword_1000AEE48, sub_100074C94);
  v0 = __chkstk_darwin(qword_1000B7168);
  withAnimation<A>(_:_:)(v0, sub_10006897C);
  if (qword_1000AEE50 != -1)
    swift_once(&qword_1000AEE50, sub_100074D00);
  v1 = __chkstk_darwin(qword_1000B7170);
  return withAnimation<A>(_:_:)(v1, sub_100068994);
}

uint64_t sub_100065D38(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 52));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100065DA8(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[9];
  uint64_t v7;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 72));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v6[1] = v2;
  v7 = v3;
  v6[0] = 1;
  v4 = sub_10000A58C(&qword_1000AF3F8);
  return State.wrappedValue.setter(v6, v4);
}

uint64_t sub_100065E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D2>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  void (*v43)(char *, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (**v69)(double *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  double v149[2];

  v126 = a1;
  v144 = a2;
  v6 = type metadata accessor for DynamicTypeSize(0);
  v142 = *(_QWORD *)(v6 - 8);
  v143 = v6;
  __chkstk_darwin(v6);
  v141 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000B29F0);
  __chkstk_darwin(v8);
  v129 = (uint64_t *)((char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10000A58C(&qword_1000B29F8);
  __chkstk_darwin(v10);
  v131 = (uint64_t)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000A58C(&qword_1000B2A00);
  __chkstk_darwin(v12);
  v133 = (char **)((char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v130 = sub_10000A58C(&qword_1000B2A08);
  __chkstk_darwin(v130);
  v134 = (uint64_t)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_10000A58C(&qword_1000B2A10);
  __chkstk_darwin(v136);
  v135 = (uint64_t)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_10000A58C(&qword_1000B2A18);
  v138 = *(_QWORD *)(v140 - 8);
  v16 = __chkstk_darwin(v140);
  v139 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v137 = (char *)&v121 - v18;
  v122 = type metadata accessor for LinearTimerTimelineCountdown(0);
  v124 = *(_QWORD *)(v122 - 8);
  v125 = *(_QWORD *)(v124 + 64);
  __chkstk_darwin(v122);
  v123 = (uint64_t)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = (char *)sub_10000A58C(&qword_1000B2A20);
  v20 = __chkstk_darwin(v132);
  v128 = (uint64_t)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v121 = (char *)&v121 - v22;
  v127 = sub_10000A58C(&qword_1000B2A28);
  v23 = __chkstk_darwin(v127);
  v25 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v146 = (uint64_t)&v121 - v26;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v30 = (char *)&v121 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10000A58C(&qword_1000B2A30);
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v121 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v121 - v36;
  static Date.now.getter(v35);
  v38 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.764705882, 0.0431372549, 1.0));
  v39 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.831372549, 0.431372549, 0.0, 1.0));
  v40 = static Color.black.getter(v39);
  v41 = v126;
  sub_100066968(v30, v38, v39, v40, (uint64_t)v34, a3, a4);
  swift_release(v38);
  swift_release(v39);
  v42 = swift_release(v40);
  v43 = *(void (**)(char *, uint64_t, __n128))(v28 + 8);
  v43(v30, v27, v42);
  v145 = v37;
  v44 = sub_1000112A4((uint64_t)v34, (uint64_t)v37, &qword_1000B2A30);
  v45 = static Date.now.getter(v44);
  v46 = static Color.black.getter(v45);
  v47 = static Color.secondary.getter(v46);
  v48 = static Color.white.getter(v47);
  sub_100066968(v30, v46, v47, v48, (uint64_t)v34, a3, a4);
  swift_release(v46);
  swift_release(v47);
  v49 = swift_release(v48);
  v43(v30, v27, v49);
  v50 = v41;
  v51 = (uint64_t)v121;
  v52 = (uint64_t *)(v41 + *(int *)(v122 + 32));
  v53 = *v52;
  v54 = v52[1];
  v147 = v53;
  v148 = v54;
  sub_10000A58C(&qword_1000B2A38);
  State.wrappedValue.getter(v149);
  v55 = v149[0] * a3;
  sub_100011440((uint64_t)v34, v51, &qword_1000B2A30);
  v56 = v51 + *((int *)v132 + 9);
  *(double *)v56 = v55;
  *(_QWORD *)(v56 + 8) = 0;
  *(_WORD *)(v56 + 16) = 256;
  v132 = v34;
  sub_100011484((uint64_t)v34, &qword_1000B2A30);
  v57 = v123;
  sub_10000E800(v41, v123, type metadata accessor for LinearTimerTimelineCountdown);
  v58 = *(unsigned __int8 *)(v124 + 80);
  v59 = (v58 + 16) & ~v58;
  v60 = swift_allocObject(&unk_1000A19E8, v59 + v125, v58 | 7);
  sub_10002B89C(v57, v60 + v59, type metadata accessor for LinearTimerTimelineCountdown);
  if (qword_1000AECD8 != -1)
    swift_once(&qword_1000AECD8, sub_1000376B4);
  v61 = qword_1000B6EE8;
  v147 = qword_1000B6EE8;
  v62 = type metadata accessor for DisplayLink();
  v63 = sub_1000073C0(&qword_1000B2A40, (uint64_t (*)(uint64_t))type metadata accessor for DisplayLink, (uint64_t)&unk_100082EB0);
  v64 = swift_retain(v61);
  v65 = Publisher.eraseToAnyPublisher()(v62, v63, v64);
  v66 = v128;
  sub_100011440(v51, v128, &qword_1000B2A20);
  v67 = swift_allocObject(&unk_1000A1A10, 32, 7);
  *(_QWORD *)(v67 + 16) = sub_100068D8C;
  *(_QWORD *)(v67 + 24) = v60;
  v68 = v127;
  *(_QWORD *)&v25[*(int *)(v127 + 52)] = v65;
  sub_1000112A4(v66, (uint64_t)v25, &qword_1000B2A20);
  swift_release(v61);
  v69 = (uint64_t (**)(double *))&v25[*(int *)(v68 + 56)];
  *v69 = sub_100068DF4;
  v69[1] = (uint64_t (*)(double *))v67;
  sub_100011484(v51, &qword_1000B2A20);
  sub_1000112A4((uint64_t)v25, v146, &qword_1000B2A28);
  v70 = (uint64_t)v25;
  if (qword_1000AEE60 != -1)
    swift_once(&qword_1000AEE60, sub_100074DCC);
  v71 = (uint64_t)v133;
  *v133 = qword_1000B7180;
  *(_QWORD *)(v71 + 8) = 0;
  *(_BYTE *)(v71 + 16) = 1;
  v72 = sub_10000A58C(&qword_1000B2A48);
  v73 = *(int *)(v72 + 44);
  if (qword_1000AEE00 != -1)
    v72 = swift_once(&qword_1000AEE00, sub_100074B98);
  v74 = v71 + v73;
  v75 = qword_1000B7120;
  v76 = static VerticalAlignment.center.getter(v72);
  v77 = (uint64_t)v129;
  *v129 = v76;
  *(_QWORD *)(v77 + 8) = v75;
  *(_BYTE *)(v77 + 16) = 0;
  v78 = sub_10000A58C(&qword_1000B2A50);
  v79 = sub_100067C1C(v50, v77 + *(int *)(v78 + 44));
  v80 = static Alignment.bottomLeading.getter(v79);
  v81 = v131;
  sub_1000617A0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v131, 0.0, 1, 0.0, 1, v80, v82, &qword_1000B29F0, &qword_1000B29F8);
  sub_100011484(v77, &qword_1000B29F0);
  v83 = qword_1000B7180;
  sub_100011440(v81, v74, &qword_1000B29F8);
  v84 = (uint64_t *)(v74 + *(int *)(sub_10000A58C(&qword_1000B2A58) + 36));
  *v84 = v83;
  v84[1] = (uint64_t)sub_100066DF4;
  v84[2] = 0;
  v85 = sub_100011484(v81, &qword_1000B29F8);
  LOBYTE(v74) = static Edge.Set.horizontal.getter(v85);
  v86 = EdgeInsets.init(_all:)(a4);
  v88 = v87;
  v90 = v89;
  v92 = v91;
  v93 = v134;
  sub_100011440(v71, v134, &qword_1000B2A00);
  v94 = v93 + *(int *)(v130 + 36);
  *(_BYTE *)v94 = v74;
  *(double *)(v94 + 8) = v86;
  *(_QWORD *)(v94 + 16) = v88;
  *(_QWORD *)(v94 + 24) = v90;
  *(_QWORD *)(v94 + 32) = v92;
  *(_BYTE *)(v94 + 40) = 0;
  sub_100011484(v71, &qword_1000B2A00);
  LOBYTE(v74) = static Edge.Set.bottom.getter(v95);
  v96 = EdgeInsets.init(_all:)(a4 + -12.0);
  v98 = v97;
  v100 = v99;
  v102 = v101;
  v103 = v135;
  sub_100011440(v93, v135, &qword_1000B2A08);
  v104 = v136;
  v105 = v103 + *(int *)(v136 + 36);
  *(_BYTE *)v105 = v74;
  *(double *)(v105 + 8) = v96;
  *(_QWORD *)(v105 + 16) = v98;
  *(_QWORD *)(v105 + 24) = v100;
  *(_QWORD *)(v105 + 32) = v102;
  *(_BYTE *)(v105 + 40) = 0;
  sub_100011484(v93, &qword_1000B2A08);
  v107 = v141;
  v106 = v142;
  v108 = v143;
  (*(void (**)(char *, _QWORD, uint64_t))(v142 + 104))(v141, enum case for DynamicTypeSize.large(_:), v143);
  v109 = sub_100011020(&qword_1000B2A60, &qword_1000B2A10, (void (*)(void))sub_100068E18);
  v110 = v139;
  View.dynamicTypeSize(_:)(v107, v104, v109);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
  sub_100011484(v103, &qword_1000B2A10);
  v112 = v137;
  v111 = v138;
  v113 = v140;
  (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v137, v110, v140);
  v114 = (uint64_t)v132;
  sub_100011440((uint64_t)v145, (uint64_t)v132, &qword_1000B2A30);
  v115 = v146;
  sub_100011440(v146, v70, &qword_1000B2A28);
  v116 = *(void (**)(char *, char *, uint64_t))(v111 + 16);
  v116(v110, v112, v113);
  v117 = v144;
  sub_100011440(v114, v144, &qword_1000B2A30);
  v118 = sub_10000A58C(&qword_1000B2A78);
  sub_100011440(v70, v117 + *(int *)(v118 + 48), &qword_1000B2A28);
  v116((char *)(v117 + *(int *)(v118 + 64)), v110, v113);
  v119 = *(void (**)(char *, uint64_t))(v111 + 8);
  v119(v112, v113);
  sub_100011484(v115, &qword_1000B2A28);
  sub_100011484((uint64_t)v145, &qword_1000B2A30);
  v119(v110, v113);
  sub_100011484(v70, &qword_1000B2A28);
  return sub_100011484(v114, &qword_1000B2A30);
}

void sub_100066968(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D2>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  char v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;

  v55 = a4;
  v53 = a3;
  v12 = sub_10000A58C(&qword_1000B2AA0);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000A58C(&qword_1000B2AA8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v40 - v20;
  v22 = static Alignment.center.getter(v19);
  sub_1000615F8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v56, 0.0, 1, INFINITY, 0, v22, v23, a2);
  v24 = v56[0];
  v25 = v56[1];
  v26 = v57;
  v52 = v58;
  v51 = v59;
  v50 = v60;
  v49 = v61;
  v48 = v62;
  v47 = v63;
  v46 = v64;
  v45 = v65;
  v44 = v66;
  v43 = v67;
  v42 = v68;
  v41 = v69;
  if (qword_1000AEE60 != -1)
    swift_once(&qword_1000AEE60, sub_100074DCC);
  *(_QWORD *)v14 = qword_1000B7180;
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v27 = sub_10000A58C(&qword_1000B2AB0);
  v28 = sub_100066E18(v54, v53, a1, v55, (uint64_t)&v14[*(int *)(v27 + 44)], a6, a7);
  v29 = static Edge.Set.horizontal.getter(v28);
  v30 = EdgeInsets.init(_all:)(a7);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  sub_100011440((uint64_t)v14, (uint64_t)v18, &qword_1000B2AA0);
  v37 = &v18[*(int *)(v15 + 36)];
  *v37 = v29;
  *((double *)v37 + 1) = v30;
  *((_QWORD *)v37 + 2) = v32;
  *((_QWORD *)v37 + 3) = v34;
  *((_QWORD *)v37 + 4) = v36;
  v37[40] = 0;
  sub_100011484((uint64_t)v14, &qword_1000B2AA0);
  sub_1000112A4((uint64_t)v18, (uint64_t)v21, &qword_1000B2AA8);
  sub_100011440((uint64_t)v21, (uint64_t)v18, &qword_1000B2AA8);
  *(_QWORD *)a5 = v24;
  *(_QWORD *)(a5 + 8) = v25;
  *(_BYTE *)(a5 + 16) = v26;
  *(_QWORD *)(a5 + 24) = v52;
  *(_BYTE *)(a5 + 32) = v51;
  *(_QWORD *)(a5 + 40) = v50;
  *(_BYTE *)(a5 + 48) = v49;
  *(_QWORD *)(a5 + 56) = v48;
  *(_BYTE *)(a5 + 64) = v47;
  *(_QWORD *)(a5 + 72) = v46;
  *(_BYTE *)(a5 + 80) = v45;
  *(_QWORD *)(a5 + 88) = v44;
  *(_BYTE *)(a5 + 96) = v43;
  v38 = v41;
  *(_QWORD *)(a5 + 104) = v42;
  *(_QWORD *)(a5 + 112) = v38;
  v39 = sub_10000A58C(&qword_1000B2AB8);
  sub_100011440((uint64_t)v18, a5 + *(int *)(v39 + 48), &qword_1000B2AA8);
  swift_retain(v24);
  sub_100011484((uint64_t)v21, &qword_1000B2AA8);
  sub_100011484((uint64_t)v18, &qword_1000B2AA8);
  swift_release(v24);
}

void sub_100066D24(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12[3];
  double v13;

  v5 = type metadata accessor for TimerSessionEntry(0);
  if (!*(_BYTE *)(a1 + *(int *)(v5 + 28)))
  {
    v6 = a1 + *(int *)(v5 + 36);
    if ((*(_BYTE *)(v6 + 8) & 1) == 0)
    {
      v7 = a3 / *(double *)v6;
      v8 = (double *)(a1 + *(int *)(type metadata accessor for LinearTimerTimelineCountdown(0) + 32));
      v9 = *v8;
      v10 = v8[1];
      swift_retain(*(_QWORD *)&v10);
      v11 = sub_10000A58C(&qword_1000B2A38);
      State.wrappedValue.getter(&v13);
      v12[0] = v7 + v13;
      v12[1] = v9;
      v12[2] = v10;
      State.wrappedValue.setter(v12, v11);
      swift_release(*(_QWORD *)&v10);
    }
  }
}

uint64_t sub_100066DF4()
{
  uint64_t v0;

  v0 = static VerticalAlignment.bottom.getter();
  return ViewDimensions.subscript.getter(v0);
}

uint64_t sub_100066E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D2>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  __n128 v26;
  char v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  v14 = sub_10000A58C(&qword_1000B2AC0);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10000A58C(&qword_1000B2AC8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v39 - v21;
  v23 = type metadata accessor for TimerSessionEntry(0);
  if (*(_BYTE *)(a1 + *(int *)(v23 + 28)))
    v24 = *(double *)(a1 + *(int *)(v23 + 44));
  else
    v24 = Date.timeIntervalSinceNow.getter();
  *(_QWORD *)v16 = static HorizontalAlignment.trailing.getter();
  *((_QWORD *)v16 + 1) = 0xC034000000000000;
  v16[16] = 0;
  v25 = sub_10000A58C(&qword_1000B2AD0);
  sub_100067058(a1, a2, a3, a4, (uint64_t)&v16[*(int *)(v25 + 44)], a6, a7, v24);
  v27 = static Edge.Set.bottom.getter(v26);
  v28 = sub_100067530(v24);
  v29 = EdgeInsets.init(_all:)(v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_100011440((uint64_t)v16, (uint64_t)v20, &qword_1000B2AC0);
  v36 = &v20[*(int *)(v17 + 36)];
  *v36 = v27;
  *((double *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  sub_100011484((uint64_t)v16, &qword_1000B2AC0);
  sub_1000112A4((uint64_t)v20, (uint64_t)v22, &qword_1000B2AC8);
  sub_100011440((uint64_t)v22, (uint64_t)v20, &qword_1000B2AC8);
  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 1;
  v37 = sub_10000A58C(&qword_1000B2AD8);
  sub_100011440((uint64_t)v20, a5 + *(int *)(v37 + 48), &qword_1000B2AC8);
  sub_100011484((uint64_t)v22, &qword_1000B2AC8);
  return sub_100011484((uint64_t)v20, &qword_1000B2AC8);
}

uint64_t sub_100067058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t KeyPath;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[3];

  v63 = a4;
  v61 = a3;
  v59 = a2;
  v57 = a1;
  v66 = a5;
  v12 = sub_10000A58C(&qword_1000B28F8);
  __chkstk_darwin(v12);
  v60 = (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10000A58C(&qword_1000B2AE0);
  __chkstk_darwin(v62);
  v58 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10000A58C(&qword_1000B2AE8);
  v15 = __chkstk_darwin(v64);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v65 = (uint64_t)&v56 - v18;
  v19 = sub_10000A58C(&qword_1000B2920);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10000A58C(&qword_1000B2928);
  __chkstk_darwin(v23);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10000A58C(&qword_1000B2AF0);
  v27 = __chkstk_darwin(v26);
  v29 = (char *)&v56 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v56 - v30;
  sub_10006467C(a1, v59);
  v32 = a6 * 0.5;
  v34 = static Alignment.trailing.getter(v33);
  v36 = sub_10006141C(0.0, 1, 0.0, 1, v32 - a7, 0, 0.0, 1, (uint64_t)v25, 0.0, 1, 0.0, 1, v34, v35, &qword_1000B2920, &qword_1000B2928);
  (*(void (**)(char *, uint64_t, __n128))(v20 + 8))(v22, v19, v36);
  KeyPath = swift_getKeyPath(&unk_1000848D0, v37);
  sub_100011440((uint64_t)v25, (uint64_t)v29, &qword_1000B2928);
  v39 = &v29[*(int *)(v26 + 36)];
  *(_QWORD *)v39 = KeyPath;
  v39[8] = 2;
  sub_100011484((uint64_t)v25, &qword_1000B2928);
  sub_1000112A4((uint64_t)v29, (uint64_t)v31, &qword_1000B2AF0);
  v40 = v57;
  v41 = sub_100069100(a8);
  swift_retain(v41);
  v42 = v60;
  sub_100064A08(v40, v61, v41, v63, v60);
  v43 = v41;
  v44 = (uint64_t)v58;
  swift_release(v43);
  v46 = static Alignment.center.getter(v45);
  _FrameLayout.init(width:height:alignment:)(v67, *(_QWORD *)&v32, 0, 0, 1, v46, v47);
  sub_100011440(v42, v44, &qword_1000B28F8);
  v48 = (_OWORD *)(v44 + *(int *)(v62 + 36));
  v49 = v67[1];
  *v48 = v67[0];
  v48[1] = v49;
  v48[2] = v67[2];
  sub_100011484(v42, &qword_1000B28F8);
  if (qword_1000AEE60 != -1)
    swift_once(&qword_1000AEE60, sub_100074DCC);
  v50 = qword_1000B7180;
  sub_100011440(v44, (uint64_t)v17, &qword_1000B2AE0);
  v51 = (uint64_t *)&v17[*(int *)(v64 + 36)];
  *v51 = v50;
  v51[1] = (uint64_t)sub_10006750C;
  v51[2] = 0;
  sub_100011484(v44, &qword_1000B2AE0);
  v52 = v65;
  sub_1000112A4((uint64_t)v17, v65, &qword_1000B2AE8);
  sub_100011440((uint64_t)v31, (uint64_t)v29, &qword_1000B2AF0);
  sub_100011440(v52, (uint64_t)v17, &qword_1000B2AE8);
  v53 = v66;
  sub_100011440((uint64_t)v29, v66, &qword_1000B2AF0);
  v54 = sub_10000A58C(&qword_1000B2AF8);
  sub_100011440((uint64_t)v17, v53 + *(int *)(v54 + 48), &qword_1000B2AE8);
  sub_100011484(v52, &qword_1000B2AE8);
  sub_100011484((uint64_t)v31, &qword_1000B2AF0);
  sub_100011484((uint64_t)v17, &qword_1000B2AE8);
  return sub_100011484((uint64_t)v29, &qword_1000B2AF0);
}

uint64_t sub_10006750C()
{
  uint64_t v0;

  v0 = static VerticalAlignment.lastTextBaseline.getter();
  return ViewDimensions.subscript.getter(v0);
}

double sub_100067530(double a1)
{
  uint64_t *v3;

  if (a1 >= 0.0 && a1 < 600.0)
  {
    if (qword_1000AEDD0 != -1)
      swift_once(&qword_1000AEDD0, sub_100074A38);
    v3 = &qword_1000B70F0;
  }
  else if (a1 >= 600.0 && a1 < 3600.0)
  {
    if (qword_1000AEDD8 != -1)
      swift_once(&qword_1000AEDD8, sub_100074A48);
    v3 = &qword_1000B70F8;
  }
  else if (a1 < 3600.0 || a1 >= 36000.0)
  {
    if (qword_1000AEDE8 != -1)
      swift_once(&qword_1000AEDE8, sub_100074A68);
    v3 = &qword_1000B7108;
  }
  else
  {
    if (qword_1000AEDE0 != -1)
      swift_once(&qword_1000AEDE0, sub_100074A58);
    v3 = &qword_1000B7100;
  }
  return *(double *)v3;
}

void sub_100067664(uint64_t a1, id a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t (*v16)(_QWORD);
  int v17;
  uint64_t v18;
  long double v19;
  Class isa;
  long double v21;
  Class v22;
  uint64_t v23;

  v4 = type metadata accessor for Locale(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(unsigned __int8 *)(a1 + *(int *)(v12 + 28));
  sub_10000E800(a1, (uint64_t)v14, v16);
  if (v15)
  {
    v17 = v14[*(int *)(v11 + 28)];
    v18 = sub_10000E844((uint64_t)v14, type metadata accessor for TimerSessionEntry);
    if (v17 == 2)
      goto LABEL_6;
    v19 = *(double *)(a1 + *(int *)(v11 + 44));
    static Locale.current.getter(v18);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    a2 = sub_100006028(0, 0, 1, 1, 0, 0, 0, (uint64_t)isa, v19);

    v10 = v8;
    if (a2)
    {
LABEL_7:
      static String._unconditionallyBridgeFromObjectiveC(_:)(a2);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      return;
    }
    __break(1u);
  }
  v18 = sub_10000E844((uint64_t)v14, type metadata accessor for TimerSessionEntry);
LABEL_6:
  static Locale.current.getter(v18);
  v21 = Date.timeIntervalSince(_:)(a2);
  v22 = Locale._bridgeToObjectiveC()().super.isa;
  a2 = sub_100006028(0, 0, 1, 1, 0, 0, 0, (uint64_t)v22, v21);

  if (a2)
    goto LABEL_7;
  __break(1u);
}

uint64_t sub_10006787C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  void *object;
  uint64_t countAndFlagsBits;
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t result;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  Swift::String v68;

  v64 = a2;
  v65 = a3;
  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28)) == 2)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(1, 1);
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v7);
    if (qword_1000AEE08 != -1)
      swift_once(&qword_1000AEE08, sub_100074BA8);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(qword_1000B7128);
    v8._countAndFlagsBits = 32;
    v8._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v8);
    v9 = LocalizedStringKey.init(stringInterpolation:)(v6);
  }
  else
  {
    v9 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  }
  v10 = Text.init(_:tableName:bundle:comment:)(v9);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = static Color.secondary.getter(v10);
  v18 = Text.foregroundColor(_:)(v17, v10, v12, v16, v14);
  v62 = v19;
  v63 = v20;
  v22 = v21;
  swift_release(v17);
  sub_10000E774(v10, v12, v16);
  swift_bridgeObjectRelease(v14);
  countAndFlagsBits = *(_QWORD *)(a1 + 16);
  object = *(void **)(a1 + 24);
  if (countAndFlagsBits == 0x5F544E4552525543 && object == (void *)0xED000052454D4954
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0x5F544E4552525543, 0xED000052454D4954, 0) & 1) != 0)
  {
    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v68._object = (void *)0x8000000100085D60;
    v26._countAndFlagsBits = 0x72656D6954;
    v26._object = (void *)0xE500000000000000;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    v68._countAndFlagsBits = 0xD000000000000013;
    v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v68);
    countAndFlagsBits = v28._countAndFlagsBits;
    object = v28._object;

  }
  else
  {
    swift_bridgeObjectRetain(object);
  }
  v29 = v22 & 1;
  v61 = v22 & 1;
  v66 = countAndFlagsBits;
  v67 = object;
  v30 = sub_10000EB0C();
  v31 = StringProtocol.localizedUppercase.getter(&type metadata for String, v30);
  v33 = v32;
  swift_bridgeObjectRelease(object);
  v66 = v31;
  v67 = v33;
  v34 = Text.init<A>(_:)(&v66, &type metadata for String, v30);
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  v41 = Text.foregroundColor(_:)(v64, v34, v35, v40, v37);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  sub_10000E774(v34, v36, v40);
  swift_bridgeObjectRelease(v38);
  v48 = v18;
  v49 = v62;
  v50 = v29;
  v51 = v18;
  v52 = v63;
  v53 = static Text.+ infix(_:_:)(v48, v62, v50, v63, v41, v43, v47, v45);
  v55 = v54;
  LOBYTE(v38) = v56;
  v64 = v57;
  sub_10000E774(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  sub_10000E774(v51, v49, v61);
  result = swift_bridgeObjectRelease(v52);
  v59 = v65;
  *v65 = v53;
  v59[1] = v55;
  *((_BYTE *)v59 + 16) = v38 & 1;
  v59[3] = v64;
  return result;
}

uint64_t sub_100067C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t (**v39)();
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t (**v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t (**v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  void (*v75)(char *, _QWORD, uint64_t);
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;

  v82 = a2;
  v77 = sub_10000A58C(&qword_1000B2A80);
  __chkstk_darwin(v77);
  v78 = (uint64_t)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LinearTimerTimelineCountdown(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v83 = v6;
  v85 = (uint64_t)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for BlendMode(0);
  v7 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v86 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Material(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for MediumActionButton(0);
  v14 = __chkstk_darwin(v13);
  v81 = (uint64_t)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v72 - v16;
  v18 = sub_10000A58C(&qword_1000B2A88);
  v19 = __chkstk_darwin(v18);
  v80 = (uint64_t)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v84 = (uint64_t)&v72 - v21;
  v22 = type metadata accessor for TimerSessionEntry(0);
  v23 = *(unsigned __int8 *)(a1 + *(int *)(v22 + 28));
  v24 = static Color.white.getter(v22);
  v73 = v7;
  v74 = (void (*)(char *, char *, uint64_t))v24;
  v79 = a1;
  v72 = v10;
  if (v23)
  {
    if (qword_1000AEE68 != -1)
      swift_once(&qword_1000AEE68, sub_100074DF8);
    v25 = sub_100068E9C(v9, (uint64_t)qword_1000B7188);
    v76 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v76(v12, v25, v9);
    v26 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
    v27 = v86;
    v28 = v87;
    v75 = v26;
    v26(v86, enum case for BlendMode.screen(_:), v87);
    v29 = v9;
    v30 = v12;
    v31 = v85;
    sub_10000E800(a1, v85, type metadata accessor for LinearTimerTimelineCountdown);
    v32 = *(unsigned __int8 *)(v5 + 80);
    v33 = (v32 + 16) & ~v32;
    v34 = swift_allocObject(&unk_1000A1A38, v33 + v83, v32 | 7);
    v35 = v31;
    v12 = v30;
    v9 = v29;
    sub_10002B89C(v35, v34 + v33, type metadata accessor for LinearTimerTimelineCountdown);
    *(_QWORD *)v17 = 0x6C69662E79616C70;
    *((_QWORD *)v17 + 1) = 0xE90000000000006CLL;
    *((_QWORD *)v17 + 2) = v74;
    v36 = &v17[v13[6]];
    v74 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v74(v36, v12, v29);
    v37 = &v17[v13[7]];
    *(_OWORD *)v37 = xmmword_1000846A0;
    *((_OWORD *)v37 + 1) = xmmword_1000846B0;
    *((_OWORD *)v37 + 2) = xmmword_1000846C0;
    *((_OWORD *)v37 + 3) = xmmword_1000846D0;
    *((_OWORD *)v37 + 4) = xmmword_1000846E0;
    v38 = &v17[v13[8]];
    v73 = *(_QWORD *)(v73 + 32);
    ((void (*)(char *, char *, uint64_t))v73)(v38, v27, v28);
    v39 = (uint64_t (**)())&v17[v13[9]];
    *v39 = sub_100068EB8;
    v39[1] = (uint64_t (*)())v34;
    v40 = v78;
    sub_10000E800((uint64_t)v17, v78, type metadata accessor for MediumActionButton);
    swift_storeEnumTagMultiPayload(v40, v77, 1);
    v41 = sub_1000073C0(&qword_1000B2A90, type metadata accessor for MediumActionButton, (uint64_t)&unk_100084554);
    _ConditionalContent<>.init(storage:)(v40, v13, v13, v41, v41);
  }
  else
  {
    if (qword_1000AEE68 != -1)
      swift_once(&qword_1000AEE68, sub_100074DF8);
    v42 = sub_100068E9C(v9, (uint64_t)qword_1000B7188);
    v76 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v76(v12, v42, v9);
    v43 = v86;
    v44 = v87;
    v75 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
    v75(v86, enum case for BlendMode.screen(_:), v87);
    v45 = v85;
    sub_10000E800(a1, v85, type metadata accessor for LinearTimerTimelineCountdown);
    v32 = *(unsigned __int8 *)(v5 + 80);
    v46 = (v32 + 16) & ~v32;
    v47 = swift_allocObject(&unk_1000A1A88, v46 + v83, v32 | 7);
    sub_10002B89C(v45, v47 + v46, type metadata accessor for LinearTimerTimelineCountdown);
    *(_QWORD *)v17 = 0x69662E6573756170;
    *((_QWORD *)v17 + 1) = 0xEA00000000006C6CLL;
    *((_QWORD *)v17 + 2) = v74;
    v48 = &v17[v13[6]];
    v74 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v74(v48, v12, v9);
    v49 = &v17[v13[7]];
    *(_OWORD *)v49 = xmmword_1000846A0;
    *((_OWORD *)v49 + 1) = xmmword_1000846B0;
    *((_OWORD *)v49 + 2) = xmmword_1000846C0;
    *((_OWORD *)v49 + 3) = xmmword_1000846D0;
    *((_OWORD *)v49 + 4) = xmmword_1000846E0;
    v50 = &v17[v13[8]];
    v73 = *(_QWORD *)(v73 + 32);
    ((void (*)(char *, char *, uint64_t))v73)(v50, v43, v44);
    v51 = (uint64_t (**)())&v17[v13[9]];
    *v51 = sub_1000690A8;
    v51[1] = (uint64_t (*)())v47;
    v52 = v78;
    sub_10000E800((uint64_t)v17, v78, type metadata accessor for MediumActionButton);
    swift_storeEnumTagMultiPayload(v52, v77, 0);
    v53 = sub_1000073C0(&qword_1000B2A90, type metadata accessor for MediumActionButton, (uint64_t)&unk_100084554);
    _ConditionalContent<>.init(storage:)(v52, v13, v13, v53, v53);
  }
  v54 = sub_10000E844((uint64_t)v17, type metadata accessor for MediumActionButton);
  v78 = static Color.white.getter(v54);
  if (qword_1000AEE70 != -1)
    swift_once(&qword_1000AEE70, sub_100074E2C);
  v55 = sub_100068E9C(v9, (uint64_t)qword_1000B71A0);
  v76(v12, v55, v9);
  v56 = v86;
  v57 = v87;
  v75(v86, enum case for BlendMode.sourceAtop(_:), v87);
  v58 = v9;
  v59 = v12;
  v60 = v85;
  sub_10000E800(v79, v85, type metadata accessor for LinearTimerTimelineCountdown);
  v61 = v32;
  v62 = (v32 + 16) & ~(unint64_t)v32;
  v63 = swift_allocObject(&unk_1000A1A60, v62 + v83, v61 | 7);
  sub_10002B89C(v60, v63 + v62, type metadata accessor for LinearTimerTimelineCountdown);
  *(_QWORD *)v17 = 0x6B72616D78;
  *((_QWORD *)v17 + 1) = 0xE500000000000000;
  *((_QWORD *)v17 + 2) = v78;
  v74(&v17[v13[6]], v59, v58);
  v64 = &v17[v13[7]];
  *(_OWORD *)v64 = xmmword_1000846F0;
  *((_OWORD *)v64 + 1) = xmmword_100084700;
  *((_OWORD *)v64 + 2) = xmmword_100084710;
  *((_OWORD *)v64 + 3) = xmmword_100084720;
  *((_OWORD *)v64 + 4) = xmmword_1000846E0;
  ((void (*)(char *, char *, uint64_t))v73)(&v17[v13[8]], v56, v57);
  v65 = (uint64_t (**)())&v17[v13[9]];
  *v65 = sub_100068EC8;
  v65[1] = (uint64_t (*)())v63;
  v66 = v84;
  v67 = v80;
  sub_100011440(v84, v80, &qword_1000B2A88);
  v68 = v81;
  sub_10000E800((uint64_t)v17, v81, type metadata accessor for MediumActionButton);
  v69 = v82;
  sub_100011440(v67, v82, &qword_1000B2A88);
  v70 = sub_10000A58C(&qword_1000B2A98);
  sub_10000E800(v68, v69 + *(int *)(v70 + 48), type metadata accessor for MediumActionButton);
  sub_10000E844((uint64_t)v17, type metadata accessor for MediumActionButton);
  sub_100011484(v66, &qword_1000B2A88);
  sub_10000E844(v68, type metadata accessor for MediumActionButton);
  return sub_100011484(v67, &qword_1000B2A88);
}

uint64_t sub_100068408(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v4;

  v4 = type metadata accessor for LinearTimerTimelineCountdown(0);
  sub_10000E784((_QWORD *)((char *)a1 + *(int *)(v4 + 24)), *(_QWORD *)((char *)a1 + *(int *)(v4 + 24) + 24));
  return a2(*a1, a1[1]);
}

uint64_t sub_100068450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  sub_10000E800(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LinearTimerTimelineCountdown);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_1000A18D0, v7 + v5, v6 | 7);
  result = sub_10002B89C((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, type metadata accessor for LinearTimerTimelineCountdown);
  *(_QWORD *)a2 = sub_100068510;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_100068510@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LinearTimerTimelineCountdown(0) - 8) + 80);
  return sub_100063120(v1 + ((v3 + 16) & ~v3), a1);
}

unint64_t sub_10006855C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2898;
  if (!qword_1000B2898)
  {
    v1 = sub_10000E880(&qword_1000B2878);
    sub_100011680(&qword_1000B28A0, &qword_1000B2870, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100011680(&qword_1000B28A8, &qword_1000B28B0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2898);
  }
  return result;
}

unint64_t sub_1000685F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B28B8;
  if (!qword_1000B28B8)
  {
    v1 = sub_10000E880(&qword_1000B2850);
    sub_100011680(&qword_1000B28C0, &qword_1000B2848, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B28B8);
  }
  return result;
}

_QWORD *sub_10006867C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[10];
  v6 = a1[20];
  v7 = a1[21];
  v8 = a1[22];
  v9 = a1[24];
  v14 = a1[28];
  v15 = a1[29];
  v16 = a1[30];
  v17 = a1[34];
  v10 = a1[36];
  v12 = a1[23];
  v13 = a1[44];
  v18 = a1[46];
  v19 = a1[45];
  v20 = a1[48];
  v21 = a1[47];
  swift_retain(a1[12]);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  sub_100010420(v7, v8);
  sub_100010420(v12, v9);
  swift_retain(v10);
  swift_retain(v13);
  swift_bridgeObjectRetain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  sub_100010420(v19, v18);
  sub_100010420(v21, v20);
  return a1;
}

_QWORD *sub_1000687A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[10];
  v6 = a1[12];
  v7 = a1[21];
  v8 = a1[22];
  v9 = a1[24];
  v14 = a1[30];
  v15 = a1[29];
  v12 = a1[23];
  v13 = a1[34];
  v16 = a1[36];
  v17 = a1[28];
  v10 = a1[44];
  v18 = a1[46];
  v19 = a1[45];
  v20 = a1[48];
  v21 = a1[47];
  swift_release(a1[20]);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v6);
  sub_100010630(v7, v8);
  sub_100010630(v12, v9);
  swift_release(v10);
  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  swift_bridgeObjectRelease(v17);
  swift_release(v16);
  sub_100010630(v19, v18);
  sub_100010630(v21, v20);
  return a1;
}

uint64_t sub_1000688C4()
{
  return sub_10006892C((uint64_t (*)(_QWORD, _QWORD))sub_10004A484);
}

uint64_t sub_1000688D4()
{
  return sub_1000688E0((uint64_t (*)(uint64_t))sub_100065A50);
}

uint64_t sub_1000688E0(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LinearTimerTimelineCountdown(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100068920()
{
  return sub_10006892C((uint64_t (*)(_QWORD, _QWORD))sub_10004A100);
}

uint64_t sub_10006892C(uint64_t (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LinearTimerTimelineCountdown(0) - 8) + 80);
  return sub_100068408((_QWORD *)(v1 + ((v3 + 16) & ~v3)), a1);
}

uint64_t sub_100068970()
{
  return sub_1000688E0((uint64_t (*)(uint64_t))sub_100065C34);
}

uint64_t sub_10006897C()
{
  uint64_t v0;

  return sub_100065D38(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100068994()
{
  uint64_t v0;

  return sub_100065DA8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000689AC()
{
  uint64_t v0;

  return sub_100065B54(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000689C4()
{
  uint64_t v0;

  return sub_100065BC4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000689E0()
{
  return sub_1000688E0((uint64_t (*)(uint64_t))sub_100064824);
}

unint64_t sub_1000689EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2968;
  if (!qword_1000B2968)
  {
    v1 = sub_10000E880(&qword_1000B2948);
    sub_100011020(&qword_1000B2970, &qword_1000B2940, (void (*)(void))sub_100068A90);
    sub_100011680(&qword_1000AF538, &qword_1000AF540, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2968);
  }
  return result;
}

uint64_t sub_100068A90()
{
  return sub_100011020(&qword_1000B2978, &qword_1000B2938, (void (*)(void))sub_100068AB4);
}

uint64_t sub_100068AB4()
{
  return sub_100011020(&qword_1000B2980, &qword_1000B2930, (void (*)(void))sub_100068AD8);
}

unint64_t sub_100068AD8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B2988;
  if (!qword_1000B2988)
  {
    v1 = sub_10000E880(&qword_1000B2928);
    v2[0] = sub_10000E880(&qword_1000B2990);
    v2[1] = sub_100068B6C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2988);
  }
  return result;
}

unint64_t sub_100068B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2998;
  if (!qword_1000B2998)
  {
    v1 = sub_10000E880(&qword_1000B2990);
    sub_100068BF0();
    sub_100011680(&qword_1000AF218, &qword_1000AF220, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2998);
  }
  return result;
}

unint64_t sub_100068BF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B29A0;
  if (!qword_1000B29A0)
  {
    v1 = sub_10000E880(&qword_1000B29A8);
    sub_100011020(&qword_1000B29B0, &qword_1000B29B8, (void (*)(void))sub_100068C94);
    sub_100011680(&qword_1000AF4F8, &qword_1000AF500, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B29A0);
  }
  return result;
}

unint64_t sub_100068C94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B29C0;
  if (!qword_1000B29C0)
  {
    v1 = sub_10000E880(&qword_1000B29C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B29C0);
  }
  return result;
}

uint64_t sub_100068CF4()
{
  return sub_1000688E0((uint64_t (*)(uint64_t))sub_100065010);
}

uint64_t sub_100068D00()
{
  uint64_t v0;

  return sub_100065114(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100068D18()
{
  uint64_t v0;

  return sub_100065184(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100068D50()
{
  uint64_t v0;

  return sub_100064928(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100068D68()
{
  uint64_t v0;

  return sub_100064998(*(_QWORD *)(v0 + 16));
}

void sub_100068D8C(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LinearTimerTimelineCountdown(0) - 8) + 80);
  sub_100066D24(v2 + ((v5 + 16) & ~v5), a1, a2);
}

uint64_t sub_100068DD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100068DF4(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double, double))(v1 + 16))(*a1, a1[1]);
}

unint64_t sub_100068E18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2A68;
  if (!qword_1000B2A68)
  {
    v1 = sub_10000E880(&qword_1000B2A08);
    sub_100011680(&qword_1000B2A70, &qword_1000B2A00, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2A68);
  }
  return result;
}

uint64_t sub_100068E9C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100068EB8()
{
  return sub_10006892C((uint64_t (*)(_QWORD, _QWORD))sub_100049A50);
}

uint64_t sub_100068EC8()
{
  return sub_10006892C((uint64_t (*)(_QWORD, _QWORD))sub_100049DA8);
}

uint64_t sub_100068ED8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for LinearTimerTimelineCountdown(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v7 = type metadata accessor for TimerSessionEntry(0);
  v8 = v0 + v4 + *(int *)(v7 + 24);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + *(int *)(v7 + 32) + 8));
  sub_100007CF0((_QWORD *)(v0 + v4 + v1[5]));
  sub_100007CF0((_QWORD *)(v0 + v4 + v1[6]));
  v10 = (_QWORD *)(v0 + v4 + v1[7]);
  v11 = sub_10000A58C(&qword_1000AF270);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for Font.Context(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  swift_release(*(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v6 + v1[9] + 8));
  swift_release(*(_QWORD *)(v6 + v1[10] + 8));
  swift_release(*(_QWORD *)(v6 + v1[11] + 8));
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v6 + v1[13] + 8));
  swift_release(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v6 + v1[15] + 8));
  swift_release(*(_QWORD *)(v6 + v1[16] + 8));
  swift_release(*(_QWORD *)(v6 + v1[17] + 8));
  swift_release(*(_QWORD *)(v6 + v1[18] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000690A8()
{
  return sub_10006892C((uint64_t (*)(_QWORD, _QWORD))sub_1000496F0);
}

uint64_t sub_1000690B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000690DC(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100069100(double a1)
{
  uint64_t *v3;

  if (a1 >= 0.0 && a1 < 600.0)
  {
    if (qword_1000AEDC8 != -1)
      swift_once(&qword_1000AEDC8, sub_1000749AC);
    v3 = &qword_1000B70E8;
  }
  else if (a1 >= 600.0 && a1 < 3600.0)
  {
    if (qword_1000AEDC0 != -1)
      swift_once(&qword_1000AEDC0, sub_100074994);
    v3 = &qword_1000B70E0;
  }
  else if (a1 < 3600.0 || a1 >= 36000.0)
  {
    if (qword_1000AEDB0 != -1)
      swift_once(&qword_1000AEDB0, sub_100074964);
    v3 = &qword_1000B70D0;
  }
  else
  {
    if (qword_1000AEDB8 != -1)
      swift_once(&qword_1000AEDB8, sub_10007497C);
    v3 = &qword_1000B70D8;
  }
  return *v3;
}

unint64_t sub_100069238()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B2B00;
  if (!qword_1000B2B00)
  {
    v1 = sub_10000E880(&qword_1000B2B08);
    sub_100011680(&qword_1000B2B10, &qword_1000B2B18, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    sub_100011548();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B2B00);
  }
  return result;
}

void sub_100069744()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  unint64_t v13;
  NSString v14;
  _QWORD v15[2];
  uint64_t v16;
  unint64_t v17;
  objc_super v18;

  v1 = v0;
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for TimerApertureElementController(0);
  objc_msgSendSuper2(&v18, "viewDidLoad");
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (v2)
  {
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
    v4 = qword_1000AECC0;
    swift_bridgeObjectRetain(v2);
    if (v4 != -1)
      swift_once(&qword_1000AECC0, sub_10001EBCC);
    v5 = sub_1000073C0((unint64_t *)&unk_1000B2EB0, type metadata accessor for TimerApertureElementController, (uint64_t)&unk_100084A20);
    v15[0] = v3;
    v15[1] = v2;
    AnyHashable.init<A>(_:)(&v16, v15, &type metadata for String, &protocol witness table for String);
    dispatch thunk of DataStore.registerObserver(_:for:)(v1, v5, &v16);
    sub_10001E790((uint64_t)&v16);
  }
  v6 = (void *)objc_opt_self(MTSessionUtilities);
  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v7 = v17;
  v8 = objc_msgSend(v1, "description");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;
  swift_bridgeObjectRelease(v7);

  v16 = v9;
  v17 = v11;
  v12._object = (void *)0x8000000100088EA0;
  v12._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v12);
  v13 = v17;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v6, "logInfo:", v14);

  sub_10006B0C8();
  sub_10006D7C0();
}

char *sub_10006992C(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *ObjCClassFromMetadata;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  objc_class *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  Swift::String v62;
  void *v63;
  Swift::String v64;
  unint64_t v65;
  NSString v66;
  _BYTE v68[12];
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  uint64_t v73;
  unint64_t v74;
  objc_super v75;

  v69 = a3;
  v6 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v6);
  v8 = &v68[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v68[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId];
  v14 = v3;
  v15 = UUID.init()();
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  *v13 = v16;
  v13[1] = v18;
  v19 = &v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 9;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_contentRole] = 2;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_preferredLayoutMode] = 3;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_maximumLayoutMode] = 4;
  v20 = objc_msgSend((id)objc_opt_self(NSURL), "mtURLForSection:", 4);
  if (v20)
  {
    v21 = v20;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v22 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
  }
  else
  {
    v23 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
  }
  v70 = a1;
  v71 = a2;
  sub_1000112A4((uint64_t)v8, (uint64_t)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_launchURL], (uint64_t *)&unk_1000B0040);
  v24 = &v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_associatedAppBundleIdentifier];
  *(_QWORD *)v24 = 0xD000000000000015;
  *((_QWORD *)v24 + 1) = 0x8000000100086910;
  v25 = &v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_timerObserverIdentifier];
  *(_QWORD *)v25 = 0xD00000000000001ELL;
  *((_QWORD *)v25 + 1) = 0x8000000100084900;
  v26 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v27 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView;
  v28 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v28);
  v30 = objc_allocWithZone(ObjCClassFromMetadata);
  v31 = v26;
  *(_QWORD *)&v14[v27] = objc_msgSend(v30, "init");
  v32 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView;
  *(_QWORD *)&v14[v32] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v33 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView;
  *(_QWORD *)&v14[v33] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v34 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_keyColor;
  *(_QWORD *)&v14[v34] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingOffset] = 0x401C000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingPadding] = 0x4030000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_verticalPadding] = 0x4031000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_interButtonPadding] = 0x4024000000000000;
  v35 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_buttonSize;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  *(_QWORD *)&v14[v35] = qword_1000B7030;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelBottomPadding] = 0x4035000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelToCountdownPadding] = 0x4014000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButtonToLabelPadding] = 0x4028000000000000;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer] = 0;
  v36 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation;
  v37 = type metadata accessor for TimerAnimationCountdown(0);
  v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  v39 = v38 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  v40 = type metadata accessor for TimerSessionEntry(0);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
  v41(v39, 1, 1, v40);
  v42 = (_QWORD *)(v38 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v42 = 0;
  v42[1] = 0xE000000000000000;
  *(_QWORD *)&v14[v36] = v38;
  v43 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation;
  v44 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  v41(v44 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, 1, 1, v40);
  v45 = (_QWORD *)(v44 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v45 = 0;
  v45[1] = 0xE000000000000000;
  *(_QWORD *)&v14[v43] = v44;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = 0;

  v46 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v75.receiver = v14;
  v75.super_class = v46;
  v47 = (char *)objc_msgSendSuper2(&v75, "init");
  v48 = &v47[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  v49 = *(_QWORD *)&v47[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  v51 = v70;
  v50 = v71;
  *(_QWORD *)v48 = v70;
  *((_QWORD *)v48 + 1) = v50;
  v52 = v47;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v49);
  if ((v69 & 1) != 0)
  {
    *(_QWORD *)&v52[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 2;
    v53 = (void *)0xE400000000000000;
    v54 = 1702195828;
  }
  else
  {
    v54 = 0x65736C6166;
    v53 = (void *)0xE500000000000000;
  }
  v73 = 0;
  v74 = 0xE000000000000000;
  _StringGuts.grow(_:)(39);
  v55 = objc_msgSend(v52, "description");
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
  v58 = v57;

  v59._countAndFlagsBits = v56;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease(v58);
  v60._object = (void *)0x8000000100086EC0;
  v60._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v60);
  v72[0] = v51;
  v72[1] = v50;
  v61 = sub_10000A58C(&qword_1000AF7A0);
  _print_unlocked<A, B>(_:_:)(v72, &v73, v61, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v50);
  v62._countAndFlagsBits = 0x656C6120726F6620;
  v62._object = (void *)0xEC000000203A7472;
  String.append(_:)(v62);
  v63 = (void *)objc_opt_self(MTSessionUtilities);
  v64._countAndFlagsBits = v54;
  v64._object = v53;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v53);
  v65 = v74;
  v66 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v65);
  objc_msgSend(v63, "logInfo:", v66);

  return v52;
}

id sub_100069FC4(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *ObjCClassFromMetadata;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  objc_class *v43;
  id v44;
  objc_super v46;

  v3 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId];
  v11 = v1;
  v12 = UUID.init()(v11);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *v10 = v13;
  v10[1] = v15;
  v16 = &v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 9;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_contentRole] = 2;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_preferredLayoutMode] = 3;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_maximumLayoutMode] = 4;
  v17 = objc_msgSend((id)objc_opt_self(NSURL), "mtURLForSection:", 4);
  if (v17)
  {
    v18 = v17;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 0, 1, v19);
  }
  else
  {
    v20 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
  }
  sub_1000112A4((uint64_t)v5, (uint64_t)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_launchURL], (uint64_t *)&unk_1000B0040);
  v21 = &v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_associatedAppBundleIdentifier];
  *(_QWORD *)v21 = 0xD000000000000015;
  *((_QWORD *)v21 + 1) = 0x8000000100086910;
  v22 = &v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_timerObserverIdentifier];
  *(_QWORD *)v22 = 0xD00000000000001ELL;
  *((_QWORD *)v22 + 1) = 0x8000000100084900;
  v23 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v24 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView;
  v25 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v25);
  v27 = objc_allocWithZone(ObjCClassFromMetadata);
  v28 = v23;
  *(_QWORD *)&v11[v24] = objc_msgSend(v27, "init");
  v29 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView;
  *(_QWORD *)&v11[v29] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v30 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView;
  *(_QWORD *)&v11[v30] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v31 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_keyColor;
  *(_QWORD *)&v11[v31] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingOffset] = 0x401C000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingPadding] = 0x4030000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_verticalPadding] = 0x4031000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_interButtonPadding] = 0x4024000000000000;
  v32 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_buttonSize;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  *(_QWORD *)&v11[v32] = qword_1000B7030;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelBottomPadding] = 0x4035000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelToCountdownPadding] = 0x4014000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButtonToLabelPadding] = 0x4028000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer] = 0;
  v33 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation;
  v34 = type metadata accessor for TimerAnimationCountdown(0);
  v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  v36 = v35 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  v37 = type metadata accessor for TimerSessionEntry(0);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
  v38(v36, 1, 1, v37);
  v39 = (_QWORD *)(v35 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v39 = 0;
  v39[1] = 0xE000000000000000;
  *(_QWORD *)&v11[v33] = v35;
  v40 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation;
  v41 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_OWORD *)(v41 + 16) = 0u;
  *(_OWORD *)(v41 + 32) = 0u;
  v38(v41 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, 1, 1, v37);
  v42 = (_QWORD *)(v41 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v42 = 0;
  v42[1] = 0xE000000000000000;
  *(_QWORD *)&v11[v40] = v41;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = 0;

  v43 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v46.receiver = v11;
  v46.super_class = v43;
  v44 = objc_msgSendSuper2(&v46, "initWithCoder:", a1);

  return v44;
}

id sub_10006A4F4(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *ObjCClassFromMetadata;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  NSString v46;
  objc_class *v47;
  void *v48;
  id v49;
  uint64_t v51;
  void *v52;
  objc_super v53;

  v51 = a1;
  v52 = a3;
  v5 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)&v3[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId];
  v13 = v3;
  v14 = UUID.init()(v13);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *v12 = v15;
  v12[1] = v17;
  v18 = &v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_presentationBehaviors] = 9;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_contentRole] = 2;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_preferredLayoutMode] = 3;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_maximumLayoutMode] = 4;
  v19 = (void *)objc_opt_self(NSURL);
  v20 = objc_msgSend(v19, "mtURLForSection:", 4, v51);
  if (v20)
  {
    v21 = v20;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v22 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 0, 1, v22);
  }
  else
  {
    v23 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 1, 1, v23);
  }
  sub_1000112A4((uint64_t)v7, (uint64_t)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_launchURL], (uint64_t *)&unk_1000B0040);
  v24 = &v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_associatedAppBundleIdentifier];
  *(_QWORD *)v24 = 0xD000000000000015;
  *((_QWORD *)v24 + 1) = 0x8000000100086910;
  v25 = &v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_timerObserverIdentifier];
  *(_QWORD *)v25 = 0xD00000000000001ELL;
  *((_QWORD *)v25 + 1) = 0x8000000100084900;
  v26 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v27 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView;
  v28 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v28);
  v30 = objc_allocWithZone(ObjCClassFromMetadata);
  v31 = v26;
  *(_QWORD *)&v13[v27] = objc_msgSend(v30, "init");
  v32 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView;
  *(_QWORD *)&v13[v32] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v33 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView;
  *(_QWORD *)&v13[v33] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v34 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_keyColor;
  *(_QWORD *)&v13[v34] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingOffset] = 0x401C000000000000;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingPadding] = 0x4030000000000000;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_verticalPadding] = 0x4031000000000000;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_interButtonPadding] = 0x4024000000000000;
  v35 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_buttonSize;
  if (qword_1000AED10 != -1)
    swift_once(&qword_1000AED10, sub_100074524);
  *(_QWORD *)&v13[v35] = qword_1000B7030;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelBottomPadding] = 0x4035000000000000;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_labelToCountdownPadding] = 0x4014000000000000;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expectedApertureHeight] = 0x4055000000000000;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButtonToLabelPadding] = 0x4028000000000000;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer] = 0;
  v36 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation;
  v37 = type metadata accessor for TimerAnimationCountdown(0);
  v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  v39 = v38 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  v40 = type metadata accessor for TimerSessionEntry(0);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56);
  v41(v39, 1, 1, v40);
  v42 = (_QWORD *)(v38 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v42 = 0;
  v42[1] = 0xE000000000000000;
  *(_QWORD *)&v13[v36] = v38;
  v43 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation;
  v44 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  v41(v44 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, 1, 1, v40);
  v45 = (_QWORD *)(v44 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  *v45 = 0;
  v45[1] = 0xE000000000000000;
  *(_QWORD *)&v13[v43] = v44;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = 0;

  if (a2)
  {
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v46 = 0;
  }
  v47 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v53.receiver = v13;
  v53.super_class = v47;
  v48 = v52;
  v49 = objc_msgSendSuper2(&v53, "initWithNibName:bundle:", v46, v52);

  return v49;
}

id sub_10006AA90()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  _QWORD v16[2];
  _QWORD v17[5];
  objc_super v18;

  v1 = v0;
  v2 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(40);
  v3 = objc_msgSend(v0, "description");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;
  swift_bridgeObjectRelease(0xE000000000000000);

  v17[0] = v4;
  v17[1] = v6;
  v7._object = (void *)0x8000000100088ED0;
  v7._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v7);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v2, "logInfo:", v8);

  v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (v9)
  {
    v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
    v11 = qword_1000AECC0;
    swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8]);
    if (v11 != -1)
      swift_once(&qword_1000AECC0, sub_10001EBCC);
    v12 = sub_1000073C0((unint64_t *)&unk_1000B2EB0, type metadata accessor for TimerApertureElementController, (uint64_t)&unk_100084A20);
    v16[0] = v10;
    v16[1] = v9;
    v13 = v1;
    AnyHashable.init<A>(_:)(v17, v16, &type metadata for String, &protocol witness table for String);
    dispatch thunk of DataStore.deregisterObserver(_:for:)(v13, v12, v17);

    sub_10001E790((uint64_t)v17);
  }
  v14 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v18.receiver = v1;
  v18.super_class = v14;
  return objc_msgSendSuper2(&v18, "dealloc");
}

uint64_t sub_10006ADE8()
{
  return type metadata accessor for TimerApertureElementController(0);
}

uint64_t type metadata accessor for TimerApertureElementController(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B2C40, (uint64_t)&nominal type descriptor for TimerApertureElementController);
}

uint64_t sub_10006AE04(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  objc_class *v11;
  void *v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  NSString v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[2];
  uint64_t v27;
  unint64_t v28;
  objc_super v29;

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TimerSessionEntry(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (_QWORD *)((char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (objc_class *)type metadata accessor for TimerApertureElementController(0);
  v29.receiver = v2;
  v29.super_class = v11;
  objc_msgSendSuper2(&v29, "viewWillAppear:", a1 & 1);
  v12 = (void *)objc_opt_self(MTSessionUtilities);
  v27 = 0;
  v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v13 = v28;
  v14 = objc_msgSend(v2, "description");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;
  swift_bridgeObjectRelease(v13);

  v27 = v15;
  v28 = v17;
  v18._object = (void *)0x8000000100088E80;
  v18._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v18);
  v19 = v28;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v12, "logInfo:", v20);

  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (v21)
  {
    v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
    v23 = qword_1000AECC0;
    swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8]);
    if (v23 != -1)
      swift_once(&qword_1000AECC0, sub_10001EBCC);
    v26[0] = v22;
    v26[1] = v21;
    AnyHashable.init<A>(_:)(&v27, v26, &type metadata for String, &protocol witness table for String);
    dispatch thunk of DataStore.getEntry(for:)(&v27);
    sub_10001E790((uint64_t)&v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      sub_10002B89C((uint64_t)v6, (uint64_t)v10, type metadata accessor for TimerSessionEntry);
      sub_10006B864(v10);
      return sub_10000E844((uint64_t)v10, type metadata accessor for TimerSessionEntry);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  return sub_100011484((uint64_t)v6, &qword_1000B13F0);
}

void sub_10006B0C8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  NSString v19;
  NSString v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  unint64_t v37;
  NSString v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  Class isa;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  Swift::String v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  _QWORD v81[2];
  uint64_t v82;
  unint64_t v83;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v74 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v74 - v9;
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = (void *)__chkstk_darwin(v11);
  v15 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
  if (v15)
  {
    v78 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v79 = v14;
    v80 = v12;
    v16 = type metadata accessor for TimerApertureElementController(0);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
    v18 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v19 = String._bridgeToObjectiveC()();
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, 0, v20);

    if (!v21)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v23 = v22;
      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
    }
    objc_msgSend(v15, "setAccessibilityLabel:", v21);

    v24 = v15;
    v25 = objc_msgSend(v1, "view");
    if (v25)
    {
      v26 = v25;
      objc_msgSend(v25, "addSubview:", v24);

      v27 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      v28 = sub_1000726E8(2u);
      if (v28)
      {
        v29 = v28;
        v75 = v27;
        v76 = v8;
        v77 = v5;
        v30 = (void *)objc_opt_self(MTSessionUtilities);
        v82 = 0;
        v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        v31 = v83;
        v32 = objc_msgSend(v1, "description");
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v35 = v34;
        swift_bridgeObjectRelease(v31);

        v82 = v33;
        v83 = v35;
        v36._object = (void *)0x8000000100086E70;
        v36._countAndFlagsBits = 0xD00000000000001CLL;
        String.append(_:)(v36);
        v37 = v83;
        v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v37);
        objc_msgSend(v30, "logInfo:", v38);

        objc_msgSend(v24, "addSubview:", v29);
        objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v39 = (void *)objc_opt_self(NSLayoutConstraint);
        v40 = sub_10000A58C((uint64_t *)&unk_1000B2750);
        v41 = swift_allocObject(v40, 64, 7);
        *(_OWORD *)(v41 + 16) = xmmword_100081560;
        v42 = objc_msgSend(v29, "leadingAnchor");
        v43 = objc_msgSend(v24, "leadingAnchor");
        v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, -2.0);

        *(_QWORD *)(v41 + 32) = v44;
        v45 = objc_msgSend(v29, "trailingAnchor");
        v46 = objc_msgSend(v24, "trailingAnchor");
        v47 = objc_msgSend(v45, "constraintEqualToAnchor:", v46);

        *(_QWORD *)(v41 + 40) = v47;
        v48 = objc_msgSend(v29, "topAnchor");
        v49 = objc_msgSend(v24, "topAnchor");
        v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

        *(_QWORD *)(v41 + 48) = v50;
        v51 = objc_msgSend(v29, "bottomAnchor");
        v52 = objc_msgSend(v24, "bottomAnchor");
        v53 = objc_msgSend(v51, "constraintEqualToAnchor:", v52);

        *(_QWORD *)(v41 + 56) = v53;
        v82 = v41;
        specialized Array._endMutation()();
        v54 = v82;
        sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v54);
        objc_msgSend(v39, "activateConstraints:", isa);

        v56 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
        if (v56)
        {
          v57 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
          v58 = qword_1000AECC0;
          swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId
                                                + 8]);
          v59 = (uint64_t)v76;
          v61 = v79;
          v60 = v80;
          if (v58 != -1)
            swift_once(&qword_1000AECC0, sub_10001EBCC);
          v81[0] = v57;
          v81[1] = v56;
          AnyHashable.init<A>(_:)(&v82, v81, &type metadata for String, &protocol witness table for String);
          dispatch thunk of DataStore.getEntry(for:)(&v82);
          sub_10001E790((uint64_t)&v82);

        }
        else
        {
          v61 = v79;
          v60 = v80;
          (*(void (**)(char *, uint64_t, uint64_t, id))(v79 + 56))(v10, 1, 1, v80);

          v59 = (uint64_t)v76;
        }
        v70 = (*(uint64_t (**)(char *, uint64_t, id))(v61 + 48))(v10, 1, v60);
        v71 = (uint64_t)v77;
        if (v70 == 1)
        {
          sub_100011484((uint64_t)v10, &qword_1000B13F0);
        }
        else
        {
          v72 = v78;
          sub_10002B89C((uint64_t)v10, v78, type metadata accessor for TimerSessionEntry);
          sub_10002B89C(v72, v59, type metadata accessor for TimerSessionEntry);
          (*(void (**)(uint64_t, _QWORD, uint64_t, id))(v61 + 56))(v59, 0, 1, v60);
          sub_1000112A4(v59, v71, &qword_1000B13F0);
          v73 = v75 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
          swift_beginAccess(v75 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &v82, 33, 0);
          sub_10001E928(v71, v73, &qword_1000B13F0);
          swift_endAccess(&v82);
        }
      }
      else
      {
        v62 = (void *)objc_opt_self(MTSessionUtilities);
        v82 = 0;
        v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v63 = v83;
        v64 = objc_msgSend(v1, "description");
        v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        v67 = v66;
        swift_bridgeObjectRelease(v63);

        v82 = v65;
        v83 = v67;
        v68._countAndFlagsBits = 0xD00000000000002CLL;
        v68._object = (void *)0x8000000100088E00;
        String.append(_:)(v68);
        v69 = v83;
        v80 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v69);
        objc_msgSend(v62, "logInfo:", v80);

      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10006B864(uint64_t *a1)
{
  char *v1;
  char *v2;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSString v17;
  int v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  NSString v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String v40;
  unint64_t v41;
  NSString v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v2 = v1;
  v4 = (void *)objc_opt_self(MTSessionUtilities);
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  v5 = objc_msgSend(v1, "description");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 0xD00000000000001CLL;
  v10._object = (void *)0x8000000100088DA0;
  String.append(_:)(v10);
  v11 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost;
  v51 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost];
  v12 = sub_10000A58C(&qword_1000B2E98);
  _print_unlocked<A, B>(_:_:)(&v51, &v52, v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v13._countAndFlagsBits = 0x646573756170202CLL;
  v13._object = (void *)0xEF203A74736F6820;
  String.append(_:)(v13);
  v14 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost;
  v51 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost];
  v15 = sub_10000A58C((uint64_t *)&unk_1000B2EA0);
  _print_unlocked<A, B>(_:_:)(&v51, &v52, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v16 = v53;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v4, "logInfo:", v17);

  v18 = *((unsigned __int8 *)a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28));
  if (v18 == 1)
  {
    if (!*(_QWORD *)&v2[v11])
      goto LABEL_11;
    v52 = 0;
    v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v19 = v53;
    v20 = objc_msgSend(v2, "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;
    swift_bridgeObjectRelease(v19);

    v52 = v21;
    v53 = v23;
    v24._countAndFlagsBits = 0xD000000000000016;
    v24._object = (void *)0x8000000100088DE0;
    String.append(_:)(v24);
    v25 = v53;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    objc_msgSend(v4, "logInfo:", v26);

    v27 = *(void **)&v2[v11];
    if (v27)
    {
      v28 = objc_msgSend(v27, "view");
      if (v28)
      {
        v29 = v28;
        v30 = objc_msgSend(v28, "superview");

        if (v30)
        {

          v31 = *(void **)&v2[v11];
          if (!v31)
          {
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          v32 = objc_msgSend(v31, "view");
          if (!v32)
          {
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
          v33 = v32;
          objc_msgSend(v32, "removeFromSuperview");

        }
        v34 = *(void **)&v2[v11];
        if (v34)
        {
          objc_msgSend(v34, "removeFromParentViewController");
LABEL_11:
          sub_10006CF74((uint64_t)a1);
          sub_10006BD2C((uint64_t)a1);
          if (*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] != 4)
            return;
          goto LABEL_25;
        }
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (*(_QWORD *)&v2[v14])
  {
    v52 = 0;
    v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    v35 = v53;
    v36 = objc_msgSend(v2, "description");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;
    swift_bridgeObjectRelease(v35);

    v52 = v37;
    v53 = v39;
    v40._object = (void *)0x8000000100088DC0;
    v40._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v40);
    v41 = v53;
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    objc_msgSend(v4, "logInfo:", v42);

    v43 = *(void **)&v2[v14];
    if (!v43)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v44 = objc_msgSend(v43, "view");
    if (!v44)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v45 = v44;
    v46 = objc_msgSend(v44, "superview");

    if (v46)
    {

      v47 = *(void **)&v2[v14];
      if (!v47)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v48 = objc_msgSend(v47, "view");
      if (!v48)
      {
LABEL_36:
        __break(1u);
        return;
      }
      v49 = v48;
      objc_msgSend(v48, "removeFromSuperview");

    }
    v50 = *(void **)&v2[v14];
    if (!v50)
      goto LABEL_32;
    objc_msgSend(v50, "removeFromParentViewController");
  }
  sub_10006C514((uint64_t)a1);
  sub_10006C120((uint64_t)a1);
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode] != 4)
    return;
  if (v18 == 2)
  {
    sub_10006F888(a1);
    return;
  }
LABEL_25:
  sub_10006EEE0((uint64_t)a1);
}

void sub_10006BD2C(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  NSString v25;
  void *v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  unint64_t v33;
  NSString v34;
  void *v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  Swift::String v41;
  unint64_t v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000B13F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v44 - v8;
  v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
  sub_10000E800(a1, (uint64_t)&v44 - v8, type metadata accessor for TimerSessionEntry);
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v9, 0, 1, v11);
  sub_1000112A4((uint64_t)v9, (uint64_t)v7, &qword_1000B13F0);
  v44 = v10;
  v13 = v10 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess(v13, &v45, 33, 0);
  sub_10001E928((uint64_t)v7, v13, &qword_1000B13F0);
  swift_endAccess(&v45);
  v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
  sub_10000E800(a1, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
  v12(v9, 0, 1, v11);
  sub_1000112A4((uint64_t)v9, (uint64_t)v7, &qword_1000B13F0);
  v15 = v14 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess(v14 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &v45, 33, 0);
  sub_10001E928((uint64_t)v7, v15, &qword_1000B13F0);
  swift_endAccess(&v45);
  v16 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode];
  if (v16 == 3)
  {
    v26 = (void *)objc_opt_self(MTSessionUtilities);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v27 = v46;
    v28 = objc_msgSend(v2, "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;
    swift_bridgeObjectRelease(v27);

    v45 = v29;
    v46 = v31;
    v32._object = (void *)0x8000000100088D40;
    v32._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v32);
    v33 = v46;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    objc_msgSend(v26, "logInfo:", v34);

    sub_100073230();
  }
  else if (v16 == 2)
  {
    v17 = (void *)objc_opt_self(MTSessionUtilities);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v18 = v46;
    v19 = objc_msgSend(v2, "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;
    swift_bridgeObjectRelease(v18);

    v45 = v20;
    v46 = v22;
    v23._object = (void *)0x8000000100088D70;
    v23._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v23);
    v24 = v46;
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v17, "logInfo:", v25);

    sub_100073230();
  }
  else
  {
    v35 = (void *)objc_opt_self(MTSessionUtilities);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v36 = v46;
    v37 = objc_msgSend(v2, "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;
    swift_bridgeObjectRelease(v36);

    v45 = v38;
    v46 = v40;
    v41._countAndFlagsBits = 0xD000000000000021;
    v41._object = (void *)0x8000000100086840;
    String.append(_:)(v41);
    v42 = v46;
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v35, "logInfo:", v43);

  }
}

void sub_10006C120(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  NSString v25;
  void *v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  unint64_t v33;
  NSString v34;
  void *v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  Swift::String v41;
  unint64_t v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v2 = v1;
  v4 = sub_10000A58C(&qword_1000B13F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v44 - v8;
  v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
  sub_10000E800(a1, (uint64_t)&v44 - v8, type metadata accessor for TimerSessionEntry);
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v9, 0, 1, v11);
  sub_1000112A4((uint64_t)v9, (uint64_t)v7, &qword_1000B13F0);
  v44 = v10;
  v13 = v10 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess(v13, &v45, 33, 0);
  sub_10001E928((uint64_t)v7, v13, &qword_1000B13F0);
  swift_endAccess(&v45);
  v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
  sub_10000E800(a1, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
  v12(v9, 0, 1, v11);
  sub_1000112A4((uint64_t)v9, (uint64_t)v7, &qword_1000B13F0);
  v15 = v14 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess(v14 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &v45, 33, 0);
  sub_10001E928((uint64_t)v7, v15, &qword_1000B13F0);
  swift_endAccess(&v45);
  v16 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode];
  if (v16 == 3)
  {
    v26 = (void *)objc_opt_self(MTSessionUtilities);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v27 = v46;
    v28 = objc_msgSend(v2, "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;
    swift_bridgeObjectRelease(v27);

    v45 = v29;
    v46 = v31;
    v32._object = (void *)0x8000000100088CE0;
    v32._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v32);
    v33 = v46;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    objc_msgSend(v26, "logInfo:", v34);

    sub_100072C20();
  }
  else if (v16 == 2)
  {
    v17 = (void *)objc_opt_self(MTSessionUtilities);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v18 = v46;
    v19 = objc_msgSend(v2, "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;
    swift_bridgeObjectRelease(v18);

    v45 = v20;
    v46 = v22;
    v23._object = (void *)0x8000000100088D10;
    v23._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v23);
    v24 = v46;
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v17, "logInfo:", v25);

    sub_100072C20();
  }
  else
  {
    v35 = (void *)objc_opt_self(MTSessionUtilities);
    v45 = 0;
    v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    v36 = v46;
    v37 = objc_msgSend(v2, "description");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v40 = v39;
    swift_bridgeObjectRelease(v36);

    v45 = v38;
    v46 = v40;
    v41._countAndFlagsBits = 0xD000000000000021;
    v41._object = (void *)0x8000000100086840;
    String.append(_:)(v41);
    v42 = v46;
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    objc_msgSend(v35, "logInfo:", v43);

  }
}

void sub_10006C514(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  unint64_t v24;
  NSString v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  char *v40;
  void *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  id v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  id v80;
  id v81;
  id v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  id v93;
  void **v94;
  Class isa;
  id v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char *v105;
  id v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  void **aBlock;
  unint64_t v117;
  void (*v118)(uint64_t, void *);
  void *v119;
  uint64_t (*v120)(uint64_t);
  uint64_t v121;

  v2 = v1;
  v114 = a1;
  v3 = type metadata accessor for TimerSessionEntry(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v115 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimerRunningCompressedTrailingView(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v108 - v13;
  v113 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost;
  v15 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedRunningHost];
  if (v15)
  {
    v16 = objc_msgSend(v15, "parentViewController");
    if (v16)
    {

      return;
    }
  }
  v108 = v4;
  v109 = v5;
  v110 = (uint64_t)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = (id)objc_opt_self(MTSessionUtilities);
  aBlock = 0;
  v117 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v17 = v117;
  v18 = objc_msgSend(v2, "description");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v112 = v6;
  v21 = v20;
  swift_bridgeObjectRelease(v17);

  aBlock = (void **)v19;
  v117 = v21;
  v22 = v112;
  v23._object = (void *)0x8000000100088CC0;
  v23._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v23);
  v24 = v117;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  objc_msgSend(v111, "logInfo:", v25);

  v26 = *(int *)(v3 + 24);
  v27 = v115;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v28(v115, v114 + v26, v22);
  v28(&v12[*(int *)(v9 + 20)], (uint64_t)v27, v22);
  v29 = swift_allocObject(&unk_1000A1C18, 32, 7);
  *(_QWORD *)(v29 + 16) = v2;
  *(_QWORD *)(v29 + 24) = &off_1000A1B08;
  v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31 = v2;
  v30(v27, v22);
  *(_QWORD *)v12 = sub_100073F2C;
  *((_QWORD *)v12 + 1) = v29;
  v12[16] = 0;
  sub_10002B89C((uint64_t)v12, (uint64_t)v14, type metadata accessor for TimerRunningCompressedTrailingView);
  v32 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B2E90));
  v33 = &v32[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v32) + 16)];
  *((_QWORD *)v33 + 1) = 0;
  swift_unknownObjectWeakInit(v33, 0);
  sub_10000E800((uint64_t)v14, (uint64_t)v12, type metadata accessor for TimerRunningCompressedTrailingView);
  v34 = UIHostingController.init(rootView:)(v12);
  sub_10000E844((uint64_t)v14, type metadata accessor for TimerRunningCompressedTrailingView);
  v35 = v113;
  v36 = *(void **)&v2[v113];
  *(_QWORD *)&v2[v113] = v34;

  v37 = *(void **)&v2[v35];
  if (!v37)
  {
    __break(1u);
    goto LABEL_26;
  }
  v38 = objc_msgSend(v37, "view");
  if (!v38)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v39 = v38;
  objc_msgSend(v38, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  if (!*(_QWORD *)&v2[v35])
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v40 = v31;
  objc_msgSend(v31, "addChildViewController:");
  v41 = *(void **)&v2[v35];
  if (!v41)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  objc_msgSend(v41, "didMoveToParentViewController:", v31);
  v42 = *(void **)&v31[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
  if (v42)
  {
    v43 = *(void **)&v2[v35];
    if (v43)
    {
      v44 = objc_msgSend(v43, "view");
      if (v44)
      {
        v45 = v44;
        objc_msgSend(v42, "addSubview:", v44);

        v46 = v115;
        Date.init()(v47);
        v48 = Date.timeIntervalSince(_:)(v46);
        v30(v46, v112);
        sub_100051A6C(v48);
        v50 = v49;
        v51 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v50);
        objc_msgSend(v42, "setAccessibilityLabel:", v51);

        v52 = v42;
        v40 = v31;
        v53 = objc_msgSend(v31, "view");
        if (v53)
        {
          v54 = v53;
          objc_msgSend(v53, "addSubview:", v52);

          objc_msgSend(v52, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
          v55 = *(void **)&v2[v35];
          if (v55)
          {
            v56 = objc_msgSend(v55, "view");
            if (v56)
            {
              v57 = v56;
              v58 = sub_10000A58C((uint64_t *)&unk_1000B2750);
              v59 = swift_allocObject(v58, 96, 7);
              *(_OWORD *)(v59 + 16) = xmmword_100081570;
              v60 = objc_msgSend(v57, "leadingAnchor");
              v61 = objc_msgSend(v52, "leadingAnchor");
              v62 = objc_msgSend(v60, "constraintEqualToAnchor:", v61);

              *(_QWORD *)(v59 + 32) = v62;
              v63 = objc_msgSend(v57, "trailingAnchor");
              v64 = objc_msgSend(v52, "trailingAnchor");
              v65 = objc_msgSend(v63, "constraintEqualToAnchor:", v64);

              *(_QWORD *)(v59 + 40) = v65;
              v66 = objc_msgSend(v57, "topAnchor");
              v67 = objc_msgSend(v52, "topAnchor");
              v68 = objc_msgSend(v66, "constraintEqualToAnchor:", v67);

              *(_QWORD *)(v59 + 48) = v68;
              v69 = objc_msgSend(v57, "bottomAnchor");
              v70 = objc_msgSend(v52, "bottomAnchor");
              v71 = objc_msgSend(v69, "constraintEqualToAnchor:", v70);

              *(_QWORD *)(v59 + 56) = v71;
              v72 = objc_msgSend(v52, "trailingAnchor");
              v73 = objc_msgSend(v31, "view");
              if (v73)
              {
                v74 = v73;
                v75 = objc_msgSend(v73, "trailingAnchor");

                v76 = objc_msgSend(v72, "constraintEqualToAnchor:", v75);
                *(_QWORD *)(v59 + 64) = v76;
                v77 = objc_msgSend(v52, "topAnchor");
                v78 = objc_msgSend(v31, "view");
                if (v78)
                {
                  v79 = v78;
                  v80 = objc_msgSend(v78, "topAnchor");

                  v81 = objc_msgSend(v77, "constraintEqualToAnchor:", v80);
                  *(_QWORD *)(v59 + 72) = v81;
                  v82 = objc_msgSend(v52, "leadingAnchor");
                  v83 = objc_msgSend(v31, "view");
                  if (v83)
                  {
                    v84 = v83;
                    v85 = objc_msgSend(v83, "SBUISA_systemApertureObstructedAreaLayoutGuide");

                    v86 = objc_msgSend(v85, "trailingAnchor");
                    v87 = objc_msgSend(v82, "constraintEqualToAnchor:", v86);

                    *(_QWORD *)(v59 + 80) = v87;
                    v88 = objc_msgSend(v52, "bottomAnchor");
                    v89 = objc_msgSend(v31, "view");
                    if (v89)
                    {
                      v90 = v89;
                      v91 = (void *)objc_opt_self(NSLayoutConstraint);
                      v92 = objc_msgSend(v90, "bottomAnchor");

                      v93 = objc_msgSend(v88, "constraintEqualToAnchor:", v92);
                      *(_QWORD *)(v59 + 88) = v93;
                      aBlock = (void **)v59;
                      specialized Array._endMutation()();
                      v94 = aBlock;
                      sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
                      isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease(v94);
                      objc_msgSend(v91, "activateConstraints:", isa);

                      goto LABEL_19;
                    }
LABEL_37:
                    __break(1u);
                    return;
                  }
LABEL_36:
                  __break(1u);
                  goto LABEL_37;
                }
LABEL_35:
                __break(1u);
                goto LABEL_36;
              }
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_19:
  if (UIAccessibilityIsVoiceOverRunning()
    || UIAccessibilityIsSwitchControlRunning()
    || _AXSCommandAndControlEnabled())
  {
    v96 = objc_msgSend(v40, "systemApertureElementContext");
    objc_msgSend(v96, "setElementNeedsUpdate");
    swift_unknownObjectRelease(v96);
    v97 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer;
    if (!*(_QWORD *)&v40[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer])
    {
      v98 = (void *)objc_opt_self(NSTimer);
      v99 = v110;
      sub_10000E800(v114, v110, type metadata accessor for TimerSessionEntry);
      v100 = *(unsigned __int8 *)(v108 + 80);
      v101 = (v100 + 24) & ~v100;
      v102 = swift_allocObject(&unk_1000A1C40, v101 + v109, v100 | 7);
      *(_QWORD *)(v102 + 16) = v40;
      sub_10002B89C(v99, v102 + v101, type metadata accessor for TimerSessionEntry);
      v120 = sub_100073FE4;
      v121 = v102;
      aBlock = _NSConcreteStackBlock;
      v117 = 1107296256;
      v118 = sub_10004A93C;
      v119 = &unk_1000A1C58;
      v103 = _Block_copy(&aBlock);
      v104 = v121;
      v105 = v40;
      swift_release(v104);
      v106 = objc_msgSend(v98, "scheduledTimerWithTimeInterval:repeats:block:", 1, v103, 1.0);
      _Block_release(v103);
      v107 = *(void **)&v40[v97];
      *(_QWORD *)&v40[v97] = v106;

    }
  }
}

void sub_10006CF74(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  NSString v34;
  id v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  Class isa;
  id v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  id v87;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost;
  v5 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compressedPausedHost];
  if (v5)
  {
    v6 = objc_msgSend(v5, "parentViewController");
    if (v6)
    {

      return;
    }
  }
  v7 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(25);
  v8 = objc_msgSend(v1, "description");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;
  swift_bridgeObjectRelease(0xE000000000000000);

  v83 = v9;
  v84 = v11;
  v12._object = (void *)0x8000000100088CA0;
  v12._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v12);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v7, "logInfo:", v13);

  v14 = type metadata accessor for TimerSessionEntry(0);
  v15 = *(_QWORD *)(a1 + *(int *)(v14 + 44));
  v16 = (uint64_t *)(a1 + *(int *)(v14 + 32));
  v17 = *v16;
  v18 = v16[1];
  v19 = objc_allocWithZone((Class)NSDateComponentsFormatter);
  swift_bridgeObjectRetain(v18);
  v20 = objc_msgSend(v19, "init");
  objc_msgSend(v20, "setAllowedUnits:", 32);
  objc_msgSend(v20, "setUnitsStyle:", 1);
  v21 = objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), "init");
  objc_msgSend(v21, "setAllowedUnits:", 96);
  objc_msgSend(v21, "setUnitsStyle:", 1);
  v22 = objc_allocWithZone((Class)sub_10000A58C(&qword_1000B2E88));
  v23 = (char *)v22 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v22) + 16);
  *((_QWORD *)v23 + 1) = 0;
  swift_unknownObjectWeakInit(v23, 0);
  v83 = v15;
  v84 = v17;
  v85 = v18;
  v86 = v20;
  v87 = v21;
  v24 = UIHostingController.init(rootView:)(&v83);
  v25 = *(void **)&v2[v4];
  *(_QWORD *)&v2[v4] = v24;

  v26 = *(void **)&v2[v4];
  if (!v26)
  {
    __break(1u);
    goto LABEL_26;
  }
  v27 = objc_msgSend(v26, "view");
  if (!v27)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v28 = v27;
  objc_msgSend(v27, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  if (!*(_QWORD *)&v2[v4])
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  objc_msgSend(v2, "addChildViewController:");
  v29 = *(void **)&v2[v4];
  if (!v29)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  objc_msgSend(v29, "didMoveToParentViewController:", v2);
  v30 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
  if (v30)
  {
    v31 = *(void **)&v2[v4];
    if (v31)
    {
      v32 = objc_msgSend(v31, "view");
      if (v32)
      {
        v33 = v32;
        objc_msgSend(v30, "addSubview:", v32);

        v34 = String._bridgeToObjectiveC()();
        objc_msgSend(v30, "setAccessibilityLabel:", v34);

        v35 = v30;
        v36 = objc_msgSend(v2, "view");
        if (v36)
        {
          v37 = v36;
          objc_msgSend(v36, "addSubview:", v35);

          objc_msgSend(v35, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
          v38 = *(void **)&v2[v4];
          if (v38)
          {
            v39 = objc_msgSend(v38, "view");
            if (v39)
            {
              v40 = v39;
              v41 = sub_10000A58C((uint64_t *)&unk_1000B2750);
              v42 = swift_allocObject(v41, 96, 7);
              *(_OWORD *)(v42 + 16) = xmmword_100081570;
              v43 = objc_msgSend(v40, "leadingAnchor");
              v44 = objc_msgSend(v35, "leadingAnchor");
              v45 = objc_msgSend(v43, "constraintEqualToAnchor:", v44);

              *(_QWORD *)(v42 + 32) = v45;
              v46 = objc_msgSend(v40, "trailingAnchor");
              v47 = objc_msgSend(v35, "trailingAnchor");
              v48 = objc_msgSend(v46, "constraintEqualToAnchor:", v47);

              *(_QWORD *)(v42 + 40) = v48;
              v49 = objc_msgSend(v40, "topAnchor");
              v50 = objc_msgSend(v35, "topAnchor");
              v51 = objc_msgSend(v49, "constraintEqualToAnchor:", v50);

              *(_QWORD *)(v42 + 48) = v51;
              v52 = objc_msgSend(v40, "bottomAnchor");
              v53 = objc_msgSend(v35, "bottomAnchor");
              v54 = objc_msgSend(v52, "constraintEqualToAnchor:", v53);

              *(_QWORD *)(v42 + 56) = v54;
              v55 = objc_msgSend(v35, "trailingAnchor");
              v56 = objc_msgSend(v2, "view");
              if (v56)
              {
                v57 = v56;
                v58 = objc_msgSend(v56, "trailingAnchor");

                v59 = objc_msgSend(v55, "constraintEqualToAnchor:", v58);
                *(_QWORD *)(v42 + 64) = v59;
                v60 = objc_msgSend(v35, "topAnchor");
                v61 = objc_msgSend(v2, "view");
                if (v61)
                {
                  v62 = v61;
                  v63 = objc_msgSend(v61, "topAnchor");

                  v64 = objc_msgSend(v60, "constraintEqualToAnchor:", v63);
                  *(_QWORD *)(v42 + 72) = v64;
                  v65 = objc_msgSend(v35, "leadingAnchor");
                  v66 = objc_msgSend(v2, "view");
                  if (v66)
                  {
                    v67 = v66;
                    v68 = objc_msgSend(v66, "SBUISA_systemApertureObstructedAreaLayoutGuide");

                    v69 = objc_msgSend(v68, "trailingAnchor");
                    v70 = objc_msgSend(v65, "constraintEqualToAnchor:", v69);

                    *(_QWORD *)(v42 + 80) = v70;
                    v71 = objc_msgSend(v35, "bottomAnchor");
                    v72 = objc_msgSend(v2, "view");
                    if (v72)
                    {
                      v73 = v72;
                      v74 = (void *)objc_opt_self(NSLayoutConstraint);
                      v75 = objc_msgSend(v73, "bottomAnchor");

                      v76 = objc_msgSend(v71, "constraintEqualToAnchor:", v75);
                      *(_QWORD *)(v42 + 88) = v76;
                      v83 = v42;
                      specialized Array._endMutation()();
                      v77 = v83;
                      sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
                      isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease(v77);
                      objc_msgSend(v74, "activateConstraints:", isa);

                      goto LABEL_19;
                    }
LABEL_37:
                    __break(1u);
                    return;
                  }
LABEL_36:
                  __break(1u);
                  goto LABEL_37;
                }
LABEL_35:
                __break(1u);
                goto LABEL_36;
              }
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_19:
  if (UIAccessibilityIsVoiceOverRunning()
    || UIAccessibilityIsSwitchControlRunning()
    || _AXSCommandAndControlEnabled())
  {
    v79 = objc_msgSend(v2, "systemApertureElementContext");
    objc_msgSend(v79, "setElementNeedsUpdate");
    swift_unknownObjectRelease(v79);
    v80 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer;
    v81 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_voiceOverTimer];
    if (v81)
    {
      objc_msgSend(v81, "invalidate");
      v82 = *(void **)&v2[v80];
      *(_QWORD *)&v2[v80] = 0;

    }
  }
}

void sub_10006D7C0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  NSString v19;
  NSString v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  unint64_t v37;
  NSString v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  Class isa;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  Swift::String v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  _QWORD v81[2];
  uint64_t v82;
  unint64_t v83;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v74 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v74 - v9;
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = (void *)__chkstk_darwin(v11);
  v15 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
  if (v15)
  {
    v78 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v79 = v14;
    v80 = v12;
    v16 = type metadata accessor for TimerApertureElementController(0);
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
    v18 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    v19 = String._bridgeToObjectiveC()();
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, 0, v20);

    if (!v21)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v23 = v22;
      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
    }
    objc_msgSend(v15, "setAccessibilityLabel:", v21);

    v24 = v15;
    v25 = objc_msgSend(v1, "view");
    if (v25)
    {
      v26 = v25;
      objc_msgSend(v25, "addSubview:", v24);

      v27 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      v28 = sub_1000726E8(0);
      if (v28)
      {
        v29 = v28;
        v75 = v27;
        v76 = v8;
        v77 = v5;
        v30 = (void *)objc_opt_self(MTSessionUtilities);
        v82 = 0;
        v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(30);
        v31 = v83;
        v32 = objc_msgSend(v1, "description");
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v35 = v34;
        swift_bridgeObjectRelease(v31);

        v82 = v33;
        v83 = v35;
        v36._object = (void *)0x8000000100086E70;
        v36._countAndFlagsBits = 0xD00000000000001CLL;
        String.append(_:)(v36);
        v37 = v83;
        v38 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v37);
        objc_msgSend(v30, "logInfo:", v38);

        objc_msgSend(v24, "addSubview:", v29);
        objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v39 = (void *)objc_opt_self(NSLayoutConstraint);
        v40 = sub_10000A58C((uint64_t *)&unk_1000B2750);
        v41 = swift_allocObject(v40, 64, 7);
        *(_OWORD *)(v41 + 16) = xmmword_100081560;
        v42 = objc_msgSend(v29, "leadingAnchor");
        v43 = objc_msgSend(v24, "leadingAnchor");
        v44 = objc_msgSend(v42, "constraintEqualToAnchor:", v43);

        *(_QWORD *)(v41 + 32) = v44;
        v45 = objc_msgSend(v29, "trailingAnchor");
        v46 = objc_msgSend(v24, "trailingAnchor");
        v47 = objc_msgSend(v45, "constraintEqualToAnchor:", v46);

        *(_QWORD *)(v41 + 40) = v47;
        v48 = objc_msgSend(v29, "topAnchor");
        v49 = objc_msgSend(v24, "topAnchor");
        v50 = objc_msgSend(v48, "constraintEqualToAnchor:", v49);

        *(_QWORD *)(v41 + 48) = v50;
        v51 = objc_msgSend(v29, "bottomAnchor");
        v52 = objc_msgSend(v24, "bottomAnchor");
        v53 = objc_msgSend(v51, "constraintEqualToAnchor:", v52);

        *(_QWORD *)(v41 + 56) = v53;
        v82 = v41;
        specialized Array._endMutation()();
        v54 = v82;
        sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v54);
        objc_msgSend(v39, "activateConstraints:", isa);

        v56 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
        if (v56)
        {
          v57 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
          v58 = qword_1000AECC0;
          swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId
                                                + 8]);
          v59 = (uint64_t)v76;
          v61 = v79;
          v60 = v80;
          if (v58 != -1)
            swift_once(&qword_1000AECC0, sub_10001EBCC);
          v81[0] = v57;
          v81[1] = v56;
          AnyHashable.init<A>(_:)(&v82, v81, &type metadata for String, &protocol witness table for String);
          dispatch thunk of DataStore.getEntry(for:)(&v82);
          sub_10001E790((uint64_t)&v82);

        }
        else
        {
          v61 = v79;
          v60 = v80;
          (*(void (**)(char *, uint64_t, uint64_t, id))(v79 + 56))(v10, 1, 1, v80);

          v59 = (uint64_t)v76;
        }
        v70 = (*(uint64_t (**)(char *, uint64_t, id))(v61 + 48))(v10, 1, v60);
        v71 = (uint64_t)v77;
        if (v70 == 1)
        {
          sub_100011484((uint64_t)v10, &qword_1000B13F0);
        }
        else
        {
          v72 = v78;
          sub_10002B89C((uint64_t)v10, v78, type metadata accessor for TimerSessionEntry);
          sub_10002B89C(v72, v59, type metadata accessor for TimerSessionEntry);
          (*(void (**)(uint64_t, _QWORD, uint64_t, id))(v61 + 56))(v59, 0, 1, v60);
          sub_1000112A4(v59, v71, &qword_1000B13F0);
          v73 = v75 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
          swift_beginAccess(v75 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &v82, 33, 0);
          sub_10001E928(v71, v73, &qword_1000B13F0);
          swift_endAccess(&v82);
        }
      }
      else
      {
        v62 = (void *)objc_opt_self(MTSessionUtilities);
        v82 = 0;
        v83 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v63 = v83;
        v64 = objc_msgSend(v1, "description");
        v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        v67 = v66;
        swift_bridgeObjectRelease(v63);

        v82 = v65;
        v83 = v67;
        v68._countAndFlagsBits = 0xD00000000000002CLL;
        v68._object = (void *)0x8000000100086E40;
        String.append(_:)(v68);
        v69 = v83;
        v80 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v69);
        objc_msgSend(v62, "logInfo:", v80);

      }
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10006DF54(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  id v65;
  Class isa;
  void *v67;
  unint64_t v68;
  id v69;
  NSString v70;

  v2 = v1;
  v4 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton;
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton])
  {
    sub_10006E8DC();
    sub_10006E624();
    v5 = sub_10000A58C((uint64_t *)&unk_1000B2750);
    v6 = swift_allocObject(v5, 112, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100081F20;
    v7 = *(void **)&v2[v4];
    if (v7)
    {
      v8 = objc_msgSend(v7, "leadingAnchor");
      v9 = objc_msgSend(v2, "view");
      if (v9)
      {
        v10 = v9;
        v11 = objc_msgSend(v9, "leadingAnchor");

        v12 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v11, 16.0);
        *(_QWORD *)(v6 + 32) = v12;
        v13 = *(void **)&v2[v4];
        if (v13)
        {
          v14 = objc_msgSend(v13, "trailingAnchor");
          v15 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton;
          v16 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton];
          if (v16)
          {
            v17 = objc_msgSend(v16, "leadingAnchor");
            v18 = objc_msgSend(v14, "constraintEqualToAnchor:constant:", v17, -10.0);

            *(_QWORD *)(v6 + 40) = v18;
            v19 = *(void **)&v2[v4];
            if (v19)
            {
              v20 = objc_msgSend(v19, "widthAnchor");
              v21 = *(void **)&v2[v4];
              if (v21)
              {
                v22 = objc_msgSend(v21, "heightAnchor");
                v23 = objc_msgSend(v20, "constraintEqualToAnchor:", v22);

                *(_QWORD *)(v6 + 48) = v23;
                v24 = *(void **)&v2[v4];
                if (v24)
                {
                  v25 = objc_msgSend(v24, "widthAnchor");
                  v26 = *(void **)&v2[v15];
                  if (v26)
                  {
                    v27 = objc_msgSend(v26, "widthAnchor");
                    v28 = objc_msgSend(v25, "constraintEqualToAnchor:", v27);

                    *(_QWORD *)(v6 + 56) = v28;
                    v29 = *(void **)&v2[v4];
                    if (v29)
                    {
                      v30 = objc_msgSend(v29, "widthAnchor");
                      v31 = *(void **)&v2[v15];
                      if (v31)
                      {
                        v32 = objc_msgSend(v31, "heightAnchor");
                        v33 = objc_msgSend(v30, "constraintEqualToAnchor:", v32);

                        *(_QWORD *)(v6 + 64) = v33;
                        v34 = *(void **)&v2[v15];
                        if (v34)
                        {
                          v35 = objc_msgSend(v34, "trailingAnchor");
                          v36 = objc_msgSend(v2, "view");
                          if (v36)
                          {
                            v37 = v36;
                            v38 = objc_msgSend(v36, "SBUISA_systemApertureObstructedAreaLayoutGuide");

                            v39 = objc_msgSend(v38, "leadingAnchor");
                            v40 = objc_msgSend(v35, "constraintLessThanOrEqualToAnchor:", v39);

                            *(_QWORD *)(v6 + 72) = v40;
                            v41 = *(void **)&v2[v4];
                            if (v41)
                            {
                              v42 = objc_msgSend(v41, "topAnchor");
                              v43 = objc_msgSend(v2, "view");
                              if (v43)
                              {
                                v44 = v43;
                                v45 = objc_msgSend(v43, "topAnchor");

                                v46 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v45, 17.0);
                                *(_QWORD *)(v6 + 80) = v46;
                                v47 = *(void **)&v2[v4];
                                if (v47)
                                {
                                  v48 = objc_msgSend(v47, "bottomAnchor");
                                  v49 = objc_msgSend(v2, "view");
                                  if (v49)
                                  {
                                    v50 = v49;
                                    v51 = objc_msgSend(v49, "bottomAnchor");

                                    v52 = objc_msgSend(v48, "constraintEqualToAnchor:constant:", v51, -17.0);
                                    *(_QWORD *)(v6 + 88) = v52;
                                    v53 = *(void **)&v2[v15];
                                    if (v53)
                                    {
                                      v54 = objc_msgSend(v53, "topAnchor");
                                      v55 = objc_msgSend(v2, "view");
                                      if (v55)
                                      {
                                        v56 = v55;
                                        v57 = objc_msgSend(v55, "topAnchor");

                                        v58 = objc_msgSend(v54, "constraintEqualToAnchor:constant:", v57, 17.0);
                                        *(_QWORD *)(v6 + 96) = v58;
                                        v59 = *(void **)&v2[v15];
                                        if (v59)
                                        {
                                          v60 = objc_msgSend(v59, "bottomAnchor");
                                          v61 = objc_msgSend(v2, "view");
                                          if (v61)
                                          {
                                            v62 = v61;
                                            v63 = (void *)objc_opt_self(NSLayoutConstraint);
                                            v64 = objc_msgSend(v62, "bottomAnchor");

                                            v65 = objc_msgSend(v60, "constraintEqualToAnchor:constant:", v64, -17.0);
                                            *(_QWORD *)(v6 + 104) = v65;
                                            specialized Array._endMutation()();
                                            sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
                                            isa = Array._bridgeToObjectiveC()().super.isa;
                                            swift_bridgeObjectRelease(v6);
                                            objc_msgSend(v63, "activateConstraints:", isa);

                                            goto LABEL_23;
                                          }
LABEL_48:
                                          __break(1u);
                                          return;
                                        }
LABEL_47:
                                        __break(1u);
                                        goto LABEL_48;
                                      }
LABEL_46:
                                      __break(1u);
                                      goto LABEL_47;
                                    }
LABEL_45:
                                    __break(1u);
                                    goto LABEL_46;
                                  }
LABEL_44:
                                  __break(1u);
                                  goto LABEL_45;
                                }
LABEL_43:
                                __break(1u);
                                goto LABEL_44;
                              }
LABEL_42:
                              __break(1u);
                              goto LABEL_43;
                            }
LABEL_41:
                            __break(1u);
                            goto LABEL_42;
                          }
LABEL_40:
                          __break(1u);
                          goto LABEL_41;
                        }
LABEL_39:
                        __break(1u);
                        goto LABEL_40;
                      }
LABEL_38:
                      __break(1u);
                      goto LABEL_39;
                    }
LABEL_37:
                    __break(1u);
                    goto LABEL_38;
                  }
LABEL_36:
                  __break(1u);
                  goto LABEL_37;
                }
LABEL_35:
                __break(1u);
                goto LABEL_36;
              }
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_23:
  v67 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
  if (v67)
  {
    if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for TimerSessionEntry(0) + 28)) == 1)
      v68 = 0xE400000000000000;
    else
      v68 = 0xE500000000000000;
    v69 = v67;
    v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v68);
    objc_msgSend(v69, "setState:", v70);

  }
}

void sub_10006E624()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  NSString v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for UIButton.Configuration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100015494(0, &qword_1000B2E80, SBUISystemApertureButton_ptr);
  v5 = objc_msgSend((id)objc_opt_self(UIButtonConfiguration), "sbui_systemApertureSymbolButtonConfiguration");
  static UIButton.Configuration._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = UIButton.init(configuration:primaryAction:)(v4, 0);
  v7 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton;
  v8 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton];
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton] = v6;

  v9 = *(void **)&v1[v7];
  if (!v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  v10 = objc_msgSend(v9, "layer");
  objc_msgSend(v10, "setCornerRadius:", 25.0);

  v11 = *(void **)&v1[v7];
  if (!v11)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = objc_msgSend(v11, "layer");
  objc_msgSend(v12, "setMasksToBounds:", 1);

  v13 = *(void **)&v1[v7];
  if (!v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = objc_msgSend(v1, "view");
  if (!v14)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (!*(_QWORD *)&v1[v7])
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v15 = v14;
  objc_msgSend(v14, "addSubview:");

  v16 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "sbui_systemApertureControlConfiguration");
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v17, v16);

  if (v18)
  {
    if (qword_1000AED18 != -1)
      goto LABEL_13;
    while (1)
    {
      v19 = objc_msgSend(v18, "imageWithSymbolConfiguration:", qword_1000B7038);

      v20 = *(void **)&v1[v7];
      if (v20)
        break;
LABEL_12:
      __break(1u);
LABEL_13:
      swift_once(&qword_1000AED18, sub_100074534);
    }
  }
  else
  {
    v19 = 0;
    v20 = *(void **)&v1[v7];
    if (!v20)
      goto LABEL_12;
  }
  objc_msgSend(v20, "setImage:forState:", v19, 0);
  v21 = *(void **)&v1[v7];
  if (v21)
  {
    objc_msgSend(v21, "addTarget:action:forControlEvents:", v1, "stopAction", 64);

    return;
  }
LABEL_19:
  __break(1u);
}

void sub_10006E8DC()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t ObjectType;
  uint64_t ObjCClassFromMetadata;
  id v20;
  id v21;
  NSString v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  NSString v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  Class isa;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  NSString v53;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(SBUISystemApertureButton), "buttonWithType:", 0);
  v3 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton];
  *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_playPauseButton] = v2;

  v5 = *(void **)&v0[v3];
  if (!v5)
  {
    __break(1u);
    goto LABEL_16;
  }
  v6 = objc_msgSend(v5, "layer");
  objc_msgSend(v6, "setCornerRadius:", 25.0);

  v7 = *(void **)&v1[v3];
  if (!v7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = objc_msgSend(v7, "layer");
  objc_msgSend(v8, "setMasksToBounds:", 1);

  v9 = *(void **)&v1[v3];
  if (!v9)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v10 = *(void **)&v1[v3];
  if (!v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v11 = (void *)objc_opt_self(ClockAngelUtilities);
  v12 = v10;
  v13 = objc_msgSend(v11, "mtOrange");
  v14 = objc_msgSend(v13, "colorWithAlphaComponent:", 0.35);

  objc_msgSend(v12, "setBackgroundColor:", v14);
  v15 = *(void **)&v1[v3];
  if (!v15)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v15, "addTarget:action:forControlEvents:", v1, "playPausedAction", 64);
  v16 = objc_msgSend(v1, "view");
  if (!v16)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (!*(_QWORD *)&v1[v3])
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v17 = v16;
  objc_msgSend(v16, "addSubview:");

  ObjectType = swift_getObjectType(v1);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
  v20 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v21 = objc_allocWithZone((Class)BSUICAPackageView);
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "initWithPackageName:inBundle:", v22, v20);

  v24 = (void *)objc_opt_self(MTSessionUtilities);
  if (v23)
  {
    _StringGuts.grow(_:)(30);
    v25 = objc_msgSend(v1, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v27 = v26;
    swift_bridgeObjectRelease(0xE000000000000000);

    v28._object = (void *)0x8000000100086E70;
    v28._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v28);
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    objc_msgSend(v24, "logInfo:", v29);

    v30 = *(void **)&v1[v3];
    if (v30)
    {
      objc_msgSend(v30, "addSubview:", v23);
      objc_msgSend(v23, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      objc_msgSend(v23, "setUserInteractionEnabled:", 0);
      v31 = sub_10000A58C((uint64_t *)&unk_1000B2750);
      v32 = swift_allocObject(v31, 64, 7);
      *(_OWORD *)(v32 + 16) = xmmword_100081560;
      v33 = objc_msgSend(v23, "widthAnchor");
      v34 = objc_msgSend(v33, "constraintEqualToConstant:", 23.0);

      *(_QWORD *)(v32 + 32) = v34;
      v35 = objc_msgSend(v23, "heightAnchor");
      v36 = objc_msgSend(v35, "constraintEqualToConstant:", 23.0);

      *(_QWORD *)(v32 + 40) = v36;
      v37 = objc_msgSend(v23, "centerXAnchor");
      v38 = *(void **)&v1[v3];
      if (v38)
      {
        v39 = objc_msgSend(v38, "centerXAnchor");
        v40 = objc_msgSend(v37, "constraintEqualToAnchor:", v39);

        *(_QWORD *)(v32 + 48) = v40;
        v41 = objc_msgSend(v23, "centerYAnchor");
        v42 = *(void **)&v1[v3];
        if (v42)
        {
          v43 = v41;
          v44 = (void *)objc_opt_self(NSLayoutConstraint);
          v45 = objc_msgSend(v42, "centerYAnchor");
          v46 = objc_msgSend(v43, "constraintEqualToAnchor:", v45);

          *(_QWORD *)(v32 + 56) = v46;
          specialized Array._endMutation()();
          sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v32);
          objc_msgSend(v44, "activateConstraints:", isa);

          v48 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
          *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage] = v23;

          return;
        }
        goto LABEL_24;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      return;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  _StringGuts.grow(_:)(50);
  v49 = objc_msgSend(v1, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v51 = v50;
  swift_bridgeObjectRelease(0xE000000000000000);

  v52._countAndFlagsBits = 0xD000000000000030;
  v52._object = (void *)0x8000000100084F00;
  String.append(_:)(v52);
  v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  objc_msgSend(v24, "logInfo:", v53);

}

void sub_10006EEE0(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t countAndFlagsBits;
  void *object;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  void *v81;
  void *v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  Class isa;
  void *v91;
  id v92;
  void (*v93)(uint64_t *, _QWORD);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  Swift::String v105;

  v2 = v1;
  v4 = type metadata accessor for TimerCountdownCustomView(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v95 - v8;
  sub_10006DF54(a1);
  v10 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost;
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost])
  {
    sub_10000E800(a1, (uint64_t)&v9[*(int *)(v4 + 20)], type metadata accessor for TimerSessionEntry);
    *(_QWORD *)v9 = sub_10005AA10;
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    v9[*(int *)(v4 + 24)] = 0;
    v11 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B2E78));
    v12 = &v11[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v11) + 16)];
    *((_QWORD *)v12 + 1) = 0;
    swift_unknownObjectWeakInit(v12, 0);
    sub_10000E800((uint64_t)v9, (uint64_t)v7, type metadata accessor for TimerCountdownCustomView);
    v13 = (void *)UIHostingController.init(rootView:)(v7);
    sub_10000E844((uint64_t)v9, type metadata accessor for TimerCountdownCustomView);
    v14 = objc_msgSend(v13, "view");
    if (!v14)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v15 = v14;
    objc_msgSend(v14, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    v16 = objc_msgSend(v13, "view");
    if (!v16)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v17 = v16;
    v18 = objc_msgSend(v16, "layer");

    objc_msgSend(v18, "setAllowsHitTesting:", 0);
    objc_msgSend(v2, "addChildViewController:", v13);
    v19 = objc_msgSend(v2, "view");
    if (!v19)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v20 = v19;
    v21 = objc_msgSend(v13, "view");
    if (!v21)
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v22 = v21;
    objc_msgSend(v20, "addSubview:", v21);

    objc_msgSend(v13, "didMoveToParentViewController:", v2);
    v23 = *(void **)&v2[v10];
    *(_QWORD *)&v2[v10] = v13;

  }
  v24 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost;
  v25 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost];
  v98 = v10;
  if (v25)
  {
LABEL_20:
    v54 = *(void **)&v2[v10];
    if (v54)
    {
      v55 = objc_msgSend(v54, "view");
      if (v55)
      {
        v56 = v55;
        v57 = *(void **)&v2[v24];
        if (v57)
        {
          v58 = objc_msgSend(v57, "view");
          if (v58)
          {
            v59 = v58;
            v60 = objc_msgSend(v2, "view");
            if (v60)
            {
              v61 = v60;
              v96 = v4;
              v97 = a1;
              v99 = objc_msgSend(v60, "SBUISA_systemApertureObstructedAreaLayoutGuide");

              v62 = sub_10000A58C((uint64_t *)&unk_1000B2750);
              v63 = swift_allocObject(v62, 80, 7);
              *(_OWORD *)(v63 + 16) = xmmword_100083250;
              v64 = objc_msgSend(v59, "bottomAnchor");
              v65 = objc_msgSend(v2, "view");
              if (v65)
              {
                v66 = v65;
                v67 = objc_msgSend(v65, "bottomAnchor");

                v68 = objc_msgSend(v64, "constraintEqualToAnchor:constant:", v67, -21.0);
                *(_QWORD *)(v63 + 32) = v68;
                v69 = objc_msgSend(v59, "leadingAnchor");
                v70 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_stopButton];
                if (v70)
                {
                  v71 = objc_msgSend(v70, "trailingAnchor");
                  v72 = objc_msgSend(v69, "constraintGreaterThanOrEqualToAnchor:constant:", v71, 12.0);

                  *(_QWORD *)(v63 + 40) = v72;
                  v73 = objc_msgSend(v56, "leadingAnchor");
                  v74 = objc_msgSend(v99, "trailingAnchor");
                  v75 = objc_msgSend(v73, "constraintGreaterThanOrEqualToAnchor:", v74);

                  *(_QWORD *)(v63 + 48) = v75;
                  v76 = objc_msgSend(v56, "leadingAnchor");
                  v77 = objc_msgSend(v59, "trailingAnchor");
                  v78 = objc_msgSend(v76, "constraintEqualToAnchor:constant:", v77, 5.0);

                  *(_QWORD *)(v63 + 56) = v78;
                  v79 = objc_msgSend(v56, "trailingAnchor");
                  v80 = objc_msgSend(v2, "view");
                  if (v80)
                  {
                    v81 = v80;
                    v82 = (void *)objc_opt_self(NSLayoutConstraint);
                    v83 = objc_msgSend(v81, "SBUISA_systemApertureLegibleContentLayoutMarginsGuide");

                    v84 = objc_msgSend(v83, "trailingAnchor");
                    v85 = objc_msgSend(v79, "constraintEqualToAnchor:", v84);

                    *(_QWORD *)(v63 + 64) = v85;
                    v86 = objc_msgSend(v56, "lastBaselineAnchor");
                    v87 = objc_msgSend(v59, "lastBaselineAnchor");
                    v88 = objc_msgSend(v86, "constraintEqualToAnchor:", v87);

                    *(_QWORD *)(v63 + 72) = v88;
                    v100 = v63;
                    specialized Array._endMutation()();
                    v89 = v100;
                    sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
                    isa = Array._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease(v89);
                    objc_msgSend(v82, "activateConstraints:", isa);

                    objc_msgSend(v59, "setNeedsUpdateConstraints");
                    v91 = *(void **)&v2[v98];
                    if (v91)
                    {
                      v92 = v91;
                      v93 = (void (*)(uint64_t *, _QWORD))dispatch thunk of UIHostingController.rootView.modify(&v100);
                      sub_100073EC4(v97, v94 + *(int *)(v96 + 20));
                      v93(&v100, 0);

                      return;
                    }
                    goto LABEL_38;
                  }
LABEL_37:
                  __break(1u);
LABEL_38:
                  __break(1u);
                  goto LABEL_39;
                }
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_32;
  }
  countAndFlagsBits = *(_QWORD *)(a1 + 16);
  object = *(void **)(a1 + 24);
  if (countAndFlagsBits == 0x5F544E4552525543 && object == (void *)0xED000052454D4954
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0x5F544E4552525543, 0xED000052454D4954, 0) & 1) != 0)
  {
    v28 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v105._object = (void *)0x8000000100085D60;
    v29._countAndFlagsBits = 0x72656D6954;
    v29._object = (void *)0xE500000000000000;
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    v105._countAndFlagsBits = 0xD000000000000013;
    v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v105);
    countAndFlagsBits = v31._countAndFlagsBits;
    object = v31._object;

  }
  else
  {
    swift_bridgeObjectRetain(object);
  }
  v100 = countAndFlagsBits;
  v101 = object;
  v32 = sub_10000EB0C();
  v33 = Text.init<A>(_:)(&v100, &type metadata for String, v32);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  if (qword_1000AED40 != -1)
    swift_once(&qword_1000AED40, sub_1000745C4);
  v40 = qword_1000B7060;
  v41 = objc_allocWithZone((Class)sub_10000A58C(&qword_1000B2E70));
  v42 = (char *)v41 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v41) + 16);
  *((_QWORD *)v42 + 1) = 0;
  swift_unknownObjectWeakInit(v42, 0);
  v100 = v33;
  v101 = v35;
  v102 = v37 & 1;
  v103 = v39;
  v104 = v40;
  swift_retain(v40);
  v43 = (void *)UIHostingController.init(rootView:)(&v100);
  v44 = objc_msgSend(v43, "view");
  if (!v44)
    goto LABEL_43;
  v45 = v44;
  objc_msgSend(v44, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v46 = objc_msgSend(v43, "view");
  v10 = v98;
  if (!v46)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v47 = v46;
  v48 = objc_msgSend(v46, "layer");

  objc_msgSend(v48, "setAllowsHitTesting:", 0);
  objc_msgSend(v2, "addChildViewController:", v43);
  v49 = objc_msgSend(v2, "view");
  if (!v49)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v50 = v49;
  v51 = objc_msgSend(v43, "view");
  if (v51)
  {
    v52 = v51;
    objc_msgSend(v50, "addSubview:", v51);

    objc_msgSend(v43, "didMoveToParentViewController:", v2);
    v53 = *(void **)&v2[v24];
    *(_QWORD *)&v2[v24] = v43;

    goto LABEL_20;
  }
LABEL_46:
  __break(1u);
}

void sub_10006F888(uint64_t *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  unint64_t v20;
  NSString v21;
  uint64_t v22;
  void *v23;
  __objc2_ivar *v24;
  void *v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  Class isa;
  uint64_t v76;
  unint64_t v77;

  v2 = v1;
  v4 = type metadata accessor for AlertingTimerView(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v76 - v8;
  v10 = (void *)objc_opt_self(MTSessionUtilities);
  v76 = 0;
  v77 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  v11 = v77;
  v12 = objc_msgSend(v2, "description");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;
  swift_bridgeObjectRelease(v11);

  v76 = v13;
  v77 = v15;
  v16._object = (void *)0x8000000100088C70;
  v16._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v16);
  v17 = *a1;
  v18 = (void *)a1[1];
  swift_bridgeObjectRetain(v18);
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = v77;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  objc_msgSend(v10, "logInfo:", v21);

  v22 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost;
  v23 = *(void **)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedTimerAlertingHost];
  v24 = &stru_1000AB000;
  if (v23)
    goto LABEL_8;
  sub_10000E800((uint64_t)a1, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
  if (qword_1000AECE8 != -1)
    swift_once(&qword_1000AECE8, sub_1000478C4);
  v25 = (void *)qword_1000B6F08;
  v26 = &v9[*(int *)(v4 + 20)];
  *((_QWORD *)v26 + 3) = type metadata accessor for ClockAngelConnectionManager();
  *((_QWORD *)v26 + 4) = &off_1000A0AF8;
  *(_QWORD *)v26 = v25;
  v27 = (void *)objc_opt_self(ClockAngelUtilities);
  v28 = v25;
  v29 = Color.init(uiColor:)(objc_msgSend(v27, "mtOrange"));
  v30 = Color.init(uiColor:)(objc_msgSend(v27, "mtOrange"));
  v31 = Color.opacity(_:)(0.28);
  swift_release(v30);
  v33 = static Color.white.getter(v32);
  v34 = static Color.white.getter(v33);
  v35 = Color.opacity(_:)(0.2);
  swift_release(v34);
  v36 = &v9[*(int *)(v4 + 24)];
  *((_QWORD *)v36 + 3) = &type metadata for StandardSessionUiConfig;
  *((_QWORD *)v36 + 4) = &off_1000A1520;
  v37 = (_QWORD *)swift_allocObject(&unk_1000A1BF0, 48, 7);
  *(_QWORD *)v36 = v37;
  v37[2] = v29;
  v37[3] = v31;
  v37[4] = v33;
  v37[5] = v35;
  v38 = (char *)objc_allocWithZone((Class)sub_10000A58C((uint64_t *)&unk_1000B2E60));
  v39 = &v38[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v38) + 16)];
  *((_QWORD *)v39 + 1) = 0;
  swift_unknownObjectWeakInit(v39, 0);
  sub_10000E800((uint64_t)v9, (uint64_t)v7, type metadata accessor for AlertingTimerView);
  v40 = (void *)UIHostingController.init(rootView:)(v7);
  sub_10000E844((uint64_t)v9, type metadata accessor for AlertingTimerView);
  v24 = &stru_1000AB000;
  v41 = objc_msgSend(v40, "view");
  if (!v41)
    goto LABEL_19;
  v42 = v41;
  objc_msgSend(v41, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  objc_msgSend(v2, "addChildViewController:", v40);
  v43 = objc_msgSend(v2, "view");
  if (!v43)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v44 = v43;
  v45 = objc_msgSend(v40, "view");
  if (!v45)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v46 = v45;
  objc_msgSend(v44, "addSubview:", v45);

  objc_msgSend(v40, "didMoveToParentViewController:", v2);
  v47 = *(void **)&v2[v22];
  *(_QWORD *)&v2[v22] = v40;

  v23 = *(void **)&v2[v22];
  if (v23)
  {
LABEL_8:
    v48 = objc_msgSend(v23, v24[114].type);
    if (v48)
    {
      v49 = v48;
      v50 = sub_10000A58C((uint64_t *)&unk_1000B2750);
      v51 = swift_allocObject(v50, 64, 7);
      *(_OWORD *)(v51 + 16) = xmmword_100081560;
      v52 = objc_msgSend(v49, "leadingAnchor");
      v53 = objc_msgSend(v2, v24[114].type);
      if (v53)
      {
        v54 = v53;
        v55 = objc_msgSend(v53, "leadingAnchor");

        v56 = objc_msgSend(v52, "constraintEqualToAnchor:constant:", v55, -7.0);
        *(_QWORD *)(v51 + 32) = v56;
        v57 = objc_msgSend(v49, "topAnchor");
        v58 = objc_msgSend(v2, v24[114].type);
        if (v58)
        {
          v59 = v58;
          v60 = objc_msgSend(v58, "topAnchor");

          v61 = objc_msgSend(v57, "constraintEqualToAnchor:", v60);
          *(_QWORD *)(v51 + 40) = v61;
          v62 = objc_msgSend(v49, "trailingAnchor");
          v63 = objc_msgSend(v2, v24[114].type);
          if (v63)
          {
            v64 = v63;
            v65 = objc_msgSend(v63, "SBUISA_systemApertureLegibleContentLayoutMarginsGuide");

            v66 = objc_msgSend(v65, "trailingAnchor");
            v67 = objc_msgSend(v62, "constraintEqualToAnchor:", v66);

            *(_QWORD *)(v51 + 48) = v67;
            v68 = objc_msgSend(v49, "bottomAnchor");
            v69 = objc_msgSend(v2, v24[114].type);
            if (v69)
            {
              v70 = v69;
              v71 = (void *)objc_opt_self(NSLayoutConstraint);
              v72 = objc_msgSend(v70, "bottomAnchor");

              v73 = objc_msgSend(v68, "constraintEqualToAnchor:", v72);
              *(_QWORD *)(v51 + 56) = v73;
              v76 = v51;
              specialized Array._endMutation()();
              v74 = v76;
              sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
              isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease(v74);
              objc_msgSend(v71, "activateConstraints:", isa);

              return;
            }
            goto LABEL_18;
          }
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
}

void sub_10006FF58()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v1 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedLabelHost];
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v3, "view");
    if (!v4)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      return;
    }
    v5 = v4;
    objc_msgSend(v4, "removeFromSuperview");

    objc_msgSend(v3, "didMoveToParentViewController:", 0);
    objc_msgSend(v0, "removeChildViewController:", v3);
    v6 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = 0;

  }
  v7 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost;
  v8 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_expandedCountdownHost];
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v9, "view");
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v10, "removeFromSuperview");

      objc_msgSend(v9, "didMoveToParentViewController:", 0);
      objc_msgSend(v0, "removeChildViewController:", v9);
      v12 = *(id *)&v0[v7];
      *(_QWORD *)&v0[v7] = 0;

      return;
    }
    goto LABEL_9;
  }
}

void sub_1000700A0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  unint64_t v15;
  NSString v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  void *object;
  unint64_t v31;
  NSString v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  unint64_t v40;
  NSString v41;
  void *v42;
  id v43;
  NSString v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String v51;
  unint64_t v52;
  NSString v53;
  void *v54;
  id v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimerSessionEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v58 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(MTSessionUtilities);
  v60 = 0;
  v61 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v9 = v61;
  v10 = objc_msgSend(v1, "description");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;
  swift_bridgeObjectRelease(v9);

  v60 = v11;
  v61 = v13;
  v14._object = (void *)0x8000000100085060;
  v14._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v14);
  v15 = v61;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v59 = v8;
  objc_msgSend(v8, "logInfo:", v16);

  v17 = &v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  v18 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (!v18)
    goto LABEL_6;
  v19 = *(_QWORD *)v17;
  v20 = qword_1000AECC0;
  swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8]);
  if (v20 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  v62 = v19;
  v63 = v18;
  AnyHashable.init<A>(_:)(&v60, &v62, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(&v60);
  sub_10001E790((uint64_t)&v60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100011484((uint64_t)v4, &qword_1000B13F0);
LABEL_6:
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    v21 = v61;
    v22 = objc_msgSend(v1, "description");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;
    swift_bridgeObjectRelease(v21);

    v60 = v23;
    v61 = v25;
    v26._countAndFlagsBits = 0xD000000000000022;
    v26._object = (void *)0x8000000100088C40;
    String.append(_:)(v26);
    v27 = *((_QWORD *)v17 + 1);
    v62 = *(_QWORD *)v17;
    v63 = v27;
    swift_bridgeObjectRetain(v27);
    v28 = sub_10000A58C(&qword_1000AF7A0);
    v29._countAndFlagsBits = String.init<A>(describing:)(&v62, v28);
    object = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(object);
    v31 = v61;
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    objc_msgSend(v59, "logInfo:", v32);

    return;
  }
  v33 = v58;
  sub_10002B89C((uint64_t)v4, v58, type metadata accessor for TimerSessionEntry);
  if (*(_BYTE *)(v33 + *(int *)(v5 + 28)) == 1)
  {
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v34 = v61;
    v35 = objc_msgSend(v1, "description");
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;
    swift_bridgeObjectRelease(v34);

    v60 = v36;
    v61 = v38;
    v39._countAndFlagsBits = 0x6E696D7573657220;
    v39._object = (void *)0xEF72656D69742067;
    String.append(_:)(v39);
    v40 = v61;
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v40);
    objc_msgSend(v59, "logInfo:", v41);

    v42 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
    if (v42)
    {
      v43 = v42;
      v44 = String._bridgeToObjectiveC()();
      objc_msgSend(v43, "setState:", v44);

    }
    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v45 = *(_QWORD *)(v33 + 8);
    swift_bridgeObjectRetain(v45);
    sub_100049A50();
  }
  else
  {
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v46 = v61;
    v47 = objc_msgSend(v1, "description");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;
    swift_bridgeObjectRelease(v46);

    v60 = v48;
    v61 = v50;
    v51._countAndFlagsBits = 0x676E697375617020;
    v51._object = (void *)0xEE0072656D697420;
    String.append(_:)(v51);
    v52 = v61;
    v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v52);
    objc_msgSend(v59, "logInfo:", v53);

    v54 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_pausePlayPackage];
    if (v54)
    {
      v55 = v54;
      v56 = String._bridgeToObjectiveC()();
      objc_msgSend(v55, "setState:", v56);

    }
    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    v45 = *(_QWORD *)(v33 + 8);
    swift_bridgeObjectRetain(v45);
    sub_1000496F0();
  }
  swift_bridgeObjectRelease(v45);
  sub_10000E844(v33, type metadata accessor for TimerSessionEntry);
}

void sub_10007067C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  unint64_t v16;
  NSString v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *object;
  unint64_t v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimerSessionEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)objc_opt_self(MTSessionUtilities);
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  v10 = v37;
  v11 = objc_msgSend(v1, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;
  swift_bridgeObjectRelease(v10);

  v36 = v12;
  v37 = v14;
  v15._object = (void *)0x8000000100088C20;
  v15._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v15);
  v16 = v37;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v9, "logInfo:", v17);

  v18 = &v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (!v19)
    goto LABEL_6;
  v20 = *(_QWORD *)v18;
  v21 = qword_1000AECC0;
  swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8]);
  if (v21 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  v38 = v20;
  v39 = v19;
  AnyHashable.init<A>(_:)(&v36, &v38, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(&v36);
  sub_10001E790((uint64_t)&v36);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100011484((uint64_t)v4, &qword_1000B13F0);
LABEL_6:
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    v22 = v37;
    v23 = objc_msgSend(v1, "description");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;
    swift_bridgeObjectRelease(v22);

    v36 = v24;
    v37 = v26;
    v27._countAndFlagsBits = 0xD000000000000022;
    v27._object = (void *)0x8000000100088C40;
    String.append(_:)(v27);
    v28 = *((_QWORD *)v18 + 1);
    v38 = *(_QWORD *)v18;
    v39 = v28;
    swift_bridgeObjectRetain(v28);
    v29 = sub_10000A58C(&qword_1000AF7A0);
    v30._countAndFlagsBits = String.init<A>(describing:)(&v38, v29);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32 = v37;
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    objc_msgSend(v9, "logInfo:", v33);

    return;
  }
  sub_10002B89C((uint64_t)v4, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
  if (qword_1000AECE8 != -1)
    swift_once(&qword_1000AECE8, sub_1000478C4);
  v34 = *((_QWORD *)v8 + 1);
  swift_bridgeObjectRetain(v34);
  sub_100049DA8();
  swift_bridgeObjectRelease(v34);
  sub_10000E844((uint64_t)v8, type metadata accessor for TimerSessionEntry);
}

void sub_100070A14(void *a1, double a2, double a3)
{
  void *v3;
  void *v4;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  NSString v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD v19[5];
  uint64_t v20;
  objc_super v21;

  v4 = v3;
  v8 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(21);
  v9 = objc_msgSend(v3, "description", 0);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;
  swift_bridgeObjectRelease(0xE000000000000000);

  v13._object = (void *)0x8000000100088E60;
  v13._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v8, "logInfo:", v14, v10);

  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for TimerApertureElementController(0);
  objc_msgSendSuper2(&v21, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v15 = swift_allocObject(&unk_1000A1C90, 24, 7);
  *(_QWORD *)(v15 + 16) = v3;
  v19[4] = sub_100074048;
  v20 = v15;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100074F90;
  v19[3] = &unk_1000A1CA8;
  v16 = _Block_copy(v19);
  v17 = v20;
  v18 = v4;
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v16, 0, swift_release(v17).n128_f64[0]);
  _Block_release(v16);
}

void sub_100070BC8(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String v30;
  unint64_t v31;
  NSString v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  unint64_t v46;
  NSString v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  Swift::String v60;
  unint64_t v61;
  NSString v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  unint64_t v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  Swift::String v76;
  unint64_t v77;
  NSString v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  _QWORD v93[2];
  uint64_t v94;
  unint64_t v95;

  v3 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v93[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimerSessionEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode;
  switch(*(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_activeLayoutMode])
  {
    case 0:
      v10 = (void *)objc_opt_self(MTSessionUtilities);
      v94 = 0;
      v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v11 = v95;
      v12 = objc_msgSend(a2, "description");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;
      swift_bridgeObjectRelease(v11);

      v94 = v13;
      v95 = v15;
      v16 = 0x80000001000868F0;
      v17 = 0xD00000000000001DLL;
      goto LABEL_4;
    case 1:
      v24 = (void *)objc_opt_self(MTSessionUtilities);
      v94 = 0;
      v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      v25 = v95;
      v26 = objc_msgSend(a2, "description");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;
      swift_bridgeObjectRelease(v25);

      v94 = v27;
      v95 = v29;
      v30._countAndFlagsBits = 0xD00000000000001ELL;
      v30._object = (void *)0x8000000100086870;
      String.append(_:)(v30);
      v31 = v95;
      v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v31);
      objc_msgSend(v24, "logInfo:", v32);

      sub_10006FF58();
      v33 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      v34 = *(void **)(v33 + 40);
      if (v34)
      {
        objc_msgSend(v34, "invalidate");
        v35 = *(void **)(v33 + 40);
        *(_QWORD *)(v33 + 40) = 0;

      }
      v36 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      v37 = *(void **)(v36 + 40);
      if (v37)
      {
        objc_msgSend(v37, "invalidate");
        v38 = *(void **)(v36 + 40);
        *(_QWORD *)(v36 + 40) = 0;

      }
      return;
    case 2:
      v39 = (void *)objc_opt_self(MTSessionUtilities);
      v94 = 0;
      v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v40 = v95;
      v41 = objc_msgSend(a2, "description");
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;
      swift_bridgeObjectRelease(v40);

      v94 = v42;
      v95 = v44;
      v45._object = (void *)0x80000001000868D0;
      v45._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v45);
      v46 = v95;
      v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v46);
      objc_msgSend(v39, "logInfo:", v47);

      sub_10006FF58();
      sub_100071898();
      v48 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      v49 = *(void **)(v48 + 40);
      if (v49)
      {
        objc_msgSend(v49, "invalidate");
        v50 = *(void **)(v48 + 40);
        *(_QWORD *)(v48 + 40) = 0;

      }
      v51 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
      if (v51)
        objc_msgSend(v51, "setHidden:", 1);
      v52 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
      if (v52)
        objc_msgSend(v52, "setHidden:", 1);
      v53 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
      if (v53)
        objc_msgSend(v53, "setHidden:", 0);
      return;
    case 3:
      v54 = (void *)objc_opt_self(MTSessionUtilities);
      v94 = 0;
      v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v55 = v95;
      v56 = objc_msgSend(a2, "description");
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;
      swift_bridgeObjectRelease(v55);

      v94 = v57;
      v95 = v59;
      v60._object = (void *)0x80000001000868B0;
      v60._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v60);
      v61 = v95;
      v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v61);
      objc_msgSend(v54, "logInfo:", v62);

      sub_10006FF58();
      sub_1000718A4();
      v63 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      v64 = *(void **)(v63 + 40);
      if (v64)
      {
        objc_msgSend(v64, "invalidate");
        v65 = *(void **)(v63 + 40);
        *(_QWORD *)(v63 + 40) = 0;

      }
      v66 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
      if (v66)
        objc_msgSend(v66, "setHidden:", 0);
      v67 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
      if (v67)
        objc_msgSend(v67, "setHidden:", 0);
      v68 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
      if (v68)
        objc_msgSend(v68, "setHidden:", 1);
      v69 = objc_msgSend(a2, "systemApertureElementContext");
      v92 = (char *)objc_msgSend(v69, "transitionContext");
      swift_unknownObjectRelease(v69);
      if (!v92)
        return;
      if (objc_msgSend(v92, "isUserInitiated"))
        sub_100071528();
LABEL_5:

      return;
    case 4:
      v92 = (char *)&v93[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      v70 = (void *)objc_opt_self(MTSessionUtilities);
      v94 = 0;
      v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      v71 = v95;
      v72 = objc_msgSend(a2, "description");
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
      v75 = v74;
      swift_bridgeObjectRelease(v71);

      v94 = v73;
      v95 = v75;
      v76._countAndFlagsBits = 0xD00000000000001CLL;
      v76._object = (void *)0x8000000100086890;
      String.append(_:)(v76);
      v77 = v95;
      v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v77);
      objc_msgSend(v70, "logInfo:", v78);

      v79 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_compactCountdownAnimation];
      v80 = *(void **)(v79 + 40);
      if (v80)
      {
        objc_msgSend(v80, "invalidate");
        v81 = *(void **)(v79 + 40);
        *(_QWORD *)(v79 + 40) = 0;

      }
      v82 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalCountdownAnimation];
      v83 = *(void **)(v82 + 40);
      if (v83)
      {
        objc_msgSend(v83, "invalidate");
        v84 = *(void **)(v82 + 40);
        *(_QWORD *)(v82 + 40) = 0;

      }
      v85 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_leadingView];
      if (v85)
        objc_msgSend(v85, "setHidden:", 1);
      v86 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
      if (v86)
        objc_msgSend(v86, "setHidden:", 1);
      v87 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_minimalView];
      if (v87)
        objc_msgSend(v87, "setHidden:", 1);
      v88 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
      if (!v88)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
LABEL_47:
        sub_100011484((uint64_t)v5, &qword_1000B13F0);
        return;
      }
      v89 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
      v90 = qword_1000AECC0;
      swift_bridgeObjectRetain(*(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8]);
      if (v90 != -1)
        swift_once(&qword_1000AECC0, sub_10001EBCC);
      v93[0] = v89;
      v93[1] = v88;
      AnyHashable.init<A>(_:)(&v94, v93, &type metadata for String, &protocol witness table for String);
      dispatch thunk of DataStore.getEntry(for:)(&v94);
      sub_10001E790((uint64_t)&v94);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
        goto LABEL_47;
      v91 = (uint64_t *)v92;
      sub_10002B89C((uint64_t)v5, (uint64_t)v92, type metadata accessor for TimerSessionEntry);
      if (*(_QWORD *)&a2[v9] == 4)
      {
        if (*((_BYTE *)v91 + *(int *)(v6 + 28)) == 2)
          sub_10006F888(v91);
        else
          sub_10006EEE0((uint64_t)v91);
      }
      sub_10000E844((uint64_t)v91, type metadata accessor for TimerSessionEntry);
      return;
    default:
      v10 = (void *)objc_opt_self(MTSessionUtilities);
      v94 = 0;
      v95 = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      v18 = v95;
      v19 = objc_msgSend(a2, "description");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;
      swift_bridgeObjectRelease(v18);

      v94 = v20;
      v95 = v22;
      v17 = 0xD000000000000021;
      v16 = 0x8000000100086840;
LABEL_4:
      String.append(_:)(*(Swift::String *)&v17);
      v23 = v95;
      v92 = (char *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v23);
      objc_msgSend(v10, "logInfo:", v92);
      goto LABEL_5;
  }
}

uint64_t sub_100071528()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  unint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  unint64_t v30;
  NSString v31;
  _QWORD v34[2];
  uint64_t v35;
  unint64_t v36;

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v34[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimerSessionEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (_QWORD *)((char *)&v34[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)objc_opt_self(MTSessionUtilities);
  v35 = 0;
  v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v10 = v36;
  v11 = objc_msgSend(v1, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;
  swift_bridgeObjectRelease(v10);

  v35 = v12;
  v36 = v14;
  v15._object = (void *)0x80000001000865F0;
  v15._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v15);
  v16 = v36;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v9, "logInfo:", v17);

  v18 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
  if (!v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    return sub_100011484((uint64_t)v4, &qword_1000B13F0);
  }
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
  v20 = qword_1000AECC0;
  swift_bridgeObjectRetain(*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8]);
  if (v20 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  v34[0] = v19;
  v34[1] = v18;
  AnyHashable.init<A>(_:)(&v35, v34, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(&v35);
  sub_10001E790((uint64_t)&v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return sub_100011484((uint64_t)v4, &qword_1000B13F0);
  sub_10002B89C((uint64_t)v4, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
  if (*((_BYTE *)v8 + *(int *)(v5 + 28)) == 2)
  {
    v35 = 0;
    v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    v21 = v36;
    v22 = objc_msgSend(v1, "description");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;
    swift_bridgeObjectRelease(v21);

    v35 = v23;
    v36 = v25;
    v26._countAndFlagsBits = 0xD000000000000020;
    v26._object = (void *)0x8000000100088BF0;
    String.append(_:)(v26);
    v28 = *v8;
    v27 = (void *)v8[1];
    swift_bridgeObjectRetain(v27);
    v29._countAndFlagsBits = v28;
    v29._object = v27;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v27);
    v30 = v36;
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    objc_msgSend(v9, "logInfo:", v31);

    if (qword_1000AECE8 != -1)
      swift_once(&qword_1000AECE8, sub_1000478C4);
    swift_bridgeObjectRetain(v27);
    sub_10004A100(v28, v27);
    swift_bridgeObjectRelease(v27);
  }
  return sub_10000E844((uint64_t)v8, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_100071898()
{
  return sub_1000718B0();
}

uint64_t sub_1000718A4()
{
  return sub_1000718B0();
}

uint64_t sub_1000718B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v13[2];
  _QWORD v14[5];

  v1 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v1);
  v3 = (char *)&v13[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TimerSessionEntry(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8);
  if (!v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    return sub_100011484((uint64_t)v3, &qword_1000B13F0);
  }
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId);
  v10 = qword_1000AECC0;
  swift_bridgeObjectRetain(v8);
  if (v10 != -1)
    swift_once(&qword_1000AECC0, sub_10001EBCC);
  v13[0] = v9;
  v13[1] = v8;
  AnyHashable.init<A>(_:)(v14, v13, &type metadata for String, &protocol witness table for String);
  dispatch thunk of DataStore.getEntry(for:)(v14);
  sub_10001E790((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    return sub_100011484((uint64_t)v3, &qword_1000B13F0);
  sub_10002B89C((uint64_t)v3, (uint64_t)v7, type metadata accessor for TimerSessionEntry);
  if (v7[*(int *)(v4 + 28)] == 1)
    sub_100073230();
  else
    sub_100072C20();
  return sub_10000E844((uint64_t)v7, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_100071AC8(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v15;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_trailingView];
  if (v7)
  {
    v8 = type metadata accessor for TimerSessionEntry(0);
    Date.init()(v8);
    v9 = Date.timeIntervalSince(_:)(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100051A6C(v9);
    v11 = v10;
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    objc_msgSend(v7, "setAccessibilityLabel:", v12);

  }
  v13 = objc_msgSend(a2, "systemApertureElementContext");
  objc_msgSend(v13, "setElementNeedsUpdate");
  return swift_unknownObjectRelease(v13);
}

void sub_100071C10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[35];

  v4[0] = &unk_100084940;
  v4[1] = &unk_100084958;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10001C12C(319, (unint64_t *)&qword_1000B2C50, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_100084958;
    v4[9] = &unk_100084940;
    v4[10] = &unk_100084970;
    v4[11] = &unk_100084970;
    v4[12] = &unk_100084970;
    v4[13] = &unk_100084970;
    v4[14] = &unk_100084970;
    v4[15] = &unk_100084970;
    v4[16] = &unk_100084970;
    v4[17] = &unk_100084970;
    v4[18] = &unk_100084970;
    v4[19] = &unk_100084970;
    v4[20] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[21] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[22] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[23] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[24] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[25] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[26] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[27] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[28] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[29] = &unk_100084970;
    v4[30] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[31] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[32] = &unk_100084970;
    v4[33] = &unk_100084970;
    v4[34] = &unk_100084970;
    swift_updateClassMetadata2(a1, 256, 35, v4, a1 + 80);
  }
}

void sub_100071D0C(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  unint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Swift::String v46;
  unint64_t v47;
  NSString v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  Swift::String v70;
  id v71;
  uint64_t v72;
  void *v73;
  void *v74;
  Swift::String v75;
  unint64_t v76;
  NSString v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  Swift::String v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  id v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void **aBlock;
  unint64_t v96;
  uint64_t (*v97)(uint64_t);
  void *v98;
  void (*v99)();
  uint64_t v100;
  _QWORD v101[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v94 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v93 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v91 = *(_QWORD *)(v6 - 8);
  v92 = v6;
  __chkstk_darwin(v6);
  v90 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimerSessionEntry(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v85 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v85 - v18;
  sub_1000113C0(a1, (uint64_t)&aBlock);
  v20 = sub_10000A58C(&qword_1000AFFC8);
  if (swift_dynamicCast(v19, &aBlock, v20, v11, 6))
  {
    v87 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v88 = v17;
    v86 = v4;
    sub_10000E844((uint64_t)v19, type metadata accessor for TimerSessionEntry);
    v21 = (void *)objc_opt_self(MTSessionUtilities);
    aBlock = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v22 = objc_msgSend(v2, "description");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26._countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v25);
    v27._countAndFlagsBits = 0xD000000000000033;
    v27._object = (void *)0x8000000100086DC0;
    String.append(_:)(v27);
    v28 = objc_msgSend(v2, "description");
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v31 = v30;

    v32._countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v31);
    v33 = v96;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    v89 = v21;
    objc_msgSend(v21, "logInfo:", v34);

    v35 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8];
    if (v35)
    {
      v36 = *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId];
      v37 = qword_1000AECC0;
      swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_sessionId + 8]);
      if (v37 != -1)
        swift_once(&qword_1000AECC0, sub_10001EBCC);
      v101[0] = v36;
      v101[1] = v35;
      AnyHashable.init<A>(_:)(&aBlock, v101, &type metadata for String, &protocol witness table for String);
      dispatch thunk of DataStore.getEntry(for:)(&aBlock);
      sub_10001E790((uint64_t)&aBlock);
      v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
      v40 = (uint64_t)v87;
      v39 = (uint64_t)v88;
      if (v38 != 1)
      {
        sub_10002B89C((uint64_t)v10, (uint64_t)v88, type metadata accessor for TimerSessionEntry);
        aBlock = 0;
        v96 = 0xE000000000000000;
        _StringGuts.grow(_:)(18);
        v41 = v96;
        v42 = objc_msgSend(v2, "description");
        v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v45 = v44;
        swift_bridgeObjectRelease(v41);

        aBlock = (void **)v43;
        v96 = v45;
        v46._object = (void *)0x8000000100086E20;
        v46._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v46);
        v47 = v96;
        v48 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v47);
        objc_msgSend(v89, "logInfo:", v48);

        v49 = sub_100015494(0, (unint64_t *)&qword_1000AFFE0, OS_dispatch_queue_ptr);
        v50 = (void *)static OS_dispatch_queue.main.getter(v49);
        sub_10000E800(v39, v40, type metadata accessor for TimerSessionEntry);
        v51 = *(unsigned __int8 *)(v12 + 80);
        v52 = (v51 + 24) & ~v51;
        v53 = swift_allocObject(&unk_1000A1B28, v52 + v13, v51 | 7);
        *(_QWORD *)(v53 + 16) = v2;
        sub_10002B89C(v40, v53 + v52, type metadata accessor for TimerSessionEntry);
        v99 = sub_100073DDC;
        v100 = v53;
        aBlock = _NSConcreteStackBlock;
        v96 = 1107296256;
        v97 = sub_10001C5FC;
        v98 = &unk_1000A1B40;
        v54 = _Block_copy(&aBlock);
        v55 = v100;
        v56 = v2;
        swift_release(v55);
        v57 = v90;
        static DispatchQoS.unspecified.getter(v58);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v59 = sub_1000073C0((unint64_t *)&qword_1000AFB80, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v60 = sub_10000A58C((uint64_t *)&unk_1000AFFF0);
        v61 = sub_10001DC0C();
        v62 = v93;
        v63 = v86;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v60, v61, v86, v59);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v62, v54);
        _Block_release(v54);

        (*(void (**)(char *, uint64_t))(v94 + 8))(v62, v63);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v57, v92);
        sub_10000E844(v39, type metadata accessor for TimerSessionEntry);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    }
    sub_100011484((uint64_t)v10, &qword_1000B13F0);
    aBlock = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v78 = v96;
    v79 = objc_msgSend(v2, "description");
    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v82 = v81;
    swift_bridgeObjectRelease(v78);

    aBlock = (void **)v80;
    v96 = v82;
    v83._countAndFlagsBits = 0xD000000000000011;
    v83._object = (void *)0x8000000100086E00;
    String.append(_:)(v83);
    v84 = v96;
    v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v84);
    objc_msgSend(v89, "logInfo:", v77);
  }
  else
  {
    v64 = (void *)objc_opt_self(MTSessionUtilities);
    aBlock = 0;
    v96 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    v65 = v96;
    v66 = objc_msgSend(v2, "description");
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v69 = v68;
    swift_bridgeObjectRelease(v65);

    aBlock = (void **)v67;
    v96 = v69;
    v70._countAndFlagsBits = 0xD000000000000027;
    v70._object = (void *)0x8000000100086D90;
    String.append(_:)(v70);
    v71 = objc_msgSend(v2, "description");
    v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    v74 = v73;

    v75._countAndFlagsBits = v72;
    v75._object = v74;
    String.append(_:)(v75);
    swift_bridgeObjectRelease(v74);
    v76 = v96;
    v77 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v76);
    objc_msgSend(v64, "logInfo:", v77);
  }

}

uint64_t sub_10007246C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC10ClockAngel30TimerApertureElementController_observerId);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

id sub_100072698()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TimerApertureAccessoryView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TimerApertureAccessoryView()
{
  return objc_opt_self(_TtC10ClockAngel26TimerApertureAccessoryView);
}

id sub_1000726E8(unsigned __int8 a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;
  id v7;
  NSString v8;
  id v9;
  NSString v10;
  id v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  unint64_t v15;
  NSString v16;
  uint64_t v17;
  void *v18;
  NSString v19;
  id v20;
  uint64_t v21;
  int v22;
  void *v23;
  void *v24;
  uint64_t v25;
  Swift::String v26;
  unint64_t v27;
  NSString v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  Swift::String v40;
  unint64_t v41;
  void *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v2 = v1;
  if (a1 == 1)
    v4 = 0x8000000100088BD0;
  else
    v4 = 0x8000000100088B20;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v2);
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v7 = objc_allocWithZone((Class)BSUICAPackageView);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v9 = objc_msgSend(v7, "initWithPackageName:inBundle:", v8, v6);

  if (!v9)
  {
    v12 = (void *)objc_opt_self(MTSessionUtilities);
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    *(_QWORD *)&v44 = v2;
    v13 = type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)(&v44, &v46, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    v14._object = (void *)0x8000000100088B40;
    String.append(_:)(v14);
    v15 = v47;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    objc_msgSend(v12, "logInfo:", v16);
    v9 = 0;
    goto LABEL_24;
  }
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "publishedObjectWithName:", v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(&v44);
    swift_unknownObjectRelease(v11);
  }
  else
  {
    v44 = 0u;
    v45 = 0u;
  }
  sub_1000112A4((uint64_t)&v44, (uint64_t)&v46, &qword_1000B13D0);
  if (!v48)
    goto LABEL_22;
  v17 = sub_100015494(0, (unint64_t *)&unk_1000B2E40, CAShapeLayer_ptr);
  if ((swift_dynamicCast(&v43, &v46, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
  {
LABEL_23:
    v38 = (void *)objc_opt_self(MTSessionUtilities);
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    *(_QWORD *)&v44 = v2;
    v39 = type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)(&v44, &v46, v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v40._countAndFlagsBits = 0xD000000000000026;
    v40._object = (void *)0x8000000100088B70;
    String.append(_:)(v40);
    v41 = v47;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    objc_msgSend(v38, "logInfo:", v16);
    goto LABEL_24;
  }
  v18 = v43;
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v9, "publishedObjectWithName:", v19);

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)(&v44);
    swift_unknownObjectRelease(v20);
  }
  else
  {
    v44 = 0u;
    v45 = 0u;
  }
  sub_1000112A4((uint64_t)&v44, (uint64_t)&v46, &qword_1000B13D0);
  if (!v48)
  {

LABEL_22:
    sub_100011484((uint64_t)&v46, &qword_1000B13D0);
    goto LABEL_23;
  }
  v21 = sub_100015494(0, (unint64_t *)&unk_1000B30E0, CALayer_ptr);
  if ((swift_dynamicCast(&v43, &v46, (char *)&type metadata for Any + 8, v21, 6) & 1) == 0)
  {

    goto LABEL_23;
  }
  v22 = a1;
  v23 = v43;
  v24 = (void *)objc_opt_self(MTSessionUtilities);
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  *(_QWORD *)&v44 = v2;
  v25 = type metadata accessor for TimerAnimationCountdown(0);
  _print_unlocked<A, B>(_:_:)(&v44, &v46, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v26._countAndFlagsBits = 0xD000000000000029;
  v26._object = (void *)0x8000000100088BA0;
  String.append(_:)(v26);
  v27 = v47;
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  objc_msgSend(v24, "logInfo:", v28);

  v29 = (void *)v2[2];
  v2[2] = v9;
  v30 = v9;

  v31 = (void *)v2[3];
  v2[3] = v18;
  v32 = v18;

  v33 = (void *)v2[4];
  v2[4] = v23;
  v16 = v23;

  v34 = 0x646573756170;
  if (v22 == 1)
    v34 = 0x702D6F6E696D6F64;
  v35 = 0xE600000000000000;
  v36 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier);
  v37 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier + 8);
  if (v22 == 1)
    v35 = 0xED00006465737561;
  *v36 = v34;
  v36[1] = v35;
  swift_bridgeObjectRelease(v37);
  sub_1000734F0(0.0);

LABEL_24:
  return v9;
}

void sub_100072C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  double v13;
  char v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  char v25[24];

  v1 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v1);
  v3 = &v25[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = *(void **)(v0 + 40);
  if (v4)
  {
    objc_msgSend(v4, "invalidate");
    v5 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 40) = 0;

  }
  v6 = objc_msgSend((id)objc_opt_self(CADisplayLink), "displayLinkWithTarget:selector:", v0, "updateCountdownAnimation");
  v7 = *(void **)(v0 + 40);
  *(_QWORD *)(v0 + 40) = v6;

  v8 = *(void **)(v0 + 40);
  if (v8)
  {
    v9 = v0 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
    swift_beginAccess(v0 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, v25, 0, 0);
    sub_100011440(v9, (uint64_t)v3, &qword_1000B13F0);
    v10 = type metadata accessor for TimerSessionEntry(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v3, 1, v10))
    {
      v11 = v8;
      sub_100011484((uint64_t)v3, &qword_1000B13F0);
    }
    else
    {
      v12 = &v3[*(int *)(v10 + 36)];
      v13 = *(double *)v12;
      v14 = v12[8];
      v15 = v8;
      sub_100011484((uint64_t)v3, &qword_1000B13F0);
      if ((v14 & 1) == 0)
      {
        if (v13 >= 0.0 && v13 < 10.0)
        {
          v16 = 30;
LABEL_8:
          objc_msgSend(v8, "setPreferredFramesPerSecond:", v16);

          v17 = *(void **)(v0 + 40);
          if (v17)
          {
            v18 = (void *)objc_opt_self(NSRunLoop);
            v19 = v17;
            v20 = objc_msgSend(v18, "currentRunLoop");
            objc_msgSend(v19, "addToRunLoop:forMode:", v20, NSRunLoopCommonModes);

          }
          return;
        }
        if (v13 < 10.0 || v13 >= 45.0)
        {
          if (v13 >= 240.0 || v13 < 45.0)
            v16 = 1;
          else
            v16 = 5;
          goto LABEL_8;
        }
      }
    }
    v16 = 10;
    goto LABEL_8;
  }
}

void sub_100072E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  unint64_t v16;
  NSString v17;
  char *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSString v25;
  uint64_t v26;
  double v27;
  char *v28;
  double v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE v35[24];

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for TimerSessionEntry(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, v35, 0, 0);
  sub_100011440(v12, (uint64_t)v4, &qword_1000B13F0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100011484((uint64_t)v4, &qword_1000B13F0);
    v13 = (void *)objc_opt_self(MTSessionUtilities);
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v32 = v1;
    v14 = type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)(&v32, &v33, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v15._countAndFlagsBits = 0xD00000000000002BLL;
    v15._object = (void *)0x8000000100088A70;
    String.append(_:)(v15);
    v16 = v34;
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "logInfo:", v17, swift_bridgeObjectRelease(v16).n128_f64[0]);

    return;
  }
  sub_10002B89C((uint64_t)v4, (uint64_t)v11, type metadata accessor for TimerSessionEntry);
  v18 = &v11[v5[9]];
  if ((v18[8] & 1) != 0)
  {
    v19 = (void *)objc_opt_self(MTSessionUtilities);
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    v32 = v1;
    v20 = type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)(&v32, &v33, v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v21 = 0x8000000100088AC0;
    v22 = 0xD000000000000010;
  }
  else
  {
    if (!v11[v5[7]])
    {
      v27 = *(double *)v18;
      v28 = &v11[v5[10]];
      v29 = *(double *)v28;
      v30 = v28[8];
      v31 = sub_10000E800((uint64_t)v11, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
      if (v30 == 1)
        v29 = Date.timeIntervalSinceNow.getter(v31) / v27;
      sub_10000E844((uint64_t)v9, type metadata accessor for TimerSessionEntry);
      sub_1000734F0(1.0 - v29);
      v26 = (uint64_t)v11;
      goto LABEL_8;
    }
    v19 = (void *)objc_opt_self(MTSessionUtilities);
    v33 = 0;
    v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(56);
    v32 = v1;
    v23 = type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)(&v32, &v33, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v22 = 0xD000000000000036;
    v21 = 0x8000000100088AE0;
  }
  String.append(_:)(*(Swift::String *)&v22);
  v24 = v34;
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "logInfo:", v25, swift_bridgeObjectRelease(v24).n128_f64[0]);

  v26 = (uint64_t)v11;
LABEL_8:
  sub_10000E844(v26, type metadata accessor for TimerSessionEntry);
}

void sub_100073230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  Swift::String v14;
  unint64_t v15;
  NSString v16;
  char *v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  unint64_t v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE v26[24];

  v1 = v0;
  v2 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TimerSessionEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + 40);
  if (v9)
  {
    objc_msgSend(v9, "invalidate");
    v10 = *(void **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;

  }
  v11 = v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, v26, 0, 0);
  sub_100011440(v11, (uint64_t)v4, &qword_1000B13F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100011484((uint64_t)v4, &qword_1000B13F0);
    v12 = (void *)objc_opt_self(MTSessionUtilities);
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v23 = v1;
    v13 = type metadata accessor for TimerAnimationCountdown(0);
    _print_unlocked<A, B>(_:_:)(&v23, &v24, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v14._countAndFlagsBits = 0xD00000000000002BLL;
    v14._object = (void *)0x8000000100088A70;
    String.append(_:)(v14);
    v15 = v25;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    objc_msgSend(v12, "logInfo:", v16);

  }
  else
  {
    sub_10002B89C((uint64_t)v4, (uint64_t)v8, type metadata accessor for TimerSessionEntry);
    v17 = &v8[*(int *)(v5 + 40)];
    if ((v17[8] & 1) != 0)
    {
      v18 = (void *)objc_opt_self(MTSessionUtilities);
      v24 = 0;
      v25 = 0xE000000000000000;
      _StringGuts.grow(_:)(26);
      v23 = v1;
      v19 = type metadata accessor for TimerAnimationCountdown(0);
      _print_unlocked<A, B>(_:_:)(&v23, &v24, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v20._object = (void *)0x8000000100088AA0;
      v20._countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v20);
      v21 = v25;
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21);
      objc_msgSend(v18, "logInfo:", v22);

    }
    else
    {
      sub_1000734F0(1.0 - *(double *)v17);
    }
    sub_10000E844((uint64_t)v8, type metadata accessor for TimerSessionEntry);
  }
}

void sub_1000734F0(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSString v14;
  void *v15;
  void *v16;
  id v17;
  CGFloat v18;
  void *v19;
  uint64_t v20;
  id v21;
  NSString v22;
  CATransform3D v23;
  _BYTE v24[24];

  v3 = sub_10000A58C(&qword_1000B13F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TimerSessionEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)v1[3];
  if (v10)
    objc_msgSend(v10, "setStrokeStart:", a1 * 0.9299 + 0.07);
  v11 = (uint64_t)v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, v24, 0, 0);
  sub_100011440(v11, (uint64_t)v5, &qword_1000B13F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100011484((uint64_t)v5, &qword_1000B13F0);
    v12 = (void *)v1[2];
    if (!v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  sub_10002B89C((uint64_t)v5, (uint64_t)v9, type metadata accessor for TimerSessionEntry);
  if (v9[*(int *)(v6 + 28)] != 1)
  {
    sub_10000E844((uint64_t)v9, type metadata accessor for TimerSessionEntry);
    v12 = (void *)v1[2];
    if (!v12)
    {
LABEL_6:
      objc_msgSend((id)objc_opt_self(CATransaction), "setDisableActions:", 1);
      v15 = (void *)v1[4];
      if (v15)
      {
        v16 = (void *)objc_opt_self(ClockAngelUtilities);
        v17 = v15;
        objc_msgSend(v16, "radFromDeg:", a1 * 342.0 + 18.0);
        CATransform3DMakeRotation(&v23, v18, 0.0, 0.0, 1.0);
        objc_msgSend(v17, "setTransform:", &v23);

      }
      return;
    }
LABEL_5:
    v13 = v12;
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setState:", v14);

    goto LABEL_6;
  }
  v19 = (void *)v1[2];
  if (v19)
  {
    v20 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier + 8);
    v21 = v19;
    swift_bridgeObjectRetain(v20);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    objc_msgSend(v21, "setState:", v22);

  }
  sub_10000E844((uint64_t)v9, type metadata accessor for TimerSessionEntry);
}

uint64_t sub_1000737D4()
{
  id *v0;

  sub_100011484((uint64_t)v0 + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_entry, &qword_1000B13F0);
  swift_bridgeObjectRelease(*(id *)((char *)v0
                                  + OBJC_IVAR____TtC10ClockAngel23TimerAnimationCountdown_pausedIdentifier
                                  + 8));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_100073840()
{
  return type metadata accessor for TimerAnimationCountdown(0);
}

uint64_t type metadata accessor for TimerAnimationCountdown(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B2CA8, (uint64_t)&nominal type descriptor for TimerAnimationCountdown);
}

void sub_10007385C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100084970;
  v4[1] = &unk_100084970;
  v4[2] = &unk_100084970;
  v4[3] = &unk_100084970;
  sub_10001C12C(319, (unint64_t *)&unk_1000B2FA0, type metadata accessor for TimerSessionEntry);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_100084940;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_1000738F0(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  BOOL v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  uint64_t v19;

  v2 = v1;
  v4 = objc_msgSend(v2, "traitCollection");
  v5 = objc_msgSend(v4, "_backlightLuminance");

  if (v5 == (id)1 && (!a1 || objc_msgSend(a1, "_backlightLuminance") != (id)1))
  {
    v9 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(42);
    v15 = objc_msgSend(v2, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v17 = v16;
    swift_bridgeObjectRelease(0xE000000000000000);

    v19 = v17;
    v14 = 0x8000000100088A40;
    v13 = 0xD000000000000028;
    goto LABEL_12;
  }
  v6 = objc_msgSend(v2, "traitCollection");
  v7 = objc_msgSend(v6, "_backlightLuminance");

  v8 = v7 == (id)1 || a1 == 0;
  if (!v8 && objc_msgSend(a1, "_backlightLuminance") == (id)1)
  {
    v9 = (void *)objc_opt_self(MTSessionUtilities);
    _StringGuts.grow(_:)(44);
    v10 = objc_msgSend(v2, "description");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v12 = v11;
    swift_bridgeObjectRelease(0xE000000000000000);

    v19 = v12;
    v13 = 0xD00000000000002ALL;
    v14 = 0x8000000100088A10;
LABEL_12:
    String.append(_:)(*(Swift::String *)&v13);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    objc_msgSend(v9, "logInfo:", v18);

  }
}

uint64_t sub_100073DAC()
{
  return sub_1000073C0(&qword_1000B2E28, type metadata accessor for TimerApertureElementController, (uint64_t)&unk_1000849F8);
}

void sub_100073DDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimerSessionEntry(0) - 8) + 80);
  sub_10006B864((uint64_t *)(v0 + ((v1 + 24) & ~v1)));
}

uint64_t sub_100073E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100073E2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100073E34()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100073E58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100073E64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100073E88()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100073EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimerSessionEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100073F08()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100073F2C()
{
  uint64_t v0;

  return sub_100058A6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100073F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for TimerSessionEntry(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  v7 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100073FE4(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for TimerSessionEntry(0);
  return sub_100071AC8(a1, *(char **)(v1 + 16));
}

uint64_t sub_100074024()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100074048(uint64_t a1)
{
  uint64_t v1;

  sub_100070BC8(a1, *(char **)(v1 + 16));
}

id sub_100074188()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DefaultSceneDelegate()
{
  return objc_opt_self(_TtC10ClockAngel20DefaultSceneDelegate);
}

void sub_1000741E8(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  Swift::String v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  NSString v29;

  v3 = v2;
  v6 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(61);
  v7._countAndFlagsBits = 0xD00000000000003BLL;
  v7._object = (void *)0x8000000100088F60;
  String.append(_:)(v7);
  v8 = objc_msgSend(a2, "role");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000);
  objc_msgSend(v6, "logInfo:", v13);

  v14 = objc_opt_self(UIWindowScene);
  v15 = swift_dynamicCastObjCClass(a1, v14);
  if (!v15)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v24 = objc_msgSend(a1, "description");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28._countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(v27);
    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0x8000000100088FA0);
    objc_msgSend(v6, "logError:", v29);
    goto LABEL_5;
  }
  v16 = v15;
  v17 = objc_allocWithZone((Class)UIWindow);
  v18 = a1;
  v19 = objc_msgSend(v17, "initWithWindowScene:", v16);
  v20 = objc_msgSend(objc_allocWithZone((Class)UIViewController), "init");
  v21 = objc_msgSend(v20, "view");
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend((id)objc_opt_self(UIColor), "redColor");
    objc_msgSend(v22, "setBackgroundColor:", v23);

    objc_msgSend(v19, "setRootViewController:", v20);
    objc_msgSend(v19, "makeKeyAndVisible");
    v29 = *(NSString *)(v3 + OBJC_IVAR____TtC10ClockAngel20DefaultSceneDelegate_window);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC10ClockAngel20DefaultSceneDelegate_window) = v19;

LABEL_5:
    return;
  }
  __break(1u);
}

id sub_1000744A0()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)), "initWithRed:green:blue:alpha:", 0.6, 0.6, 0.6, 1.0);
}

void sub_1000744DC()
{
  qword_1000B7018 = static Font.Weight.light.getter();
}

uint64_t sub_1000744F8(uint64_t a1)
{
  return sub_100074770(17.0, a1, &qword_1000B7020);
}

void sub_100074508()
{
  qword_1000B7028 = static Font.Weight.medium.getter();
}

void sub_100074524()
{
  qword_1000B7030 = 0x4049000000000000;
}

id sub_100074534()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:", 6, 16.0);
  qword_1000B7038 = (uint64_t)result;
  return result;
}

void sub_100074574()
{
  qword_1000B7040 = 0x4047800000000000;
}

void sub_100074588()
{
  qword_1000B7048 = static Font.Weight.light.getter();
}

uint64_t sub_1000745A4(uint64_t a1)
{
  return sub_100074770(24.0, a1, &qword_1000B7050);
}

uint64_t sub_1000745B4(uint64_t a1)
{
  return sub_100074770(20.0, a1, &qword_1000B7058);
}

uint64_t sub_1000745C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t result;
  uint64_t v18;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000A58C(&qword_1000AF198);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Font.TextStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Font.TextStyle.body(_:), v7);
  v11 = type metadata accessor for Font.Design(0);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
  v13 = static Font.Weight.medium.getter(v12);
  v14 = static Font.system(_:design:weight:)(v10, v6, *(_QWORD *)&v13, 0);
  sub_10007482C((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Font.Leading.tight(_:), v0);
  v15 = Font.leading(_:)(v3, v14);
  v16 = swift_release(v14);
  result = (*(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v16);
  qword_1000B7060 = v15;
  return result;
}

uint64_t sub_100074760(uint64_t a1)
{
  return sub_100074770(30.0, a1, &qword_1000B7068);
}

uint64_t sub_100074770(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = sub_10000A58C(&qword_1000AF198);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static Font.Weight.medium.getter(v6);
  v10 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  v11 = static Font.system(size:weight:design:)(*(_QWORD *)&v9, 0, v8, a1);
  result = sub_10007482C((uint64_t)v8);
  *a3 = v11;
  return result;
}

uint64_t sub_10007482C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000A58C(&qword_1000AF198);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10007486C()
{
  qword_1000B7070 = 0x4045000000000000;
}

void sub_10007487C()
{
  qword_1000B7078 = 0x4043000000000000;
}

uint64_t sub_10007488C(uint64_t a1)
{
  return sub_100074A9C(38.0, a1, (double (*)(uint64_t))&static Font.Weight.bold.getter, (unsigned int *)&enum case for Font.Design.rounded(_:), &qword_1000B7080);
}

uint64_t sub_1000748B0(uint64_t a1)
{
  return sub_1000749C4(158.0, a1, &qword_1000B7088);
}

uint64_t sub_1000748C8(uint64_t a1)
{
  return sub_100074A9C(50.0, a1, (double (*)(uint64_t))&static Font.Weight.semibold.getter, (unsigned int *)&enum case for Font.Design.rounded(_:), &qword_1000B7090);
}

void sub_1000748EC()
{
  qword_1000B7098 = 0x4058000000000000;
}

void sub_1000748FC()
{
  qword_1000B70A0 = 0x4042000000000000;
}

void sub_10007490C()
{
  qword_1000B70A8 = 0x4045800000000000;
}

void sub_100074920()
{
  qword_1000B70B0 = 0x4038000000000000;
}

void sub_100074930()
{
  qword_1000B70B8 = 0x404E000000000000;
}

void sub_100074940()
{
  qword_1000B70C0 = 0x4061400000000000;
}

void sub_100074954()
{
  qword_1000B70C8 = 0x4043000000000000;
}

uint64_t sub_100074964(uint64_t a1)
{
  return sub_1000749C4(110.0, a1, &qword_1000B70D0);
}

uint64_t sub_10007497C(uint64_t a1)
{
  return sub_1000749C4(130.0, a1, &qword_1000B70D8);
}

uint64_t sub_100074994(uint64_t a1)
{
  return sub_1000749C4(170.0, a1, &qword_1000B70E0);
}

uint64_t sub_1000749AC(uint64_t a1)
{
  return sub_1000749C4(190.0, a1, &qword_1000B70E8);
}

uint64_t sub_1000749C4(CGFloat a1, uint64_t a2, uint64_t *a3)
{
  __CFString *v5;
  CTFontRef v6;
  uint64_t result;

  v5 = (__CFString *)String._bridgeToObjectiveC()();
  v6 = CTFontCreateWithNameAndOptions(v5, a1, 0, 0x20000uLL);

  result = Font.init(_:)(v6);
  *a3 = result;
  return result;
}

void sub_100074A38()
{
  qword_1000B70F0 = 0xC024000000000000;
}

void sub_100074A48()
{
  qword_1000B70F8 = 0xC010000000000000;
}

void sub_100074A58()
{
  qword_1000B7100 = 0x4034000000000000;
}

void sub_100074A68()
{
  qword_1000B7108 = 0x403E000000000000;
}

uint64_t sub_100074A78(uint64_t a1)
{
  return sub_100074A9C(50.0, a1, (double (*)(uint64_t))&static Font.Weight.bold.getter, &enum case for Font.Design.default(_:), &qword_1000B7110);
}

uint64_t sub_100074A9C(double a1, uint64_t a2, double (*a3)(uint64_t), unsigned int *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v9 = sub_10000A58C(&qword_1000AF198);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a3(v10);
  v14 = *a4;
  v15 = type metadata accessor for Font.Design(0);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v12, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  v17 = static Font.system(size:weight:design:)(*(_QWORD *)&v13, 0, v12, a1);
  result = sub_10007482C((uint64_t)v12);
  *a5 = v17;
  return result;
}

void sub_100074B84()
{
  qword_1000B7118 = 0x405C800000000000;
}

void sub_100074B98()
{
  qword_1000B7120 = 0x4034000000000000;
}

uint64_t sub_100074BA8()
{
  uint64_t result;

  result = Image.init(systemName:)(0x72656D6974, 0xE500000000000000);
  qword_1000B7128 = result;
  return result;
}

uint64_t sub_100074BD4()
{
  uint64_t result;

  result = Image.init(systemName:)(0x69662E6D72616C61, 0xEA00000000006C6CLL);
  qword_1000B7130 = result;
  return result;
}

uint64_t sub_100074C08(uint64_t a1)
{
  return sub_100074CA4(0.05, a1, &qword_1000B7138);
}

uint64_t sub_100074C1C()
{
  uint64_t result;

  result = static Animation.easeInOut(duration:)(0.7);
  qword_1000B7140 = result;
  return result;
}

uint64_t sub_100074C44(uint64_t a1)
{
  return sub_100074CA4(0.1, a1, &qword_1000B7148);
}

uint64_t sub_100074C58(uint64_t a1)
{
  return sub_100074D14(0.1, a1, &qword_1000B7150);
}

uint64_t sub_100074C6C(uint64_t a1)
{
  return sub_100074CA4(0.2, a1, &qword_1000B7158);
}

uint64_t sub_100074C80(uint64_t a1)
{
  return sub_100074D14(0.2, a1, &qword_1000B7160);
}

uint64_t sub_100074C94(uint64_t a1)
{
  return sub_100074CA4(0.25, a1, &qword_1000B7168);
}

uint64_t sub_100074CA4(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = static Animation.spring(response:dampingFraction:blendDuration:)(0.5, 0.5, 0.0);
  v6 = Animation.delay(_:)(a1);
  result = swift_release(v5);
  *a3 = v6;
  return result;
}

uint64_t sub_100074D00(uint64_t a1)
{
  return sub_100074D14(0.2, a1, &qword_1000B7170);
}

uint64_t sub_100074D14(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = static Animation.easeInOut(duration:)(0.7);
  v6 = Animation.delay(_:)(a1);
  result = swift_release(v5);
  *a3 = v6;
  return result;
}

uint64_t sub_100074D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = static AnyTransition.move(edge:)(2);
  v1 = static AnyTransition.scale.getter();
  v2 = AnyTransition.combined(with:)(v1, v0);
  swift_release(v0);
  result = swift_release(v1);
  qword_1000B7178 = v2;
  return result;
}

uint64_t sub_100074DCC()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_100074F3C();
  result = VerticalAlignment.init(_:)(&_s18ActionButtonBottomON, v0);
  qword_1000B7180 = result;
  return result;
}

void sub_100074DF8(uint64_t a1)
{
  sub_100074E40(a1, qword_1000B7188);
}

uint64_t sub_100074E0C()
{
  return 0x6C655972656D6974;
}

void sub_100074E2C(uint64_t a1)
{
  sub_100074E40(a1, qword_1000B71A0);
}

void sub_100074E40(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;
  id v6;

  v3 = type metadata accessor for Material(0);
  sub_100074EE0(v3, a2);
  sub_100068E9C(v3, (uint64_t)a2);
  v4 = type metadata accessor for TimerCompressedController();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  static Material.coreMaterial(bundle:provider:)();

}

uint64_t *sub_100074EE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100074F20()
{
  return 0x72614472656D6974;
}

unint64_t sub_100074F3C()
{
  unint64_t result;

  result = qword_1000B2EF0;
  if (!qword_1000B2EF0)
  {
    result = swift_getWitnessTable(&unk_100084AB4, &_s18ActionButtonBottomON);
    atomic_store(result, (unint64_t *)&qword_1000B2EF0);
  }
  return result;
}

ValueMetadata *_s18ActionButtonBottomOMa()
{
  return &_s18ActionButtonBottomON;
}

uint64_t sub_100074F90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_100075474()
{
  sub_100075FB0();
  sub_10007548C();
  sub_1000769EC();
}

void sub_10007548C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  CGFloat v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  CGFloat m11;
  Class isa;
  void *v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  id v71;
  NSString v72;
  void *v73;
  CGFloat m12;
  id v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  Swift::String v79;
  CGFloat v80;
  NSString v81;
  void *v82;
  uint64_t v83;
  CGFloat v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  CGFloat v97;
  Class v98;
  void *v99;
  void *v100;
  id v101;
  CGFloat v102;
  void *v103;
  id v104;
  uint64_t v105;
  void *v106;
  void *v107;
  Swift::String v108;
  Swift::String v109;
  CGFloat v110;
  CATransform3D v111;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView])
    goto LABEL_17;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
  v4 = type metadata accessor for ObservableStopwatchModel(0);
  v5 = sub_1000341C0();
  swift_retain(v3);
  v7 = COERCE_DOUBLE(ObservedObject.init(wrappedValue:)(v6, v4, v5));
  v9 = v8;
  v10 = objc_allocWithZone((Class)sub_10000A58C(&qword_1000B3100));
  v11 = (char *)v10 + *(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *v10) + 16);
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  v111.m11 = v7;
  v111.m12 = v9;
  *(_OWORD *)&v111.m13 = xmmword_100084AF0;
  v12 = UIHostingController.init(rootView:)(&v111);
  v13 = *(void **)&v1[v2];
  *(_QWORD *)&v1[v2] = v12;

  v14 = *(void **)&v1[v2];
  if (!v14)
  {
    __break(1u);
    goto LABEL_27;
  }
  v15 = objc_msgSend(v14, "view");
  if (!v15)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v16 = v15;
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  if (!*(_QWORD *)&v1[v2])
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  objc_msgSend(v1, "addChildViewController:");
  v17 = *(void **)&v1[v2];
  if (!v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  objc_msgSend(v17, "didMoveToParentViewController:", v1);
  v18 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView];
  if (v18)
  {
    v19 = *(void **)&v1[v2];
    if (v19)
    {
      v20 = objc_msgSend(v19, "view");
      if (v20)
      {
        v21 = v20;
        objc_msgSend(v18, "addSubview:", v20);

        v22 = v18;
        v23 = objc_msgSend(v1, "view");
        if (v23)
        {
          v24 = v23;
          objc_msgSend(v23, "addSubview:", v22);

          v25 = *(void **)&v1[v2];
          if (v25)
          {
            v26 = objc_msgSend(v25, "view");
            if (v26)
            {
              v27 = v26;
              v28 = sub_10000A58C((uint64_t *)&unk_1000B2750);
              v29 = COERCE_DOUBLE(swift_allocObject(v28, 96, 7));
              *(_OWORD *)(*(_QWORD *)&v29 + 16) = xmmword_100081570;
              v30 = objc_msgSend(v22, "leadingAnchor");
              v31 = objc_msgSend(v1, "view");
              if (v31)
              {
                v32 = v31;
                v33 = objc_msgSend(v31, "SBUISA_systemApertureObstructedAreaLayoutGuide");

                v34 = objc_msgSend(v33, "trailingAnchor");
                v35 = objc_msgSend(v30, "constraintEqualToAnchor:", v34);

                *(_QWORD *)(*(_QWORD *)&v29 + 32) = v35;
                v36 = objc_msgSend(v22, "trailingAnchor");
                v37 = objc_msgSend(v1, "view");
                if (v37)
                {
                  v38 = v37;
                  v39 = objc_msgSend(v37, "trailingAnchor");

                  v40 = objc_msgSend(v36, "constraintEqualToAnchor:", v39);
                  *(_QWORD *)(*(_QWORD *)&v29 + 40) = v40;
                  v41 = objc_msgSend(v22, "topAnchor");
                  v42 = objc_msgSend(v1, "view");
                  if (v42)
                  {
                    v43 = v42;
                    v44 = objc_msgSend(v42, "topAnchor");

                    v45 = objc_msgSend(v41, "constraintEqualToAnchor:", v44);
                    *(_QWORD *)(*(_QWORD *)&v29 + 48) = v45;
                    v46 = objc_msgSend(v22, "bottomAnchor");
                    v47 = objc_msgSend(v1, "view");
                    if (v47)
                    {
                      v48 = v47;
                      v49 = (void *)objc_opt_self(NSLayoutConstraint);
                      v50 = objc_msgSend(v48, "bottomAnchor");

                      v51 = objc_msgSend(v46, "constraintEqualToAnchor:", v50);
                      *(_QWORD *)(*(_QWORD *)&v29 + 56) = v51;
                      v52 = objc_msgSend(v27, "leadingAnchor");
                      v53 = objc_msgSend(v22, "leadingAnchor");
                      v54 = objc_msgSend(v52, "constraintEqualToAnchor:", v53);

                      *(_QWORD *)(*(_QWORD *)&v29 + 64) = v54;
                      v55 = objc_msgSend(v27, "trailingAnchor");
                      v56 = objc_msgSend(v22, "trailingAnchor");
                      v57 = objc_msgSend(v55, "constraintEqualToAnchor:", v56);

                      *(_QWORD *)(*(_QWORD *)&v29 + 72) = v57;
                      v58 = objc_msgSend(v27, "topAnchor");
                      v59 = objc_msgSend(v22, "topAnchor");
                      v60 = objc_msgSend(v58, "constraintEqualToAnchor:", v59);

                      *(_QWORD *)(*(_QWORD *)&v29 + 80) = v60;
                      v61 = objc_msgSend(v27, "bottomAnchor");
                      v62 = objc_msgSend(v22, "bottomAnchor");
                      v63 = objc_msgSend(v61, "constraintEqualToAnchor:", v62);

                      *(_QWORD *)(*(_QWORD *)&v29 + 88) = v63;
                      v111.m11 = v29;
                      specialized Array._endMutation()();
                      m11 = v111.m11;
                      sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
                      isa = Array._bridgeToObjectiveC()().super.isa;
                      objc_msgSend(v49, "activateConstraints:", isa, swift_bridgeObjectRelease(*(_QWORD *)&m11).n128_f64[0]);

                      goto LABEL_17;
                    }
LABEL_38:
                    __break(1u);
                    goto LABEL_39;
                  }
LABEL_37:
                  __break(1u);
                  goto LABEL_38;
                }
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
LABEL_17:
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView])
    return;
  v66 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView];
  if (!v66)
    return;
  v67 = v66;
  v68 = objc_msgSend(v1, "view");
  if (!v68)
  {
LABEL_39:
    __break(1u);
    return;
  }
  v69 = v68;
  objc_msgSend(v68, "addSubview:", v67);

  v70 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  v71 = sub_100078D98();
  if (v71)
  {
    v72 = v71;
    v73 = (void *)objc_opt_self(MTSessionUtilities);
    v111.m11 = 0.0;
    v111.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(45);
    m12 = v111.m12;
    v75 = objc_msgSend(v1, "description");
    v76 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)(v75));
    v78 = v77;
    swift_bridgeObjectRelease(*(_QWORD *)&m12);

    v111.m11 = v76;
    v111.m12 = v78;
    v79._object = (void *)0x8000000100089260;
    v79._countAndFlagsBits = 0xD00000000000002BLL;
    String.append(_:)(v79);
    v80 = v111.m12;
    v81 = String._bridgeToObjectiveC()();
    objc_msgSend(v73, "logInfo:", v81, swift_bridgeObjectRelease(*(_QWORD *)&v80).n128_f64[0]);

    objc_msgSend(v67, "addSubview:", v72);
    objc_msgSend(v72, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v82 = (void *)objc_opt_self(NSLayoutConstraint);
    v83 = sub_10000A58C((uint64_t *)&unk_1000B2750);
    v84 = COERCE_DOUBLE(swift_allocObject(v83, 64, 7));
    *(_OWORD *)(*(_QWORD *)&v84 + 16) = xmmword_100081560;
    v85 = objc_msgSend(v72, "leadingAnchor");
    v86 = objc_msgSend(v67, "leadingAnchor");
    v87 = objc_msgSend(v85, "constraintEqualToAnchor:constant:", v86, -2.0);

    *(_QWORD *)(*(_QWORD *)&v84 + 32) = v87;
    v88 = objc_msgSend(v72, "trailingAnchor");
    v89 = objc_msgSend(v67, "trailingAnchor");
    v90 = objc_msgSend(v88, "constraintEqualToAnchor:", v89);

    *(_QWORD *)(*(_QWORD *)&v84 + 40) = v90;
    v91 = objc_msgSend(v72, "topAnchor");
    v92 = objc_msgSend(v67, "topAnchor");
    v93 = objc_msgSend(v91, "constraintEqualToAnchor:", v92);

    *(_QWORD *)(*(_QWORD *)&v84 + 48) = v93;
    v94 = objc_msgSend(v72, "bottomAnchor");
    v95 = objc_msgSend(v67, "bottomAnchor");
    v96 = objc_msgSend(v94, "constraintEqualToAnchor:", v95);

    *(_QWORD *)(*(_QWORD *)&v84 + 56) = v96;
    v111.m11 = v84;
    specialized Array._endMutation()();
    v97 = v111.m11;
    sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
    v98 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v82, "activateConstraints:", v98, swift_bridgeObjectRelease(*(_QWORD *)&v97).n128_f64[0]);

    objc_msgSend((id)objc_opt_self(CATransaction), "setDisableActions:", 1);
    v99 = *(void **)(v70 + 32);
    if (v99)
    {
      v100 = (void *)objc_opt_self(ClockAngelUtilities);
      v101 = v99;
      objc_msgSend(v100, "radFromDeg:", 357.0);
      CATransform3DMakeRotation(&v111, v102, 0.0, 0.0, 1.0);
      objc_msgSend(v101, "setTransform:", &v111);

      v67 = v72;
      v72 = v101;
    }
  }
  else
  {
    v103 = (void *)objc_opt_self(MTSessionUtilities);
    v111.m11 = 0.0;
    v111.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(53);
    v104 = objc_msgSend(v1, "description");
    v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    v107 = v106;

    v108._countAndFlagsBits = v105;
    v108._object = v107;
    String.append(_:)(v108);
    swift_bridgeObjectRelease(v107);
    v109._countAndFlagsBits = 0xD000000000000033;
    v109._object = (void *)0x8000000100089220;
    String.append(_:)(v109);
    v110 = v111.m12;
    v72 = String._bridgeToObjectiveC()();
    objc_msgSend(v103, "logInfo:", v72, swift_bridgeObjectRelease(*(_QWORD *)&v110).n128_f64[0]);
  }

}

void sub_100075FB0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  id v84;
  void *v85;
  id v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  void *v91;
  id v92;
  id v93;
  void *v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  Class isa;
  void *v101;
  _BYTE v102[56];
  uint64_t v103;
  uint64_t v104;
  ValueMetadata *v105;
  _UNKNOWN **v106;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView])
  {
    v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
    v105 = &type metadata for ApertureConfig;
    v106 = &off_10009FFC8;
    v4 = type metadata accessor for ObservableStopwatchModel(0);
    v5 = sub_1000341C0();
    swift_retain(v3);
    v103 = ObservedObject.init(wrappedValue:)(v6, v4, v5);
    v104 = v7;
    v8 = (char *)objc_allocWithZone((Class)sub_10000A58C(&qword_1000B1218));
    v9 = &v8[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v8) + 16)];
    *((_QWORD *)v9 + 1) = 0;
    swift_unknownObjectWeakInit(v9, 0);
    sub_100046314((uint64_t)&v103, (uint64_t)v102);
    v10 = (void *)UIHostingController.init(rootView:)(v102);
    sub_100046350((uint64_t)&v103);
    v11 = objc_msgSend(v10, "view");
    if (!v11)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    v12 = v11;
    objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    v13 = objc_msgSend(v10, "view");
    if (!v13)
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v14 = v13;
    v15 = objc_msgSend(v13, "layer");

    objc_msgSend(v15, "setAllowsHitTesting:", 0);
    objc_msgSend(v1, "addChildViewController:", v10);
    v16 = objc_msgSend(v1, "view");
    if (!v16)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    v17 = v16;
    v18 = objc_msgSend(v10, "view");
    if (!v18)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v19 = v18;
    objc_msgSend(v17, "addSubview:", v18);

    objc_msgSend(v10, "didMoveToParentViewController:", v1);
    v20 = *(void **)&v1[v2];
    *(_QWORD *)&v1[v2] = v10;

  }
  v21 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView])
  {
LABEL_13:
    v40 = objc_msgSend(v1, "view");
    if (v40)
    {
      v41 = v40;
      v42 = objc_msgSend(v40, "SBUISA_systemApertureObstructedAreaLayoutGuide");

      v43 = objc_msgSend(v42, "leadingAnchor");
      sub_100014A1C();

      v44 = objc_msgSend(v1, "view");
      if (v44)
      {
        v45 = v44;
        v46 = objc_msgSend(v44, "SBUISA_systemApertureObstructedAreaLayoutGuide");

        v47 = sub_10000A58C((uint64_t *)&unk_1000B2750);
        v48 = swift_allocObject(v47, 80, 7);
        *(_OWORD *)(v48 + 16) = xmmword_100083250;
        v49 = *(void **)&v1[v2];
        if (v49)
        {
          v50 = objc_msgSend(v49, "view");
          if (v50)
          {
            v51 = v50;
            v52 = objc_msgSend(v50, "leadingAnchor");

            v101 = v46;
            v53 = objc_msgSend(v46, "trailingAnchor");
            v54 = objc_msgSend(v52, "constraintEqualToAnchor:", v53);

            *(_QWORD *)(v48 + 32) = v54;
            v55 = *(void **)&v1[v2];
            if (v55)
            {
              v56 = objc_msgSend(v55, "view");
              if (v56)
              {
                v57 = v56;
                v58 = objc_msgSend(v56, "trailingAnchor");

                v59 = objc_msgSend(v1, "view");
                if (v59)
                {
                  v60 = v59;
                  v61 = objc_msgSend(v59, "SBUISA_systemApertureLegibleContentLayoutMarginsGuide");

                  v62 = objc_msgSend(v61, "trailingAnchor");
                  v63 = objc_msgSend(v58, "constraintEqualToAnchor:", v62);

                  *(_QWORD *)(v48 + 40) = v63;
                  v64 = *(void **)&v1[v2];
                  if (v64)
                  {
                    v65 = objc_msgSend(v64, "view");
                    if (v65)
                    {
                      v66 = v65;
                      v67 = objc_msgSend(v65, "bottomAnchor");

                      v68 = *(void **)&v1[v21];
                      if (v68)
                      {
                        v69 = objc_msgSend(v68, "view");
                        if (v69)
                        {
                          v70 = v69;
                          v71 = objc_msgSend(v69, "topAnchor");

                          v72 = objc_msgSend(v67, "constraintEqualToAnchor:", v71);
                          *(_QWORD *)(v48 + 48) = v72;
                          v73 = *(void **)&v1[v21];
                          if (v73)
                          {
                            v74 = objc_msgSend(v73, "view");
                            if (v74)
                            {
                              v75 = v74;
                              v76 = objc_msgSend(v74, "leadingAnchor");

                              v77 = *(void **)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_lapCancelButton];
                              if (v77)
                              {
                                v78 = objc_msgSend(v77, "trailingAnchor");
                                v79 = objc_msgSend(v76, "constraintEqualToAnchor:", v78);

                                *(_QWORD *)(v48 + 56) = v79;
                                v80 = *(void **)&v1[v21];
                                if (v80)
                                {
                                  v81 = objc_msgSend(v80, "view");
                                  if (v81)
                                  {
                                    v82 = v81;
                                    v83 = objc_msgSend(v81, "trailingAnchor");

                                    v84 = objc_msgSend(v1, "view");
                                    if (v84)
                                    {
                                      v85 = v84;
                                      v86 = objc_msgSend(v84, "SBUISA_systemApertureLegibleContentLayoutMarginsGuide");

                                      v87 = objc_msgSend(v86, "trailingAnchor");
                                      v88 = objc_msgSend(v83, "constraintEqualToAnchor:", v87);

                                      *(_QWORD *)(v48 + 64) = v88;
                                      v89 = *(void **)&v1[v21];
                                      if (v89)
                                      {
                                        v90 = objc_msgSend(v89, "view");
                                        if (v90)
                                        {
                                          v91 = v90;
                                          v92 = objc_msgSend(v90, "bottomAnchor");

                                          v93 = objc_msgSend(v1, "view");
                                          if (v93)
                                          {
                                            v94 = v93;
                                            v95 = (void *)objc_opt_self(NSLayoutConstraint);
                                            v96 = objc_msgSend(v94, "SBUISA_systemApertureLegibleContentLayoutMarginsGuide");

                                            v97 = objc_msgSend(v96, "bottomAnchor");
                                            v98 = objc_msgSend(v92, "constraintEqualToAnchor:", v97);

                                            *(_QWORD *)(v48 + 72) = v98;
                                            v103 = v48;
                                            specialized Array._endMutation()();
                                            v99 = v103;
                                            sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
                                            isa = Array._bridgeToObjectiveC()().super.isa;
                                            objc_msgSend(v95, "activateConstraints:", isa, swift_bridgeObjectRelease(v99).n128_f64[0]);

                                            return;
                                          }
                                          goto LABEL_53;
                                        }
LABEL_52:
                                        __break(1u);
LABEL_53:
                                        __break(1u);
                                        goto LABEL_54;
                                      }
LABEL_51:
                                      __break(1u);
                                      goto LABEL_52;
                                    }
LABEL_50:
                                    __break(1u);
                                    goto LABEL_51;
                                  }
LABEL_49:
                                  __break(1u);
                                  goto LABEL_50;
                                }
LABEL_48:
                                __break(1u);
                                goto LABEL_49;
                              }
LABEL_47:
                              __break(1u);
                              goto LABEL_48;
                            }
LABEL_46:
                            __break(1u);
                            goto LABEL_47;
                          }
LABEL_45:
                          __break(1u);
                          goto LABEL_46;
                        }
LABEL_44:
                        __break(1u);
                        goto LABEL_45;
                      }
LABEL_43:
                      __break(1u);
                      goto LABEL_44;
                    }
LABEL_42:
                    __break(1u);
                    goto LABEL_43;
                  }
LABEL_41:
                  __break(1u);
                  goto LABEL_42;
                }
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_38:
            __break(1u);
            goto LABEL_39;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_36;
  }
  v22 = *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
  v105 = &type metadata for ApertureConfig;
  v106 = &off_10009FFC8;
  v23 = type metadata accessor for ObservableStopwatchModel(0);
  v24 = sub_1000341C0();
  swift_retain(v22);
  v103 = ObservedObject.init(wrappedValue:)(v25, v23, v24);
  v104 = v26;
  v27 = (char *)objc_allocWithZone((Class)sub_10000A58C((uint64_t *)&unk_1000B30F0));
  v28 = &v27[*(_QWORD *)(qword_1000B6DC0 + (swift_isaMask & *(_QWORD *)v27) + 16)];
  *((_QWORD *)v28 + 1) = 0;
  swift_unknownObjectWeakInit(v28, 0);
  sub_1000462A4((uint64_t)&v103, (uint64_t)v102);
  v29 = (void *)UIHostingController.init(rootView:)(v102);
  sub_1000462E0((uint64_t)&v103);
  v30 = objc_msgSend(v29, "view");
  if (!v30)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v31 = v30;
  objc_msgSend(v30, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v32 = objc_msgSend(v29, "view");
  if (!v32)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v33 = v32;
  v34 = objc_msgSend(v32, "layer");

  objc_msgSend(v34, "setAllowsHitTesting:", 0);
  objc_msgSend(v1, "addChildViewController:", v29);
  v35 = objc_msgSend(v1, "view");
  if (!v35)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v36 = v35;
  v37 = objc_msgSend(v29, "view");
  if (v37)
  {
    v38 = v37;
    objc_msgSend(v36, "addSubview:", v37);

    objc_msgSend(v29, "didMoveToParentViewController:", v1);
    v39 = *(void **)&v1[v21];
    *(_QWORD *)&v1[v21] = v29;

    goto LABEL_13;
  }
LABEL_61:
  __break(1u);
}

void sub_100076910()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView);
  if (v1)
  {
    v2 = objc_msgSend(v1, "view");
    if (v2)
    {
      v4 = v2;
      v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel);
      KeyPath = swift_getKeyPath(&unk_100084BD0, v3);
      v8 = swift_getKeyPath(&unk_100084BF8, v7);
      v9 = swift_retain(v5);
      static Published.subscript.getter(&v10, v9, KeyPath, v8);
      swift_release(v5);
      swift_release(KeyPath);
      swift_release(v8);
      objc_msgSend(v4, "setHidden:", v10 < 2);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000769EC()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  NSString v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  id isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView];
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    v4 = objc_msgSend(v0, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "addSubview:", v3);

      v6 = sub_100078D98();
      if (v6)
      {
        v7 = v6;
        v8 = (void *)objc_opt_self(MTSessionUtilities);
        _StringGuts.grow(_:)(38);
        v9 = objc_msgSend(v2, "description");
        static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v11 = v10;
        swift_bridgeObjectRelease(0xE000000000000000);

        v12._object = (void *)0x80000001000891F0;
        v12._countAndFlagsBits = 0xD000000000000024;
        String.append(_:)(v12);
        v13 = String._bridgeToObjectiveC()();
        objc_msgSend(v8, "logInfo:", v13, swift_bridgeObjectRelease(v11).n128_f64[0]);

        objc_msgSend(v3, "addSubview:", v7);
        objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
        v14 = (void *)objc_opt_self(NSLayoutConstraint);
        v15 = sub_10000A58C((uint64_t *)&unk_1000B2750);
        v16 = swift_allocObject(v15, 64, 7);
        *(_OWORD *)(v16 + 16) = xmmword_100081560;
        v17 = objc_msgSend(v7, "leadingAnchor");
        v18 = objc_msgSend(v3, "leadingAnchor");
        v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

        *(_QWORD *)(v16 + 32) = v19;
        v20 = objc_msgSend(v7, "trailingAnchor");
        v21 = objc_msgSend(v3, "trailingAnchor");
        v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

        *(_QWORD *)(v16 + 40) = v22;
        v23 = objc_msgSend(v7, "topAnchor");
        v24 = objc_msgSend(v3, "topAnchor");
        v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

        *(_QWORD *)(v16 + 48) = v25;
        v26 = objc_msgSend(v7, "bottomAnchor");
        v27 = objc_msgSend(v3, "bottomAnchor");
        v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

        *(_QWORD *)(v16 + 56) = v28;
        specialized Array._endMutation()();
        sub_100015494(0, (unint64_t *)&qword_1000B0010, NSLayoutConstraint_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v14, "activateConstraints:", isa, swift_bridgeObjectRelease(v16).n128_f64[0]);

        v3 = v7;
      }
      else
      {
        v29 = (void *)objc_opt_self(MTSessionUtilities);
        _StringGuts.grow(_:)(50);
        v30 = objc_msgSend(v2, "description");
        static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v32 = v31;
        swift_bridgeObjectRelease(0xE000000000000000);

        v33._countAndFlagsBits = 0xD000000000000030;
        v33._object = (void *)0x80000001000891B0;
        String.append(_:)(v33);
        isa = String._bridgeToObjectiveC()();
        objc_msgSend(v29, "logInfo:", isa, swift_bridgeObjectRelease(v32).n128_f64[0]);
      }

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_100076E50(void *a1, double a2, double a3)
{
  void *v3;
  void *v4;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  NSString v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD v19[5];
  uint64_t v20;
  objc_super v21;

  v4 = v3;
  v8 = (void *)objc_opt_self(MTSessionUtilities);
  _StringGuts.grow(_:)(21);
  v9 = objc_msgSend(v3, "description", 0);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;
  swift_bridgeObjectRelease(0xE000000000000000);

  v13._object = (void *)0x8000000100088E60;
  v13._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "logInfo:", v14, swift_bridgeObjectRelease(v12).n128_f64[0], v10);

  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  objc_msgSendSuper2(&v21, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v15 = swift_allocObject(&unk_1000A1D50, 24, 7);
  *(_QWORD *)(v15 + 16) = v3;
  v19[4] = sub_100079324;
  v20 = v15;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100074F90;
  v19[3] = &unk_1000A1D68;
  v16 = _Block_copy(v19);
  v17 = v20;
  v18 = v4;
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v16, 0, swift_release(v17).n128_f64[0]);
  _Block_release(v16);
}

void sub_100077004(uint64_t a1, char *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  NSString v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  const char *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String v58;
  NSString v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  void *v66;
  void *v67;
  NSString v68;
  id v69;
  uint64_t v70;
  unint64_t v71;

  switch(*(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode])
  {
    case 0:
      v3 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(31);
      v4 = objc_msgSend(a2, "description");
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v7 = v6;
      swift_bridgeObjectRelease(0xE000000000000000);

      v70 = v5;
      v71 = v7;
      v8 = " transitioned to initial view";
      goto LABEL_18;
    case 1:
      v3 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(32);
      v44 = objc_msgSend(a2, "description");
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v47 = v46;
      swift_bridgeObjectRelease(0xE000000000000000);

      v70 = v45;
      v71 = v47;
      v42 = 0xD00000000000001ELL;
      v43 = " transitioned to inactive view";
      goto LABEL_16;
    case 2:
      v3 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(31);
      v49 = objc_msgSend(a2, "description");
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;
      swift_bridgeObjectRelease(0xE000000000000000);

      v70 = v50;
      v71 = v52;
      v8 = " transitioned to minimal view";
LABEL_18:
      v48 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      v42 = 0xD00000000000001DLL;
      goto LABEL_19;
    case 3:
      v53 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(31);
      v54 = objc_msgSend(a2, "description");
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v57 = v56;
      swift_bridgeObjectRelease(0xE000000000000000);

      v70 = v55;
      v71 = v57;
      v58._object = (void *)0x80000001000868B0;
      v58._countAndFlagsBits = 0xD00000000000001DLL;
      String.append(_:)(v58);
      v59 = String._bridgeToObjectiveC()();
      objc_msgSend(v53, "logInfo:", v59, swift_bridgeObjectRelease(v57).n128_f64[0]);

      v60 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView];
      if (!v60)
        goto LABEL_34;
      v61 = objc_msgSend(v60, "view");
      if (!v61)
        goto LABEL_35;
      v62 = v61;
      objc_msgSend(v61, "setHidden:", 1);

      v63 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView];
      if (!v63)
        goto LABEL_36;
      v64 = objc_msgSend(v63, "view");
      if (!v64)
        goto LABEL_37;
      v65 = v64;
      objc_msgSend(v64, "setHidden:", 1);

      v66 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView];
      if (v66)
        objc_msgSend(v66, "setHidden:", 0);
      v67 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView];
      if (v67)
        objc_msgSend(v67, "setHidden:", 0);
      return;
    case 4:
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(67);
      v9 = objc_msgSend(a2, "description");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13._countAndFlagsBits = v10;
      v13._object = v12;
      String.append(_:)(v13);
      swift_bridgeObjectRelease(v12);
      v14._countAndFlagsBits = 0xD00000000000002FLL;
      v14._object = (void *)0x80000001000892B0;
      String.append(_:)(v14);
      v15 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_stopwatch];
      if (!v15)
      {
        __break(1u);
        goto LABEL_30;
      }
      v16 = (void *)objc_opt_self(MTSessionUtilities);
      v69 = objc_msgSend(v15, "state");
      type metadata accessor for MTStopwatchState(0);
      _print_unlocked<A, B>(_:_:)(&v69, &v70, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v18._countAndFlagsBits = 0x6D2077656976202CLL;
      v18._object = (void *)0xEE00203A6C65646FLL;
      String.append(_:)(v18);
      v69 = *(id *)&a2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_viewModel];
      v19 = sub_10000A58C(&qword_1000B3108);
      _print_unlocked<A, B>(_:_:)(&v69, &v70, v19, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v20 = v71;
      v21 = String._bridgeToObjectiveC()();
      objc_msgSend(v16, "logInfo:", v21, swift_bridgeObjectRelease(v20).n128_f64[0]);

      v22 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView];
      if (!v22)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      v23 = objc_msgSend(v22, "view");
      if (!v23)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      v25 = v23;
      v26 = *(_QWORD *)&a2[OBJC_IVAR____TtC10ClockAngel25SecureStopwatchController_observableModel];
      KeyPath = swift_getKeyPath(&unk_100084BD0, v24);
      v29 = swift_getKeyPath(&unk_100084BF8, v28);
      swift_retain(v26);
      static Published.subscript.getter(&v70, v30, KeyPath, v29);
      swift_release(v26);
      swift_release(KeyPath);
      *(_QWORD *)&v31 = swift_release(v29).n128_u64[0];
      objc_msgSend(v25, "setHidden:", v70 < 2, v31);

      v32 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView];
      if (!v32)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x1000776E4);
      }
      v33 = objc_msgSend(v32, "view");
      if (!v33)
        goto LABEL_33;
      v34 = v33;
      objc_msgSend(v33, "setHidden:", 0);

      v35 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView];
      if (v35)
        objc_msgSend(v35, "setHidden:", 1);
      v36 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView];
      if (v36)
        objc_msgSend(v36, "setHidden:", 1);
      v37 = *(void **)&a2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView];
      if (v37)
        objc_msgSend(v37, "setHidden:", 1);
      return;
    default:
      v3 = (void *)objc_opt_self(MTSessionUtilities);
      _StringGuts.grow(_:)(35);
      v38 = objc_msgSend(a2, "description");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;
      swift_bridgeObjectRelease(0xE000000000000000);

      v70 = v39;
      v71 = v41;
      v42 = 0xD000000000000021;
      v43 = " transitioned to other view state";
LABEL_16:
      v48 = (unint64_t)(v43 - 32) | 0x8000000000000000;
LABEL_19:
      String.append(_:)(*(Swift::String *)&v42);
      v68 = String._bridgeToObjectiveC()();
      objc_msgSend(v3, "logInfo:", v68, swift_bridgeObjectRelease(v71).n128_f64[0]);

      return;
  }
}

void sub_100077764(char a1, char a2, double a3, double a4, long double a5, double a6)
{
  char *v6;
  uint64_t v13;
  CGFloat v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat m11;
  void *v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  id v26;
  CGFloat v27;
  uint64_t v28;
  double v29;
  void *v30;
  void *v31;
  id v32;
  CGFloat v33;
  CATransform3D v34;
  _BYTE v35[48];
  objc_super v36;

  v36.receiver = v6;
  v36.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  objc_msgSendSuper2(&v36, "didUpdateCurrentInterval:adjustedCurrentInterval:totalInterval:adjustedTotalInterval:isStopwatchRunning:isStopwatchStopped:", a1 & 1, a2 & 1, a3, a4, (double)a5, a6);
  v13 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  v14 = COERCE_DOUBLE(swift_initStackObject(v13, v35));
  *(_OWORD *)(*(_QWORD *)&v14 + 16) = xmmword_100084B00;
  v15 = *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  *(_QWORD *)(*(_QWORD *)&v14 + 32) = v15;
  v16 = *(_QWORD *)&v6[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation];
  *(_QWORD *)(*(_QWORD *)&v14 + 40) = v16;
  v34.m11 = v14;
  specialized Array._endMutation()();
  m11 = v34.m11;
  v18 = (void *)objc_opt_self(CATransaction);
  v19 = fmod(a5, 60.0) / 60.0 * 360.0;
  v20 = *(_QWORD *)&v34.m11 & 0xC000000000000001;
  swift_retain(v15);
  swift_retain(v16);
  if ((*(_QWORD *)&v34.m11 & 0xC000000000000001) != 0)
  {
    v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)&v34.m11);
  }
  else
  {
    v21 = *(_QWORD *)(*(_QWORD *)&v34.m11 + 32);
    *(_QWORD *)&v22 = swift_retain(v21).n128_u64[0];
  }
  v23 = 360.0 - v19;
  objc_msgSend(v18, "setDisableActions:", 1, v22);
  v24 = *(void **)(v21 + 32);
  if (v24)
  {
    v25 = (void *)objc_opt_self(ClockAngelUtilities);
    v26 = v24;
    objc_msgSend(v25, "radFromDeg:", v23);
    CATransform3DMakeRotation(&v34, v27, 0.0, 0.0, 1.0);
    objc_msgSend(v26, "setTransform:", &v34);
    swift_release(v21);

    if (v20)
    {
LABEL_6:
      v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, *(_QWORD *)&m11);
      goto LABEL_9;
    }
  }
  else
  {
    swift_release(v21);
    if (v20)
      goto LABEL_6;
  }
  v28 = *(_QWORD *)(*(_QWORD *)&m11 + 40);
  *(_QWORD *)&v29 = swift_retain(v28).n128_u64[0];
LABEL_9:
  objc_msgSend(v18, "setDisableActions:", 1, v29);
  v30 = *(void **)(v28 + 32);
  if (v30)
  {
    v31 = (void *)objc_opt_self(ClockAngelUtilities);
    v32 = v30;
    objc_msgSend(v31, "radFromDeg:", v23);
    CATransform3DMakeRotation(&v34, v33, 0.0, 0.0, 1.0);
    objc_msgSend(v32, "setTransform:", &v34);
    swift_release(v28);

  }
  else
  {
    swift_release(v28);
  }
  swift_bridgeObjectRelease(*(_QWORD *)&m11);
}

double sub_100077AA8()
{
  char *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSString v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  double result;
  uint64_t v15;
  _BYTE v16[48];
  objc_super v17;

  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  objc_msgSendSuper2(&v17, "didPauseLapTimer");
  v1 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  inited = swift_initStackObject(v1, v16);
  *(_OWORD *)(inited + 16) = xmmword_100084B00;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  *(_QWORD *)(inited + 32) = v3;
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation];
  *(_QWORD *)(inited + 40) = v4;
  v15 = inited;
  specialized Array._endMutation()();
  v5 = v15 & 0xC000000000000001;
  swift_retain(v3);
  swift_retain(v4);
  if ((v15 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
  }
  else
  {
    v6 = *(_QWORD *)(v15 + 32);
    swift_retain(v6);
  }
  v7 = *(void **)(v6 + 16);
  if (v7)
  {
    v8 = v7;
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "setState:", v9);
    swift_release(v6);

    if (v5)
      goto LABEL_6;
LABEL_9:
    v10 = *(_QWORD *)(v15 + 40);
    swift_retain(v10);
    v11 = *(void **)(v10 + 16);
    if (v11)
      goto LABEL_7;
    goto LABEL_10;
  }
  swift_release(v6);
  if (!v5)
    goto LABEL_9;
LABEL_6:
  v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v15);
  v11 = *(void **)(v10 + 16);
  if (v11)
  {
LABEL_7:
    v12 = v11;
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setState:", v13);
    swift_bridgeObjectRelease(v15);
    swift_release(v10);

    return result;
  }
LABEL_10:
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

double sub_100077C94()
{
  char *v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSString v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  double result;
  uint64_t v15;
  _BYTE v16[48];
  objc_super v17;

  v17.receiver = v0;
  v17.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  objc_msgSendSuper2(&v17, "didResumeLapTimer");
  v1 = sub_10000A58C((uint64_t *)&unk_1000B2750);
  inited = swift_initStackObject(v1, v16);
  *(_OWORD *)(inited + 16) = xmmword_100084B00;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation];
  *(_QWORD *)(inited + 32) = v3;
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation];
  *(_QWORD *)(inited + 40) = v4;
  v15 = inited;
  specialized Array._endMutation()();
  v5 = v15 & 0xC000000000000001;
  swift_retain(v3);
  swift_retain(v4);
  if ((v15 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
  }
  else
  {
    v6 = *(_QWORD *)(v15 + 32);
    swift_retain(v6);
  }
  v7 = *(void **)(v6 + 16);
  if (v7)
  {
    v8 = v7;
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "setState:", v9);
    swift_release(v6);

    if (v5)
      goto LABEL_6;
LABEL_9:
    v10 = *(_QWORD *)(v15 + 40);
    swift_retain(v10);
    v11 = *(void **)(v10 + 16);
    if (v11)
      goto LABEL_7;
    goto LABEL_10;
  }
  swift_release(v6);
  if (!v5)
    goto LABEL_9;
LABEL_6:
  v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v15);
  v11 = *(void **)(v10 + 16);
  if (v11)
  {
LABEL_7:
    v12 = v11;
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setState:", v13);
    swift_bridgeObjectRelease(v15);
    swift_release(v10);

    return result;
  }
LABEL_10:
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

char *sub_100077E88(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  objc_class *ObjCClassFromMetadata;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v4 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_presentationBehaviors] = 9;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_contentRole] = 2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_preferredLayoutMode] = 3;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_maximumLayoutMode] = 4;
  v7 = (void *)objc_opt_self(NSURL);
  v8 = v2;
  v9 = objc_msgSend(v7, "mtURLForSection:", 3);
  if (v9)
  {
    v10 = v9;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v11 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  }
  sub_1000112A4((uint64_t)v6, (uint64_t)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL], (uint64_t *)&unk_1000B0040);
  v13 = &v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_associatedAppBundleIdentifier];
  *(_QWORD *)v13 = 0xD000000000000015;
  *((_QWORD *)v13 + 1) = 0x8000000100086910;
  v14 = &v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_timerObserverIdentifier];
  *(_QWORD *)v14 = 0xD00000000000001ELL;
  *((_QWORD *)v14 + 1) = 0x8000000100089290;
  v15 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v16 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView;
  v17 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v17);
  v19 = objc_allocWithZone(ObjCClassFromMetadata);
  v20 = v15;
  *(_QWORD *)&v8[v16] = objc_msgSend(v19, "init");
  v21 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView;
  *(_QWORD *)&v8[v21] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v22 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView;
  *(_QWORD *)&v8[v22] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v23 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_keyColor;
  *(_QWORD *)&v8[v23] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customLeadingView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView] = 0;
  v24 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation;
  v25 = type metadata accessor for StopwatchRunningAnimation(0);
  v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  v27 = v26 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  v28 = type metadata accessor for TimerSessionEntry(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v29(v27, 1, 1, v28);
  *(_QWORD *)(v26 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v8[v24] = v26;
  v30 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation;
  v31 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  v29(v31 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, 1, 1, v28);
  *(_QWORD *)(v31 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v8[v30] = v31;

  return sub_1000117A4(a1, v34);
}

id sub_100078220(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *ObjCClassFromMetadata;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  id v32;
  objc_super v34;

  v3 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_presentationBehaviors] = 9;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_contentRole] = 2;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_preferredLayoutMode] = 3;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_maximumLayoutMode] = 4;
  v6 = (void *)objc_opt_self(NSURL);
  v7 = v1;
  v8 = objc_msgSend(v6, "mtURLForSection:", 3);
  if (v8)
  {
    v9 = v8;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

    v10 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  }
  sub_1000112A4((uint64_t)v5, (uint64_t)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL], (uint64_t *)&unk_1000B0040);
  v12 = &v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_associatedAppBundleIdentifier];
  *(_QWORD *)v12 = 0xD000000000000015;
  *((_QWORD *)v12 + 1) = 0x8000000100086910;
  v13 = &v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_timerObserverIdentifier];
  *(_QWORD *)v13 = 0xD00000000000001ELL;
  *((_QWORD *)v13 + 1) = 0x8000000100089290;
  v14 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v15 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView;
  v16 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v16);
  v18 = objc_allocWithZone(ObjCClassFromMetadata);
  v19 = v14;
  *(_QWORD *)&v7[v15] = objc_msgSend(v18, "init");
  v20 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView;
  *(_QWORD *)&v7[v20] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v21 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView;
  *(_QWORD *)&v7[v21] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v22 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_keyColor;
  *(_QWORD *)&v7[v22] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customLeadingView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView] = 0;
  v23 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation;
  v24 = type metadata accessor for StopwatchRunningAnimation(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  v26 = v25 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  v27 = type metadata accessor for TimerSessionEntry(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v7[v23] = v25;
  v29 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation;
  v30 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  *(_OWORD *)(v30 + 16) = 0u;
  *(_OWORD *)(v30 + 32) = 0u;
  v28(v30 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, 1, 1, v27);
  *(_QWORD *)(v30 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v7[v29] = v30;

  v31 = (objc_class *)type metadata accessor for StopwatchApertureController(0);
  v34.receiver = v7;
  v34.super_class = v31;
  v32 = objc_msgSendSuper2(&v34, "initWithCoder:", a1);

  return v32;
}

id sub_1000785F4(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  objc_class *ObjCClassFromMetadata;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  objc_class *v34;
  void *v35;
  id v36;
  uint64_t v38;
  void *v39;
  objc_super v40;

  v38 = a1;
  v39 = a3;
  v5 = sub_10000A58C((uint64_t *)&unk_1000B0040);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_presentationBehaviors] = 9;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_activeLayoutMode] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_contentRole] = 2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_preferredLayoutMode] = 3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_maximumLayoutMode] = 4;
  v8 = (void *)objc_opt_self(NSURL);
  v9 = v3;
  v10 = objc_msgSend(v8, "mtURLForSection:", 3, v38);
  if (v10)
  {
    v11 = v10;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);

    v12 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 0, 1, v12);
  }
  else
  {
    v13 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
  }
  sub_1000112A4((uint64_t)v7, (uint64_t)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL], (uint64_t *)&unk_1000B0040);
  v14 = &v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_associatedAppBundleIdentifier];
  *(_QWORD *)v14 = 0xD000000000000015;
  *((_QWORD *)v14 + 1) = 0x8000000100086910;
  v15 = &v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_timerObserverIdentifier];
  *(_QWORD *)v15 = 0xD00000000000001ELL;
  *((_QWORD *)v15 + 1) = 0x8000000100089290;
  v16 = (void *)SBUISystemApertureElementIdentifierTimer;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_elementIdentifier] = SBUISystemApertureElementIdentifierTimer;
  v17 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_leadingView;
  v18 = type metadata accessor for TimerApertureAccessoryView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v18);
  v20 = objc_allocWithZone(ObjCClassFromMetadata);
  v21 = v16;
  *(_QWORD *)&v9[v17] = objc_msgSend(v20, "init");
  v22 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_trailingView;
  *(_QWORD *)&v9[v22] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v23 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalView;
  *(_QWORD *)&v9[v23] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), "init");
  v24 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_keyColor;
  *(_QWORD *)&v9[v24] = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.622, 0.044, 1.0);
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedLeadingView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedTrailingView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customLeadingView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingLapView] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_customTrailingTimeView] = 0;
  v25 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation;
  v26 = type metadata accessor for StopwatchRunningAnimation(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  v28 = v27 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry;
  v29 = type metadata accessor for TimerSessionEntry(0);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v28, 1, 1, v29);
  *(_QWORD *)(v27 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v9[v25] = v27;
  v31 = OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation;
  v32 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  *(_OWORD *)(v32 + 16) = 0u;
  *(_OWORD *)(v32 + 32) = 0u;
  v30(v32 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, 1, 1, v29);
  *(_QWORD *)(v32 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_rotationPeriod) = 0x404E000000000000;
  *(_QWORD *)&v9[v31] = v32;

  if (a2)
  {
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v33 = 0;
  }
  v34 = (objc_class *)type metadata accessor for StopwatchApertureController(0);
  v40.receiver = v9;
  v40.super_class = v34;
  v35 = v39;
  v36 = objc_msgSendSuper2(&v40, "initWithNibName:bundle:", v33, v39);

  return v36;
}

double sub_100078A34()
{
  uint64_t v0;
  double result;

  sub_100011484(v0 + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_launchURL, (uint64_t *)&unk_1000B0040);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_associatedAppBundleIdentifier
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_timerObserverIdentifier
                                      + 8));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_compressedAnimation));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(v0
                                               + OBJC_IVAR____TtC10ClockAngel27StopwatchApertureController_minimalAnimation)).n128_u64[0];
  return result;
}

id sub_100078B50()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StopwatchApertureController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100078CAC()
{
  return type metadata accessor for StopwatchApertureController(0);
}

uint64_t type metadata accessor for StopwatchApertureController(uint64_t a1)
{
  return sub_10000ECB4(a1, qword_1000B2F50, (uint64_t)&nominal type descriptor for StopwatchApertureController);
}

void sub_100078CC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[21];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10001C12C(319, (unint64_t *)&qword_1000B2C50, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = &unk_100084B40;
    v4[7] = &unk_100084B58;
    v4[8] = &unk_100084B70;
    v4[9] = &unk_100084B70;
    v4[10] = &unk_100084B70;
    v4[11] = &unk_100084B70;
    v4[12] = &unk_100084B70;
    v4[13] = &unk_100084B70;
    v4[14] = &unk_100084B70;
    v4[15] = &unk_100084B70;
    v4[16] = &unk_100084B70;
    v4[17] = &unk_100084B70;
    v4[18] = &unk_100084B70;
    v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[20] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 21, v4, a1 + 496);
  }
}

id sub_100078D98()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t ObjCClassFromMetadata;
  id v3;
  id v4;
  NSString v5;
  id v6;
  NSString v7;
  id v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  CGFloat m12;
  NSString v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  CGFloat v19;
  NSString v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  CGFloat v27;
  void *v28;
  uint64_t v29;
  Swift::String v30;
  CGFloat v31;
  CATransform3D v33;
  void *v34;
  _OWORD v35[2];

  v1 = v0;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(*v0);
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v4 = objc_allocWithZone((Class)BSUICAPackageView);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithPackageName:inBundle:", v5, v3);

  if (!v6)
  {
    v9 = (void *)objc_opt_self(MTSessionUtilities);
    v33.m11 = 0.0;
    v33.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(52);
    *(_QWORD *)&v35[0] = v1;
    v10 = type metadata accessor for StopwatchRunningAnimation(0);
    _print_unlocked<A, B>(_:_:)(v35, &v33, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v11._countAndFlagsBits = 0xD000000000000032;
    v11._object = (void *)0x8000000100089150;
    String.append(_:)(v11);
    m12 = v33.m12;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(*(_QWORD *)&m12);
    objc_msgSend(v9, "logInfo:", v13);
    v6 = 0;
    goto LABEL_12;
  }
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "publishedObjectWithName:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v35);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v35, 0, sizeof(v35));
  }
  sub_1000112A4((uint64_t)v35, (uint64_t)&v33, &qword_1000B13D0);
  if (!*(_QWORD *)&v33.m14)
  {
    sub_100011484((uint64_t)&v33, &qword_1000B13D0);
    goto LABEL_11;
  }
  v14 = sub_100015494(0, (unint64_t *)&unk_1000B30E0, CALayer_ptr);
  if ((swift_dynamicCast(&v34, &v33, (char *)&type metadata for Any + 8, v14, 6) & 1) == 0)
  {
LABEL_11:
    v28 = (void *)objc_opt_self(MTSessionUtilities);
    v33.m11 = 0.0;
    v33.m12 = -2.68156159e154;
    _StringGuts.grow(_:)(40);
    *(_QWORD *)&v35[0] = v1;
    v29 = type metadata accessor for StopwatchRunningAnimation(0);
    _print_unlocked<A, B>(_:_:)(v35, &v33, v29, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v30._countAndFlagsBits = 0xD000000000000026;
    v30._object = (void *)0x8000000100088B70;
    String.append(_:)(v30);
    v31 = v33.m12;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(*(_QWORD *)&v31);
    objc_msgSend(v28, "logInfo:", v13);
    goto LABEL_12;
  }
  v15 = v34;
  v16 = (void *)objc_opt_self(MTSessionUtilities);
  v33.m11 = 0.0;
  v33.m12 = -2.68156159e154;
  _StringGuts.grow(_:)(33);
  *(_QWORD *)&v35[0] = v1;
  v17 = type metadata accessor for StopwatchRunningAnimation(0);
  _print_unlocked<A, B>(_:_:)(v35, &v33, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v18._countAndFlagsBits = 0xD00000000000001FLL;
  v18._object = (void *)0x8000000100089190;
  String.append(_:)(v18);
  v19 = v33.m12;
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(*(_QWORD *)&v19);
  objc_msgSend(v16, "logInfo:", v20);

  v21 = (void *)v1[2];
  v1[2] = v6;
  v22 = v6;

  v23 = (void *)v1[4];
  v1[4] = v15;
  v13 = v15;

  objc_msgSend((id)objc_opt_self(CATransaction), "setDisableActions:", 1);
  v24 = (void *)v1[4];
  if (v24)
  {
    v25 = (void *)objc_opt_self(ClockAngelUtilities);
    v26 = v24;
    objc_msgSend(v25, "radFromDeg:", 360.0);
    CATransform3DMakeRotation(&v33, v27, 0.0, 0.0, 1.0);
    objc_msgSend(v26, "setTransform:", &v33);

    v13 = v26;
  }
LABEL_12:

  return v6;
}

uint64_t sub_1000791EC()
{
  id *v0;

  sub_100011484((uint64_t)v0 + OBJC_IVAR____TtC10ClockAngel25StopwatchRunningAnimation_entry, &qword_1000B13F0);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_100079244()
{
  return type metadata accessor for StopwatchRunningAnimation(0);
}

uint64_t type metadata accessor for StopwatchRunningAnimation(uint64_t a1)
{
  return sub_10000ECB4(a1, (uint64_t *)&unk_1000B2F90, (uint64_t)&nominal type descriptor for StopwatchRunningAnimation);
}

void sub_100079260(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100084B70;
  v4[1] = &unk_100084B70;
  v4[2] = &unk_100084B70;
  v4[3] = &unk_100084B70;
  sub_10001C12C(319, (unint64_t *)&unk_1000B2FA0, type metadata accessor for TimerSessionEntry);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

uint64_t sub_100079300()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100079324(uint64_t a1)
{
  uint64_t v1;

  sub_100077004(a1, *(char **)(v1 + 16));
}

uint64_t sub_10007932C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007933C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC10ClockAngelP33_29B8C3D0FC26E40B04D69CC2E26B277F19ResourceBundleClass);
}

id objc_msgSend__timeFormatDataAccessLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeFormatDataAccessLock");
}

id objc_msgSend__timeLocaleForLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeLocaleForLocale:");
}

id objc_msgSend_abbreviatedHourDateFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abbreviatedHourDateFormatter");
}

id objc_msgSend_abbreviatedHourMinuteDateFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abbreviatedHourMinuteDateFormatter");
}

id objc_msgSend_addSuccessBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSuccessBlock:");
}

id objc_msgSend_dateFormatFromTemplate_options_locale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFormatFromTemplate:options:locale:");
}

id objc_msgSend_doubleWidthNumberFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleWidthNumberFormatter");
}

id objc_msgSend_flatMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flatMap:");
}

id objc_msgSend_formatHourMin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatHourMin");
}

id objc_msgSend_formatHourMinSec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatHourMinSec");
}

id objc_msgSend_formatHourMinSecSubsec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatHourMinSecSubsec");
}

id objc_msgSend_formatMin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatMin");
}

id objc_msgSend_formatMinSec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatMinSec");
}

id objc_msgSend_formatMinSecSubsec(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatMinSecSubsec");
}

id objc_msgSend_futureWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "futureWithResult:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_initWithLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocale:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_instanceForLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceForLocale:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeIdentifier");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lock");
}

id objc_msgSend_na_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "na_firstObjectPassingTest:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_setAllowedUnits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedUnits:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPositiveFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPositiveFormat:");
}

id objc_msgSend_setUnitsStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitsStyle:");
}

id objc_msgSend_singleWidthNumberFormatter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleWidthNumberFormatter");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringFromTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromTimeInterval:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_timerByUpdatingWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timerByUpdatingWithState:");
}

id objc_msgSend_timerIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timerIDString");
}

id objc_msgSend_timers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timers");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlock");
}

id objc_msgSend_updateTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimer:");
}
