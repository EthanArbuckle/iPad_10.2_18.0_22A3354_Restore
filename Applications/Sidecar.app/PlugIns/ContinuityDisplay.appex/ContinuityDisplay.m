void sub_100004FC0(void *a1)
{
  char *v1;
  uint64_t Strong;
  void *v4;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for App();
  objc_msgSendSuper2(&v5, "sendEvent:", a1);
  Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR___App_touchController]);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1000392B0(a1);

  }
}

id sub_100005078()
{
  char *v0;
  objc_super v2;

  swift_unknownObjectWeakInit(&v0[OBJC_IVAR___App_touchController], 0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for App();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000050DC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for App();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of VideoConfig._resolution()
{
  return 1366;
}

uint64_t variable initialization expression of SidecarDisplaySession.delegate()
{
  return 0;
}

double variable initialization expression of SidecarDisplaySession.safeInsets()
{
  return 0.0;
}

void variable initialization expression of SidecarDisplaySession.queue()
{
  sub_100005178();
  static OS_dispatch_queue.main.getter();
  sub_100005D94();
}

unint64_t sub_100005178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100077B50;
  if (!qword_100077B50)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100077B50);
  }
  return result;
}

uint64_t variable initialization expression of SidecarDisplaySession.videoConfig()
{
  return 0;
}

uint64_t variable initialization expression of SidecarDisplaySession.settings()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  if (qword_100077578 != -1)
    swift_once(&qword_100077578, sub_100009428);
  swift_beginAccess(&qword_10007C888, v8, 0, 0);
  v0 = qword_10007C888;
  v1 = unk_10007C890;
  v3 = (void *)qword_10007C898;
  v2 = unk_10007C8A0;
  swift_retain(unk_10007C890);
  v4 = v3;
  swift_bridgeObjectRetain(v2);
  sub_100009494(v0, v1, (uint64_t)v4, v2);
  v6 = v5;
  sub_100005DD0();

  swift_release(v1);
  return v6;
}

uint64_t type metadata accessor for App()
{
  return objc_opt_self(App);
}

void type metadata accessor for SidecarTransport(uint64_t a1)
{
  sub_100005D1C(a1, &qword_100077660, (uint64_t)&unk_100069D58);
}

uint64_t initializeBufferWithCopyOfBuffer for TouchController.MultitouchState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for VideoConfig(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000052F4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100005314(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for NSEdgeInsets(uint64_t a1)
{
  sub_100005D1C(a1, &qword_100077668, (uint64_t)&unk_100069DD0);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100005D1C(a1, &qword_100077670, (uint64_t)&unk_100069E58);
}

__n128 initializeBufferWithCopyOfBuffer for TouchController.MultitouchState.Point(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TouchController.MultitouchState.Point(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TouchController.MultitouchState.Point(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100005D1C(a1, &qword_100077678, (uint64_t)&unk_100069ED8);
}

void type metadata accessor for ReferenceDisplayModeStatus(uint64_t a1)
{
  sub_100005D1C(a1, &qword_100077680, (uint64_t)&unk_100069F00);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_100005D1C(a1, &qword_100077688, (uint64_t)&unk_100069F20);
}

void sub_1000053F8()
{
  uint64_t *v0;

  sub_100005488(*v0, (void (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100005418(uint64_t a1, id *a2)
{
  return sub_100005A70(a1, a2);
}

uint64_t sub_10000542C(uint64_t a1, id *a2)
{
  return sub_100005A00(a1, a2) & 1;
}

void sub_100005444(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_100005AD4(a1);
  *a2 = v3;
}

void sub_100005468()
{
  uint64_t *v0;

  sub_100005488(*v0, (void (*)(uint64_t))&String.hashValue.getter);
}

void sub_100005488(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  sub_100005DA4();
  sub_100005D94();
}

uint64_t sub_1000054B8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000054C0(a1, *v1);
}

uint64_t sub_1000054C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100005500(uint64_t a1)
{
  uint64_t *v1;

  return sub_100005508(a1, *v1);
}

Swift::Int sub_100005508(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

void sub_100005578(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;

  sub_1000055A8();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3 & 1;
}

void sub_1000055B0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = sub_100005DB4();
  *v0 = VideoStream.qosMonitorServerDidDie(_:)(v1);
  sub_100005D94();
}

uint64_t sub_1000055D4(uint64_t a1)
{
  uint64_t *v1;

  return sub_100005960(a1, *v1);
}

Swift::Int sub_1000055EC(uint64_t a1)
{
  uint64_t *v1;

  return sub_100005998(a1, *v1);
}

void sub_100005604(uint64_t *a1, uint64_t *a2)
{
  sub_1000101F0(*a1, *a2);
}

uint64_t sub_100005610(uint64_t *a1, uint64_t *a2)
{
  return sub_1000058E4(*a1, *a2) & 1;
}

void sub_100005634()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = sub_100005DB4();
  *v0 = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  v0[1] = v2;
  sub_100005D94();
}

uint64_t sub_100005658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000057B8((unint64_t *)&qword_100077720, (uint64_t (*)(uint64_t))type metadata accessor for AVCQoSReportKey, (uint64_t)&unk_10005856C);
  v3 = v2;
  sub_1000057B8(&qword_100077728, (uint64_t (*)(uint64_t))type metadata accessor for AVCQoSReportKey, (uint64_t)&unk_1000584CC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000056DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000057B8(&qword_100077C70, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100058200);
  v3 = v2;
  sub_1000057B8(&qword_1000776B0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10005811C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

void sub_100005760()
{
  sub_1000057B8(&qword_100077690, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000580E0);
}

void sub_10000578C()
{
  sub_1000057B8(&qword_100077698, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000580B4);
}

void sub_1000057B8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }
  sub_100005D94();
}

void sub_1000057F4()
{
  sub_1000057B8((unint64_t *)&unk_1000776A0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100058150);
}

uint64_t sub_100005820@<X0>(_QWORD *a1@<X8>)
{
  NSString v2;
  uint64_t result;

  v2 = String._bridgeToObjectiveC()();
  result = sub_100005DA4();
  *a1 = v2;
  return result;
}

uint64_t sub_100005860(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000057B8((unint64_t *)&qword_100077730, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000585AC);
  v3 = v2;
  sub_1000057B8(&qword_100077738, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000583C0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_1000058E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  sub_100005DD0();
  sub_100005DA4();
  return v9 & 1;
}

uint64_t sub_100005960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100005DD8(a1, a2);
  v5 = v4;
  String.hash(into:)(v2, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100005998(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = sub_100005DD8(a1, a2);
  v5 = v4;
  Hasher.init(_seed:)(v8, v2);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100005A00(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  sub_100005DC0(a1, a2);
  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(v3, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *v2 = v6;
  return v4 & 1;
}

uint64_t sub_100005A70(uint64_t a1, id *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  NSString v5;
  uint64_t v6;
  uint64_t v7;

  sub_100005DC0(a1, a2);
  v6 = 0;
  v7 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(v3, &v6);
  if (v7)
  {
    v5 = String._bridgeToObjectiveC()();
    result = sub_100005DA4();
  }
  else
  {
    v5 = 0;
  }
  *v2 = v5;
  return result;
}

void sub_100005AD4(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  String._bridgeToObjectiveC()();
  sub_100005DD0();
  sub_100005D94();
}

void type metadata accessor for AVCQoSReportKey(uint64_t a1)
{
  sub_100005D1C(a1, &qword_1000776B8, (uint64_t)&unk_100069F48);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_100005D1C(a1, &qword_1000776C0, (uint64_t)&unk_100069F70);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_100005D1C(a1, &qword_1000776C8, (uint64_t)&unk_100069F98);
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_100005D1C(a1, &qword_1000776D0, (uint64_t)&unk_10006A020);
}

void type metadata accessor for State(uint64_t a1)
{
  sub_100005D1C(a1, &qword_1000776D8, (uint64_t)&unk_10006A050);
}

void type metadata accessor for SidecarSidebarPosition(uint64_t a1)
{
  sub_100005D1C(a1, &qword_1000776E0, (uint64_t)&unk_10006A070);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100005D1C(a1, &qword_1000776E8, (uint64_t)&unk_10006A0E8);
}

void sub_100005B8C()
{
  sub_1000057B8(&qword_1000776F0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100058384);
}

void sub_100005BB8()
{
  sub_1000057B8(&qword_1000776F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100058358);
}

void sub_100005BE4()
{
  sub_1000057B8(&qword_100077700, (uint64_t (*)(uint64_t))type metadata accessor for AVCQoSReportKey, (uint64_t)&unk_100058494);
}

void sub_100005C10()
{
  sub_1000057B8(&qword_100077708, (uint64_t (*)(uint64_t))type metadata accessor for AVCQoSReportKey, (uint64_t)&unk_10005846C);
}

void sub_100005C3C()
{
  sub_1000057B8(&qword_100077710, (uint64_t (*)(uint64_t))type metadata accessor for AVCQoSReportKey, (uint64_t)&unk_1000584FC);
}

void sub_100005C68()
{
  sub_1000057B8(&qword_100077718, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000583F4);
}

void *initializeWithCopy for Sockaddr(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t getEnumTagSinglePayload for Sockaddr(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Sockaddr(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for sockaddr_storage(uint64_t a1)
{
  sub_100005D1C(a1, (unint64_t *)&unk_100077740, (uint64_t)&unk_10006A168);
}

void sub_100005D1C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t variable initialization expression of Clock.heartbeatTimer()
{
  return 0;
}

uint64_t sub_100005DA4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t variable initialization expression of Clock.heartbeat()
{
  return 0;
}

uint64_t sub_100005DB4()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_100005DC0(uint64_t a1, id *a2)
{

}

uint64_t sub_100005DD0()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100005DD8(uint64_t a1, uint64_t a2)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
}

uint64_t sub_100005DE4()
{
  uint64_t result;

  sub_1000085DC(0, &qword_100077978, NSProcessInfo_ptr);
  result = sub_100020D08(51);
  qword_100077810 = result;
  return result;
}

void sub_100005E28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  __CFRunLoop *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;

  v4 = v1;
  v53 = a1;
  v52 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  sub_1000093F8();
  v7 = __chkstk_darwin(v5, v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0, v7);
  __chkstk_darwin(v10, v11);
  sub_1000093E0();
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_timeSyncClock) = 0;
  v16 = (_OWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_touchBounds);
  *v16 = 0u;
  v16[1] = 0u;
  v17 = OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_tracking;
  v18 = type metadata accessor for TouchTrackerLog();
  swift_allocObject(v18, 32, 7);
  *(_QWORD *)(v1 + v17) = TouchTrackerLog.init()();
  v19 = v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_keyboardBounds;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_BYTE *)(v19 + 32) = 1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_peerSupportsHIDReportExtensions) = 0;
  v51 = OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_dispatchQueue;
  v20 = sub_1000085DC(0, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  v54 = (void **)_swiftEmptyArrayStorage;
  sub_1000057B8(&qword_100077960, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = v21;
  v23 = sub_100008414(&qword_100077968);
  sub_1000084BC(&qword_100077970, &qword_100077968);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v23, v24, v10, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v52);
  if (qword_100077570 != -1)
    swift_once(&qword_100077570, sub_100005DE4);
  v25 = qword_100077810;
  v26 = (id)qword_100077810;
  v27 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000015, 0x8000000100055800, v15, v2, v9, v25);
  *(_QWORD *)(v4 + v51) = v27;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidStream) = 0;
  *(_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice) = 0;
  v28 = OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_keyboardReport;
  type metadata accessor for HIDReport();
  HIDReport.__allocating_init(count:)(8);
  v30 = v29;
  swift_retain(v29);
  v31 = KeyboardReport.reportID.unsafeMutableAddressor();
  HIDReport.subscript.setter(*v31, 0);
  swift_release(v30);
  *(_QWORD *)(v4 + v28) = v30;
  v32 = v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_logger;
  v33 = sub_100009408();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = v53;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v32, v53, v33);
  v36 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v36, "bounds");
  v38 = v37;
  v40 = v39;

  v41 = (_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_screenSize);
  *v41 = v38;
  v41[1] = v40;
  v42 = (void *)UIApp;
  if (UIApp)
  {
    v56 = sub_100008590;
    v57 = v4;
    v54 = _NSConcreteStackBlock;
    v55 = 1107296256;
    v43 = sub_100009410((uint64_t)sub_100006308);
    v44 = v57;
    swift_retain(v4);
    v45 = v42;
    swift_release(v44);
    objc_msgSend(v45, "_setHIDEventObserver:onQueue:", v43, *(_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_dispatchQueue));
    _Block_release(v43);

    v46 = sub_100008594();
    if (!v46)
    {
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v33);
      return;
    }
    if (kCFRunLoopDefaultMode)
    {
      v47 = v46;
      v56 = sub_10000635C;
      v57 = 0;
      v54 = _NSConcreteStackBlock;
      v55 = 1107296256;
      v48 = sub_100009410((uint64_t)sub_10000C66C);
      v49 = v47;
      CFRunLoopPerformBlock(v49, kCFRunLoopDefaultMode, v48);
      _Block_release(v48);

      CFRunLoopWakeUp(v49);
      goto LABEL_7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1000062A0(void *a1)
{
  int Type;
  BOOL v2;
  void *v3;
  id v4;

  if (a1)
  {
    v4 = a1;
    Type = IOHIDEventGetType();
    if (Type == 3)
    {
      sub_100006828(v4);
    }
    else if (Type == 39)
    {
      sub_100006914(v4);
    }
    else
    {
      v2 = Type == 11;
      v3 = v4;
      if (!v2)
        goto LABEL_10;
      sub_1000073FC(v4);
    }
    v3 = v4;
LABEL_10:

    return;
  }
  __break(1u);
}

void sub_100006308(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_10000635C()
{
  pthread_set_fixedpriority_self();
  sub_1000085DC(0, &qword_100077978, NSProcessInfo_ptr);
  return sub_100020E2C(51);
}

uint64_t sub_10000639C(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = (_BYTE *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_peerSupportsHIDReportExtensions);
  result = swift_beginAccess(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_peerSupportsHIDReportExtensions, v4, 0, 0);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_peerSupportsHIDReportExtensions) = *v2;
  return result;
}

uint64_t sub_1000063F0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v1;
  v6 = sub_100009408();
  sub_1000093F8();
  __chkstk_darwin(v7, v8);
  sub_1000093C8();
  v9 = objc_msgSend(a1, "rapportStream");
  objc_msgSend(v9, "setDispatchQueue:", *(_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_dispatchQueue));

  v10 = *(void **)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidStream);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidStream) = a1;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_logger, v6);
  v11 = type metadata accessor for DisplayHIDDevice(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = sub_10001C420(v2, a1);
  v13 = *(_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice) = v12;
  return swift_release(v13);
}

uint64_t sub_1000064F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice);
  if (v1)
  {
    swift_retain(v1);
    sub_10001C620();
    return sub_1000093B8(v1);
  }
  return result;
}

uint64_t sub_100006530(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice);
  if (v2)
  {
    v3 = result;
    swift_retain(v2);
    sub_10001CF68(v3);
    return sub_1000093B8(v2);
  }
  return result;
}

uint64_t sub_100006578(uint64_t a1, uint64_t a2)
{
  _QWORD v3[7];
  uint64_t v4;

  v3[3] = a1;
  v3[4] = a2;
  OS_dispatch_queue.sync<A>(execute:)(&v4, sub_100008354, v3, &type metadata for Bool);
  return v4;
}

uint64_t sub_1000065DC(void *a1)
{
  unint64_t v2;
  double v3;
  Swift::UInt64 rawValue;

  v2 = (unint64_t)objc_msgSend(a1, "_pathIndex") & 0x7F;
  objc_msgSend(a1, "timestamp");
  rawValue = HostTime.init(nanoseconds:)(v3 * 1000000000.0).rawValue;
  return sub_100006578(v2, rawValue);
}

uint64_t sub_100006638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  sub_1000093C8();
  v9 = type metadata accessor for DispatchQoS(0);
  sub_1000093F8();
  __chkstk_darwin(v10, v11);
  sub_1000093E0();
  v12 = swift_allocObject(&unk_10006A250, 57, 7);
  *(_QWORD *)(v12 + 16) = v1;
  sub_1000083CC(a1, v12 + 24);
  aBlock[4] = sub_100008454;
  v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000C66C;
  aBlock[3] = &unk_10006A268;
  v13 = _Block_copy(aBlock);
  v14 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = v15;
  v17 = sub_100008414((uint64_t *)&unk_100077A10);
  sub_1000084BC((unint64_t *)&qword_100077CA0, (uint64_t *)&unk_100077A10);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v3, v2, v13);
  _Block_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v9);
  return swift_release(v22);
}

uint64_t sub_100006810(uint64_t a1, uint64_t a2)
{
  return sub_1000083CC(a2, a1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_keyboardBounds);
}

void sub_100006828(void *a1)
{
  uint64_t v1;
  BOOL v2;
  void *v3;
  uint64_t IntegerValue;
  uint64_t v5;
  id v6;
  Swift::Int v7;
  Swift::Int v8;
  SidecarHID::HIDUsage v9;
  uint64_t v10;
  id v11;

  v11 = a1;
  v2 = IOHIDEventGetType() == 3;
  v3 = v11;
  if (v2)
  {
    IntegerValue = IOHIDEventGetIntegerValue(v11, 196610);
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_keyboardReport);
    v6 = v11;
    v7 = IOHIDEventGetIntegerValue(v6, 196608);
    v8 = IOHIDEventGetIntegerValue(v6, 196609);
    LODWORD(v7) = HIDUsage.init(page:usage:)(v7, v8);

    v9 = (SidecarHID::HIDUsage)v7;
    if (IntegerValue)
      KeyboardReport.addUsage(_:)(v9);
    else
      KeyboardReport.removeUsage(_:)(v9);
    v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice);
    v3 = v11;
    if (v10)
    {
      swift_retain(v10);
      sub_10001CF68(v5);
      swift_release(v10);
      v3 = v11;
    }
  }

}

void sub_100006914(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  id v4;

  v4 = a1;
  if (IOHIDEventGetType() == 39
    && (v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice)) != 0)
  {
    swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice));
    v3 = HIDEvent.GenericGesture.gestureType.getter((uint64_t)v4);
    if (v3 == 5)
    {
      sub_100006B7C((uint64_t)v4);
    }
    else if (!v3)
    {
      sub_1000069A8((uint64_t)v4);
    }

    swift_release(v2);
  }
  else
  {

  }
}

uint64_t sub_1000069A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::UInt64 TimeStamp;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for HIDReport();
  HIDReport.__allocating_init(count:)(21);
  v3 = v2;
  swift_retain(v2);
  v4 = PencilReport.reportID.unsafeMutableAddressor();
  HIDReport.subscript.setter(*v4, 0);
  swift_release(v3);
  TimeStamp = IOHIDEventGetTimeStamp(a1);
  HostTime.nanoseconds.getter();
  v7 = v6 / 0x186A0;
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
  {
    HIDReport.__allocating_init(count:)(*(_QWORD *)(v3 + 24));
    v9 = v8;
    HIDReport.copy(from:)(v3);
    swift_release(v3);
    v3 = v9;
  }
  HIDReport.setValue(_:at:)(v7, 9);
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
  {
    HIDReport.__allocating_init(count:)(*(_QWORD *)(v3 + 24));
    v11 = v10;
    HIDReport.copy(from:)(v3);
    swift_release(v3);
    v3 = v11;
  }
  HIDReport.setValue(_:at:)(TimeStamp, 11);
  v12 = 0;
  do
  {
    v13 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    {
      HIDReport.__allocating_init(count:)(*(_QWORD *)(v3 + 24));
      v15 = v14;
      HIDReport.copy(from:)(v3);
      swift_release(v3);
      v3 = v15;
    }
    HIDReport.setValue(_:at:bit:)(1, 5, 2);
    v16 = swift_retain(v3);
    sub_100006EF8(v16);
    swift_release(v3);
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    {
      HIDReport.__allocating_init(count:)(*(_QWORD *)(v3 + 24));
      v18 = v17;
      HIDReport.copy(from:)(v3);
      swift_release(v3);
      v3 = v18;
    }
    HIDReport.setValue(_:at:bit:)(0, 5, 2);
    v19 = swift_retain(v3);
    sub_100006EF8(v19);
    swift_release(v3);
    v12 = 1;
  }
  while ((v13 & 1) == 0);
  return swift_release(v3);
}

uint64_t sub_100006B7C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t TimeStamp;

  result = sub_100006FA8();
  if (v3)
  {
    v4 = v3;
    type metadata accessor for HIDReport();
    HIDReport.__allocating_init(count:)(32);
    v6 = v5;
    swift_retain(v5);
    v7 = SqueezeGestureReport.reportID.unsafeMutableAddressor();
    HIDReport.subscript.setter(*v7, 0);
    swift_release(v6);
    TimeStamp = IOHIDEventGetTimeStamp(a1);
    v8 = sub_100008728();
    HIDReport.storeValue<A>(_:to:at:)((uint64_t)&TimeStamp, (uint64_t)&type metadata for UInt64, 2, (uint64_t)&type metadata for UInt64, v8);
    LOWORD(TimeStamp) = word_1000586D2[(char)HIDEvent.phase.getter()];
    v9 = sub_1000086D0();
    HIDReport.storeValue<A>(_:to:at:)((uint64_t)&TimeStamp, (uint64_t)&type metadata for UInt16, 1, (uint64_t)&type metadata for UInt16, v9);
    v10 = sub_1000092A8();
    HIDReport.loadValue<A>(from:at:)(0, (uint64_t)&type metadata for UInt32, v10, (uint64_t)&TimeStamp);
    v11 = TimeStamp;
    if (TimeStamp >= 0xFF)
      v11 = -1;
    LOBYTE(TimeStamp) = v11;
    v12 = sub_100008694();
    HIDReport.storeValue<A>(_:to:at:)((uint64_t)&TimeStamp, (uint64_t)&type metadata for UInt8, 10, (uint64_t)&type metadata for UInt8, v12);
    HIDReport.loadValue<A>(from:at:)(4, (uint64_t)&type metadata for UInt32, v10, (uint64_t)&TimeStamp);
    v13 = TimeStamp;
    if (TimeStamp >= 0xFF)
      v13 = -1;
    LOBYTE(TimeStamp) = v13;
    HIDReport.storeValue<A>(_:to:at:)((uint64_t)&TimeStamp, (uint64_t)&type metadata for UInt8, 11, (uint64_t)&type metadata for UInt8, v12);
    v14 = COERCE_DOUBLE(HIDReport.getValue(_:at:)(8uLL));
    if (v14 <= 0.0)
      v14 = 0.0;
    if (v14 > 1.0)
      v14 = 1.0;
    HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(*(uint64_t *)&v14, 0, (uint64_t)&type metadata for UInt32, 12, (uint64_t)&type metadata for UInt32, v10);
    v15 = COERCE_DOUBLE(HIDReport.getValue(_:at:)(0x10uLL));
    if (v15 <= 0.0)
      v15 = 0.0;
    if (v15 > 1.0)
      v15 = 1.0;
    HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(*(uint64_t *)&v15, 0, (uint64_t)&type metadata for UInt32, 16, (uint64_t)&type metadata for UInt32, v10);
    v16 = COERCE_DOUBLE(HIDReport.getValue(_:at:)(0x18uLL));
    if (v16 <= 0.0)
      v16 = 0.0;
    if (v16 > 1.0)
      v16 = 1.0;
    HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(*(uint64_t *)&v16, 0, (uint64_t)&type metadata for UInt32, 20, (uint64_t)&type metadata for UInt32, v10);
    v17 = COERCE_DOUBLE(HIDReport.getValue(_:at:)(0x20uLL));
    if (v17 <= 0.0)
      v17 = 0.0;
    if (v17 > 1.0)
      v17 = 1.0;
    HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(*(uint64_t *)&v17, 0, (uint64_t)&type metadata for UInt32, 24, (uint64_t)&type metadata for UInt32, v10);
    v18 = HIDReport.getValue(_:at:)(0x28uLL);
    *(SidecarHID::HIDFixed_optional *)&v19 = HIDFixed.init(doubleValue:)(*(Swift::Double *)&v18);
    if ((v19 & 0x100000000) == 0)
    {
      LODWORD(TimeStamp) = v19;
      v20 = sub_1000092E4();
      HIDReport.storeValue<A>(_:to:at:)((uint64_t)&TimeStamp, (uint64_t)&type metadata for Int32, 28, (uint64_t)&type metadata for Int32, v20);
    }
    v21 = swift_retain(v6);
    sub_100006530(v21);
    swift_release(v4);
    return swift_release_n(v6, 2);
  }
  return result;
}

uint64_t sub_100006EF8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice);
  if (v2)
  {
    v3 = result;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_peerSupportsHIDReportExtensions) == 1)
    {
      swift_retain(*(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice));
      swift_retain(v3);
    }
    else
    {
      type metadata accessor for HIDReport();
      swift_retain(v2);
      HIDReport.__allocating_init(count:)(19);
      v5 = v4;
      HIDReport.copy(from:)(v3);
      v3 = v5;
    }
    sub_10001CF68(v3);
    swift_release(v2);
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_100006FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t IntegerValue;
  uint64_t DataValue;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD);
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[5];
  uint64_t (*v37)(char *, _QWORD, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;

  v0 = type metadata accessor for Data.Iterator(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Data.Deallocator(0);
  v42 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)v36 - v11;
  v13 = HIDEvent.children.getter();
  v14 = v13;
  v15 = *((_QWORD *)v13 + 2);
  if (v15)
  {
    v40 = v12;
    v36[1] = v8;
    v36[2] = v4;
    v36[3] = v1;
    v36[4] = v0;
    v16 = 0;
    v41 = enum case for Data.Deallocator.none(_:);
    v17 = v42;
    v38 = v5;
    v39 = v13;
    do
    {
      v18 = *(id *)&v14[8 * v16 + 32];
      if (IOHIDEventGetType() == 1
        && IOHIDEventGetIntegerValue(v18, 0x10000) == 65280
        && IOHIDEventGetIntegerValue(v18, 65537) == 17)
      {
        v19 = v18;
        IntegerValue = IOHIDEventGetIntegerValue(v19, 65539);
        DataValue = IOHIDEventGetDataValue(v19, 65540);
        v22 = v40;
        v37 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v17 + 104);
        v23 = v37(v40, v41, v5);
        v24 = Data.Deallocator._deallocator.getter(v23);
        v26 = v25;
        if (IntegerValue)
        {
          v27 = v24;
          v28 = type metadata accessor for __DataStorage(0);
          swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
          swift_retain(v26);
          v29 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(DataValue, IntegerValue, 0, v27, v26, 0);
          Data._Representation.init(_:count:)(v29, IntegerValue);
          v31 = v30;
          swift_release(v26);
          (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v38);

          __asm { BR              X9 }
        }
        v32 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter(v24);
        v34 = v33;
        v32(DataValue, 0);
        swift_release(v26);
        swift_release(v34);
        v17 = v42;
        v5 = v38;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v38);

        v14 = v39;
        sub_100009320(0, 0xC000000000000000);
      }
      ++v16;

    }
    while (v15 != v16);
  }
  swift_bridgeObjectRelease(v14);
  return 0;
}

void sub_1000073FC(void *a1)
{
  char *v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t TimeStamp;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  double *v20;
  int64_t v21;
  id v22;
  double DoubleValue;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t IntegerValue;
  double v30;
  double v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  id v43;
  void *v44;
  double v45;
  double v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::UInt64 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  unint64_t v73;
  int64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  double v78;
  BOOL v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  double *v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  int64_t v96;
  char v97;
  char v98;
  _QWORD *v99;
  unsigned __int8 v100;
  char v101;
  _QWORD *v102;

  v94 = a1;
  if (IOHIDEventGetType() != 11)
  {

    return;
  }
  v1 = HIDEvent.Digitizer.children.getter();

  v99 = _swiftEmptyArrayStorage;
  v2 = *((_QWORD *)v1 + 2);
  if (!v2)
  {
    swift_bridgeObjectRelease(v1);
    v10 = _swiftEmptyArrayStorage;
LABEL_22:
    v11 = *(_QWORD *)(v95 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_tracking);
    TimeStamp = IOHIDEventGetTimeStamp(v94);
    v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, BOOL (*)(_QWORD *), uint64_t, ValueMetadata *, char **))(*(_QWORD *)v11 + 128))(v10, TimeStamp, sub_10000868C, v95, &type metadata for HIDEvent.Digitizer, &protocol witness table for HIDEvent.Digitizer);
    swift_release(v10);
    v99 = v13;
    swift_bridgeObjectRetain(v13);
    sub_100008614((uint64_t *)&v99);
    swift_bridgeObjectRelease(v13);
    v14 = v99;
    v15 = v99[2];
    if (!v15 || (v16 = *(_QWORD *)(v95 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice)) == 0)
    {
      swift_release(v99);
      return;
    }
    swift_retain(*(_QWORD *)(v95 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice));
    v90 = IOHIDEventGetTimeStamp(v94);
    HostTime.nanoseconds.getter();
    v18 = (double)v17 * 0.00001;
    if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
    {
      if (v18 > -9.22337204e18)
      {
        v87 = v16;
        if (v18 < 9.22337204e18)
        {
          v19 = 0;
          v102 = _swiftEmptyArrayStorage;
          v20 = (double *)(v95 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_touchBounds);
          v88 = OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_timeSyncClock;
          v89 = (uint64_t)v18;
          v21 = 0;
          v91 = v14;
          v92 = (double *)(v95 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_touchBounds);
          v93 = v15;
          while (1)
          {
            v22 = (id)v14[v19 + 4];
            DoubleValue = IOHIDEventGetDoubleValue(v22, 720896);
            v24 = IOHIDEventGetDoubleValue(v22, 720897);
            v25 = *v20;
            v26 = v20[1];
            v27 = v20[2];
            v28 = v20[3];
            IntegerValue = IOHIDEventGetIntegerValue(v22, 720900);
            if ((IntegerValue & 0x8000000000000000) != 0)
              goto LABEL_97;
            if (HIDWORD(IntegerValue))
              goto LABEL_18;
            v30 = (DoubleValue - v25) / v27;
            v31 = (v24 - v26) / v28;
            if (!IntegerValue)
            {
              v32 = v22;
              PencilReport.init(digitizerEvent:)(v32);
              if (v33)
              {
                v34 = v33;
                if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
                {
                  type metadata accessor for HIDReport();
                  HIDReport.__allocating_init(count:)(*(_QWORD *)(v34 + 24));
                  v36 = v35;
                  HIDReport.copy(from:)(v34);
                  swift_release(v34);
                  v34 = v36;
                }
                v37 = 0.0;
                if (v30 > 0.0)
                  v37 = v30;
                if (v37 > 1.0)
                  v37 = 1.0;
                v38 = *(_QWORD *)&v37;
                v39 = sub_1000086D0();
                HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(v38, 0, (uint64_t)&type metadata for UInt16, 1, (uint64_t)&type metadata for UInt16, v39);
                if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
                {
                  type metadata accessor for HIDReport();
                  HIDReport.__allocating_init(count:)(*(_QWORD *)(v34 + 24));
                  v41 = v40;
                  HIDReport.copy(from:)(v34);
                  swift_release(v34);
                  v34 = v41;
                }
                v42 = 0.0;
                if (v31 > 0.0)
                  v42 = v31;
                if (v42 > 1.0)
                  v42 = 1.0;
                HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(*(uint64_t *)&v42, 0, (uint64_t)&type metadata for UInt16, 3, (uint64_t)&type metadata for UInt16, v39);
                v43 = (id)BKSHIDEventGetDigitizerAttributes(v94);
                if (!v43
                  || (v44 = v43, objc_msgSend(v43, "maximumPositionZ"), v46 = v45, v44, v46 <= 0.0))
                {
                  v47 = HIDReport.getValue(_:at:bit:)(5, 1uLL);
                  if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
                  {
                    type metadata accessor for HIDReport();
                    HIDReport.__allocating_init(count:)(*(_QWORD *)(v34 + 24));
                    v49 = v48;
                    HIDReport.copy(from:)(v34);
                    swift_release(v34);
                    v34 = v49;
                  }
                  HIDReport.setValue(_:at:bit:)(v47 & 1, 5, 0);
                }
                v50 = IOHIDEventGetTimeStamp(v32);
                v51 = *(_QWORD *)(v95 + v88);
                if (v51)
                {
                  swift_retain(*(_QWORD *)(v95 + v88));
                  v52 = Clock.domainTimeForMachAbsoluteTime(_:)(v50);
                  swift_release(v51);
                }
                else
                {
                  v52 = -1;
                }
                sub_10000870C(v52, v50);
                v53 = swift_retain(v34);
                sub_100006EF8(v53);
                swift_release_n(v34, 2);
              }
            }
            v54 = IOHIDEventGetIntegerValue(v22, 720900);
            if ((v54 & 0x8000000000000000) != 0)
              goto LABEL_97;
            if (HIDWORD(v54))
              goto LABEL_18;
            if (v54 == 2)
            {
              v55 = v21 % 2;
              v96 = v21;
              if (v21 % 2 == 1 && (v56 = v102[2]) != 0)
              {
                v57 = (_QWORD *)v102[v56 + 3];
                swift_retain(v57);
              }
              else
              {
                v58 = sub_100008094(v89, v90, (uint64_t)&v102);
                if (v55 < 0)
                  goto LABEL_97;
                v57 = (_QWORD *)v58;
              }
              v99 = v57;
              v100 = 5 * v55 + 1;
              v59 = 1;
              v101 = 1;
              swift_retain(v57);
              v60 = IOHIDEventGetIntegerValue(v22, 720904) != 0;
              v61 = (5 * v55 + 1);
              v62 = sub_100008694();
              HIDReport.loadValue<A>(from:at:)(v61, (uint64_t)&type metadata for UInt8, v62, (uint64_t)&v98);
              v97 = v98 & 0x7F | (v60 << 7);
              HIDReport.storeValue<A>(_:to:at:)((uint64_t)&v97, (uint64_t)&type metadata for UInt8, v61, (uint64_t)&type metadata for UInt8, v62);
              v63 = IOHIDEventGetIntegerValue(v22, 720905) != 0;
              HIDReport.loadValue<A>(from:at:)(v61, (uint64_t)&type metadata for UInt8, v62, (uint64_t)&v98);
              v97 = v98 & 0xBF | (v63 << 6);
              HIDReport.storeValue<A>(_:to:at:)((uint64_t)&v97, (uint64_t)&type metadata for UInt8, v61, (uint64_t)&type metadata for UInt8, v62);
              v64 = IOHIDEventGetIntegerValue(v22, 720901);
              TouchReport.Contact.index.setter(v64);
              v65 = (uint64_t)v99;
              if ((v101 & 1) == 0)
              {
                if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) != 0)
                {
                  v59 = 0;
                }
                else
                {
                  type metadata accessor for HIDReport();
                  HIDReport.__allocating_init(count:)(*(_QWORD *)(v65 + 24));
                  v67 = v66;
                  HIDReport.copy(from:)(v65);
                  v68 = v99;
                  v99 = v67;
                  swift_release(v68);
                  v59 = v101;
                  v65 = (uint64_t)v67;
                }
              }
              v20 = v92;
              v69 = v100;
              v70 = v100 + 1;
              v71 = 0.0;
              if (v30 > 0.0)
                v71 = v30;
              if (v71 > 1.0)
                v71 = 1.0;
              v72 = *(_QWORD *)&v71;
              v73 = sub_1000086D0();
              HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(v72, 0, (uint64_t)&type metadata for UInt16, v70, (uint64_t)&type metadata for UInt16, v73);
              if ((v59 & 1) != 0)
              {
                v15 = v93;
                v74 = v96;
              }
              else
              {
                v74 = v96;
                if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
                {
                  type metadata accessor for HIDReport();
                  HIDReport.__allocating_init(count:)(*(_QWORD *)(v65 + 24));
                  v76 = v75;
                  HIDReport.copy(from:)(v65);
                  v77 = v99;
                  v99 = v76;
                  swift_release(v77);
                  v69 = v100;
                  v65 = (uint64_t)v76;
                }
                v15 = v93;
              }
              v78 = 0.0;
              if (v31 > 0.0)
                v78 = v31;
              if (v78 > 1.0)
                v78 = 1.0;
              HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(*(uint64_t *)&v78, 0, (uint64_t)&type metadata for UInt16, v69 + 3, (uint64_t)&type metadata for UInt16, v73);
              swift_release(v65);

              swift_release(v57);
              v79 = __OFADD__(v74, 1);
              v21 = v74 + 1;
              if (v79)
                goto LABEL_93;
              v14 = v91;
            }
            else
            {

            }
            if (v15 == ++v19)
            {
              swift_release(v14);
              v80 = v102;
              if (v21 < 1)
              {
                v86 = v87;
              }
              else
              {
                if (v102[2])
                {
                  v81 = v102[4];
                  swift_retain(v81);
                  TouchReport.contactCount.setter(v21);
                  swift_release(v81);
                  v82 = v80[2];
                  if (v82)
                  {
                    swift_bridgeObjectRetain(v80);
                    v83 = 0;
                    do
                    {
                      v84 = v80[v83++ + 4];
                      v85 = swift_retain(v84);
                      sub_10001CF68(v85);
                      swift_release(v84);
                    }
                    while (v82 != v83);
                    swift_bridgeObjectRelease(v80);
                  }
                }
                v86 = v87;
              }
              swift_release(v86);
              swift_bridgeObjectRelease(v80);
              return;
            }
          }
        }
        goto LABEL_96;
      }
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v3 = *((id *)v1 + 4);
  v4 = IOHIDEventGetIntegerValue(v3, 720900);
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_97:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    goto LABEL_98;
  }
  if (!HIDWORD(v4))
  {
    v5 = 0;
    v6 = v2 - 1;
    while (1)
    {
      if (v4 == 2)
        goto LABEL_7;
      v9 = IOHIDEventGetIntegerValue(v3, 720900);
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_97;
      if (HIDWORD(v9))
        goto LABEL_18;
      if (v9
        || (IOHIDEventGetIntegerValue(v3, 720925) & 0x400) != 0
        || (IOHIDEventGetIntegerValue(v3, 720925) & 0x800000) != 0)
      {

      }
      else
      {
LABEL_7:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v7 = v99[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
        v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v3);
        specialized ContiguousArray._endMutation()(v8);
      }
      if (v6 == v5)
      {
        swift_bridgeObjectRelease(v1);
        v10 = v99;
        goto LABEL_22;
      }
      if ((unint64_t)(v5 + 1) >= *((_QWORD *)v1 + 2))
        break;
      v3 = *(id *)&v1[8 * v5 + 40];
      v4 = IOHIDEventGetIntegerValue(v3, 720900);
      if ((v4 & 0x8000000000000000) != 0)
        goto LABEL_97;
      ++v5;
      if (HIDWORD(v4))
        goto LABEL_18;
    }
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
LABEL_18:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_98:
  __break(1u);
  swift_release(v99);
  __break(1u);
}

BOOL sub_100007E1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  CGFloat DoubleValue;
  CGFloat v5;
  CGFloat *v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  _BOOL8 v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSString *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  NSPoint v27;
  CGPoint v28;
  CGPoint v29;
  CGRect v30;
  NSRect v31;

  v3 = *a1;
  DoubleValue = IOHIDEventGetDoubleValue(*a1, 720896);
  v5 = IOHIDEventGetDoubleValue(v3, 720897);
  v6 = (CGFloat *)(a2 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_keyboardBounds);
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_keyboardBounds + 32) == 1)
    goto LABEL_6;
  v8 = v6[2];
  v7 = v6[3];
  v10 = *v6;
  v9 = v6[1];
  v30.origin.x = *v6;
  v30.origin.y = v9;
  v30.size.width = v8;
  v30.size.height = v7;
  v28.x = DoubleValue;
  v28.y = v5;
  v11 = CGRectContainsPoint(v30, v28);
  if (!v11)
  {
LABEL_6:
    v29.x = DoubleValue;
    v29.y = v5;
    return CGRectContainsPoint(*(CGRect *)(a2 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_touchBounds), v29);
  }
  else
  {
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v26 = v15;
      *(_DWORD *)v14 = 136446466;
      v27.x = DoubleValue;
      v27.y = v5;
      v16 = NSStringFromPoint(v27);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v25 = sub_10000EC54(v17, v19, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4);
      swift_bridgeObjectRelease(v19);
      *(_WORD *)(v14 + 12) = 2082;
      v31.origin.x = v10;
      v31.origin.y = v9;
      v31.size.width = v8;
      v31.size.height = v7;
      v20 = NSStringFromRect(v31);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v25 = sub_10000EC54(v21, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 14);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Keyboard: %{public}s in %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }

    return 0;
  }
}

uint64_t sub_100008094(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int16 v19;

  type metadata accessor for HIDReport();
  HIDReport.__allocating_init(count:)(23);
  v7 = v6;
  swift_retain(v6);
  v8 = TouchReport.reportID.unsafeMutableAddressor();
  HIDReport.subscript.setter(*v8, 0);
  swift_release(v7);
  v19 = a1;
  v9 = sub_1000086D0();
  HIDReport.storeValue<A>(_:to:at:)((uint64_t)&v19, (uint64_t)&type metadata for UInt16, 13, (uint64_t)&type metadata for UInt16, v9);
  v18 = a2;
  v10 = sub_100008728();
  HIDReport.storeValue<A>(_:to:at:)((uint64_t)&v18, (uint64_t)&type metadata for UInt64, 15, (uint64_t)&type metadata for UInt64, v10);
  v11 = swift_retain(v7);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
  v13 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
  v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v7);
  specialized Array._endMutation()(v14, v15, v16);
  return v7;
}

void sub_1000081A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_logger;
  v2 = sub_100009408();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000093C0(OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_timeSyncClock);
  sub_1000093C0(OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_tracking);

  sub_1000093C0(OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_hidDevice);
  sub_1000093C0(OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_keyboardReport);
  sub_100005D94();
}

uint64_t sub_100008230()
{
  uint64_t v0;

  sub_1000081A4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100008254()
{
  return type metadata accessor for HIDEventObserver(0);
}

uint64_t type metadata accessor for HIDEventObserver(uint64_t a1)
{
  uint64_t result;

  result = qword_100077880;
  if (!qword_100077880)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HIDEventObserver);
  return result;
}

uint64_t sub_100008294(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100058658;
    v4[2] = &unk_100058670;
    v4[3] = &unk_100058688;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = &unk_1000586A0;
    v4[6] = &unk_1000586B8;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = &unk_100058670;
    v4[9] = &unk_100058670;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 11, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100008354@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1[2]
                                                                   + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_tracking)
                                                     + 136))(v1[3], v1[4]);
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000083A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1000083CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008414(&qword_100077958);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008414(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100008454()
{
  uint64_t v0;

  return sub_100006810(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_100008460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008470(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008478(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_1000084BC(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = sub_100008478(a2);
    atomic_store(swift_getWitnessTable(&protocol conformance descriptor for [A], v3), a1);
  }
  sub_100005D94();
}

_QWORD *sub_1000084F8(uint64_t a1)
{
  _QWORD *result;

  if (a1 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else if (a1)
  {
    result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, &type metadata for HIDEvent.Digitizer);
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

id sub_100008594()
{
  if ((objc_opt_respondsToSelector(UIApp, "_eventFetchRunLoop") & 1) != 0)
    return _objc_msgSend(UIApp, "_eventFetchRunLoop");
  else
    return 0;
}

uint64_t sub_1000085DC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100008614(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100009290(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100008764(v6);
  return specialized ContiguousArray._endMutation()();
}

BOOL sub_10000868C(_QWORD *a1)
{
  uint64_t v1;

  return sub_100007E1C(a1, v1);
}

unint64_t sub_100008694()
{
  unint64_t result;

  result = qword_100077980;
  if (!qword_100077980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_100077980);
  }
  return result;
}

unint64_t sub_1000086D0()
{
  unint64_t result;

  result = qword_100078970;
  if (!qword_100078970)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_100078970);
  }
  return result;
}

uint64_t sub_10000870C(uint64_t a1, uint64_t a2)
{
  return kdebug_trace(553976324, a1, a2, 0, 0);
}

unint64_t sub_100008728()
{
  unint64_t result;

  result = qword_100078980;
  if (!qword_100078980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100078980);
  }
  return result;
}

void sub_100008764(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  _QWORD *v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  void *v12;
  id v13;
  id v14;
  uint64_t IntegerValue;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t *v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  void *v32;
  Swift::Int v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  Swift::Int v98;
  Swift::Int *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  Swift::Int v103;
  char *v104;
  char *v105;
  Swift::Int v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_132;
    if (v3)
      sub_100008E54(0, v3, 1, a1);
    return;
  }
  v5 = v4;
  v6 = sub_1000084F8(v3 / 2);
  v107 = v3;
  v108 = v7;
  v110 = v6;
  v102 = a1;
  if (v3 <= 0)
    goto LABEL_96;
  v103 = v5;
  v8 = 0;
  v9 = *a1;
  v101 = *a1 - 8;
  v10 = (char *)&_swiftEmptyArrayStorage;
  v109 = *a1;
  while (1)
  {
    v11 = v8++;
    v106 = v11;
    if (v8 < v3)
    {
      v104 = v10;
      v12 = *(void **)(v9 + 8 * v11);
      v13 = *(id *)(v9 + 8 * v8);
      v14 = v12;
      IntegerValue = IOHIDEventGetIntegerValue(v13, 720901);
      v16 = IOHIDEventGetIntegerValue(v14, 720901);

      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v17 = v11;
        while (1)
        {
          v18 = v109 + 8 * v17;
          v19 = *(void **)(v18 + 8);
          v20 = *(id *)(v18 + 16);
          v21 = v19;
          v22 = IOHIDEventGetIntegerValue(v20, 720901);
          v23 = IOHIDEventGetIntegerValue(v21, 720901);

          if (IntegerValue < v16 == v22 >= v23)
            break;
          v24 = v17 + 3;
          ++v17;
          v3 = v107;
          if (v24 >= v107)
          {
            v8 = v107;
            goto LABEL_11;
          }
        }
        v8 = v17 + 2;
        v3 = v107;
LABEL_11:
        v11 = v106;
      }
      v10 = v104;
      if (IntegerValue >= v16)
      {
        v9 = v109;
      }
      else
      {
        v9 = v109;
        if (v8 < v11)
          goto LABEL_133;
        if (v11 < v8)
        {
          v25 = (uint64_t *)(v101 + 8 * v8);
          v26 = v8;
          v27 = v11;
          v28 = (uint64_t *)(v109 + 8 * v11);
          do
          {
            if (v27 != --v26)
            {
              if (!v109)
                goto LABEL_139;
              v29 = *v28;
              *v28 = *v25;
              *v25 = v29;
            }
            ++v27;
            --v25;
            ++v28;
          }
          while (v27 < v26);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_131;
      if (v8 - v11 < v103)
      {
        if (__OFADD__(v11, v103))
          goto LABEL_134;
        if (v11 + v103 >= v3)
          v30 = v3;
        else
          v30 = v11 + v103;
        if (v30 < v11)
        {
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (v8 != v30)
        {
          v105 = v10;
          v31 = v101 + 8 * v8;
          do
          {
            v32 = *(void **)(v9 + 8 * v8);
            v33 = v11;
            v34 = v31;
            while (1)
            {
              v35 = *(void **)v34;
              v36 = v32;
              v37 = v35;
              v38 = IOHIDEventGetIntegerValue(v36, 720901);
              v39 = IOHIDEventGetIntegerValue(v37, 720901);

              if (v38 >= v39)
                break;
              v9 = v109;
              if (!v109)
                goto LABEL_137;
              v40 = *(void **)v34;
              v32 = *(void **)(v34 + 8);
              *(_QWORD *)v34 = v32;
              *(_QWORD *)(v34 + 8) = v40;
              v34 -= 8;
              if (v8 == ++v33)
                goto LABEL_38;
            }
            v9 = v109;
LABEL_38:
            ++v8;
            v31 += 8;
            v11 = v106;
          }
          while (v8 != v30);
          v8 = v30;
          v10 = v105;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_130;
    v41 = v10;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) != 0)
      v10 = v41;
    else
      v10 = sub_100009188(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
    v43 = *((_QWORD *)v10 + 2);
    v42 = *((_QWORD *)v10 + 3);
    v44 = v43 + 1;
    v9 = v109;
    if (v43 >= v42 >> 1)
    {
      v92 = sub_100009188((char *)(v42 > 1), v43 + 1, 1, v10);
      v9 = v109;
      v10 = v92;
    }
    *((_QWORD *)v10 + 2) = v44;
    v45 = v10 + 32;
    v46 = &v10[16 * v43 + 32];
    *(_QWORD *)v46 = v11;
    *((_QWORD *)v46 + 1) = v8;
    if (v43)
      break;
    v44 = 1;
LABEL_88:
    v3 = v107;
    if (v8 >= v107)
      goto LABEL_97;
  }
  while (1)
  {
    v47 = v44 - 1;
    if (v44 >= 4)
    {
      v52 = &v45[16 * v44];
      v53 = *((_QWORD *)v52 - 8);
      v54 = *((_QWORD *)v52 - 7);
      v58 = __OFSUB__(v54, v53);
      v55 = v54 - v53;
      if (v58)
        goto LABEL_115;
      v57 = *((_QWORD *)v52 - 6);
      v56 = *((_QWORD *)v52 - 5);
      v58 = __OFSUB__(v56, v57);
      v50 = v56 - v57;
      v51 = v58;
      if (v58)
        goto LABEL_116;
      v59 = v44 - 2;
      v60 = &v45[16 * v44 - 32];
      v62 = *(_QWORD *)v60;
      v61 = *((_QWORD *)v60 + 1);
      v58 = __OFSUB__(v61, v62);
      v63 = v61 - v62;
      if (v58)
        goto LABEL_117;
      v58 = __OFADD__(v50, v63);
      v64 = v50 + v63;
      if (v58)
        goto LABEL_119;
      if (v64 >= v55)
      {
        v82 = &v45[16 * v47];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v58 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v58)
          goto LABEL_125;
        v75 = v50 < v85;
        goto LABEL_77;
      }
    }
    else
    {
      if (v44 != 3)
      {
        v76 = *((_QWORD *)v10 + 4);
        v77 = *((_QWORD *)v10 + 5);
        v58 = __OFSUB__(v77, v76);
        v69 = v77 - v76;
        v70 = v58;
        goto LABEL_71;
      }
      v49 = *((_QWORD *)v10 + 4);
      v48 = *((_QWORD *)v10 + 5);
      v58 = __OFSUB__(v48, v49);
      v50 = v48 - v49;
      v51 = v58;
    }
    if ((v51 & 1) != 0)
      goto LABEL_118;
    v59 = v44 - 2;
    v65 = &v45[16 * v44 - 32];
    v67 = *(_QWORD *)v65;
    v66 = *((_QWORD *)v65 + 1);
    v68 = __OFSUB__(v66, v67);
    v69 = v66 - v67;
    v70 = v68;
    if (v68)
      goto LABEL_120;
    v71 = &v45[16 * v47];
    v73 = *(_QWORD *)v71;
    v72 = *((_QWORD *)v71 + 1);
    v58 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v58)
      goto LABEL_122;
    if (__OFADD__(v69, v74))
      goto LABEL_124;
    if (v69 + v74 >= v50)
    {
      v75 = v50 < v74;
LABEL_77:
      if (v75)
        v47 = v59;
      goto LABEL_79;
    }
LABEL_71:
    if ((v70 & 1) != 0)
      goto LABEL_121;
    v78 = &v45[16 * v47];
    v80 = *(_QWORD *)v78;
    v79 = *((_QWORD *)v78 + 1);
    v58 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v58)
      goto LABEL_123;
    if (v81 < v69)
      goto LABEL_88;
LABEL_79:
    v86 = v47 - 1;
    if (v47 - 1 >= v44)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    if (!v9)
      goto LABEL_138;
    v87 = v10;
    v3 = (Swift::Int)&v45[16 * v86];
    v88 = *(_QWORD *)v3;
    v89 = &v45[16 * v47];
    v90 = *((_QWORD *)v89 + 1);
    sub_100008F3C((char *)(v9 + 8 * *(_QWORD *)v3), (char *)(v9 + 8 * *(_QWORD *)v89), v9 + 8 * v90, v108);
    if (v1)
      break;
    if (v90 < v88)
      goto LABEL_112;
    if (v47 > *((_QWORD *)v87 + 2))
      goto LABEL_113;
    *(_QWORD *)v3 = v88;
    *(_QWORD *)&v45[16 * v86 + 8] = v90;
    v91 = *((_QWORD *)v87 + 2);
    if (v47 >= v91)
      goto LABEL_114;
    v44 = v91 - 1;
    memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
    v10 = v87;
    *((_QWORD *)v87 + 2) = v91 - 1;
    v9 = v109;
    if (v91 <= 2)
      goto LABEL_88;
  }
LABEL_94:
  v93 = swift_bridgeObjectRelease(v87);
  if (v107 >= -1)
    goto LABEL_109;
  __break(1u);
LABEL_96:
  v10 = (char *)&_swiftEmptyArrayStorage;
  v44 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
LABEL_97:
  if (v44 >= 2)
  {
    v96 = *v102;
    while (1)
    {
      v97 = v44 - 2;
      if (v44 < 2)
        break;
      if (!v96)
        goto LABEL_140;
      v87 = v10;
      v3 = *(_QWORD *)&v10[16 * v97 + 32];
      v98 = *(_QWORD *)&v10[16 * v44 + 24];
      sub_100008F3C((char *)(v96 + 8 * v3), (char *)(v96 + 8 * *(_QWORD *)&v10[16 * v44 + 16]), v96 + 8 * v98, v108);
      if (v1)
        goto LABEL_94;
      if (v98 < v3)
        goto LABEL_127;
      if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0)
        v87 = sub_10000927C((uint64_t)v87);
      if (v97 >= *((_QWORD *)v87 + 2))
        goto LABEL_128;
      v99 = (Swift::Int *)&v87[16 * v97 + 32];
      *v99 = v3;
      v99[1] = v98;
      v100 = *((_QWORD *)v87 + 2);
      if (v44 > v100)
        goto LABEL_129;
      memmove(&v87[16 * v44 + 16], &v87[16 * v44 + 32], 16 * (v100 - v44));
      v10 = v87;
      *((_QWORD *)v87 + 2) = v100 - 1;
      v44 = v100 - 1;
      v3 = v107;
      if (v100 <= 2)
        goto LABEL_108;
    }
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
LABEL_108:
  v93 = swift_bridgeObjectRelease(v10);
  if (v3 >= -1)
  {
LABEL_109:
    v110[2] = 0;
    specialized Array._endMutation()(v93, v94, v95);
    swift_bridgeObjectRelease(v110);
    return;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
}

void sub_100008E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t IntegerValue;
  uint64_t v14;
  void *v15;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v7 = *(void **)(v5 + 8 * v4);
      v8 = a1;
      v9 = v6;
      do
      {
        v10 = *(void **)v9;
        v11 = v7;
        v12 = v10;
        IntegerValue = IOHIDEventGetIntegerValue(v11, 720901);
        v14 = IOHIDEventGetIntegerValue(v12, 720901);

        if (IntegerValue >= v14)
          break;
        if (!v5)
        {
          __break(1u);
          return;
        }
        v15 = *(void **)v9;
        v7 = *(void **)(v9 + 8);
        *(_QWORD *)v9 = v7;
        *(_QWORD *)(v9 + 8) = v15;
        v9 -= 8;
        ++v8;
      }
      while (v4 != v8);
      ++v4;
      v6 += 8;
      if (v4 != a2)
        continue;
      break;
    }
  }
}

uint64_t sub_100008F3C(char *a1, char *a2, unint64_t a3, char *a4)
{
  id *v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;
  BOOL v22;
  id *v25;
  id *v26;
  id *v27;
  void *v28;
  unint64_t v29;
  id v30;
  id v31;
  uint64_t IntegerValue;
  uint64_t v33;
  BOOL v34;
  char *v35;
  BOOL v36;
  char *v39;
  id *v40;
  unint64_t v41;
  id *v42;

  v6 = (id *)a2;
  v7 = (id *)a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    sub_10000AF6C(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v39 = a4;
    v12 = &a4[8 * v11];
    if (v7 >= v6 || v10 < 8)
    {
LABEL_39:
      v14 = v39;
      goto LABEL_40;
    }
    v25 = (id *)(a3 - 8);
    while (1)
    {
      v42 = v6;
      v40 = v25 + 1;
      v26 = (id *)(v12 - 8);
      v27 = v6 - 1;
      v28 = *(v6 - 1);
      v29 = (unint64_t)v12;
      v30 = *((id *)v12 - 1);
      v31 = v28;
      IntegerValue = IOHIDEventGetIntegerValue(v30, 720901);
      v33 = IOHIDEventGetIntegerValue(v31, 720901);

      if (IntegerValue >= v33)
      {
        v35 = v39;
        v36 = v40 != (id *)v29 || (unint64_t)v25 >= v29;
        v27 = v26;
        v12 = (char *)v26;
        v6 = v42;
        if (!v36)
          goto LABEL_35;
      }
      else
      {
        v34 = v40 != v42 || v25 >= v42;
        v35 = v39;
        v12 = (char *)v29;
        v6 = v27;
        if (!v34)
          goto LABEL_35;
      }
      *v25 = *v27;
LABEL_35:
      --v25;
      if (v6 <= v7 || v12 <= v35)
        goto LABEL_39;
    }
  }
  sub_10000AF6C(a1, (a2 - a1) / 8, a4);
  v12 = &a4[8 * v9];
  v13 = (unint64_t)v6 >= a3 || v8 < 8;
  v14 = a4;
  if (!v13)
  {
    v41 = a3;
    do
    {
      v15 = (unint64_t)v12;
      v16 = *(void **)v14;
      v17 = *v6;
      v18 = v16;
      v19 = IOHIDEventGetIntegerValue(v17, 720901);
      v20 = IOHIDEventGetIntegerValue(v18, 720901);

      if (v19 >= v20)
      {
        v21 = (id *)v14;
        v22 = v7 == (id *)v14;
        v14 += 8;
      }
      else
      {
        v21 = v6;
        v22 = v7 == v6++;
      }
      v12 = (char *)v15;
      if (!v22)
        *v7 = *v21;
      ++v7;
    }
    while ((unint64_t)v14 < v15 && (unint64_t)v6 < v41);
  }
  v6 = v7;
LABEL_40:
  sub_10000AF6C(v14, (v12 - v14) / 8, (char *)v6);
  return 1;
}

char *sub_100009188(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_100077988);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || &v14[16 * v8] <= v13)
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10000927C(uint64_t a1)
{
  return sub_100009188(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100009290(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

unint64_t sub_1000092A8()
{
  unint64_t result;

  result = qword_100077990;
  if (!qword_100077990)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_100077990);
  }
  return result;
}

unint64_t sub_1000092E4()
{
  unint64_t result;

  result = qword_100077998;
  if (!qword_100077998)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_100077998);
  }
  return result;
}

uint64_t sub_100009320(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100009364(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000093B8(uint64_t a1)
{
  return swift_release(a1);
}

uint64_t sub_1000093C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_release(*(_QWORD *)(v1 + a1));
}

uint64_t sub_100009408()
{
  return type metadata accessor for Logger(0);
}

void *sub_100009410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = a1;
  *(_QWORD *)(v2 - 120) = v1;
  return _Block_copy((const void *)(v2 - 144));
}

void type metadata accessor for DisplaySettings()
{
  sub_10000C664();
}

id sub_100009428()
{
  id v0;
  id result;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  result = sub_10000A9A8(0xD000000000000019, 0x80000001000559F0);
  if (result)
  {
    qword_10007C888 = (uint64_t)VideoStream.qosMonitorServerDidDie(_:);
    unk_10007C890 = 0;
    qword_10007C898 = (uint64_t)result;
    unk_10007C8A0 = &_swiftEmptyDictionarySingleton;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100009494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  if (*(_QWORD *)(a4 + 16))
  {
    v5 = sub_100035B4C(0);
    if ((v6 & 1) != 0)
    {
      sub_10000C598(*(_QWORD *)(a4 + 56) + 32 * v5, v6, v7, v8, v9, v10, v11, v12, v15);
      sub_10000B900(&v16, &v17);
      sub_10000C650();
      __asm { BR              X8 }
    }
  }
  sub_10000C554();
  __asm { BR              X8 }
}

_UNKNOWN **sub_100009BA8()
{
  return &off_1000696D8;
}

uint64_t sub_100009BB4()
{
  uint64_t v0;
  unsigned __int8 v1;

  v0 = sub_10000C554();
  return ((uint64_t (*)(uint64_t))((char *)sub_100009BE8 + 4 * byte_1000586E0[v1]))(v0);
}

uint64_t sub_100009BE8()
{
  return 0x617274694278614DLL;
}

uint64_t sub_100009C10()
{
  return sub_10000C4F0();
}

uint64_t sub_100009C2C()
{
  return sub_10000C328();
}

uint64_t sub_100009C5C()
{
  return sub_10000C568();
}

uint64_t sub_100009C7C()
{
  return sub_10000C4C4();
}

unint64_t sub_100009C90()
{
  return 0xD000000000000010;
}

uint64_t sub_100009D5C()
{
  return 0x5772616265646973;
}

unint64_t sub_100009D7C()
{
  return 0xD000000000000011;
}

uint64_t sub_100009DA4()
{
  return sub_10000C518();
}

void sub_100009DC4(uint64_t a1, uint64_t a2)
{
  _OWORD v3[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10000B900((_OWORD *)a1, v3);
    sub_10000B5F4(v3, a2);
  }
  else
  {
    sub_10000BCD0(a1);
    sub_10000B2A8(a2, v3);
    sub_10000BCD0((uint64_t)v3);
  }
}

void sub_100009E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10000B900((_OWORD *)a1, v13);
    sub_10000B660(v13, a2, a3);
    sub_100005DD0();
  }
  else
  {
    sub_10000BCD0(a1);
    sub_10000B3B4(v13);
    v5 = sub_100005DD0();
    sub_10000C4E8(v5, v6, v7, v8, v9, v10, v11, v12, *(uint64_t *)&v13[0]);
  }
  sub_10000C57C();
}

uint64_t sub_100009E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_10000B900((_OWORD *)a1, v12);
    sub_10000B6DC(v12, a2);
    return sub_10000BE94(a2);
  }
  else
  {
    sub_10000BCD0(a1);
    sub_10000B4D8(v12);
    v4 = sub_10000BE94(a2);
    return sub_10000C4E8(v4, v5, v6, v7, v8, v9, v10, v11, *(uint64_t *)&v12[0]);
  }
}

_QWORD *sub_100009EF0(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BOOL8 v24;
  Swift::Int v25;
  unint64_t v26;
  Swift::Bool v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *result;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;

  v2 = 0;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v35 = v7 - 1;
  if (!v6)
    goto LABEL_6;
LABEL_4:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v9 = v8 | (v2 << 6);
LABEL_5:
  v10 = *(_QWORD *)(a1 + 56);
  v11 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9);
  v12 = v11[1];
  *(_QWORD *)&v40 = *v11;
  *((_QWORD *)&v40 + 1) = v12;
  sub_10000B26C(v10 + 32 * v9, (uint64_t)v41);
  swift_bridgeObjectRetain(v12);
  while (1)
  {
    sub_10000B8B8((uint64_t)&v40, (uint64_t)&v42);
    v16 = v43;
    if (!v43)
    {
      swift_release(a1);
      return _swiftEmptyDictionarySingleton;
    }
    v17 = v42;
    sub_10000B900(&v44, &v40);
    v18 = sub_10000A644(v17, v16);
    if (v18 != 19)
    {
      v19 = v18;
      v36 = v7;
      v37 = v3;
      sub_10000B26C((uint64_t)&v40, (uint64_t)v39);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v21 = sub_100035B4C(v19);
      v22 = _swiftEmptyDictionarySingleton[2];
      v38 = v23;
      v24 = (v23 & 1) == 0;
      v25 = v22 + v24;
      if (__OFADD__(v22, v24))
        goto LABEL_39;
      v26 = v21;
      sub_100008414(&qword_1000779A8);
      v27 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v25);
      v7 = v36;
      v3 = v37;
      if (v27)
      {
        v28 = sub_100035B4C(v19);
        if ((v38 & 1) != (v29 & 1))
          goto LABEL_42;
        v26 = v28;
      }
      if ((v38 & 1) != 0)
      {
        v30 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v26);
        sub_10000B910(v30);
        sub_10000B900(v39, v30);
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v26 >> 6) + 8] |= 1 << v26;
        *(_BYTE *)(_swiftEmptyDictionarySingleton[6] + v26) = v19;
        sub_10000B900(v39, (_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v26));
        v31 = _swiftEmptyDictionarySingleton[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_40;
        _swiftEmptyDictionarySingleton[2] = v33;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    sub_10000B910(&v40);
    if (v6)
      goto LABEL_4;
LABEL_6:
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
      break;
    if (v13 < v7)
    {
      v14 = *(_QWORD *)(v3 + 8 * v13);
      if (v14)
        goto LABEL_9;
      v15 = v2 + 2;
      ++v2;
      if (v13 + 1 < v7)
      {
        v14 = *(_QWORD *)(v3 + 8 * v15);
        if (v14)
          goto LABEL_12;
        v2 = v13 + 1;
        if (v13 + 2 < v7)
        {
          v14 = *(_QWORD *)(v3 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_9;
          }
          v15 = v13 + 3;
          v2 = v13 + 2;
          if (v13 + 3 < v7)
          {
            v14 = *(_QWORD *)(v3 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                v13 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_41;
                if (v13 >= v7)
                {
                  v2 = v35;
                  goto LABEL_23;
                }
                v14 = *(_QWORD *)(v3 + 8 * v13);
                ++v15;
                if (v14)
                  goto LABEL_9;
              }
            }
LABEL_12:
            v13 = v15;
LABEL_9:
            v6 = (v14 - 1) & v14;
            v9 = __clz(__rbit64(v14)) + (v13 << 6);
            v2 = v13;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    v6 = 0;
    memset(v41, 0, sizeof(v41));
    v40 = 0u;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_10006A5E0);
  __break(1u);
  return result;
}

void sub_10000A210()
{
  sub_10000C554();
  __asm { BR              X9 }
}

BOOL sub_10000A43C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_100009BB4();
  String._bridgeToObjectiveC()();
  sub_10000C450();
  v6 = objc_msgSend(a4, "valueForKey:", v4);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    v16 = 0;
  }
  sub_10000C4E8(v7, v8, v9, v10, v11, v12, v13, v14, v16);
  return v6 != 0;
}

uint64_t sub_10000A4D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  char v6;
  id v7;
  uint64_t result;

  v6 = a1;
  if (sub_10000A43C(a1, a2, a3, a4))
  {
    sub_100009BB4();
    String._bridgeToObjectiveC()();
    sub_10000C450();
    v7 = objc_msgSend(a4, "BOOLForKey:", v4);

    return (uint64_t)v7;
  }
  result = sub_1000297E0(v6);
  if (result != 2)
    return result & 1;
  __break(1u);
  return result;
}

char *sub_10000A554(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (char *)_swiftEmptyArrayStorage;
  v2 = (uint64_t *)(swift_bridgeObjectRetain(a1) + 40);
  v3 = (char *)_swiftEmptyArrayStorage;
  do
  {
    v4 = *(v2 - 1);
    v5 = *v2;
    swift_bridgeObjectRetain(*v2);
    v6 = sub_10000A644(v4, v5);
    if (v6 != 19)
    {
      v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = sub_10000C5C0(0, *((_QWORD *)v3 + 2) + 1);
      v9 = *((_QWORD *)v3 + 2);
      v8 = *((_QWORD *)v3 + 3);
      if (v9 >= v8 >> 1)
        v3 = sub_10000C5C0((char *)(v8 > 1), v9 + 1);
      *((_QWORD *)v3 + 2) = v9 + 1;
      v3[v9 + 32] = v7;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  sub_100005DD0();
  return v3;
}

uint64_t sub_10000A644(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100069710, a1, a2, &unk_1000775B8);
  sub_100005DD0();
  if (v2 >= 0x13)
    return 19;
  else
    return v2;
}

void sub_10000A690()
{
  sub_100010258();
}

Swift::Int sub_10000A69C()
{
  return sub_10000A6A4();
}

Swift::Int sub_10000A6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, 0);
  v0 = sub_100009BB4();
  v2 = v1;
  String.hash(into:)(v4, v0, v1);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

Swift::Int sub_10000A704(Swift::UInt a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

double sub_10000A748(uint64_t a1)
{
  return sub_10001F498(a1);
}

void sub_10000A750(uint64_t a1)
{
  sub_100029850(a1);
}

uint64_t sub_10000A758@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10000A644(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10000A784@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100009BB4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_10000A7AC(_QWORD *a1@<X8>)
{
  *a1 = &off_1000696D8;
}

uint64_t sub_10000A7BC(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v10[33];

  if (*(_QWORD *)(a2 + 16))
  {
    v3 = sub_10000C43C();
    if ((v4 & 1) != 0)
    {
      sub_10000C4D8(v3, v4, v5);
      if (sub_10000C58C((uint64_t)v10, v6, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool, v7, v8))return v10[0];
    }
  }
  result = sub_1000297E0(a1);
  if (result != 2)
    return result & 1;
  __break(1u);
  return result;
}

void sub_10000A838(int a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void *v14;

  v4 = sub_1000297E0(a2);
  if (v4 == 2 || ((((v4 & 1) == 0) ^ a1) & 1) == 0)
  {
    v14 = &type metadata for Bool;
    LOBYTE(v13) = a1 & 1;
    sub_100009DC4((uint64_t)&v13, a2);
  }
  else
  {
    sub_10000B2A8(a2, &v13);
    sub_10000C4E8(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  }
  sub_10000C57C();
}

uint64_t sub_10000A8B4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  _QWORD v11[5];

  if (!*(_QWORD *)(a2 + 16)
    || (v3 = sub_10000C43C(), (v4 & 1) == 0)
    || (sub_10000C4D8(v3, v4, v5),
        result = sub_10000C58C((uint64_t)v11, v6, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for CGFloat, v7, v8), !(_DWORD)result))
  {
    result = sub_1000297F4(a1);
    if ((v10 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_10000A928(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v8[3];
  uint64_t v9;

  if (*(_QWORD *)(a2 + 16) && (v4 = sub_10000C43C(), (v5 & 1) != 0))
  {
    sub_10000B26C(*(_QWORD *)(v2 + 56) + 32 * v4, (uint64_t)v8);
    v6 = v9;
    v7 = sub_10000BE70(v8, v9);
    _bridgeAnythingToObjectiveC<A>(_:)(v7, v6);
    sub_10000B910(v8);
  }
  else
  {
    sub_100029714(a1);
  }
}

id sub_10000A9A8(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend(v2, "initWithSuiteName:", v4);

  return v5;
}

char *sub_10000AA08(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_1000779B8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10000AFC0((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_10000AC98(0, v8, v13, a4);
  }
  return v11;
}

void sub_10000AAE8(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_1000779D0);
    v11 = (char *)sub_10000C5A0(v10, 32 * v9);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 32);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    sub_10000B020((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    sub_100005DD0();
  }
  else
  {
    sub_10000AD84(0, v8, (unint64_t)v13, a4);
  }
  sub_10000C644();
}

void sub_10000ABC0(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414((uint64_t *)&unk_1000779F0);
    v11 = (char *)sub_10000C5A0(v10, 16 * v9);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((a1 & 1) != 0)
  {
    sub_10000B0A4((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    sub_100005DD0();
  }
  else
  {
    sub_10000AE78(0, v8, (unint64_t)v13, a4);
  }
  sub_10000C644();
}

char *sub_10000AC98(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + a1 + 32);
  v7 = &__dst[v4];
  if (v6 >= &__dst[v4] || &v6[v4] <= __dst)
  {
    memcpy(__dst, v6, v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000AD84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 32 * a1 + 32;
  v7 = a3 + 32 * v4;
  if (v6 >= v7 || v6 + 32 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000AE78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  v7 = a3 + 16 * v4;
  if (v6 >= v7 || v6 + 16 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10000AF6C(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10000C2B8();
    result = (char *)sub_10000C2CC((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10000C2F0(a3, a2, result);
  }
  return result;
}

char *sub_10000AFC0(char *__src, size_t __len, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((__len & 0x8000000000000000) != 0)
  {
    sub_10000C2B8();
    __src = (char *)sub_10000C2CC((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *sub_10000B020(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_10000B0A4(char *__src, uint64_t a2, char *__dst)
{
  char v4;

  if (a2 < 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

void *sub_10000B128(char *a1, size_t a2, char *a3)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_10000C2B8();
    v7 = "UnsafeMutablePointer.initialize with negative count";
    v8 = 51;
  }
  else
  {
    if (&a3[a2] <= a1 || &a1[a2] <= a3)
      return sub_10000C448(a3, a1, a2);
    sub_10000C2B8();
    v7 = "UnsafeMutablePointer.initialize overlapping range";
    v8 = 49;
  }
  result = (void *)sub_10000C2E4((uint64_t)"Fatal error", 11, 2, (uint64_t)v7, v8, v5, (uint64_t)"Swift/UnsafePointer.swift", v6, v9, v10, v11);
  __break(1u);
  return result;
}

void *sub_10000B1C8(char *a1, uint64_t a2, char *a3)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10000C2B8();
    v7 = "UnsafeMutablePointer.initialize with negative count";
    v8 = 51;
  }
  else
  {
    if (&a3[8 * a2] <= a1 || &a1[8 * a2] <= a3)
      return sub_10000C448(a3, a1, 8 * a2);
    sub_10000C2B8();
    v7 = "UnsafeMutablePointer.initialize overlapping range";
    v8 = 49;
  }
  result = (void *)sub_10000C2E4((uint64_t)"Fatal error", 11, 2, (uint64_t)v7, v8, v5, (uint64_t)"Swift/UnsafePointer.swift", v6, v9, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_10000B26C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

double sub_10000B2A8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100035B4C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    v10 = *v3;
    *v3 = 0x8000000000000000;
    v11 = *(_QWORD *)(v10 + 24);
    sub_100008414(&qword_1000779A8);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v11);
    sub_10000B900((_OWORD *)(*(_QWORD *)(v15 + 56) + 32 * v7), a2);
    v12 = sub_10000BD10();
    _NativeDictionary._delete(at:)(v7, v15, &unk_10006A5E0, (char *)&type metadata for Any + 8, v12);
    v13 = *v3;
    *v3 = v15;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_10000B3B4@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  v5 = sub_100035BB0();
  v7 = v6;
  swift_bridgeObjectRelease(v4);
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13 = *v2;
    v9 = *v2;
    *v2 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    sub_100008414(&qword_1000779C0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v5 + 8));
    sub_10000B900((_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v5), a1);
    _NativeDictionary._delete(at:)(v5, v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v11 = *v2;
    *v2 = v13;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double sub_10000B4D8@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v2 = v1;
  v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  v5 = sub_100035C00();
  v7 = v6;
  swift_bridgeObjectRelease(v4);
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13 = *v2;
    v9 = *v2;
    *v2 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    sub_100008414(&qword_1000779C8);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    sub_10000BE94(*(_QWORD *)(v13 + 48) + 40 * v5);
    sub_10000B900((_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v5), a1);
    _NativeDictionary._delete(at:)(v5, v13, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v11 = *v2;
    *v2 = v13;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double sub_10000B5F4(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  double result;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_10000B7B4(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

double sub_10000B660(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  double result;
  uint64_t v10;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  *v3 = 0x8000000000000000;
  sub_10000B930(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v8 = *v3;
  *v3 = v10;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

double sub_10000B6DC(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  double result;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_10000BA4C(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

double sub_10000B748(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  double result;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  *v2 = 0x8000000000000000;
  sub_10000BB70(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v8;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

_OWORD *sub_10000B7B4(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100035B4C(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_100008414(&qword_1000779A8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100035B4C(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_10006A5E0);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) == 0)
    return sub_10000BC6C(v14, a2, a1, v18);
  v19 = (_QWORD *)(v18[7] + 32 * v14);
  sub_10000B910(v19);
  return sub_10000B900(a1, v19);
}

uint64_t sub_10000B8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008414(&qword_1000779A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10000B900(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000B910(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_OWORD *sub_10000B930(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _BOOL8 v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *result;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_100035BB0();
  v13 = v10[2];
  v14 = (v12 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v11;
  v17 = v12;
  sub_100008414(&qword_1000779C0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15))
    goto LABEL_5;
  v18 = sub_100035BB0();
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  v16 = v18;
LABEL_5:
  v20 = *v5;
  if ((v17 & 1) != 0)
  {
    v21 = (_QWORD *)(v20[7] + 32 * v16);
    sub_10000B910(v21);
    return sub_10000B900(a1, v21);
  }
  else
  {
    sub_10000BD4C(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain(a3);
  }
}

_OWORD *sub_10000BA4C(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100035C00();
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_100008414(&qword_1000779C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100035C00();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = (_QWORD *)(v18[7] + 32 * v14);
    sub_10000B910(v19);
    return sub_10000B900(a1, v19);
  }
  else
  {
    sub_10000BEC8(a2, (uint64_t)v21);
    return sub_10000BDB4(v14, (uint64_t)v21, a1, v18);
  }
}

void sub_10000BB70(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_100035C78(a2);
  v11 = v8[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_100008414(&qword_1000779B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_100035C78(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for RoundedCornerView.Corner);
    __break(1u);
    return;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];

    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_10000BE2C(v14, a2, a1, v18);
  }
}

_OWORD *sub_10000BC6C(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_10000B900(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_10000BCD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008414((uint64_t *)&unk_100077B70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10000BD10()
{
  unint64_t result;

  result = qword_1000782F0;
  if (!qword_1000782F0)
  {
    result = swift_getWitnessTable(&unk_100058804, &unk_10006A5E0);
    atomic_store(result, (unint64_t *)&qword_1000782F0);
  }
  return result;
}

_OWORD *sub_10000BD4C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10000B900(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_10000BDB4(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10000B900(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_10000BE2C(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

_QWORD *sub_10000BE70(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000BE94(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10000BEC8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10000BF04(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_10000BF34(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = (void *)a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  swift_retain(v3);
  v6 = v5;
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_10000BF7C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a2[2];
  v7 = (void *)a1[2];
  a1[2] = v6;
  v8 = v6;

  v9 = a2[3];
  v10 = a1[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_10000BFEC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);

  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for VideoConfig(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VideoConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for DisplayPrefs()
{
  sub_10000C664();
}

_BYTE *initializeBufferWithCopyOfBuffer for DisplayModalAlert.Reason(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10000C0D0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEE)
  {
    if (a2 + 18 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 18) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 19;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v5 = v6 - 19;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10000C158(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_10000C1A4 + 4 * byte_10005870B[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_10000C1D8 + 4 * byte_100058706[v4]))();
}

uint64_t sub_10000C1D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C1E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000C1E8);
  return result;
}

uint64_t sub_10000C1F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000C1FCLL);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_10000C200(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C208(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C214(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000C21C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void type metadata accessor for DisplayPrefs.Key()
{
  sub_10000C664();
}

unint64_t sub_10000C234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000779D8;
  if (!qword_1000779D8)
  {
    v1 = sub_100008478(&qword_1000779E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000779D8);
  }
  return result;
}

unint64_t sub_10000C27C()
{
  unint64_t result;

  result = qword_1000779E8;
  if (!qword_1000779E8)
  {
    result = swift_getWitnessTable(&unk_1000587CC, &unk_10006A5E0);
    atomic_store(result, (unint64_t *)&qword_1000779E8);
  }
  return result;
}

uint64_t sub_10000C2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11, 2, a4, 55, 2, a7, 25, a9, a10, a11);
}

uint64_t sub_10000C2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 25, a9, a10, a11);
}

void *sub_10000C2F0@<X0>(void *__dst@<X2>, uint64_t a2@<X1>, const void *a3@<X8>)
{
  return memmove(__dst, a3, 8 * a2);
}

uint64_t sub_10000C328()
{
  return 0x7261426863756F74;
}

uint64_t sub_10000C35C()
{
  return 0x6572507465736572;
}

uint64_t sub_10000C39C()
{
  return 0x616265646973;
}

unint64_t sub_10000C3B0()
{
  return sub_100035BB0();
}

uint64_t sub_10000C43C()
{
  uint64_t v0;

  return sub_100035B4C(v0);
}

void *sub_10000C448(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t sub_10000C450()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

BOOL sub_10000C45C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  Swift::Int v16;
  Swift::Bool v17;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v17, v16);
}

uint64_t sub_10000C4C4()
{
  return 0x73746E65636572;
}

uint64_t sub_10000C4D8(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return sub_10000B26C(*(_QWORD *)(v3 + 56) + 32 * a1, (uint64_t)va);
}

uint64_t sub_10000C4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10000BCD0((uint64_t)&a9);
}

uint64_t sub_10000C4F0()
{
  return 0x63756F54776F6873;
}

uint64_t sub_10000C504()
{
  return 0x72754373776F6873;
}

uint64_t sub_10000C518()
{
  return 0x654B656C62616E65;
}

unint64_t sub_10000C52C()
{
  return sub_100035BB0();
}

uint64_t sub_10000C554()
{
  return 0x6E6574614C776F4CLL;
}

uint64_t sub_10000C568()
{
  return 0x5472616365646953;
}

uint64_t sub_10000C58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return swift_dynamicCast(a1, va, a3, a4, 6);
}

uint64_t sub_10000C598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return sub_10000B26C(a1, (uint64_t)va);
}

uint64_t sub_10000C5A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return swift_allocObject(a1, a2 + 32, 7);
}

uint64_t sub_10000C5AC(unsigned int a1)
{
  return a1 | 0x6172746900000000;
}

char *sub_10000C5C0(char *a1, int64_t a2)
{
  uint64_t v2;

  return sub_10000AA08(a1, a2, 1, v2);
}

uint64_t sub_10000C66C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

id sub_10000C698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  v5 = sub_100021638();
  if (!v6)
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  sub_10000F4F4(v5, v6, v4, (SEL *)&selRef_setInterfaceName_);
  v7 = sub_1000216F0();
  if (!v8)
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  sub_10000F4F4(v7, v8, v4, (SEL *)&selRef_setIp_);
  objc_msgSend(v4, "setPort:", (unsigned __int16)sub_100021768());
  objc_msgSend(v4, "setIsIPv6:", *(unsigned __int8 *)(a1 + 1) == 30);

  return v4;
}

void sub_10000C760(void *a1, double a2)
{
  id v3;
  double v4;
  id v5;

  v3 = objc_msgSend(a1, "video");
  if (!v3)
    goto LABEL_9;
  v4 = ceil(a2);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0)
  {
    if (v4 > -9.22337204e18)
    {
      if (v4 < 9.22337204e18)
      {
        v5 = v3;
        objc_msgSend(v3, "setKeyFrameInterval:", (uint64_t)v4);

        return;
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  __break(1u);
}

void sub_10000C7F8(void *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;

  v2 = objc_msgSend(a1, "video");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "txMinBitrate");

    v4 = objc_msgSend(a1, "video");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "txMaxBitrate");

      sub_10000C644();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10000C884(uint64_t a1, uint64_t a2, id a3)
{
  id result;
  id v7;
  id v8;
  id v9;
  id v10;

  result = objc_msgSend(a3, "video");
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v7 = result;
  objc_msgSend(result, "setRxMinBitrate:", a1);

  result = sub_10000F66C();
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v8 = result;
  objc_msgSend(result, "setRxMaxBitrate:", a2);

  result = sub_10000F66C();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v9 = result;
  objc_msgSend(result, "setTxMinBitrate:", a1);

  result = sub_10000F66C();
  if (result)
  {
    v10 = result;
    objc_msgSend(result, "setTxMaxBitrate:", a2);

    return objc_msgSend(a3, "setRtcpSendInterval:", 1.0);
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t VideoStream.session.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session;
  sub_10000F664(v0 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session, (uint64_t)v3, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

void VideoStream.session.setter(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];

  v3 = v1 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session;
  sub_10000F664(v3, (uint64_t)v4, 1);
  swift_unknownObjectWeakAssign(v3, a1);

}

void VideoStream.session.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  sub_10000F664(v1 + v4, (uint64_t)v3, 33);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  sub_10000C644();
}

void sub_10000CA7C(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[5] + (_QWORD)(*a1)[4], v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);

  }
  free(v3);
}

void sub_10000CAE4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_qosMonitor);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_qosMonitor) = a1;

}

char *sub_10000CAF8(char *a1, char *a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  id v15;
  char *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  id v25;
  id v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *result;
  int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  objc_class *v40;
  char *v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  id v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  objc_super v57;
  char v58[24];

  v5 = v3;
  v9 = &v5[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session];
  swift_unknownObjectWeakInit(&v5[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session], 0);
  v5[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_started] = 0;
  v47 = OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_qosMonitor;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_qosMonitor] = 0;
  v10 = &a1[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_logger];
  v11 = &v5[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_logger];
  v12 = type metadata accessor for Logger(0);
  v45 = *(_QWORD *)(v12 - 8);
  v46 = v11;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v11, v10, v12);
  swift_beginAccess(v9, v58, 1, 0);
  swift_unknownObjectWeakAssign(v9, a1);
  v44 = OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_stream;
  *(_QWORD *)&v5[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_stream] = a2;
  v13 = v5;
  v14 = a2;
  v15 = objc_msgSend(v14, "type");
  if (v15 != (id)1)
  {
    if (v15 != (id)3)
    {
      v28 = sub_10000F6C4();
      a2 = (char *)sub_10000F6CC(v28, (unint64_t *)&qword_100077C80, NSError_ptr);
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      v31 = sub_100018044(v29, v30, -1001, 0, 0, 0);
      swift_willThrow(v31);
      goto LABEL_8;
    }
    v16 = (char *)v13 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_socket;
    *(_DWORD *)v16 = 0;
    v16[4] = 1;
    v48 = objc_msgSend(v14, "nwClientID");
    v49 = v17;
    v50 = v18;
    v51 = v19;
    v52 = v20;
    v53 = v21;
    v54 = v22;
    v55 = v23;
    v56 = v24;
    a2 = (char *)objc_allocWithZone((Class)AVCVideoStream);
    swift_bridgeObjectRetain(a3);
    v25 = sub_10000E978((uint64_t)&v48, a3);
    if (!v4)
    {
      v26 = v25;
      sub_10000F6C4();
LABEL_12:
      *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_videoStream) = v26;

      v40 = (objc_class *)type metadata accessor for VideoStream(0);
      v57.receiver = v13;
      v57.super_class = v40;
      v41 = (char *)objc_msgSendSuper2(&v57, "init");
      v42 = *(void **)&v41[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_videoStream];
      a2 = v41;
      objc_msgSend(v42, "setDelegate:", a2);

      return a2;
    }
LABEL_6:
    sub_10000F6C4();
LABEL_8:

    swift_unknownObjectWeakDestroy(v9, v32);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v12);

    v33 = *(void **)&v5[v47];
    v34 = type metadata accessor for VideoStream(0);
    swift_deallocPartialClassInstance(v13, v34, *(unsigned int *)((swift_isaMask & *v13) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v13) + 0x34));
    return a2;
  }
  v27 = sub_1000217E8((unint64_t)objc_msgSend(v14, "fileDescriptor"));
  if (v4)
    goto LABEL_6;
  v36 = v27;
  v43 = a1;
  result = (char *)xpc_dictionary_create(0, 0, 0);
  if (kAVCKeySharedSocket)
  {
    v37 = result;
    xpc_dictionary_set_fd(result, kAVCKeySharedSocket, v36);
    v38 = (char *)v13 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_socket;
    *(_DWORD *)v38 = v36;
    v38[4] = 0;
    objc_allocWithZone((Class)AVCVideoStream);
    v39 = swift_unknownObjectRetain(v37);
    v26 = sub_10000EA7C(v39, a3);
    swift_unknownObjectRelease(v37);
    a1 = v43;
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

id VideoStream.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  sub_10000D69C();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VideoStream(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10000D004(void *a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unsigned int v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  id v105;
  void *v106;
  unsigned int v107;
  id v108;
  id v109;
  id v110;
  void *v111;
  id v112;
  id v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  id v117;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  os_log_t logc;
  os_log_t logd;
  os_log_t loge;
  os_log_t logf;
  os_log_t logg;
  os_log_t logh;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  os_log_type_t type;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  _BYTE v154[128];
  _BYTE v155[128];
  id v156;

  v3 = v1;
  v4 = *(unsigned int *)&v1[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_socket];
  v5 = v1[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_socket + 4];
  v6 = a1;
  if ((v5 & 1) == 0)
  {
    v104 = sub_10002184C(v4, v154);
    if (v2)
    {

      return;
    }
    sub_10000F6CC((uint64_t)v104, &qword_100077B58, AVCNetworkAddress_ptr);
    v105 = sub_10000C698((uint64_t)v154);
    objc_msgSend(v6, "setLocalAddress:", v105);

    sub_1000218A0(v4, v155);
    v117 = sub_10000C698((uint64_t)v155);
    objc_msgSend(v6, "setRemoteAddress:", v117);

  }
  if (objc_msgSend(v6, "video"))
  {
    v7 = v6;
    sub_10000F6B4();
    v8 = v6;
    sub_10000F6B4();
    v9 = v6;
    v10 = sub_10000F6B4();
    v11 = v3;
    v12 = v6;
    v13 = v10;
    v14 = (char *)v11;
    variable initialization expression of Clock.heartbeat();
    variable initialization expression of Clock.heartbeat();
    v15 = v13;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    v18 = v17;
    v19 = &unk_100077000;
    if (os_log_type_enabled(v16, v17))
    {
      HIDWORD(v127) = v18;
      v20 = swift_slowAlloc(120, -1);
      v136 = (void *)swift_slowAlloc(32, -1);
      v156 = v136;
      *(_DWORD *)v20 = 136318210;
      v21 = sub_10000DAA0(*(void **)&v14[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_videoStream]);
      v23 = v22;
      v153 = sub_10000EC54(v21, v22, (uint64_t *)&v156);
      v24 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v20 + 4);
      sub_10000F6BC(v24, v25, v26, v27, v28, v29, v30, v31, (uint64_t)log, v127, (uint64_t)v136, v14);
      sub_10000F6BC(v32, v33, v34, v35, v36, v37, v38, v39, (uint64_t)loga, v128, v137, v145);
      *(_QWORD *)&v40 = swift_bridgeObjectRelease(v23).n128_u64[0];
      *(_WORD *)(v20 + 12) = 1024;
      v41 = objc_msgSend(v12, "remoteSSRC", v40);

      LODWORD(v153) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, (char *)&v153 + 4, v20 + 14);

      *(_WORD *)(v20 + 18) = 2048;
      logb = v16;
      v43 = sub_10000F648(v42, "txCodecType");

      v153 = (uint64_t)v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v20 + 20);

      *(_WORD *)(v20 + 28) = 2048;
      v44 = objc_msgSend(v12, "txPayloadType");

      sub_10000F5F0(v45, v46, v47, v20 + 38, v48, v49, v50, v51, (uint64_t)logb, v129, v138, v146, v153);
      *(_WORD *)(v20 + 38) = 2048;
      sub_10000F648(v52, "keyFrameInterval");
      sub_10000F65C();
      sub_10000F5F0(v53, v54, v55, v20 + 48, v56, v57, v58, v59, (uint64_t)logc, v130, v139, v147, v153);

      *(_WORD *)(v20 + 48) = 1024;
      LODWORD(v43) = objc_msgSend(v12, "isRTCPEnabled");

      LODWORD(v153) = (_DWORD)v43;
      sub_10000F6DC(v60, v61, v20 + 50, v20 + 54, v62, v63, v64);

      *(_WORD *)(v20 + 54) = 1040;
      LODWORD(v153) = 0;
      sub_10000F6DC(v65, v66, v20 + 56, v20 + 60, v67, v68, v69);
      *(_WORD *)(v20 + 60) = 2048;
      objc_msgSend(v12, "rtcpTimeOutInterval");
      v153 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v20 + 62);

      *(_WORD *)(v20 + 70) = 2048;
      sub_10000F648(v71, "tilesPerFrame");
      sub_10000F65C();
      sub_10000F5F0(v72, v73, v74, v20 + 80, v75, v76, v77, v78, (uint64_t)logd, v131, v140, v148, v153);

      *(_WORD *)(v20 + 80) = 2048;
      sub_10000F648(v79, "txMinBitrate");
      sub_10000F65C();
      sub_10000F5F0(v80, v81, v82, v20 + 90, v83, v84, v85, v86, (uint64_t)loge, v132, v141, v149, v153);

      *(_WORD *)(v20 + 90) = 2048;
      sub_10000F648(v87, "txMaxBitrate");
      sub_10000F65C();
      sub_10000F5F0(v88, v89, v90, v20 + 100, v91, v92, v93, v94, (uint64_t)logf, v133, v142, v150, v153);

      *(_WORD *)(v20 + 100) = 2048;
      sub_10000F648(v95, "customWidth");
      sub_10000F65C();
      sub_10000F5F0(v96, v97, v98, v20 + 110, v99, v100, v101, v102, (uint64_t)logg, v134, v143, v151, v153);

      *(_WORD *)(v20 + 110) = 2048;
      v14 = v152;
      sub_10000F648(v103, "customHeight");
      sub_10000F65C();
      v153 = (uint64_t)v44;
      v19 = (_QWORD *)&unk_100077000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v20 + 112);

      _os_log_impl((void *)&_mh_execute_header, logh, type, "%s config: ssrc=%u, codec=%ld, payload=%ld, key=%ld, rtcp=%{BOOL}d, rtcpTimeout=%.*f, tiles=%ld, tx=%ld:%ld, res=%ld:%ld", (uint8_t *)v20, 0x78u);
      swift_arrayDestroy(v144, 1);
      sub_10000F604(v144);
      sub_10000F604(v20);

    }
    else
    {

    }
    v106 = *(void **)&v14[v19[325]];
    v156 = 0;
    v107 = objc_msgSend(v106, "configure:error:", v12, &v156);
    v108 = v156;
    if (v107)
    {
      v109 = v156;
      objc_msgSend(v106, "start");
      v110 = objc_msgSend(v106, "streamToken");
      sub_10000F6CC((uint64_t)v110, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
      v111 = (void *)static OS_dispatch_queue.main.getter();
      v112 = objc_allocWithZone((Class)AVCQoSMonitor);
      v113 = sub_10000EB8C((uint64_t)v110, v111);
      if (v2)
      {
        swift_errorRelease(v2);
        v114 = 0;
      }
      else
      {
        v114 = (uint64_t)v113;
        if (v113)
          objc_msgSend(v113, "setDelegate:", v14);
      }
      sub_10000CAE4(v114);

      v14[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_started] = 1;
    }
    else
    {
      v115 = v156;
      _convertNSErrorToError(_:)(v108);

      swift_willThrow(v116);
    }
  }
  else
  {
    __break(1u);
  }
}

id sub_10000D69C()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  v1 = OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_started;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_started) == 1)
  {
    result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_videoStream), "stop");
    *(_BYTE *)(v0 + v1) = 0;
  }
  return result;
}

uint64_t type metadata accessor for VideoStream(uint64_t a1)
{
  uint64_t result;

  result = qword_100077AD8;
  if (!qword_100077AD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VideoStream);
  return result;
}

uint64_t VideoStream.qosMonitor(_:didReceiveReport:streamToken:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;
  _BYTE v33[24];
  _BYTE v34[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session;
  sub_10000F664(v14, (uint64_t)v34, 0);
  result = swift_unknownObjectWeakLoadStrong(v14);
  if (result)
  {
    v16 = (void *)result;
    v17 = (void **)(result + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue);
    sub_10000F664(result + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue, (uint64_t)v33, 0);
    v18 = *v17;
    v19 = swift_allocObject(&unk_10006A848, 32, 7);
    *(_QWORD *)(v19 + 16) = v16;
    *(_QWORD *)(v19 + 24) = a2;
    aBlock[4] = sub_10000E8D4;
    v32 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000C66C;
    aBlock[3] = &unk_10006A860;
    v20 = _Block_copy(aBlock);
    v21 = v18;
    v29 = v9;
    v22 = v5;
    v23 = v21;
    v24 = v16;
    v25 = swift_bridgeObjectRetain(a2);
    static DispatchQoS.unspecified.getter(v25);
    v30 = _swiftEmptyArrayStorage;
    v26 = sub_10000E8F4();
    v27 = sub_100008414((uint64_t *)&unk_100077A10);
    v28 = sub_10000E934();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v27, v28, v4, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v29);
    return swift_release(v32);
  }
  return result;
}

uint64_t sub_10000D93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _BYTE v9[24];

  v4 = a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 112))(a1, a2, ObjectType, v7);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

id VideoStream.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void VideoStream.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.VideoStream", 29, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10000DAA0(void *a1)
{
  unint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v7 = 1531139649;
  v8 = 0xE400000000000000;
  v6 = objc_msgSend(a1, "streamToken");
  v1 = sub_10000F54C();
  v2._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v6, 16, 1, &type metadata for Int, v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v7;
}

void sub_10000DB28(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t Strong;
  void *v31;
  void **v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52[16];
  id v53;
  _QWORD *v54;
  __int128 aBlock;
  uint64_t (*v56)(uint64_t);
  void *v57;
  uint64_t (*v58)();
  uint64_t v59;
  char v60[24];
  _QWORD v61[4];

  v6 = v5;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  __chkstk_darwin(v10, v11);
  v49 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48, v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D69C();
  v16 = sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v19 = v18;
  swift_errorRetain(a1);
  v45 = a5;
  LOBYTE(v44) = a4;
  v53 = sub_100018044(v17, v19, -401, 0, 0, a1);
  v20 = v53;
  sub_100028F80((uint64_t (*)(void))sub_10000DF34, 0, sub_10000F588, v52);
  v21 = objc_msgSend(v20, "userInfo");
  v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String, v22);

  static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  v25 = v24;
  sub_100010138(v23, &aBlock);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v23);
  if (v57)
  {
    v26 = swift_dynamicCast(v61, &aBlock, (char *)&type metadata for Any + 8, v16, 6);
    if ((v26 & 1) != 0)
    {
      v28 = (void *)v61[0];
      __chkstk_darwin(v26, v27);
      v44 = v28;
      sub_100028F80((uint64_t (*)(void))sub_10000DF50, 0, sub_10000F5EC, &v46 - 4);

    }
  }
  else
  {

    sub_10000BCD0((uint64_t)&aBlock);
  }
  v29 = v6 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session;
  swift_beginAccess(v6 + OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_session, v61, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v29);
  if (Strong)
  {
    v31 = (void *)Strong;
    v32 = (void **)(Strong + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue);
    swift_beginAccess(Strong + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue, v60, 0, 0);
    v33 = *v32;
    v34 = swift_allocObject(&unk_10006A918, 32, 7);
    *(_QWORD *)(v34 + 16) = v31;
    *(_QWORD *)(v34 + 24) = v20;
    v58 = sub_10000F5DC;
    v59 = v34;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v56 = sub_10000C66C;
    v57 = &unk_10006A930;
    v35 = _Block_copy(&aBlock);
    v36 = v20;
    v37 = v33;
    v38 = v31;
    static DispatchQoS.unspecified.getter(v38);
    v54 = _swiftEmptyArrayStorage;
    v39 = sub_10000E8F4();
    v40 = sub_100008414((uint64_t *)&unk_100077A10);
    v41 = sub_10000E934();
    v42 = v49;
    v43 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v40, v41, v51, v39);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v42, v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v48);
    swift_release(v59);
  }
  else
  {

  }
}

unint64_t sub_10000DF34()
{
  return 0xD000000000000012;
}

unint64_t sub_10000DF50()
{
  return 0xD000000000000015;
}

uint64_t sub_10000DF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _BYTE v9[24];

  v4 = a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 104))(a1, a2, ObjectType, v7);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

void VideoStream.stream(_:didStart:error:)()
{
  void *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10000F688();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = v0;
  v9 = v7;
  v10 = v8;
  v11 = v9;
  v12 = Logger.logObject.getter(v11);
  if (v3)
  {
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)sub_10000F640(12);
      v31 = sub_10000F640(32);
      *(_DWORD *)v14 = 136315138;
      v15 = sub_10000F6AC(v11);
      sub_10000F650(v15, v16, v17, v18, v19);
      sub_10000F62C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v21, v14 + 4);

      sub_100005DA4();
      sub_10000F6D4((void *)&_mh_execute_header, v12, v13, "%s Failed", v14);
      sub_10000F6A4(v31);
      sub_10000F604(v31);
      sub_10000F604((uint64_t)v14);
    }
    else
    {

    }
LABEL_10:
    sub_10000DB28(v3, (uint64_t)"ContinuityDisplay/VideoStream.swift", 35, 2, 245);
    goto LABEL_11;
  }
  v22 = static os_log_type_t.default.getter();
  if (sub_10000F678(v22))
  {
    v23 = (uint8_t *)sub_10000F640(12);
    v32 = sub_10000F640(32);
    *(_DWORD *)v23 = 136315138;
    v24 = sub_10000F6AC(v11);
    sub_10000F650(v24, v25, v26, v27, v28);
    sub_10000F62C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v30, v23 + 4);

    sub_100005DA4();
    sub_10000F6D4((void *)&_mh_execute_header, v12, v1, "%s Started", v23);
    sub_10000F6A4(v32);
    sub_10000F604(v32);
    sub_10000F604((uint64_t)v23);
  }
  else
  {

  }
  if ((v5 & 1) == 0)
    goto LABEL_10;
LABEL_11:
  sub_10000F610();
}

void VideoStream.streamDidStop(_:)()
{
  sub_10000E6FC();
}

void VideoStream.streamDidServerDie(_:)()
{
  sub_10000E6FC();
}

void VideoStream.stream(_:didPause:error:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_10000E47C(a1, a2, a3, (int)"%s didPause: %{BOOL}d", 265, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25);
}

#error "10000E3CC: call analysis failed (funcsize=27)"

void VideoStream.stream(_:didResume:error:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_10000E47C(a1, a2, a3, (int)"%s didResume: %{BOOL}d", 273, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25);
}

#error "10000E448: call analysis failed (funcsize=27)"

void VideoStream.stream(_:didUpdateVideoConfiguration:error:)(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_10000E47C(a1, a2, a3, (int)"%s didUpdateVideoConfiguration: %{BOOL}d", 281, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25);
}

void sub_10000E47C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *format, uint64_t a10, int a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *formata;
  uint64_t v53;

  sub_10000F688();
  a24 = v26;
  a25 = v27;
  v53 = v28;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = v25;
  v38 = v36;
  v39 = v37;
  v40 = v38;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = sub_10000F640(18);
    formata = v30;
    v44 = sub_10000F640(32);
    a13 = v44;
    *(_DWORD *)v43 = 136315394;
    v45 = sub_10000DAA0(v40);
    sub_10000F650(v45, v46, v47, v48, v49);
    sub_10000F62C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, v51, v43 + 4);

    sub_100005DA4();
    *(_WORD *)(v43 + 12) = 1024;
    a11 = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v43 + 14);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, formata, (uint8_t *)v43, 0x12u);
    sub_10000F6A4(v44);
    sub_10000F604(v44);
    sub_10000F604(v43);
  }
  else
  {

  }
  if ((v34 & 1) == 0 || v32)
    sub_10000DB28(v32, (uint64_t)"ContinuityDisplay/VideoStream.swift", 35, 2, v53);
  sub_10000F610();
}

#error "10000E654: call analysis failed (funcsize=27)"

void VideoStream.streamDidRTPTimeOut(_:)()
{
  sub_10000E6FC();
}

void VideoStream.streamDidRTCPTimeOut(_:)()
{
  sub_10000E6FC();
}

void sub_10000E6FC()
{
  void *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t (*v6)(void);
  uint64_t (*v7)(void);
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_10000F688();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v0;
  v11 = v9;
  v12 = v10;
  v13 = v11;
  v14 = Logger.logObject.getter(v13);
  v15 = v7();
  if (sub_10000F678(v15))
  {
    v16 = (uint8_t *)sub_10000F640(12);
    v24 = sub_10000F640(32);
    *(_DWORD *)v16 = 136315138;
    v17 = sub_10000F6AC(v13);
    sub_10000F650(v17, v18, v19, v20, v21);
    sub_10000F62C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v22, v23, v16 + 4);

    sub_100005DA4();
    sub_10000F6D4((void *)&_mh_execute_header, v14, v1, v5, v16);
    sub_10000F6A4(v24);
    sub_10000F604(v24);
    sub_10000F604((uint64_t)v16);
  }
  else
  {

  }
  sub_10000DB28(0, (uint64_t)"ContinuityDisplay/VideoStream.swift", 35, 2, v3);
  sub_10000F610();
}

uint64_t sub_10000E8A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000E8D4()
{
  uint64_t v0;

  return sub_10000D93C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10000E8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000E8EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000E8F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100077C90;
  if (!qword_100077C90)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100077C90);
  }
  return result;
}

unint64_t sub_10000E934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100077CA0;
  if (!qword_100077CA0)
  {
    v1 = sub_100008478((uint64_t *)&unk_100077A10);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100077CA0);
  }
  return result;
}

id sub_10000E978(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSDictionary v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v11;

  if (a2)
  {
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v5.super.isa = 0;
  }
  v11 = 0;
  v6 = objc_msgSend(v2, "initWithNWConnectionClientID:options:error:", a1, v5.super.isa, &v11);

  v7 = v11;
  if (v6)
  {
    v8 = v11;
  }
  else
  {
    v9 = v11;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
  }
  return v6;
}

id sub_10000EA7C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  NSDictionary v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v3 = v2;
  if (a2)
  {
    v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6.super.isa = 0;
  }
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithNetworkSockets:options:error:", a1, v6.super.isa, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  swift_unknownObjectRelease(a1);
  return v7;
}

id sub_10000EB8C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  id v6;
  id v7;
  id v8;
  id v10;

  v3 = v2;
  v10 = 0;
  v5 = objc_msgSend(v3, "initWithStreamToken:queue:error:", a1, a2, &v10);
  v6 = v10;
  if (v5)
  {
    v7 = v10;
  }
  else
  {
    v8 = v10;
    _convertNSErrorToError(_:)(v6);

    swift_willThrow();
  }

  return v5;
}

uint64_t sub_10000EC54(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_10000ED24(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000B26C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000B26C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000B910(v12);
  return v7;
}

_QWORD *sub_10000ED24(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_10000EE78((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_10000EF3C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_10000EE78(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10000EF3C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_10000EFD0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10000F140(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_10000F140((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_10000EFD0(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return &_swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_100028080(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 1122, 0);
LABEL_15:
  __break(1u);
  return result;
}

char *sub_10000F140(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_100077B60);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10000F2D8(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10000F214(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_10000F214(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

char *sub_10000F2D8(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

void destroy for VideoConfig(id *a1)
{

}

uint64_t initializeWithCopy for VideoConfig(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for VideoConfig(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for VideoConfig(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for VideoConfig()
{
  return &type metadata for VideoConfig;
}

uint64_t sub_10000F448()
{
  return type metadata accessor for VideoStream(0);
}

uint64_t sub_10000F450(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_1000588B8;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_1000588D0;
    v4[6] = &unk_1000588E8;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10000F4F4(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v7;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, *a4, v7);

}

unint64_t sub_10000F54C()
{
  unint64_t result;

  result = qword_100077B68;
  if (!qword_100077B68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100077B68);
  }
  return result;
}

uint64_t sub_10000F588()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_errorRetain(v1);
  return v1;
}

uint64_t sub_10000F5B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000F5DC()
{
  uint64_t v0;

  return sub_10000DF6C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10000F5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  a13 = v15;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a13, v13, v14);
}

uint64_t sub_10000F604(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_10000F640(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

id sub_10000F648(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10000F650(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return sub_10000EC54(a1, a2, (uint64_t *)va);
}

void sub_10000F65C()
{
  void *v0;

}

uint64_t sub_10000F664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_beginAccess(a1, a2, a3, 0);
}

id sub_10000F66C()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2600));
}

BOOL sub_10000F678(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10000F6A4(uint64_t a1)
{
  return swift_arrayDestroy(a1, 1);
}

uint64_t sub_10000F6AC(void *a1)
{
  return sub_10000DAA0(a1);
}

id sub_10000F6B4()
{
  void *v0;

  return v0;
}

void sub_10000F6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

}

uint64_t sub_10000F6C4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10000F6CC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  return sub_1000085DC(0, a2, a3);
}

void sub_10000F6D4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t sub_10000F6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v7, a3);
}

void sub_10000F6E8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_stack);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_stack) = a1;

}

uint64_t sub_10000F6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_connectionDescription);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_connectionDescription + 8);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

id sub_10000F720(char a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  char *v6;
  objc_super v8;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_stack] = 0;
  v3 = OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_label;
  v4 = objc_allocWithZone((Class)UILabel);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  v6 = &v5[OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_connectionDescription];
  *(_QWORD *)v6 = 63;
  *((_QWORD *)v6 + 1) = 0xE100000000000000;
  v5[OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_compact] = a1;

  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for QOSControllerViewController();
  return objc_msgSendSuper2(&v8, "initWithNibName:bundle:", 0, 0);
}

void sub_10000F7DC()
{
  char *v0;
  uint64_t v1;
  char *v2;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_stack] = 0;
  v1 = OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_label;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v2 = &v0[OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_connectionDescription];
  *(_QWORD *)v2 = 63;
  *((_QWORD *)v2 + 1) = 0xE100000000000000;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100055EC0, "ContinuityDisplay/SidebarQOSView.swift", 38, 2, 30, 0);
  __break(1u);
}

void sub_10000F89C()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v1 = v0;
  sub_10000FEF4();
  v2 = sub_100008414((uint64_t *)&unk_100078650);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100058900;
  v4 = *(void **)&v0[OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_label];
  *(_QWORD *)(v3 + 32) = v4;
  v12 = v3;
  specialized Array._endMutation()(v3, v5, v6);
  v7 = v4;
  v8 = sub_1000192E8(v12);
  objc_msgSend(v8, "setAxis:", 1);
  objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "setView:", v8);
  v9 = v8;
  sub_10000F6E8((uint64_t)v8);
  v10 = objc_msgSend((id)objc_opt_self(UIFont), "monospacedSystemFontOfSize:weight:", 12.0, UIFontWeightThin);
  objc_msgSend(v7, "setFont:", v10);

  objc_msgSend(v7, "setTextAlignment:", 1);
  objc_msgSend(v7, "setNumberOfLines:", 0);
  v11 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  objc_msgSend(v7, "setTextColor:", v11);

}

void sub_10000FA64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD v36[5];

  v3 = sub_10000FC50(AVCQoSReportExpectedFrameCount, a1);
  v4 = sub_10000FC50(AVCQoSReportDisplayedFrameCount, a1);
  v5 = (void *)AVCQoSReportHIDEventLatencyAverage;
  v35[0] = AVCQoSReportHIDEventLatencyAverage;
  type metadata accessor for AVCQoSReportKey(0);
  sub_10000FE78();
  v6 = sub_10000FF30((uint64_t)v5);
  v9 = sub_10000FF44((uint64_t)v6, v7, v8);
  sub_10000FF50(v10, v11, v12);
  if (__OFSUB__(v3, v4))
  {
    __break(1u);
  }
  else
  {
    v13 = (v3 - v4) & ~((v3 - v4) >> 63);
    v14 = sub_10000FF30((uint64_t)AVCQoSReportVideoStallDuration);
    v17 = sub_10000FF44((uint64_t)v14, v15, v16);
    sub_10000FF50(v18, v19, v20);
    v35[0] = 1917211201;
    v35[1] = 0xE400000000000000;
    v21 = AnyHashable.init<A>(_:)(v36, v35, &type metadata for String, &protocol witness table for String);
    v24 = sub_10000FF44((uint64_t)v21, v22, v23);
    sub_10000FF50(v25, v26, v27);
    v28 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_label);
    v29 = sub_100008414((uint64_t *)&unk_100078670);
    v30 = swift_allocObject(v29, 232, 7);
    *(_OWORD *)(v30 + 16) = xmmword_100058910;
    v32 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_connectionDescription);
    v31 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_connectionDescription + 8);
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    *(_QWORD *)(v30 + 64) = sub_10000FEB8();
    *(_QWORD *)(v30 + 32) = v32;
    *(_QWORD *)(v30 + 40) = v31;
    *(_QWORD *)(v30 + 96) = &type metadata for Double;
    *(_QWORD *)(v30 + 104) = &protocol witness table for Double;
    *(double *)(v30 + 72) = v24 / 5.0;
    *(_QWORD *)(v30 + 136) = &type metadata for Double;
    *(_QWORD *)(v30 + 144) = &protocol witness table for Double;
    *(double *)(v30 + 112) = v17 / 5.0;
    *(_QWORD *)(v30 + 176) = &type metadata for Double;
    *(_QWORD *)(v30 + 184) = &protocol witness table for Double;
    *(double *)(v30 + 152) = (double)v13 / 5.0;
    *(_QWORD *)(v30 + 216) = &type metadata for Double;
    *(_QWORD *)(v30 + 224) = &protocol witness table for Double;
    *(double *)(v30 + 192) = v9;
    swift_bridgeObjectRetain(v31);
    v33 = String.init(format:_:)(0xD000000000000032, 0x8000000100055E00, v30);
    sub_100036670(v33, v34, v28);
  }
}

uint64_t sub_10000FC50(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v9;
  _QWORD v10[5];
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)&v11 = a1;
  type metadata accessor for AVCQoSReportKey(0);
  v5 = v4;
  v6 = sub_10000FE78();
  v7 = a1;
  AnyHashable.init<A>(_:)(v10, &v11, v5, v6);
  sub_1000100F0(a2, &v11);
  sub_10000BE94((uint64_t)v10);
  if (v12)
  {
    if (swift_dynamicCast(&v9, &v11, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
      return v9;
  }
  else
  {
    sub_10000BCD0((uint64_t)&v11);
  }
  return 0;
}

double sub_10000FD0C(uint64_t a1, uint64_t a2)
{
  double v2;
  unint64_t v4;
  char v5;
  double v7;
  _BYTE v8[32];

  v2 = 0.0;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = sub_100035C00();
    if ((v5 & 1) != 0)
    {
      sub_10000B26C(*(_QWORD *)(a2 + 56) + 32 * v4, (uint64_t)v8);
      if (swift_dynamicCast(&v7, v8, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
        return v7;
    }
  }
  return v2;
}

void sub_10000FD8C()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.QOSControllerViewController", 45, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_10000FDDC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for QOSControllerViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for QOSControllerViewController()
{
  return objc_opt_self(_TtC17ContinuityDisplay27QOSControllerViewController);
}

unint64_t sub_10000FE78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100077720;
  if (!qword_100077720)
  {
    type metadata accessor for AVCQoSReportKey(255);
    result = swift_getWitnessTable(&unk_10005856C, v1);
    atomic_store(result, (unint64_t *)&qword_100077720);
  }
  return result;
}

unint64_t sub_10000FEB8()
{
  unint64_t result;

  result = qword_100077BC8;
  if (!qword_100077BC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100077BC8);
  }
  return result;
}

unint64_t sub_10000FEF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100077BD0;
  if (!qword_100077BD0)
  {
    v1 = objc_opt_self(UIStackView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100077BD0);
  }
  return result;
}

_QWORD *sub_10000FF30(uint64_t a1, ...)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  return AnyHashable.init<A>(_:)((uint64_t *)va1, (uint64_t *)va, v1, v2);
}

double sub_10000FF44(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  return sub_10000FD0C((uint64_t)va, v3);
}

uint64_t sub_10000FF50(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_10000BE94((uint64_t)va);
}

uint64_t sub_10000FF58(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4;
  id v5;
  uint64_t v6;
  unsigned __int8 v8;
  id v9;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(a3, "objectForKey:", v4);

  v6 = 2;
  if (v5)
  {
    v9 = v5;
    if (swift_dynamicCast(&v8, &v9, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 6))return v8;
    else
      return 2;
  }
  return v6;
}

void sub_100010008(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_10000A928(a2, a1);
  if (v2)
  {
    v4 = v2;
    sub_100018C64((uint64_t)&v3, (uint64_t)&v4, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t)&type metadata for Int);
  }
}

uint64_t sub_100010074(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  unsigned __int8 v5;
  _BYTE v6[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v2 = sub_100035B4C(6);
  if ((v3 & 1) == 0)
    return 0;
  sub_10000B26C(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v6);
  result = swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((_DWORD)result)
    return v5;
  return result;
}

void sub_1000100F0(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_100035C00(), (v5 & 1) != 0))
  {
    sub_100018F04(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    sub_100005D94();
  }
}

void sub_100010138(uint64_t a1@<X2>, _OWORD *a2@<X8>)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_100035BB0(), (v5 & 1) != 0))
  {
    sub_100018F04(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)a2);
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    sub_100005D94();
  }
}

void sub_100010180(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = sub_100035C2C(a1);
    if ((v3 & 1) != 0)
      sub_100019160(v2);
  }
  sub_100005D94();
}

void sub_1000101B8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = sub_100035C78(a1);
    if ((v3 & 1) != 0)
      sub_100019160(v2);
  }
  sub_100005D94();
}

void sub_1000101F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 != v6 || v5 != v7)
    sub_100018D4C(v6, v7);
  sub_100005DD0();
  sub_100005DA4();
  sub_10000C644();
}

BOOL static HostTime.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_100010258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_100009BB4();
  v2 = v1;
  v3 = sub_100009BB4();
  if (v0 != v3 || v2 != v4)
    sub_100018D4C(v3, v4);
  sub_100005DD0();
  sub_100005DA4();
  sub_10000C644();
}

uint64_t SidecarDisplaySession.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, (uint64_t)v3);
  return swift_unknownObjectWeakLoadStrong(v1);
}

void SidecarDisplaySession.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v6[24];

  v5 = v2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  sub_10000F664(v5, (uint64_t)v6, 1);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  swift_unknownObjectRelease(a1);
  sub_10000C57C();
}

void SidecarDisplaySession.delegate.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  sub_10000F664(v1 + v4, (uint64_t)v3, 33);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  sub_10000C644();
}

void sub_1000103B8(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

id SidecarDisplaySession.request.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request);
}

id SidecarDisplaySession.codec.getter()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  char v4;

  result = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config), "codec"));
  if (result)
  {
    v2 = result;
    v3 = 0;
    v4 = 1;
    static Int._conditionallyBridgeFromObjectiveC(_:result:)(result, &v3);

    if (v4)
      return 0;
    else
      return (id)v3;
  }
  return result;
}

void SidecarDisplaySession.peerSupportsHIDReportExtensions.getter()
{
  uint64_t v0;
  _BYTE v1[24];

  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_peerSupportsHIDReportExtensions, (uint64_t)v1);
  sub_100018D38();
}

void sub_1000104E0(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  _BYTE v4[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_peerSupportsHIDReportExtensions);
  sub_10000F664((uint64_t)v3, (uint64_t)v4, 1);
  *v3 = a1;
  sub_100018D38();
}

uint64_t SidecarDisplaySession.copyConfig()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  Class isa;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  Class v17;
  uint64_t v19;
  _BYTE v20[32];

  _bridgeAnyObjectToAny(_:)(objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config), "copy"));
  v1 = sub_100019118();
  sub_100018C20(v1, (unint64_t *)&unk_100077C00, SidecarDisplayConfig_ptr);
  v3 = swift_dynamicCast(&v19, v20, (char *)&type metadata for Any + 8, v2, 7);
  v4 = v19;
  v5 = sub_100018D44(v3, "device");
  sub_100018EF8((uint64_t)v5, "setDevice:");

  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_clock, (uint64_t)v20);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  sub_100018C9C((uint64_t)isa, "setEnableTimeSync:");

  v8 = sub_100018D44(v7, "service");
  v9 = objc_msgSend(v8, "name");

  sub_100018EF8(v10, "setService:");
  v12 = sub_100018D44(v11, "session");
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v12, "transport");

  }
  v14 = sub_100018C9C((uint64_t)v12, "setTransport:");
  v15 = sub_100018D44((uint64_t)v14, "session");
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, "dataLink");

  }
  v17 = Int32._bridgeToObjectiveC()().super.super.isa;
  sub_100018C9C((uint64_t)v17, "setDataLink:");

  return v4;
}

void sub_1000106F8()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  _BYTE v4[24];

  v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config), "showTouchBar"));
  if (!v1
    || (v2 = v1,
        v4[0] = 2,
        static Bool._conditionallyBridgeFromObjectiveC(_:result:)(v1, v4),
        v2,
        v4[0] == 2))
  {
    sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings, (uint64_t)v4);
    v3 = sub_100019104();
    sub_100029518(v3);
    sub_100005DA4();
  }
  sub_100018D38();
}

double SidecarDisplaySession.safeInsets.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_safeInsets;
  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_safeInsets, (uint64_t)v3);
  return *(double *)v1;
}

uint64_t SidecarDisplaySession.safeInsets.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double *v9;
  uint64_t result;
  _BYTE v11[24];

  v9 = (double *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_safeInsets);
  result = sub_10000F664(v4 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_safeInsets, (uint64_t)v11, 1);
  *v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  v9[3] = a4;
  return result;
}

void SidecarDisplaySession.safeInsets.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000F664(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_safeInsets, a1, 33);
  sub_100005D94();
}

id SidecarDisplaySession.resolution.getter()
{
  uint64_t v0;

  return sub_100010898(*(void **)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config));
}

id sub_100010898(void *a1)
{
  double v2;
  double v3;
  id result;
  double v5;
  double v6;
  _BOOL4 v7;
  double v8;
  double v9;
  double v10;

  objc_msgSend(a1, "scale");
  v3 = v2;
  result = objc_msgSend(a1, "size");
  v7 = v5 > 0.0;
  if (v6 <= 0.0)
    v7 = 0;
  if (v3 <= 0.0)
    v7 = 0;
  if (!v7)
    return 0;
  v8 = ceil(v5);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = ceil(v6);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = ceil(v3);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v10 > -9.22337204e18)
  {
    if (v10 < 9.22337204e18)
      return (id)(uint64_t)v8;
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

id SidecarDisplaySession.resolution.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_1000109D8(a1, a2, a3, a4 & 1, *(id *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config));
}

id sub_1000109D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, id a5)
{
  double v8;
  double v9;

  if ((a4 & 1) != 0)
  {
    objc_msgSend(a5, "setScale:", 0.0);
    v8 = 0.0;
    v9 = 0.0;
  }
  else
  {
    objc_msgSend(a5, "setScale:", (double)a3);
    v8 = (double)a1;
    v9 = (double)a2;
  }
  return objc_msgSend(a5, "setSize:", v8, v9);
}

void SidecarDisplaySession.resolution.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config);
  v3[4] = v4;
  *v3 = sub_100010898(v4);
  v3[1] = v5;
  v3[2] = v6;
  *((_BYTE *)v3 + 24) = v7 & 1;
  sub_10000C644();
}

void sub_100010AB4(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_1000109D8(**a1, v1[1], v1[2], *((_BYTE *)v1 + 24), (id)(*a1)[4]);
  free(v1);
}

id SidecarDisplaySession.queue.getter()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue);
  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue, (uint64_t)v3);
  return *v1;
}

void SidecarDisplaySession.queue.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  char v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue);
  sub_10000F664((uint64_t)v3, (uint64_t)v5, 1);
  v4 = *v3;
  *v3 = a1;

  sub_100018D38();
}

void SidecarDisplaySession.queue.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000F664(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue, a1, 33);
  sub_100005D94();
}

void sub_100010BA4(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_negotiator);
}

void sub_100010BB0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  sub_100010C18(v1);
}

uint64_t SidecarDisplaySession.clock.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_clock);
  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_clock, (uint64_t)v3);
  return swift_retain(*v1);
}

void sub_100010C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v5[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_clock);
  sub_10000F664((uint64_t)v3, (uint64_t)v5, 1);
  v4 = *v3;
  *v3 = a1;
  swift_release(v4);
  sub_100018D38();
}

void sub_100010C5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v5[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings);
  sub_10000F664((uint64_t)v3, (uint64_t)v5, 1);
  v4 = *v3;
  *v3 = a1;
  swift_bridgeObjectRelease(v4);
  sub_100018D38();
}

void sub_100010CA0(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v6;
  char v7;
  NSString v8;
  NSString v9;

  v3 = v2;
  v4 = a2;
  if (a1)
  {
    if (!a2)
    {
LABEL_7:
      v9 = sub_100018EB4();
      objc_msgSend(a1, "removeObserver:forKeyPath:context:", v3, v9, v3);
      sub_100018CE0(v9);
      return;
    }
    sub_100018C20((uint64_t)a1, &qword_100077C78, SidecarStream_ptr);
    v4 = v4;
    v6 = a1;
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) != 0)
      goto LABEL_8;
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  v8 = sub_100018EB4();
  objc_msgSend(v4, "addObserver:forKeyPath:options:context:", v3, v8, 4, v3);

  if (a1)
    goto LABEL_7;
LABEL_8:
  sub_100018E6C();
}

void sub_100010D7C(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream);
  v4 = v3;
  sub_100010CA0(a1, v3);

}

void sub_100010DCC(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream) = a1;
  v3 = a1;
  sub_100010D7C(v2);

}

void sub_100010E14(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoStream);
}

void sub_100010E20(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoClient);
}

id SidecarDisplaySession.videoSlot.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id result;
  void *v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  BOOL v8;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoClient);
  if (!v1)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v2 = v1;
  result = objc_msgSend(v2, "slotForMode:", 0);
  if (result)
  {
    v4 = result;
    v6 = 0;
    v7 = 1;
    result = (id)static UInt32._forceBridgeFromObjectiveC(_:result:)(result, &v6);
    if ((v7 & 1) == 0)
    {
      v5 = v6;

LABEL_6:
      v8 = v1 == 0;
      return (id)(v5 | ((unint64_t)(v1 == 0) << 32));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100010ED8(void *a1)
{
  void *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v3 = sub_100018C4C((uint64_t)&unk_10006AC58);
  *(_QWORD *)(v3 + 16) = v1;
  v7[4] = sub_1000189BC;
  v8 = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100011288;
  v7[3] = &unk_10006AC70;
  v4 = _Block_copy(v7);
  v5 = v8;
  v6 = v1;
  swift_release(v5);
  objc_msgSend(a1, "timeSyncWithCompletion:", v4);
  _Block_release(v4);
}

uint64_t sub_100010F84(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;
  _BYTE v33[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    __chkstk_darwin(v14, v15);
    *(&v28 - 2) = a2;
    swift_errorRetain(a2);
    sub_100028F80(sub_100011200, 0, sub_100018B80, &v28 - 4);
    return swift_errorRelease(a2);
  }
  else
  {
    v19 = (void **)&a3[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue];
    swift_beginAccess(&a3[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue], v33, 0, 0);
    v29 = v7;
    v20 = *v19;
    v21 = swift_allocObject(&unk_10006ACA8, 32, 7);
    *(_QWORD *)(v21 + 16) = a1;
    *(_QWORD *)(v21 + 24) = a3;
    aBlock[4] = sub_1000189DC;
    v32 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000C66C;
    aBlock[3] = &unk_10006ACC0;
    v22 = _Block_copy(aBlock);
    v23 = v20;
    static DispatchQoS.unspecified.getter(a3);
    v30 = _swiftEmptyArrayStorage;
    sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = v24;
    v26 = sub_100008414((uint64_t *)&unk_100077A10);
    sub_1000084BC((unint64_t *)&qword_100077CA0, (uint64_t *)&unk_100077A10);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v26, v27, v6, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v10, v22);
    _Block_release(v22);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v6);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    return swift_release(v32);
  }
}

uint64_t sub_100011200()
{
  return 0x636E7953656D6954;
}

uint64_t sub_100011218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for Clock();
  swift_allocObject(v2, 56, 7);
  Clock.init(clockIdentifier:)(a1);
  v4 = v3;
  Clock.heartbeat.setter(1);
  v5 = swift_retain(v4);
  sub_100010C18(v5);
  return swift_release(v4);
}

void sub_100011288(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_1000112E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Class isa;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Class v20;
  int v21;

  v3 = v2;
  v21 = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v7 = (void *)OPACKEncoderCreateData(isa, 0, &v21);

  if (!v7)
    goto LABEL_4;
  if (v21)
  {

LABEL_4:
    sub_100018C20(v8, (unint64_t *)&qword_100077C80, NSError_ptr);
    sub_100029474(v21, 0, 0, (uint64_t)"ContinuityDisplay/SidecarDisplaySession.swift", 45, 2, 160);
    sub_100018EC8();
    return;
  }
  v9 = v7;
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v12 = v11;

  objc_allocWithZone((Class)SidecarItem);
  sub_100019104();
  v13 = sub_1000181EC(v10, v12, a1, a2);
  v14 = *(void **)(v3 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request);
  v15 = sub_100008414((uint64_t *)&unk_100078650);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100058900;
  *(_QWORD *)(v16 + 32) = v13;
  specialized Array._endMutation()(v16, v17, v18);
  sub_100018AA4(0, (unint64_t *)&unk_100077E40, SidecarItem_ptr);
  v19 = v13;
  v20 = Array._bridgeToObjectiveC()().super.isa;
  sub_100005DA4();
  objc_msgSend(v14, "sendItems:complete:", v20, 0);

}

uint64_t SidecarDisplaySession.sidecarRequest(_:receivedItems:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  id v5;

  v4 = sub_100018C8C((uint64_t)&unk_10006A968, 32);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain(a2);
  v5 = v2;
  sub_1000165C8();
  return swift_release(v4);
}

void sub_10001154C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Strong;
  uint64_t v47;
  uint64_t ObjectType;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[24];
  uint64_t v65;

  v3 = v2;
  v61 = 0;
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v6)
      goto LABEL_3;
LABEL_53:
    swift_bridgeObjectRelease(a1);
    goto LABEL_54;
  }
  if (a1 < 0)
    v44 = a1;
  else
    v44 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v44))
    goto LABEL_53;
LABEL_3:
  sub_10002533C(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0)
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  else
    v7 = *(id *)(a1 + 32);
  v8 = v7;
  swift_bridgeObjectRelease(a1);
  v9 = sub_100018A44(v8);
  if (v10 >> 60 == 15)
    goto LABEL_6;
  v11 = v9;
  v12 = v10;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v14 = OPACKDecodeData(isa, 0, &v61);

  if (!v14)
  {

    sub_10001891C(v11, v12);
    goto LABEL_54;
  }
  v15 = objc_opt_self(NSDictionary);
  v16 = swift_dynamicCastObjCClass(v14, v15);
  if (!v16)
  {

    sub_10001891C(v11, v12);
    swift_unknownObjectRelease(v14);
    goto LABEL_54;
  }
  if (v61)
  {
    swift_unknownObjectRelease(v14);
    sub_10001891C(v11, v12);
LABEL_6:

LABEL_54:
    v45 = a2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
    swift_beginAccess(a2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, v64, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v45);
    if (!Strong)
      return;
    v33 = Strong;
    v47 = *(_QWORD *)(v45 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 80))(a2, a1, ObjectType, v47);
    goto LABEL_56;
  }
  v57 = v14;
  v59 = (void *)v16;
  v17 = objc_msgSend(v8, "type");
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  if (v18 == 1953066601 && v20 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    v24 = v59;
    goto LABEL_20;
  }
  v22 = v20;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(1953066601, 0xE400000000000000, v18, v20, 0);
  v24 = v59;
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRelease(v22);
LABEL_20:
    v25 = v3;
    sub_100011CE8(v24);
LABEL_21:
    if (v25)
    {
      swift_unknownObjectRelease(v57);
      sub_10001891C(v11, v12);

      return;
    }

    sub_10001891C(v11, v12);
    v26 = v57;
    goto LABEL_57;
  }
  if (v18 == 0x7472617473 && v22 == 0xE500000000000000)
  {
    v28 = 0xE500000000000000;
    goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7472617473, 0xE500000000000000, v18, v22, 0) & 1) != 0)
  {
    v28 = v22;
LABEL_31:
    swift_bridgeObjectRelease(v28);
    v25 = v3;
    sub_100013EC4(v59);
    goto LABEL_21;
  }
  if (v18 == 0x6544657461647075 && v22 == 0xEE0073746C756166)
  {
    swift_bridgeObjectRelease(0xEE0073746C756166);
    v33 = v57;
LABEL_40:
    *(_QWORD *)&v62 = 0x73746C7561666564;
    *((_QWORD *)&v62 + 1) = 0xE800000000000000;
    v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v62);
    v40 = objc_msgSend(v59, "__swift_objectForKeyedSubscript:", v39);
    swift_unknownObjectRelease(v39);
    if (v40)
    {
      _bridgeAnyObjectToAny(_:)(v40);
      swift_unknownObjectRelease(v40);
    }
    else
    {
      v62 = 0u;
      v63 = 0u;
    }
    sub_100018800((uint64_t)&v62, (uint64_t)v64, (uint64_t *)&unk_100077B70);
    if (v65)
    {
      v41 = sub_100008414((uint64_t *)&unk_100078300);
      if ((swift_dynamicCast(&v60, v64, (char *)&type metadata for Any + 8, v41, 6) & 1) == 0)
        goto LABEL_47;
      v58 = v60;
      *(_QWORD *)&v62 = 1937335659;
      *((_QWORD *)&v62 + 1) = 0xE400000000000000;
      v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v62);
      v43 = objc_msgSend(v59, "__swift_objectForKeyedSubscript:", v42);
      swift_unknownObjectRelease(v42);
      if (v43)
      {
        _bridgeAnyObjectToAny(_:)(v43);
        swift_unknownObjectRelease(v43);
      }
      else
      {
        v62 = 0u;
        v63 = 0u;
      }
      sub_100018800((uint64_t)&v62, (uint64_t)v64, (uint64_t *)&unk_100077B70);
      if (v65)
      {
        v49 = sub_100008414(&qword_100077E68);
        if ((swift_dynamicCast(&v60, v64, (char *)&type metadata for Any + 8, v49, 6) & 1) != 0)
        {
          v50 = v60;
          v51 = sub_100009EF0(v58);
          sub_100010C5C((uint64_t)v51);
          v52 = a2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
          swift_beginAccess(a2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, v64, 0, 0);
          v53 = swift_unknownObjectWeakLoadStrong(v52);
          if (!v53)
          {

            sub_10001891C(v11, v12);
            swift_unknownObjectRelease(v33);
            swift_bridgeObjectRelease(v50);
            return;
          }
          v54 = v53;
          v55 = *(_QWORD *)(v52 + 8);
          v56 = swift_getObjectType(v53);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 24))(a2, v50, v56, v55);

          sub_10001891C(v11, v12);
          swift_unknownObjectRelease(v33);
          swift_bridgeObjectRelease(v50);
          v26 = v54;
          goto LABEL_57;
        }

        sub_10001891C(v11, v12);
        swift_bridgeObjectRelease(v58);
        goto LABEL_56;
      }

      sub_10001891C(v11, v12);
      swift_bridgeObjectRelease(v58);
    }
    else
    {

      sub_10001891C(v11, v12);
    }
    swift_unknownObjectRelease(v33);
    sub_10001893C((uint64_t)v64, (uint64_t *)&unk_100077B70);
    return;
  }
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6544657461647075, 0xEE0073746C756166, v18, v22, 0);
  v31 = v22;
  v32 = v30;
  swift_bridgeObjectRelease(v31);
  v33 = v57;
  if ((v32 & 1) != 0)
    goto LABEL_40;
  v34 = a2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  swift_beginAccess(a2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, v64, 0, 0);
  v35 = swift_unknownObjectWeakLoadStrong(v34);
  if (!v35)
  {
LABEL_47:

    sub_10001891C(v11, v12);
LABEL_56:
    v26 = v33;
    goto LABEL_57;
  }
  v36 = v35;
  v37 = *(_QWORD *)(v34 + 8);
  v38 = swift_getObjectType(v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 80))(a2, a1, v38, v37);

  sub_10001891C(v11, v12);
  swift_unknownObjectRelease(v57);
  v26 = v36;
LABEL_57:
  swift_unknownObjectRelease(v26);
}

uint64_t sub_100011C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100019038();
  v1 = sub_100018FA8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100011C58()
{
  uint64_t v0;

  sub_10001154C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100011CE8(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t ObjectType;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  unsigned __int8 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t inited;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Class isa;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, char *);
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint8_t *v98;
  char *v99;
  uint64_t (*v100)(char *, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void (*v106)(char *, char *);
  char *v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Class v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint8_t *v137;
  uint64_t v138;
  NSObject *v139;
  uint64_t v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD v151[3];
  uint64_t v152[3];
  uint64_t v153;
  unint64_t v154[3];
  __int128 v155;
  __int128 v156;
  char *v157;

  v3 = v2;
  v4 = v1;
  sub_100008414((uint64_t *)&unk_100078320);
  sub_100018C80();
  __chkstk_darwin(v6, v7);
  sub_100019010();
  v146 = v8;
  v147 = (char *)sub_100018F50();
  v9 = *((_QWORD *)v147 - 1);
  __chkstk_darwin(v147, v10);
  sub_100018D80();
  v157 = v11;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v136 - v14;
  v153 = 0x73746C7561666564;
  v154[0] = 0xE800000000000000;
  v16 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", sub_100018CFC());
  sub_100018C14();
  v144 = v9;
  v145 = v15;
  if (v1)
  {
    sub_100018C74();
    v17 = sub_100018C94();
  }
  else
  {
    sub_100018DAC();
  }
  sub_100018C08(v17, v18, (uint64_t *)&unk_100077B70);
  if (*((_QWORD *)&v156 + 1))
  {
    v20 = sub_100008414((uint64_t *)&unk_100078300);
    if ((sub_100018BFC((uint64_t)v152, v21, (uint64_t)&type metadata for Any + 8, v20) & 1) != 0)
    {
      v22 = sub_100009EF0(v152[0]);
      sub_100010C5C((uint64_t)v22);
    }
  }
  else
  {
    sub_100018CA8(v19, (uint64_t *)&unk_100077B70);
  }
  v1[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_inited] = 1;
  v23 = &v1[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate];
  sub_100018BB0((uint64_t)&v1[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate], (uint64_t)v152);
  Strong = swift_unknownObjectWeakLoadStrong(v23);
  if (Strong)
  {
    v1 = (char *)Strong;
    v25 = *((_QWORD *)v23 + 1);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 8))(v4, ObjectType, v25);
    sub_100018C94();
  }
  v153 = 6518369;
  v154[0] = 0xE300000000000000;
  v27 = sub_100018CFC();
  v28 = sub_100018BD4(v27);
  sub_100018C14();
  if (v1)
  {
    sub_100018C74();
    v29 = sub_100018C94();
  }
  else
  {
    sub_100018DAC();
  }
  sub_100018C08(v29, v30, (uint64_t *)&unk_100077B70);
  v33 = &unk_100077000;
  v34 = (char *)&unk_10007C000;
  if (*((_QWORD *)&v156 + 1))
  {
    if ((sub_100018BFC((uint64_t)v151, v32, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Data) & 1) != 0)
    {
      v142 = a1;
      v143 = v2;
      v36 = v151[0];
      v35 = v151[1];
      v37 = &v4[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_logger];
      v38 = sub_100019154();
      Logger.logObject.getter(v38);
      v39 = sub_100018F48();
      if (os_log_type_enabled(v37, v39))
      {
        v40 = (uint8_t *)sub_10000F640(12);
        *(_DWORD *)v40 = 134217984;
        *(_QWORD *)&v155 = Data.count.getter(v36, v35);
        v33 = (_QWORD *)&unk_100077000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, (char *)&v155 + 8, v40 + 4);
        sub_100018D74();
        sub_10000F6D4((void *)&_mh_execute_header, v37, v39, "AVC negotiate offer (%ld bytes)", v40);
        sub_10000F604((uint64_t)v40);

      }
      else
      {

        v41 = sub_100018D74();
      }
      sub_100018C20(v41, (unint64_t *)&unk_100077E20, CADisplay_ptr);
      v42 = sub_1000127E0();
      v43 = sub_100010898(*(void **)&v4[v33[383]]);
      if ((v46 & 1) != 0)
      {
        v57 = _swiftEmptyArrayStorage;
      }
      else
      {
        v47 = v43;
        v48 = v44;
        v49 = v45;
        v50 = 3;
        if ((v42 & 1) == 0)
          v50 = 0;
        v141 = v50;
        v51 = sub_100008414(&qword_100077DE8);
        inited = swift_initStackObject(v51, &v148);
        *(_OWORD *)(inited + 16) = xmmword_100058970;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVCMediaStreamNegotiatorVideoWidth);
        *(_QWORD *)(inited + 40) = v53;
        *(_QWORD *)(inited + 72) = &type metadata for Int;
        *(_QWORD *)(inited + 48) = v47;
        *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVCMediaStreamNegotiatorVideoHeight);
        *(_QWORD *)(inited + 88) = v54;
        *(_QWORD *)(inited + 120) = &type metadata for Int;
        *(_QWORD *)(inited + 96) = v48;
        *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVCMediaStreamNegotiatorVideoResolution);
        *(_QWORD *)(inited + 136) = v55;
        *(_QWORD *)(inited + 168) = &type metadata for Int;
        *(_QWORD *)(inited + 144) = v49;
        *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVCMediaStreamNegotiatorHDRMode);
        *(_QWORD *)(inited + 184) = v56;
        *(_QWORD *)(inited + 216) = &type metadata for UInt;
        *(_QWORD *)(inited + 192) = v141;
        v57 = (_QWORD *)inited;
      }
      v58 = Dictionary.init(dictionaryLiteral:)(v57);
      sub_100019154();
      sub_10001BCB0(v58);
      v60 = v59;
      sub_100005DA4();
      v61 = objc_allocWithZone((Class)AVCMediaStreamNegotiator);
      v62 = v143;
      v63 = sub_10001828C(v36, v35, v60);
      v3 = v62;
      if (v62)
      {
        sub_100018D74();
        return;
      }
      v34 = v4;
      sub_100010BA4((uint64_t)v63);
      sub_100018D74();
      a1 = v142;
    }
  }
  else
  {
    sub_100018CA8(v31, (uint64_t *)&unk_100077B70);
  }
  *(_QWORD *)&v155 = 1936876918;
  *((_QWORD *)&v155 + 1) = 0xE400000000000000;
  v64 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v155);
  v65 = sub_100018BD4(v64);
  sub_100018C14();
  if (v34)
  {
    sub_100018CF4();
    sub_100018C94();
  }
  else
  {
    v155 = 0u;
    v156 = 0u;
  }
  sub_100012864((uint64_t)&v155, -402);
  sub_100018CA8(v66, (uint64_t *)&unk_100077B70);
  if (!v3)
  {
    *(_QWORD *)&v155 = 1936876918;
    *((_QWORD *)&v155 + 1) = 0xE400000000000000;
    v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v155);
    v68 = sub_100018BD4(v67);
    sub_100018C14();
    if (v4)
    {
      sub_100018CF4();
      sub_100018C94();
    }
    else
    {
      v155 = 0u;
      v156 = 0u;
    }
    v69 = sub_100012B78((uint64_t)&v155);
    sub_100018CA8(v69, (uint64_t *)&unk_100077B70);
    v70 = &v4[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_peerSupportsHIDReportExtensions];
    swift_beginAccess(&v4[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_peerSupportsHIDReportExtensions], v151, 1, 0);
    *v70 = v69 & 1;
    v153 = 0x726568706963;
    v154[0] = 0xE600000000000000;
    v71 = sub_100018CFC();
    v72 = sub_100018BD4(v71);
    sub_100018C14();
    if (v69)
    {
      sub_100018C74();
      v73 = sub_100018C94();
    }
    else
    {
      sub_100018DAC();
    }
    sub_100018C08(v73, v74, (uint64_t *)&unk_100077B70);
    if (*((_QWORD *)&v156 + 1))
    {
      if ((sub_100018BE8(v75, v76, v77, (uint64_t)&type metadata for Int) & 1) != 0)
      {
        isa = sub_100018F70().super.super.isa;
        sub_100018D68((uint64_t)isa, "setCipher:");

      }
    }
    else
    {
      sub_100018CA8(v75, (uint64_t *)&unk_100077B70);
    }
    v153 = 1684632949;
    v154[0] = 0xE400000000000000;
    v79 = sub_100018CFC();
    v80 = sub_100018BD4(v79);
    sub_100018C14();
    if (v69)
    {
      sub_100018C74();
      v81 = sub_100018C94();
    }
    else
    {
      sub_100018DAC();
    }
    v83 = v147;
    v84 = v157;
    sub_100018C08(v81, v82, (uint64_t *)&unk_100077B70);
    if (*((_QWORD *)&v156 + 1))
    {
      if ((sub_100018BE8(v85, v86, v87, (uint64_t)&type metadata for Data) & 1) != 0)
      {
        v142 = a1;
        v88 = v149;
        v89 = v150;
        sub_100009364(v149, v150);
        v90 = v146;
        sub_100012C4C(v88, v89);
        if (sub_100018930(v90, 1, (uint64_t)v83) == 1)
        {
          sub_1000190AC();
          sub_10001893C(v90, (uint64_t *)&unk_100078320);
        }
        else
        {
          v143 = 0;
          v91 = v144;
          v92 = (uint64_t)v145;
          sub_100019060((uint64_t)v145, v90, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 32));
          v93 = *(void (**)(char *, uint64_t, char *))(v91 + 16);
          v93(v84, v92, v83);
          v94 = (uint64_t)&v4[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid];
          swift_beginAccess(&v4[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid], &v155, 33, 0);
          sub_100019060(v94, (uint64_t)v84, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 40));
          swift_endAccess(&v155);
          v95 = &v4[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_logger];
          v147 = v4;
          Logger.logObject.getter(v147);
          v96 = sub_100018F48();
          LODWORD(v146) = v96;
          if (os_log_type_enabled(v95, v96))
          {
            v139 = v95;
            v141 = v89;
            v97 = sub_10000F640(12);
            v140 = v88;
            v98 = (uint8_t *)v97;
            v138 = sub_10000F640(32);
            *(_QWORD *)&v155 = v138;
            *(_DWORD *)v98 = 136446210;
            v137 = v98 + 4;
            v99 = v157;
            v100 = (uint64_t (*)(char *, uint64_t))v93;
            v101 = v83;
            v102 = v100(v157, v94);
            v103 = UUID.uuidString.getter(v102);
            v105 = v104;
            v106 = *(void (**)(char *, char *))(v91 + 8);
            v106(v99, v83);
            v153 = sub_10000EC54(v103, v105, (uint64_t *)&v155);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v137);
            v107 = v147;

            swift_bridgeObjectRelease(v105);
            v108 = v139;
            sub_10000F6D4((void *)&_mh_execute_header, v139, (os_log_type_t)v146, "=== Sidecar Session %{public}s ===", v98);
            v84 = (char *)&type metadata for Any;
            v109 = v138;
            swift_arrayDestroy(v138, 1);
            sub_10000F604(v109);
            sub_10000F604((uint64_t)v98);

            sub_100009320(v140, v141);
            v106(v145, v101);
          }
          else
          {
            sub_1000190AC();

            v84 = v147;
            (*(void (**)(char *, char *))(v91 + 8))(v145, v83);
          }
        }
      }
    }
    else
    {
      sub_100018CA8(v85, (uint64_t *)&unk_100077B70);
    }
    v153 = 0x6365646F63;
    v154[0] = 0xE500000000000000;
    v110 = sub_100018CFC();
    v111 = sub_100018BD4(v110);
    sub_100018C14();
    if (v84)
    {
      sub_100018C74();
      v112 = sub_100018C94();
    }
    else
    {
      sub_100018DAC();
    }
    sub_100018C08(v112, v113, (uint64_t *)&unk_100077B70);
    if (*((_QWORD *)&v156 + 1))
    {
      if ((sub_100018BE8(v114, v115, v116, (uint64_t)&type metadata for Int) & 1) != 0)
      {
        v117 = sub_100018F70().super.super.isa;
        sub_100018D68((uint64_t)v117, "setCodec:");

      }
    }
    else
    {
      sub_100018CA8(v114, (uint64_t *)&unk_100077B70);
    }
    v153 = 7826540;
    v154[0] = 0xE300000000000000;
    v118 = sub_100018CFC();
    v119 = sub_100018E44(v118);
    sub_100018F60();
    if (v119)
    {
      sub_100018FF8();
      v120 = swift_unknownObjectRelease(v119);
    }
    else
    {
      sub_100018DAC();
    }
    sub_100018C08(v120, v121, (uint64_t *)&unk_100077B70);
    if (*((_QWORD *)&v156 + 1))
    {
      v125 = sub_100018BE8(v122, v123, v124, (uint64_t)&type metadata for Bool);
      if ((v125 & 1) != 0)
      {
        v125 = (uint64_t)Bool._bridgeToObjectiveC()().super.super.isa;
        v126 = (void *)v125;
        goto LABEL_67;
      }
    }
    else
    {
      sub_100018CA8(v122, (uint64_t *)&unk_100077B70);
    }
    v126 = 0;
LABEL_67:
    sub_100018D68(v125, "setLowLatency:");

    v153 = 0x73656C6974;
    v154[0] = 0xE500000000000000;
    v127 = sub_100018CFC();
    v128 = sub_100018E44(v127);
    sub_100018F60();
    if (v128)
    {
      sub_100018FF8();
      v129 = swift_unknownObjectRelease(v128);
    }
    else
    {
      sub_100018DAC();
    }
    sub_100018C08(v129, v130, (uint64_t *)&unk_100077B70);
    if (*((_QWORD *)&v156 + 1))
    {
      v134 = sub_100018BE8(v131, v132, v133, (uint64_t)&type metadata for Int);
      if ((v134 & 1) != 0)
      {
        v134 = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
        v135 = (void *)v134;
LABEL_75:
        sub_100018D68(v134, "setTilesPerFrame:");

        sub_100016B24();
        return;
      }
    }
    else
    {
      sub_100018CA8(v131, (uint64_t *)&unk_100077B70);
    }
    v135 = 0;
    goto LABEL_75;
  }
}

id sub_1000127E0()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(CADisplay), "mainDisplay");
  v1 = v0;
  if (v0)
  {
    v2 = objc_msgSend(v0, "currentPreset");

    if (v2)
    {
      v1 = sub_1000190FC(v3, "isReference");

    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_100012864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;

  v5 = String.init(cString:)("341", a2);
  v11 = v5;
  v12 = v6;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_100019004(v5, v6, v7, v8, v9, v10);
    if (!v39)
    {
      __break(1u);
      return;
    }
    v13 = String.init<A>(describing:)(v38, (char *)&type metadata for Any + 8);
    v15 = v14;
  }
  else
  {
    v15 = 0xE300000000000000;
    v13 = 7104878;
  }
  v16 = (v2 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_logger);
  sub_1000190B8();
  v17 = sub_100018F58();
  Logger.logObject.getter(v17);
  v18 = sub_100018F48();
  if (os_log_type_enabled(v16, v18))
  {
    v35 = v13;
    v19 = sub_10000F640(22);
    v40 = sub_10000F640(64);
    v38[0] = v40;
    *(_DWORD *)v19 = 136446466;
    sub_1000190B8();
    v36 = sub_10000EC54(v11, v12, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 4);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v19 + 12) = 2082;
    sub_100018F58();
    v36 = sub_10000EC54(v35, v15, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v19 + 14);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "=== Sidecar-%{public}s <-> Sidecar-%{public}s ===", (uint8_t *)v19, 0x16u);
    v20 = v40;
    swift_arrayDestroy(v40, 2);
    sub_10000F604(v20);
    sub_10000F604(v19);

  }
  else
  {
    swift_bridgeObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease_n(v12, 2);

  }
  sub_100019004(v21, v22, v23, v24, v25, v26);
  if (v39)
  {
    if ((sub_100018C64((uint64_t)&v36, (uint64_t)v38, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
    {
      sub_100019140();
      if (v29)
      {
        v30 = sub_100027624(v27, v28);
        if (qword_100077588 != -1)
          swift_once(&qword_100077588, sub_100017FC0);
        v31 = sub_1000279DC(v30, qword_100077BE0);
        swift_bridgeObjectRelease(v30);
        if ((v31 & 1) != 0)
        {
          sub_100018C20(v32, (unint64_t *)&qword_100077C80, NSError_ptr);
          static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
          sub_100018C3C();
          sub_100018C28(v33, v34, a2);
          sub_100018EC8();
        }
      }
      else
      {
        swift_bridgeObjectRelease(v28);
      }
    }
  }
  else
  {
    sub_10001893C((uint64_t)v38, (uint64_t *)&unk_100077B70);
  }
}

uint64_t sub_100012B78(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;

  sub_100018424(a1, (uint64_t)v9);
  if (!v10)
  {
    sub_10001893C((uint64_t)v9, (uint64_t *)&unk_100077B70);
    goto LABEL_9;
  }
  if ((sub_100018C64((uint64_t)&v8, (uint64_t)v9, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_9:
    v6 = 1;
    return v6 & 1;
  }
  sub_100019140();
  if (!v3)
  {
    swift_bridgeObjectRelease(v2);
    goto LABEL_9;
  }
  v4 = sub_100027624(v1, v2);
  if (qword_100077590 != -1)
    swift_once(&qword_100077590, sub_100017FE8);
  v5 = sub_1000279DC(v4, qword_100077BE8);
  sub_100005DD0();
  v6 = v5 ^ 1;
  return v6 & 1;
}

void sub_100012C4C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100012C9C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[11];

  if (BYTE6(v1) == 16)
  {
    v7 = 0;
    v8 = 0;
    v9[0] = v2;
    v9[1] = v1;
    v3 = sub_100018980();
    ((void (*)(uint64_t *, _QWORD *, void *, unint64_t))DataProtocol.copyBytes(to:))(&v7, v9, &type metadata for Data, v3);
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))UUID.init(uuid:))(v7, BYTE1(v7), BYTE2(v7), BYTE3(v7), BYTE4(v7), BYTE5(v7), BYTE6(v7), HIBYTE(v7), v8);
    sub_100009320(v2, v1);
    v4 = type metadata accessor for UUID(0);
    return sub_100018974(v0, 0, 1, v4);
  }
  else
  {
    sub_100009320(v2, v1);
    v6 = type metadata accessor for UUID(0);
    return sub_100018974(v0, 1, 1, v6);
  }
}

void sub_100012DF4(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  char *v4;
  id v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42[24];
  char v43[128];
  _QWORD v44[5];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v3 = sub_100013C48();
  if (!v1)
  {
    v4 = v3;
    v5 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC17ContinuityDisplay11VideoStream_videoStream], "streamToken");
    v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoClientDelegate);
    sub_100010E20((uint64_t)objc_msgSend(objc_allocWithZone((Class)AVCRemoteVideoClient), "initWithStreamToken:delegate:", v5, v6));
    swift_unknownObjectWeakAssign(v6+ OBJC_IVAR____TtCC17ContinuityDisplay21SidecarDisplaySessionP33_72778A0D8780EB3FED7F582200B6777426SessionVideoClientDelegate_owner, a1);
    v7 = v4;
    sub_100010E14((uint64_t)v4);
    v8 = *(void **)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_negotiator);
    if (v8)
    {
      v9 = objc_msgSend(v8, "answer");
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = sub_100008414(&qword_100077DE8);
      inited = swift_initStackObject(v13, v43);
      *(_OWORD *)(inited + 16) = xmmword_100058980;
      *(_QWORD *)(inited + 32) = 6518369;
      *(_QWORD *)(inited + 40) = 0xE300000000000000;
      *(_QWORD *)(inited + 48) = v10;
      *(_QWORD *)(inited + 56) = v12;
      *(_QWORD *)(inited + 72) = &type metadata for Data;
      *(_QWORD *)(inited + 80) = 1936876918;
      *(_QWORD *)(inited + 88) = 0xE400000000000000;
      sub_100009364(v10, v12);
      v16 = String.init(cString:)("341", v15);
      *(_QWORD *)(inited + 120) = &type metadata for String;
      *(_QWORD *)(inited + 96) = v16;
      *(_QWORD *)(inited + 104) = v17;
      v49 = Dictionary.init(dictionaryLiteral:)(inited);
      v18 = sub_100010898(*(void **)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config));
      if ((v21 & 1) == 0)
      {
        v22 = v19;
        v23 = v20;
        v41 = &type metadata for Int;
        v39 = (uint64_t)v18;
        sub_100009E20((uint64_t)&v39, 0x6874646977, 0xE500000000000000);
        v41 = &type metadata for Int;
        v39 = v22;
        sub_100009E20((uint64_t)&v39, 0x746867696568, 0xE600000000000000);
        v41 = &type metadata for Int;
        v39 = v23;
        sub_100009E20((uint64_t)&v39, 0x656C616373, 0xE500000000000000);
      }
      v24 = a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
      swift_beginAccess(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, v42, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v24);
      if (Strong)
      {
        v26 = Strong;
        v27 = *(_QWORD *)(v24 + 8);
        ObjectType = swift_getObjectType(Strong);
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v27 + 96))(v44, a1, ObjectType, v27);
        swift_unknownObjectRelease(v26);
        sub_100018800((uint64_t)v44, (uint64_t)&v45, &qword_100077DF0);
        if ((v48 & 1) == 0)
        {
          v38 = v45;
          v29 = v46;
          v30 = v47;
          v31 = sub_100008414(&qword_100077DF8);
          v32 = swift_allocObject(v31, 64, 7);
          *(_OWORD *)(v32 + 16) = xmmword_100058970;
          *(_OWORD *)(v32 + 32) = v38;
          *(_QWORD *)(v32 + 48) = v29;
          *(_QWORD *)(v32 + 56) = v30;
          v41 = (void *)sub_100008414(&qword_100077E00);
          v39 = v32;
          sub_100009E20((uint64_t)&v39, 0x737465736E69, 0xE600000000000000);
        }
      }
      v33 = sub_100009364(v10, v12);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v36 = 134217984;
        v39 = Data.count.getter(v10, v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v36 + 4);
        sub_100009320(v10, v12);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "AVC negotiate answer (%ld bytes)", v36, 0xCu);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        sub_100009320(v10, v12);
      }
      v37 = v49;
      sub_1000112E8(0x6769666E6F63, 0xE600000000000000);
      swift_bridgeObjectRelease(v37);
      sub_1000155D4();
      sub_100009320(v10, v12);

    }
    else
    {
      __break(1u);
    }
  }
}

char *sub_10001325C(uint64_t a1, unint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *result;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  Class isa;
  id v27;
  unsigned int v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  id v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void *v52;
  id v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char *v97;
  char *v98;
  char v99;
  id v100;
  char *v101;
  char v102;
  double v103;
  void *v104;
  char v105;
  double v106;
  char *v107;
  char v108;
  id v109;
  char *v110;
  double v111;
  char v112;
  double v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  id v122;
  uint64_t v123;
  unint64_t v124;
  id v125;
  uint64_t v126;

  v5 = v3;
  v9 = sub_100018F50();
  __chkstk_darwin(v9, v10);
  v14 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v3 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream);
  if (!v15 || (v16 = *(void **)(v3 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_negotiator)) == 0)
  {
    sub_100018C20(v11, (unint64_t *)&qword_100077C80, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100018C3C();
    sub_100018C28(v19, v20, -1010);
    sub_100018EC8();
    return v14;
  }
  v119 = v12;
  v120 = v11;
  v118 = v4;
  v121 = v16;
  v122 = v15;
  if (a2 >> 60 == 15)
  {
    v17 = v15;
    v18 = v16;
  }
  else
  {
    v117 = a3;
    v22 = (v3 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_logger);
    sub_1000190C0();
    v115 = v15;
    v116 = v16;
    v23 = sub_1000190C0();
    Logger.logObject.getter(v23);
    v24 = sub_100018F48();
    if (os_log_type_enabled(v22, v24))
    {
      v25 = (uint8_t *)sub_10000F640(12);
      *(_DWORD *)v25 = 134217984;
      v125 = (id)Data.count.getter(a1, a2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v25 + 4);
      sub_100018D2C();
      sub_10000F6D4((void *)&_mh_execute_header, v22, v24, "AVC negotiate answer (%ld bytes)", v25);
      sub_10000F604((uint64_t)v25);

    }
    else
    {

      sub_100018D2C();
    }
    isa = Data._bridgeToObjectiveC()().super.isa;
    v125 = 0;
    v27 = (id)v116;
    v28 = objc_msgSend((id)v116, "setAnswer:withError:", isa, &v125);

    v29 = v125;
    a3 = v117;
    if (!v28)
    {
      v55 = v125;
      _convertNSErrorToError(_:)(v29);

      swift_willThrow(v56);
      sub_100018D2C();

      return v14;
    }
    v30 = v125;
    sub_100018D2C();
    v16 = v121;
  }
  v125 = 0;
  v31 = objc_msgSend(v16, "generateMediaStreamConfigurationWithError:", &v125);
  v32 = v125;
  if (!v31)
  {
    v52 = v16;
    v53 = v125;
    _convertNSErrorToError(_:)(v32);

    swift_willThrow(v54);
    sub_10001904C();
    return v14;
  }
  v33 = v31;
  v34 = v125;
  if (objc_msgSend(v33, "isRTCPEnabled"))
  {
    sub_1000190FC((uint64_t)objc_msgSend(v33, "setRtcpTimeOutEnabled:", 1), "setRtcpSendInterval:");
    v35 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                                + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request), "session"));
    if (v35)
    {
      v36 = v35;
      objc_msgSend(v35, "transport");

    }
    sub_1000190FC((uint64_t)v35, "setRtcpTimeOutInterval:");
  }
  v37 = v33;
  v38 = (char *)objc_msgSend(v37, "video");
  v117 = v37;
  if (!v38)
  {
    v115 = 1366;
    v116 = 1024;
    goto LABEL_39;
  }
  v39 = v38;
  if (objc_msgSend(v38, "videoResolution") != (id)12)
  {
    v47 = 1366;
    v50 = 1024;
    goto LABEL_38;
  }
  v40 = objc_msgSend(v39, "customWidth");
  if (!a3)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v41 = (uint64_t)v40;
  v42 = v40 == (id)0x8000000000000000 && a3 + 1 == 0;
  if (v42)
    goto LABEL_65;
  v116 = (uint64_t)objc_msgSend(v39, "customHeight");
  if (v116 == 0x8000000000000000 && a3 + 1 == 0)
LABEL_66:
    __break(1u);
  v44 = (uint64_t)a3;
  v45 = v117;
  result = (char *)objc_msgSend(v117, "video");
  if (!result)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v46 = result;
  objc_msgSend(result, "setVideoResolution:", 12);

  result = (char *)objc_msgSend(v45, "video");
  if (!result)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v47 = v41 / v44;
  if ((unsigned __int128)(v41 / v44 * (__int128)v44) >> 64 != (v41 / v44 * v44) >> 63)
    goto LABEL_63;
  v48 = result;
  objc_msgSend(result, "setCustomWidth:");

  result = (char *)objc_msgSend(v117, "video");
  if (result)
  {
    v49 = v44;
    v50 = v116 / v44;
    if ((unsigned __int128)(v50 * (__int128)v49) >> 64 == (v50 * v49) >> 63)
    {
      v51 = result;
      objc_msgSend(result, "setCustomHeight:");

      v39 = v51;
LABEL_38:
      v115 = v47;
      v116 = v50;

LABEL_39:
      v57 = v5 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid;
      sub_100018BB0(v5 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, (uint64_t)&v125);
      v59 = v119;
      v58 = v120;
      v60 = sub_100019060((uint64_t)v14, v57, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 16));
      v123 = UUID.uuid.getter(v60);
      LOWORD(v124) = v61;
      BYTE2(v124) = v62;
      BYTE3(v124) = v63;
      BYTE4(v124) = v64;
      BYTE5(v124) = v65;
      BYTE6(v124) = v66;
      HIBYTE(v124) = v67;
      v68 = sub_10001C0E0((uint64_t)&v123, (uint64_t)&v125);
      v70 = v69;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v58);
      v71 = Data._Representation.subscript.getter(0, 14, v68, v70);
      v73 = v72;
      v74 = sub_100019120();
      sub_100009320(v74, v75);
      sub_10001C198(v71, v73);
      v77 = v76;
      v79 = v78;
      v80 = *(void **)(v5 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config);
      v14 = v117;
      sub_100013B7C(v80, (SEL *)&selRef_cipher);
      v81 = sub_10001889C(objc_msgSend(v122, "rapportStream"));
      v83 = v82;
      v84 = sub_100019068();
      v85 = sub_10001907C(v84, "setSRTPCipherSuite:");
      sub_10001907C((uint64_t)v85, "setSRTCPCipherSuite:");
      if (v83 >> 60 == 15)
        v86 = 0;
      else
        v86 = v81;
      v87 = 0xC000000000000000;
      if (v83 >> 60 != 15)
        v87 = v83;
      v123 = v86;
      v124 = v87;
      sub_100019068();
      sub_100018908(v81, v83);
      Data.append(_:)(v77, v79);
      sub_100018D20();
      v88 = sub_100019120();
      v90 = sub_100009364(v88, v89);
      sub_100018FC0(v90, v91, v92, (SEL *)&selRef_setReceiveMasterKey_);
      sub_100018FC0(v93, v94, v95, (SEL *)&selRef_setSendMasterKey_);
      sub_100018D20();
      sub_10001891C(v81, v83);

      sub_100013B7C(v80, (SEL *)&selRef_codec);
      if ((v96 & 1) != 0)
        goto LABEL_48;
      result = (char *)sub_100019178();
      if (result)
      {
        v97 = result;
        sub_100018F40(result, "setTxCodecType:");

        result = (char *)sub_100019178();
        if (result)
        {
          v98 = result;
          sub_100018F40(result, "setRxCodecType:");

LABEL_48:
          sub_100013BC0(v80, (SEL *)&selRef_framerate);
          if ((v99 & 1) != 0)
          {
LABEL_51:
            sub_100014E1C(v80, (SEL *)&selRef_rtcp);
            sub_10001916C();
            if (!v42)
              objc_msgSend(v14, "setRtcpEnabled:", v102 & 1);
            sub_100013BFC(v80, (SEL *)&selRef_keyFrameInterval);
            v104 = v121;
            if ((v105 & 1) == 0)
            {
              v106 = v103;
              v107 = v14;
              sub_10000C760(v107, v106);

            }
            sub_100013BC0(v80, (SEL *)&selRef_tilesPerFrame);
            if ((v108 & 1) != 0)
              goto LABEL_58;
            v109 = sub_100019040();
            result = (char *)objc_msgSend(v109, "video");
            if (result)
            {
              v110 = result;
              sub_100018F40(result, "setTilesPerFrame:");

              v104 = v121;
LABEL_58:
              sub_100013BFC(v80, (SEL *)&selRef_rtcpTimeoutInterval);
              if ((v112 & 1) != 0)
              {

                sub_10001904C();
                sub_100018D20();
              }
              else
              {
                v113 = v111;
                v114 = v14;
                objc_msgSend(v114, "setRtcpTimeOutInterval:", v113);

                sub_10001904C();
                sub_100018D20();

              }
              return v14;
            }
            goto LABEL_70;
          }
          v100 = sub_100019040();
          result = (char *)objc_msgSend(v100, "video");
          if (result)
          {
            v101 = result;
            sub_100018F40(result, "setFramerate:");

            goto LABEL_51;
          }
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_69;
    }
    goto LABEL_64;
  }
LABEL_73:
  __break(1u);
  return result;
}

void sub_100013B7C(void *a1, SEL *a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = sub_100018FD0(a1, a2);
  if (v3)
  {
    sub_100018E58((uint64_t)v3, 1, v4, v5, v6, v7, v8, v9, v10, v11);

  }
  sub_100018E8C();
}

void sub_100013BC0(void *a1, SEL *a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = sub_100018FD0(a1, a2);
  if (v3)
  {
    sub_100018E58((uint64_t)v3, 1, v4, v5, v6, v7, v8, v9, v10, v11);

  }
  sub_100018E8C();
}

void sub_100013BFC(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  char v5;

  v2 = sub_100018FD0(a1, a2);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 1;
    static Double._conditionallyBridgeFromObjectiveC(_:result:)(v2, &v4);

  }
  sub_100018E8C();
}

char *sub_100013C48()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29[24];
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33[5];

  v1 = sub_100018F50();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  sub_100018CB0();
  v5 = *(void **)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream];
  if (v5 && (v6 = *(void **)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_negotiator]) != 0)
  {
    v33[0] = 0;
    v7 = v5;
    v8 = v6;
    v9 = objc_msgSend(v8, "generateMediaStreamInitOptionsWithError:", v33);
    v11 = v33[0];
    if (v9)
    {
      v12 = v9;
      v27 = v7;
      v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable, v10);
      v14 = v11;

      v28 = v13;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(kAVCMediaStreamOptionCallID);
      v31 = v15;
      AnyHashable.init<A>(_:)(v33, &v30, &type metadata for String, &protocol witness table for String);
      v16 = &v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid];
      sub_100018BB0((uint64_t)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid], (uint64_t)v29);
      v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v0, v16, v1);
      v18 = UUID.uuidString.getter(v17);
      v20 = v19;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v0, v1);
      v32 = &type metadata for String;
      v30 = v18;
      v31 = v20;
      sub_100009E88((uint64_t)&v30, (uint64_t)v33);
      objc_allocWithZone((Class)type metadata accessor for VideoStream(0));
      v21 = sub_10000CAF8(v0, v27, v28);

    }
    else
    {
      v21 = (char *)v33[0];
      _convertNSErrorToError(_:)(v11);

      swift_willThrow(v26);
    }
  }
  else
  {
    sub_100018C20(v4, (unint64_t *)&qword_100077C80, NSError_ptr);
    v21 = v22;
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100018C3C();
    sub_100018C28(v23, v24, -1010);
    sub_100018EC8();
  }
  return v21;
}

void sub_100013EC4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  char *v84;
  uint64_t v85;
  char v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _BYTE v113[24];
  uint64_t v114;
  uint64_t v115;

  v4 = v1;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoStream);
  if (!v5)
    goto LABEL_18;
  v7 = v5;
  v14 = objc_msgSend(a1, "__swift_objectForKeyedSubscript:", sub_1000190DC((uint64_t)v7, (uint64_t)&type metadata for String, v8, v9, v10, v11, v12, v13, v89, v95));
  v15 = sub_100018F60();
  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v14);
    v15 = swift_unknownObjectRelease(v14);
  }
  sub_100018E80(v15, v16, (uint64_t *)&unk_100077B70, v17, v18, v19, v20, v21, v90, v96, v101, v104, v107);
  if (!v114)
    goto LABEL_16;
  v22 = sub_100018C64((uint64_t)&v115, (uint64_t)v113, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int);
  if ((v22 & 1) == 0)
    goto LABEL_17;
  v29 = v115;
  v30 = sub_1000190DC(v22, (uint64_t)&type metadata for String, v23, v24, v25, v26, v27, v28, v91, v97);
  v31 = sub_100018E10(v30);
  v32 = swift_unknownObjectRelease(v3);
  if (v31)
  {
    _bridgeAnyObjectToAny(_:)(v31);
    v32 = sub_100018F60();
  }
  sub_100018E80(v32, v33, (uint64_t *)&unk_100077B70, v34, v35, v36, v37, v38, v92, v98, v102, v105, v108);
  if (!v114)
    goto LABEL_16;
  v39 = sub_100018C64((uint64_t)&v115, (uint64_t)v113, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int);
  if ((v39 & 1) == 0)
  {
LABEL_17:

    goto LABEL_18;
  }
  v46 = v115;
  v47 = sub_1000190DC(v39, (uint64_t)&type metadata for String, v40, v41, v42, v43, v44, v45, v93, v99);
  v48 = sub_100018E10(v47);
  v49 = swift_unknownObjectRelease(v3);
  if (v48)
  {
    sub_100018CF4();
    v49 = sub_100018C94();
  }
  sub_100018E80(v49, v50, (uint64_t *)&unk_100077B70, v51, v52, v53, v54, v55, v94, v100, v103, v106, v109);
  if (!v114)
  {
LABEL_16:

    sub_10001893C((uint64_t)v113, (uint64_t *)&unk_100077B70);
LABEL_18:
    sub_100018C20((uint64_t)a1, (unint64_t *)&qword_100077C80, NSError_ptr);
    static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    sub_100018C3C();
    sub_100018C28(v60, v61, -1010);
    sub_100018EC8();
    return;
  }
  v56 = sub_100018C64((uint64_t)&v115, (uint64_t)v113, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int);
  if ((v56 & 1) == 0)
    goto LABEL_17;
  v57 = v115;
  v58 = *(void **)(v4 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config);
  sub_1000190FC(v56, "setScale:");
  objc_msgSend(v58, "setSize:", (double)v29, (double)v46);
  v59 = sub_10001325C(0, 0xF000000000000000, (char *)2);
  if (v2)
  {
LABEL_15:

    return;
  }
  v62 = v59;
  v63 = (uint64_t *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings);
  sub_100018BB0(v4 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings, (uint64_t)v113);
  v111 = v63;
  v64 = *v63;
  v65 = v62;
  v66 = swift_bridgeObjectRetain(v64);
  sub_100010008(v66, 2);
  v112 = v67;
  v69 = v68;
  swift_bridgeObjectRelease(v64);
  v110 = v57;
  if ((v69 & 1) != 0)
  {
    sub_10000C7F8(v65);
    v112 = v70;
  }
  v71 = *v111;
  v72 = sub_100018F80();
  sub_100010008(v72, 1);
  v74 = v73;
  v76 = v75;
  swift_bridgeObjectRelease(v71);
  if ((v76 & 1) != 0)
  {
    sub_10000C7F8(v65);
    v74 = v77;
  }
  sub_10000C884(v112, v74, v65);

  v78 = sub_100018E24();
  if (!v78)
    goto LABEL_34;
  v79 = v78;
  objc_msgSend(v78, "setVideoResolution:", 12);

  v80 = sub_100018E24();
  if (!v80)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((unsigned __int128)(v29 * (__int128)v110) >> 64 != (v29 * v110) >> 63)
  {
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v81 = v80;
  objc_msgSend(v80, "setCustomWidth:");

  v82 = sub_100018E24();
  if (v82)
  {
    if ((unsigned __int128)(v46 * (__int128)v110) >> 64 == (v46 * v110) >> 63)
    {
      v83 = v82;
      objc_msgSend(v82, "setCustomHeight:");

      v84 = v65;
      sub_10000D004(v84);

      v85 = sub_100019104();
      v86 = sub_100010074(v85);
      sub_100005DA4();
      if ((v86 & 1) != 0)
      {
        v87 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request), "session");
        if (v87)
        {
          v88 = v87;
          sub_100010ED8(v87);

        }
      }
      sub_1000155D4();

      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_36:
  __break(1u);
}

void sub_1000143D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = IDSCopyLocalDeviceUniqueID();
  if (v0)
  {
    v1 = (void *)v0;
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    v4 = v3;

  }
  else
  {
    v4 = 0xE300000000000000;
    v2 = 7104878;
  }
  v5 = sub_10001444C(28, v2, v4);
  v9 = static String._fromSubstring(_:)(v5, v6, v7, v8);
  v11 = v10;
  sub_100005DD0();
  qword_10007C8A8 = v9;
  unk_10007C8B0 = v11;
  sub_10000C644();
}

uint64_t sub_10001444C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = String.index(_:offsetBy:limitedBy:)(v6 | (v5 << 16), -result, 15, a2, a3);
    if ((v8 & 1) != 0)
      v9 = 15;
    else
      v9 = v7;
    v10 = String.subscript.getter(15, v9, a2, a3);
    swift_bridgeObjectRelease(a3);
    return v10;
  }
  return result;
}

id SidecarDisplaySession.__allocating_init(logger:request:config:)()
{
  objc_class *v0;
  id v1;

  v1 = objc_allocWithZone(v0);
  return SidecarDisplaySession.init(logger:request:config:)();
}

id SidecarDisplaySession.init(logger:request:config:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  _OWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  void *v42;
  id result;
  void *v44;
  void *v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  id v60;
  const __CFData *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  uint64_t v73;
  void *v74;
  id v75;
  id v76;
  int v77;
  Class isa;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  char v83;
  char v84;
  char v85;
  id v86;
  void *v87;
  NSObject *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  objc_super v102;
  uint64_t v103;
  uint64_t v104[4];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  sub_100018CC8();
  v106 = v2;
  v107 = v3;
  v5 = v4;
  v93 = v6;
  v101 = v7;
  v8 = sub_100018F50();
  v96 = *(_QWORD *)(v8 - 8);
  v98 = v8;
  sub_100018C80();
  __chkstk_darwin(v9, v10);
  sub_100019010();
  v95 = v11;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  sub_100018C80();
  __chkstk_darwin(v14, v15);
  sub_1000093C8();
  v16 = &v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate];
  *((_QWORD *)v16 + 1) = 0;
  v17 = swift_unknownObjectWeakInit(v16, 0);
  v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_peerSupportsHIDReportExtensions] = 0;
  v18 = &v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_safeInsets];
  *v18 = 0u;
  v18[1] = 0u;
  v19 = OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue;
  sub_100018C20(v17, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  v20 = v0;
  *(_QWORD *)&v0[v19] = static OS_dispatch_queue.main.getter();
  v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_accepted] = 0;
  v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_inited] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_negotiator] = 0;
  v21 = &v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoConfig];
  *v21 = 0u;
  v21[1] = 0u;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_clock] = 0;
  v22 = &v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings];
  if (qword_100077578 != -1)
    swift_once(&qword_100077578, sub_100009428);
  sub_100018BB0((uint64_t)&qword_10007C888, (uint64_t)&v105);
  v23 = unk_10007C890;
  v25 = (void *)qword_10007C898;
  v24 = unk_10007C8A0;
  swift_retain(unk_10007C890);
  v26 = v25;
  swift_bridgeObjectRetain(v24);
  v27 = sub_100019120();
  sub_100009494(v27, v28, (uint64_t)v26, v24);
  v30 = v29;
  sub_1000190F4();

  swift_release(v23);
  v89 = (uint64_t)v22;
  *v22 = v30;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_hidSidecarStream] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoStream] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoClient] = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_configurationTimer] = 0;
  v92 = v5;
  _bridgeAnyObjectToAny(_:)(objc_msgSend(v5, "copy"));
  v31 = sub_100019118();
  sub_100018C20(v31, (unint64_t *)&unk_100077C00, SidecarDisplayConfig_ptr);
  swift_dynamicCast(&v103, v104, (char *)&type metadata for Any + 8, v32, 7);
  v33 = (void *)v103;
  v100 = OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config;
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config] = v103;
  v34 = v101;
  sub_100019054((uint64_t)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_logger]);
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request] = v93;
  sub_100019054(v1);
  v35 = objc_allocWithZone((Class)type metadata accessor for SidecarDisplaySession.SessionVideoClientDelegate(0));
  v36 = v33;
  v37 = v93;
  v38 = sub_100017380(v1);
  *(_QWORD *)&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoClientDelegate] = v38;
  v39 = sub_1000190EC((uint64_t)v38, "uuid");
  ((void (*)(void))static UUID._unconditionallyBridgeFromObjectiveC(_:))();

  v40 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v96 + 32))(&v20[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid], v95, v98);
  v41 = sub_1000190EC(v40, "device");
  v91 = v13;
  v94 = v37;
  v90 = v36;
  if (!v41)
  {
    v48 = Logger.logObject.getter(0);
    v49 = static os_log_type_t.default.getter();
    if (sub_100018FF0(v48))
    {
      v50 = (uint8_t *)sub_10000F640(2);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "=== Sidecar Started ===", v50, 2u);
      sub_10000F604((uint64_t)v50);
    }

    goto LABEL_18;
  }
  v42 = v41;
  result = objc_msgSend(v41, "description");
  if (!result)
  {
    __break(1u);
    goto LABEL_31;
  }
  v44 = result;
  result = objc_msgSend(v42, "model");
  if (!result)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  v45 = result;
  v46 = (uint64_t)objc_msgSend(result, "length");
  v99 = v45;
  if (v46 < 1)
  {
    sub_100018C20(v46, &qword_100077C58, NSString_ptr);
    v47 = (id)((uint64_t (*)(const char *, uint64_t, uint64_t))NSString.init(stringLiteral:))("Mac", 3, 2);
  }
  else
  {
    v47 = v45;
  }
  v51 = v47;
  v52 = v44;
  v53 = v51;
  v54 = v52;
  v55 = Logger.logObject.getter(v54);
  v56 = (void *)static os_log_type_t.default.getter();
  if (os_log_type_enabled(v55, (os_log_type_t)v56))
  {
    v87 = v42;
    v88 = v55;
    v57 = sub_10000F640(42);
    v58 = (_QWORD *)sub_10000F640(16);
    v97 = sub_10000F640(64);
    v103 = (uint64_t)v53;
    v104[0] = v97;
    *(_DWORD *)v57 = 138544130;
    v59 = v53;
    sub_100018D94();
    *v58 = v53;

    *(_WORD *)(v57 + 12) = 2114;
    v103 = (uint64_t)v54;
    v60 = v54;
    sub_100018D94();
    v58[1] = v44;

    *(_WORD *)(v57 + 22) = 2082;
    v61 = sub_100051650();
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v64 = v63;

    v103 = sub_10000EC54(v62, v64, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v57 + 24);
    swift_bridgeObjectRelease(v64);
    *(_WORD *)(v57 + 32) = 2082;
    if (qword_100077580 != -1)
      swift_once(&qword_100077580, sub_1000143D8);
    v65 = qword_10007C8A8;
    v66 = unk_10007C8B0;
    sub_1000190B8();
    v103 = sub_10000EC54(v65, v66, v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v57 + 34);
    swift_bridgeObjectRelease(v66);
    _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v56, "=== Sidecar Started %{public}@ %{public}@ -> %{public}s IDS %{public}s ===", (uint8_t *)v57, 0x2Au);
    sub_100008414((uint64_t *)&unk_100077C60);
    sub_10001912C();
    sub_10000F604((uint64_t)v58);
    sub_10001912C();
    sub_10000F604(v97);
    sub_10000F604(v57);

  }
  else
  {

  }
  v34 = v101;
LABEL_18:
  v67 = qword_10007C888;
  v68 = unk_10007C890;
  v69 = (void *)qword_10007C898;
  v70 = *(void **)&v20[v100];
  swift_retain(unk_10007C890);
  v71 = v69;
  sub_100018F80();
  v72 = v70;
  LODWORD(v70) = sub_100014E1C(v72, (SEL *)&selRef_lowLatency);

  if ((_DWORD)v70 == 2)
  {
    v74 = *(void **)&v20[v100];
    swift_retain(v68);
    v75 = v71;
    sub_100018F80();
    v76 = v74;
    v77 = sub_10000FF58(v67, v68, v75);
    sub_1000190CC();

    swift_release(v68);
    if (v77 == 2)
      isa = 0;
    else
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v76, "setLowLatency:", isa);

  }
  sub_100019138(v73, (SEL *)&selRef_enableTimeSync);
  sub_10001916C();
  if (!v80)
  {
    v81 = v79;
    sub_10000F664(v89, (uint64_t)v104, 33);
    sub_100019030(v81 & 1, 6);
    v79 = sub_1000190D4();
  }
  sub_100019138(v79, (SEL *)&selRef_showTouchBar);
  sub_10001916C();
  if (!v80)
  {
    v83 = v82;
    sub_10000F664(v89, (uint64_t)v104, 33);
    sub_100019030(v83 & 1, 3);
    v82 = sub_1000190D4();
  }
  sub_100019138(v82, (SEL *)&selRef_showSideBar);
  sub_10001916C();
  if (!v80)
  {
    v85 = v84;
    sub_10000F664(v89, (uint64_t)v104, 33);
    sub_100019030(v85 & 1, 10);
    sub_1000190D4();
  }

  v102.receiver = v20;
  v102.super_class = (Class)sub_10001853C();
  v86 = objc_msgSendSuper2(&v102, "init");
  sub_100018C9C((uint64_t)v86, "setDelegate:");
  sub_100014E84();

  sub_1000190CC();
  swift_release(v68);

  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v34, v12);
  return v86;
}

uint64_t sub_100014E1C(void *a1, SEL *a2)
{
  id v2;
  uint64_t result;
  unsigned __int8 v4;

  v2 = sub_100018FD0(a1, a2);
  result = 2;
  if (v2)
  {
    v4 = 2;
    static Bool._conditionallyBridgeFromObjectiveC(_:result:)(v2, &v4);

    return v4;
  }
  return result;
}

uint64_t sub_100014E6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_configurationTimer);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_configurationTimer) = a1;
  return swift_unknownObjectRelease(v2);
}

void sub_100014E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t ObjectType;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD v64[5];
  uint64_t v65;
  uint64_t v66;

  sub_100018CC8();
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v60 = *(_QWORD *)(v2 - 8);
  v61 = v2;
  sub_100018C80();
  __chkstk_darwin(v3, v4);
  sub_100018D80();
  v62 = v5;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v52 - v8;
  v10 = type metadata accessor for DispatchTime(0);
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  sub_100018C80();
  __chkstk_darwin(v11, v12);
  sub_100018D80();
  v56 = v13;
  __chkstk_darwin(v14, v15);
  v57 = (char *)&v52 - v16;
  v17 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v17 - 8);
  v55 = v17;
  sub_100018C80();
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v22 - 8);
  v53 = v22;
  sub_100018C80();
  __chkstk_darwin(v23, v24);
  v25 = sub_100018DF4();
  v26 = type metadata accessor for OS_dispatch_source.TimerFlags(v25);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  sub_1000093C8();
  sub_100018C20(v29, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  v64[0] = _swiftEmptyArrayStorage;
  sub_1000057B8(&qword_100077E50, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v31 = v30;
  sub_100018FB8();
  sub_100018F68(&qword_100077E60);
  v32 = sub_100018E98();
  dispatch thunk of SetAlgebra.init<A>(_:)(v32, v33, v34, v35, v31);
  v36 = v63;
  v37 = (void **)(v63 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue);
  sub_100018BB0(v63 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue, (uint64_t)&v66);
  v38 = *v37;
  v39 = v38;
  v40 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v0, v38);

  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0, v26);
  ObjectType = swift_getObjectType(v40);
  v42 = sub_100018C4C((uint64_t)&unk_10006ACF8);
  swift_unknownObjectWeakInit(v42 + 16, v36);
  v64[4] = sub_100018AFC;
  v65 = v42;
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 1107296256;
  v64[2] = sub_10000C66C;
  v64[3] = &unk_10006AD10;
  v43 = _Block_copy(v64);
  swift_retain(v42);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_1000374A0();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v1, v21, v43, ObjectType);
  _Block_release(v43);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v55);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v1, v53);
  v44 = v65;
  swift_release(v42);
  v45 = swift_release(v44);
  v46 = v56;
  static DispatchTime.now()(v45);
  static DispatchTimeInterval.seconds(_:)(30.0);
  v47 = v57;
  + infix(_:_:)(v46, v9);
  sub_100019074((uint64_t)v9);
  v48 = v59;
  v49 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v49(v46, v59);
  sub_100015270((uint64_t)v9);
  v50 = v62;
  sub_1000152B4(v62);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v47, v9, v50, ObjectType);
  sub_100019074((uint64_t)v50);
  sub_100019074((uint64_t)v9);
  OS_dispatch_source.activate()();
  v51 = swift_unknownObjectRetain(v40);
  sub_100014E6C(v51);
  swift_unknownObjectRelease(v40);
  v49((uint64_t)v47, v48);
  sub_100018BBC();
}

void sub_100015220(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_1000152FC();

  }
}

uint64_t sub_100015270@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for DispatchTimeInterval.never(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000152B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 0;
  v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

void sub_1000152FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = sub_100018F50();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  sub_100018CB0();
  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, (uint64_t)v15);
  sub_100018F98(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_10001910C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v5 = sub_1000183B8(isa);

  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (_DWORD *)sub_10000F640(12);
    *v9 = 134217984;
    v14 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v9 + 1);
    sub_100019094((void *)&_mh_execute_header, v7, v8, "=== Session %lx Configuration Timeout ===");
    sub_10000F604((uint64_t)v9);
  }

  sub_100018C20(v10, (unint64_t *)&qword_100077C80, NSError_ptr);
  static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  sub_100018C3C();
  v13 = sub_100018C28(v11, v12, -201);
  sub_100016338((uint64_t)v13);
  sub_100015470();

  sub_100018F88();
}

void sub_100015470()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_configurationTimer);
  if (v1)
  {
    swift_getObjectType(*(_QWORD *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_configurationTimer));
    swift_unknownObjectRetain(v1);
    OS_dispatch_source.cancel()();
    sub_100014E6C(0);
    swift_unknownObjectRelease(v1);
  }
  else
  {
    sub_10000C644();
  }
}

void sub_1000154DC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  _BYTE v7[24];

  v1 = v0;
  sub_100015470();
  sub_100010E20(0);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoStream);
  if (v2)
  {
    v3 = v2;
    sub_10000D69C();
    sub_100010E14(0);

  }
  v4 = v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  sub_100018BB0(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, (uint64_t)v7);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  v6 = Strong;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream))
  {
    if (Strong)
    {
      swift_getObjectType(Strong);
      swift_unknownObjectRetain(v6);
      sub_100018EE4();
      swift_unknownObjectRelease(v6);
    }
    sub_100010DCC(0);
  }
  if (v6)
  {
    swift_getObjectType(v6);
    swift_unknownObjectRetain(v6);
    sub_100018EE4();
    swift_unknownObjectRelease_n(v6, 2);
  }
  sub_100018DE0();
}

void sub_1000155D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t ObjectType;
  _BYTE v5[24];

  sub_100015470();
  v1 = v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  sub_100018BB0(v0 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, (uint64_t)v5);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, ObjectType, v3);
    sub_100019118();
  }
  sub_10000C57C();
}

void SidecarDisplaySession.__deallocating_deinit()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  _DWORD *v26;
  id v27;
  id v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;
  uint64_t v34;

  sub_100018CC8();
  v1 = v0;
  v2 = sub_100018F50();
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  sub_100018CB0();
  sub_100018BB0((uint64_t)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid], (uint64_t)&v34);
  sub_100018F98(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_10001910C(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v6 = sub_1000183B8(isa);

  v7 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request], "device");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, "description");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v14 = sub_100018D44(v13, "model");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v18 = v15 & 0xFFFFFFFFFFFFLL;
    if (!v18)
    {
      swift_bridgeObjectRelease(v17);
      v17 = 0xE300000000000000;
      v15 = 6512973;
    }
    sub_100018F58();
    v19 = swift_bridgeObjectRetain(v12);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v20, v21))
    {

      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease_n(v17, 2);

      goto LABEL_12;
    }
    v22 = sub_10000F640(32);
    v30 = sub_10000F640(64);
    v31 = v6;
    v32 = v30;
    *(_DWORD *)v22 = 134218498;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 4);
    *(_WORD *)(v22 + 12) = 2082;
    sub_100018F58();
    v23 = sub_10000EC54(v15, v17, &v32);
    sub_100018DB8(v23);
    swift_bridgeObjectRelease_n(v17, 3);
    *(_WORD *)(v22 + 22) = 2082;
    swift_bridgeObjectRetain(v12);
    v24 = sub_10000EC54(v10, v12, &v32);
    sub_100018DB8(v24);
    swift_bridgeObjectRelease_n(v12, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "=== Sidecar Session %lx Ended %{public}s %{public}s ===", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy(v30, 2);
    sub_10000F604(v30);
    sub_10000F604(v22);

  }
  else
  {
    v20 = Logger.logObject.getter(0);
    v25 = static os_log_type_t.default.getter();
    v8 = (void *)v25;
    if (os_log_type_enabled(v20, v25))
    {
      v26 = (_DWORD *)sub_10000F640(12);
      *v26 = 134217984;
      v32 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v26 + 1);
      sub_100019094((void *)&_mh_execute_header, v20, (os_log_type_t)v8, "=== Sidecar Session %lx Ended ===");
      sub_10000F604((uint64_t)v26);
    }
  }

LABEL_12:
  v27 = *(id *)&v1[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_hidSidecarStream];
  sub_100018ED0();

  v28 = *(id *)&v1[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_videoSidecarStream];
  sub_100018ED0();

  v29 = (objc_class *)sub_10001853C();
  v33.receiver = v1;
  v33.super_class = v29;
  objc_msgSendSuper2(&v33, "dealloc");
  sub_100018BBC();
}

void SidecarDisplaySession.observeValue(forKeyPath:of:change:context:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  char *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  NSString v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  NSDictionary v43;
  objc_class *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  void **v57;
  void *v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  Swift::String v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  __int128 v76;
  uint64_t (*v77)(uint64_t);
  _QWORD *v78;
  void (*v79)();
  uint64_t v80;
  _QWORD v81[3];
  objc_super v82;

  sub_100018CC8();
  v6 = v5;
  v8 = v7;
  v9 = sub_100018F18();
  v73 = *(_QWORD *)(v9 - 8);
  sub_100018C80();
  __chkstk_darwin(v10, v11);
  v12 = sub_100018DF4();
  v13 = type metadata accessor for DispatchQoS(v12);
  __chkstk_darwin(v13, v14);
  sub_100018F28();
  v74 = v0;
  if (!v6 || v6 != v0)
  {
    if (v4)
      v38 = String._bridgeToObjectiveC()();
    else
      v38 = 0;
    sub_100018F0C();
    v39 = v78;
    if (v78)
    {
      v40 = sub_10000BE70(&v76, (uint64_t)v78);
      v41 = *(v39 - 1);
      __chkstk_darwin(v40, v40);
      sub_100018F28();
      (*(void (**)(uint64_t))(v41 + 16))(v2);
      v42 = _bridgeAnythingToObjectiveC<A>(_:)(v2, v39);
      sub_1000190A0(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
      sub_10000B910(&v76);
    }
    else
    {
      v42 = 0;
    }
    if (v8)
    {
      type metadata accessor for NSKeyValueChangeKey(0);
      sub_1000057B8(&qword_100077C70, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100058200);
      v43.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }
    else
    {
      v43.super.isa = 0;
    }
    v44 = (objc_class *)sub_10001853C();
    v82.receiver = v74;
    v82.super_class = v44;
    objc_msgSendSuper2(&v82, "observeValueForKeyPath:ofObject:change:context:", v38, v42, v43.super.isa, v6);

    swift_unknownObjectRelease(v42);
    goto LABEL_46;
  }
  v72 = v15;
  v16 = (__int128 *)0xE000000000000000;
  if (!v4)
  {
    v3 = 0;
    v66 = (void *)0xE000000000000000;
    goto LABEL_48;
  }
  v17 = v3 == 0x64656873696E6966 && v4 == (void *)0xE800000000000000;
  if (!v17 && (sub_100018FD8(0x64656873696E6966, 0xE800000000000000) & 1) == 0)
  {
    v45 = v3 == 0x737574617473 && v4 == (void *)0xE600000000000000;
    if (!v45 && (sub_100018FD8(0x737574617473, 0xE600000000000000) & 1) == 0)
    {
      while (1)
      {
        v66 = v4;
LABEL_48:
        *(_QWORD *)&v76 = 0;
        *((_QWORD *)&v76 + 1) = v16;
        v16 = &v76;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease(*((_QWORD *)&v76 + 1));
        *(_QWORD *)&v76 = 0xD000000000000014;
        *((_QWORD *)&v76 + 1) = 0x8000000100055F00;
        sub_100018F80();
        v67._countAndFlagsBits = v3;
        v67._object = v66;
        String.append(_:)(v67);
        sub_100005DD0();
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v76, *((_QWORD *)&v76 + 1), "ContinuityDisplay/SidecarDisplaySession.swift", 45, 2, 726, 0);
        __break(1u);
      }
    }
    v46 = sub_100018F0C();
    if (!v78)
      goto LABEL_37;
    sub_100018C20(v46, &qword_100077C78, SidecarStream_ptr);
    v48 = sub_100018C64((uint64_t)v81, (uint64_t)&v76, (uint64_t)&type metadata for Any + 8, v47);
    if ((v48 & 1) == 0)
      goto LABEL_46;
    v49 = (void *)v81[0];
    v50 = (uint64_t)sub_100018D44(v48, "status");
    if ((v50 & 0x4000000) != 0)
    {
      sub_100018C20(v50, (unint64_t *)&qword_100077C80, NSError_ptr);
      static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      sub_100018C3C();
      v53 = -456;
    }
    else
    {
      if ((v50 & 0x2000000) == 0)
      {
LABEL_41:

        goto LABEL_46;
      }
      sub_100018C20(v50, (unint64_t *)&qword_100077C80, NSError_ptr);
      static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
      sub_100018C3C();
      v53 = -455;
    }
    v54 = sub_100018C28(v51, v52, v53);
    v55 = (void *)_convertErrorToNSError(_:)(v54);

    sub_100018EF8(v56, "setError:");
    goto LABEL_41;
  }
  v18 = sub_100018F0C();
  if (!v78)
  {
LABEL_37:
    sub_10001893C((uint64_t)&v76, (uint64_t *)&unk_100077B70);
    goto LABEL_46;
  }
  sub_100018C20(v18, &qword_100077C88, SidecarRequest_ptr);
  v20 = sub_100018C64((uint64_t)v81, (uint64_t)&v76, (uint64_t)&type metadata for Any + 8, v19);
  if ((v20 & 1) != 0)
  {
    v21 = (void *)v81[0];
    v22 = sub_1000190FC(v20, "isFinished");
    if ((_DWORD)v22)
    {
      v23 = v74;
      v71 = v21;
      if ((sub_1000190FC((uint64_t)v22, "isCancelled") & 1) == 0)
      {
        v24 = objc_msgSend(v21, "error");
        if (v24)
        {
          v26 = v24;
          __chkstk_darwin(v24, v25);
          v69 = v27;
          v70 = v28;
          sub_100028A24((uint64_t (*)(void))sub_1000184A0);
          v29 = (void *)_convertErrorToNSError(_:)(v26);
          v30 = objc_msgSend(v29, "userInfo");
          v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v30, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String, v31);

          static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
          sub_100010138(v32, &v76);
          sub_100005DA4();
          v33 = sub_1000190CC();
          if (v78)
          {
            sub_100018C20(v33, (unint64_t *)&qword_100077C80, NSError_ptr);
            v35 = sub_100018C64((uint64_t)v81, (uint64_t)&v76, (uint64_t)&type metadata for Any + 8, v34);
            if ((v35 & 1) != 0)
            {
              v37 = (void *)v81[0];
              __chkstk_darwin(v35, v36);
              v69 = v37;
              sub_100028F80((uint64_t (*)(void))sub_10000DF50, 0, sub_100018B80, &v68);

            }
            else
            {

            }
          }
          else
          {

            sub_10001893C((uint64_t)&v76, (uint64_t *)&unk_100077B70);
          }
          v23 = v74;
        }
      }
      v57 = (void **)&v23[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue];
      sub_100018BB0((uint64_t)&v23[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue], (uint64_t)v81);
      v58 = *v57;
      v59 = sub_100018C4C((uint64_t)&unk_10006A990);
      *(_QWORD *)(v59 + 16) = v23;
      v79 = sub_10001846C;
      v80 = v59;
      *(_QWORD *)&v76 = _NSConcreteStackBlock;
      *((_QWORD *)&v76 + 1) = 1107296256;
      v77 = sub_10000C66C;
      v78 = &unk_10006A9A8;
      v60 = _Block_copy(&v76);
      v61 = v58;
      static DispatchQoS.unspecified.getter(v23);
      v75 = _swiftEmptyArrayStorage;
      sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v63 = v62;
      v64 = sub_100018FB8();
      sub_100018F68((unint64_t *)&qword_100077CA0);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v64, v65, v9, v63);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v1, v60);
      _Block_release(v60);

      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v1, v9);
      sub_1000190A0(*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8));
      swift_release(v80);
    }
    else
    {

    }
  }
LABEL_46:
  sub_100018BBC();
}

void sub_100016338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];

  v3 = (uint64_t)objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request), "isFinished");
  if ((v3 & 1) == 0)
  {
    if (a1)
    {
      __chkstk_darwin(v3, v4);
      v6[2] = a1;
      swift_errorRetain(a1);
      sub_100028F80(variable initialization expression of SidecarDisplaySession.delegate, 0, sub_100018B80, v6);
      swift_errorRelease(a1);
      v3 = _convertErrorToNSError(_:)(a1);
      v5 = (void *)v3;
    }
    else
    {
      v5 = 0;
    }
    sub_100018C9C(v3, "setError:");

  }
  sub_100018F88();
}

Swift::Void __swiftcall SidecarDisplaySession.accept()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t v19;

  sub_100018CC8();
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  sub_100018C80();
  __chkstk_darwin(v3, v4);
  v5 = sub_100018D04();
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_1000093E0();
  v8 = (void **)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue];
  sub_100018BB0((uint64_t)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue], (uint64_t)&v19);
  v9 = *v8;
  v10 = sub_100018C4C((uint64_t)&unk_10006A9E0);
  *(_QWORD *)(v10 + 16) = v0;
  v17[5] = sub_1000184C4;
  v18 = v10;
  v17[1] = _NSConcreteStackBlock;
  v17[2] = 1107296256;
  v11 = sub_100019088((uint64_t)sub_10000C66C);
  v12 = v9;
  static DispatchQoS.unspecified.getter(v0);
  v17[0] = _swiftEmptyArrayStorage;
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = v13;
  v15 = sub_100018FB8();
  sub_100018F68((unint64_t *)&qword_100077CA0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v17, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1);
  _Block_release(v11);

  sub_100018E30();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
  swift_release(v18);
  sub_100018BBC();
}

void sub_100016598(uint64_t a1)
{
  *(_BYTE *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_accepted) = 1;
  sub_100016B24();
}

void sub_1000165C8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  sub_100018CC8();
  v6 = v5;
  sub_100018F18();
  sub_100018C80();
  __chkstk_darwin(v7, v8);
  v22 = sub_100018D04();
  v9 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v10);
  sub_1000093E0();
  v11 = (void **)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue];
  sub_100018BB0((uint64_t)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_queue], (uint64_t)&v24);
  v12 = *v11;
  v13 = (_QWORD *)sub_100018C8C((uint64_t)&unk_10006AD48, 48);
  v13[2] = v3;
  v13[3] = v4;
  v13[4] = v6;
  v13[5] = v0;
  v23 = v13;
  v14 = sub_100019088((uint64_t)sub_10000C66C);
  v15 = v12;
  swift_errorRetain(v3);
  swift_retain(v6);
  static DispatchQoS.unspecified.getter(v0);
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = v16;
  sub_100018FB8();
  sub_100018F68((unint64_t *)&qword_100077CA0);
  v18 = sub_100018E98();
  dispatch thunk of SetAlgebra.init<A>(_:)(v18, v19, v20, v21, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v1, v14);
  _Block_release(v14);

  sub_100018E30();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v22);
  swift_release(v23);
  sub_100018BBC();
}

uint64_t type metadata accessor for SidecarDisplaySession.SessionVideoClientDelegate(uint64_t a1)
{
  return sub_100017440(a1, (uint64_t *)&unk_100077DD8, (uint64_t)&nominal type descriptor for SidecarDisplaySession.SessionVideoClientDelegate);
}

uint64_t sub_100016770(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;

  if (!a1)
    return a2();
  v3 = swift_errorRetain(a1);
  swift_willThrow(v3);
  swift_errorRetain(a1);
  sub_100016338(a1);
  swift_errorRelease(a1);
  return swift_errorRelease(a1);
}

uint64_t sub_1000167FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  __int128 v6;

  v3 = sub_100014E1C(*(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config), (SEL *)&selRef_lowLatency);
  if (v3 != 2 && (v3 & 1) == 0)
  {
    result = SidecarGetProcessUniqueID();
    v6 = xmmword_1000589A0;
  }
  else
  {
    sub_100018C20(v3, &qword_100077E08, AVCDaemonProcessInfo_ptr);
    result = sub_1000168B4();
    v6 = xmmword_100058990;
  }
  *(_OWORD *)a1 = v6;
  strcpy((char *)(a1 + 16), "AVCVideoStream");
  *(_BYTE *)(a1 + 31) = -18;
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1000168B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[5];
  __int128 v18;
  uint64_t v19;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v16[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(AVCDaemonProcessInfo), "getDaemonProcessInfo");
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable, v6);

  v16[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(AVCKeyDaemonProcessInfoError);
  v16[1] = v8;
  AnyHashable.init<A>(_:)(v17, v16, &type metadata for String, &protocol witness table for String);
  sub_1000100F0(v7, &v18);
  sub_10000BE94((uint64_t)v17);
  if (v19)
  {
    v9 = sub_100008414((uint64_t *)&unk_100077E10);
    if ((swift_dynamicCast(v16, &v18, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      v10 = v16[0];
      v11 = Logger.init(subsystem:category:)(0xD000000000000011, 0x8000000100056270, 0x79616C70736964, 0xE700000000000000);
      __chkstk_darwin(v11, v12);
      *(&v15 - 2) = v10;
      sub_100028F80((uint64_t (*)(void))sub_100017F7C, 0, sub_100018B80, &v15 - 4);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
      swift_errorRelease(v10);
    }
  }
  else
  {
    sub_10001893C((uint64_t)&v18, (uint64_t *)&unk_100077B70);
  }
  *(_QWORD *)&v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVCKeyDaemonProcessInfoUniquePID);
  *((_QWORD *)&v18 + 1) = v13;
  AnyHashable.init<A>(_:)(v17, &v18, &type metadata for String, &protocol witness table for String);
  sub_1000100F0(v7, &v18);
  swift_bridgeObjectRelease(v7);
  sub_10000BE94((uint64_t)v17);
  if (v19)
  {
    if (swift_dynamicCast(v16, &v18, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6))
      return v16[0];
  }
  else
  {
    sub_10001893C((uint64_t)&v18, (uint64_t *)&unk_100077B70);
  }
  return 0;
}

void sub_100016B24()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void *, uint64_t);
  void *v5;
  NSString v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  NSString v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t);
  uint64_t v20;

  if (v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_inited] == 1
    && v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_accepted] == 1)
  {
    sub_1000167FC((uint64_t)v16);
    v1 = v16[0];
    v2 = v16[1];
    v3 = v18;
    v4 = v19;
    v5 = *(void **)&v0[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request];
    v6 = String._bridgeToObjectiveC()();
    v7 = sub_100018C4C((uint64_t)&unk_10006AA78);
    *(_QWORD *)(v7 + 16) = v0;
    v19 = sub_1000186E4;
    v20 = v7;
    v8 = sub_100019024((uint64_t)&unk_10006AA90, (uint64_t)_NSConcreteStackBlock, 1107296256, v17, v18);
    v9 = v20;
    v10 = v0;
    swift_release(v9);
    objc_msgSend(v5, "openStreamForType:flags:identifier:processUniqueID:completion:", v1, v2, v6, v4, v8);
    _Block_release(v8);
    swift_bridgeObjectRelease(v3);

    v11 = String._bridgeToObjectiveC()();
    v12 = sub_100018C4C((uint64_t)&unk_10006AAC8);
    *(_QWORD *)(v12 + 16) = v10;
    v19 = sub_10001870C;
    v20 = v12;
    v13 = sub_100019024((uint64_t)&unk_10006AAE0, (uint64_t)_NSConcreteStackBlock, 1107296256, v17, v18);
    v14 = v20;
    v15 = v10;
    swift_release(v14);
    objc_msgSend(v5, "openStreamForType:identifier:completion:", 2, v11, v13);
    _Block_release(v13);

  }
}

void sub_100016CE8(void *a1, uint64_t a2, char *a3)
{
  id v5;
  char *v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD aBlock[5];
  uint64_t v21;
  char v22[24];

  if (a1)
  {
    v5 = a1;
    sub_100010DCC(a1);
    v6 = &a3[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate];
    swift_beginAccess(&a3[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate], v22, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v6);
    if (Strong)
    {
      v8 = Strong;
      v9 = *((_QWORD *)v6 + 1);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(char *, id, uint64_t, uint64_t))(v9 + 32))(a3, v5, ObjectType, v9);
      swift_unknownObjectRelease(v8);
    }
    v11 = swift_allocObject(&unk_10006ABE0, 24, 7);
    *(_QWORD *)(v11 + 16) = a3;
    aBlock[4] = sub_1000187E0;
    v21 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001C314;
    aBlock[3] = &unk_10006ABF8;
    v12 = _Block_copy(aBlock);
    v13 = v21;
    v14 = a3;
    swift_release(v13);
    objc_msgSend(v5, "activateWithCompletion:", v12);
    _Block_release(v12);

  }
  else
  {
    sub_100018AA4(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v18 = v17;
    swift_errorRetain(a2);
    v19 = sub_100018044(v16, v18, -101, 0xD000000000000048, 0x8000000100056220, a2);
    swift_willThrow(v19);
  }
}

uint64_t sub_100016EC0(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = swift_allocObject(&unk_10006AC30, 24, 7);
  *(_QWORD *)(v3 + 16) = a2;
  v4 = a2;
  sub_1000165C8();
  return swift_release(v3);
}

void sub_100016F28(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100016F9C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  _QWORD *v7;
  id v8;
  id v9;

  v7 = (_QWORD *)sub_100018C8C(a4, 40);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v8 = a1;
  swift_errorRetain(a2);
  v9 = a3;
  sub_1000165C8();
  return swift_release(v7);
}

void sub_100017014(void *a1, uint64_t a2, char *a3)
{
  char *v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  char *v20;
  _QWORD aBlock[5];
  uint64_t v22;
  char v23[24];

  if (a1)
  {
    v5 = &a3[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate];
    swift_beginAccess(&a3[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate], v23, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v5);
    if (Strong)
    {
      v7 = Strong;
      v8 = *((_QWORD *)v5 + 1);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(char *, void *, uint64_t, uint64_t))(v8 + 56))(a3, a1, ObjectType, v8);
      swift_unknownObjectRelease(v7);
    }
    else
    {
      v15 = a1;
    }
    v16 = swift_allocObject(&unk_10006AB40, 32, 7);
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a1;
    aBlock[4] = sub_100018770;
    v22 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001C314;
    aBlock[3] = &unk_10006AB58;
    v17 = _Block_copy(aBlock);
    v18 = v22;
    v19 = a1;
    v20 = a3;
    swift_release(v18);
    objc_msgSend(v19, "activateWithCompletion:", v17);
    _Block_release(v17);

  }
  else
  {
    sub_100018AA4(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v13 = v12;
    swift_errorRetain(a2);
    v14 = sub_100018044(v11, v13, -101, 0xD000000000000043, 0x80000001000561B0, a2);
    swift_willThrow(v14);
  }
}

uint64_t sub_1000171F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;

  v5 = swift_allocObject(&unk_10006AB90, 32, 7);
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = a2;
  v7 = a3;
  sub_1000165C8();
  return swift_release(v5);
}

uint64_t sub_100017260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _BYTE v9[24];

  v4 = a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 64))(a1, a2, ObjectType, v7);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

id SidecarDisplaySession.close(error:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  if (!a1)
    return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request), "cancel");
  v3 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request);
  swift_errorRetain(a1);
  v4 = (void *)_convertErrorToNSError(_:)(a1);
  objc_msgSend(v3, "setError:", v4);

  return (id)swift_errorRelease(a1);
}

id sub_100017380(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  swift_unknownObjectWeakInit(&v1[OBJC_IVAR____TtCC17ContinuityDisplay21SidecarDisplaySessionP33_72778A0D8780EB3FED7F582200B6777426SessionVideoClientDelegate_owner], 0);
  v3 = &v1[OBJC_IVAR____TtCC17ContinuityDisplay21SidecarDisplaySessionP33_72778A0D8780EB3FED7F582200B6777426SessionVideoClientDelegate_logger];
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for SidecarDisplaySession.SessionVideoClientDelegate(0);
  v6 = objc_msgSendSuper2(&v8, "init");
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v6;
}

uint64_t type metadata accessor for SidecarDisplaySession(uint64_t a1)
{
  return sub_100017440(a1, (uint64_t *)&unk_100077D30, (uint64_t)&nominal type descriptor for SidecarDisplaySession);
}

uint64_t sub_100017440(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_100017470(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  id v14;
  uint64_t v15;

  v2 = v1;
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134349056;
    v14 = objc_msgSend(v3, "streamToken");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 4);

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AVC[%{public}ld] First Frame", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {

  }
  Strong = swift_unknownObjectWeakLoadStrong(v2+ OBJC_IVAR____TtCC17ContinuityDisplay21SidecarDisplaySessionP33_72778A0D8780EB3FED7F582200B6777426SessionVideoClientDelegate_owner);
  if (Strong)
  {
    v8 = (void *)Strong;
    v9 = Strong + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
    swift_beginAccess(Strong + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, &v14, 0, 0);
    v10 = swift_unknownObjectWeakLoadStrong(v9);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)(v9 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, uint64_t))(v12 + 88))(v8, ObjectType, v12);

      swift_unknownObjectRelease(v11);
    }
    else
    {

    }
  }
}

void sub_100017644(void *a1, char a2)
{
  sub_100017788(a1, a2, "AVC[%{public}ld] Paused: %{BOOL}d");
}

void sub_1000176AC(void *a1, char a2)
{
  sub_100017788(a1, a2, "AVC[%{public}ld] Stalled: %{BOOL}d");
}

void sub_100017714(void *a1, char a2)
{
  sub_100017788(a1, a2, "AVC[%{public}ld] Degraded: %{BOOL}d");
}

void sub_10001777C(void *a1, char a2)
{
  sub_100017788(a1, a2, "AVC[%{public}ld] Suspended: %{BOOL}d");
}

void sub_100017788(void *a1, char a2, const char *a3)
{
  id v5;
  os_log_type_t v6;
  uint64_t v7;
  NSObject *log;
  int v9;
  id v10;
  uint64_t v11;

  v5 = a1;
  log = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter();
  if (sub_100018FF0(log))
  {
    v7 = sub_10000F640(18);
    *(_DWORD *)v7 = 134349312;
    v10 = sub_1000190EC(v7, "streamToken");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v7 + 4);

    *(_WORD *)(v7 + 12) = 1024;
    v9 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 14);
    _os_log_impl((void *)&_mh_execute_header, log, v6, a3, (uint8_t *)v7, 0x12u);
    sub_10000F604(v7);

    sub_100018DE0();
  }
  else
  {

  }
}

void sub_1000178FC(void *a1)
{
  id v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;
  id v5;
  uint64_t v6;

  v1 = a1;
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v3 = 134349056;
    v5 = objc_msgSend(v1, "streamToken");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v5, &v6, v3 + 4);

    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "AVC[%{public}ld] Last Frame", v3, 0xCu);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

void sub_100017A68(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  id v17;
  uint64_t v18;

  v2 = v1;
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134349056;
    v17 = objc_msgSend(v3, "streamToken");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v6 + 4);

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AVC[%{public}ld] Terminated", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {

  }
  sub_100018AA4(0, (unint64_t *)&qword_100077C80, NSError_ptr);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  v9 = sub_100018044(v7, v8, -401, 0, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2+ OBJC_IVAR____TtCC17ContinuityDisplay21SidecarDisplaySessionP33_72778A0D8780EB3FED7F582200B6777426SessionVideoClientDelegate_owner);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = Strong + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
    swift_beginAccess(Strong + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, &v17, 0, 0);
    v13 = swift_unknownObjectWeakLoadStrong(v12);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)(v12 + 8);
      ObjectType = swift_getObjectType(v13);
      (*(void (**)(void *, id, uint64_t, uint64_t))(v15 + 104))(v11, v9, ObjectType, v15);

      swift_unknownObjectRelease(v14);
      return;
    }

  }
}

void sub_100017CA8(void *a1, uint64_t a2)
{
  sub_100017D28(a1, a2, "AVC[%{public}ld] Screen Attrs Changed");
}

void sub_100017D1C(void *a1, uint64_t a2)
{
  sub_100017D28(a1, a2, "AVC[%{public}ld] Video Attrs Changed");
}

void sub_100017D28(void *a1, uint64_t a2, const char *a3)
{
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *log;
  id v8;
  uint64_t v9;

  v4 = a1;
  log = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter();
  if (sub_100018FF0(log))
  {
    v6 = (uint8_t *)sub_10000F640(12);
    *(_DWORD *)v6 = 134349056;
    v8 = sub_100018D44((uint64_t)v6, "streamToken");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4);

    _os_log_impl((void *)&_mh_execute_header, log, v5, a3, v6, 0xCu);
    sub_10000F604((uint64_t)v6);

    sub_100018E6C();
  }
  else
  {

    sub_100018CE0(log);
  }
}

void sub_100017E74()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.SessionVideoClientDelegate", 44, "init()", 6, 0);
  __break(1u);
}

id sub_100017EC0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SidecarDisplaySession.SessionVideoClientDelegate(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void SidecarDisplaySession.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.SidecarDisplaySession", 39, "init()", 6, 0);
  __break(1u);
}

unint64_t sub_100017F7C()
{
  return 0xD000000000000014;
}

uint64_t sub_100017F98(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) >= 5)
    return 5;
  else
    return (0x302010004uLL >> (8 * (a1 + 1)));
}

uint64_t sub_100017FC0()
{
  uint64_t result;

  result = sub_100027624(3422513, 0xE300000000000000);
  qword_100077BE0 = result;
  return result;
}

uint64_t sub_100017FE8()
{
  uint64_t result;

  result = sub_100027624(0x3030312E353133, 0xE700000000000000);
  qword_100077BE8 = result;
  return result;
}

uint64_t sub_10001801C(uint64_t result)
{
  _QWORD *v1;

  *v1 &= result;
  return result;
}

BOOL sub_10001802C(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_100018038(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

id sub_100018044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  NSString v21;
  Class isa;
  id v23;
  uint64_t v25;
  _QWORD *v26;
  char v27[8];
  _QWORD v28[3];
  void *v29;
  uint64_t v30;

  v7 = v6;
  v30 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  if (a5)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    v29 = &type metadata for String;
    v28[0] = a4;
    v28[1] = a5;
    sub_100009E20((uint64_t)v28, v12, v13);
  }
  if (a6)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v16 = v15;
    swift_getErrorValue(a6, v27, &v25);
    v17 = v25;
    v18 = v26;
    v29 = v26;
    v19 = sub_100018A08(v28);
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*(v18 - 1) + 16))(v19, v17, v18);
    sub_100009E20((uint64_t)v28, v14, v16);
  }
  v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v21 = String._bridgeToObjectiveC()();
  sub_1000190F4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_1000190F4();
  v23 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, a3, isa);

  swift_errorRelease(a6);
  return v23;
}

id sub_1000181EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  Class isa;
  NSString v9;
  id v10;

  if (a2 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001891C(a1, a2);
  }
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v4, "initWithData:type:", isa, v9, swift_bridgeObjectRelease(a4).n128_f64[0]);

  return v10;
}

id sub_10001828C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  NSData v8;
  NSData v9;
  NSDictionary v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v17;

  v4 = v3;
  v8.super.isa = Data._bridgeToObjectiveC()().super.isa;
  if (a3)
  {
    v10.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v9.super.isa = (Class)swift_bridgeObjectRelease(a3).n128_u64[0];
  }
  else
  {
    v10.super.isa = 0;
  }
  v17 = 0;
  v11 = objc_msgSend(v4, "initWithOffer:options:error:", v8.super.isa, v10.super.isa, &v17, *(double *)&v9.super.isa);

  v12 = v17;
  if (v11)
  {
    v13 = v17;
  }
  else
  {
    v14 = v17;
    _convertNSErrorToError(_:)(v12);

    swift_willThrow(v15);
  }
  sub_100009320(a1, a2);
  return v11;
}

uint64_t sub_1000183B8(void *a1)
{
  id v1;
  unsigned int v2;
  _QWORD v4[2];

  v1 = a1;
  v4[0] = 0;
  v4[1] = 0;
  objc_msgSend(v1, "getUUIDBytes:", v4);
  v2 = v4[0];

  return bswap32(v2);
}

uint64_t sub_100018424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008414((uint64_t *)&unk_100077B70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10001846C()
{
  sub_1000154DC();
  sub_100005D94();
}

uint64_t sub_100018488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018498(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000184A0()
{
  uint64_t v0;

  swift_errorRetain(*(_QWORD *)(v0 + 16));
  sub_100005D94();
}

void sub_1000184C4()
{
  uint64_t v0;

  sub_100016598(*(_QWORD *)(v0 + 16));
}

void sub_1000184CC(_BYTE *a1@<X8>)
{
  char v2;

  SidecarDisplaySession.peerSupportsHIDReportExtensions.getter();
  *a1 = v2 & 1;
  sub_100005D94();
}

void sub_1000184F4(char *a1)
{
  sub_1000104E0(*a1);
  sub_100005D94();
}

void sub_100018514(uint64_t *a1@<X8>)
{
  *a1 = SidecarDisplaySession.clock.getter();
  sub_100005D94();
}

uint64_t sub_10001853C()
{
  return type metadata accessor for SidecarDisplaySession(0);
}

uint64_t sub_100018544(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[20];

  v5[0] = &unk_1000589F8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[4] = &unk_100058A10;
    v5[5] = &unk_100058A28;
    v5[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[7] = &unk_100058A10;
    v5[8] = &unk_100058A10;
    v5[9] = &unk_100058A40;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[10] = *(_QWORD *)(result - 8) + 64;
      v5[11] = &unk_100058A58;
      v5[12] = &unk_100058A40;
      v5[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[14] = &unk_100058A40;
      v5[15] = &unk_100058A40;
      v5[16] = &unk_100058A40;
      v5[17] = &unk_100058A40;
      v5[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[19] = &unk_100058A40;
      return swift_updateClassMetadata2(a1, 256, 20, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t sub_100018634()
{
  return type metadata accessor for SidecarDisplaySession.SessionVideoClientDelegate(0);
}

uint64_t sub_10001863C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SidecarDisplaySession.Config()
{
  return &type metadata for SidecarDisplaySession.Config;
}

uint64_t sub_1000186C4()
{
  uint64_t v0;

  sub_1000190E4();
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000186E4(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100016F9C(a1, a2, *(void **)(v2 + 16), (uint64_t)&unk_10006ABB8);
}

uint64_t sub_10001870C(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100016F9C(a1, a2, *(void **)(v2 + 16), (uint64_t)&unk_10006AB18);
}

void sub_100018738()
{
  uint64_t v0;

  sub_100017014(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_100018754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000190E4();
  sub_100019038();
  v0 = sub_100018FA8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100018770(uint64_t a1)
{
  uint64_t v1;

  return sub_1000171F4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100018778()
{
  uint64_t v0;

  return sub_100017260(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018794()
{
  uint64_t v0;

  sub_1000190E4();
  swift_errorRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1000187C4()
{
  uint64_t v0;

  sub_100016CE8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_1000187E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100016EC0(a1, *(void **)(v1 + 16));
}

void sub_1000187E8()
{
  uint64_t v0;

  sub_100012DF4(*(_QWORD *)(v0 + 16));
}

void sub_100018800(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  sub_100008414(a3);
  v3 = sub_100019120();
  v4(v3);
  sub_100005D94();
}

void sub_10001883C(uint64_t a1, unint64_t a2, void *a3, SEL *a4)
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100009320(a1, a2);
  objc_msgSend(a3, *a4, isa);

}

uint64_t sub_10001889C(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "streamKey");

  if (!v2)
    return 0;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100018908(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100009364(result, a2);
  return result;
}

uint64_t sub_10001891C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100009320(result, a2);
  return result;
}

uint64_t sub_100018930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

void sub_10001893C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100008414(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_100005D94();
}

uint64_t sub_100018974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

unint64_t sub_100018980()
{
  unint64_t result;

  result = qword_100077E30;
  if (!qword_100077E30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100077E30);
  }
  return result;
}

uint64_t sub_1000189BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100010F84(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_1000189C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100019038();
  v0 = sub_100018FA8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000189DC()
{
  uint64_t v0;

  return sub_100011218(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000189E4(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakDestroy(a1, a2);
  return a1;
}

_QWORD *sub_100018A08(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100018A44(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "data");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100018AA4(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v4;

  if (!*a2)
  {
    v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }
  sub_100005D94();
}

uint64_t sub_100018AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_100018AFC()
{
  uint64_t v0;

  sub_100015220(v0);
}

uint64_t sub_100018B04()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100018B38()
{
  uint64_t v0;

  return sub_100016770(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_100018BB0(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0, 0);
}

id sub_100018BD4(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 3240), a1);
}

uint64_t sub_100018BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return swift_dynamicCast(v5 - 224, v5 - 128, v4 + 8, a4, 6);
}

uint64_t sub_100018BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return swift_dynamicCast(a1, v4 - 128, a3, a4, 6);
}

void sub_100018C08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  sub_100018800(v3 - 160, v3 - 128, a3);
}

uint64_t sub_100018C14()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_100018C20(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  sub_100018AA4(0, a2, a3);
}

id sub_100018C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100018044(a1, a2, a3, 0, 0, 0);
}

uint64_t sub_100018C4C(uint64_t a1)
{
  return swift_allocObject(a1, 24, 7);
}

void sub_100018C58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v3;

  v3 = *(void **)(v2 + a2);
  *(_QWORD *)(v2 + a2) = a1;

}

uint64_t sub_100018C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6);
}

void sub_100018C6C(uint64_t a1@<X8>)
{
  uint64_t v1;

}

uint64_t sub_100018C74()
{
  uint64_t v0;

  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_100018C8C(uint64_t a1, uint64_t a2)
{
  return swift_allocObject(a1, a2, 7);
}

uint64_t sub_100018C94()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

id sub_100018C9C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void sub_100018CA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_10001893C(v2 - 128, a2);
}

void sub_100018CE0(id a1)
{

}

uint64_t sub_100018CF4()
{
  uint64_t v0;

  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_100018CFC()
{
  uint64_t v0;

  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v0 - 160);
}

uint64_t sub_100018D04()
{
  return type metadata accessor for DispatchQoS(0);
}

uint64_t sub_100018D20()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100009320(v0, v1);
}

uint64_t sub_100018D2C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001891C(v1, v0);
}

id sub_100018D44(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100018D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0);
}

id sub_100018D68(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100018D74()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009320(v1, v0);
}

uint64_t sub_100018D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 152, v1, v0);
}

double sub_100018DAC()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 160) = 0u;
  *(_OWORD *)(v0 - 144) = 0u;
  return result;
}

uint64_t sub_100018DB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 136, v1, v2);
}

uint64_t sub_100018DCC(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t sub_100018DF4()
{
  return 0;
}

id sub_100018E10(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 3240), a1);
}

id sub_100018E24()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2600));
}

uint64_t sub_100018E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v1, v0);
}

id sub_100018E44(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 3240), a1);
}

uint64_t sub_100018E58(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  a9 = 0;
  a10 = a2;
  return static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &a9);
}

void sub_100018E80(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_100018800((uint64_t)va, (uint64_t)va1, a3);
}

uint64_t sub_100018E98()
{
  uint64_t v0;

  return v0 - 160;
}

NSString sub_100018EB4()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_100018EC8()
{
  return swift_willThrow();
}

void sub_100018ED0()
{
  void *v0;

  sub_100010CA0(v0, 0);
}

uint64_t sub_100018EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v2, v1);
}

id sub_100018EF8(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_100018F04(uint64_t a1, uint64_t a2)
{
  return sub_10000B26C(a1, a2);
}

uint64_t sub_100018F0C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_100018424(v0, v1 - 168);
}

uint64_t sub_100018F18()
{
  return type metadata accessor for DispatchWorkItemFlags(0);
}

id sub_100018F40(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_100018F48()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_100018F50()
{
  return type metadata accessor for UUID(0);
}

uint64_t sub_100018F58()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100018F60()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

void sub_100018F68(unint64_t *a1)
{
  uint64_t *v1;

  sub_1000084BC(a1, v1);
}

NSNumber sub_100018F70()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_100018F80()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_100018F98@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v3, v2);
}

uint64_t sub_100018FA8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100018FB8()
{
  uint64_t *v0;

  return sub_100008414(v0);
}

void sub_100018FC0(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;

  sub_10001883C(v4, v5, v6, a4);
}

id sub_100018FD0(void *a1, SEL *a2)
{
  return objc_msgSend(a1, *a2);
}

uint64_t sub_100018FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0);
}

uint64_t sub_100018FE8(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL sub_100018FF0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_100018FF8()
{
  uint64_t v0;

  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_100019004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return sub_100018424(v6, (uint64_t)va);
}

void *sub_100019024@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = v5;
  a5 = a1;
  return _Block_copy(&a2);
}

void sub_100019030(int a1, uint64_t a2)
{
  sub_10000A838(a1, a2);
}

void sub_100019038()
{
  uint64_t v0;

}

id sub_100019040()
{
  void *v0;

  return v0;
}

void sub_10001904C()
{
  uint64_t v0;

}

uint64_t sub_100019054(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v2, v3);
}

uint64_t sub_100019060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100019068()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100009364(v0, v1);
}

uint64_t sub_100019074(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

id sub_10001907C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

void *sub_100019088@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = a1;
  *(_QWORD *)(v2 - 128) = v1;
  return _Block_copy((const void *)(v2 - 152));
}

void sub_100019094(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000190A0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_1000190AC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100009320(v0, v1);
}

uint64_t sub_1000190B8()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000190C0()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100018908(v1, v0);
}

uint64_t sub_1000190CC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000190D4()
{
  uint64_t v0;

  return swift_endAccess(v0 - 144);
}

uint64_t sub_1000190DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(va);
}

void sub_1000190E4()
{
  uint64_t v0;

}

id sub_1000190EC(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000190F4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_1000190FC(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100019104()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_10001910C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_100019118()
{
  uint64_t v0;

  return swift_unknownObjectRelease(v0);
}

uint64_t sub_100019120()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001912C()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 2);
}

uint64_t sub_100019138(uint64_t a1, SEL *a2)
{
  void *v2;

  return sub_100014E1C(v2, a2);
}

uint64_t sub_100019154()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009364(v1, v0);
}

id sub_100019160(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 56) + 8 * a1);
}

id sub_100019178()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 2600));
}

_QWORD *sub_100019184(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _BYTE v17[40];
  _QWORD *v18;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    v18 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    for (i = a1 + 32; ; i += 40)
    {
      sub_10001B8EC(i, (uint64_t)v17);
      swift_beginAccess(a2, v16, 32, 0);
      v7 = *a2;
      v8 = *(_QWORD *)(*a2 + 16);
      sub_10001B940((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B928);
      sub_10001B940((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B928);
      if (!v8)
        break;
      v9 = sub_100035C2C((uint64_t)v17);
      if ((v10 & 1) == 0)
        break;
      v11 = *(void **)(*(_QWORD *)(v7 + 56) + 8 * v9);
      swift_endAccess(v16);
      v12 = v11;
      sub_10001B940((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
      v13 = sub_10001B940((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      if (!--v3)
        return v18;
    }
    swift_endAccess(v16);
    result = (_QWORD *)sub_10001B940((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
    __break(1u);
  }
  return result;
}

id sub_1000192E8(uint64_t a1)
{
  uint64_t v1;
  id v3;
  Class isa;
  id v5;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  sub_10000F6CC((uint64_t)v3, &qword_100078680, UIView_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, "initWithArrangedSubviews:", isa, swift_bridgeObjectRelease(a1).n128_f64[0]);

  return v5;
}

id sub_100019368()
{
  return sub_100019390(&OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_widthConstraint, &OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_barWidth);
}

id sub_10001937C()
{
  return sub_100019390(&OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMarginConstraint, &OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMargin);
}

id sub_100019390(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  id result;

  result = *(id *)(v2 + *a1);
  if (result)
    return objc_msgSend(result, "setConstant:", *(double *)(v2 + *a2));
  return result;
}

id sub_1000193B4()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMarginConstraint);
  if (result)
    return objc_msgSend(result, "setConstant:", -*(double *)(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMargin));
  return result;
}

void sub_1000193E4(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMarginConstraint);
}

void sub_1000193F0(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMarginConstraint);
}

void sub_1000193FC(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_widthConstraint);
}

uint64_t sub_100019410(double a1, double a2, double a3)
{
  char *v3;
  unint64_t v4;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t p_base_meths;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  id v16;
  _QWORD *v17;
  id v18;
  id v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _BOOL8 v25;
  Swift::Int v26;
  char v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t inited;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  id v60;
  char *v61;
  id v62;
  id v63;
  id v64;
  objc_class *v65;
  id v66;
  void *v67;
  id v68;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  unint64_t v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  int64_t v82;
  id v83;
  id v84;
  id v85;
  id v86;
  uint64_t result;
  id v88;
  void *v89;
  void *v90;
  char *v91;
  objc_super v92;
  char v93[152];
  char v94[192];
  char v95[112];
  _QWORD *v96;
  _QWORD *v97;
  _BYTE v98[40];
  _QWORD v99[2];
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 v107;

  sub_10001BAD4(OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate);
  *(_QWORD *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMarginConstraint] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMarginConstraint] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_widthConstraint] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonIdentifiers] = &off_100069920;
  *(_QWORD *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController__lastDownButton] = 0;
  v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_initalToggleSelected] = 0;
  *(double *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_barWidth] = a1;
  *(double *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMargin] = a2;
  *(double *)&v3[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMargin] = a3;
  v97 = _swiftEmptyDictionarySingleton;
  v8 = 9;
  v91 = v3;
  v9 = v3;
  v10 = (char *)&unk_100069940;
  p_base_meths = (unint64_t)sub_10001B928;
  v12 = (uint64_t)sub_10001B978;
  while (1)
  {
    sub_10001B8EC((uint64_t)v10, (uint64_t)v98);
    v13 = sub_10001B8EC((uint64_t)v98, (uint64_t)v99);
    if (v102 == 1)
    {
      v15 = v99[0] == 8 && v99[1] == 6;
      if (!v15 || (v100 || v101 != 0xE000000000000000) && (sub_10001BAC4(v13, v14, v100, v101) & 1) == 0)
      {
LABEL_13:
        v16 = objc_allocWithZone((Class)_s12StickyButtonCMa());
        sub_10001BA20();
        sub_10001BA20();
        v17 = sub_1000386D0((uint64_t)v98);
        goto LABEL_22;
      }
LABEL_18:
      v19 = objc_allocWithZone((Class)_s6ButtonCMa());
LABEL_20:
      sub_10001BA20();
      sub_10001BA20();
      goto LABEL_21;
    }
    sub_10001B8EC((uint64_t)v98, (uint64_t)&v103);
    if (v107 < 2u)
      goto LABEL_13;
    if (!(v105 | v106 | v103 | v104))
      goto LABEL_18;
    if (v103 != 1 || v105 | v106 | v104)
    {
      *((_BYTE *)objc_allocWithZone((Class)_s11StateButtonCMa())
      + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar11StateButton_alternateState) = 0;
      goto LABEL_20;
    }
    v18 = objc_allocWithZone((Class)_s6ButtonCMa());
LABEL_21:
    v17 = sub_1000375E8((uint64_t)v98);
LABEL_22:
    v20 = v17;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
    v96 = v97;
    v22 = sub_100035C2C((uint64_t)v98);
    v24 = v97[2];
    v25 = (v23 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      sub_10000F6CC(v22, &qword_100078680, UIView_ptr);
      swift_bridgeObjectRetain(p_base_meths);
      sub_10001BA84();
      sub_1000190F4();
LABEL_33:
      v38 = sub_1000190F4();
      sub_10000F6CC(v38, (unint64_t *)&qword_100077BD0, UIStackView_ptr);
      v39 = sub_10001BA90();
      inited = swift_initStackObject(v12, v94);
      *(_OWORD *)(inited + 16) = xmmword_100058970;
      *(_QWORD *)(inited + 32) = 8;
      *(_QWORD *)(inited + 40) = 0;
      *(_QWORD *)(inited + 48) = 0;
      *(_QWORD *)(inited + 56) = 0;
      *(_BYTE *)(inited + 64) = 0;
      *(_QWORD *)(inited + 72) = 4;
      *(_QWORD *)(inited + 80) = 0;
      *(_QWORD *)(inited + 88) = 0;
      *(_QWORD *)(inited + 96) = 0;
      *(_BYTE *)(inited + 104) = 0;
      *(_QWORD *)(inited + 112) = 2;
      *(_QWORD *)(inited + 120) = 0;
      *(_QWORD *)(inited + 128) = 0;
      *(_QWORD *)(inited + 136) = 0;
      *(_BYTE *)(inited + 144) = 0;
      *(_QWORD *)(inited + 152) = 1;
      *(_QWORD *)(inited + 160) = 0;
      *(_BYTE *)(inited + 184) = 0;
      *(_QWORD *)(inited + 168) = 0;
      *(_QWORD *)(inited + 176) = 0;
      v41 = (unint64_t)sub_100019184(inited, (uint64_t *)&v97);
      swift_setDeallocating(inited);
      v42 = sub_10001B8BC();
      if (v41 >> 62)
      {
        sub_10000F6CC(v42, &qword_100078680, UIView_ptr);
        swift_bridgeObjectRetain(v41);
        sub_10001BA84();
        swift_bridgeObjectRelease(v41);
      }
      else
      {
        v43 = swift_bridgeObjectRetain(v41);
        v44 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v43);
        sub_10000F6CC(v44, &qword_100078680, UIView_ptr);
      }
      swift_bridgeObjectRelease(v41);
      v45 = sub_10001BA90();
      v46 = swift_initStackObject(v12, v93);
      *(_OWORD *)(v46 + 16) = xmmword_100058AC0;
      *(_OWORD *)(v46 + 32) = xmmword_100058AD0;
      *(_OWORD *)(v46 + 48) = xmmword_100058AE0;
      *(_BYTE *)(v46 + 64) = 1;
      *(_QWORD *)(v46 + 72) = 1;
      *(_QWORD *)(v46 + 80) = 0;
      *(_QWORD *)(v46 + 88) = 0;
      *(_QWORD *)(v46 + 96) = 0;
      *(_BYTE *)(v46 + 104) = 2;
      *(_OWORD *)(v46 + 112) = 0u;
      *(_OWORD *)(v46 + 128) = 0u;
      *(_BYTE *)(v46 + 144) = 2;
      v47 = (unint64_t)sub_100019184(v46, (uint64_t *)&v97);
      swift_setDeallocating(v46);
      v48 = sub_10001B8BC();
      if (v47 >> 62)
      {
        sub_10000F6CC(v48, &qword_100078680, UIView_ptr);
        swift_bridgeObjectRetain(v47);
        v51 = sub_10001BA84();
        swift_bridgeObjectRelease(v47);
      }
      else
      {
        v49 = swift_bridgeObjectRetain(v47);
        v50 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v49);
        sub_10000F6CC(v50, &qword_100078680, UIView_ptr);
        v51 = v47;
      }
      swift_bridgeObjectRelease(v47);
      v52 = sub_1000192E8(v51);
      v53 = sub_100008414((uint64_t *)&unk_100078650);
      v54 = swift_allocObject(v53, 56, 7);
      *(_OWORD *)(v54 + 16) = xmmword_100058AF0;
      *(_QWORD *)(v54 + 32) = v39;
      *(_QWORD *)(v54 + 40) = v45;
      *(_QWORD *)(v54 + 48) = v52;
      v96 = (_QWORD *)v54;
      specialized Array._endMutation()(v54, v55, v56);
      v57 = v39;
      v58 = v45;
      v59 = v52;
      v60 = sub_10001BA90();
      *(_QWORD *)&v91[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_stack] = v60;
      *(_QWORD *)&v91[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topStack] = v57;
      *(_QWORD *)&v91[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_centerStack] = v58;
      *(_QWORD *)&v91[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomStack] = v59;
      v61 = (char *)v57;
      v62 = v58;
      v63 = v59;
      v64 = v60;

      v65 = (objc_class *)_s14descr10006AE51V14ViewControllerCMa();
      v92.receiver = v91;
      v92.super_class = v65;
      v66 = objc_msgSendSuper2(&v92, "initWithNibName:bundle:", 0, 0);
      v67 = (void *)objc_opt_self(UIColor);
      v68 = v64;
      v69 = (char *)v66;
      v70 = objc_msgSend(v67, "clearColor");
      objc_msgSend(v68, "setBackgroundColor:", v70);

      sub_10001BAAC(v68, "setAxis:");
      objc_msgSend(v68, "setDistribution:", 4);
      v88 = v68;
      objc_msgSend(v68, "setAlignment:", 0);
      sub_10001BAAC(v61, "setAxis:");
      v91 = v61;
      objc_msgSend(v61, "setSpacing:", 8.0);
      sub_10001BAAC(v62, "setAxis:");
      objc_msgSend(v62, "setSpacing:", 8.0);
      sub_10001BAAC(v63, "setAxis:");
      v90 = v63;
      objc_msgSend(v63, "setSpacing:", 8.0);
      v89 = v69;
      v12 = *(_QWORD *)&v69[*(_QWORD *)(v4 + 3800)];
      v71 = v12 + 64;
      sub_10001BAE4();
      v74 = v73 & v72;
      v76 = (unint64_t)(v75 + 63) >> 6;
      v22 = swift_bridgeObjectRetain(v12);
      v77 = 0;
      p_base_meths = (unint64_t)&ResourceBundleClass.base_meths;
      if (v74)
      {
LABEL_38:
        v78 = __clz(__rbit64(v74));
        v74 &= v74 - 1;
        v79 = v78 | (v77 << 6);
        goto LABEL_55;
      }
      while (1)
      {
        v80 = v77 + 1;
        if (__OFADD__(v77, 1))
          goto LABEL_59;
        if (v80 >= v76)
          goto LABEL_57;
        v81 = *(_QWORD *)(v71 + 8 * v80);
        ++v77;
        if (!v81)
        {
          v77 = v80 + 1;
          if (v80 + 1 >= v76)
            goto LABEL_57;
          v81 = *(_QWORD *)(v71 + 8 * v77);
          if (!v81)
          {
            v77 = v80 + 2;
            if (v80 + 2 >= v76)
              goto LABEL_57;
            v81 = *(_QWORD *)(v71 + 8 * v77);
            if (!v81)
            {
              v77 = v80 + 3;
              if (v80 + 3 >= v76)
                goto LABEL_57;
              v81 = *(_QWORD *)(v71 + 8 * v77);
              if (!v81)
              {
                v82 = v80 + 4;
                if (v82 >= v76)
                {
LABEL_57:
                  sub_10001BB08();
                  v85 = objc_msgSend(v88, "widthAnchor");
                  v86 = objc_msgSend(v85, "constraintEqualToConstant:", *(double *)&qword_100077E70);

                  objc_msgSend(v86, "setActive:", 1);
                  swift_bridgeObjectRelease(v97);
                  return (uint64_t)v89;
                }
                v81 = *(_QWORD *)(v71 + 8 * v82);
                if (!v81)
                {
                  while (1)
                  {
                    v77 = v82 + 1;
                    if (__OFADD__(v82, 1))
                      goto LABEL_61;
                    if (v77 >= v76)
                      goto LABEL_57;
                    v81 = *(_QWORD *)(v71 + 8 * v77);
                    ++v82;
                    if (v81)
                      goto LABEL_54;
                  }
                }
                v77 = v82;
              }
            }
          }
        }
LABEL_54:
        v74 = (v81 - 1) & v81;
        v79 = __clz(__rbit64(v81)) + (v77 << 6);
LABEL_55:
        v83 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v79);
        v4 = (unint64_t)objc_msgSend(v83, "heightAnchor");
        v84 = objc_msgSend((id)v4, "constraintEqualToConstant:", *(double *)&qword_100077E70);

        objc_msgSend(v84, "setActive:", 1);
        if (v74)
          goto LABEL_38;
      }
    }
    v4 = v22;
    v27 = v23;
    sub_100008414(&qword_100077F40);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
      break;
LABEL_26:
    v30 = v96;
    if ((v27 & 1) != 0)
    {
      v31 = v96[7];

      *(_QWORD *)(v31 + 8 * v4) = v20;
    }
    else
    {
      v96[(v4 >> 6) + 8] |= 1 << v4;
      v22 = sub_10001B8EC((uint64_t)v98, v30[6] + 40 * v4);
      *(_QWORD *)(v30[7] + 8 * v4) = v20;
      v32 = v30[2];
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
        goto LABEL_60;
      v30[2] = v34;
      sub_10001BA20();
    }
    v97 = v30;
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10001B940((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
    v10 += 40;
    if (!--v8)
    {
      v4 = (unint64_t)&unk_100077000;
      *(_QWORD *)&v91[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonsByIdentifer] = v30;
      v12 = sub_100008414(&qword_100077F48);
      v35 = swift_initStackObject(v12, v95);
      *(_OWORD *)(v35 + 16) = xmmword_100058980;
      *(_QWORD *)(v35 + 32) = 3;
      *(_QWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_BYTE *)(v35 + 64) = 2;
      *(_QWORD *)(v35 + 72) = 2;
      *(_QWORD *)(v35 + 80) = 0;
      *(_QWORD *)(v35 + 88) = 0;
      *(_QWORD *)(v35 + 96) = 0;
      *(_BYTE *)(v35 + 104) = 2;
      swift_bridgeObjectRetain(v30);
      p_base_meths = (unint64_t)sub_100019184(v35, (uint64_t *)&v97);
      swift_setDeallocating(v35);
      v22 = sub_10001B8BC();
      if (!(p_base_meths >> 62))
      {
        v36 = swift_bridgeObjectRetain(p_base_meths);
        v37 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v36);
        sub_10000F6CC(v37, &qword_100078680, UIView_ptr);
        goto LABEL_33;
      }
      goto LABEL_62;
    }
  }
  v28 = sub_100035C2C((uint64_t)v98);
  if ((v27 & 1) == (v29 & 1))
  {
    v4 = v28;
    goto LABEL_26;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_10006B098);
  __break(1u);
  return result;
}

void sub_100019E3C()
{
  _BYTE *v0;

  sub_10001BAD4(OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate);
  *(_QWORD *)&v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMarginConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMarginConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_widthConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonIdentifiers] = &off_100069AA8;
  *(_QWORD *)&v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController__lastDownButton] = 0;
  v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_initalToggleSelected] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100055EC0, "ContinuityDisplay/SidebarViewController.swift", 45, 2, 112, 0);
  __break(1u);
}

void sub_100019F0C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  __objc2_meth_list **p_base_meths;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  id v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v57;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  id v71;

  v1 = v0;
  v2 = _s14descr10006AE51V19_CenteringEventViewCMa();
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  v4 = *(void **)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_stack];
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v3, "addSubview:", v4);
  v5 = (void *)objc_opt_self(UIColor);
  v6 = v3;
  v7 = objc_msgSend(v5, "blackColor");
  objc_msgSend(v6, "setBackgroundColor:", v7);

  v9 = sub_10000F648(v8, "topAnchor");
  v10 = sub_10001BA7C((uint64_t)v9, "topAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v10, *(double *)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMargin]);

  v13 = sub_10000F648(v12, "bottomAnchor");
  v14 = sub_10001BA7C((uint64_t)v13, "bottomAnchor");
  v15 = objc_msgSend(v13, "constraintEqualToAnchor:constant:", v14, -*(double *)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMargin]);

  v17 = sub_10001BA7C(v16, "widthAnchor");
  v18 = objc_msgSend(v17, "constraintEqualToConstant:", *(double *)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_barWidth]);

  v19 = v18;
  sub_1000193FC((uint64_t)v18);
  v20 = v11;
  sub_1000193E4((uint64_t)v11);
  v21 = v15;
  sub_1000193F0((uint64_t)v15);
  p_base_meths = (__objc2_meth_list **)NSLayoutConstraint_ptr;
  v23 = (void *)objc_opt_self(NSLayoutConstraint);
  v24 = sub_100008414((uint64_t *)&unk_100078650);
  v25 = swift_allocObject(v24, 64, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100058B00;
  *(_QWORD *)(v25 + 32) = v19;
  *(_QWORD *)(v25 + 40) = v20;
  *(_QWORD *)(v25 + 48) = v21;
  v69 = v19;
  v71 = v20;
  v68 = v21;
  v26 = sub_10000F648((uint64_t)v68, "centerXAnchor");
  v27 = sub_10001BA7C((uint64_t)v26, "centerXAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

  *(_QWORD *)(v25 + 56) = v28;
  specialized Array._endMutation()(v29, v30, v31);
  sub_1000085DC(0, (unint64_t *)&qword_1000786D0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v23, "activateConstraints:", isa, swift_bridgeObjectRelease(v25).n128_f64[0]);

  v70 = v6;
  objc_msgSend(v1, "setView:", v6);
  v33 = *(_QWORD *)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonsByIdentifer];
  v34 = v33 + 64;
  sub_10001BAE4();
  v37 = v36 & v35;
  v39 = (unint64_t)(v38 + 63) >> 6;
  v40 = (id)swift_bridgeObjectRetain(v33);
  v42 = 0;
  while (1)
  {
    if (v37)
    {
      v43 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v44 = v43 | (v42 << 6);
      goto LABEL_20;
    }
    v45 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v45 >= v39)
      goto LABEL_43;
    v46 = *(_QWORD *)(v34 + 8 * v45);
    ++v42;
    if (!v46)
    {
      v42 = v45 + 1;
      if (v45 + 1 >= v39)
        goto LABEL_43;
      v46 = *(_QWORD *)(v34 + 8 * v42);
      if (!v46)
      {
        v42 = v45 + 2;
        if (v45 + 2 >= v39)
          goto LABEL_43;
        v46 = *(_QWORD *)(v34 + 8 * v42);
        if (!v46)
        {
          v42 = v45 + 3;
          if (v45 + 3 >= v39)
            goto LABEL_43;
          v46 = *(_QWORD *)(v34 + 8 * v42);
          if (!v46)
            break;
        }
      }
    }
LABEL_19:
    v37 = (v46 - 1) & v46;
    v44 = __clz(__rbit64(v46)) + (v42 << 6);
LABEL_20:
    v48 = *(_BYTE **)(*(_QWORD *)(v33 + 56) + 8 * v44);
    v49 = (uint64_t *)&v48[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier];
    if (!v48[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier + 32])
      goto LABEL_40;
    v50 = *v49;
    v51 = v49[1];
    v52 = v49[2];
    v53 = v49[3];
    if (v48[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier + 32] == 2)
    {
      v54 = v52 | v51;
      if (v54 | v50 | v53)
      {
        v55 = v54 | v53;
        if (v50 != 1 || v55 != 0)
        {
          v57 = "_stateButtonPressed:";
          goto LABEL_39;
        }
        v65 = v48;
        p_base_meths = &ResourceBundleClass.base_meths;
        objc_msgSend(v65, "addTarget:action:forControlEvents:", v1, "_toggleButtonDown:", 1);
        objc_msgSend(v65, "addTarget:action:forControlEvents:", v1, "_toggleButtonUpIn:", 64);

      }
      else
      {
LABEL_38:
        v57 = "_actionButtonPressed:";
LABEL_39:
        v40 = objc_msgSend(v48, "addTarget:action:forControlEvents:", v1, v57, 1);
      }
    }
    else
    {
      if (v50 == 8 && v51 == 6)
      {
        v59 = !v52 && v53 == 0xE000000000000000;
        if (v59 || (sub_10001BAC4((uint64_t)v40, v41, v52, v53) & 1) != 0)
          goto LABEL_38;
      }
LABEL_40:
      v60 = _s12StickyButtonCMa();
      if (!swift_dynamicCastClass(v48, v60))
      {
        sub_10001BB08();

        v67 = v69;
        v66 = v71;
        v71 = v68;
        goto LABEL_45;
      }
      v61 = sub_100018C4C((uint64_t)&unk_10006AE38);
      sub_10001BA2C(v61);
      v62 = v48;
      sub_10001BB00();
      sub_100037D24((uint64_t)sub_10001B9F8, (uint64_t)p_base_meths);
      sub_10001BAF8();
      v63 = sub_100018C4C((uint64_t)&unk_10006AE38);
      sub_10001BA2C(v63);
      sub_10001BB00();
      sub_100037D30((uint64_t)sub_10001BA00, (uint64_t)p_base_meths);
      sub_10001BAF8();
      v64 = sub_100018C4C((uint64_t)&unk_10006AE38);
      sub_10001BA2C(v64);
      sub_10001BB00();
      sub_100037D3C((uint64_t)sub_10001BA08, (uint64_t)p_base_meths);

      v40 = (id)sub_10001BAF8();
    }
  }
  v47 = v45 + 4;
  if (v47 >= v39)
  {
LABEL_43:

    sub_10001BB08();
    v66 = v68;
    v67 = v70;
LABEL_45:

    return;
  }
  v46 = *(_QWORD *)(v34 + 8 * v47);
  if (v46)
  {
    v42 = v47;
    goto LABEL_19;
  }
  while (1)
  {
    v42 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v42 >= v39)
      goto LABEL_43;
    v46 = *(_QWORD *)(v34 + 8 * v42);
    ++v47;
    if (v46)
      goto LABEL_19;
  }
LABEL_47:
  __break(1u);
}

void sub_10001A518(void *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, &v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (char *)Strong;
    v8 = a1;
    sub_10001A894((uint64_t)a1);
    v9 = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate]);
    if (v9)
    {
      v10 = v9;
      sub_10001B8EC((uint64_t)v8 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier, (uint64_t)v12);
      sub_1000340E8((uint64_t)v12, a2 & 1);

      swift_unknownObjectRelease(v10);
    }
    else
    {

    }
  }
}

void sub_10001A5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, &v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    sub_10001A894(0);
    v6 = swift_unknownObjectWeakLoadStrong(&v5[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate]);
    if (v6)
    {
      v7 = v6;
      sub_10001B8EC(a1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier, (uint64_t)v9);
      sub_100033974();

      swift_unknownObjectRelease(v7);
    }
    else
    {

    }
  }
}

void sub_10001A684(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  BOOL v7;
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController__lastDownButton);
    if (v6)
      v7 = v6 == a1;
    else
      v7 = 0;
    if (v7)
      sub_10001AD1C(a1);

  }
}

void sub_10001A728(char a1)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  id v5;
  _QWORD v6[4];
  char v7;

  if (*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonsByIdentifer)
                 + 16)
    && (v6[0] = 1, memset(&v6[1], 0, 24), v7 = 2, v3 = sub_100035C2C((uint64_t)v6), (v4 & 1) != 0))
  {
    v5 = sub_10001BA70(v3);
    if (objc_msgSend(v5, "isSelected") != (a1 & 1))
      objc_msgSend(v5, "setSelected:");

  }
  else
  {
    sub_10001BB10();
  }
}

void sub_10001A7BC(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  if (*(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonsByIdentifer)
                 + 16))
  {
    sub_10001B940(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B928);
    v5 = sub_100035C2C(a1);
    if ((v6 & 1) != 0)
    {
      v9 = sub_10001BA70(v5);
      sub_10001B940(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
      v7 = _s11StateButtonCMa();
      v8 = swift_dynamicCastClass(v9, v7);
      if (v8)
      {
        if (*(_BYTE *)(v8 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar11StateButton_alternateState) != (a2 & 1))
          sub_100038990();
      }

    }
    else
    {
      sub_10001B940(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
    }
  }
}

void sub_10001A894(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController__lastDownButton);
}

void sub_10001A8A0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[40];

  sub_10001BB48();
  if (swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate))
  {
    sub_10001BA64(OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier, v1);
    sub_100033B70((uint64_t)v2);
    sub_100018C94();
  }
  sub_10001BB10();
}

void sub_10001A944()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[40];

  sub_10001BB48();
  sub_100038990();
  if (swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate))
  {
    sub_10001BA64(OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier, v1);
    sub_10003429C((uint64_t)v2);
    sub_100018C94();
  }
  sub_10001BA9C();
}

id sub_10001AA08(void *a1)
{
  uint64_t v1;
  id result;

  result = objc_msgSend(a1, "isSelected");
  *(_BYTE *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_initalToggleSelected) = (_BYTE)result;
  return result;
}

void sub_10001AA84(void *a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  _BYTE v5[40];

  v3 = *(_BYTE *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_initalToggleSelected) ^ 1;
  if (swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate))
  {
    sub_10001BA64(OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier, v4);
    sub_1000340E8((uint64_t)v5, v3 & 1);
    sub_100018C94();
  }
  objc_msgSend(a1, "setSelected:", v3 & 1);
  sub_10001BA9C();
}

void sub_10001AB58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  unint64_t v6;
  char v7;
  id v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double MinX;
  char v41;
  CGFloat MidY;
  CGRect v43;
  CGRect v44;

  v4 = 0.0;
  if (!*(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonsByIdentifer)
                  + 16))
    goto LABEL_7;
  sub_10001B940(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B928);
  v6 = sub_100035C2C(a1);
  if ((v7 & 1) == 0)
  {
    sub_10001B940(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
LABEL_7:
    v41 = 1;
    MidY = 0.0;
LABEL_10:
    *(double *)a2 = v4;
    *(CGFloat *)(a2 + 8) = MidY;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = v41;
    return;
  }
  v8 = sub_10001BA70(v6);
  sub_10001B940(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
  v9 = sub_10001BB3C();
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, "frame");
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;

    sub_10001BB1C();
    v20 = v19;
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v27 = sub_10001BB3C();
    objc_msgSend(v8, "convertRect:toView:", v27, v20, v22, v24, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32;
    v35 = v34;

    v36 = v29;
    v37 = v31;
    v38 = v33;
    v39 = v35;
    if (v12 == 0.0)
    {
      MinX = CGRectGetMinX(*(CGRect *)&v36);
      v43.origin.x = v12;
      v43.origin.y = v14;
      v43.size.width = v16;
      v43.size.height = v18;
      v4 = CGRectGetWidth(v43) - MinX + -4.0;
    }
    else
    {
      v4 = 4.0 - CGRectGetMinX(*(CGRect *)&v36);
    }
    sub_10001BB1C();
    MidY = CGRectGetMidY(v44);

    v41 = 0;
    goto LABEL_10;
  }
  __break(1u);
}

id sub_10001AD1C(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  NSBundle v30;
  uint64_t v31;
  void *v32;
  objc_class *v33;
  NSBundle v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  id v43;
  char *v44;
  id v45;
  void *v46;
  id result;
  void *v48;
  double v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  id v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *object;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  objc_class *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  objc_class *v85;
  void **v86;
  uint64_t v87;
  void (*v88)();
  uint64_t v89;
  _QWORD v90[5];
  char v91[32];
  char v92;
  _BYTE v93[40];
  uint64_t v94;
  char v95;
  Swift::String v96;

  v2 = v1;
  v4 = (objc_class *)type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v96._object - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v80 = (char *)&v96._object - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for DispatchTime(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79, v13);
  v15 = (char *)&v96._object - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v96._object = (char *)&v96._object - v18;
  v19 = a1;
  sub_10001B8EC(a1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier, (uint64_t)v93);
  sub_10001B8EC((uint64_t)v93, (uint64_t)&v94);
  v85 = v4;
  v84 = v5;
  v83 = v8;
  v82 = v9;
  v81 = v10;
  if (v95)
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    goto LABEL_13;
  }
  if ((v94 & 1) != 0)
  {
    v22 = (void *)sub_10001BA5C();
    v4 = (objc_class *)sub_10001BA54(v22);
    v23 = 0x6669685320A787E2;
    v24 = 0xA900000000000074;
  }
  else
  {
    if ((v94 & 2) != 0)
    {
      v25 = (void *)sub_10001BA5C();
      v26 = sub_10001BA54(v25);
      v23 = (unsigned __int16)sub_10001BB28() | 0x746E6F4320830000;
      v27 = 7106418;
    }
    else
    {
      if ((v94 & 4) != 0)
      {
        v28 = (void *)sub_10001BA5C();
        v29 = sub_10001BA54(v28);
        v23 = (unsigned __int16)sub_10001BB28() | 0x6974704F20A50000;
        v24 = 0xAA00000000006E6FLL;
        goto LABEL_12;
      }
      v21 = 0xE000000000000000;
      if ((v94 & 8) == 0)
      {
        v20 = 0;
        goto LABEL_13;
      }
      v77 = (void *)sub_10001BA5C();
      v4 = (objc_class *)sub_10001BA54(v77);
      v23 = 0x6D6D6F4320988CE2;
      v27 = 6581857;
    }
    v24 = v27 & 0xFFFFFFFFFFFFLL | 0xAB00000000000000;
  }
LABEL_12:
  v30.super.isa = v4;
  v20 = sub_10001BAB4(v23, v24, 0, 0, v30);
  v21 = v31;

LABEL_13:
  if (swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate]))
  {
    sub_100030804();
    sub_100018C94();
  }
  v32 = (void *)sub_10001BA5C();
  v33 = (objc_class *)sub_10001BA54(v32);
  v96._object = (void *)0xE000000000000000;
  v34.super.isa = v33;
  v35 = sub_10001BAB4(v20, v21, 0, 0, v34);
  v37 = v36;
  sub_1000190F4();

  v39 = sub_10000F648(v38, "mainBundle");
  v96._object = (void *)0xE500000000000000;
  v40._object = (void *)0x80000001000564D0;
  v40._countAndFlagsBits = 0xD000000000000018;
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  v96._countAndFlagsBits = 0x656C746954;
  v42 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, (Swift::String_optional)0, (NSBundle)v39, v41, v96);

  v43 = objc_allocWithZone((Class)type metadata accessor for SidebarPopover());
  v44 = sub_10001E6B4(v35, v37, v42._countAndFlagsBits, (uint64_t)v42._object);
  objc_msgSend(v44, "setModalPresentationStyle:", 7);
  v45 = objc_msgSend(v44, "popoverPresentationController");
  if (!v45)
    goto LABEL_32;
  v46 = v45;
  result = sub_10001BA7C((uint64_t)v45, "view");
  if (result)
  {
    v48 = result;
    objc_msgSend(result, "frame");
    v50 = v49;

    if (v50 == 0.0)
      v51 = 4;
    else
      v51 = 8;
    objc_msgSend(v46, "setPermittedArrowDirections:", v51);
    objc_msgSend(v46, "setSourceView:", v19);
    sub_10001AB58((uint64_t)v93, (uint64_t)v90);
    v52 = *(double *)v90;
    v53 = *(double *)&v90[1];
    v54 = *(double *)&v90[2];
    v55 = *(double *)&v90[3];
    sub_1000083CC((uint64_t)v90, (uint64_t)v91);
    v56 = 0.0;
    if ((v92 & 1) != 0)
      v57 = 0.0;
    else
      v57 = v54;
    if ((v92 & 1) != 0)
      v58 = 0.0;
    else
      v58 = v55;
    if ((v92 & 1) != 0)
      v59 = 0.0;
    else
      v59 = v52;
    if ((v92 & 1) == 0)
      v56 = v53;
    objc_msgSend(v46, "setSourceRect:", v59, v56, v57, v58);
    v60 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.0, 0.0, 0.5);
    objc_msgSend(v46, "setBackgroundColor:", v60);

LABEL_32:
    v88 = (void (*)())VideoStream.qosMonitorServerDidDie(_:);
    v89 = 0;
    v86 = _NSConcreteStackBlock;
    v87 = 1107296256;
    v61 = sub_10001BA3C((uint64_t)&unk_10006AD88);
    objc_msgSend(v2, "presentViewController:animated:completion:", v44, 1, v61);
    _Block_release(v61);
    sub_10000F6CC(v62, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
    v63 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()(v63);
    object = v96._object;
    + infix(_:_:)(2.0);
    v78 = *(_QWORD *)(v78 + 8);
    v65 = v79;
    ((void (*)(char *, uint64_t))v78)(v15, v79);
    v66 = sub_100018C4C((uint64_t)&unk_10006ADC0);
    *(_QWORD *)(v66 + 16) = v44;
    v88 = sub_10001B9CC;
    v89 = v66;
    v86 = _NSConcreteStackBlock;
    v87 = 1107296256;
    v67 = sub_10001BA3C((uint64_t)&unk_10006ADD8);
    v68 = v89;
    v69 = v44;
    v70 = swift_release(v68);
    v71 = v80;
    static DispatchQoS.unspecified.getter(v70);
    v86 = (void **)_swiftEmptyArrayStorage;
    v72 = sub_10000E8F4();
    v73 = sub_100008414((uint64_t *)&unk_100077A10);
    v74 = sub_10000E934();
    v75 = v83;
    v76 = v85;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v73, v74, v85, v72);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(object, v71, v75, v67);
    _Block_release(v67);

    (*(void (**)(char *, objc_class *))(v84 + 8))(v75, v76);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v71, v82);
    return (id)((uint64_t (*)(void *, uint64_t))v78)(object, v65);
  }
  __break(1u);
  return result;
}

void sub_10001B420(void *a1)
{
  void *v2;
  _QWORD v3[6];

  v3[4] = VideoStream.qosMonitorServerDidDie(_:);
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_10000C66C;
  v3[3] = &unk_10006AE00;
  v2 = _Block_copy(v3);
  objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, v2);
  _Block_release(v2);
}

void sub_10001B4A8()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.ViewController", 32, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_10001B4F8(uint64_t a1)
{
  return sub_10001B86C(a1, _s14descr10006AE51V14ViewControllerCMa);
}

uint64_t _s14descr10006AE51V14ViewControllerCMa()
{
  return objc_opt_self(_TtCO17ContinuityDisplay7Sidebar14ViewController);
}

id sub_10001B5D0(uint64_t a1, CGFloat a2, CGFloat a3)
{
  void *v3;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  id v11;
  id v12;
  id v13;
  char v14;
  objc_super v16;
  CGPoint v17;
  CGRect v18;
  CGRect v19;

  objc_msgSend(v3, "bounds");
  x = v18.origin.x;
  y = v18.origin.y;
  width = v18.size.width;
  height = v18.size.height;
  v17.x = a2;
  v17.y = a3;
  if (CGRectContainsPoint(v18, v17))
  {
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = width;
    v19.size.height = height;
    a2 = CGRectGetWidth(v19) * 0.5;
  }
  v16.receiver = v3;
  v16.super_class = (Class)_s14descr10006AE51V19_CenteringEventViewCMa();
  v11 = objc_msgSendSuper2(&v16, "hitTest:withEvent:", a1, a2, a3);
  if (v11)
  {
    sub_1000085DC(0, &qword_100078680, UIView_ptr);
    v12 = v3;
    v13 = v11;
    v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) != 0)
    {

      return 0;
    }
  }
  return v11;
}

id sub_10001B764(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)_s14descr10006AE51V19_CenteringEventViewCMa();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id sub_10001B7E8(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)_s14descr10006AE51V19_CenteringEventViewCMa();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_10001B85C()
{
  return sub_10001B86C(0, _s14descr10006AE51V19_CenteringEventViewCMa);
}

id sub_10001B86C(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t _s14descr10006AE51V19_CenteringEventViewCMa()
{
  return objc_opt_self(_TtCO17ContinuityDisplay7SidebarP33_17941A61753FE3CA8E84101B4CCC5D9519_CenteringEventView);
}

uint64_t sub_10001B8BC()
{
  uint64_t v0;

  swift_arrayDestroy(v0 + 32, *(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10001B8EC(uint64_t a1, uint64_t a2)
{
  sub_10001F300(a2, a1);
  return a2;
}

uint64_t sub_10001B928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 1)
    return swift_bridgeObjectRetain(a4);
  return result;
}

uint64_t sub_10001B940(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_10001B978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if (a5 == 1)
    return swift_bridgeObjectRelease(a4);
  return result;
}

uint64_t sub_10001B990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001B9A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001B9A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10001B9CC()
{
  uint64_t v0;

  sub_10001B420(*(void **)(v0 + 16));
}

uint64_t sub_10001B9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_10001B9F8(void *a1, char a2)
{
  uint64_t v2;

  sub_10001A518(a1, a2, v2);
}

void sub_10001BA00(uint64_t a1)
{
  uint64_t v1;

  sub_10001A5D4(a1, v1);
}

void sub_10001BA08(uint64_t a1)
{
  uint64_t v1;

  sub_10001A684(a1, v1);
}

uint64_t sub_10001BA20()
{
  void (*v0)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v1;

  return sub_10001B940(v1 - 240, v0);
}

uint64_t sub_10001BA2C(uint64_t a1)
{
  uint64_t v1;

  return swift_unknownObjectWeakInit(a1 + 16, v1);
}

void *sub_10001BA3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 312) = v1;
  *(_QWORD *)(v2 - 304) = a1;
  return _Block_copy((const void *)(v2 - 328));
}

id sub_10001BA54(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 3688));
}

uint64_t sub_10001BA5C()
{
  uint64_t v0;

  return objc_opt_self(*(_QWORD *)(v0 + 3696));
}

uint64_t sub_10001BA64@<X0>(uint64_t a1@<X8>, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return sub_10001B8EC(v2 + a1, (uint64_t)va);
}

id sub_10001BA70(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 + 56) + 8 * a1);
}

id sub_10001BA7C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_10001BA84()
{
  uint64_t v0;
  uint64_t v1;

  return _bridgeCocoaArray<A>(_:)(v0, v1);
}

id sub_10001BA90()
{
  uint64_t v0;

  return sub_1000192E8(v0);
}

id sub_10001BAAC(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 1);
}

uint64_t sub_10001BAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5)
{
  Swift::String v5;
  Swift::String v7;

  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, v5, v7)._countAndFlagsBits;
}

uint64_t sub_10001BAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(0, 0xE000000000000000, a3, a4, 0);
}

uint64_t sub_10001BAD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + a1 + 8) = 0;
  return swift_unknownObjectWeakInit(v1 + a1, 0);
}

uint64_t sub_10001BAF8()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_10001BB00()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001BB08()
{
  uint64_t v0;

  return swift_release(v0);
}

id sub_10001BB1C()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2536));
}

uint64_t sub_10001BB28()
{
  return 36066;
}

id sub_10001BB3C()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 3720));
}

void sub_10001BB48()
{
  sub_10001A894(0);
}

uint64_t sub_10001BB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v12 = a1;
  v13 = a2;
  v14 = BYTE2(a2);
  v15 = BYTE3(a2);
  v16 = BYTE4(a2);
  v17 = BYTE5(a2);
  if (a3)
  {
    if (a3 <= 14)
    {
      result = Data.InlineData.init(_:)(&v12, (char *)&v12 + a3);
      v9 = v10 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
      v7 = __DataStorage.init(bytes:length:)(&v12, a3);
      if ((unint64_t)a3 >= 0x7FFFFFFF)
      {
        v11 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v11, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = a3;
        v9 = v7 | 0x8000000000000000;
      }
      else
      {
        result = a3 << 32;
        v9 = v7 | 0x4000000000000000;
      }
    }
  }
  else
  {
    result = 0;
    v9 = 0xC000000000000000;
  }
  *a4 = result;
  a4[1] = v9;
  return result;
}

void sub_10001BCB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[3];
  _OWORD v43[2];
  __int128 v44;
  _OWORD v45[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100008414(&qword_1000780A0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v33 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v32 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  if (!v6)
    goto LABEL_9;
LABEL_8:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v21 = *v19;
    v20 = v19[1];
    sub_10000B26C(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v45);
    *(_QWORD *)&v44 = v21;
    *((_QWORD *)&v44 + 1) = v20;
    v42[2] = v44;
    v43[0] = v45[0];
    v43[1] = v45[1];
    *(_QWORD *)&v42[0] = v21;
    *((_QWORD *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_10000B900(v43, v37);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_10000B900(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_10000B900(v41, v42);
    sub_10000B900(v42, &v38);
    v22 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~v7[v24 >> 6]) == 0)
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = v7[v25];
        if (v30 != -1)
        {
          v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v26 = __clz(__rbit64((-1 << v24) & ~v7[v24 >> 6])) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
    *(_QWORD *)((char *)v7 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    v31 = v3[6] + 40 * v26;
    *(_OWORD *)v31 = v34;
    *(_OWORD *)(v31 + 16) = v35;
    *(_QWORD *)(v31 + 32) = v36;
    sub_10000B900(&v38, (_OWORD *)(v3[7] + 32 * v26));
    ++v3[2];
    if (v6)
      goto LABEL_8;
LABEL_9:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_42;
    if (v11 >= v32)
      goto LABEL_40;
    v12 = *(_QWORD *)(v33 + 8 * v11);
    v13 = v8 + 1;
    if (!v12)
    {
      sub_10001D5F0();
      if (v14 == v15)
        goto LABEL_40;
      sub_10001D5D8();
      if (!v12)
      {
        sub_10001D5F0();
        if (v14 == v15)
          goto LABEL_40;
        sub_10001D5D8();
        if (!v12)
        {
          sub_10001D5F0();
          if (v14 == v15)
            goto LABEL_40;
          sub_10001D5D8();
          if (!v12)
            break;
        }
      }
    }
LABEL_28:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v8 = v13;
  }
  v17 = v16 + 4;
  if (v17 >= v32)
  {
LABEL_40:
    swift_release(v3);
    sub_10001D3E8(a1);
    return;
  }
  v12 = *(_QWORD *)(v33 + 8 * v17);
  if (v12)
  {
    v13 = v17;
    goto LABEL_28;
  }
  while (!__OFADD__(v17, 1))
  {
    sub_10001D5F0();
    if (v14 == v15)
      goto LABEL_40;
    sub_10001D5D8();
    v17 = v18 + 1;
    if (v12)
      goto LABEL_28;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_10001C050(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];
  uint64_t v10;
  unint64_t v11;

  v10 = sub_100008414(&qword_100078090);
  v11 = sub_10001D2A8();
  v9[0] = a1;
  v9[1] = a2;
  v4 = sub_10000BE70(v9, v10);
  if (*v4)
    v5 = *v4 + v4[1];
  else
    v5 = 0;
  sub_10001D2EC(*v4, v5, &v8);
  v6 = v8;
  sub_10000B910(v9);
  return v6;
}

uint64_t sub_10001C0E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_10000BE70(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = *v2;
  if (*v2 && (v4 = v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = Data.InlineData.init(_:)(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = Data.LargeSlice.init(_:)();
    }
    else
    {
      v6 = Data.InlineSlice.init(_:)();
    }
  }
  else
  {
    v6 = 0;
  }
  sub_10000B910(v8);
  return v6;
}

void sub_10001C198(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_10001C1EC + dword_10001C304[sub_10000BE70(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_10001C1FC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_10001D534();
  sub_10001BB54(v2, v3 & 0xFFFFFFFFFFFFLL, BYTE6(v3), &v6);
  sub_100009320(v1, v0);
  v4 = v6;
  sub_10000B910(&v7);
  return v4;
}

void sub_10001C314(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  sub_10001D5D0();
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

NSString sub_10001C364()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10007C900 = (uint64_t)result;
  return result;
}

uint64_t sub_10001C398()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v0 = KeyboardReport.reportDescriptor.unsafeMutableAddressor();
  sub_10001D504((uint64_t)v0);
  sub_10001D4F4();
  sub_10001D528();
  v1 = PencilReport.reportDescriptor.unsafeMutableAddressor();
  sub_10001D504((uint64_t)v1);
  sub_10001D4F4();
  sub_10001D528();
  v2 = TouchReport.reportDescriptor.unsafeMutableAddressor();
  sub_10001D504((uint64_t)v2);
  sub_10001D4F4();
  sub_10001D528();
  v3 = MultitouchReport.reportDescriptor.unsafeMutableAddressor();
  sub_10001D504((uint64_t)v3);
  sub_10001D4F4();
  sub_10001D528();
  v4 = SqueezeGestureReport.reportDescriptor.unsafeMutableAddressor();
  sub_10001D504((uint64_t)v4);
  sub_10001D4F4();
  sub_10001D528();
  return 0;
}

uint64_t sub_10001C420(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  v5 = v2 + OBJC_IVAR____TtC17ContinuityDisplay16DisplayHIDDevice_logger;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC17ContinuityDisplay16DisplayHIDDevice_stream) = a2;
  v8 = swift_allocObject((char *)&_s14descr10006AE51VMn.NumFields + 3, 24, 7);
  swift_weakInit(v8 + 16, v2);
  v13[4] = sub_10001D25C;
  v14 = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10001C5A8;
  v13[3] = &unk_10006AE80;
  v9 = _Block_copy(v13);
  v10 = v14;
  v11 = a2;
  swift_release(v10);
  objc_msgSend(v11, "setHandler:", v9);
  _Block_release(v9);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v2;
}

uint64_t sub_10001C54C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10001C784(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10001C5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(__int128 *);
  __int128 v6;
  __int128 v7;

  v4 = *(void (**)(__int128 *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    *((_QWORD *)&v7 + 1) = swift_getObjectType(a2);
    *(_QWORD *)&v6 = a2;
  }
  else
  {
    v6 = 0u;
    v7 = 0u;
  }
  swift_retain(v3);
  swift_unknownObjectRetain(a2);
  v4(&v6);
  swift_release(v3);
  return sub_10000BCD0((uint64_t)&v6);
}

void sub_10001C620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[56];

  v1 = sub_100008414(&qword_100078088);
  inited = swift_initStackObject(v1, v16);
  *(_OWORD *)(inited + 16) = xmmword_100058B70;
  *(_QWORD *)(inited + 32) = 0;
  v3 = sub_10001C398();
  v5 = v4;
  v6 = static HIDDescriptor.dataWithReportDescriptor(_:)(v3, v4);
  v8 = v7;
  sub_100009320(v3, v5);
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 48) = v8;
  v9 = Dictionary.init(dictionaryLiteral:)(inited);
  v10 = *(id *)(v0 + OBJC_IVAR____TtC17ContinuityDisplay16DisplayHIDDevice_stream);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  v12 = sub_10001D5FC((uint64_t)sub_10001C314, v13, (char)_NSConcreteStackBlock, 1107296256, v14, v15);
  sub_10001D5D0();
  sub_10001BAF8();
  objc_msgSend(v10, "sendOPACK:completion:", isa, v12);
  _Block_release(v12);

  sub_10001D54C();
}

uint64_t sub_10001C764()
{
  return 0x69614620646E6553;
}

void sub_10001C784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  Class isa;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD aBlock[3];
  void *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v2 = v1;
  sub_100018424(a1, (uint64_t)aBlock);
  if (!v27)
  {
    sub_10000BCD0((uint64_t)aBlock);
    goto LABEL_6;
  }
  if ((swift_dynamicCast(&v30, aBlock, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_6:
    sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v8 = sub_10001D4DC();
    v14 = sub_100029474(v8, v9, v10, v11, v12, v13, 55);
    __chkstk_darwin(v14, v15);
    sub_10001D514();
    sub_100028F80(variable initialization expression of SidecarDisplaySession.delegate, 0, sub_10000F5EC, v16);

    return;
  }
  v4 = v30;
  v3 = v31;
  sub_100009364(v30, v31);
  HIDRequest.init(rawData:)(v4, v3);
  if (v5 == 14)
  {
    sub_10001D540();
    goto LABEL_6;
  }
  sub_10001C9A8(v5, v6, v7);
  if (v18 >> 60 == 15)
  {
    sub_10001D540();
    sub_10001D560();
  }
  else
  {
    v19 = v17;
    v20 = v18;
    v24 = *(id *)(v2 + OBJC_IVAR____TtC17ContinuityDisplay16DisplayHIDDevice_stream);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v28 = sub_10001D40C;
    v29 = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001C314;
    v27 = &unk_10006AED0;
    v22 = _Block_copy(aBlock);
    v25 = v19;
    v23 = v29;
    swift_retain(v2);
    swift_release(v23);
    objc_msgSend(v24, "sendOPACK:completion:", isa, v22);
    sub_10001D540();
    sub_10001D560();
    _Block_release(v22);

    sub_10001891C(v25, v20);
  }
}

void sub_10001C9A8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  if (a1 == 11)
  {
    sub_10001CA88(11, a2, a3);
  }
  else if (a1 == 4)
  {
    v3 = sub_10001C398();
    HIDRequest.init(_:wValue:wIndex:data:)(4, 0, 0, v3, v4);
  }
}

void sub_10001CA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v3 = HIDRequest.wValue.getter(a1, a2, a3);
  if (BYTE1(v3) != 3)
  {
    if (BYTE1(v3) == 2)
    {
      v6 = v3;
      sub_10001D580();
      sub_10001CBAC(v6, v7, v8);
      sub_10001D5C4();
      goto LABEL_7;
    }
    if (BYTE1(v3) != 1)
    {
      sub_10000F6CC(v3, (unint64_t *)&qword_100077C80, NSError_ptr);
      v9 = sub_10001D4DC();
      sub_100029474(v9, v10, v11, v12, v13, v14, 102);
      sub_10001D5B8();
      __chkstk_darwin(v15, v16);
      sub_10001D514();
      sub_10001D590(variable initialization expression of SidecarDisplaySession.delegate, v17, sub_10000F5EC, v18);
      sub_10001D5AC();
      goto LABEL_7;
    }
  }
  sub_10001D580();
  sub_10001891C(v4, v5);
LABEL_7:
  sub_10001D570();
}

void sub_10001CBAC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  if (a3 >> 60 == 15)
    goto LABEL_7;
  v5 = a1;
  sub_100009364(a2, a3);
  if (Data.count.getter(a2, a3) < 2 || (v6 = Data.subscript.getter(0), v6 != v5))
  {
    a1 = sub_10001D5E4();
LABEL_7:
    sub_10000F6CC(a1, (unint64_t *)&qword_100077C80, NSError_ptr);
    v7 = sub_10001D4DC();
    sub_100029474(v7, v8, v9, v10, v11, v12, 114);
    sub_10001D5B8();
    __chkstk_darwin(v13, v14);
    sub_10001D514();
    sub_10001D590(variable initialization expression of SidecarDisplaySession.delegate, v15, sub_10000F5EC, v16);
    swift_willThrow(v17);
    goto LABEL_8;
  }
  if (v5 == 3)
  {
    sub_10001CD48(a2, a3);
  }
  else
  {
    sub_10000F6CC(v6, (unint64_t *)&qword_100077C80, NSError_ptr);
    v18 = sub_10001D4DC();
    sub_100029474(v18, v19, v20, v21, v22, v23, 123);
    sub_10001D5B8();
    __chkstk_darwin(v24, v25);
    sub_10001D514();
    sub_10001D590(variable initialization expression of SidecarDisplaySession.delegate, v26, sub_10000F5EC, v27);
    swift_willThrow(v28);
  }
  sub_10001D5E4();
LABEL_8:
  sub_10001D570();
}

uint64_t sub_10001CD48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  Class v7;
  uint64_t v8;
  uint64_t inited;
  objc_class *v10;
  objc_class *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _BYTE v28[128];

  v3 = v2;
  v4 = Data.count.getter(a1, a2);
  if (v4 == 2)
  {
    v5 = sub_10000F6CC(2, (unint64_t *)&qword_100078990, NSNumber_ptr);
    isa = NSNumber.init(integerLiteral:)(4294901776).super.super.isa;
    Data.subscript.getter(1);
    v7 = Bool._bridgeToObjectiveC()().super.super.isa;
    v8 = sub_100008414(&qword_100077DE8);
    inited = swift_initStackObject(v8, v28);
    *(_OWORD *)(inited + 16) = xmmword_100058980;
    *(_QWORD *)(inited + 32) = 0x6567617375;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    *(_QWORD *)(inited + 48) = isa;
    *(_QWORD *)(inited + 72) = v5;
    *(_QWORD *)(inited + 80) = 0x6574617473;
    *(_QWORD *)(inited + 120) = v5;
    *(_QWORD *)(inited + 88) = 0xE500000000000000;
    *(_QWORD *)(inited + 96) = v7;
    v10 = isa;
    v11 = v7;
    v12 = Dictionary.init(dictionaryLiteral:)(inited);
    v13 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_100077598 != -1)
      swift_once(&qword_100077598, sub_10001C364);
    v14 = qword_10007C900;
    sub_10001BCB0(v12);
    v16 = v15;
    swift_bridgeObjectRelease(v12);
    sub_10001D360(v14, v3, v16, v13);

  }
  else
  {
    sub_10000F6CC(v4, (unint64_t *)&qword_100077C80, NSError_ptr);
    v17 = sub_10001D4DC();
    sub_100029474(v17, v18, v19, v20, v21, v22, 136);
    sub_10001D5B8();
    __chkstk_darwin(v23, v24);
    sub_10001D514();
    sub_10001D590(variable initialization expression of SidecarDisplaySession.delegate, v25, sub_10000F5EC, v26);
    sub_10001D5AC();
  }
  return 0;
}

void sub_10001CF68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[56];

  SidecarHIDDebugLog(_:)((void (*)(void))j___s10SidecarHID9HIDReportC11descriptionSSvg);
  v3 = sub_100008414(&qword_100078088);
  inited = swift_initStackObject(v3, v14);
  *(_OWORD *)(inited + 16) = xmmword_100058B70;
  *(_QWORD *)(inited + 32) = 1;
  *(_QWORD *)(inited + 40) = sub_10001C050(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(inited + 48) = v5;
  v6 = sub_10001D598();
  v7 = Dictionary.init(dictionaryLiteral:)(v6);
  v8 = *(id *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay16DisplayHIDDevice_stream);
  sub_10001D598();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  v10 = sub_10001D5FC((uint64_t)sub_10001C314, v11, (char)_NSConcreteStackBlock, 1107296256, v12, v13);
  sub_10001D5D0();
  sub_10001BAF8();
  objc_msgSend(v8, "sendOPACK:completion:", isa, v10);
  _Block_release(v10);

  sub_10001D54C();
}

uint64_t sub_10001D090(uint64_t result, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v6;
  _QWORD v7[4];

  if (result)
  {
    v6 = result;
    v7[2] = result;
    swift_errorRetain(result);
    sub_100028F80(a3, 0, a4, v7);
    return swift_errorRelease(v6);
  }
  return result;
}

uint64_t sub_10001D120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17ContinuityDisplay16DisplayHIDDevice_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10001D180()
{
  return type metadata accessor for DisplayHIDDevice(0);
}

uint64_t type metadata accessor for DisplayHIDDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_100077F88;
  if (!qword_100077F88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DisplayHIDDevice);
  return result;
}

uint64_t sub_10001D1C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10001D238()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001D25C(uint64_t a1)
{
  uint64_t v1;

  return sub_10001C54C(a1, v1);
}

uint64_t sub_10001D264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001D274(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001D280(uint64_t a1)
{
  uint64_t v1;

  return sub_10001D090(a1, v1, sub_10001C764, sub_10000F588);
}

unint64_t sub_10001D2A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100078098;
  if (!qword_100078098)
  {
    v1 = sub_100008478(&qword_100078090);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> UnsafeMutableBufferPointer<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100078098);
  }
  return result;
}

uint64_t sub_10001D2EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = Data.LargeSlice.init(_:)();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = Data.InlineSlice.init(_:)();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void sub_10001D360(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  objc_msgSend(a4, "postNotificationName:object:userInfo:", a1, a2, isa);

}

uint64_t sub_10001D3E8(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001D3F0(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result != 14)
    return sub_100009320(a2, a3);
  return result;
}

uint64_t sub_10001D40C(uint64_t a1)
{
  uint64_t v1;

  return sub_10001D090(a1, v1, sub_10001C764, sub_10000F5EC);
}

uint64_t sub_10001D434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v7 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v7 += a1 - result;
  }
  v8 = __OFSUB__(a2, a1);
  v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = __DataStorage._length.getter();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  v12 = v7 + v11;
  if (v7)
    v13 = v12;
  else
    v13 = 0;
  return sub_10001D2EC(v7, v13, a3);
}

uint64_t sub_10001D4DC()
{
  return 4294953353;
}

uint64_t sub_10001D4F4()
{
  uint64_t v0;
  uint64_t v1;

  return Data.append(_:)(v0, v1);
}

uint64_t sub_10001D504(uint64_t a1)
{
  return sub_100009364(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_10001D528()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100009320(v0, v1);
}

uint64_t sub_10001D534()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009364(v1, v0);
}

uint64_t sub_10001D540()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009320(v1, v0);
}

uint64_t sub_10001D560()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return sub_10001D3F0(v2, v1, v0);
}

void sub_10001D580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  HIDRequest.data.getter(v2, v1, v0);
}

void sub_10001D590(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  sub_100028F80(a1, 0, a3, a4);
}

uint64_t sub_10001D598()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10001D5AC()
{
  return swift_willThrow();
}

uint64_t sub_10001D5C4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001891C(v1, v0);
}

uint64_t sub_10001D5D0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10001D5E4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001891C(v1, v0);
}

void *sub_10001D5FC@<X0>(uint64_t a1@<X8>, uint64_t a2, char aBlock, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  a5 = a1;
  a6 = v6;
  return _Block_copy(&aBlock);
}

uint64_t sub_10001D608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_error);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_error) = a1;
  return swift_errorRelease(v2);
}

uint64_t sub_10001D620(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656E6E6F63736964;
  else
    return 0x697463656E6E6F63;
}

BOOL sub_10001D664(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_10001D674(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int sub_10001D698(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL sub_10001D6DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10001D664(*a1, *a2);
}

Swift::Int sub_10001D6E8()
{
  char *v0;

  return sub_10001D698(*v0);
}

void sub_10001D6F0(uint64_t a1)
{
  char *v1;

  sub_10001D674(a1, *v1);
}

Swift::Int sub_10001D6F8(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10001D738()
{
  char *v0;

  return sub_10001D620(*v0);
}

void sub_10001D748(char a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  objc_super v16;

  v3 = v2;
  v5 = a1 & 1;
  sub_10001BAD4(OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_delegate);
  v6 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_error;
  *(_QWORD *)&v2[OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_error] = 0;
  v7 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_disconnectButton;
  type metadata accessor for DisplayAlertButton();
  v8 = v2;
  *(_QWORD *)&v2[v7] = sub_10001E630();
  v9 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_mainLabel;
  v10 = sub_10001E690();
  *(_QWORD *)&v8[v9] = sub_10001E688(v10);
  v11 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_secondaryLabel;
  v12 = sub_10001E690();
  *(_QWORD *)&v8[v11] = sub_10001E688(v12);
  v13 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_debugLabel;
  v14 = sub_10001E690();
  *(_QWORD *)&v8[v13] = sub_10001E688(v14);
  v8[OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_reason] = v5;
  v15 = *(_QWORD *)&v3[v6];
  *(_QWORD *)&v3[v6] = a2;
  swift_errorRetain(a2);
  swift_errorRelease(v15);
  *(_QWORD *)&v8[OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_generation] = qword_10007C908;

  if (__OFADD__(qword_10007C908, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_10007C908;
    v16.receiver = v8;
    v16.super_class = (Class)type metadata accessor for DisplayModalAlert();
    objc_msgSendSuper2(&v16, "initWithNibName:bundle:", 0, 0);
    swift_errorRelease(a2);
  }
}

void sub_10001D88C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;

  v1 = v0;
  sub_10001BAD4(OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_delegate);
  *(_QWORD *)&v0[OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_error] = 0;
  v2 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_disconnectButton;
  type metadata accessor for DisplayAlertButton();
  *(_QWORD *)&v0[v2] = sub_10001E630();
  v3 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_mainLabel;
  v4 = sub_10001E680();
  *(_QWORD *)&v1[v3] = sub_10001E678(v4);
  v5 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_secondaryLabel;
  v6 = sub_10001E680();
  *(_QWORD *)&v1[v5] = sub_10001E678(v6);
  v7 = OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_debugLabel;
  v8 = sub_10001E680();
  *(_QWORD *)&v1[v7] = sub_10001E678(v8);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100055EC0, "ContinuityDisplay/DisplayModalAlert.swift", 41, 2, 54, 0);
  __break(1u);
}

void sub_10001D984()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  id v28;
  id v29;
  id v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  id v38;
  id v39;
  id v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  id v48;
  id v49;
  id v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  id v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  id v87;
  id v88;
  uint64_t v89;
  id v90;
  id v91;
  id v92;
  uint64_t v93;
  id v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  id v101;
  id v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  id v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  id v117;
  id v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  id v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Class isa;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  id v164;
  id v165;
  id v166;
  id v167;
  id v168;
  id v169;
  id v170;
  id v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  id v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  id v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  id v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  id v221;
  Swift::String v222;

  v1 = v0;
  v192 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 2);
  v182 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v192);
  v202 = objc_msgSend(v182, "contentView");
  v212 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  sub_10001E660(v212, "setTranslatesAutoresizingMaskIntoConstraints:");
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_mainLabel);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  sub_10001E698(v2, "setTextColor:");

  v4 = (void *)objc_opt_self(UIFont);
  v5 = objc_msgSend(v4, "boldSystemFontOfSize:", 20.0);
  sub_10001E698(v2, "setFont:");

  objc_msgSend(v2, "setTextAlignment:", 1);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_secondaryLabel);
  v7 = objc_msgSend(v4, "boldSystemFontOfSize:", 16.0);
  sub_10001E6A0((uint64_t)v7, "setFont:");

  v9 = sub_1000190FC(v8, "whiteColor");
  sub_10001E6A0((uint64_t)v9, "setTextColor:");

  objc_msgSend(v6, "setTextAlignment:", 1);
  objc_msgSend(v6, "setNumberOfLines:", 0);
  v10 = *(void **)(v0 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_debugLabel);
  v11 = sub_10001E660(v10, "setTranslatesAutoresizingMaskIntoConstraints:");
  v12 = sub_1000190FC((uint64_t)v11, "whiteColor");
  sub_100018F40(v10, "setTextColor:");

  v13 = objc_msgSend(v4, "monospacedSystemFontOfSize:weight:", 14.0, UIFontWeightThin);
  sub_100018F40(v10, "setFont:");

  objc_msgSend(v10, "setNumberOfLines:", 0);
  sub_10001E660(v2, "setTranslatesAutoresizingMaskIntoConstraints:");
  sub_10001E660(v6, "setTranslatesAutoresizingMaskIntoConstraints:");
  v14 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_disconnectButton);
  v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v222._object = (void *)0xEC000000656C7469;
  v16._countAndFlagsBits = 0x656E6E6F63736944;
  v16._object = (void *)0xEA00000000007463;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v222._countAndFlagsBits = 0x74206E6F74747542;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v222);

  sub_100020C98(v18._countAndFlagsBits, (uint64_t)v18._object, 0, v14);
  sub_10001E660(v14, "setTranslatesAutoresizingMaskIntoConstraints:");
  objc_msgSend(v14, "addTarget:action:forControlEvents:", v1, "_disconnectPressedWithSender:", 64);
  v19 = v202;
  objc_msgSend(v202, "addSubview:", v212);
  objc_msgSend(v202, "addSubview:", v10);
  objc_msgSend(v212, "addSubview:", v2);
  sub_10001E698(v212, "addSubview:");
  sub_100018F40(v212, "addSubview:");
  v163 = (id)objc_opt_self(NSLayoutConstraint);
  v20 = sub_100008414((uint64_t *)&unk_100078650);
  v21 = swift_allocObject(v20, 160, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100058BA0;
  v28 = sub_10001E620(v21, "leftAnchor", v22, v23, v24, v25, v26, v27, v137, v146, (uint64_t)v2, (uint64_t)v163, v1, (uint64_t)v182, (uint64_t)v192, (uint64_t)v202, v212);
  v29 = sub_10001E668((uint64_t)v28, "leftAnchor");
  v30 = objc_msgSend(v28, "constraintEqualToAnchor:", v29);
  sub_10001E670();

  *(_QWORD *)(v21 + 32) = &ResourceBundleClass.base_meths;
  v38 = sub_10001E620(v31, "rightAnchor", v32, v33, v34, v35, v36, v37, v138, v147, v155, (uint64_t)v164, v173, v183, v193, v203, v213);
  v39 = sub_10001E668((uint64_t)v38, "rightAnchor");
  v40 = sub_10001E60C((uint64_t)v39);
  sub_10001E628();

  *(_QWORD *)(v21 + 40) = v29;
  v48 = sub_10001E620(v41, "centerXAnchor", v42, v43, v44, v45, v46, v47, v139, v148, v156, (uint64_t)v165, v174, v184, v194, v204, v214);
  v49 = sub_10001E668((uint64_t)v48, "centerXAnchor");
  v50 = sub_10001E60C((uint64_t)v49);
  sub_10001E628();

  *(_QWORD *)(v21 + 48) = v29;
  v58 = sub_10001E620(v51, "centerYAnchor", v52, v53, v54, v55, v56, v57, v140, v149, v157, (uint64_t)v166, v175, v185, v195, v205, v215);
  v59 = sub_10001E668((uint64_t)v58, "centerYAnchor");
  v60 = sub_10001E60C((uint64_t)v59);
  sub_10001E628();

  *(_QWORD *)(v21 + 56) = v29;
  v62 = sub_10001E658(v61, "leftAnchor");
  v63 = objc_msgSend(v19, "leftAnchor");
  v64 = sub_10001E64C((uint64_t)v63, "constraintEqualToAnchor:constant:");
  sub_10001E628();

  *(_QWORD *)(v21 + 64) = v29;
  v66 = sub_10001E658(v65, "topAnchor");
  v67 = objc_msgSend(v19, "topAnchor");
  v68 = sub_10001E64C((uint64_t)v67, "constraintEqualToAnchor:constant:");
  sub_10001E628();

  *(_QWORD *)(v21 + 72) = v29;
  v70 = sub_10001E658(v69, "centerXAnchor");
  v77 = sub_10001E620((int)v70, "centerXAnchor", v71, v72, v73, v74, v75, v76, v141, v150, v158, (uint64_t)v167, v176, v186, v196, v206, v216);
  v78 = objc_msgSend(v70, "constraintEqualToAnchor:", v77);
  sub_10001E628();

  *(_QWORD *)(v21 + 80) = v29;
  v80 = sub_10001E658(v79, "topAnchor");
  v87 = sub_10001E620((int)v80, "topAnchor", v81, v82, v83, v84, v85, v86, v142, v151, v159, (uint64_t)v168, v177, v187, v197, v207, v217);
  v88 = sub_10001E60C((uint64_t)v87);
  sub_10001E628();

  *(_QWORD *)(v21 + 88) = v29;
  v90 = sub_10000F648(v89, "topAnchor");
  v91 = sub_10001E658((uint64_t)v90, "bottomAnchor");
  v92 = sub_10001E64C((uint64_t)v91, "constraintEqualToAnchor:constant:");
  sub_10001E628();

  *(_QWORD *)(v21 + 96) = v29;
  v94 = sub_10000F648(v93, "centerXAnchor");
  v101 = sub_10001E620((int)v94, "centerXAnchor", v95, v96, v97, v98, v99, v100, v143, v152, v160, (uint64_t)v169, v178, v188, v198, v208, v218);
  v102 = sub_10001E60C((uint64_t)v101);
  sub_10001E628();

  *(_QWORD *)(v21 + 104) = v29;
  v104 = objc_msgSend(sub_10000F648(v103, "widthAnchor"), "constraintLessThanOrEqualToConstant:", 320.0);
  sub_10001E670();
  *(_QWORD *)(v21 + 112) = v91;
  v106 = sub_1000190FC(v105, "topAnchor");
  v107 = sub_10000F648((uint64_t)v106, "bottomAnchor");
  v108 = sub_10001E64C((uint64_t)v107, "constraintEqualToAnchor:constant:");

  *(_QWORD *)(v21 + 120) = v108;
  v110 = sub_1000190FC(v109, "centerXAnchor");
  v117 = sub_10001E620((int)v110, "centerXAnchor", v111, v112, v113, v114, v115, v116, v144, v153, v161, (uint64_t)v170, v179, v189, v199, v209, v219);
  v118 = sub_10001E60C((uint64_t)v117);

  *(_QWORD *)(v21 + 128) = v118;
  v120 = objc_msgSend(sub_1000190FC(v119, "heightAnchor"), "constraintEqualToConstant:", 54.0);
  sub_10001E670();
  *(_QWORD *)(v21 + 136) = v107;
  v122 = objc_msgSend(sub_1000190FC(v121, "widthAnchor"), "constraintGreaterThanOrEqualToConstant:", 204.0);
  sub_10001E670();
  *(_QWORD *)(v21 + 144) = v107;
  v124 = sub_1000190FC(v123, "bottomAnchor");
  v131 = sub_10001E620((int)v124, "bottomAnchor", v125, v126, v127, v128, v129, v130, v145, v154, v162, (uint64_t)v171, v180, v190, v200, v210, v220);
  v132 = objc_msgSend(v124, "constraintEqualToAnchor:", v131);

  *(_QWORD *)(v21 + 152) = v132;
  specialized Array._endMutation()(v133, v134, v135);
  sub_10001E5D0();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v172, "activateConstraints:", isa, swift_bridgeObjectRelease(v21).n128_f64[0]);

  objc_msgSend(v181, "setView:", v191);
}

uint64_t sub_10001E28C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_delegate);
  if (result)
  {
    v2 = result;
    sub_1000316B4();
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void sub_10001E324()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.DisplayModalAlert", 35, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_10001E374()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayModalAlert();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DisplayModalAlert()
{
  return objc_opt_self(_TtC17ContinuityDisplay17DisplayModalAlert);
}

uint64_t getEnumTagSinglePayload for DisplayModalAlert.Reason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayModalAlert.Reason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001E504 + 4 * byte_100058BC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001E538 + 4 * byte_100058BC0[v4]))();
}

uint64_t sub_10001E538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001E540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001E548);
  return result;
}

uint64_t sub_10001E554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001E55CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001E560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001E568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10001E574(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayModalAlert.Reason()
{
  return &type metadata for DisplayModalAlert.Reason;
}

unint64_t sub_10001E594()
{
  unint64_t result;

  result = qword_100078110;
  if (!qword_100078110)
  {
    result = swift_getWitnessTable(&unk_100058C74, &type metadata for DisplayModalAlert.Reason);
    atomic_store(result, (unint64_t *)&qword_100078110);
  }
  return result;
}

unint64_t sub_10001E5D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000786D0;
  if (!qword_1000786D0)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000786D0);
  }
  return result;
}

id sub_10001E60C(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  return objc_msgSend(v1, *(SEL *)(v2 + 3848), a1);
}

id sub_10001E620(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  return objc_msgSend(a17, a2);
}

void sub_10001E628()
{
  void *v0;

}

id sub_10001E630()
{
  return sub_1000205B4(0x656E6E6F63736944, 0xEA00000000007463);
}

id sub_10001E64C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

id sub_10001E658(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id sub_10001E660(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0);
}

id sub_10001E668(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void sub_10001E670()
{
  void *v0;

}

id sub_10001E678(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 2472));
}

id sub_10001E680()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 3944));
}

id sub_10001E688(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 2472));
}

id sub_10001E690()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 3944));
}

id sub_10001E698(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

id sub_10001E6A0(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

char *sub_10001E6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  id v23;
  NSString *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  double v30;
  NSString v31;
  uint64_t v33;
  char v34[72];
  objc_super v35;

  v9 = OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_titleField;
  v10 = objc_allocWithZone((Class)UILabel);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "init");
  v12 = OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_detailsField;
  *(_QWORD *)&v11[v12] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  v35.receiver = v11;
  v35.super_class = (Class)type metadata accessor for SidebarPopover();
  v13 = (char *)objc_msgSendSuper2(&v35, "initWithNibName:bundle:", 0, 0);
  v14 = *(void **)&v13[OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_titleField];
  v15 = v13;
  sub_100036670(a1, a2, v14);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
  objc_msgSend(v16, "setLineSpacing:", 2.0);
  v17 = OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_detailsField;
  v18 = *(void **)&v15[OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_detailsField];
  if (a4)
    v19 = a3;
  else
    v19 = 0;
  v33 = v19;
  if (a4)
    v20 = a4;
  else
    v20 = 0xE000000000000000;
  v21 = sub_100008414(&qword_100078150);
  inited = swift_initStackObject(v21, v34);
  *(_OWORD *)(inited + 16) = xmmword_100058B70;
  *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
  *(_QWORD *)(inited + 64) = sub_1000085DC(0, &qword_100078158, NSMutableParagraphStyle_ptr);
  *(_QWORD *)(inited + 40) = v16;
  type metadata accessor for Key(0);
  sub_10001F16C();
  v23 = v18;
  v24 = NSParagraphStyleAttributeName;
  v25 = v16;
  swift_bridgeObjectRetain(a4);
  v26 = Dictionary.init(dictionaryLiteral:)(inited);
  v27 = objc_allocWithZone((Class)NSAttributedString);
  v28 = sub_10001F0C8(v33, v20, v26);
  objc_msgSend(v23, "setAttributedText:", v28);

  v29 = *(id *)&v15[v17];
  if (a4)
  {
    v31 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v30 = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  else
  {
    v31 = 0;
  }
  objc_msgSend(v29, "setText:", v31, v30);

  return v15;
}

void sub_10001E920()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_titleField;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  v2 = OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_detailsField;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100055EC0, "ContinuityDisplay/SidebarPopover.swift", 38, 2, 31, 0);
  __break(1u);
}

void sub_10001E9E4()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  Class isa;

  v1 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v0, "setView:", v1);
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  sub_10001F1E0((uint64_t)v2, "setBackgroundColor:");

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_titleField], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = *(void **)&v0[OBJC_IVAR____TtC17ContinuityDisplay14SidebarPopover_detailsField];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = (void *)objc_opt_self(UIFont);
  v5 = objc_msgSend(v4, "systemFontOfSize:weight:", 13.0, UIFontWeightMedium);
  sub_10001F1EC((uint64_t)v5, "setFont:");

  v6 = sub_10001F1D4();
  sub_10001F1EC((uint64_t)v6, "setTextColor:");

  v7 = objc_msgSend(v4, "systemFontOfSize:weight:", 11.0, UIFontWeightRegular);
  objc_msgSend(v3, "setFont:", v7);

  v8 = sub_10001F1D4();
  objc_msgSend(v3, "setTextColor:", v8);

  sub_10001F1E0((uint64_t)objc_msgSend(v3, "setNumberOfLines:", 0), "addSubview:");
  objc_msgSend(v1, "addSubview:", v3);
  v50 = (void *)objc_opt_self(NSLayoutConstraint);
  v9 = sub_100008414((uint64_t *)&unk_100078650);
  v10 = swift_allocObject(v9, 88, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100058CA0;
  v11 = sub_100018D44(v10, "leadingAnchor");
  v12 = sub_10001F1AC();
  v13 = sub_10001F204(v12);
  sub_10001F1CC();
  v15 = sub_10001F1B8(v14, "constraintEqualToAnchor:constant:");
  sub_10001F1C4();

  *(_QWORD *)(v10 + 32) = &ResourceBundleClass.base_meths;
  v17 = sub_1000190FC(v16, "leadingAnchor");
  v18 = sub_10001F1AC();
  v19 = sub_10001F204(v18);
  sub_10001F1CC();
  v21 = sub_10001F1B8(v20, "constraintEqualToAnchor:constant:");
  sub_10001F1C4();

  *(_QWORD *)(v10 + 40) = &ResourceBundleClass.base_meths;
  v23 = sub_100018D44(v22, "trailingAnchor");
  v24 = sub_10001F1AC();
  v25 = sub_10001F1F8(v24);
  sub_10001F1CC();
  v27 = sub_10001F1B8(v26, "constraintEqualToAnchor:constant:");
  sub_10001F1C4();

  *(_QWORD *)(v10 + 48) = &ResourceBundleClass.base_meths;
  v29 = sub_1000190FC(v28, "trailingAnchor");
  v30 = sub_10001F1AC();
  v31 = sub_10001F1F8(v30);
  sub_10001F1CC();
  v33 = sub_10001F1B8(v32, "constraintEqualToAnchor:constant:");
  sub_10001F1C4();

  *(_QWORD *)(v10 + 56) = &ResourceBundleClass.base_meths;
  v35 = sub_100018D44(v34, "topAnchor");
  v36 = objc_msgSend(v1, "topAnchor");
  v37 = objc_msgSend(v35, "constraintEqualToAnchor:constant:", v36, 8.0);

  *(_QWORD *)(v10 + 64) = v37;
  v39 = sub_1000190FC(v38, "topAnchor");
  v40 = sub_100018D44((uint64_t)v39, "bottomAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:constant:", v40, 4.0);
  sub_10001F1C4();

  *(_QWORD *)(v10 + 72) = v36;
  v43 = sub_1000190FC(v42, "bottomAnchor");
  v44 = sub_10001F1AC();
  v45 = objc_msgSend(v44, "bottomAnchor");

  v46 = objc_msgSend(v43, "constraintEqualToAnchor:constant:", v45, -12.0);
  *(_QWORD *)(v10 + 80) = v46;
  specialized Array._endMutation()(v47, v48, v49);
  sub_1000085DC(0, (unint64_t *)&qword_1000786D0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v50, "activateConstraints:", isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

}

id sub_10001EEF4(char a1)
{
  void *v1;
  id v3;
  id result;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  objc_super v12;

  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for SidebarPopover();
  v3 = objc_msgSendSuper2(&v12, "viewWillAppear:", a1 & 1);
  result = sub_1000190FC((uint64_t)v3, "view");
  if (result)
  {
    v7 = result;
    LODWORD(v5) = 1144750080;
    LODWORD(v6) = 1112014848;
    objc_msgSend(result, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", 180.0, UILayoutFittingCompressedSize.height, v5, v6);
    v9 = v8;
    v11 = v10;

    return objc_msgSend(v1, "setPreferredContentSize:", v9, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001EFF0()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.SidebarPopover", 32, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id sub_10001F040()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SidebarPopover();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SidebarPopover()
{
  return objc_opt_self(_TtC17ContinuityDisplay14SidebarPopover);
}

id sub_10001F0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v6;
  unint64_t v7;
  NSDictionary v8;
  id v9;

  v6 = String._bridgeToObjectiveC()();
  v7 = swift_bridgeObjectRelease(a2).n128_u64[0];
  if (a3)
  {
    type metadata accessor for Key(0);
    sub_10001F16C();
    v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v7 = swift_bridgeObjectRelease(a3).n128_u64[0];
  }
  else
  {
    v8.super.isa = 0;
  }
  v9 = objc_msgSend(v3, "initWithString:attributes:", v6, v8.super.isa, *(double *)&v7);

  return v9;
}

unint64_t sub_10001F16C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100077730;
  if (!qword_100077730)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_1000585AC, v1);
    atomic_store(result, (unint64_t *)&qword_100077730);
  }
  return result;
}

id sub_10001F1AC()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 4056));
}

id sub_10001F1B8(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void sub_10001F1C4()
{
  void *v0;

}

void sub_10001F1CC()
{
  void *v0;

}

id sub_10001F1D4()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, *(SEL *)(v1 + 2944));
}

id sub_10001F1E0(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

id sub_10001F1EC(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

id sub_10001F1F8(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 4064));
}

id sub_10001F204(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 4048));
}

void type metadata accessor for Sidebar()
{
  sub_10000C664();
}

uint64_t sub_10001F21C(uint64_t a1)
{
  return sub_10001B978(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t sub_10001F230(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10001B928(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t sub_10001F290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_10001B928(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_10001B978(v8, v9, v10, v11, v12);
  return a1;
}

__n128 sub_10001F300(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10001F314(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_10001B978(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t sub_10001F35C(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10001F39C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_10001F3E4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_10001F3FC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

void type metadata accessor for Sidebar.Identifier()
{
  sub_10000C664();
}

uint64_t sub_10001F424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~v2) == 0)
        v4 = 0;
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

void sub_10001F474(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

double sub_10001F498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = sub_100009BB4();
  v4 = v3;
  String.hash(into:)(a1, v2, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

void sub_10001F4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _QWORD v8[5];
  _QWORD v9[4];
  char v10;

  v1 = v0;
  sub_10001B8EC(v0, (uint64_t)v8);
  v2 = v8[0];
  v3 = v8[1];
  v4 = v8[2];
  v5 = v8[3];
  sub_10001B8EC(v1, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      v6 = v2 == 8 && v3 == 6;
      if (!v6 || (v4 || v5 != 0xE000000000000000) && (sub_100020524() & 1) == 0)
        sub_100020510();
    }
    else
    {
      sub_10002057C();
      if (!v7)
        sub_100020560();
    }
  }
  sub_10002054C();
}

void sub_10001F668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  _QWORD v13[4];
  char v14;

  v1 = v0;
  sub_10001B8EC(v0, (uint64_t)v12);
  v2 = v12[0];
  v3 = v12[1];
  v4 = v12[2];
  v5 = v12[3];
  sub_10001B8EC(v1, (uint64_t)v13);
  if (!v14)
    goto LABEL_19;
  if (v14 == 1)
  {
    v6 = v2 == 8 && v3 == 6;
    if (v6 && (!v4 && v5 == 0xE000000000000000 || (sub_100020524() & 1) != 0))
      goto LABEL_19;
LABEL_16:
    sub_100020510();
    goto LABEL_19;
  }
  sub_10002057C();
  if (!v10)
  {
    sub_100020560();
    goto LABEL_19;
  }
  v11 = v9 | v8;
  if (v7 == 1 && !v11)
    goto LABEL_16;
LABEL_19:
  sub_10002054C();
}

uint64_t sub_10001F80C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[56];
  _BYTE v11[56];
  _BYTE v12[56];
  _BYTE v13[56];
  _BYTE v14[80];
  _BYTE v15[128];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  sub_10001B8EC(v0, (uint64_t)&v16);
  if (v20)
  {
    if (v20 == 1)
    {
      v1 = sub_100008414(&qword_100078168);
      inited = swift_initStackObject(v1, v15);
      sub_100020594((__n128 *)inited, (__n128)xmmword_100058970);
      *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
      *(_QWORD *)(inited + 56) = 6582125;
      *(_QWORD *)(inited + 64) = 0xE300000000000000;
      *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
      *(_QWORD *)(inited + 80) = 7955819;
      *(_QWORD *)(inited + 88) = 0xE300000000000000;
      *(NSNumber *)(inited + 96) = UInt._bridgeToObjectiveC()();
      *(_QWORD *)(inited + 104) = 7500915;
      *(_QWORD *)(inited + 112) = 0xE300000000000000;
      *(_QWORD *)(inited + 120) = String._bridgeToObjectiveC()();
    }
    else
    {
      if (v18 | v19 | v16 | v17)
      {
        v4 = v18 | v19 | v17;
        if (v16 != 1 || v4)
        {
          if (v16 != 2 || v4)
          {
            v8 = sub_100008414(&qword_100078168);
            inited = swift_initStackObject(v8, v13);
            sub_10002053C((__n128 *)inited, (__n128)xmmword_100058B70);
          }
          else
          {
            v7 = sub_100008414(&qword_100078168);
            inited = swift_initStackObject(v7, v12);
            sub_10002053C((__n128 *)inited, (__n128)xmmword_100058B70);
          }
        }
        else
        {
          v5 = sub_100008414(&qword_100078168);
          inited = swift_initStackObject(v5, v11);
          sub_10002053C((__n128 *)inited, (__n128)xmmword_100058B70);
        }
      }
      else
      {
        v6 = sub_100008414(&qword_100078168);
        inited = swift_initStackObject(v6, v10);
        sub_10002053C((__n128 *)inited, (__n128)xmmword_100058B70);
      }
      *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
    }
  }
  else
  {
    v3 = sub_100008414(&qword_100078168);
    inited = swift_initStackObject(v3, v14);
    sub_100020594((__n128 *)inited, (__n128)xmmword_100058980);
    *(_QWORD *)(inited + 48) = String._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = 6582125;
    *(_QWORD *)(inited + 64) = 0xE300000000000000;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  }
  return Dictionary.init(dictionaryLiteral:)(inited);
}

void sub_10001FAA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  Swift::UInt v9;
  Swift::UInt v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = v1;
  sub_10001B8EC(v2, (uint64_t)&v10);
  v4 = v10;
  if (v14)
  {
    if (v14 == 1)
    {
      v5 = v11;
      v6 = v12;
      v7 = v13;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      String.hash(into:)(a1, v6, v7);
      return;
    }
    if (v12 | v13 | v10 | v11)
    {
      v9 = v12 | v13 | v11;
      if (v10 != 1 || v9)
      {
        if (v10 != 2 || v9)
          v8 = 5;
        else
          v8 = 4;
      }
      else
      {
        v8 = 3;
      }
    }
    else
    {
      v8 = 2;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    v8 = v4;
  }
  Hasher._combine(_:)(v8);
}

uint64_t sub_10001FB90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v10;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = sub_10001B8EC(a1, (uint64_t)&v17);
  v4 = v17;
  if (!v21)
  {
    sub_10001B8EC(a2, (uint64_t)&v14);
    if (!v16)
    {
      v10 = v4 == v14.i64[0];
      return v10 & 1;
    }
    goto LABEL_15;
  }
  if (v21 != 1)
  {
    if (v19 | v20 | v17 | v18)
    {
      v12 = v19 | v20 | v18;
      if (v17 != 1 || v12)
      {
        if (v17 != 2 || v12)
        {
          sub_1000204F4(v3, (uint64_t)&v14);
          if (!v8 || v14.i64[0] != 3)
            goto LABEL_15;
        }
        else
        {
          sub_1000204F4(v3, (uint64_t)&v14);
          if (!v8 || v14.i64[0] != 2)
            goto LABEL_15;
        }
      }
      else
      {
        sub_1000204F4(v3, (uint64_t)&v14);
        if (!v8 || v14.i64[0] != 1)
          goto LABEL_15;
      }
      if (!(v15.i64[0] | v15.i64[1] | v14.i64[1]))
        goto LABEL_39;
    }
    else
    {
      sub_1000204F4(v3, (uint64_t)&v14);
      if (v8)
      {
        v13 = vorrq_s8(v14, v15);
        if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))
          goto LABEL_39;
      }
    }
LABEL_15:
    v10 = 0;
    return v10 & 1;
  }
  v6 = v18;
  v5 = v19;
  v7 = v20;
  sub_10001B8EC(a2, (uint64_t)&v14);
  if (v16 != 1)
    goto LABEL_15;
  v8 = v4 == v14.i64[0] && v6 == v14.i64[1];
  if (!v8)
    goto LABEL_15;
  if (v5 == v15.i64[0] && v7 == v15.i64[1])
  {
LABEL_39:
    v10 = 1;
    return v10 & 1;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v15.i64[0], v15.i64[1], 0);
  return v10 & 1;
}

Swift::Int sub_10001FD28()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10001FAA0((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10001FD64()
{
  uint64_t v0;
  _BYTE v2[40];

  sub_10001B8EC(v0, (uint64_t)v2);
  return sub_10001FD28();
}

void sub_10001FD98(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];

  sub_10001B8EC(v1, (uint64_t)v3);
  sub_10001FAA0(a1);
}

Swift::Int sub_10001FDD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD v4[9];
  _BYTE v5[40];

  sub_10001B8EC(v1, (uint64_t)v5);
  Hasher.init(_seed:)(v4, a1);
  sub_10001FAA0((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_10001FE24(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  sub_10001B8EC(a1, (uint64_t)v4);
  sub_10001B8EC(a2, (uint64_t)v5);
  return sub_10001FB90((uint64_t)v4, (uint64_t)v5) & 1;
}

unint64_t sub_10001FE70()
{
  unint64_t result;

  result = qword_100078160;
  if (!qword_100078160)
  {
    result = swift_getWitnessTable(&unk_100058CE8, &unk_10006B098);
    atomic_store(result, (unint64_t *)&qword_100078160);
  }
  return result;
}

uint64_t sub_10001FEAC(char a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;

  if ((a1 & 1) == 0)
  {
    v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  sub_10000ABC0(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  v2 = v3;
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
  {
    sub_1000204E8(v4 > 1, v5 + 1);
    v2 = v20;
  }
  v2[2] = v5 + 1;
  v6 = &v2[2 * v5];
  v6[4] = 0x7466696873;
  v6[5] = 0xE500000000000000;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((sub_1000205AC() & 1) == 0)
    {
      sub_1000204E8(0, v2[2] + 1);
      v2 = v21;
    }
    v8 = v2[2];
    v7 = v2[3];
    if (v8 >= v7 >> 1)
    {
      sub_1000204E8(v7 > 1, v8 + 1);
      v2 = v22;
    }
    v2[2] = v8 + 1;
    v9 = &v2[2 * v8];
    v9[4] = 0x6C6F72746E6F63;
    v9[5] = 0xE700000000000000;
  }
LABEL_12:
  if ((a1 & 4) == 0)
  {
    if ((a1 & 8) == 0)
      goto LABEL_14;
LABEL_21:
    if ((sub_1000205AC() & 1) == 0)
    {
      sub_1000204E8(0, v2[2] + 1);
      v2 = v25;
    }
    v15 = v2[2];
    v14 = v2[3];
    if (v15 >= v14 >> 1)
    {
      sub_1000204E8(v14 > 1, v15 + 1);
      v2 = v26;
    }
    v2[2] = v15 + 1;
    v16 = &v2[2 * v15];
    v16[4] = 0x646E616D6D6F63;
    v16[5] = 0xE700000000000000;
    goto LABEL_26;
  }
  if ((sub_1000205AC() & 1) == 0)
  {
    sub_1000204E8(0, v2[2] + 1);
    v2 = v23;
  }
  v12 = v2[2];
  v11 = v2[3];
  if (v12 >= v11 >> 1)
  {
    sub_1000204E8(v11 > 1, v12 + 1);
    v2 = v24;
  }
  v2[2] = v12 + 1;
  v13 = &v2[2 * v12];
  v13[4] = 0x6E6F6974706FLL;
  v13[5] = 0xE600000000000000;
  if ((a1 & 8) != 0)
    goto LABEL_21;
LABEL_14:
  if (v2[2])
  {
LABEL_26:
    v17 = sub_100008414(&qword_100077E68);
    v18 = sub_1000204A4();
    v10 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v17, v18);
    swift_bridgeObjectRelease(v2);
    return v10;
  }
  swift_bridgeObjectRelease(v2);
  return 0;
}

_QWORD *sub_1000200F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int sub_100020100()
{
  Swift::UInt *v0;

  return sub_10000A704(*v0);
}

void sub_100020108(int a1)
{
  Swift::UInt *v1;

  sub_10001F474(a1, *v1);
}

void sub_100020110(uint64_t a1)
{
  Swift::UInt *v1;

  sub_1000298A0(a1, *v1);
}

uint64_t sub_100020118()
{
  _QWORD *v0;

  return sub_10001FEAC(*v0);
}

uint64_t sub_100020120@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = variable initialization expression of VideoStream.session();
  *a1 = result;
  return result;
}

BOOL sub_100020144(uint64_t *a1)
{
  uint64_t *v1;

  return sub_100018038(*a1, *v1);
}

uint64_t sub_100020150@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_10002017C(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10002017C(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_100020184@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100018018(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1000201B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1000201DC(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1000201DC(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

BOOL sub_1000201E4(_QWORD *a1, uint64_t *a2)
{
  return sub_10003754C(a1, *a2);
}

uint64_t sub_1000201EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_10002021C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_10002021C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = *v1 & a1;
  if (result)
    *v1 &= ~a1;
  return result;
}

uint64_t sub_100020240@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = sub_100020270(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100020270(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_100020288(uint64_t *a1)
{
  return sub_100037578(*a1);
}

uint64_t sub_100020290(uint64_t *a1)
{
  return sub_10001801C(*a1);
}

uint64_t sub_100020298(uint64_t *a1)
{
  return sub_1000202A0(*a1);
}

uint64_t sub_1000202A0(uint64_t result)
{
  _QWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_1000202B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1000202DC(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1000202DC(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL sub_1000202E4(uint64_t *a1)
{
  uint64_t *v1;

  return sub_10001802C(*a1, *v1);
}

BOOL sub_1000202F0(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1000202FC(*a1, *v1);
}

BOOL sub_1000202FC(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_100020308()
{
  uint64_t *v0;

  return sub_100020310(*v0);
}

BOOL sub_100020310(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_10002031C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_100020334(uint64_t *a1)
{
  return sub_10002033C(*a1);
}

uint64_t sub_10002033C(uint64_t result)
{
  _QWORD *v1;

  *v1 &= ~result;
  return result;
}

_QWORD *sub_10002034C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10002035C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_100020368(uint64_t *a1, uint64_t *a2)
{
  return static HostTime.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_100020374@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_10001F424(a1);
  *a2 = result;
  return result;
}

void type metadata accessor for Sidebar.Modifiers()
{
  sub_10000C664();
}

unint64_t sub_1000203A8()
{
  unint64_t result;

  result = qword_100078170;
  if (!qword_100078170)
  {
    result = swift_getWitnessTable(&unk_100058D8C, &unk_10006B0B8);
    atomic_store(result, (unint64_t *)&qword_100078170);
  }
  return result;
}

unint64_t sub_1000203E8()
{
  unint64_t result;

  result = qword_100078178;
  if (!qword_100078178)
  {
    result = swift_getWitnessTable(&unk_100058D5C, &unk_10006B0B8);
    atomic_store(result, (unint64_t *)&qword_100078178);
  }
  return result;
}

unint64_t sub_100020428()
{
  unint64_t result;

  result = qword_100078180;
  if (!qword_100078180)
  {
    result = swift_getWitnessTable(&unk_100058DB4, &unk_10006B0B8);
    atomic_store(result, (unint64_t *)&qword_100078180);
  }
  return result;
}

unint64_t sub_100020468()
{
  unint64_t result;

  result = qword_100078188;
  if (!qword_100078188)
  {
    result = swift_getWitnessTable(&unk_100058DEC, &unk_10006B0B8);
    atomic_store(result, (unint64_t *)&qword_100078188);
  }
  return result;
}

unint64_t sub_1000204A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100078190;
  if (!qword_100078190)
  {
    v1 = sub_100008478(&qword_100077E68);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100078190);
  }
  return result;
}

void sub_1000204E8(char a1, int64_t a2)
{
  uint64_t v2;

  sub_10000ABC0(a1, a2, 1, v2);
}

uint64_t sub_1000204F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10001B8EC(v2, a2);
}

uint64_t sub_100020524()
{
  uint64_t v0;
  uint64_t v1;

  return _stringCompareWithSmolCheck(_:_:expecting:)(0, 0xE000000000000000, v0, v1, 0);
}

__n128 *sub_10002053C(__n128 *result, __n128 a2)
{
  unint64_t v2;

  result[1] = a2;
  result[2].n128_u64[0] = v2;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

__n128 *sub_100020594(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 1701869940;
  result[2].n128_u64[1] = 0xE400000000000000;
  return result;
}

uint64_t sub_1000205AC()
{
  uint64_t v0;

  return swift_isUniquelyReferenced_nonNull_native(v0);
}

id sub_1000205B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;

  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "buttonWithType:", 0);
  sub_100020C98(a1, a2, 0, v5);
  sub_10002077C();

  return v5;
}

id sub_100020624()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 1.0, 0.25);
  qword_10007C910 = (uint64_t)result;
  return result;
}

void *sub_10002065C(uint64_t a1, CGFloat a2, CGFloat a3)
{
  void *v3;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v15;
  id v16;
  CGPoint v18;
  CGRect v19;

  v6 = (uint64_t)sub_1000190FC(a1, "isHidden");
  if ((v6 & 1) != 0)
    return 0;
  if (!sub_1000190FC(v6, "isUserInteractionEnabled"))
    return 0;
  objc_msgSend(v3, "alpha");
  if (v7 == 0.0)
    return 0;
  sub_100020CFC();
  v9 = 100.0 - v8;
  v10 = (100.0 - v8) * -0.5;
  sub_100020CFC();
  v15 = v9 > 0.0 ? v10 : -0.0;
  v19 = CGRectInset(*(CGRect *)&v11, 0.0, v15);
  v18.x = a2;
  v18.y = a3;
  if (!CGRectContainsPoint(v19, v18))
    return 0;
  v16 = v3;
  return v3;
}

void sub_10002077C()
{
  void *v0;
  id v1;
  id v2;

  objc_msgSend(v0, "setContentEdgeInsets:", 0.0, 8.0, 0.0, 8.0);
  if (qword_1000775A0 != -1)
    swift_once(&qword_1000775A0, sub_100020624);
  objc_msgSend(v0, "setBackgroundColor:", qword_10007C910);
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  objc_msgSend(v0, "setTintColor:", v1);

  v2 = objc_msgSend(v0, "layer");
  objc_msgSend(v2, "setMasksToBounds:", 1);
  objc_msgSend(v2, "setCornerRadius:", 6.0);

}

id sub_100020934(SEL *a1)
{
  void *v1;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for DisplayAlertButton();
  return objc_msgSendSuper2(&v4, *a1);
}

void sub_1000209B4(char a1, SEL *a2)
{
  void *v2;
  void *v5;
  id v6;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for DisplayAlertButton();
  objc_msgSendSuper2(&v7, *a2, a1 & 1);
  v5 = (void *)objc_opt_self(CATransaction);
  v6 = v2;
  objc_msgSend(v5, "begin");
  sub_100020A50((uint64_t)objc_msgSend(v5, "setDisableActions:", 1));
  objc_msgSend(v5, "commit");

}

void sub_100020A50(uint64_t a1)
{
  void *v1;
  id v2;
  char v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  id v6;
  double v7;
  id v8;
  void *v9;

  v2 = sub_1000190FC(a1, "isSelected");
  v3 = (char)v2;
  v4 = sub_1000190FC((uint64_t)v2, "isHighlighted");
  v5 = v4;
  if ((v3 & 1) != 0)
  {
    v6 = objc_allocWithZone((Class)UIColor);
    if ((v5 & 1) != 0)
      v7 = 0.623529412;
    else
      v7 = 0.501960784;
    v8 = objc_msgSend(v6, "initWithWhite:alpha:", v7, 1.0);
    goto LABEL_8;
  }
  if ((v4 & 1) != 0)
  {
    v8 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithWhite:alpha:", 0.392156863, 1.0);
LABEL_8:
    v9 = v8;
    objc_msgSend(v1, "setBackgroundColor:", v8);
    sub_100020CEC(v9);
    return;
  }
  if (qword_1000775A0 != -1)
    swift_once(&qword_1000775A0, sub_100020624);
  objc_msgSend(v1, "setBackgroundColor:", qword_10007C910);
}

id sub_100020B54(double a1, double a2, double a3, double a4)
{
  void *v4;
  objc_super v10;

  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for DisplayAlertButton();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id sub_100020BD4(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for DisplayAlertButton();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id sub_100020C44()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayAlertButton();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DisplayAlertButton()
{
  return objc_opt_self(_TtC17ContinuityDisplay18DisplayAlertButton);
}

void sub_100020C98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7;

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(a4, "setTitle:forState:", v7, a3, swift_bridgeObjectRelease(a2).n128_f64[0]);
  sub_100020CEC(v7);
}

void sub_100020CEC(id a1)
{

}

id sub_100020CFC()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 2536));
}

uint64_t sub_100020D08(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD aBlock[6];
  sched_param v6;
  pthread_attr_t v7;

  memset(&v7, 0, sizeof(v7));
  pthread_attr_init(&v7);
  v6 = 0;
  pthread_attr_setschedpolicy(&v7, 4);
  pthread_attr_getschedparam(&v7, &v6);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (a1 > 0x7FFFFFFF)
    goto LABEL_5;
  v6.sched_priority = a1;
  pthread_attr_setschedparam(&v7, &v6);
  aBlock[4] = sub_100020EF4;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000C66C;
  aBlock[3] = &unk_10006B220;
  v2 = _Block_copy(aBlock);
  v3 = dispatch_pthread_root_queue_create("com.apple.sidecar.root-queue", 0, &v7, v2);
  _Block_release(v2);
  pthread_attr_destroy(&v7);
  return v3;
}

uint64_t sub_100020E2C(uint64_t a1)
{
  mach_port_t v2;
  integer_t *v3;
  uint64_t v4;
  kern_return_t v5;
  integer_t v7[2];
  _DWORD v8[4];

  v2 = mach_host_self();
  sub_100021614();
  sub_1000211A0(v3, v4, v2);
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  if (a1 > 0x7FFFFFFF)
    goto LABEL_5;
  v7[0] = a1;
  v7[1] = v8[3];
  sub_1000213E8(v7, (uint64_t)v8);
  v5 = mach_port_deallocate(mach_task_self_, v2);
  return __logMachError(_:)(v5);
}

uint64_t sub_100020EF4()
{
  sub_1000085DC(0, &qword_100077978, NSProcessInfo_ptr);
  sub_100020F2C();
  pthread_set_fixedpriority_self();
  return pthread_setname_np("com.apple.sidecar.root-queue.thread");
}

void sub_100020F2C()
{
  integer_t *v0;
  uint64_t v1;

  sub_100021614();
  sub_100020F8C(v0, v1);
}

void sub_100020F8C(integer_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  kern_return_t v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  char v17[8];
  uint64_t v18;
  id v19;
  uint64_t v20;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = a2 - (_QWORD)a1;
  if (a2 - (uint64_t)a1 <= -4)
  {
LABEL_8:
    LODWORD(v19) = 0;
    v18 = 3451;
    v17[0] = 2;
    v15 = "Negative value is not representable";
    v16 = 35;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return;
  }
  if ((unint64_t)(v9 / 4) >> 32)
  {
    LODWORD(v19) = 0;
    v18 = 3455;
    v17[0] = 2;
    v15 = "Not enough bits to represent the passed value";
    v16 = 45;
    goto LABEL_10;
  }
  v10 = task_policy_set(mach_task_self_, 8u, a1, v9 / 4);
  if (v10)
  {
    v11 = v10;
    sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v12 = sub_100029480(v11, 0, 0, (uint64_t)"ContinuityDisplay/ProcessInfo.swift", 35, 2, 55);
    v13 = Logger.init()();
    __chkstk_darwin(v13, v14);
    v19 = v12;
    sub_100028F80((uint64_t (*)(void))sub_100021184, 0, sub_10000F588, v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

  }
}

unint64_t sub_100021184()
{
  return 0xD000000000000021;
}

void sub_1000211A0(integer_t *a1, uint64_t a2, host_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  kern_return_t v11;
  int v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  char v18[8];
  uint64_t v19;
  id v20;
  uint64_t v21;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    __break(1u);
  if (a2 - (uint64_t)a1 <= -4)
  {
    LODWORD(v20) = 0;
    v19 = 3451;
    v18[0] = 2;
    v16 = "Negative value is not representable";
    v17 = 35;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v16, v17, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return;
  }
  if ((unint64_t)((a2 - (uint64_t)a1) / 4) >> 32)
  {
    LODWORD(v20) = 0;
    v19 = 3455;
    v18[0] = 2;
    v16 = "Not enough bits to represent the passed value";
    v17 = 45;
    goto LABEL_10;
  }
  HIDWORD(v21) = (a2 - (uint64_t)a1) / 4;
  v11 = host_info(a3, 3, a1, (mach_msg_type_number_t *)&v21 + 1);
  if (v11)
  {
    v12 = v11;
    sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v13 = sub_100029480(v12, 0, 0, (uint64_t)"ContinuityDisplay/ProcessInfo.swift", 35, 2, 72);
    v14 = Logger.init()();
    __chkstk_darwin(v14, v15);
    v20 = v13;
    sub_100028F80((uint64_t (*)(void))sub_1000213CC, 0, sub_10000F5EC, v18);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

  }
}

unint64_t sub_1000213CC()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1000213E8(integer_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  thread_act_t v11;
  kern_return_t v12;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  kern_return_t v17;
  uint64_t result;
  const char *v19;
  uint64_t v20;
  char v21[8];
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = a2 - (_QWORD)a1;
  if (a2 - (uint64_t)a1 <= -4)
  {
LABEL_8:
    LODWORD(v23) = 0;
    v22 = 3451;
    v21[0] = 2;
    v19 = "Negative value is not representable";
    v20 = 35;
LABEL_10:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return result;
  }
  v10 = v9 / 4;
  if ((unint64_t)(v9 / 4) >> 32)
  {
    LODWORD(v23) = 0;
    v22 = 3455;
    v21[0] = 2;
    v19 = "Not enough bits to represent the passed value";
    v20 = 45;
    goto LABEL_10;
  }
  v11 = mach_thread_self();
  v12 = thread_policy(v11, 2, a1, v10, 1);
  if (v12)
  {
    v13 = v12;
    sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v14 = sub_100029480(v13, 0, 0, (uint64_t)"ContinuityDisplay/ProcessInfo.swift", 35, 2, 88);
    v15 = Logger.init()();
    __chkstk_darwin(v15, v16);
    v23 = v14;
    sub_100028F80((uint64_t (*)(void))sub_1000213CC, 0, sub_10000F5EC, v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

  }
  v17 = mach_port_deallocate(mach_task_self_, v11);
  return __logMachError(_:)(v17);
}

uint64_t sub_1000215FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002160C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

ValueMetadata *type metadata accessor for Socket()
{
  return &type metadata for Socket;
}

uint64_t sub_100021638()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = *(_DWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 1) != 30 || v1 == 0)
    return 0;
  v4 = (char *)sub_10000F640(16);
  v5 = if_indextoname(v1, v4);
  if (v5)
    v3 = String.init(cString:)(v5, v6);
  else
    v3 = 0;
  sub_10000F604((uint64_t)v4);
  return v3;
}

uint64_t sub_1000216F0()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 1);
  if (v1 == 30)
    return sub_100021A3C(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
  if (v1 == 2)
    return sub_10002198C(*(_DWORD *)(v0 + 4));
  return 0;
}

uint64_t sub_100021768()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 1);
  if (v1 == 30 || v1 == 2)
    return __rev16(*(unsigned __int16 *)(v0 + 2));
  else
    return 0;
}

unint64_t sub_1000217E8(unint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  if ((result & 0x8000000000000000) != 0)
  {
    sub_100021DEC();
    sub_100021E38();
    v7 = sub_10002948C(v1, v2, v3, v4, v5, v6, 214);
    return swift_willThrow(v7);
  }
  else if (result >> 31)
  {
    __break(1u);
  }
  return result;
}

void *sub_10002184C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000218F4(a1, (uint64_t (*)(uint64_t, uint64_t, int *))&getsockname, 254, a2);
}

void *sub_1000218A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000218F4(a1, (uint64_t (*)(uint64_t, uint64_t, int *))&getpeername, 264, a2);
}

void *sub_1000218F4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, int *)@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  void *result;
  _OWORD v7[8];

  memset(v7, 0, sizeof(v7));
  result = (void *)sub_100021C34((uint64_t)v7, 128, a1, a2, a3);
  if (!v4)
    return memcpy(a4, v7, 0x80uLL);
  return result;
}

uint64_t sub_10002198C(int a1)
{
  char *v1;
  uint64_t v2;
  int v4;

  v4 = a1;
  v1 = (char *)swift_slowAlloc(16, -1);
  if (inet_ntop(2, &v4, v1, 0x10u))
    v2 = String.init(cString:)();
  else
    v2 = 0;
  swift_slowDealloc(v1, -1, -1);
  return v2;
}

uint64_t sub_100021A3C(uint64_t a1, uint64_t a2)
{
  char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];

  v7[0] = a1;
  v7[1] = a2;
  v2 = (char *)swift_slowAlloc(46, -1);
  v3 = inet_ntop(30, v7, v2, 0x2Eu);
  if (v3)
    v5 = String.init(cString:)(v3, v4);
  else
    v5 = 0;
  swift_slowDealloc(v2, -1, -1);
  return v5;
}

const char *sub_100021AEC()
{
  __uint8_t *v0;
  socklen_t sa_len;
  char *v2;
  char *v3;
  int v4;
  uint64_t v5;
  const char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  sockaddr v15[8];

  v15[0].sa_len = *v0;
  memcpy(&v15[0].sa_family, v0 + 1, 0x7FuLL);
  if (v15[0].sa_len)
    sa_len = v15[0].sa_len;
  else
    sa_len = 128;
  v2 = (char *)sub_10000F640(1025);
  v3 = (char *)sub_10000F640(32);
  v4 = getnameinfo(v15, sa_len, v2, 0x401u, v3, 0x20u, 26);
  if (!v4)
  {
    v8 = String.init(cString:)(v2, v5);
    v10 = String.init(cString:)(v3, v9);
    v12 = v11;
    v13._countAndFlagsBits = 58;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = v10;
    v14._object = v12;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v12);
    goto LABEL_8;
  }
  result = gai_strerror(v4);
  if (result)
  {
    v8 = String.init(cString:)(result, v7);
LABEL_8:
    sub_10000F604((uint64_t)v3);
    sub_10000F604((uint64_t)v2);
    return (const char *)v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_100021C34(uint64_t a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, int *), uint64_t a5)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;

  v14 = a2;
  result = a4(a3, a1, &v14);
  if ((_DWORD)result)
  {
    sub_100021DEC();
    errno.getter();
    sub_100021E38();
    v13 = sub_10002948C(v7, v8, v9, v10, v11, v12, a5);
    return swift_willThrow(v13);
  }
  return result;
}

void sub_100021CDC(int a1, Swift::UInt32 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static MachPort.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

Swift::Int sub_100021D0C(Swift::UInt32 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int sub_100021D50()
{
  Swift::UInt32 *v0;

  return sub_100021D0C(*v0);
}

void sub_100021D58(int a1)
{
  Swift::UInt32 *v1;

  sub_100021CDC(a1, *v1);
}

Swift::Int sub_100021D60(uint64_t a1)
{
  Swift::UInt32 *v1;
  Swift::UInt32 v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100021DA0(int *a1, int *a2)
{
  return static MachPort.== infix(_:_:)(*a1, *a2);
}

unint64_t sub_100021DB0()
{
  unint64_t result;

  result = qword_1000781C0;
  if (!qword_1000781C0)
  {
    result = swift_getWitnessTable(&unk_100058FAC, &type metadata for Socket);
    atomic_store(result, (unint64_t *)&qword_1000781C0);
  }
  return result;
}

unint64_t sub_100021DEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100077C80;
  if (!qword_100077C80)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100077C80);
  }
  return result;
}

ValueMetadata *type metadata accessor for Sockaddr()
{
  return &type metadata for Sockaddr;
}

{
  return &type metadata for Sockaddr;
}

uint64_t sub_100021E4C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)(result + 16);
  while (1)
  {
    if (v5 == v4)
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v3);
      return (uint64_t)_swiftEmptyArrayStorage;
    }
    if (v4 >= *(_QWORD *)(v3 + 16))
      break;
    v6 = *(unsigned __int8 *)(v3 + v4++ + 32);
    result = sub_100021FF0(v6, a2);
    if ((result & 1) == 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = (uint64_t)sub_100025360(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        result = (uint64_t)sub_100025360((char *)(v7 > 1), v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v8) = v6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100021F58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = sub_10000BD10();
  v4 = Set.init(minimumCapacity:)(v2, &unk_10006A5E0, v3);
  v11 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v7 = a1 + i;
      sub_100025568(&v10, *(unsigned __int8 *)(v7 + 32));
    }
    swift_bridgeObjectRelease(a1);
    return v11;
  }
  else
  {
    v8 = v4;
    swift_bridgeObjectRelease(a1);
  }
  return v8;
}

uint64_t sub_100021FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8, *(_QWORD *)(a2 + 40));
    v3 = sub_100009BB4();
    v5 = v4;
    String.hash(into:)(v8, v3, v4);
    swift_bridgeObjectRelease(v5);
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_10002256C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___DisplayViewController_delegate);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR___DisplayViewController_delegate);
  *v3 = a1;
  v3[1] = a2;
  return swift_unknownObjectRelease(v4);
}

void sub_100022588(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayViewController_touchController);
}

void sub_10002259C(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayViewController_displayViewPointerInteraction);
}

void sub_1000225A8()
{
  char *v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  void *v26;
  id v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  objc_super v31;

  v2 = v0;
  v31.receiver = v0;
  v31.super_class = (Class)type metadata accessor for DisplayViewController();
  v3 = objc_msgSendSuper2(&v31, "viewDidLoad");
  v4 = sub_1000190FC((uint64_t)v3, "view");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
    objc_msgSend(v5, "setBackgroundColor:", v6);

    v7 = OBJC_IVAR___DisplayViewController_displayView;
    v8 = *(id *)&v0[OBJC_IVAR___DisplayViewController_displayView];
    v9 = sub_1000190FC((uint64_t)v8, "blackColor");
    objc_msgSend(v8, "setBackgroundColor:", v9);

    objc_msgSend(*(id *)&v2[v7], "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v5, "addSubview:", *(_QWORD *)&v2[v7]);
    v10 = (void *)objc_opt_self(NSLayoutConstraint);
    v11 = sub_100008414((uint64_t *)&unk_100078650);
    v12 = sub_100018C8C(v11, 64);
    *(_OWORD *)(v12 + 16) = xmmword_100058B00;
    v13 = sub_100018D44((uint64_t)objc_msgSend(*(id *)&v2[v7], "leftAnchor"), "leftAnchor");
    v14 = sub_1000270B0();
    sub_100027210();

    *(_QWORD *)(v12 + 32) = v1;
    v15 = sub_100018D44((uint64_t)objc_msgSend(*(id *)&v2[v7], "rightAnchor"), "rightAnchor");
    v16 = sub_1000270B0();
    sub_100027210();

    *(_QWORD *)(v12 + 40) = v1;
    v17 = sub_100018D44((uint64_t)objc_msgSend(*(id *)&v2[v7], "topAnchor"), "topAnchor");
    v18 = sub_1000270B0();
    sub_100027210();

    *(_QWORD *)(v12 + 48) = v1;
    v19 = sub_100018D44((uint64_t)objc_msgSend(*(id *)&v2[v7], "bottomAnchor"), "bottomAnchor");
    v20 = sub_1000270B0();
    sub_100027210();

    *(_QWORD *)(v12 + 56) = v1;
    v24 = specialized Array._endMutation()(v21, v22, v23);
    sub_100027298(v24, (unint64_t *)&qword_1000786D0);
    isa = sub_10002728C().super.isa;
    sub_100005DA4();
    objc_msgSend(v10, "activateConstraints:", isa);

    objc_msgSend(v5, "layoutIfNeeded");
    v26 = *(void **)&v2[v7];
    v27 = objc_allocWithZone((Class)type metadata accessor for TouchController());
    v28 = sub_100038CB8(v26);
    sub_100022588((uint64_t)v28);
    v29 = *(_QWORD *)&v2[OBJC_IVAR___DisplayViewController_touchController];
    if (v29)
    {
      v30 = v29 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_delegate;
      *(_QWORD *)(v30 + 8) = &off_10006B338;
      swift_unknownObjectWeakAssign(v30, v2);
    }
    sub_10002259C((uint64_t)objc_msgSend(objc_allocWithZone((Class)UIPointerInteraction), "initWithDelegate:", v2));
    if (*(_QWORD *)&v2[OBJC_IVAR___DisplayViewController_displayViewPointerInteraction])
    {
      objc_msgSend(*(id *)&v2[v7], "addInteraction:");

      sub_100027304();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10002296C()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___DisplayViewController_displayView);
}

void sub_1000229C4(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayViewController_displayView);
}

uint64_t sub_1000229D0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026FA4(v0, qword_1000781D0);
  sub_100026E38(v0, (uint64_t)qword_1000781D0);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x8000000100056270, 0x79616C70736964, 0xE700000000000000);
}

void sub_100022A44(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayViewController_session);
}

void sub_100022A50(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  char *v14;
  char *v15;
  char *v16;
  char v17[24];

  v2 = v1;
  v4 = sub_100009408();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_100027248();
  v9 = v8 - v7;
  if (qword_1000775A8 != -1)
    swift_once(&qword_1000775A8, sub_1000229D0);
  v10 = sub_100026E38(v4, (uint64_t)qword_1000781D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, v10, v4);
  v11 = objc_allocWithZone((Class)SidecarDisplayConfig);
  v12 = a1;
  objc_msgSend(v11, "init");
  v13 = objc_allocWithZone((Class)type metadata accessor for SidecarDisplaySession(0));
  v14 = (char *)SidecarDisplaySession.init(logger:request:config:)();
  v15 = &v14[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate];
  swift_beginAccess(&v14[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate], v17, 1, 0);
  *((_QWORD *)v15 + 1) = &off_10006B348;
  swift_unknownObjectWeakAssign(v15, v2);
  SidecarDisplaySession.accept()();
  v16 = v14;
  sub_100022A44((uint64_t)v14);

}

void sub_100022BAC(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  void *v18;
  double v19;
  double v20;
  _BOOL4 v21;
  double v22;
  double v23;
  double v24;
  double v25;
  void *v26;
  char v27[24];

  v2 = v1;
  v4 = *(_QWORD *)&v1[OBJC_IVAR___DisplayViewController_delegate];
  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings);
  sub_100018BB0(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings, (uint64_t)v27);
  v6 = *v5;
  v2[OBJC_IVAR___DisplayViewController_sessionConfiguring] = 1;
  swift_unknownObjectRetain(v4);
  sub_1000272C4();
  sub_1000246F8(a1);
  v2[OBJC_IVAR___DisplayViewController_receivedFirstFrame] = 0;
  v2[OBJC_IVAR___DisplayViewController_receivedConfigComplete] = 0;
  v7 = sub_1000272C4();
  sub_1000295C4(v7);
  sub_1000272B8();
  v8 = 0.0;
  if ((v2 & 1) != 0)
  {
    sub_100029518(v6);
    if ((v9 & 1) == 0
      || (v10 = sub_1000272C4(), sub_10002956C(v10), sub_1000272B8(), (v2 & 1) != 0)
      || sub_100027010())
    {
      sub_10000A8B4(0xFu, v6);
      v8 = v11;
    }
    else
    {
      v8 = 78.0;
    }
  }
  *(_QWORD *)&v12 = swift_bridgeObjectRelease(v6).n128_u64[0];
  if (v4)
  {
    swift_unknownObjectRetain(v4);
    sub_1000319A8();
    v14 = v13;
    v16 = v15;
    sub_100019118();
    goto LABEL_10;
  }
  v17 = objc_msgSend(v2, "view", v12);
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v17, "bounds");
    v14 = v19;
    v16 = v20;

LABEL_10:
    if (v2[OBJC_IVAR___DisplayViewController_portrait])
      v21 = v16 < v14;
    else
      v21 = v14 < v16;
    if (v21)
      v22 = v14;
    else
      v22 = v16;
    if (v21)
      v23 = v16;
    else
      v23 = v14;
    v24 = ceil(v23 - v8);
    if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
    {
      if (v24 > -9.22337204e18)
      {
        if (v24 < 9.22337204e18)
        {
          v25 = ceil(v22);
          if (v25 > -9.22337204e18)
          {
            if (v25 < 9.22337204e18)
            {
              if ((*(_QWORD *)&v25 & 0x7FF0000000000000) != 0x7FF0000000000000)
              {
                v26 = *(void **)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config);
                objc_msgSend(v26, "setScale:", 2.0);
                objc_msgSend(v26, "setSize:", (double)(uint64_t)v24, (double)(uint64_t)v25);
                sub_100019118();
                sub_100027304();
                return;
              }
              goto LABEL_32;
            }
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_33:
  __break(1u);
}

void sub_100022E04(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;

  v3 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v3, "begin");
  objc_msgSend(v3, "setDisableActions:", 1);
  v10 = objc_msgSend(*(id *)(v1 + OBJC_IVAR___DisplayViewController_displayView), "layer");
  sub_100010898(*(void **)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_config));
  if ((v5 & 1) == 0)
    objc_msgSend(v10, "setContentsScale:", (double)v4);
  v6 = (unint64_t)SidecarDisplaySession.videoSlot.getter();
  if ((v6 & 0x100000000) == 0)
  {
    v7 = v6;
    objc_msgSend(v10, "setAllowsDisplayCompositing:", 1);
    v8 = objc_msgSend((id)objc_opt_self(CAContext), "objectForSlot:", v7);
    objc_msgSend(v10, "setContents:", v8);
    swift_unknownObjectRelease(v8);
    objc_msgSend(v10, "setContentsGravity:", kCAGravityBottomLeft);
  }
  objc_msgSend(v3, "commit");
  *(_BYTE *)(v1 + OBJC_IVAR___DisplayViewController_sessionConfiguring) = 0;
  sub_10000639C(a1);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR___DisplayViewController_delegate);
  if (v9)
  {
    sub_1000270C0();
    sub_100032D28();

    sub_1000270DC(v9);
  }
  else
  {
    sub_100018CE0(v10);
  }
}

void sub_100022F90(int a1, id a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;

  v3 = objc_msgSend(a2, "transport");
  v4 = OBJC_IVAR___DisplayViewController_transport;
  *(_QWORD *)(v2 + OBJC_IVAR___DisplayViewController_transport) = v3;
  v5 = SidecarDisplaySession.codec.getter();
  SidecarPowerLogDisplaySession(1, (uint64_t)v5, *(_QWORD *)(v2 + v4));
}

void sub_100022FE8()
{
  uint64_t v0;
  id v1;

  v1 = SidecarDisplaySession.codec.getter();
  SidecarPowerLogDisplaySession(0, (uint64_t)v1, *(_QWORD *)(v0 + OBJC_IVAR___DisplayViewController_transport));
}

void sub_100023020(uint64_t a1, void *a2)
{
  sub_1000063F0(a2);
  sub_100005D94();
}

void sub_100023048()
{
  sub_1000064F0();
  sub_100005D94();
}

void sub_100023070()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  unint64_t v13;
  uint64_t v14;

  sub_100018CC8();
  v3 = v2;
  sub_1000271F8();
  sub_100018C80();
  __chkstk_darwin(v4, v5);
  v14 = sub_100018D04();
  v6 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v7);
  sub_1000093E0();
  sub_10000F6CC(v8, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  v9 = (void *)sub_100027230();
  v10 = sub_100018C8C((uint64_t)&unk_10006B4C0, 32);
  *(_QWORD *)(v10 + 16) = v0;
  *(_QWORD *)(v10 + 24) = v3;
  v11 = sub_1000271B4((uint64_t)sub_10000C66C);
  v12 = v0;
  swift_errorRetain(v3);
  sub_100027240();
  sub_1000272A4();
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_100008414((uint64_t *)&unk_100077A10);
  v13 = sub_100027238();
  sub_100027090(v13);
  sub_100027200();
  sub_100027270();
  _Block_release(v11);

  sub_1000271A0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v14);
  sub_100018BBC();
}

uint64_t sub_1000231D4(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + OBJC_IVAR___DisplayViewController_delegate);
  if (v2)
  {
    v4 = result;
    swift_unknownObjectRetain(*(_QWORD *)(result + OBJC_IVAR___DisplayViewController_delegate));
    sub_10002BE14(v4, a2);
    return swift_unknownObjectRelease(v2);
  }
  return result;
}

void sub_100023234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  if (!((unint64_t)a2 >> 62))
  {
    v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (v4)
      goto LABEL_3;
LABEL_36:
    swift_bridgeObjectRelease(a2);
    return;
  }
  if (a2 < 0)
    v17 = a2;
  else
    v17 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  if (!_CocoaArrayWrapper.endIndex.getter(v17))
    goto LABEL_36;
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
  }
  else
  {
    if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v5 = *(id *)(a2 + 32);
  }
  v18 = v5;
  sub_100005DD0();
  v6 = objc_msgSend(v18, "type");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  if (v7 == 0x7073696464 && v9 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
    goto LABEL_13;
  }
  if ((sub_1000270C8(0x7073696464) & 1) != 0)
  {
    v11 = v9;
LABEL_13:
    swift_bridgeObjectRelease(v11);
    sub_1000236BC(v18);
LABEL_14:
    sub_100018CE0(v18);
    return;
  }
  if (v7 == 0x6E6F636572 && v9 == 0xE500000000000000)
  {
    v13 = 0xE500000000000000;
    goto LABEL_22;
  }
  if ((sub_1000270C8(0x6E6F636572) & 1) != 0)
  {
    v13 = v9;
LABEL_22:
    swift_bridgeObjectRelease(v13);
    sub_1000243FC();
    goto LABEL_14;
  }
  if (v7 == 0x7073696476 && v9 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    goto LABEL_31;
  }
  v15 = sub_1000270C8(0x7073696476);
  sub_100005DD0();
  if ((v15 & 1) != 0)
  {
LABEL_31:
    sub_1000237DC();
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(v2 + OBJC_IVAR___DisplayViewController_delegate);
  if (!v16)
    goto LABEL_14;
  sub_1000270C0();
  sub_100031A80(v18);

  sub_1000270DC(v16);
}

void sub_100023410()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  unint64_t v17;

  sub_100018CC8();
  v2 = v0;
  v3 = sub_1000271F8();
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  sub_100018D04();
  sub_1000272D8();
  __chkstk_darwin(v6, v7);
  sub_1000093E0();
  if (qword_1000775A8 != -1)
    swift_once(&qword_1000775A8, sub_1000229D0);
  v8 = sub_100009408();
  v9 = sub_100026E38(v8, (uint64_t)qword_1000781D0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "=== Video Start ===", v12, 2u);
    sub_10000F604((uint64_t)v12);
  }

  sub_10000F6CC(v13, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  v14 = (void *)sub_100027230();
  *(_QWORD *)(sub_100018C8C((uint64_t)&unk_10006B470, 24) + 16) = v2;
  v15 = sub_1000271B4((uint64_t)sub_10000C66C);
  v16 = v2;
  sub_100027240();
  sub_1000272A4();
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_100008414((uint64_t *)&unk_100077A10);
  v17 = sub_100027238();
  sub_100027090(v17);
  sub_100027200();
  sub_100027270();
  _Block_release(v15);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_100027218();
  sub_100018BBC();
}

void sub_1000235F8(uint64_t a1)
{
  *(_BYTE *)(a1 + OBJC_IVAR___DisplayViewController_receivedFirstFrame) = 1;
  sub_100023A04();
}

void sub_100023628(uint64_t a1@<X8>)
{
  _BOOL4 v2;
  uint64_t v3;

  v2 = sub_100027010();
  v3 = 0x402C000000000000;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    v3 = 0;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  sub_100005D94();
}

uint64_t sub_10002365C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR___DisplayViewController_delegate);
  if (v3)
  {
    swift_unknownObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR___DisplayViewController_delegate));
    sub_10002D540(v2, a2);
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

void sub_1000236BC(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  __int128 v10;
  uint64_t v11;

  v2 = objc_msgSend(a1, "objectValue");
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    v2 = (id)sub_100019118();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1000272EC((uint64_t)v2, v3, (uint64_t *)&unk_100077B70, v4, v5);
  if (!v11)
    goto LABEL_10;
  v6 = sub_100008414((uint64_t *)&unk_100078300);
  if ((sub_100018C64((uint64_t)&v8, (uint64_t)&v10, (uint64_t)&type metadata for Any + 8, v6) & 1) == 0)
    goto LABEL_11;
  sub_100010138(v8, &v10);
  sub_100005DD0();
  if (!v11)
  {
LABEL_10:
    sub_10001893C((uint64_t)&v10, (uint64_t *)&unk_100077B70);
    goto LABEL_11;
  }
  if ((sub_100018C64((uint64_t)v9, (uint64_t)&v10, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool) & 1) != 0)
  {
    v7 = *(_QWORD *)(v1 + OBJC_IVAR___DisplayViewController_delegate);
    if (v7)
    {
      *(_BYTE *)(v7 + OBJC_IVAR___DisplayMainViewController_dockShown) = v9[0];
      sub_1000270C0();
      sub_100029AEC();
      sub_100018C94();
    }
  }
LABEL_11:
  sub_100027304();
}

void sub_1000237DC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  unint64_t v9;

  sub_100018CC8();
  sub_1000271F8();
  sub_100018C80();
  __chkstk_darwin(v1, v2);
  sub_100018D04();
  sub_1000272D8();
  __chkstk_darwin(v3, v4);
  sub_1000093E0();
  sub_10000F6CC(v5, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  v6 = (void *)sub_100027230();
  *(_QWORD *)(sub_100018C8C((uint64_t)&unk_10006B420, 24) + 16) = v0;
  v7 = sub_1000271B4((uint64_t)sub_10000C66C);
  v8 = v0;
  sub_100027240();
  sub_1000272A4();
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_100008414((uint64_t *)&unk_100077A10);
  v9 = sub_100027238();
  sub_100027090(v9);
  sub_100027200();
  sub_100027270();
  _Block_release(v7);

  sub_1000271A0();
  sub_100027218();
  sub_100018BBC();
}

void sub_10002391C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_1000775A8 != -1)
    swift_once(&qword_1000775A8, sub_1000229D0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100026E38(v2, (uint64_t)qword_1000781D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "=== Virtual Display Configuration Complete ===", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  *(_BYTE *)(a1 + OBJC_IVAR___DisplayViewController_receivedConfigComplete) = 1;
  sub_100023A04();
}

void sub_100023A04()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  _QWORD v74[4];
  uint64_t v75;
  uint64_t v76;

  sub_100018CC8();
  v2 = v0;
  v3 = sub_1000271F8();
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  sub_100018C80();
  __chkstk_darwin(v4, v5);
  sub_100027248();
  v70 = v7 - v6;
  v8 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  sub_100018C80();
  __chkstk_darwin(v9, v10);
  sub_1000093E0();
  v11 = sub_100008414((uint64_t *)&unk_100078320);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v15 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v64 - v18;
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v64 - v22;
  v24 = type metadata accessor for DispatchTime(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  v28 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v30);
  v33 = (char *)&v64 - v32;
  if (v2[OBJC_IVAR___DisplayViewController_receivedFirstFrame] == 1
    && v2[OBJC_IVAR___DisplayViewController_receivedConfigComplete] == 1)
  {
    v65 = v1;
    v34 = v31;
    static DispatchTime.now()(v31);
    + infix(_:_:)(0.5);
    v35 = *(void (**)(char *, uint64_t))(v25 + 8);
    v66 = v34;
    v64 = v35;
    v35(v28, v34);
    v36 = *(_QWORD *)&v2[OBJC_IVAR___DisplayViewController_session];
    if (v36)
    {
      v37 = v36 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid;
      sub_100018BB0(v36 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, (uint64_t)&v76);
      v38 = sub_100018F50();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v23, v37, v38);
      v39 = (uint64_t)v23;
      v40 = 0;
    }
    else
    {
      v38 = sub_100018F50();
      v39 = (uint64_t)v23;
      v40 = 1;
    }
    sub_100018974(v39, v40, 1, v38);
    sub_100026DF0((uint64_t)v23, (uint64_t)v19);
    sub_100018F50();
    isa = 0;
    if (sub_100018930((uint64_t)v19, 1, v38) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v19, v38);
    }
    v67 = sub_1000183B8(isa);

    if (qword_1000775A8 != -1)
      swift_once(&qword_1000775A8, sub_1000229D0);
    v42 = sub_100009408();
    v43 = sub_100026E38(v42, (uint64_t)qword_1000781D0);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v46 = 134217984;
      v73 = (void **)v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v46 + 4);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "=== Display Stream Ready (%lx) ===", v46, 0xCu);
      sub_10000F604((uint64_t)v46);
    }

    sub_10000F6CC(v47, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
    v48 = (void *)sub_100027230();
    sub_100026DF0((uint64_t)v23, (uint64_t)v15);
    v49 = *(unsigned __int8 *)(v12 + 80);
    v50 = (v49 + 16) & ~v49;
    v51 = (v13 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
    v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
    v53 = swift_allocObject(&unk_10006B3D0, v52 + 8, v49 | 7);
    sub_100026EFC((uint64_t)v15, v53 + v50, (uint64_t *)&unk_100078320);
    *(_QWORD *)(v53 + v51) = v2;
    *(_QWORD *)(v53 + v52) = v67;
    v74[3] = sub_100026F3C;
    v75 = v53;
    v73 = _NSConcreteStackBlock;
    v74[0] = 1107296256;
    v74[1] = sub_10000C66C;
    v74[2] = &unk_10006B3E8;
    v54 = _Block_copy(&v73);
    v55 = v75;
    v56 = v2;
    v57 = sub_100027240();
    v58 = v65;
    static DispatchQoS.unspecified.getter(v57);
    v73 = (void **)_swiftEmptyArrayStorage;
    sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v60 = v59;
    sub_100008414((uint64_t *)&unk_100077A10);
    v61 = sub_100027238();
    v62 = v70;
    v63 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v73, v55, v61, v72, v60);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v33, v58, v62, v54);
    _Block_release(v54);

    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v62, v63);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v58, v69);
    sub_10001893C((uint64_t)v23, (uint64_t *)&unk_100078320);
    v64(v33, v66);
  }
  sub_100018BBC();
}

void sub_100023EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];
  char v56[24];

  v50 = a3;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008414((uint64_t *)&unk_1000786C0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008414((uint64_t *)&unk_100078320);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v49 - v20;
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v49 - v24;
  v53 = a2;
  v51 = OBJC_IVAR___DisplayViewController_session;
  v26 = *(_QWORD *)(a2 + OBJC_IVAR___DisplayViewController_session);
  v52 = v6;
  if (v26)
  {
    v27 = v26 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid;
    swift_beginAccess(v26 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, v56, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v25, v27, v5);
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  sub_100018974((uint64_t)v25, v28, 1, v5);
  v29 = (uint64_t)&v13[*(int *)(v10 + 48)];
  sub_100026DF0(a1, (uint64_t)v13);
  sub_100026DF0((uint64_t)v25, v29);
  if (sub_100018930((uint64_t)v13, 1, v5) == 1)
  {
    sub_10001893C((uint64_t)v25, (uint64_t *)&unk_100078320);
    if (sub_100018930(v29, 1, v5) == 1)
    {
      sub_10001893C((uint64_t)v13, (uint64_t *)&unk_100078320);
LABEL_14:
      v38 = OBJC_IVAR___DisplayViewController_delegate;
      v39 = v53;
      v40 = *(_QWORD *)(v53 + OBJC_IVAR___DisplayViewController_delegate);
      if (v40)
      {
        swift_unknownObjectRetain(*(_QWORD *)(v53 + OBJC_IVAR___DisplayViewController_delegate));
        sub_100032DD0();
        swift_unknownObjectRelease(v40);
      }
      v41 = OBJC_IVAR___DisplayViewController__reconfiguring;
      if (*(_BYTE *)(v39 + OBJC_IVAR___DisplayViewController__reconfiguring) == 1)
      {
        v42 = *(_QWORD *)(v39 + v38);
        if (v42)
        {
          swift_unknownObjectRetain(*(_QWORD *)(v39 + v38));
          sub_100032874();
          swift_unknownObjectRelease(v42);
        }
        *(_BYTE *)(v39 + v41) = 0;
      }
      return;
    }
    goto LABEL_9;
  }
  sub_100026DF0((uint64_t)v13, (uint64_t)v21);
  if (sub_100018930(v29, 1, v5) == 1)
  {
    sub_10001893C((uint64_t)v25, (uint64_t *)&unk_100078320);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v5);
LABEL_9:
    sub_10001893C((uint64_t)v13, (uint64_t *)&unk_1000786C0);
    goto LABEL_10;
  }
  v34 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v9, v29, v5);
  sub_1000057B8((unint64_t *)&qword_100078330, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v9, v5, v35);
  v37 = *(void (**)(char *, uint64_t))(v34 + 8);
  v37(v9, v5);
  sub_10001893C((uint64_t)v25, (uint64_t *)&unk_100078320);
  v37(v21, v5);
  sub_10001893C((uint64_t)v13, (uint64_t *)&unk_100078320);
  if ((v36 & 1) != 0)
    goto LABEL_14;
LABEL_10:
  v30 = *(_QWORD *)(v53 + v51);
  if (v30)
  {
    v31 = v30 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid;
    swift_beginAccess(v30 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, v55, 0, 0);
    v32 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v17, v31, v5);
    sub_100018974((uint64_t)v17, 0, 1, v5);
    isa = 0;
    if (sub_100018930((uint64_t)v17, 1, v5) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v5);
    }
  }
  else
  {
    sub_100018974((uint64_t)v17, 1, 1, v5);
    isa = 0;
  }
  v43 = sub_1000183B8(isa);

  if (qword_1000775A8 != -1)
    swift_once(&qword_1000775A8, sub_1000229D0);
  v44 = type metadata accessor for Logger(0);
  v45 = sub_100026E38(v44, (uint64_t)qword_1000781D0);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc(22, -1);
    *(_DWORD *)v48 = 134218240;
    v54 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v48 + 4);
    *(_WORD *)(v48 + 12) = 2048;
    v54 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v48 + 14);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "discarded display stream ready (%lx:%lx)", (uint8_t *)v48, 0x16u);
    swift_slowDealloc(v48, -1, -1);
  }

}

void sub_1000243FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class isa;
  uint64_t v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR___DisplayViewController_session);
  if (!v2)
    return;
  v3 = v2;
  v4 = sub_1000190FC((uint64_t)v3, "objectValue");
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v4);
    v4 = (id)sub_100018C94();
  }
  else
  {
    memset(v27, 0, sizeof(v27));
  }
  sub_1000272EC((uint64_t)v4, v5, (uint64_t *)&unk_100077B70, v6, v7);
  if (!v29)
    goto LABEL_13;
  v8 = sub_100008414((uint64_t *)&unk_100078300);
  if ((sub_100018C64((uint64_t)&v26, (uint64_t)&v28, (uint64_t)&type metadata for Any + 8, v8) & 1) == 0)
  {
LABEL_14:

    return;
  }
  v9 = v26;
  sub_100010138(v26, &v28);
  if (!v29)
  {

    sub_1000190F4();
    goto LABEL_16;
  }
  if ((sub_100018C64((uint64_t)v27, (uint64_t)&v28, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Int) & 1) == 0)
  {

    v12 = v9;
    goto LABEL_19;
  }
  v10 = *(_QWORD *)&v27[0];
  sub_100010138(v9, &v28);
  sub_1000190F4();
  if (!v29)
  {
LABEL_13:

LABEL_16:
    sub_10001893C((uint64_t)&v28, (uint64_t *)&unk_100077B70);
    return;
  }
  if ((sub_100018C64((uint64_t)v27, (uint64_t)&v28, (uint64_t)&type metadata for Any + 8, v8) & 1) == 0)
    goto LABEL_14;
  v11 = *(_QWORD *)&v27[0];
  if (sub_100017F98(v10) == 5)
  {

    v12 = v11;
LABEL_19:
    swift_bridgeObjectRelease(v12);
    return;
  }
  v13 = *(_QWORD *)(v1 + OBJC_IVAR___DisplayViewController_delegate);
  if (v13)
  {
    swift_unknownObjectRetain(*(_QWORD *)(v1 + OBJC_IVAR___DisplayViewController_delegate));
    v14 = sub_100009EF0(v11);
    sub_10002996C((uint64_t)v14);
    sub_10002AF54();
    swift_unknownObjectRelease(v13);
  }
  else
  {
    sub_100005DA4();
  }
  *(_BYTE *)(v1 + OBJC_IVAR___DisplayViewController__reconfiguring) = 1;
  v15 = *(void **)&v3[OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request];
  v16 = sub_100008414((uint64_t *)&unk_100078650);
  v17 = sub_100018C8C(v16, 40);
  *(_OWORD *)(v17 + 16) = xmmword_100058900;
  v18 = v15;
  v19 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  v29 = sub_100008414((uint64_t *)&unk_100078310);
  *(_QWORD *)&v28 = v19;
  v20 = objc_allocWithZone((Class)SidecarItem);
  sub_100035AC8();
  *(_QWORD *)(v17 + 32) = v21;
  *(_QWORD *)&v28 = v17;
  v24 = specialized Array._endMutation()(v21, v22, v23);
  sub_100027298(v24, (unint64_t *)&unk_100077E40);
  isa = sub_10002728C().super.isa;
  sub_100005DA4();
  objc_msgSend(v18, "sendItems:complete:", isa, 0);

}

uint64_t sub_1000246F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _UNKNOWN **v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v48;
  const char *v49;
  _BYTE v50[24];
  _OWORD v51[2];
  _BYTE v52[24];
  _BYTE v53[32];

  v3 = OBJC_IVAR___DisplayViewController_delegate;
  if (*(_QWORD *)(v1 + OBJC_IVAR___DisplayViewController_delegate))
  {
    v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings);
    sub_100018BB0(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings, (uint64_t)v53);
    v5 = *v4;
    sub_1000270C0();
    v6 = swift_bridgeObjectRetain(v5);
    sub_10002996C(v6);
    sub_100018C94();
  }
  sub_1000106F8();
  if ((v7 & 1) != 0 && *(_QWORD *)(v1 + v3))
  {
    v8 = (uint64_t *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings);
    sub_100018BB0(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings, (uint64_t)v50);
    v9 = *v8;
    sub_1000270C0();
    v10 = swift_bridgeObjectRetain(v9);
    sub_100032A3C(v10, 3u);
    sub_1000190F4();
    sub_100018C94();
  }
  v11 = (_QWORD *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings);
  sub_100018BB0(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings, (uint64_t)v52);
  v12 = sub_1000272CC();
  sub_1000295C4(v12);
  v14 = v13 & 1;
  sub_100005DA4();
  v15 = OBJC_IVAR___DisplayViewController_showSidebar;
  if (v14 != *(unsigned __int8 *)(v1 + OBJC_IVAR___DisplayViewController_showSidebar))
  {
    v16 = sub_1000272CC();
    sub_1000295C4(v16);
    v18 = v17;
    sub_100005DA4();
    *(_BYTE *)(v1 + v15) = v18 & 1;
    if (*(_QWORD *)(v1 + v3))
    {
      v19 = *v11;
      sub_1000270C0();
      v20 = swift_bridgeObjectRetain(v19);
      sub_100032A3C(v20, 0xAu);
      sub_100027228();
      sub_100018C94();
    }
  }
  v21 = sub_100021F58((uint64_t)&off_1000698F8);
  v22 = sub_100009BA8();
  v23 = sub_100021E4C((uint64_t)v22, v21);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = (unsigned __int8 *)(v23 + 32);
    v49 = "sidebarButtonSize";
    do
    {
      v27 = *v25++;
      v26 = v27;
      v28 = *v11;
      v29 = *(_QWORD *)(*v11 + 16);
      v30 = swift_bridgeObjectRetain(*v11);
      if (v29)
      {
        v30 = sub_100035B4C(v26);
        if ((v31 & 1) != 0)
        {
          v38 = sub_10000B26C(*(_QWORD *)(v28 + 56) + 32 * v30, (uint64_t)v51);
          sub_1000272AC(v38, v39, v40, v41, v42, v43, v44, v45, v48, (uint64_t)v49);
          sub_100005DA4();
          sub_10000C554();
          __asm { BR              X8 }
        }
      }
      memset(v51, 0, sizeof(v51));
      sub_1000272AC(v30, v31, v32, v33, v34, v35, v36, v37, v48, (uint64_t)v49);
      swift_bridgeObjectRelease(v28);
      --v24;
    }
    while (v24);
  }
  return sub_100027228();
}

uint64_t sub_100024C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _BYTE v13[24];

  v3 = v2;
  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings);
  sub_100018BB0(a1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_settings, (uint64_t)v13);
  v6 = *v5;
  v7 = OBJC_IVAR___DisplayViewController_delegate;
  if (*(_QWORD *)(v3 + OBJC_IVAR___DisplayViewController_delegate))
  {
    swift_bridgeObjectRetain_n(v6, 2);
    sub_1000270C0();
    sub_10002996C(v6);
    sub_100018C94();
  }
  else
  {
    swift_bridgeObjectRetain(v6);
  }
  v8 = sub_10000A554(a2);
  v9 = *((_QWORD *)v8 + 2);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (*(_QWORD *)(v3 + v7))
      {
        v11 = v8[i + 32];
        sub_1000270C0();
        sub_100032A3C(v6, v11);
        sub_100018C94();
      }
    }
  }
  sub_100027228();
  return sub_1000190F4();
}

id sub_100024CE8()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  id v22;
  objc_super v24;
  uint64_t v25;
  uint64_t v26;

  sub_100018CC8();
  v25 = v1;
  v26 = v2;
  v4 = v3;
  v6 = v5;
  v7 = sub_100009408();
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  sub_100027248();
  v12 = v11 - v10;
  v13 = &v0[OBJC_IVAR___DisplayViewController_delegate];
  *v13 = 0;
  v13[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___DisplayViewController_touchController] = 0;
  v0[OBJC_IVAR___DisplayViewController_sessionConfiguring] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___DisplayViewController_displayViewPointerInteraction] = 0;
  v14 = OBJC_IVAR___DisplayViewController_displayView;
  v15 = objc_allocWithZone((Class)UIView);
  v16 = v0;
  *(_QWORD *)&v0[v14] = objc_msgSend(v15, "init");
  v17 = OBJC_IVAR___DisplayViewController_hidObserver;
  if (qword_1000775A8 != -1)
    swift_once(&qword_1000775A8, sub_1000229D0);
  v18 = sub_100026E38(v7, (uint64_t)qword_1000781D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v18, v7);
  v19 = type metadata accessor for HIDEventObserver(0);
  sub_1000272F8(v19);
  sub_100005E28(v12);
  *(_QWORD *)&v16[v17] = v20;
  *(_QWORD *)&v16[OBJC_IVAR___DisplayViewController_session] = 0;
  *(_QWORD *)&v16[OBJC_IVAR___DisplayViewController_videoStream] = 0;
  *(_QWORD *)&v16[OBJC_IVAR___DisplayViewController_video] = 0;
  v16[OBJC_IVAR___DisplayViewController__reconfiguring] = 0;
  v16[OBJC_IVAR___DisplayViewController_portrait] = 0;
  v16[OBJC_IVAR___DisplayViewController_showSidebar] = 0;
  *(_QWORD *)&v16[OBJC_IVAR___DisplayViewController_transport] = 0;
  v16[OBJC_IVAR___DisplayViewController_receivedFirstFrame] = 0;
  v16[OBJC_IVAR___DisplayViewController_receivedConfigComplete] = 0;

  if (v6)
  {
    v21 = String._bridgeToObjectiveC()();
    sub_100027228();
  }
  else
  {
    v21 = 0;
  }
  v24.receiver = v16;
  v24.super_class = (Class)type metadata accessor for DisplayViewController();
  v22 = objc_msgSendSuper2(&v24, "initWithNibName:bundle:", v21, v4);

  return v22;
}

id sub_100024F4C(void *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;

  v4 = sub_100009408();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  sub_1000093E0();
  v7 = &v1[OBJC_IVAR___DisplayViewController_delegate];
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___DisplayViewController_touchController] = 0;
  v1[OBJC_IVAR___DisplayViewController_sessionConfiguring] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___DisplayViewController_displayViewPointerInteraction] = 0;
  v8 = OBJC_IVAR___DisplayViewController_displayView;
  v9 = objc_allocWithZone((Class)UIView);
  v10 = v1;
  *(_QWORD *)&v1[v8] = objc_msgSend(v9, "init");
  v11 = OBJC_IVAR___DisplayViewController_hidObserver;
  if (qword_1000775A8 != -1)
    swift_once(&qword_1000775A8, sub_1000229D0);
  v12 = sub_100026E38(v4, (uint64_t)qword_1000781D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v12, v4);
  v13 = type metadata accessor for HIDEventObserver(0);
  sub_1000272F8(v13);
  sub_100005E28(v2);
  *(_QWORD *)&v10[v11] = v14;
  *(_QWORD *)&v10[OBJC_IVAR___DisplayViewController_session] = 0;
  *(_QWORD *)&v10[OBJC_IVAR___DisplayViewController_videoStream] = 0;
  *(_QWORD *)&v10[OBJC_IVAR___DisplayViewController_video] = 0;
  v10[OBJC_IVAR___DisplayViewController__reconfiguring] = 0;
  v10[OBJC_IVAR___DisplayViewController_portrait] = 0;
  v10[OBJC_IVAR___DisplayViewController_showSidebar] = 0;
  *(_QWORD *)&v10[OBJC_IVAR___DisplayViewController_transport] = 0;
  v10[OBJC_IVAR___DisplayViewController_receivedFirstFrame] = 0;
  v10[OBJC_IVAR___DisplayViewController_receivedConfigComplete] = 0;

  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for DisplayViewController();
  v15 = objc_msgSendSuper2(&v17, "initWithCoder:", a1);

  return v15;
}

id sub_100025140()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DisplayViewController()
{
  return objc_opt_self(DisplayViewController);
}

void sub_100025238(uint64_t a1@<X8>)
{
  _BYTE v2[40];

  sub_100023628((uint64_t)v2);
  sub_100026EFC((uint64_t)v2, a1, &qword_100077DF0);
}

void sub_100025280(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_100005D94();
}

id sub_1000252B8()
{
  return objc_msgSend((id)objc_opt_self(UIPointerStyle), "hiddenPointerStyle");
}

unint64_t sub_10002533C(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

char *sub_100025360(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100025398(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_10002537C(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_10002546C(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_100025398(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_1000779B8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10000AFC0(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10000B128(v14, v8, v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_10002546C(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414((uint64_t *)&unk_100078340);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10000AF6C(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10000B1C8(v14, v8, v13);
  }
  swift_release(a4);
  return v11;
}

uint64_t sub_10002554C(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_100025568(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  _QWORD v14[9];

  v4 = *v2;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v2 + 40));
  v5 = sub_100009BB4();
  v7 = v6;
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v14, v5, v7);
  swift_bridgeObjectRelease(v7);
  v8 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  v14[0] = *v12;
  *v12 = 0x8000000000000000;
  sub_1000260B0(a2, v8, isUniquelyReferenced_nonNull_native);
  v10 = *v12;
  *v12 = v14[0];
  swift_bridgeObjectRelease(v10);
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_100025B5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008414(&qword_1000782F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100026064);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    sub_10002554C(0, (unint64_t)(v16 + 63) >> 6, (_QWORD *)(v3 + 56));
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

Swift::Int sub_1000260B0(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD v18[9];

  v5 = *(_QWORD *)(*v3 + 16);
  v6 = *(_QWORD *)(*v3 + 24);
  if (v6 <= v5 || (a3 & 1) == 0)
  {
    v7 = v5 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100025B5C(v7);
    }
    else
    {
      if (v6 > v5)
      {
        result = (Swift::Int)sub_10002673C();
        goto LABEL_10;
      }
      sub_1000268D0(v7);
    }
    v8 = *v3;
    Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
    v9 = sub_100009BB4();
    v11 = v10;
    String.hash(into:)(v18, v9, v10);
    swift_bridgeObjectRelease(v11);
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v12 = *v16;
  *(_QWORD *)(*v16 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v17;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x100026688);
  }
  *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *sub_10002673C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100008414(&qword_1000782F8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + i) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + i);
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000268D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100008414(&qword_1000782F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100026DA4);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v16, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
  return result;
}

uint64_t sub_100026DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008414((uint64_t *)&unk_100078320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100026E38(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_100026E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(sub_100008414((uint64_t *)&unk_100078320) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = sub_100018F50();
  if (!sub_100018930(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v0 + v3, v5);
  v6 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;

  return swift_deallocObject(v0, v7, v2 | 7);
}

void sub_100026EFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100008414(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  sub_100005D94();
}

void sub_100026F3C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_100008414((uint64_t *)&unk_100078320) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100023EDC(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100026F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100026F9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t *sub_100026FA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100026FE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100027008()
{
  uint64_t v0;

  sub_10002391C(*(_QWORD *)(v0 + 16));
}

BOOL sub_100027010()
{
  return MGGetSInt32Answer(CFSTR("JwLB44/jEB8aFDpXQ16Tuw"), 0) != 2;
}

void sub_100027038()
{
  uint64_t v0;

  sub_1000235F8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100027040()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002706C()
{
  uint64_t v0;

  return sub_1000231D4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100027090(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 128, v2, a1, v1, v3);
}

id sub_1000270B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, *(SEL *)(v2 + 3848), v1);
}

uint64_t sub_1000270C0()
{
  uint64_t v0;

  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000270C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, 0xE500000000000000, v2, v1, 0);
}

uint64_t sub_1000270DC(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1000270F0()
{
  return 0x5472616365646953;
}

uint64_t sub_100027114()
{
  return 0x654B656C62616E65;
}

uint64_t sub_100027138()
{
  return 0x6572507465736572;
}

uint64_t sub_100027158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t sub_100027160()
{
  return 0x5372616265646973;
}

uint64_t sub_100027180()
{
  return 0x72754373776F6873;
}

uint64_t sub_1000271A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8))(v1, v0);
}

void *sub_1000271B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = a1;
  *(_QWORD *)(v2 - 104) = v1;
  return _Block_copy((const void *)(v2 - 128));
}

uint64_t sub_1000271C0()
{
  return 0x5772616265646973;
}

uint64_t sub_1000271DC()
{
  return 0x5272616265646973;
}

uint64_t sub_1000271F8()
{
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_100027200()
{
  return 0;
}

void sub_100027210()
{
  void *v0;

}

uint64_t sub_100027218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100027228()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100027230()
{
  return static OS_dispatch_queue.main.getter();
}

unint64_t sub_100027238()
{
  return sub_10000E934();
}

uint64_t sub_100027240()
{
  uint64_t v0;

  return swift_release(v0);
}

uint64_t sub_100027258()
{
  return 0x73746E65636572;
}

uint64_t sub_100027270()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

NSArray sub_10002728C()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_100027298(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;

  return sub_1000085DC(0, a2, v2);
}

uint64_t sub_1000272A4()
{
  return static DispatchQoS.unspecified.getter();
}

void sub_1000272AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t *v10;
  va_list va;

  va_start(va, a10);
  sub_10001893C((uint64_t)va, v10);
}

uint64_t sub_1000272B8()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000272C4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000272CC()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

void sub_1000272EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_100026EFC((uint64_t)va, (uint64_t)va1, a3);
}

uint64_t sub_1000272F8(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

unint64_t sub_10002730C()
{
  return 0xD000000000000015;
}

unint64_t sub_100027320()
{
  return 0xD000000000000012;
}

unint64_t sub_100027334()
{
  return 0xD000000000000010;
}

void sub_100027348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = __chkstk_darwin(a1, a2);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, v8, a1, v5);
  v9 = _getErrorEmbeddedNSError<A>(_:)(v7, a1, a2);
  if (v9)
  {
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
  }
  else
  {
    v10 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v11, v7, a1);
  }
  v12 = (void *)_convertErrorToNSError(_:)(v10);
  v13 = swift_errorRelease(v10);
  v14 = sub_10002761C(v13, "domain");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVConferenceServiceErrorDomain);
  if (v18 == v15 && v19 == v17)
  {

    sub_100027604();
    return;
  }
  sub_1000275F0(v18, v19);
  sub_100027610();
  if ((v4 & 1) != 0)
  {
    sub_100005DA4();

    return;
  }
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPErrorDomain);
  if (v21 == v15 && v22 == v17)
  {
    sub_100005DA4();
LABEL_23:
    v29 = sub_100005DA4();
    v30 = (uint64_t)sub_10002761C(v29, "code");

    if (v30 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v30 <= 0x7FFFFFFF)
    {
      return;
    }
    __break(1u);
    return;
  }
  sub_1000275F0(v21, v22);
  sub_100027610();
  if ((v4 & 1) != 0)
    goto LABEL_23;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
  if (v24 == v15 && v25 == v17)
  {
    v28 = sub_100027604();
  }
  else
  {
    v27 = sub_1000275F0(v24, v25);
    sub_100005DA4();
    swift_bridgeObjectRelease(v14);
    if ((v27 & 1) == 0)
    {

      return;
    }
  }
  sub_10002761C(v28, "code");

}

uint64_t sub_1000275F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

uint64_t sub_100027604()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_100027610()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_10002761C(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_100027624(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  unsigned __int8 v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  char v32;
  _BYTE v33[16];
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v36 = 46;
  v37 = 0xE100000000000000;
  v34 = &v36;
  swift_bridgeObjectRetain(a2);
  v4 = sub_100027AB0(5, 0, sub_100028984, (uint64_t)v33, a1, a2);
  sub_100005DA4();
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease(v4);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v35 = _swiftEmptyArrayStorage;
  sub_10002537C(0, v5, 0);
  v6 = 0;
  while (1)
  {
    v7 = (uint64_t *)(v4 + 32 + 32 * v6);
    v8 = *v7;
    v9 = v7[1];
    v11 = v7[2];
    v10 = v7[3];
    swift_bridgeObjectRetain(v10);
    result = static String._fromSubstring(_:)(v8, v9, v11, v10);
    v14 = v13;
    v15 = HIBYTE(v13) & 0xF;
    v16 = result & 0xFFFFFFFFFFFFLL;
    if ((v14 & 0x2000000000000000) != 0 ? v15 : result & 0xFFFFFFFFFFFFLL)
      break;
    sub_100005DA4();
    swift_bridgeObjectRelease(v14);
    v19 = 0;
LABEL_50:
    v27 = v35;
    if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
    {
      sub_10002537C(0, v27[2] + 1, 1);
      v27 = v35;
    }
    v29 = v27[2];
    v28 = v27[3];
    if (v29 >= v28 >> 1)
    {
      sub_10002537C((char *)(v28 > 1), v29 + 1, 1);
      v27 = v35;
    }
    ++v6;
    v27[2] = v29 + 1;
    v27[v29 + 4] = v19;
    if (v6 == v5)
    {
      swift_bridgeObjectRelease(v4);
      return (uint64_t)v27;
    }
  }
  if ((v14 & 0x1000000000000000) != 0)
  {
    v19 = (uint64_t)sub_10002813C(result, v14, 10);
    LOBYTE(v11) = v32;
    goto LABEL_48;
  }
  if ((v14 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v14);
    v19 = (uint64_t)sub_100028220(v18, v16, 10);
    LOBYTE(v11) = v20 & 1;
LABEL_48:
    sub_100005DA4();
    swift_bridgeObjectRelease(v14);
    if ((v11 & 1) != 0)
      v19 = 0;
    goto LABEL_50;
  }
  v36 = result;
  v37 = v14 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v15)
      goto LABEL_69;
    if (v15 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_34;
    v19 = (BYTE1(result) - 48);
    if (v15 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_34;
      v19 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      if (v15 != 3)
      {
        while (1)
        {
          sub_1000289FC();
          if (!v22 & v21)
            goto LABEL_34;
          sub_1000289D4();
          if (!v22)
            goto LABEL_34;
          v19 = v24 + v23;
          if (__OFADD__(v24, v23))
            goto LABEL_34;
          sub_1000289EC();
          if (v22)
            goto LABEL_48;
        }
      }
    }
LABEL_47:
    LOBYTE(v11) = 0;
    goto LABEL_48;
  }
  if (result != 45)
  {
    if (!v15 || (result - 48) > 9u)
      goto LABEL_34;
    v19 = (result - 48);
    if (v15 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v19 = 10 * (result - 48) + (BYTE1(result) - 48);
      if (v15 != 2)
      {
        while (1)
        {
          sub_1000289FC();
          if (!v22 & v21)
            goto LABEL_34;
          sub_1000289D4();
          if (!v22)
            goto LABEL_34;
          v19 = v26 + v25;
          if (__OFADD__(v26, v25))
            goto LABEL_34;
          sub_1000289EC();
          if (v22)
            goto LABEL_48;
        }
      }
    }
    goto LABEL_47;
  }
  if (v15)
  {
    if (v15 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v15 == 2)
      {
        LOBYTE(v11) = 0;
        v19 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_48;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v19 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        if (v15 == 3)
          goto LABEL_47;
        while (1)
        {
          sub_1000289FC();
          if (!v22 & v21)
            break;
          sub_1000289D4();
          if (!v22)
            break;
          v19 = v31 - v30;
          if (__OFSUB__(v31, v30))
            break;
          sub_1000289EC();
          if (v22)
            goto LABEL_48;
        }
      }
    }
LABEL_34:
    v19 = 0;
    LOBYTE(v11) = 1;
    goto LABEL_48;
  }
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t sub_1000279DC(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(result + 32);
    v5 = *(_QWORD *)(a2 + 32);
    if (v4 < v5)
      return 1;
    if (v5 < v4)
      return 0;
    v6 = 0;
    v7 = result + 40;
    while (v2 - 1 != v6)
    {
      if (v3 - 1 == v6)
        return 0;
      v8 = *(_QWORD *)(v7 + 8 * v6);
      v9 = *(_QWORD *)(a2 + 40 + 8 * v6);
      if (v8 < v9)
        return 1;
      result = 0;
      ++v6;
      if (v9 < v8)
        return result;
    }
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
  }
  if (v2 == v3)
    return 0;
  if (v2 < v3)
    return 1;
  __break(1u);
  return result;
}

uint64_t sub_100027A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0) & 1;
}

uint64_t sub_100027AB0(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  __n128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  _QWORD v58[4];

  v58[3] = a4;
  if (a1 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, 2, 1552, 0);
    goto LABEL_42;
  }
  v10 = swift_allocObject(&unk_10006B520, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v50 = v10 + 16;
  v55 = swift_allocObject(&unk_10006B548, 24, 7);
  *(_QWORD *)(v55 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v35 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v35 = 11;
    sub_100027EF8(v35 | (v11 << 16), v55, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v36 = v55;
LABEL_38:
    swift_release(v36);
    return (uint64_t)v14;
  }
  v48 = v10;
  v49 = a1;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v47 = v13 | (v12 << 16);
  v56 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v58[0] = v18;
    v58[1] = v19;
    v21 = a3(v58);
    if (v6)
    {
      swift_release(v48);
      swift_release(v55);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    v23 = swift_bridgeObjectRelease(v20);
    if ((v22 & 1) == 0)
    {
      v15 = String.index(after:)(v15, a5, a6, v23);
      goto LABEL_23;
    }
    v24 = (v16 >> 14 == v15 >> 14) & a2;
    if (v24 != 1)
    {
      if (v15 >> 14 < v16 >> 14)
        goto LABEL_40;
      v25 = String.subscript.getter(v16, v15, a5, a6);
      v51 = v27;
      v52 = v26;
      v53 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_10000AAE8(0, v14[2] + 1, 1, (uint64_t)v14);
        v14 = v33;
      }
      v30 = v14[2];
      v29 = v14[3];
      if (v30 >= v29 >> 1)
      {
        sub_10000AAE8(v29 > 1, v30 + 1, 1, (uint64_t)v14);
        v14 = v34;
      }
      v14[2] = v30 + 1;
      v31 = &v14[4 * v30];
      v31[4] = v25;
      v31[5] = v53;
      v31[6] = v52;
      v31[7] = v51;
      *(_QWORD *)v50 = v14;
    }
    v32 = String.index(after:)(v15, a5, a6, v23);
    v15 = v32;
    *(_QWORD *)(v55 + 16) = v32;
    if ((v24 & 1) == 0 && v14[2] == v49)
      break;
    v16 = v32;
    v17 = v32;
LABEL_23:
    if (v56 == v15 >> 14)
      goto LABEL_32;
  }
  v17 = v32;
  v16 = v32;
LABEL_32:
  if (v56 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
LABEL_37:
    swift_bridgeObjectRetain(v14);
    swift_release(v48);
    v36 = v55;
    goto LABEL_38;
  }
  if (v56 >= v17 >> 14)
  {
    v37 = String.subscript.getter(v17, v47, a5, a6);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    swift_bridgeObjectRelease(a6);
    sub_100027FFC();
    v44 = *(_QWORD *)(*(_QWORD *)v50 + 16);
    sub_100028044(v44);
    v14 = *(_QWORD **)v50;
    v14[2] = v44 + 1;
    v45 = &v14[4 * v44];
    v45[4] = v37;
    v45[5] = v39;
    v45[6] = v41;
    v45[7] = v43;
    *(_QWORD *)v50 = v14;
    goto LABEL_37;
  }
LABEL_40:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100027EF8(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1)
    return v8 ^ 1u;
  if (a1 >> 14 >= v7 >> 14)
  {
    v10 = String.subscript.getter(v7, a1, a5, a6);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    sub_100027FFC();
    v17 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
    sub_100028044(v17);
    v18 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v18 + 16) = v17 + 1;
    v19 = (_QWORD *)(v18 + 32 * v17);
    v19[4] = v10;
    v19[5] = v12;
    v19[6] = v14;
    v19[7] = v16;
    return v8 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

void sub_100027FFC()
{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10000AAE8(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
    *v0 = v3;
  }
}

void sub_100028044(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  if (a1 + 1 > (uint64_t)(v2 >> 1))
  {
    sub_10000AAE8(v2 > 1, a1 + 1, 1, *v1);
    *v1 = v3;
  }
}

_QWORD *sub_100028080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100008414(&qword_100077B60);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000280E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v9 = String.UTF16View.index(_:offsetBy:)(15, v5, a2);
    sub_100028A0C(v9);
    return v10 | 4;
  }
  else
  {
    v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v5);
    sub_100028A0C(v6);
    return v7 | 8;
  }
}

unsigned __int8 *sub_10002813C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10002849C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_100028220(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_100028220(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002849C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = sub_1000284F8((uint64_t)sub_1000284F4, 0, a1, a2);
  v4 = v3;
  v7 = sub_10002852C(v2, v5, v6, v3);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t sub_1000284F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3;
  v5 = 7;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  return String.subscript.getter(15, v5 | (v4 << 16), a3, a4);
}

uint64_t sub_10002852C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_100028670(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100028080(v12, 0);
      v5 = sub_10002875C((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_100028670(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1000280E4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1000280E4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10002875C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
    goto LABEL_38;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_35:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    result = v12;
    if ((v12 & 0xC) == v15)
      result = sub_1000280E4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      result = sub_1000280E4(v12, a6, a7);
      v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16)
      goto LABEL_37;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_10002895C(uint64_t *a1, uint64_t *a2)
{
  return sub_100027A70(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_100028984(uint64_t *a1)
{
  uint64_t v1;

  return sub_10002895C(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_1000289A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000289C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100028A0C(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

void sub_100028A24(uint64_t (*a1)(void))
{
  void *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  id v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  id v126;
  uint64_t v127;
  uint64_t v128;

  v1 = (void *)sub_100029444(a1);
  v2 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  v3 = sub_100029434((uint64_t)objc_msgSend(v2, "localizedDescription"));
  v5 = v4;

  v116 = v2;
  v6 = swift_bridgeObjectRetain(v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = sub_10000F640(42);
    v10 = sub_10000F640(96);
    v128 = v10;
    *(_DWORD *)v9 = 136446979;
    v127 = sub_10000EC54(0xD000000000000015, 0x8000000100056AF0, &v128);
    v12 = sub_10002941C(v127, v11);
    *(_WORD *)(v9 + 12) = 2082;
    v19 = sub_1000293DC(v12, "domain", v13, v14, v15, v16, v17, v18, v106, v116);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v107 = v3;
    v22 = v21;

    v127 = sub_10000EC54(v20, v22, &v128);
    v24 = sub_10002941C(v127, v23);
    sub_1000293B0(v24, v25, v26, v27, v28, v29, v30, v31, v107, v117);
    sub_1000293B0(v32, v33, v34, v35, v36, v37, v38, v39, v108, v118);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v9 + 22) = 2048;
    v47 = sub_1000293DC(v40, "code", v41, v42, v43, v44, v45, v46, v109, v119);
    sub_1000293B0((int)v47, v48, v49, v50, v51, v52, v53, v54, v110, v120);
    v127 = (uint64_t)v47;
    v57 = sub_10002940C(v55, v56);
    sub_1000293B0(v57, v58, v59, v60, v61, v62, v63, v64, v111, v121);
    *(_WORD *)(v9 + 32) = 2081;
    swift_bridgeObjectRetain(v5);
    v127 = sub_10000EC54(v112, v5, &v128);
    sub_10002940C(v127, v65);
    sub_1000293EC(v5);
    sub_10002944C((void *)&_mh_execute_header, v7, v8, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v9);
    sub_10002942C(v10);
    sub_10000F604(v10);
    sub_10000F604(v9);

    sub_1000293B0(v66, v67, v68, v69, v70, v71, v72, v73, v112, v122);
    sub_10000F610();
  }
  else
  {
    sub_1000293F4(v5);

    sub_1000293B0(v74, v75, v76, v77, v78, v79, v80, v81, v106, v116);
    sub_1000293B0(v82, v83, v84, v85, v86, v87, v88, v89, v113, v123);
    sub_1000293B0(v90, v91, v92, v93, v94, v95, v96, v97, v114, v124);
    sub_1000293B0(v98, v99, v100, v101, v102, v103, v104, v105, v115, v125);
    sub_1000293B8(v126);
  }
}

void sub_100028C70(uint64_t (*a1)(void), uint64_t a2, NSObject *a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  unint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7 = sub_100029444(a1);
  v8 = (void *)_convertErrorToNSError(_:)(v7);
  v9 = swift_errorRelease(v7);
  v10 = sub_1000190EC(v9, "localizedDescription");
  v11 = sub_100029434((uint64_t)v10);
  v13 = v12;

  v39 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(25, 1);
  v40 = v14;
  v15._countAndFlagsBits = 0x75716552203D3D3DLL;
  v15._object = (void *)0xEC00000020747365;
  String.append(_:)(v15);
  v38 = a4;
  v16 = sub_100029374();
  v17._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v38, 16, 1, &type metadata for UInt, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._countAndFlagsBits = 0x656873696E694620;
  v19._object = (void *)0xED00003D3D3D2064;
  String.append(_:)(v19);
  v20 = v40;
  v21 = v8;
  swift_bridgeObjectRetain(v20);
  v22 = sub_1000293E4();
  v23 = a3;
  Logger.logObject.getter(v22);
  v24 = sub_10002943C();
  if (os_log_type_enabled(a3, v24))
  {
    v25 = sub_10000F640(42);
    v37 = sub_10000F640(96);
    v39 = v37;
    *(_DWORD *)v25 = 136446979;
    v26 = swift_bridgeObjectRetain(v20);
    v38 = sub_100029468(v26, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v25 + 4);
    v28 = sub_1000293EC(v20);
    *(_WORD *)(v25 + 12) = 2082;
    v29 = sub_1000190EC(v28, "domain");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v36 = v11;
    v32 = v31;

    v38 = sub_10000EC54(v30, v32, &v39);
    sub_10002945C((uint64_t)&v38);

    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v25 + 22) = 2048;
    v34 = sub_1000190EC(v33, "code");

    v38 = (uint64_t)v34;
    sub_1000293D4((uint64_t)&v38, (uint64_t)&v39);

    *(_WORD *)(v25 + 32) = 2081;
    sub_1000293E4();
    v38 = sub_100029454(v36, v35, &v39);
    sub_1000293D4((uint64_t)&v38, (uint64_t)&v39);
    sub_1000293EC(v13);
    sub_10002944C((void *)&_mh_execute_header, v23, v24, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v25);
    sub_10002942C(v37);
    sub_10000F604(v37);
    sub_10000F604(v25);

  }
  else
  {
    sub_1000293F4(v13);
    sub_1000293F4(v20);

  }
}

void sub_100028F80(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), void *a4)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  id v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  id v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  uint64_t v201;
  uint64_t v202;

  v5 = v4;
  v8 = a3();
  v9 = (void *)_convertErrorToNSError(_:)(v8);
  swift_errorRelease(v8);
  v10 = sub_100029434((uint64_t)objc_msgSend(v9, "localizedDescription"));
  v12 = v11;

  v13 = a1();
  if (v14)
  {
    v15 = v13;
    v16 = v14;
    v185 = v9;
    swift_bridgeObjectRetain(v16);
    v17 = sub_1000293E4();
    v18 = v5;
    Logger.logObject.getter(v17);
    v19 = sub_10002943C();
    if (sub_1000293FC(v19))
    {
      v20 = sub_10000F640(42);
      v170 = sub_10000F640(96);
      v202 = v170;
      *(_DWORD *)v20 = 136446979;
      swift_bridgeObjectRetain(v16);
      v201 = sub_10000EC54(v15, v16, &v202);
      sub_10002945C((uint64_t)&v201);
      v21 = sub_1000293EC(v16);
      *(_WORD *)(v20 + 12) = 2082;
      v28 = sub_1000293DC(v21, "domain", v22, v23, v24, v25, v26, v27, v170, v185);
      v29 = v10;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v32 = v31;

      v201 = sub_10000EC54(v30, v32, &v202);
      v33 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v20 + 14);
      sub_1000293B0(v33, v34, v35, v36, v37, v38, v39, v40, v171, v186);
      sub_1000293B0(v41, v42, v43, v44, v45, v46, v47, v48, v172, v187);
      v49 = swift_bridgeObjectRelease(v32);
      *(_WORD *)(v20 + 22) = 2048;
      v56 = sub_1000293DC(v49, "code", v50, v51, v52, v53, v54, v55, v173, v188);
      sub_1000293B0((int)v56, v57, v58, v59, v60, v61, v62, v63, v174, v189);
      v201 = (uint64_t)v56;
      v64 = sub_1000293D4((uint64_t)&v201, (uint64_t)&v202);
      sub_1000293B0(v64, v65, v66, v67, v68, v69, v70, v71, v175, v190);
      *(_WORD *)(v20 + 32) = 2081;
      sub_1000293E4();
      v201 = sub_100029454(v29, v72, &v202);
      sub_1000293D4((uint64_t)&v201, (uint64_t)&v202);
      sub_1000293EC(v12);
      sub_10002944C((void *)&_mh_execute_header, v18, (os_log_type_t)v9, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v20);
      sub_10002942C(v176);
      v73 = v176;
LABEL_6:
      sub_10000F604(v73);
      sub_10000F604(v20);

      sub_1000293B0(v128, v129, v130, v131, v132, v133, v134, v135, v176, v191);
      sub_10000F610();
      return;
    }
    sub_1000293F4(v12);
    v136 = v16;
  }
  else
  {
    v185 = v9;
    v74 = sub_1000293E4();
    v18 = v5;
    Logger.logObject.getter(v74);
    v75 = sub_10002943C();
    if (sub_1000293FC(v75))
    {
      v20 = sub_10000F640(32);
      v76 = sub_10000F640(64);
      v202 = v76;
      *(_DWORD *)v20 = 136446723;
      v83 = sub_1000293DC(v76, "domain", v77, v78, v79, v80, v81, v82, v169, v185);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
      v85 = v84;

      v201 = sub_100029468(v86, v87, &v202);
      v88 = sub_1000293D4((uint64_t)&v201, (uint64_t)&v202);
      sub_1000293B0(v88, v89, v90, v91, v92, v93, v94, v95, v177, v192);
      sub_1000293B0(v96, v97, v98, v99, v100, v101, v102, v103, v178, v193);
      v104 = swift_bridgeObjectRelease(v85);
      *(_WORD *)(v20 + 12) = 2048;
      v111 = sub_1000293DC(v104, "code", v105, v106, v107, v108, v109, v110, v179, v194);
      sub_1000293B0((int)v111, v112, v113, v114, v115, v116, v117, v118, v180, v195);
      v201 = (uint64_t)v111;
      v119 = sub_1000293D4((uint64_t)&v201, (uint64_t)&v202);
      sub_1000293B0(v119, v120, v121, v122, v123, v124, v125, v126, v181, v196);
      *(_WORD *)(v20 + 22) = 2081;
      sub_1000293E4();
      v201 = sub_100029454(v10, v127, &v202);
      sub_1000293D4((uint64_t)&v201, (uint64_t)&v202);
      sub_1000293EC(v12);
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v9, "%{public}s (%ld) %{private}s", (uint8_t *)v20, 0x20u);
      swift_arrayDestroy(v76, 2);
      v73 = v76;
      goto LABEL_6;
    }
    v136 = v12;
  }
  sub_1000293F4(v136);

  sub_1000293B0(v137, v138, v139, v140, v141, v142, v143, v144, v169, v185);
  sub_1000293B0(v145, v146, v147, v148, v149, v150, v151, v152, v182, v197);
  sub_1000293B0(v153, v154, v155, v156, v157, v158, v159, v160, v183, v198);
  sub_1000293B0(v161, v162, v163, v164, v165, v166, v167, v168, v184, v199);
  sub_1000293B8(v200);
}

unint64_t sub_100029374()
{
  unint64_t result;

  result = qword_100078350;
  if (!qword_100078350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_100078350);
  }
  return result;
}

void sub_1000293B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

}

void sub_1000293B8(id a1)
{

}

uint64_t sub_1000293D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

id sub_1000293DC(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  return objc_msgSend(a10, a2);
}

uint64_t sub_1000293E4()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000293EC(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 3);
}

uint64_t sub_1000293F4(uint64_t a1)
{
  return swift_bridgeObjectRelease_n(a1, 2);
}

BOOL sub_1000293FC(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10002940C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v3, v2);
}

uint64_t sub_10002941C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v2, v3);
}

uint64_t sub_10002942C(uint64_t a1)
{
  return swift_arrayDestroy(a1, 3);
}

uint64_t sub_100029434(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_10002943C()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_100029444(uint64_t (*a1)(void))
{
  return a1();
}

void sub_10002944C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x2Au);
}

uint64_t sub_100029454(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return sub_10000EC54(a1, v3, a3);
}

uint64_t sub_10002945C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v1, v2);
}

uint64_t sub_100029468(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_10000EC54(v3, v4, a3);
}

id sub_100029474(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100029498(a1, a2, a3, a4, a5, a6, a7, &NSOSStatusErrorDomain);
}

id sub_100029480(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100029498(a1, a2, a3, a4, a5, a6, a7, &NSMachErrorDomain);
}

id sub_10002948C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100029498(a1, a2, a3, a4, a5, a6, a7, &NSPOSIXErrorDomain);
}

id sub_100029498(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v11;
  uint64_t v12;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a8);
  return sub_100018044(v11, v12, a1, a2, a3, 0);
}

void sub_100029518(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(a1 + 16))
  {
    v1 = sub_100037450();
    if ((v2 & 1) != 0)
    {
      sub_10000C4D8(v1, v2, v3);
      sub_100036F1C((uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Any, v4, v5, SWORD2(v5), SBYTE6(v5), SHIBYTE(v5), v6);
    }
  }
  sub_10001BB10();
}

void sub_10002956C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(a1 + 16))
  {
    v1 = sub_100035B4C(4);
    if ((v2 & 1) != 0)
    {
      sub_10000C4D8(v1, v2, v3);
      sub_100036F1C((uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Any, v4, v5, SWORD2(v5), SBYTE6(v5), SHIBYTE(v5), v6);
    }
  }
  sub_10001BB10();
}

void sub_1000295C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(a1 + 16))
  {
    v1 = sub_100035B4C(10);
    if ((v2 & 1) != 0)
    {
      sub_10000C4D8(v1, v2, v3);
      sub_100036F1C((uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Any, v4, v5, SWORD2(v5), SBYTE6(v5), SHIBYTE(v5), v6);
    }
  }
  sub_10001BB10();
}

uint64_t sub_10002961C(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  unsigned __int8 v5;
  _BYTE v6[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v2 = sub_100035B4C(11);
  if ((v3 & 1) == 0)
    return 0;
  sub_10000B26C(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v6);
  result = swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((_DWORD)result)
    return v5;
  return result;
}

uint64_t sub_100029698(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  unsigned __int8 v5;
  _BYTE v6[32];

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v2 = sub_100035B4C(12);
  if ((v3 & 1) == 0)
    return 0;
  sub_10000B26C(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)v6);
  result = swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((_DWORD)result)
    return v5;
  return result;
}

void sub_100029714(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10002973C()
{
  char v1;
  uint64_t v2;

  v1 = 0;
  if ((sub_100018C64((uint64_t)&v2, (uint64_t)&v1, (uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Swift.AnyObject + 8) & 1) == 0)return 0;
  return v2;
}

uint64_t sub_1000297E0(char a1)
{
  return byte_100059362[a1];
}

uint64_t sub_1000297F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(_QWORD, uint64_t))((char *)nullsub_1 + 4 * byte_100059183[a1]))(0, 1);
}

uint64_t sub_100029820()
{
  return 0x4031000000000000;
}

uint64_t sub_10002982C()
{
  return 0x4050000000000000;
}

uint64_t sub_100029838()
{
  return 0x4048000000000000;
}

uint64_t sub_100029844()
{
  return 0x4036000000000000;
}

void sub_100029850(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  v1 = sub_100009BB4();
  String.hash(into:)(v3, v1, v2);
  sub_100005DD0();
  sub_1000370C4();
  sub_1000373D0();
}

void sub_1000298A0(uint64_t a1, Swift::UInt a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(a2);
  sub_1000370C4();
  sub_1000373D0();
}

uint64_t sub_1000298D8(uint64_t a1, uint64_t (*a2)(_OWORD *, uint64_t *))
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[8];
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v6;
  v9 = v2;
  return a2(v8, &v10);
}

void sub_10002996C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v5[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_displaySettings);
  sub_10000F664((uint64_t)v3, (uint64_t)v5, 1);
  v4 = *v3;
  *v3 = a1;
  swift_bridgeObjectRelease(v4);
  sub_1000370B4();
}

void sub_1000299B4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  _BYTE v10[24];

  sub_1000373A0();
  v7 = v3 + OBJC_IVAR___DisplayMainViewController_snapshot;
  sub_10000F664(v7, (uint64_t)v10, 1);
  v8 = *(void **)v7;
  v9 = *(void **)(v7 + 8);
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = v4;
  *(_BYTE *)(v7 + 16) = a3;
  sub_100036CD0(v8, v9);
  sub_10000C57C();
}

void sub_100029A08(uint64_t a1)
{
  uint64_t v1;

  sub_10000F664(v1 + OBJC_IVAR___DisplayMainViewController_snapshot, a1, 33);
  sub_100005D94();
}

void sub_100029A44(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayMainViewController_sidebarController);
}

void sub_100029A50(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayMainViewController_displayLeftConstraint);
}

void sub_100029A5C(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayMainViewController_displayRightConstraint);
}

void sub_100029A68(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayMainViewController_keyboardResponder);
}

void sub_100029A74(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayMainViewController_qosViewController);
}

void sub_100029A80(uint64_t a1)
{
  sub_100018C58(a1, OBJC_IVAR___DisplayMainViewController_presentedAlert);
}

uint64_t sub_100029A8C(uint64_t a1)
{
  return sub_100036FD0(a1);
}

void sub_100029A98(uint64_t a1)
{
  uint64_t v1;

  sub_10000F664(v1 + OBJC_IVAR___DisplayMainViewController_usageSummary, a1, 33);
  sub_100005D94();
}

uint64_t sub_100029AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR___DisplayMainViewController_disableUniversalControlAssertion);
  *(_QWORD *)(v1 + OBJC_IVAR___DisplayMainViewController_disableUniversalControlAssertion) = a1;
  return swift_release(v2);
}

void sub_100029AEC()
{
  sub_100029AFC(2, &OBJC_IVAR___DisplayMainViewController_dockShown);
}

void sub_100029AFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  id v5;
  _QWORD v6[4];
  char v7;

  v3 = *(void **)(v2 + OBJC_IVAR___DisplayMainViewController_sidebarController);
  if (v3)
  {
    v6[0] = a1;
    memset(&v6[1], 0, 24);
    v7 = 2;
    v4 = *(_BYTE *)(v2 + *a2);
    v5 = v3;
    sub_10001A7BC((uint64_t)v6, v4);

  }
}

void sub_100029B94()
{
  uint64_t v0;
  id v1;

  v1 = *(id *)(v0 + OBJC_IVAR___DisplayMainViewController__customUndoManager);
  sub_100005D94();
}

void sub_100029C0C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___DisplayMainViewController_displayViewController)
                 + OBJC_IVAR___DisplayViewController_session);
  if (v1)
    v2 = *(id *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request);
  sub_100005D94();
}

void sub_100029C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  _BYTE v7[32];
  _BYTE v8[24];

  v1 = v0 + OBJC_IVAR___DisplayMainViewController_displaySettings;
  sub_10000F664(v0 + OBJC_IVAR___DisplayMainViewController_displaySettings, (uint64_t)v8, 0);
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    sub_100019104();
    v2 = sub_100037450();
    if ((v3 & 1) != 0
      && (sub_1000372CC(v2, v3),
          (sub_100018C64((uint64_t)&v6, (uint64_t)v7, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool) & 1) != 0))
    {
      v4 = v6;
      sub_100005DA4();
      if ((v4 & 1) == 0)
        goto LABEL_8;
    }
    else
    {
      sub_100005DA4();
    }
  }
  v5 = sub_100037328();
  sub_10002956C(v5);
  sub_100005DD0();
LABEL_8:
  sub_1000373D0();
}

uint64_t sub_100029D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  char v9;
  _BYTE v10[32];
  _BYTE v11[24];

  v1 = v0 + OBJC_IVAR___DisplayMainViewController_displaySettings;
  sub_10000F664(v0 + OBJC_IVAR___DisplayMainViewController_displaySettings, (uint64_t)v11, 0);
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    goto LABEL_7;
  sub_100019104();
  v2 = sub_100037450();
  if ((v3 & 1) == 0
    || (sub_1000372CC(v2, v3),
        (sub_100018C64((uint64_t)&v9, (uint64_t)v10, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Bool) & 1) == 0))
  {
    sub_100005DA4();
    goto LABEL_7;
  }
  v4 = v9;
  sub_100005DA4();
  if ((v4 & 1) != 0)
  {
LABEL_7:
    v6 = sub_100019104();
    sub_10002956C(v6);
    v5 = v7;
    sub_100005DA4();
    return v5 & 1;
  }
  v5 = 1;
  return v5 & 1;
}

void sub_100029E28()
{
  uint64_t v0;
  id v1;
  objc_super v2;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:", v0);

  sub_100037248();
  objc_msgSendSuper2(&v2, "dealloc");
  sub_100018E8C();
}

id sub_100029FD8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  char *v4;
  id result;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  double v10;
  id v11;
  SEL v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Class isa;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  objc_class *v59;
  uint64_t v60;
  NSBundle v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  char *v71;
  objc_super v72;

  v1 = v0;
  v72.receiver = v0;
  v72.super_class = (Class)sub_100035308();
  objc_msgSendSuper2(&v72, "loadView");
  v2 = OBJC_IVAR___DisplayMainViewController_displayViewController;
  v3 = *(id *)&v0[OBJC_IVAR___DisplayMainViewController_displayViewController];
  v4 = v1;
  sub_10002256C((uint64_t)v1, (uint64_t)&off_10006B610);

  result = objc_msgSend(*(id *)&v1[v2], "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = result;
  result = sub_10002761C((uint64_t)result, "view");
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = result;
  v8 = OBJC_IVAR___DisplayMainViewController_displayContainer;
  sub_10001E660(*(id *)&v4[OBJC_IVAR___DisplayMainViewController_displayContainer], "setTranslatesAutoresizingMaskIntoConstraints:");
  sub_10001E660(v6, "setTranslatesAutoresizingMaskIntoConstraints:");
  result = sub_10002761C((uint64_t)objc_msgSend(v4, "addChildViewController:", *(_QWORD *)&v1[v2]), "view");
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v9 = result;
  objc_msgSend(result, "bounds");
  sub_1000370DC();

  v10 = sub_10003746C();
  objc_msgSend(v11, v12, v10);
  sub_100037448(*(id *)&v4[v8], "addSubview:");
  objc_msgSend(v7, "addSubview:", *(_QWORD *)&v4[v8]);
  v13 = objc_msgSend(*(id *)&v4[v8], "layer");
  sub_10001BAAC(v13, "setMasksToBounds:");

  v14 = objc_msgSend(*(id *)&v4[v8], "leftAnchor");
  v15 = sub_100037440((uint64_t)v14, "leftAnchor");
  v16 = sub_10001E698(v14, "constraintEqualToAnchor:");

  sub_100029A50((uint64_t)v16);
  v17 = objc_msgSend(*(id *)&v4[v8], "rightAnchor");
  v18 = sub_100037440((uint64_t)v17, "rightAnchor");
  v19 = sub_10001E698(v17, "constraintEqualToAnchor:");

  sub_100029A5C((uint64_t)v19);
  sub_100037178(*(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController__customUndoManager]+ OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController18DisplayUndoManager_delegate, (uint64_t)&off_10006B6A8);
  v20 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  sub_10001BAAC(v20, "setBatteryMonitoringEnabled:");

  v21 = sub_100008414((uint64_t *)&unk_100078650);
  result = (id)sub_100018C8C(v21, 96);
  *((_OWORD *)result + 1) = xmmword_100059380;
  v22 = *(void **)&v4[OBJC_IVAR___DisplayMainViewController_displayLeftConstraint];
  if (!v22)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v23 = result;
  v71 = v1;
  v70 = v2;
  *((_QWORD *)result + 4) = v22;
  v24 = *(void **)&v4[OBJC_IVAR___DisplayMainViewController_displayRightConstraint];
  if (!v24)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v68 = (id)objc_opt_self(NSLayoutConstraint);
  v23[5] = v24;
  v25 = v22;
  v26 = sub_10001BA7C((uint64_t)v24, "topAnchor");
  v27 = v7;
  v28 = sub_100037440((uint64_t)v26, "topAnchor");
  v29 = objc_msgSend(v26, "constraintEqualToAnchor:", v28);
  sub_1000370CC();

  v23[6] = &ResourceBundleClass.base_meths;
  v69 = v27;
  v30 = sub_10001E668((uint64_t)objc_msgSend(*(id *)&v4[v8], "bottomAnchor"), "bottomAnchor");
  v31 = sub_100036EF0((uint64_t)v30);
  sub_1000370CC();

  v23[7] = &ResourceBundleClass.base_meths;
  v33 = sub_1000372AC(v32, "topAnchor");
  v34 = objc_msgSend((id)sub_1000373F8(), "topAnchor");
  v35 = sub_100036EF0((uint64_t)v34);
  sub_1000370CC();

  v23[8] = &ResourceBundleClass.base_meths;
  v37 = sub_1000372AC(v36, "bottomAnchor");
  v38 = objc_msgSend((id)sub_1000373F8(), "bottomAnchor");
  v39 = sub_100036EF0((uint64_t)v38);
  sub_1000370CC();

  v23[9] = &ResourceBundleClass.base_meths;
  v41 = sub_1000372AC(v40, "leftAnchor");
  v42 = objc_msgSend((id)sub_1000373F8(), "leftAnchor");
  v43 = sub_100036EF0((uint64_t)v42);
  sub_1000370CC();

  v23[10] = &ResourceBundleClass.base_meths;
  v45 = sub_1000372AC(v44, "rightAnchor");
  v46 = objc_msgSend((id)sub_1000373F8(), "rightAnchor");
  v47 = sub_100036EF0((uint64_t)v46);
  sub_1000370CC();

  v23[11] = &ResourceBundleClass.base_meths;
  specialized Array._endMutation()(v48, v49, v50);
  sub_100018AA4(0, (unint64_t *)&qword_1000786D0, NSLayoutConstraint_ptr);
  isa = sub_10002728C().super.isa;
  sub_100005DA4();
  objc_msgSend(v68, "activateConstraints:", isa);

  sub_1000373E4(*(id *)&v71[v70], "didMoveToParentViewController:");
  if (sub_100036880())
    sub_10002A61C();
  v52 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v53 = objc_msgSend(v52, "addObserver:selector:name:object:", v4, "_batteryStateChangedWithNote:", UIDeviceBatteryStateDidChangeNotification, 0);
  v56 = sub_10003712C((uint64_t)v53, v54, v55, (uint64_t)"_keyboardFrameChangedWithNote:", (uint64_t)UIKeyboardDidChangeFrameNotification);
  sub_10003712C((uint64_t)v56, v57, v58, (uint64_t)"_displayModeChanged:", (uint64_t)UIScreenReferenceDisplayModeStatusDidChangeNotification);
  v59 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v60 = sub_100036EAC();
  v61.super.isa = v59;
  v65 = sub_100036F54(v60, v62, v63, v64, v61);
  v67 = v66;

  sub_1000309C4(v65, v67, 0, 0xE000000000000000, 0, 0);
  return (id)sub_1000372B4();
}

void sub_10002A61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  objc_class *v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = 4;
  v2 = v0;
  v14 = OBJC_IVAR___DisplayMainViewController_displayContainer;
  v3 = v0 + OBJC_IVAR___DisplayMainViewController_corners;
  v13 = (objc_class *)type metadata accessor for RoundedCornerView();
  v4 = &byte_100069C50;
  do
  {
    v5 = *v4++;
    v6 = objc_allocWithZone(v13);
    v7 = sub_100039CB8(v5);
    objc_msgSend(v7, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v8 = objc_msgSend(v7, "widthAnchor");
    v9 = objc_msgSend(v8, "constraintEqualToConstant:", 16.0);

    objc_msgSend(v9, "setActive:", 1);
    v10 = objc_msgSend(v7, "heightAnchor");
    v11 = objc_msgSend(v10, "constraintEqualToConstant:", 16.0);

    objc_msgSend(v11, "setActive:", 1);
    objc_msgSend(v7, "setHidden:", 1);
    objc_msgSend(*(id *)(v2 + v14), "addSubview:", v7);
    sub_100033558((uint64_t)v7);
    swift_beginAccess(v3, v15, 33, 0);
    v12 = v7;
    sub_10000B748((uint64_t)v12, v5);
    swift_endAccess(v15);

    --v1;
  }
  while (v1);
}

id sub_10002A80C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  double Height;
  char v12;
  uint64_t v13;
  uint64_t v14;
  id result;
  double v16;
  double v17;
  double v18;
  double v19;
  _QWORD v20[2];
  id v21[4];
  char v22;
  __int128 v23;
  __int128 v24;
  CGRect v25;
  CGRect v26;

  sub_100037334();
  v5 = Notification.userInfo.getter();
  if (!v5)
  {
    v23 = 0u;
    v24 = 0u;
    goto LABEL_8;
  }
  v6 = v5;
  v20[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(UIKeyboardFrameEndUserInfoKey);
  v20[1] = v7;
  AnyHashable.init<A>(_:)(v21, v20, &type metadata for String, &protocol witness table for String);
  sub_1000100F0(v6, &v23);
  sub_100005DA4();
  v8 = sub_10000BE94((uint64_t)v21);
  if (!*((_QWORD *)&v24 + 1))
  {
LABEL_8:
    sub_10001893C((uint64_t)&v23, (uint64_t *)&unk_100077B70);
    goto LABEL_9;
  }
  sub_100018C20(v8, &qword_1000786E8, NSValue_ptr);
  if ((sub_100018C64((uint64_t)v21, (uint64_t)&v23, (uint64_t)&type metadata for Any + 8, v9) & 1) != 0)
  {
    v10 = v21[0];
    objc_msgSend(v21[0], "CGRectValue");
    sub_1000370DC();
    if (CGRectGetWidth(v25) <= 0.0)
    {

    }
    else
    {
      v26.origin.x = sub_10003746C();
      Height = CGRectGetHeight(v26);

      if (Height > 0.0)
      {
        v12 = 0;
        goto LABEL_10;
      }
    }
  }
LABEL_9:
  v12 = 1;
  v1 = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
LABEL_10:
  v21[0] = v1;
  v21[1] = v2;
  v21[2] = v3;
  v21[3] = v4;
  v13 = *(_QWORD *)(v0 + OBJC_IVAR___DisplayMainViewController_displayViewController);
  v22 = v12;
  v14 = *(_QWORD *)(v13 + OBJC_IVAR___DisplayViewController_hidObserver);
  sub_10001D5D0();
  sub_100006638((uint64_t)v21);
  swift_release(v14);
  result = *(id *)(v0 + OBJC_IVAR___DisplayMainViewController_keyboardDebugLayer);
  if (result)
  {
    v16 = 0.0;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    if ((v12 & 1) == 0)
    {
      v16 = *(double *)&v3;
      v17 = *(double *)&v4;
      v18 = *(double *)&v1;
      v19 = *(double *)&v2;
    }
    return objc_msgSend(result, "setFrame:", v18, v19, v16, v17);
  }
  return result;
}

void sub_10002AA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  os_log_t v68;
  NSObject *v69;
  void *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[4];

  sub_100018CC8();
  v1 = v0;
  v3 = v2;
  v4 = sub_100009408();
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Notification(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (char *)sub_100037340(OBJC_IVAR___DisplayMainViewController_displayViewController);
  v16 = Notification.object.getter(v77);
  if (v77[3])
  {
    sub_100018C20((uint64_t)v16, &qword_1000786A8, UIScreen_ptr);
    v18 = sub_100018C64((uint64_t)&v76, (uint64_t)v77, (uint64_t)&type metadata for Any + 8, v17);
    if ((v18 & 1) != 0)
    {
      v74 = v8;
      v75 = v5;
      v19 = (void *)v76;
      sub_100018C20(v18, (unint64_t *)&unk_1000786B0, NSObject_ptr);
      v21 = sub_100018D44(v20, "_screen");
      v22 = static NSObject.== infix(_:_:)(v19, v21);

      if ((v22 & 1) != 0)
      {
        v24 = OBJC_IVAR___DisplayMainViewController_referenceDisplayModeStatus;
        v73 = *(_QWORD *)(v1 + OBJC_IVAR___DisplayMainViewController_referenceDisplayModeStatus);
        v72 = sub_10001E668(v23, "referenceDisplayModeStatus");
        *(_QWORD *)(v1 + v24) = v72;
        if (qword_1000775B0 != -1)
          swift_once(&qword_1000775B0, sub_100031A0C);
        v25 = sub_100026E38(v4, (uint64_t)qword_100078360);
        v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v3, v10);
        v27 = v25;
        Logger.logObject.getter(v26);
        v28 = sub_100018F48();
        v29 = v28;
        v30 = os_log_type_enabled(v25, v28);
        v71 = v1;
        if (v30)
        {
          v31 = sub_10000F640(32);
          v69 = v25;
          v70 = v19;
          v32 = v31;
          v33 = sub_10000F640(96);
          v77[0] = v33;
          *(_DWORD *)v32 = 136446722;
          v66 = v32 + 4;
          v68 = v27;
          v34 = (void *)Notification.name.getter();
          v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
          v67 = v29;
          v36 = v35;
          v38 = v37;

          v76 = sub_10000EC54(v36, v38, v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v77, v66);
          sub_100037110();
          sub_100037294();
          *(_WORD *)(v32 + 12) = 2082;
          v39 = v73;
          v40 = UIScreenReferenceDisplayModeStatus.description.getter(v73);
          v42 = sub_100037354(v40, v41);
          sub_100037184(v42);
          sub_1000372B4();
          *(_WORD *)(v32 + 22) = 2082;
          v43 = v72;
          v44 = UIScreenReferenceDisplayModeStatus.description.getter((uint64_t)v72);
          v46 = sub_100037354(v44, v45);
          sub_100037184(v46);
          sub_1000372B4();
          v47 = v68;
          _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v67, "%{public}s: %{public}s -> %{public}s", (uint8_t *)v32, 0x20u);
          swift_arrayDestroy(v33, 3);
          sub_10000F604(v33);
          v48 = v32;
          v25 = v69;
          v19 = v70;
          sub_10000F604(v48);

          v50 = v75;
        }
        else
        {
          sub_100037294();

          v50 = v75;
          v43 = v72;
          v39 = v73;
        }
        if ((v39 == 3) != (v43 != (id)3))
        {

          goto LABEL_16;
        }
        v51 = *(_QWORD *)&v15[OBJC_IVAR___DisplayViewController_session];
        if (v51)
        {
          v52 = *(void **)(v51 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request);
          sub_100018C20(v49, (unint64_t *)&qword_100077C80, NSError_ptr);
          v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
          v55 = v54;
          v56 = v52;
          v64 = 238;
          LOBYTE(v63) = 2;
          v57 = sub_100018044(v53, v55, -504, 0, 0, 0);
          v58 = (uint64_t)v74;
          v59 = sub_100019060((uint64_t)v74, (uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 16));
          __chkstk_darwin(v59, v60);
          v63 = v57;
          sub_100028F80((uint64_t (*)(void))sub_10002AF38, 0, sub_100018B80, &v65 - 4);
          sub_1000370BC(v58, *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
          v61 = v57;
          v62 = (void *)_convertErrorToNSError(_:)(v61);

          objc_msgSend(v56, "setError:", v62);
          sub_10002AF54();

          goto LABEL_16;
        }
      }

    }
    goto LABEL_16;
  }

  sub_10001893C((uint64_t)v77, (uint64_t *)&unk_100077B70);
LABEL_16:
  sub_100018BBC();
}

unint64_t sub_10002AF38()
{
  return 0xD000000000000013;
}

void sub_10002AF54()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  sub_100018CC8();
  v1 = v0;
  v3 = v2;
  v19 = v4;
  v5 = sub_100008414((uint64_t *)&unk_100078320);
  v16 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v5, v7);
  v18 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v9);
  v10 = sub_100009408();
  v20 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v17 = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[3] = v12;
  __chkstk_darwin(v13, v14);
  *(_BYTE *)(v1 + OBJC_IVAR___DisplayMainViewController_reconfiguring) = 1;
  __asm { BR              X10 }
}

void sub_10002B05C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  sub_10000F664(v5 + OBJC_IVAR___DisplayMainViewController_displaySettings, v6 - 104, 33);
  sub_10000A838(1, 3);
  swift_endAccess(v6 - 104);
  v7 = sub_100032188();
  if (v7)
  {
    v9 = (uint64_t)v7;
    v10 = v8;
    v11 = v3;
    v12 = v4;
    v13 = v7;
    v14 = v10;
    sub_1000299B4(v9, (uint64_t)v10, 0);
    sub_10002CA14(v2, *(double *)(v5 + OBJC_IVAR___DisplayMainViewController_configurationAnimationDuration));

    v4 = v12;
    v3 = v11;
  }
  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v15 = sub_100026E38(v1, (uint64_t)qword_100078360);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 112) + 16);
  v16(v4, v15, v1);
  v17 = *(_QWORD *)(*(_QWORD *)(v6 - 120) + OBJC_IVAR___DisplayViewController_session);
  if (v17)
  {
    v18 = v17 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid;
    sub_10000F664(v17 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, v6 - 104, 0);
    v19 = sub_100018F50();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v0, v18, v19);
    v20 = v0;
    v21 = 0;
    v22 = v19;
  }
  else
  {
    v22 = sub_100018F50();
    v20 = v0;
    v21 = 1;
  }
  v23 = sub_100018974(v20, v21, 1, v22);
  sub_100018C20(v23, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  *(_QWORD *)(v6 - 160) = sub_100027230();
  v24 = sub_100018C8C((uint64_t)&unk_10006B868, 24);
  swift_unknownObjectWeakInit(v24 + 16, v5);
  v25 = *(_QWORD *)(v6 - 128);
  sub_100036A9C(v0, v25, (uint64_t *)&unk_100078320);
  v26 = *(_QWORD *)(v6 - 136);
  v16(v26, v4, v1);
  v27 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 144) + 80);
  *(_QWORD *)(v6 - 144) = v4;
  v28 = (v27 + 16) & ~v27;
  v29 = (v3 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)(v6 - 112);
  v31 = *(unsigned __int8 *)(v30 + 80);
  *(_QWORD *)(v6 - 176) = v5;
  *(_QWORD *)(v6 - 168) = v0;
  v32 = (v31 + v29 + 8) & ~v31;
  v33 = (*(_QWORD *)(v6 - 152) + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject(&unk_10006B890, v33 + 8, v27 | v31 | 7);
  sub_100036E40(v25, v34 + v28, (uint64_t *)&unk_100078320);
  v35 = *(void **)(v6 - 120);
  *(_QWORD *)(v34 + v29) = v35;
  sub_100019060(v34 + v32, v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32));
  *(_QWORD *)(v34 + v33) = v24;
  v36 = v35;
  swift_retain(v24);
  v37 = *(void **)(v6 - 160);
  OS_dispatch_queue.once(_:closure:)();
  v39 = v38;
  swift_release(v24);
  sub_10001BB08();

  sub_100029A8C(v39);
  sub_10001893C(*(_QWORD *)(v6 - 168), (uint64_t *)&unk_100078320);
  sub_1000370BC(*(_QWORD *)(v6 - 144), *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
  sub_100018BBC();
}

void sub_10002B3B8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;

  type metadata accessor for Notification(0, a2);
  sub_10003738C();
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = a1;
  a4(v11);

  sub_1000370BC((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_100018F88();
}

void sub_10002B43C()
{
  _BYTE *v0;
  _BYTE *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  os_log_t v38;
  os_log_type_t v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  int v47;
  int v48;
  int v49;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v3 = objc_msgSend(v2, "batteryState");

  v4 = *(_QWORD *)&v1[OBJC_IVAR___DisplayMainViewController_presentedAlert];
  v5 = OBJC_IVAR___DisplayMainViewController_displayShouldSleep;
  v6 = v1[OBJC_IVAR___DisplayMainViewController_displayShouldSleep] | (v4 != 0);
  LODWORD(v2) = v1[OBJC_IVAR___DisplayMainViewController_displayShouldSleep] & 1 | (v4 != 0);
  if ((_DWORD)v2 != sub_10002761C(v7, "allowsDisplaySleep"))
  {
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v8 = sub_100009408();
    v9 = (void *)sub_100026E38(v8, (uint64_t)qword_100078360);
    v10 = v1;
    Logger.logObject.getter(v10);
    v11 = sub_100018F48();
    if (sub_1000293FC(v11))
    {
      v46 = v4 == 0;
      v12 = sub_10000F640(26);
      *(_DWORD *)v12 = 67109888;
      v18 = sub_10003702C(v12, v13, v12 + 4, v12 + 8, v14, v15, v16, v17, v42, v46, v6 & 1);
      v19 = v1[v5];
      *(_WORD *)(v12 + 8) = 1024;
      sub_10003702C(v18, v20, v12 + 10, v12 + 14, v21, v22, v23, v24, v43, v47, v19);

      *(_WORD *)(v12 + 14) = 1024;
      v31 = sub_10003702C(v25, v26, v12 + 16, v12 + 20, v27, v28, v29, v30, v44, v48, v3 != (id)1);
      *(_WORD *)(v12 + 20) = 1024;
      sub_10003702C(v31, v32, v12 + 22, v12 + 26, v33, v34, v35, v36, v45, v49, v49);
      sub_1000371F8();
      _os_log_impl(v37, v38, v39, v40, v41, 0x1Au);
      sub_10000F604(v12);

    }
    else
    {

    }
    objc_msgSend(v10, "setAllowsDisplaySleep:", v6 & 1);
  }
  sub_1000373D0();
}

void sub_10002B620(NSObject *a1)
{
  void *v1;
  os_log_type_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSString *v14;
  uint64_t v15;
  objc_super v16;

  v3 = v1;
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for DisplayMainViewController(0);
  v10 = sub_100037320((uint64_t)v16.super_class, "viewDidAppear:", a1 & 1, v5, v6, v7, v8, v9, v16);
  sub_10002761C((uint64_t)v10, "becomeFirstResponder");
  if (UIApp)
  {
    static PencilReport.setInterfaceOrientation(_:)((unint64_t *)objc_msgSend(UIApp, "statusBarOrientation"));
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v11 = sub_100009408();
    sub_100036EDC(v11, (uint64_t)qword_100078360);
    v12 = sub_100018F48();
    if (sub_10003726C(v12))
    {
      v13 = (uint8_t *)sub_10000F640(2);
      *(_WORD *)v13 = 0;
      sub_100036FFC((void *)&_mh_execute_header, a1, v2, "Taking assertion to disable Universal Control", v13);
      sub_10000F604((uint64_t)v13);
    }

    type metadata accessor for UniversalControlManager(0);
    static UniversalControlManager.shared.getter();
    v14 = NSDefaultRunLoopMode;
    UniversalControlManager.waitUntilSynchronized(in:forInterval:)(v14, 2.0);

    v15 = dispatch thunk of UniversalControlManager.takeClientAssertion(_:)(UVCClientAssertionDisabled);
    sub_100029AD4(v15);
    sub_1000372DC();
    sub_100036FE0();
  }
  else
  {
    __break(1u);
  }
}

void sub_10002B7A4(NSObject *a1)
{
  void *v1;
  os_log_type_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  objc_super v14;

  v3 = v1;
  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for DisplayMainViewController(0);
  sub_100037320((uint64_t)v14.super_class, "viewWillDisappear:", a1 & 1, v5, v6, v7, v8, v9, v14);
  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v10 = sub_100009408();
  sub_100036EDC(v10, (uint64_t)qword_100078360);
  v11 = sub_100018F48();
  if (sub_10003726C(v11))
  {
    v12 = (uint8_t *)sub_10000F640(2);
    *(_WORD *)v12 = 0;
    sub_100036FFC((void *)&_mh_execute_header, a1, v2, "Dropping assertion to disable Universal Control", v12);
    sub_10000F604((uint64_t)v12);
  }

  v13 = sub_100037260();
  sub_100029AD4(v13);
  sub_100036FE0();
}

void sub_10002B8AC(uint64_t a1, double a2, double a3)
{
  id v6;
  unint64_t *v7;
  objc_super v8;

  sub_100037248();
  v6 = objc_msgSendSuper2(&v8, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v7 = (unint64_t *)sub_1000190FC((uint64_t)v6, "_rotatingToInterfaceOrientation");
  static PencilReport.setInterfaceOrientation(_:)(v7);
  sub_1000370B4();
}

void sub_10002B978(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _DWORD *v12;
  void *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  sub_100018F50();
  sub_10003738C();
  __chkstk_darwin(v4, v5);
  sub_100018CB0();
  v7 = sub_10002761C(v6, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_1000370BC((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v9 = sub_1000183B8(isa);

  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v10 = sub_100009408();
  sub_100036EDC(v10, (uint64_t)qword_100078360);
  v11 = sub_100018F48();
  if (sub_1000293FC(v11))
  {
    v12 = (_DWORD *)sub_10000F640(12);
    *v12 = 134217984;
    v19 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v12 + 1);
    sub_1000371F8();
    sub_10000F6D4(v13, v14, v15, v16, v17);
    sub_10000F604((uint64_t)v12);
  }

  v18 = *(id *)&v1[OBJC_IVAR___DisplayMainViewController_displayViewController];
  sub_100022A50(a1);

  sub_1000371A4();
}

void sub_10002BB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  char v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  sub_100018CC8();
  a19 = v21;
  a20 = v22;
  v23 = v20;
  v25 = v24;
  v26 = sub_100009408();
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  v30 = ((char *)&v55 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_100018F50();
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31, v33);
  sub_100018CB0();
  v35 = sub_100018D44(v34, "uuid");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(NSObject *, uint64_t))(v32 + 8))(v20, v31);
  v37 = sub_1000183B8(isa);

  v39 = sub_100018D44(v38, "error");
  if (v39)
  {
    v20 = v39;
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v40 = sub_100026E38(v26, (uint64_t)qword_100078360);
    v41 = sub_100019060((uint64_t)v30, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16));
    __chkstk_darwin(v41, v42);
    *(&v55 - 2) = (uint64_t)v20;
    sub_100028C70((uint64_t (*)(void))sub_1000184A0, (uint64_t)(&v55 - 4), v30, v37);
    sub_1000370BC((uint64_t)v30, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
  }
  else
  {
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    sub_100036EDC(v26, (uint64_t)qword_100078360);
    v43 = sub_100018F48();
    if (sub_100037208(v43))
    {
      v44 = (uint8_t *)sub_10000F640(12);
      *(_DWORD *)v44 = 134217984;
      v56 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &a9, v44 + 4);
      sub_10000F6D4((void *)&_mh_execute_header, v20, (os_log_type_t)v26, "=== Request %lu, format: .hex) Finished ===", v44);
      sub_10000F604((uint64_t)v44);
    }
  }

  v46 = sub_10002761C(v45, "request");
  if (v46)
  {
    v47 = v46;
    sub_100018C20((uint64_t)v46, &qword_100077C88, SidecarRequest_ptr);
    v48 = v25;
    v49 = static NSObject.== infix(_:_:)(v48, v47);

    if ((v49 & 1) != 0)
    {
      sub_10002C59C();
      v50 = objc_msgSend(v48, "isCancelled");
      if ((_DWORD)v50)
      {
        -[NSObject completeRequest:](v23, "completeRequest:", sub_10002761C((uint64_t)v50, "requestCompleted"));
      }
      else
      {
        v51 = *(id *)((char *)&v23->isa + OBJC_IVAR___DisplayMainViewController_displayViewController);
        v52 = sub_100018D44((uint64_t)v51, "error");
        v53 = sub_1000372F0();
        sub_10002BE14(v53, v54);

      }
    }
  }
  sub_100018BBC();
}

void sub_10002BE14(uint64_t a1, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  char v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  objc_class *v32;
  uint64_t v33;
  NSBundle v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  objc_class *v41;
  NSBundle v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t countAndFlagsBits;
  void *v47;
  void *object;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char v53;
  objc_class *v54;
  uint64_t v55;
  NSBundle v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v64;
  NSBundle v66;
  uint64_t v67;
  unint64_t v69;
  NSBundle v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void *v82;
  _QWORD v83[3];
  char v84[8];
  char v85[24];
  _QWORD v86[3];
  char v87[8];

  v3 = v2;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR___DisplayViewController_session);
  if (v5
    && (v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v5
                                                                   + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request), "session"))) != 0)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "dataLink");

    v9 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (v3[OBJC_IVAR___DisplayMainViewController_reconfiguring] == 1)
  {
    if (!a2)
      goto LABEL_14;
    swift_getErrorValue(a2, v84, v83);
    sub_100027348(v83[1], v83[2]);
    if ((v10 & 1) != 0)
    {
      sub_100037004(0x6769666E6F636552, 0xEF6E6F6974617275);
      return;
    }
  }
  else if (!a2)
  {
    goto LABEL_14;
  }
  swift_getErrorValue(a2, v87, v86);
  sub_100027348(v86[1], v86[2]);
  if ((v11 & 1) != 0)
  {
    v12 = *(void **)&v3[OBJC_IVAR___DisplayMainViewController_presentedAlert];
    if (v12 && *((_BYTE *)v12 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_reason) == 1)
    {
      v13 = v12;
      sub_10003748C();
      sub_10001D608((uint64_t)a2);
      sub_100030B38();
      sub_100037004(0x676E697461647055, 0xEE007472656C4120);

      return;
    }
    sub_100037004(0xD000000000000010, 0x8000000100057350);
    v17 = sub_100032188();
    sub_1000299B4((uint64_t)v17, v18, 0);
    v19 = (void *)sub_100037494();
    v20 = objc_msgSend(v19, "domain");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v25 = sub_1000190FC(v24, "code");
    v26 = SidecarErrorDomain;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(SidecarErrorDomain);
    v29 = v27 == v21 && v28 == v23;
    v82 = v19;
    if (v29)
    {
      sub_100037110();
    }
    else
    {
      v30 = v28;
      v31 = sub_1000371E8(v27, v28);
      swift_bridgeObjectRelease(v30);
      if ((v31 & 1) == 0)
        goto LABEL_29;
    }
    if (v25 == (id)-404)
    {
      sub_100037110();
      goto LABEL_28;
    }
LABEL_29:
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    if (v49 == v21 && v50 == v23)
    {
      swift_bridgeObjectRelease_n(v23, 2);
      if (v25 != (id)-204)
        goto LABEL_37;
    }
    else
    {
      v52 = v50;
      v53 = sub_1000371E8(v49, v50);
      sub_100037110();
      swift_bridgeObjectRelease(v52);
      if ((v53 & 1) == 0 || v25 != (id)-204)
      {
LABEL_37:
        if (v8 == 8)
          v39 = v9;
        else
          v39 = 0;
        v54 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        if ((_DWORD)v39 == 1)
        {
          v55 = sub_100036EAC();
          v56.super.isa = v54;
          sub_100036F54(v55, v57, v58, v59, v56);
          sub_100037420();
          v61 = sub_10001E668(v60, "mainBundle");
          sub_100037098();
          sub_100037078();
          v69 = 0xD000000000000016;
        }
        else
        {
          sub_100037098();
          v70.super.isa = v54;
          sub_1000373AC(0x6E6F432074736F4CLL, 0xEF6E6F697463656ELL, 0, 0, v70, v71, v72, v73);
          sub_100037420();
          v61 = sub_10001E668(v74, "mainBundle");
          sub_100037098();
          sub_100037078();
        }
        v75 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v62, *(Swift::String_optional *)&v64, v66, *(Swift::String *)&v67, *(Swift::String *)(&v81 - 1));
        countAndFlagsBits = v75._countAndFlagsBits;
        object = v75._object;

        sub_10003748C();
        goto LABEL_44;
      }
    }
LABEL_28:
    v32 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v33 = sub_100036EAC();
    v34.super.isa = v32;
    v23 = sub_100036F54(v33, v35, v36, v37, v34);
    v39 = v38;

    v41 = (objc_class *)sub_1000190FC(v40, "mainBundle");
    sub_100037098();
    v42.super.isa = v41;
    countAndFlagsBits = sub_1000373AC(0xD000000000000010, 0x8000000100057460, 0, 0, v42, v43, v44, v45);
    object = v47;

    a2 = 0;
LABEL_44:
    sub_1000309C4(v23, v39, countAndFlagsBits, (uint64_t)object, 1, (uint64_t)a2);
    sub_1000190F4();
    sub_1000372FC();
    v76 = OBJC_IVAR___DisplayMainViewController_displayViewController;
    v77 = *(char **)&v3[OBJC_IVAR___DisplayMainViewController_displayViewController];
    v78 = *(_QWORD *)&v77[OBJC_IVAR___DisplayViewController_session];
    if (v78)
    {
      v79 = v78 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate;
      sub_10000F664(v78 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_delegate, (uint64_t)v85, 1);
      *(_QWORD *)(v79 + 8) = 0;
      swift_unknownObjectWeakAssign(v79, 0);
      v77 = *(char **)&v3[v76];
    }
    v80 = v77;
    sub_100022A44(0);
    swift_errorRelease(a2);

    return;
  }
LABEL_14:
  sub_100037004(0x65766F6365726E55, 0xED0000656C626172);
  v15 = sub_10002761C(v14, "request");
  if (v15)
  {
    v16 = v15;
    if (a2)
      a2 = (void *)sub_100037494();
    sub_100037448(v16, "setError:");

  }
  objc_msgSend(v3, "completeRequest:", 0);
}

#error "10002C408: call analysis failed (funcsize=21)"

uint64_t sub_10002C470(uint64_t a1)
{
  return sub_100036FD0(a1);
}

uint64_t sub_10002C47C(uint64_t result)
{
  char *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(*(_QWORD *)&v1[OBJC_IVAR___DisplayMainViewController_displayViewController]
                 + OBJC_IVAR___DisplayViewController_sessionConfiguring) & 1) == 0)
  {
    v2 = v1;
    v3 = *(_QWORD *)&v1[OBJC_IVAR___DisplayMainViewController__viewUpdateTimer];
    if (v3)
    {
      sub_1000373C8();
      sub_1000270C0();
      OS_dispatch_source_timer.reset(_:)(0.01);
      return swift_unknownObjectRelease(v3);
    }
    else
    {
      sub_100018C20(result, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
      v4 = (void *)sub_100027230();
      *(_QWORD *)(sub_100018C8C((uint64_t)&unk_10006B840, 24) + 16) = v2;
      v2;
      OS_dispatch_queue.once(_:closure:)();
      v6 = v5;

      sub_1000372DC();
      return sub_10002C470(v6);
    }
  }
  return result;
}

id sub_10002C56C(uint64_t a1)
{
  return sub_10002CA14(0, *(double *)(a1 + OBJC_IVAR___DisplayMainViewController_configurationAnimationDuration));
}

void sub_10002C59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];

  v2 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  sub_100037068();
  __chkstk_darwin(v3, v4);
  sub_100018F28();
  sub_100008414(&qword_1000786A0);
  sub_100037068();
  __chkstk_darwin(v5, v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9, v10);
  v12 = &v14[-v11];
  v13 = v0 + OBJC_IVAR___DisplayMainViewController_usageSummary;
  sub_10000F664(v0 + OBJC_IVAR___DisplayMainViewController_usageSummary, (uint64_t)v15, 0);
  sub_100036A9C(v13, (uint64_t)v12, &qword_1000786A0);
  if (sub_100018930((uint64_t)v12, 1, v2))
  {
    sub_10001893C((uint64_t)v12, &qword_1000786A0);
  }
  else
  {
    sub_1000369D0((uint64_t)v12, v1);
    sub_10001893C((uint64_t)v12, &qword_1000786A0);
    sub_10002C6EC();
    sub_100036A14(v1);
  }
  sub_100018974((uint64_t)v8, 1, 1, v2);
  sub_10000F664(v13, (uint64_t)v14, 33);
  sub_100036988((uint64_t)v8, v13);
  swift_endAccess(v14);
  sub_1000371A4();
}

uint64_t sub_10002C6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[8];
  uint64_t v10;

  mach_absolute_time();
  v1 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  HostTime.nanoseconds.getter();
  v2 = v0 + *(int *)(v1 + 28);
  v3 = *(_QWORD *)(v2 + 128);
  v4 = *(_OWORD *)(v2 + 16);
  v9[0] = *(_OWORD *)v2;
  v9[1] = v4;
  v5 = *(_OWORD *)(v2 + 48);
  v9[2] = *(_OWORD *)(v2 + 32);
  v9[3] = v5;
  v6 = *(_OWORD *)(v2 + 80);
  v9[4] = *(_OWORD *)(v2 + 64);
  v9[5] = v6;
  v7 = *(_OWORD *)(v2 + 112);
  v9[6] = *(_OWORD *)(v2 + 96);
  v9[7] = v7;
  v10 = v3;
  return sub_1000298D8((uint64_t)v9, (uint64_t (*)(_OWORD *, uint64_t *))sub_100036A50);
}

void sub_10002C7A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  uint64_t v25;

  sub_100018CC8();
  v3 = v2;
  sub_100008414(&qword_1000786A0);
  sub_100037068();
  __chkstk_darwin(v4, v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100008414((uint64_t *)&unk_100078320);
  sub_100037068();
  __chkstk_darwin(v8, v9);
  sub_100018F28();
  v10 = sub_100018F50();
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15, v16);
  v18 = &v24[-v17];
  sub_10002C59C();
  v19 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___DisplayMainViewController_displayViewController)
                  + OBJC_IVAR___DisplayViewController_session);
  if (!v19)
  {
    sub_100037434(v1, 1);
    goto LABEL_5;
  }
  v20 = v19 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid;
  sub_10000F664(v19 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, (uint64_t)&v25, 0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v21(v1, v20, v10);
  sub_100037434(v1, 0);
  if (sub_100018930(v1, 1, v10) == 1)
  {
LABEL_5:
    sub_10001893C(v1, (uint64_t *)&unk_100078320);
    goto LABEL_6;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 32))(v18, v1, v10);
  v21((uint64_t)v14, (uint64_t)v18, v10);
  sub_10002C994((uint64_t)v14, v3, (uint64_t)v7);
  v22 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  sub_100018974((uint64_t)v7, 0, 1, v22);
  v23 = v0 + OBJC_IVAR___DisplayMainViewController_usageSummary;
  sub_10000F664(v23, (uint64_t)v24, 33);
  sub_100036988((uint64_t)v7, v23);
  swift_endAccess(v24);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v18, v10);
LABEL_6:
  sub_100018BBC();
}

void sub_10002C994(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (int *)type metadata accessor for DisplayMainViewController.UsageSummary(0);
  v7 = v6[6];
  *(_QWORD *)(a3 + v7) = mach_absolute_time();
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a3, a1, v8);
  *(_QWORD *)(a3 + v6[5]) = a2;
  bzero((void *)(a3 + v6[7]), 0x88uLL);
}

id sub_10002CA14(char a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  id result;
  void *v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  void *v47;
  void *v48;
  id v49;
  double v50;
  double v51;
  double v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  id v59;
  char *v60;
  void *v61;
  id v62;
  uint64_t v63;
  char v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  id v74;
  id v75;
  double Width;
  id v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  char *v82;
  id v83;
  uint64_t v84;
  id v85;
  double v86;
  uint64_t v87;
  id v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  id v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  char v105;
  void *v106;
  id v107;
  id v108;
  id v109;
  void *v110;
  void *v111;
  void *v112;
  id v113;
  id v114;
  id v115;
  void *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  id v124;
  char *v125;
  uint64_t v126;
  id v127;
  void *v128;
  void *v129;
  id v130;
  char v131;
  CATransform3D v132;
  CATransform3D v133;
  char v134[24];
  _QWORD v135[4];
  char v136;
  CGRect v137;

  v3 = v2;
  if (*(_QWORD *)&v2[OBJC_IVAR___DisplayMainViewController__viewUpdateTimer])
  {
    sub_1000373C8();
    sub_1000270C0();
    OS_dispatch_source.cancel()();
    sub_100018C94();
  }
  v6 = sub_100037260();
  v7 = sub_10002C470(v6);
  result = sub_10002761C(v7, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_66;
  }
  v9 = result;
  objc_msgSend(result, "frame");
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  v18 = sub_100018C8C((uint64_t)&unk_10006B6D8, 24);
  *(_QWORD *)(v18 + 16) = 0;
  v19 = sub_100018C8C((uint64_t)&unk_10006B6D8, 24);
  *(_QWORD *)(v19 + 16) = 0;
  sub_100030804();
  v20 = OBJC_IVAR___DisplayMainViewController_sidebarController;
  v21 = *(void **)&v3[OBJC_IVAR___DisplayMainViewController_sidebarController];
  if (v21 && (a1 & 1) == 0)
  {
    *(_QWORD *)(v18 + 16) = v21;
    v22 = v21;
    v23 = sub_100037260();
    sub_100029A44(v23);

  }
  v24 = OBJC_IVAR___DisplayMainViewController_qosViewController;
  v25 = *(void **)&v3[OBJC_IVAR___DisplayMainViewController_qosViewController];
  if (v25)
  {
    result = objc_msgSend(v25, "view");
    if (result)
    {
      v26 = result;
      objc_msgSend(result, "removeFromSuperview");

      goto LABEL_10;
    }
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
LABEL_10:
  v27 = (uint64_t *)&v3[OBJC_IVAR___DisplayMainViewController_displaySettings];
  sub_10000F664((uint64_t)&v3[OBJC_IVAR___DisplayMainViewController_displaySettings], (uint64_t)v134, 0);
  v28 = sub_100019104();
  sub_1000295C4(v28);
  v30 = v29;
  sub_100005DA4();
  if ((v30 & 1) == 0)
  {
    v47 = *(void **)&v3[OBJC_IVAR___DisplayMainViewController_displayLeftConstraint];
    if (v47)
      sub_100037318(v47, "setConstant:");
    v48 = *(void **)&v3[OBJC_IVAR___DisplayMainViewController_displayRightConstraint];
    if (v48)
      sub_100037318(v48, "setConstant:");
    sub_1000372A4(0);
    sub_10002C7A0();
    goto LABEL_64;
  }
  v31 = *v27;
  v32 = sub_100019104();
  sub_100029518(v32);
  if ((v33 & 1) == 0
    || (v34 = sub_100019104(), sub_10002956C(v34), v36 = v35, sub_100005DA4(), (v36 & 1) != 0)
    || sub_100027010())
  {
    sub_10000A8B4(0xFu, v31);
    v38 = v37;
  }
  else
  {
    v38 = 78.0;
  }
  sub_100005DA4();
  v39 = sub_100019104();
  v131 = sub_10002961C(v39);
  sub_100005DA4();
  v40 = sub_100019104();
  sub_100029518(v40);
  v42 = v41;
  sub_100005DA4();
  if ((v42 & 1) != 0)
  {
    v43 = sub_1000373EC();
    sub_10002956C(v43);
    v45 = v44;
    swift_bridgeObjectRelease(v42);
    v46 = v45 ^ 1;
  }
  else
  {
    v46 = 0;
    v45 = 0;
  }
  sub_1000373EC();
  sub_10000A8B4(0x11u, v42);
  v51 = v50;
  swift_bridgeObjectRelease(v42);
  if ((v45 & 1) != 0)
    v52 = 64.0;
  else
    v52 = v51;
  if ((v46 & 1) != 0)
  {
    if (sub_100027010())
      v51 = 64.0;
    else
      v51 = 78.0;
  }
  if ((a1 & 1) != 0)
  {
    v53 = *(char **)&v3[v20];
    if (v53)
    {
      *(double *)&v53[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topMargin] = v52;
      v54 = v53;
      sub_10001937C();

      v55 = *(char **)&v3[v20];
      if (v55)
      {
        *(double *)&v55[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_bottomMargin] = v51;
        v56 = v55;
        sub_1000193B4();

        v57 = *(char **)&v3[v20];
        if (v57)
        {
          *(double *)&v57[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_barWidth] = v38;
          v58 = v57;
          sub_100019368();

        }
      }
    }
    if ((v131 & 1) != 0)
    {
      v49 = *(id *)&v3[OBJC_IVAR___DisplayMainViewController_displayRightConstraint];
      if (v49)
        v49 = objc_msgSend(v49, "setConstant:", -v38);
    }
    else
    {
      v49 = objc_msgSend(*(id *)&v3[OBJC_IVAR___DisplayMainViewController_displayLeftConstraint], "setConstant:", v38);
    }
    goto LABEL_64;
  }
  v59 = objc_allocWithZone((Class)_s14descr10006AE51V14ViewControllerCMa());
  v60 = (char *)sub_100019410(v38, v52, v51);
  result = sub_1000373B8(v60);
  if (!result)
    goto LABEL_67;
  v61 = result;
  result = sub_10002761C((uint64_t)result, "view");
  if (!result)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v62 = result;
  sub_100037178((uint64_t)&v60[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_delegate], (uint64_t)&off_10006B5E8);
  sub_10001E660(v61, "setTranslatesAutoresizingMaskIntoConstraints:");
  v63 = sub_100019104();
  v64 = sub_100029698(v63);
  sub_100005DA4();
  v128 = v62;
  if ((v64 & 1) == 0 || !sub_100036764())
  {
    sub_1000372A4(0);
    goto LABEL_51;
  }
  v65 = *(void **)&v3[v24];
  if (v65)
  {
    v66 = v65;
    result = sub_1000373B8(v66);
    if (result)
    {
      v67 = result;
      objc_msgSend(*(id *)&v60[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topStack], "addArrangedSubview:", result);

LABEL_50:
      v72 = *(id *)&v3[OBJC_IVAR___DisplayMainViewController_displayViewController];
      v73 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
      sub_10003736C(v73);

      v68 = sub_1000372FC();
LABEL_51:
      v74 = sub_10001BA7C(v68, "heightAnchor");
      v75 = objc_msgSend(v74, "constraintEqualToConstant:", sub_100037118());

      v126 = v19;
      if ((v131 & 1) != 0)
      {
        v137.origin.x = v11;
        v137.origin.y = v13;
        v137.size.width = v15;
        v137.size.height = v17;
        Width = CGRectGetWidth(v137);
      }
      else
      {
        Width = -v38;
      }
      objc_msgSend(v61, "setFrame:", Width, 0.0, v38, sub_100037118());
      v77 = sub_10001BAAC(v75, "setActive:");
      sub_100018C20((uint64_t)v77, &qword_100078688, CATransaction_ptr);
      v79 = v78;
      v80 = v61;
      v81 = v75;
      v82 = v3;
      v125 = v60;
      v83 = v128;
      v130 = v81;
      sub_10002D788(v79, v80, v81, v82, v125, v83);
      v85 = sub_1000190EC(v84, "layer");
      LODWORD(v86) = 0;
      objc_msgSend(v85, "setOpacity:", v86);

      v88 = sub_1000190EC(v87, "layer");
      v89 = *(_OWORD *)&CATransform3DIdentity.m13;
      *(_OWORD *)&v133.m11 = *(_OWORD *)&CATransform3DIdentity.m11;
      *(_OWORD *)&v133.m13 = v89;
      v90 = *(_OWORD *)&CATransform3DIdentity.m23;
      *(_OWORD *)&v133.m21 = *(_OWORD *)&CATransform3DIdentity.m21;
      *(_OWORD *)&v133.m23 = v90;
      v91 = *(_OWORD *)&CATransform3DIdentity.m33;
      *(_OWORD *)&v133.m31 = *(_OWORD *)&CATransform3DIdentity.m31;
      *(_OWORD *)&v133.m33 = v91;
      v92 = *(_OWORD *)&CATransform3DIdentity.m43;
      *(_OWORD *)&v133.m41 = *(_OWORD *)&CATransform3DIdentity.m41;
      *(_OWORD *)&v133.m43 = v92;
      CATransform3DScale(&v132, &v133, 1.0, 0.95, 1.0);
      v133 = v132;
      objc_msgSend(v88, "setTransform:", &v133);

      v94 = sub_1000190EC(v93, "topAnchor");
      v95 = sub_10001BA7C((uint64_t)v94, "topAnchor");
      v96 = sub_1000372BC();

      sub_10001BAAC(v96, "setActive:");
      v127 = v80;
      v98 = sub_1000190EC(v97, "bottomAnchor");
      v129 = v83;
      v99 = sub_10001BA7C((uint64_t)v98, "bottomAnchor");
      v100 = sub_1000372BC();

      sub_10001BAAC(v100, "setActive:");
      v101 = *(_QWORD *)&v125[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonsByIdentifer];
      *(_QWORD *)&v133.m11 = 1;
      memset(&v133.m12, 0, 24);
      LOBYTE(v133.m21) = 2;
      sub_100010180((uint64_t)&v133, v101);
      if (v102)
      {
        v103 = (void *)v102;
        v104 = *v27;
        swift_bridgeObjectRetain(*v27);
        v105 = sub_10000A7BC(18, v104);
        sub_1000372FC();
        objc_msgSend(v103, "setEnabled:", v105 & 1);

      }
      v19 = v126;
      if ((v131 & 1) != 0)
      {
        v106 = v127;
        v107 = sub_10001BA7C(v102, "leftAnchor");
        v108 = objc_msgSend(*(id *)&v82[OBJC_IVAR___DisplayMainViewController_displayContainer], "rightAnchor");
        v109 = sub_10001E698(v107, "constraintEqualToAnchor:");

        sub_10001BAAC(v109, "setActive:");
        v110 = *(void **)&v82[OBJC_IVAR___DisplayMainViewController_displayRightConstraint];
        v111 = v130;
        if (v110)
          objc_msgSend(v110, "setConstant:", -v38);
        v112 = *(void **)&v82[OBJC_IVAR___DisplayMainViewController_displayLeftConstraint];
        if (!v112)
          goto LABEL_63;
      }
      else
      {
        v106 = v127;
        v113 = sub_10001BA7C(v102, "rightAnchor");
        v114 = objc_msgSend(*(id *)&v82[OBJC_IVAR___DisplayMainViewController_displayContainer], "leftAnchor");
        v115 = sub_10001E698(v113, "constraintEqualToAnchor:");

        sub_10001BAAC(v115, "setActive:");
        objc_msgSend(*(id *)&v82[OBJC_IVAR___DisplayMainViewController_displayLeftConstraint], "setConstant:", v38);
        v112 = *(void **)&v82[OBJC_IVAR___DisplayMainViewController_displayRightConstraint];
        v111 = v130;
        if (!v112)
        {
LABEL_63:
          *(_QWORD *)&v132.m11 = 2;
          memset(&v132.m12, 0, 24);
          LOBYTE(v132.m21) = 2;
          sub_10001A7BC((uint64_t)&v132, v82[OBJC_IVAR___DisplayMainViewController_dockShown]);
          v135[0] = 3;
          memset(&v135[1], 0, 24);
          v136 = 2;
          sub_10001A7BC((uint64_t)v135, v82[OBJC_IVAR___DisplayMainViewController_menuOverrideEnabled]);
          v116 = *(void **)(v126 + 16);
          *(_QWORD *)(v126 + 16) = v125;
          v117 = v125;

          v118 = v117;
          sub_100029A44((uint64_t)v125);
          sub_10002C7A0();

LABEL_64:
          sub_100018C20((uint64_t)v49, &qword_100078680, UIView_ptr);
          v119 = sub_100018C8C((uint64_t)&unk_10006B700, 48);
          *(_QWORD *)(v119 + 16) = v3;
          *(_QWORD *)(v119 + 24) = v18;
          *(_QWORD *)(v119 + 32) = v19;
          *(double *)(v119 + 40) = a2;
          v120 = sub_100018C8C((uint64_t)&unk_10006B728, 32);
          *(_QWORD *)(v120 + 16) = v18;
          *(_QWORD *)(v120 + 24) = v3;
          v121 = v3;
          swift_retain_n(v18, 2);
          v122 = v121;
          swift_retain(v19);
          sub_10003034C((uint64_t)sub_1000367BC, v119, (uint64_t)sub_1000367D0, v120, a2);
          swift_release(v119);
          v123 = sub_10001BB08();
          v124 = sub_10002761C(v123, "setNeedsUpdateOfScreenEdgesDeferringSystemGestures");
          sub_10002761C((uint64_t)v124, "setNeedsUpdateOfHomeIndicatorAutoHidden");
          sub_1000372DC();
          return (id)swift_release(v19);
        }
      }
      sub_100037318(v112, "setConstant:");
      goto LABEL_63;
    }
    goto LABEL_69;
  }
  v69 = objc_allocWithZone((Class)type metadata accessor for QOSControllerViewController());
  v70 = sub_100037460();
  result = sub_1000373B8(v70);
  if (result)
  {
    v71 = result;
    objc_msgSend(*(id *)&v60[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topStack], "addArrangedSubview:", result);

    v67 = v70;
    sub_1000372A4((uint64_t)v70);
    goto LABEL_50;
  }
LABEL_70:
  __break(1u);
  return result;
}

void sub_10002D540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v6;
  void *v7;
  int v8;
  void *v9;
  const char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR___DisplayMainViewController_displayViewController)
                 + OBJC_IVAR___DisplayViewController_session);
  if (!v3
    || (v4 = v2,
        (v6 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_request), "session")) == 0))
  {
    sub_100018F88();
    return;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "dataLink");

  v9 = *(void **)(v4 + OBJC_IVAR___DisplayMainViewController_qosViewController);
  if (v8)
  {
    if (v9)
    {
      v10 = sub_1000367D8(v8);
      v11 = v9;
      v12 = String.init(utf8String:)(v10);
      if (!v13)
      {
        v12 = 63;
        v13 = 0xE100000000000000;
      }
      goto LABEL_11;
    }
  }
  else if (v9)
  {
    v11 = v9;
    v12 = 63;
    v13 = 0xE100000000000000;
LABEL_11:
    sub_10000F6FC(v12, v13);

  }
  v14 = *(void **)(v4 + OBJC_IVAR___DisplayMainViewController_qosViewController);
  if (v14)
  {
    v15 = v14;
    sub_10000FA64(a2);

  }
  sub_100030B38();
}

id sub_10002D65C(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  objc_msgSend(a1, "layoutBelowIfNeeded");
  objc_msgSend(a2, "setActive:", 0);
  objc_msgSend(a3, "addChildViewController:", a4);
  objc_msgSend(a4, "didMoveToParentViewController:", a3);
  return objc_msgSend(a5, "addSubview:", a1);
}

void sub_10002D6F0(uint64_t a1, id *a2, void *a3, void *a4, void *a5)
{
  void *v8;

  v8 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v8, "begin");
  objc_msgSend(v8, "setDisableActions:", 1);
  sub_100032060(a2, a3, a4, a5);
  objc_msgSend(v8, "commit");

}

void sub_10002D788(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  void *v10;

  v10 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v10, "begin");
  objc_msgSend(v10, "setDisableActions:", 1);
  sub_10002D65C(a2, a3, a4, a5, a6);
  objc_msgSend(v10, "commit");

}

void sub_10002D838(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id *v18;
  id v19;
  void *v20;
  id v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  void (*v28)(CATransform3D *, _QWORD);
  void (*v29)(CATransform3D *, _QWORD);
  id v30;
  void *v31;
  CATransform3D v32;
  CATransform3D v33;
  _BYTE v34[24];

  v8 = a2 + 16;
  sub_10002DA7C();
  swift_beginAccess(v8, v34, 0, 0);
  v9 = *(void **)(a2 + 16);
  if (v9)
  {
    v10 = objc_msgSend(v9, "view");
    if (!v10)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    v11 = v10;
    v12 = objc_msgSend(v10, "layer");

    if (v12)
    {
      LODWORD(v13) = 0;
      objc_msgSend(v12, "setOpacity:", v13);
      v14 = *(_OWORD *)&CATransform3DIdentity.m13;
      *(_OWORD *)&v33.m11 = *(_OWORD *)&CATransform3DIdentity.m11;
      *(_OWORD *)&v33.m13 = v14;
      v15 = *(_OWORD *)&CATransform3DIdentity.m23;
      *(_OWORD *)&v33.m21 = *(_OWORD *)&CATransform3DIdentity.m21;
      *(_OWORD *)&v33.m23 = v15;
      v16 = *(_OWORD *)&CATransform3DIdentity.m33;
      *(_OWORD *)&v33.m31 = *(_OWORD *)&CATransform3DIdentity.m31;
      *(_OWORD *)&v33.m33 = v16;
      v17 = *(_OWORD *)&CATransform3DIdentity.m43;
      *(_OWORD *)&v33.m41 = *(_OWORD *)&CATransform3DIdentity.m41;
      *(_OWORD *)&v33.m43 = v17;
      CATransform3DScale(&v32, &v33, 1.0, 0.95, 1.0);
      v33 = v32;
      objc_msgSend(v12, "setTransform:", &v33);

    }
  }
  v18 = (id *)(a3 + 16);
  swift_beginAccess(v18, &v32, 0, 0);
  if (!*v18)
  {
LABEL_9:
    sub_100029A08((uint64_t)&v33);
    v29 = v28;
    if (*v27)
      sub_10002EE30(1, (uint64_t)v27, a4);
    v29(&v33, 0);
    v30 = objc_msgSend(a1, "view");
    if (v30)
    {
      v31 = v30;
      objc_msgSend(v30, "layoutIfNeeded");

      return;
    }
    __break(1u);
    goto LABEL_14;
  }
  v19 = objc_msgSend(*v18, "view");
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, "layer");

    if (v21)
    {
      LODWORD(v22) = 1.0;
      objc_msgSend(v21, "setOpacity:", v22);
      v23 = *(_OWORD *)&CATransform3DIdentity.m13;
      *(_OWORD *)&v33.m11 = *(_OWORD *)&CATransform3DIdentity.m11;
      *(_OWORD *)&v33.m13 = v23;
      v24 = *(_OWORD *)&CATransform3DIdentity.m23;
      *(_OWORD *)&v33.m21 = *(_OWORD *)&CATransform3DIdentity.m21;
      *(_OWORD *)&v33.m23 = v24;
      v25 = *(_OWORD *)&CATransform3DIdentity.m33;
      *(_OWORD *)&v33.m31 = *(_OWORD *)&CATransform3DIdentity.m31;
      *(_OWORD *)&v33.m33 = v25;
      v26 = *(_OWORD *)&CATransform3DIdentity.m43;
      *(_OWORD *)&v33.m41 = *(_OWORD *)&CATransform3DIdentity.m41;
      *(_OWORD *)&v33.m43 = v26;
      objc_msgSend(v21, "setTransform:", &v33);

    }
    goto LABEL_9;
  }
LABEL_15:
  __break(1u);
}

void sub_10002DA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  __objc2_meth_list **p_base_meths;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  double v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t *v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  id v51;
  double v52;
  _BOOL4 v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  id v73;
  double v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t *v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  id v94;
  double v95;
  _BOOL4 v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _BYTE *v104;
  int v105;
  char v106[24];
  uint64_t v107;
  uint64_t v108[3];
  uint64_t v109[3];
  uint64_t v110[3];
  _BYTE v111[24];
  char v112[32];

  v1 = v0;
  if (!sub_100036880())
    return;
  if (*(_QWORD *)(v0 + OBJC_IVAR___DisplayMainViewController_sidebarController))
  {
    v2 = (uint64_t *)(v0 + OBJC_IVAR___DisplayMainViewController_displaySettings);
    swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_displaySettings, v106, 0, 0);
    v3 = *v2;
    v4 = swift_bridgeObjectRetain(v3);
    v5 = sub_10002961C(v4);
    swift_bridgeObjectRelease(v3);
    v105 = v5;
    v6 = v5 ^ 1;
  }
  else
  {
    v105 = 0;
    v6 = 0;
  }
  v7 = (_QWORD *)(v1 + OBJC_IVAR___DisplayMainViewController_displaySettings);
  swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_displaySettings, v112, 0, 0);
  v8 = *v7;
  v9 = swift_bridgeObjectRetain(*v7);
  sub_100029518(v9);
  v11 = v10;
  swift_bridgeObjectRelease(v8);
  v12 = &unk_100078000;
  p_base_meths = &ResourceBundleClass.base_meths;
  if ((v11 & 1) != 0)
  {
    v14 = *v7;
    v15 = swift_bridgeObjectRetain(*v7);
    sub_10002956C(v15);
    v17 = v16;
    swift_bridgeObjectRelease(v14);
    v18 = v17 ^ 1;
    if (((v6 | v17) & 1) != 0)
    {
      v19 = v6 ^ 1 | v17;
LABEL_9:
      v20 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
      swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v111, 0, 0);
      sub_1000101B8(0, *v20);
      if (v21)
      {
        v22 = v21;
        objc_msgSend(v21, "setHidden:", 0);
        v22[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 0;
        v23 = sub_100008414((uint64_t *)&unk_100078650);
        v24 = swift_allocObject(v23, 48, 7);
        *(_OWORD *)(v24 + 16) = xmmword_100059390;
        v25 = objc_msgSend(v22, "leftAnchor");
        v26 = OBJC_IVAR___DisplayMainViewController_displayContainer;
        v27 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                    + OBJC_IVAR___DisplayMainViewController_displayContainer), "leftAnchor"));
        v28 = objc_msgSend(v25, "constraintEqualToAnchor:", v27);

        *(_QWORD *)(v24 + 32) = v28;
        v29 = objc_msgSend(v22, "topAnchor");
        v30 = objc_msgSend(*(id *)(v1 + v26), "topAnchor");
        v31 = 64.0;
        if ((v19 & 1) == 0)
          v31 = 0.0;
        v32 = objc_msgSend(v29, "constraintEqualToAnchor:constant:", v30, v31);

        *(_QWORD *)(v24 + 40) = v32;
        v110[0] = v24;
        specialized Array._endMutation()(v33, v34, v35);
        v36 = v110[0];
        sub_100039E78(v110[0]);

        swift_bridgeObjectRelease(v36);
        if (((v6 | v18) & 1) != 0)
        {
          v37 = v6 ^ 1 | v18;
          p_base_meths = (__objc2_meth_list **)(&ResourceBundleClass + 32);
          v12 = (_QWORD *)&unk_100078000;
          goto LABEL_17;
        }
        p_base_meths = &ResourceBundleClass.base_meths;
        v12 = &unk_100078000;
        goto LABEL_24;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    if ((v6 & 1) != 0)
      goto LABEL_9;
  }
  v38 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
  swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v111, 0, 0);
  sub_1000101B8(0, *v38);
  if (!v39)
    goto LABEL_43;
  v40 = (_BYTE *)v39;
  sub_100033558(v39);
  v40[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 1;

  v19 = 0;
  if (((v6 | v18) & 1) != 0)
  {
    v37 = v6 ^ 1 | v18;
LABEL_17:
    v41 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
    swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v110, 0, 0);
    sub_1000101B8(2, *v41);
    if (v42)
    {
      v43 = v42;
      objc_msgSend(v42, "setHidden:", 0);
      v43[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 0;
      v44 = sub_100008414((uint64_t *)&unk_100078650);
      v45 = swift_allocObject(v44, 48, 7);
      *(_OWORD *)(v45 + 16) = xmmword_100059390;
      v46 = objc_msgSend(v43, "leftAnchor");
      v47 = v12[123];
      v48 = objc_msgSend(*(id *)(v1 + v47), "leftAnchor");
      v49 = objc_msgSend(v46, (SEL)p_base_meths[481], v48);

      *(_QWORD *)(v45 + 32) = v49;
      v50 = objc_msgSend(v43, "bottomAnchor");
      v51 = objc_msgSend(*(id *)(v1 + v47), "bottomAnchor");
      v52 = 0.0;
      if ((v37 & 1) != 0)
      {
        v53 = sub_100027010();
        v52 = -78.0;
        if (v53)
          v52 = -64.0;
      }
      v54 = objc_msgSend(v50, "constraintEqualToAnchor:constant:", v51, v52);

      *(_QWORD *)(v45 + 40) = v54;
      v109[0] = v45;
      specialized Array._endMutation()(v55, v56, v57);
      v58 = v109[0];
      sub_100039E78(v109[0]);

      swift_bridgeObjectRelease(v58);
      if (((v105 | v19) & 1) != 0)
      {
        v59 = v105 ^ 1 | v19;
        p_base_meths = (__objc2_meth_list **)(&ResourceBundleClass + 32);
        v12 = (_QWORD *)&unk_100078000;
        goto LABEL_27;
      }
      goto LABEL_32;
    }
    goto LABEL_44;
  }
LABEL_24:
  v60 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
  swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v110, 0, 0);
  sub_1000101B8(2, *v60);
  if (!v61)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v62 = (_BYTE *)v61;
  sub_100033558(v61);
  v62[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 1;

  v37 = 0;
  if (((v105 | v19) & 1) != 0)
  {
    v59 = v105 ^ 1 | v19;
LABEL_27:
    v63 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
    swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v109, 0, 0);
    sub_1000101B8(1, *v63);
    if (v64)
    {
      v65 = v64;
      objc_msgSend(v64, "setHidden:", 0);
      v65[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 0;
      v66 = sub_100008414((uint64_t *)&unk_100078650);
      v67 = swift_allocObject(v66, 48, 7);
      *(_OWORD *)(v67 + 16) = xmmword_100059390;
      v68 = objc_msgSend(v65, "rightAnchor");
      v69 = v12[123];
      v70 = objc_msgSend(*(id *)(v1 + v69), "rightAnchor");
      v71 = objc_msgSend(v68, (SEL)p_base_meths[481], v70);

      *(_QWORD *)(v67 + 32) = v71;
      v72 = objc_msgSend(v65, "topAnchor");
      v73 = objc_msgSend(*(id *)(v1 + v69), "topAnchor");
      v74 = 64.0;
      if ((v59 & 1) == 0)
        v74 = 0.0;
      v75 = objc_msgSend(v72, "constraintEqualToAnchor:constant:", v73, v74);

      *(_QWORD *)(v67 + 40) = v75;
      v108[0] = v67;
      specialized Array._endMutation()(v76, v77, v78);
      v79 = v108[0];
      sub_100039E78(v108[0]);

      swift_bridgeObjectRelease(v79);
      if (((v105 | v37) & 1) != 0)
      {
        v80 = v105 ^ 1 | v37;
        goto LABEL_34;
      }
LABEL_39:
      v102 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
      swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v108, 0, 0);
      sub_1000101B8(3, *v102);
      if (v103)
      {
        v104 = (_BYTE *)v103;
        sub_100033558(v103);
        v104[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 1;

        return;
      }
LABEL_49:
      __break(1u);
      return;
    }
    goto LABEL_46;
  }
LABEL_32:
  v81 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
  swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v109, 0, 0);
  v80 = 1;
  sub_1000101B8(1, *v81);
  if (!v82)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v83 = (_BYTE *)v82;
  sub_100033558(v82);
  v83[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 1;

  if ((v37 & 1) == 0)
    goto LABEL_39;
LABEL_34:
  v84 = (uint64_t *)(v1 + OBJC_IVAR___DisplayMainViewController_corners);
  swift_beginAccess(v1 + OBJC_IVAR___DisplayMainViewController_corners, v108, 0, 0);
  sub_1000101B8(3, *v84);
  if (!v85)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v86 = v85;
  objc_msgSend(v85, "setHidden:", 0);
  v86[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 0;
  v87 = sub_100008414((uint64_t *)&unk_100078650);
  v88 = swift_allocObject(v87, 48, 7);
  *(_OWORD *)(v88 + 16) = xmmword_100059390;
  v89 = objc_msgSend(v86, "rightAnchor");
  v90 = OBJC_IVAR___DisplayMainViewController_displayContainer;
  v91 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR___DisplayMainViewController_displayContainer), "rightAnchor"));
  v92 = objc_msgSend(v89, "constraintEqualToAnchor:", v91);

  *(_QWORD *)(v88 + 32) = v92;
  v93 = objc_msgSend(v86, "bottomAnchor");
  v94 = objc_msgSend(*(id *)(v1 + v90), "bottomAnchor");
  v95 = 0.0;
  if ((v80 & 1) != 0)
  {
    v96 = sub_100027010();
    v95 = -78.0;
    if (v96)
      v95 = -64.0;
  }
  v97 = objc_msgSend(v93, "constraintEqualToAnchor:constant:", v94, v95);

  *(_QWORD *)(v88 + 40) = v97;
  v107 = v88;
  specialized Array._endMutation()(v98, v99, v100);
  v101 = v107;
  sub_100039E78(v107);

  swift_bridgeObjectRelease(v101);
}

void sub_10002E3A8(char a1, uint64_t a2, void *a3, void *a4, double a5)
{
  int v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  Class isa;
  Class v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class v24;
  Class v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  Class v33;
  Class v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class v41;
  NSString v42;
  void *v43;
  Class v44;
  NSString v45;
  void *v46;
  id v47;
  id v48;
  Class v49;
  Class v50;
  id v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  Class v58;
  Class v59;
  id v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  Class v67;
  Class v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Class v74;
  NSString v75;
  Class v76;
  NSString v77;
  Class v78;
  NSString v79;
  id v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  _QWORD *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  id v96;
  _QWORD aBlock[5];
  _QWORD *v98;
  uint64_t v99;

  v10 = a1 & 1;
  v11 = swift_allocObject(&unk_10006B958, 32, 7);
  *(_QWORD *)(v11 + 16) = a3;
  *(_QWORD *)(v11 + 24) = a4;
  if (*(unsigned __int8 *)(a2 + 16) == v10)
  {
    v46 = *(void **)(a2 + 8);
    if (a3)
    {
      v47 = a3;
      v48 = a4;
      sub_100030E78(v47);
    }
    else
    {
      v90 = a4;
    }
    objc_msgSend(v46, "removeFromSuperview");

    swift_release(v11);
  }
  else
  {
    v12 = *(void **)a2;
    v94 = a3;
    v13 = a4;
    v96 = objc_msgSend(v12, "layer");
    v99 = (uint64_t)_swiftEmptyArrayStorage;
    *(_BYTE *)(a2 + 16) = v10;
    sub_100018AA4(0, &qword_100078690, CABasicAnimation_ptr);
    v14 = sub_10003211C(0xD000000000000020, 0x8000000100057240);
    if ((a1 & 1) != 0)
    {
      isa = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v14, "setFromValue:", isa);

      v16 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v14, "setToValue:", v16);

      objc_msgSend(v14, "setDuration:", a5);
      objc_msgSend(v14, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v14, "setRemovedOnCompletion:", 0);
      v17 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized Array._endMutation()(v20, v21, v22);
      v23 = sub_10003211C(0xD000000000000023, 0x8000000100057270);
      v24 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v23, "setFromValue:", v24);

      v25 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v23, "setToValue:", v25);

      objc_msgSend(v23, "setDuration:", a5);
      objc_msgSend(v23, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v23, "setRemovedOnCompletion:", 0);
      v26 = v23;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      v28 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v95 = v26;
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      specialized Array._endMutation()(v29, v30, v31);
      v32 = sub_10003211C(0xD000000000000021, 0x80000001000572A0);
      v33 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v32, "setFromValue:", v33);

      v34 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v32, "setToValue:", v34);

      objc_msgSend(v32, "setDuration:", a5);
      objc_msgSend(v32, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v32, "setRemovedOnCompletion:", 0);
      v35 = v32;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      v37 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v36 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v37 >= v36 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
      v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
      specialized Array._endMutation()(v38, v39, v40);
      v41 = Double._bridgeToObjectiveC()().super.super.isa;
      v42 = String._bridgeToObjectiveC()();
      v43 = v96;
      objc_msgSend(v96, "setValue:forKeyPath:", v41, v42);

      v44 = Double._bridgeToObjectiveC()().super.super.isa;
      v45 = String._bridgeToObjectiveC()();
      objc_msgSend(v96, "setValue:forKeyPath:", v44, v45);

    }
    else
    {
      v49 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v14, "setFromValue:", v49);

      v50 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v14, "setToValue:", v50);

      objc_msgSend(v14, "setDuration:", a5);
      objc_msgSend(v14, "setFillMode:", kCAFillModeForwards);
      v51 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
      v53 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v52 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v53 >= v52 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
      v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v51);
      specialized Array._endMutation()(v54, v55, v56);
      v57 = sub_10003211C(0xD000000000000023, 0x8000000100057270);
      v58 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v57, "setFromValue:", v58);

      v59 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v57, "setToValue:", v59);

      objc_msgSend(v57, "setDuration:", a5);
      objc_msgSend(v57, "setFillMode:", kCAFillModeForwards);
      v60 = v57;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
      v62 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v61 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v62 >= v61 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      v95 = v60;
      v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v60);
      specialized Array._endMutation()(v63, v64, v65);
      v66 = sub_10003211C(0xD000000000000021, 0x80000001000572A0);
      v67 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v66, "setFromValue:", v67);

      v68 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v66, "setToValue:", v68);

      objc_msgSend(v66, "setDuration:", a5);
      objc_msgSend(v66, "setFillMode:", kCAFillModeForwards);
      v35 = v66;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      v70 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v69 = *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v70 >= v69 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
      v71 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v70, v35);
      specialized Array._endMutation()(v71, v72, v73);
      objc_msgSend(*(id *)(a2 + 8), "removeFromSuperview");
      v74 = Double._bridgeToObjectiveC()().super.super.isa;
      v75 = String._bridgeToObjectiveC()();
      v43 = v96;
      objc_msgSend(v96, "setValue:forKeyPath:", v74, v75);

      v76 = Double._bridgeToObjectiveC()().super.super.isa;
      v77 = String._bridgeToObjectiveC()();
      objc_msgSend(v96, "setValue:forKeyPath:", v76, v77);

    }
    v78 = Double._bridgeToObjectiveC()().super.super.isa;
    v79 = String._bridgeToObjectiveC()();
    objc_msgSend(v43, "setValue:forKeyPath:", v78, v79);

    v80 = objc_msgSend(objc_allocWithZone((Class)CAAnimationGroup), "init");
    v81 = *(void **)(a2 + 8);
    v82 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v82, "begin");
    v83 = (_QWORD *)swift_allocObject(&unk_10006B980, 40, 7);
    v83[2] = sub_100036DA8;
    v83[3] = v11;
    v83[4] = v81;
    aBlock[4] = sub_1000368AC;
    v98 = v83;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000C66C;
    aBlock[3] = &unk_10006B998;
    v84 = _Block_copy(aBlock);
    v85 = v98;
    swift_retain(v11);
    v86 = v81;
    swift_release(v85);
    objc_msgSend(v82, "setCompletionBlock:", v84);
    _Block_release(v84);
    objc_msgSend(v82, "setAnimationDuration:", a5);
    v87 = v99;
    if ((unint64_t)v99 >> 62)
    {
      if (v99 < 0)
        v91 = v99;
      else
        v91 = v99 & 0xFFFFFFFFFFFFFF8;
      sub_100018AA4(0, &qword_100078698, CAAnimation_ptr);
      v93 = v92;
      swift_bridgeObjectRetain(v87);
      v89 = _bridgeCocoaArray<A>(_:)(v91, v93);
      swift_bridgeObjectRelease(v87);
    }
    else
    {
      v88 = swift_bridgeObjectRetain(v99);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v88);
      sub_100018AA4(0, &qword_100078698, CAAnimation_ptr);
      v89 = v87;
    }
    swift_bridgeObjectRelease(v87);
    sub_1000368B0(v89, v80);
    objc_msgSend(v80, "setDuration:", a5);
    sub_100036920((uint64_t)v80, 0x70756F7267, 0xE500000000000000, v96);
    objc_msgSend(v82, "commit");
    objc_msgSend(v82, "setCompletionBlock:", 0);

    swift_release(v11);
  }

}

void sub_10002EE30(char a1, uint64_t a2, double a3)
{
  char v3;
  id v7;
  id v8;
  Class isa;
  Class v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Class v18;
  Class v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class v27;
  Class v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  NSString v36;
  Class v37;
  NSString v38;
  Class v39;
  Class v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  Class v48;
  Class v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Class v56;
  Class v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Class v63;
  NSString v64;
  Class v65;
  NSString v66;
  Class v67;
  NSString v68;
  id v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD aBlock[5];
  _QWORD *v83;
  uint64_t v84;

  v3 = a1 & 1;
  if (*(_BYTE *)(a2 + 16) != (a1 & 1))
  {
    v7 = objc_msgSend(*(id *)a2, "layer");
    v84 = (uint64_t)_swiftEmptyArrayStorage;
    *(_BYTE *)(a2 + 16) = v3;
    sub_100018AA4(0, &qword_100078690, CABasicAnimation_ptr);
    v8 = sub_10003211C(0xD000000000000020, 0x8000000100057240);
    if ((a1 & 1) != 0)
    {
      isa = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setFromValue:", isa);

      v10 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setToValue:", v10);

      objc_msgSend(v8, "setDuration:", a3);
      objc_msgSend(v8, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v8, "setRemovedOnCompletion:", 0);
      v11 = v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized Array._endMutation()(v14, v15, v16);
      v17 = sub_10003211C(0xD000000000000023, 0x8000000100057270);
      v18 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v17, "setFromValue:", v18);

      v19 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v17, "setToValue:", v19);

      objc_msgSend(v17, "setDuration:", a3);
      objc_msgSend(v17, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v17, "setRemovedOnCompletion:", 0);
      v20 = v17;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v22 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v21 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v22 >= v21 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized Array._endMutation()(v23, v24, v25);
      v26 = sub_10003211C(0xD000000000000021, 0x80000001000572A0);
      v27 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v26, "setFromValue:", v27);

      v28 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v26, "setToValue:", v28);

      objc_msgSend(v26, "setDuration:", a3);
      objc_msgSend(v26, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v26, "setRemovedOnCompletion:", 0);
      v29 = v26;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v31 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
      specialized Array._endMutation()(v32, v33, v34);
      v35 = Double._bridgeToObjectiveC()().super.super.isa;
      v36 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v35, v36);

      v37 = Double._bridgeToObjectiveC()().super.super.isa;
      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v37, v38);

    }
    else
    {
      v39 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setFromValue:", v39);

      v40 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setToValue:", v40);

      objc_msgSend(v8, "setDuration:", a3);
      objc_msgSend(v8, "setFillMode:", kCAFillModeForwards);
      v41 = v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
      v43 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v42 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v43 >= v42 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
      v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
      specialized Array._endMutation()(v44, v45, v46);
      v47 = sub_10003211C(0xD000000000000023, 0x8000000100057270);
      v48 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v47, "setFromValue:", v48);

      v49 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v47, "setToValue:", v49);

      objc_msgSend(v47, "setDuration:", a3);
      objc_msgSend(v47, "setFillMode:", kCAFillModeForwards);
      v20 = v47;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v51 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v50 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v51 >= v50 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
      v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v20);
      specialized Array._endMutation()(v52, v53, v54);
      v55 = sub_10003211C(0xD000000000000021, 0x80000001000572A0);
      v56 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v55, "setFromValue:", v56);

      v57 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v55, "setToValue:", v57);

      objc_msgSend(v55, "setDuration:", a3);
      objc_msgSend(v55, "setFillMode:", kCAFillModeForwards);
      v29 = v55;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v59 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v58 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v59 >= v58 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
      v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v29);
      specialized Array._endMutation()(v60, v61, v62);
      objc_msgSend(*(id *)(a2 + 8), "removeFromSuperview");
      v63 = Double._bridgeToObjectiveC()().super.super.isa;
      v64 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v63, v64);

      v65 = Double._bridgeToObjectiveC()().super.super.isa;
      v66 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v65, v66);

    }
    v67 = Double._bridgeToObjectiveC()().super.super.isa;
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setValue:forKeyPath:", v67, v68);

    v69 = objc_msgSend(objc_allocWithZone((Class)CAAnimationGroup), "init");
    v70 = *(void **)(a2 + 8);
    v71 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v71, "begin");
    v72 = (_QWORD *)swift_allocObject(&unk_10006B7F0, 40, 7);
    v72[2] = VideoStream.qosMonitorServerDidDie(_:);
    v72[3] = 0;
    v72[4] = v70;
    aBlock[4] = sub_1000368AC;
    v83 = v72;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000C66C;
    aBlock[3] = &unk_10006B808;
    v73 = _Block_copy(aBlock);
    v74 = v83;
    v75 = v70;
    swift_release(v74);
    objc_msgSend(v71, "setCompletionBlock:", v73);
    _Block_release(v73);
    objc_msgSend(v71, "setAnimationDuration:", a3);
    v76 = v84;
    if ((unint64_t)v84 >> 62)
    {
      if (v84 < 0)
        v79 = v84;
      else
        v79 = v84 & 0xFFFFFFFFFFFFFF8;
      sub_100018AA4(0, &qword_100078698, CAAnimation_ptr);
      v81 = v80;
      swift_bridgeObjectRetain(v76);
      v78 = _bridgeCocoaArray<A>(_:)(v79, v81);
      swift_bridgeObjectRelease(v76);
    }
    else
    {
      v77 = swift_bridgeObjectRetain(v84);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v77);
      sub_100018AA4(0, &qword_100078698, CAAnimation_ptr);
      v78 = v76;
    }
    swift_bridgeObjectRelease(v76);
    sub_1000368B0(v78, v69);
    objc_msgSend(v69, "setDuration:", a3);
    sub_100036920((uint64_t)v69, 0x70756F7267, 0xE500000000000000, v7);
    objc_msgSend(v71, "commit");
    objc_msgSend(v71, "setCompletionBlock:", 0);

  }
}

void sub_10002F7F0(char a1, uint64_t a2, double a3)
{
  char v4;
  id v7;
  id v8;
  Class isa;
  Class v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Class v18;
  Class v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  Class v27;
  Class v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  NSString v36;
  Class v37;
  NSString v38;
  Class v39;
  Class v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  Class v48;
  Class v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  Class v56;
  Class v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Class v63;
  NSString v64;
  Class v65;
  NSString v66;
  Class v67;
  NSString v68;
  id v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  _QWORD *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD aBlock[5];
  _QWORD *v83;
  uint64_t v84;

  v4 = a1 & 1;
  if (*(_BYTE *)(a2 + 16) == (a1 & 1))
  {
    objc_msgSend(*(id *)(a2 + 8), "removeFromSuperview");
  }
  else
  {
    v7 = objc_msgSend(*(id *)a2, "layer");
    v84 = (uint64_t)_swiftEmptyArrayStorage;
    *(_BYTE *)(a2 + 16) = v4;
    sub_100018AA4(0, &qword_100078690, CABasicAnimation_ptr);
    v8 = sub_10003211C(0xD000000000000020, 0x8000000100057240);
    if ((a1 & 1) != 0)
    {
      isa = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setFromValue:", isa);

      v10 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setToValue:", v10);

      objc_msgSend(v8, "setDuration:", a3);
      objc_msgSend(v8, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v8, "setRemovedOnCompletion:", 0);
      v11 = v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized Array._endMutation()(v14, v15, v16);
      v17 = sub_10003211C(0xD000000000000023, 0x8000000100057270);
      v18 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v17, "setFromValue:", v18);

      v19 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v17, "setToValue:", v19);

      objc_msgSend(v17, "setDuration:", a3);
      objc_msgSend(v17, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v17, "setRemovedOnCompletion:", 0);
      v20 = v17;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v22 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v21 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v22 >= v21 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized Array._endMutation()(v23, v24, v25);
      v26 = sub_10003211C(0xD000000000000021, 0x80000001000572A0);
      v27 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v26, "setFromValue:", v27);

      v28 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v26, "setToValue:", v28);

      objc_msgSend(v26, "setDuration:", a3);
      objc_msgSend(v26, "setFillMode:", kCAFillModeForwards);
      objc_msgSend(v26, "setRemovedOnCompletion:", 0);
      v29 = v26;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v31 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v30 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v31 >= v30 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v29);
      specialized Array._endMutation()(v32, v33, v34);
      v35 = Double._bridgeToObjectiveC()().super.super.isa;
      v36 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v35, v36);

      v37 = Double._bridgeToObjectiveC()().super.super.isa;
      v38 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v37, v38);

    }
    else
    {
      v39 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setFromValue:", v39);

      v40 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v8, "setToValue:", v40);

      objc_msgSend(v8, "setDuration:", a3);
      objc_msgSend(v8, "setFillMode:", kCAFillModeForwards);
      v41 = v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
      v43 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v42 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v43 >= v42 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
      v44 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v41);
      specialized Array._endMutation()(v44, v45, v46);
      v47 = sub_10003211C(0xD000000000000023, 0x8000000100057270);
      v48 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v47, "setFromValue:", v48);

      v49 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v47, "setToValue:", v49);

      objc_msgSend(v47, "setDuration:", a3);
      objc_msgSend(v47, "setFillMode:", kCAFillModeForwards);
      v20 = v47;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v51 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v50 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v51 >= v50 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
      v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v20);
      specialized Array._endMutation()(v52, v53, v54);
      v55 = sub_10003211C(0xD000000000000021, 0x80000001000572A0);
      v56 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v55, "setFromValue:", v56);

      v57 = Double._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v55, "setToValue:", v57);

      objc_msgSend(v55, "setDuration:", a3);
      objc_msgSend(v55, "setFillMode:", kCAFillModeForwards);
      v29 = v55;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      v59 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v58 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v59 >= v58 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
      v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v59, v29);
      specialized Array._endMutation()(v60, v61, v62);
      objc_msgSend(*(id *)(a2 + 8), "removeFromSuperview");
      v63 = Double._bridgeToObjectiveC()().super.super.isa;
      v64 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v63, v64);

      v65 = Double._bridgeToObjectiveC()().super.super.isa;
      v66 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setValue:forKeyPath:", v65, v66);

    }
    v67 = Double._bridgeToObjectiveC()().super.super.isa;
    v68 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setValue:forKeyPath:", v67, v68);

    v69 = objc_msgSend(objc_allocWithZone((Class)CAAnimationGroup), "init");
    v70 = *(void **)(a2 + 8);
    v71 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v71, "begin");
    v72 = (_QWORD *)swift_allocObject(&unk_10006B908, 40, 7);
    v72[2] = sub_100032A30;
    v72[3] = 0;
    v72[4] = v70;
    aBlock[4] = sub_1000368AC;
    v83 = v72;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000C66C;
    aBlock[3] = &unk_10006B920;
    v73 = _Block_copy(aBlock);
    v74 = v83;
    v75 = v70;
    swift_release(v74);
    objc_msgSend(v71, "setCompletionBlock:", v73);
    _Block_release(v73);
    objc_msgSend(v71, "setAnimationDuration:", a3);
    v76 = v84;
    if ((unint64_t)v84 >> 62)
    {
      if (v84 < 0)
        v79 = v84;
      else
        v79 = v84 & 0xFFFFFFFFFFFFFF8;
      sub_100018AA4(0, &qword_100078698, CAAnimation_ptr);
      v81 = v80;
      swift_bridgeObjectRetain(v76);
      v78 = _bridgeCocoaArray<A>(_:)(v79, v81);
      swift_bridgeObjectRelease(v76);
    }
    else
    {
      v77 = swift_bridgeObjectRetain(v84);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v77);
      sub_100018AA4(0, &qword_100078698, CAAnimation_ptr);
      v78 = v76;
    }
    swift_bridgeObjectRelease(v76);
    sub_1000368B0(v78, v69);
    objc_msgSend(v69, "setDuration:", a3);
    sub_100036920((uint64_t)v69, 0x70756F7267, 0xE500000000000000, v7);
    objc_msgSend(v71, "commit");
    objc_msgSend(v71, "setCompletionBlock:", 0);

  }
}

void sub_1000301E4(uint64_t a1, uint64_t a2)
{
  id *v4;
  void *v5;
  id v6;
  void *v7;
  _UNKNOWN **v8;
  char *v9;
  uint64_t *v10;
  char *i;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  uint64_t v16;
  id v17;
  char v18[24];
  char v19[24];
  char v20[24];

  v4 = (id *)(a1 + 16);
  swift_beginAccess(a1 + 16, v20, 0, 0);
  v5 = *(void **)(a1 + 16);
  if (v5)
    objc_msgSend(v5, "removeFromParentViewController");
  swift_beginAccess(v4, v19, 0, 0);
  if (*v4)
  {
    v6 = objc_msgSend(*v4, "view");
    if (!v6)
    {
      __break(1u);
      return;
    }
    v7 = v6;
    objc_msgSend(v6, "removeFromSuperview");

  }
  if (sub_100036880())
  {
    v8 = sub_100039BC0();
    v9 = (char *)v8[2];
    if (v9)
    {
      v10 = (uint64_t *)(a2 + OBJC_IVAR___DisplayMainViewController_corners);
      swift_beginAccess(v10, v18, 0, 0);
      for (i = 0; i != v9; ++i)
      {
        v12 = *v10;
        if (*(_QWORD *)(*v10 + 16))
        {
          v13 = sub_100035C78(i[(_QWORD)v8 + 32]);
          if ((v14 & 1) != 0)
          {
            v15 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v13);
            v16 = OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding;
            if ((*((_BYTE *)v15 + OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding) & 1) != 0)
            {
              v17 = v15;
              objc_msgSend(v17, "setHidden:", 1);
              *((_BYTE *)v15 + v16) = 0;

            }
          }
        }
      }
    }
    swift_bridgeObjectRelease(v8);
  }
}

void sub_10003034C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  void *ObjCClassFromMetadata;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = v5;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v6);
  v13 = sub_100018C8C((uint64_t)&unk_10006B750, 40);
  *(double *)(v13 + 16) = a5;
  *(_QWORD *)(v13 + 24) = a1;
  *(_QWORD *)(v13 + 32) = a2;
  v14 = sub_100037480((uint64_t)sub_10000C66C, (uint64_t)_NSConcreteStackBlock, 1107296256, v17, v19);
  swift_retain(a2);
  sub_10001BB08();
  v15 = sub_100018C8C((uint64_t)&unk_10006B7A0, 32);
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a4;
  v21 = v15;
  v16 = sub_100037480((uint64_t)sub_1000351C4, (uint64_t)_NSConcreteStackBlock, 1107296256, v18, v20);
  sub_10001D5D0();
  swift_release(v21);
  objc_msgSend(ObjCClassFromMetadata, "animateWithDuration:animations:completion:", v14, v16, a5);
  _Block_release(v16);
  _Block_release(v14);
  sub_100037010();
}

void sub_100030478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  _QWORD *v8;

  v6 = sub_1000190FC(a1, "view");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR___DisplayMainViewController_displayContainer), "frame");
    objc_msgSend(v7, "convertRect:toView:", 0);
    sub_1000370DC();

    v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR___DisplayMainViewController_displayViewController)
                              + OBJC_IVAR___DisplayViewController_hidObserver)
                  + OBJC_IVAR____TtC17ContinuityDisplay16HIDEventObserver_touchBounds);
    *v8 = v2;
    v8[1] = v3;
    v8[2] = v4;
    v8[3] = v5;
  }
  else
  {
    __break(1u);
  }
}

void sub_10003055C()
{
  void *v0;
  char v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  uint64_t v12;
  _QWORD v13[4];

  objc_msgSend(v0, "sidecarServiceUpdateSupportedOrientations");
  sub_10002B43C();
  if (qword_100077578 != -1)
    swift_once(&qword_100077578, sub_100009428);
  sub_10000F664((uint64_t)&qword_10007C888, (uint64_t)v13, 32);
  v1 = sub_10000A4D0(14, qword_10007C888, unk_10007C890, (void *)qword_10007C898);
  v2 = swift_endAccess(v13);
  if ((v1 & 1) != 0)
  {
    v3 = sub_1000190FC(v2, "request");
    if (v3)
    {
      v4 = v3;
      v5 = sub_100008414((uint64_t *)&unk_100078650);
      v6 = sub_100018C8C(v5, 40);
      *(_OWORD *)(v6 + 16) = xmmword_100058900;
      v13[3] = &type metadata for Bool;
      LOBYTE(v13[0]) = 1;
      sub_10003728C();
      sub_100035AC8();
      *(_QWORD *)(v6 + 32) = v7;
      v13[0] = v6;
      v10 = specialized Array._endMutation()(v7, v8, v9);
      sub_100036FF0(v10, (unint64_t *)&unk_100077E40);
      isa = sub_10002728C().super.isa;
      v12 = sub_100005DA4();
      sub_100036F04(v12, "sendItems:complete:");

    }
  }
  sub_10000C57C();
}

void sub_1000306DC()
{
  char *v0;
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  char *v12;

  if (*(_QWORD *)&v0[OBJC_IVAR___DisplayMainViewController_keyboardResponder])
  {
    sub_100036FE0();
    return;
  }
  v1 = type metadata accessor for DisplayMainViewController.KeyboardResponder();
  v2 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1)), "init");
  v3 = &v2[OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder_delegate];
  *((_QWORD *)v3 + 1) = &off_10006B6A8;
  v4 = swift_unknownObjectWeakAssign(v3, v0);
  v5 = sub_1000190FC(v4, "view");
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  v7 = sub_10002761C((uint64_t)v5, "view");
  if (!v7)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v8 = v7;
  objc_msgSend(v6, "addSubview:", v7);

  v9 = sub_1000373E4(v0, "addChildViewController:");
  sub_10002761C((uint64_t)v9, "becomeFirstResponder");
  v12 = v2;
  sub_100029A68((uint64_t)v2);
  v10 = *(void **)&v0[OBJC_IVAR___DisplayMainViewController_sidebarController];
  if (v10)
  {
    v11 = v10;
    sub_10001A728(1);

  }
}

void sub_100030804()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  _OWORD v7[2];
  char v8;

  v1 = *(void **)&v0[OBJC_IVAR___DisplayMainViewController_keyboardResponder];
  if (v1)
  {
    v2 = v0;
    v6 = v1;
    objc_msgSend(v6, "removeFromParentViewController");
    objc_msgSend(v0, "becomeFirstResponder");
    sub_100029A68(0);
    v3 = *(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR___DisplayMainViewController_displayViewController]
                   + OBJC_IVAR___DisplayViewController_hidObserver);
    memset(v7, 0, sizeof(v7));
    v8 = 1;
    sub_10001D5D0();
    sub_100006638((uint64_t)v7);
    swift_release(v3);
    v4 = *(void **)&v2[OBJC_IVAR___DisplayMainViewController_sidebarController];
    if (v4)
    {
      v5 = v4;
      sub_10001A728(0);

    }
    sub_100036F68(v6);
  }
  else
  {
    sub_1000370D4();
  }
}

void sub_1000308FC(void *a1, __n128 a2, uint64_t a3, uint64_t a4, void (*a5)(id, __n128))
{
  id v8;
  uint64_t v9;
  id v10;
  _OWORD v12[2];

  if (a4)
  {
    v8 = a1;
    v9 = swift_unknownObjectRetain(a4);
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(a4);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    v10 = a1;
  }
  a5(v10, a2);

  sub_10001893C((uint64_t)v12, (uint64_t *)&unk_100077B70);
  sub_10001BA9C();
}

void sub_100030974(__n128 a1)
{
  _OWORD v1[2];
  char v2;

  v1[0] = a1;
  v1[1] = xmmword_100058AE0;
  v2 = 1;
  sub_1000340E8((uint64_t)v1, 1);
  sub_10003740C((uint64_t)v1);
  sub_1000370B4();
}

void sub_1000309C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  char *v6;
  char *v7;
  char v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;

  v7 = v6;
  v11 = a5 & 1;
  objc_allocWithZone((Class)type metadata accessor for DisplayModalAlert());
  swift_errorRetain(a6);
  sub_10001D748(v11, a6);
  v13 = v12;
  objc_msgSend(v12, "setModalTransitionStyle:", 2);
  objc_msgSend(v13, "setModalPresentationStyle:", 5);
  sub_100037178((uint64_t)v13 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_delegate, (uint64_t)&off_10006B698);
  v14 = sub_100037340(OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_mainLabel);
  sub_100036720(a1, a2, v14);

  v15 = sub_100037340(OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_secondaryLabel);
  v16 = sub_1000372F0();
  sub_100036720(v16, v17, v15);

  v18 = *(void **)&v7[OBJC_IVAR___DisplayMainViewController_presentedAlert];
  v20 = v18;
  v19 = v13;
  sub_100029A80((uint64_t)v13);
  objc_msgSend(v7, "presentViewController:animated:completion:", v19, 0, 0);
  if (v18)
    sub_1000372E4(v20, "dismissViewControllerAnimated:completion:");
  sub_100030B38();
  sub_10002B43C();

  sub_100036F68(v20);
}

void sub_100030B38()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFData *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;

  if (sub_100036764())
  {
    v1 = *(char **)(v0 + OBJC_IVAR___DisplayMainViewController_presentedAlert);
    if (v1)
    {
      v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_error];
      v42 = *(char **)(v0 + OBJC_IVAR___DisplayMainViewController_presentedAlert);
      v3 = v1;
      if (v2)
      {
        swift_errorRetain(v2);
        v4 = (void *)_convertErrorToNSError(_:)(v2);
        swift_errorRelease(v2);
        v5 = sub_100008414((uint64_t *)&unk_100078670);
        v6 = swift_allocObject(v5, 112, 7);
        *(_OWORD *)(v6 + 16) = xmmword_100058980;
        v7 = objc_msgSend(v4, "localizedDescription");
        v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v10 = v9;

        *(_QWORD *)(v6 + 56) = &type metadata for String;
        v11 = sub_10000FEB8();
        *(_QWORD *)(v6 + 64) = v11;
        *(_QWORD *)(v6 + 32) = v8;
        *(_QWORD *)(v6 + 40) = v10;
        v12 = objc_msgSend(v4, "debugDescription");
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        *(_QWORD *)(v6 + 96) = &type metadata for String;
        *(_QWORD *)(v6 + 104) = v11;
        *(_QWORD *)(v6 + 72) = v13;
        *(_QWORD *)(v6 + 80) = v15;
        v2 = String.init(format:_:)(0x40250A4025, 0xE500000000000000, v6);
        v17 = v16;

      }
      else
      {
        v17 = 0xE000000000000000;
      }
      v18 = *(_QWORD *)(v0 + OBJC_IVAR___DisplayMainViewController_qosViewController);
      if (v18)
      {
        v19 = sub_1000366B4(objc_retain(*(id *)(v18
                                              + OBJC_IVAR____TtC17ContinuityDisplay27QOSControllerViewController_label)));
        if (v20)
        {
          v21 = v19;
          v22 = v20;
          v23 = sub_100008414((uint64_t *)&unk_100078670);
          v24 = swift_allocObject(v23, 112, 7);
          *(_OWORD *)(v24 + 16) = xmmword_100058980;
          *(_QWORD *)(v24 + 56) = &type metadata for String;
          v25 = sub_10000FEB8();
          *(_QWORD *)(v24 + 32) = v2;
          *(_QWORD *)(v24 + 40) = v17;
          *(_QWORD *)(v24 + 96) = &type metadata for String;
          *(_QWORD *)(v24 + 104) = v25;
          *(_QWORD *)(v24 + 64) = v25;
          *(_QWORD *)(v24 + 72) = v21;
          *(_QWORD *)(v24 + 80) = v22;
          v2 = String.init(format:_:)(0x40250A0A4025, 0xE600000000000000, v24);
          v17 = v26;
        }
      }
      v27 = HIBYTE(v17) & 0xF;
      if ((v17 & 0x2000000000000000) == 0)
        v27 = v2 & 0xFFFFFFFFFFFFLL;
      if (v27)
      {
        v28 = sub_100008414((uint64_t *)&unk_100078670);
        v29 = swift_allocObject(v28, 192, 7);
        *(_OWORD *)(v29 + 16) = xmmword_100058970;
        v30 = sub_100051650();
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        *(_QWORD *)(v29 + 56) = &type metadata for String;
        v34 = sub_10000FEB8();
        *(_QWORD *)(v29 + 64) = v34;
        *(_QWORD *)(v29 + 32) = v31;
        *(_QWORD *)(v29 + 40) = v33;
        v35 = sub_10005174C();
        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v38 = v37;

        *(_QWORD *)(v29 + 96) = &type metadata for String;
        *(_QWORD *)(v29 + 104) = v34;
        *(_QWORD *)(v29 + 72) = v36;
        *(_QWORD *)(v29 + 80) = v38;
        if (qword_100077580 != -1)
          swift_once(&qword_100077580, sub_1000143D8);
        v40 = qword_10007C8A8;
        v39 = unk_10007C8B0;
        *(_QWORD *)(v29 + 136) = &type metadata for String;
        *(_QWORD *)(v29 + 144) = v34;
        *(_QWORD *)(v29 + 112) = v40;
        *(_QWORD *)(v29 + 120) = v39;
        *(_QWORD *)(v29 + 176) = &type metadata for String;
        *(_QWORD *)(v29 + 184) = v34;
        *(_QWORD *)(v29 + 152) = v2;
        *(_QWORD *)(v29 + 160) = v17;
        swift_bridgeObjectRetain(v39);
        v2 = String.init(format:_:)(0xD000000000000026, 0x8000000100057200, v29);
        v17 = v41;
      }
      sub_100036670(v2, v17, *(void **)&v42[OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_debugLabel]);

    }
  }
}

void sub_100030E78(void *a1)
{
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;

  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v4 = sub_100009408();
  sub_100036EDC(v4, (uint64_t)qword_100078360);
  v5 = sub_100018F48();
  if (sub_100037208(v5))
  {
    v6 = (uint8_t *)sub_10000F640(2);
    *(_WORD *)v6 = 0;
    sub_100036FFC((void *)&_mh_execute_header, v1, v2, "=== Dismiss Modal Alert ===", v6);
    sub_10000F604((uint64_t)v6);
  }

  sub_1000372E4(a1, "dismissViewControllerAnimated:completion:");
  v7 = *(Class *)((char *)&v1->isa + OBJC_IVAR___DisplayMainViewController_presentedAlert);
  if (v7
    && (type metadata accessor for DisplayModalAlert(),
        v8 = a1,
        v9 = v7,
        v10 = static NSObject.== infix(_:_:)(v8, v9),
        v8,
        v9,
        (v10 & 1) != 0))
  {
    v11 = sub_100037260();
    sub_100029A80(v11);
    sub_10002B43C();
  }
  else
  {
    sub_100018F88();
  }
}

id sub_100030F90(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  NSString v19;
  id v20;
  objc_super v22;

  sub_1000373A0();
  v6 = OBJC_IVAR___DisplayMainViewController_displayViewController;
  v7 = type metadata accessor for DisplayViewController();
  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v9 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v8, "init");
  v10 = OBJC_IVAR___DisplayMainViewController_displaySettings;
  v11 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  *(_QWORD *)&v9[v10] = sub_100009EF0(v11);
  v12 = &v9[OBJC_IVAR___DisplayMainViewController_snapshot];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_sidebarController] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_corners] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_displayLeftConstraint] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_displayRightConstraint] = 0;
  sub_100037218(&v9[OBJC_IVAR___DisplayMainViewController_currentTool]);
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_keyboardResponder] = 0;
  v9[OBJC_IVAR___DisplayMainViewController_reconfiguring] = 0;
  v13 = OBJC_IVAR___DisplayMainViewController__customUndoManager;
  *(_QWORD *)&v9[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DisplayMainViewController.DisplayUndoManager()), "init");
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_configurationAnimationDuration] = 0x3FD3333333333333;
  v14 = OBJC_IVAR___DisplayMainViewController_displayContainer;
  *(_QWORD *)&v9[v14] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_qosViewController] = 0;
  v9[OBJC_IVAR___DisplayMainViewController_displayShouldSleep] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_keyboardDebugLayer] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_presentedAlert] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_reconfigureWatchdog] = 0;
  v15 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  v16 = sub_1000370FC(v15);
  sub_100018C20(v16, (unint64_t *)&unk_100077E20, CADisplay_ptr);
  v17 = sub_1000127E0();
  v18 = 3;
  if ((v17 & 1) == 0)
    v18 = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_referenceDisplayModeStatus] = v18;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController_disableUniversalControlAssertion] = 0;
  v9[OBJC_IVAR___DisplayMainViewController_dockShown] = 0;
  v9[OBJC_IVAR___DisplayMainViewController_menuOverrideEnabled] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___DisplayMainViewController__viewUpdateTimer] = 0;

  if (v4)
  {
    sub_1000372F0();
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v19 = 0;
  }
  v22.receiver = v9;
  v22.super_class = (Class)sub_100035308();
  v20 = objc_msgSendSuper2(&v22, "initWithNibName:bundle:", v19, a3);

  return v20;
}

uint64_t sub_10003121C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_super v23;

  v1 = OBJC_IVAR___DisplayMainViewController_displayViewController;
  v2 = type metadata accessor for DisplayViewController();
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v4 = v0;
  *(_QWORD *)&v0[v1] = sub_1000190EC((uint64_t)v4, "init");
  v5 = OBJC_IVAR___DisplayMainViewController_displaySettings;
  v6 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  *(_QWORD *)&v4[v5] = sub_100009EF0(v6);
  v7 = &v4[OBJC_IVAR___DisplayMainViewController_snapshot];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_sidebarController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_corners] = _swiftEmptyDictionarySingleton;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_displayLeftConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_displayRightConstraint] = 0;
  sub_100037218(&v4[OBJC_IVAR___DisplayMainViewController_currentTool]);
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_keyboardResponder] = 0;
  v4[OBJC_IVAR___DisplayMainViewController_reconfiguring] = 0;
  v8 = OBJC_IVAR___DisplayMainViewController__customUndoManager;
  *(_QWORD *)&v4[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DisplayMainViewController.DisplayUndoManager()), "init");
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_configurationAnimationDuration] = 0x3FD3333333333333;
  v9 = OBJC_IVAR___DisplayMainViewController_displayContainer;
  *(_QWORD *)&v4[v9] = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_qosViewController] = 0;
  v4[OBJC_IVAR___DisplayMainViewController_displayShouldSleep] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_keyboardDebugLayer] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_presentedAlert] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_reconfigureWatchdog] = 0;
  v10 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  v11 = sub_1000370FC(v10);
  sub_100018C20(v11, (unint64_t *)&unk_100077E20, CADisplay_ptr);
  v13 = v12;
  v14 = sub_1000127E0();
  v15 = 3;
  if ((v14 & 1) == 0)
    v15 = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_referenceDisplayModeStatus] = v15;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController_disableUniversalControlAssertion] = 0;
  v4[OBJC_IVAR___DisplayMainViewController_dockShown] = 0;
  v4[OBJC_IVAR___DisplayMainViewController_menuOverrideEnabled] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___DisplayMainViewController__viewUpdateTimer] = 0;

  v23.receiver = v4;
  v23.super_class = (Class)sub_100035308();
  sub_1000370F0((uint64_t)v23.super_class, "initWithCoder:", v16, v17, v18, v19, v20, v21, v23);
  sub_100037458();
  return v13;
}

double sub_10003147C()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  char v8;
  char v9;
  void *v10;
  uint64_t v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  _BYTE v27[24];

  v2 = (_QWORD *)(v0 + OBJC_IVAR___DisplayMainViewController_displaySettings);
  sub_10000F664(v0 + OBJC_IVAR___DisplayMainViewController_displaySettings, (uint64_t)v27, 0);
  v3 = swift_bridgeObjectRetain(*v2);
  sub_100029518(v3);
  sub_100037360();
  v4 = 0;
  v5 = 0.0;
  v6 = 0.0;
  if ((v1 & 1) != 0)
  {
    v7 = sub_100037328();
    sub_10002956C(v7);
    v9 = v8;
    sub_100005DD0();
    if ((v9 & 1) != 0)
    {
      v6 = 64.0;
    }
    else if (sub_100027010())
    {
      v5 = 64.0;
    }
    else
    {
      v5 = 78.0;
    }
  }
  v10 = *(void **)(v0 + OBJC_IVAR___DisplayMainViewController_displayLeftConstraint);
  if (v10)
  {
    objc_msgSend(v10, "constant");
    v4 = v11;
  }
  v12 = *(void **)(v0 + OBJC_IVAR___DisplayMainViewController_displayRightConstraint);
  if (v12)
  {
    objc_msgSend(v12, "constant");
    v14 = -v13;
  }
  else
  {
    v14 = -0.0;
  }
  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v15 = sub_100009408();
  v16 = sub_100036EDC(v15, (uint64_t)qword_100078360);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)sub_10000F640(12);
    v19 = sub_10000F640(32);
    *(_DWORD *)v18 = 136446210;
    v26 = v19;
    v24 = *(_QWORD *)&v6;
    v25[0] = v4;
    *(double *)&v25[1] = v5;
    *(double *)&v25[2] = v14;
    type metadata accessor for UIEdgeInsets(0);
    v21 = String.init<A>(describing:)(&v24, v20);
    v24 = sub_10000EC54(v21, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v18 + 4);
    sub_1000372B4();
    sub_10000F6D4((void *)&_mh_execute_header, v16, v17, "keyboard edge inset: %{public}s", v18);
    swift_arrayDestroy(v19, 1);
    sub_10000F604(v19);
    sub_10000F604((uint64_t)v18);
  }

  return v6;
}

void sub_1000316B4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD v19[5];
  id v20;

  v1 = sub_100009408();
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  sub_100018CB0();
  v5 = sub_100018D44(v4, "request");
  if (!v5)
    goto LABEL_4;
  v20 = v5;
  if ((objc_msgSend(v5, "isFinished") & 1) != 0)
  {

LABEL_4:
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v6 = sub_100036EDC(v1, (uint64_t)qword_100078360);
    v7 = static os_log_type_t.default.getter();
    if (sub_1000371D8(v7))
    {
      v8 = (uint8_t *)sub_10000F640(2);
      *(_WORD *)v8 = 0;
      sub_100036FFC((void *)&_mh_execute_header, v6, (os_log_type_t)v0, "=== User Disconnect (no active request) ===", v8);
      sub_10000F604((uint64_t)v8);
    }

    objc_msgSend(v0, "completeRequest:", sub_100018D44(v9, "requestCompleted"));
    return;
  }
  v10 = *(_QWORD *)&v0[OBJC_IVAR___DisplayMainViewController_presentedAlert];
  if (v10 && (v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC17ContinuityDisplay17DisplayModalAlert_error)) != 0)
  {
    sub_10003748C();
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v12 = sub_100026E38(v1, (uint64_t)qword_100078360);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v0, v12, v1);
    __chkstk_darwin(v13, v14);
    v19[2] = v11;
    sub_100028F80((uint64_t (*)(void))sub_10003198C, 0, sub_100018B80, v19);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v0, v1);
    v15 = (void *)sub_100037494();
    sub_1000373E4(v20, "setError:");

    swift_errorRelease(v11);
    sub_100018F88();
  }
  else
  {
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v16 = sub_100036EDC(v1, (uint64_t)qword_100078360);
    v17 = static os_log_type_t.default.getter();
    if (sub_1000371D8(v17))
    {
      v18 = (uint8_t *)sub_10000F640(2);
      *(_WORD *)v18 = 0;
      sub_100036FFC((void *)&_mh_execute_header, v16, (os_log_type_t)v0, "=== User Disconnect ===", v18);
      sub_10000F604((uint64_t)v18);
    }

    objc_msgSend(v20, "cancel");
  }
}

unint64_t sub_10003198C()
{
  return 0xD000000000000017;
}

void sub_1000319A8()
{
  void *v0;
  id v1;
  void *v2;

  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "frame");

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100031A0C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026FA4(v0, qword_100078360);
  sub_100026E38(v0, (uint64_t)qword_100078360);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x8000000100056270, 0x79616C70736964, 0xE700000000000000);
}

void sub_100031A80(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend(a1, "type");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  if (v3 == 0x7065656C7364 && v5 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(0x7065656C7364, 0xE600000000000000, v3, v5, 0);
    sub_100037360();
    if ((v3 & 1) == 0)
    {
      sub_100018F88();
      return;
    }
  }
  sub_100031B2C(a1);
}

void sub_100031B2C(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;

  v2 = v1;
  v3 = objc_msgSend(a1, "objectValue");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_100036E40((uint64_t)v17, (uint64_t)&v18, (uint64_t *)&unk_100077B70);
  if (!v19)
    goto LABEL_14;
  v5 = sub_100008414((uint64_t *)&unk_100078300);
  if ((swift_dynamicCast(&v16, &v18, (char *)&type metadata for Any + 8, v5, 6) & 1) == 0)
    return;
  v6 = v16;
  sub_100010138(v16, &v18);
  swift_bridgeObjectRelease(v6);
  if (!v19)
  {
LABEL_14:
    sub_10001893C((uint64_t)&v18, (uint64_t *)&unk_100077B70);
    return;
  }
  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
  {
    v7 = LOBYTE(v17[0]);
    if (LOBYTE(v17[0]) != v2[OBJC_IVAR___DisplayMainViewController_displayShouldSleep])
    {
      v2[OBJC_IVAR___DisplayMainViewController_displayShouldSleep] = v17[0];
      if (v7)
      {
        if (qword_1000775B0 != -1)
          swift_once(&qword_1000775B0, sub_100031A0C);
        v8 = type metadata accessor for Logger(0);
        v9 = sub_100026E38(v8, (uint64_t)qword_100078360);
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v10, v11))
          goto LABEL_21;
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        v13 = "=== Host Display Sleep ===";
      }
      else
      {
        if (qword_1000775B0 != -1)
          swift_once(&qword_1000775B0, sub_100031A0C);
        v14 = type metadata accessor for Logger(0);
        v15 = sub_100026E38(v14, (uint64_t)qword_100078360);
        v10 = Logger.logObject.getter(v15);
        v11 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v10, v11))
          goto LABEL_21;
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        v13 = "=== Host Display Wake ===";
      }
      _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 2u);
      swift_slowDealloc(v12, -1, -1);
LABEL_21:

      sub_10002B43C();
      if (v7)
      {
        if ((objc_msgSend(v2, "backgrounded") & 1) == 0)
          SBSLockDevice(1, 1);
      }
      else
      {
        SBSUndimScreen();
      }
    }
  }
}

id sub_100031DC4(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  Class isa;
  NSString v11;
  Class v12;
  NSString v13;
  Class v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Class v22;
  NSString v23;
  NSString v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v33;

  v33 = a1;
  sub_100018C20((uint64_t)a1, &qword_1000786D8, CAFilter_ptr);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterGaussianBlur);
  v6 = v5;
  v7 = a1;
  v8 = a2;
  v9 = sub_100031FF0(v4, v6);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v11 = String._bridgeToObjectiveC()();
  sub_100036F40();

  v12 = Bool._bridgeToObjectiveC()().super.super.isa;
  v13 = String._bridgeToObjectiveC()();
  sub_100036F40();

  v14 = sub_100037310().super.super.isa;
  v15 = sub_100036F94();
  sub_100036F40();

  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorBrightness);
  v18 = sub_100031FF0(v16, v17);
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterColorSaturate);
  v21 = sub_100031FF0(v19, v20);
  v22 = sub_100037310().super.super.isa;
  v23 = sub_100036F94();
  sub_100037198(v9, "setValue:forKey:");

  sub_100037310();
  v24 = sub_100036F70();
  sub_100037198(v18, "setValue:forKey:");

  Double._bridgeToObjectiveC()();
  v25 = sub_100036F70();
  sub_100037198(v21, "setValue:forKey:");

  sub_100018C20(v26, &qword_100078688, CATransaction_ptr);
  v28 = v27;
  v29 = v9;
  v30 = v18;
  v31 = v21;
  sub_10002D6F0(v28, &v33, v29, v30, v31);

  return v7;
}

id sub_100031FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  NSString v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v6 = objc_msgSend(v4, "initWithType:", v5);

  return v6;
}

void sub_100032060(id *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v13 = objc_msgSend(*a1, "layer");
  v7 = sub_100008414(&qword_1000786E0);
  v8 = swift_allocObject(v7, 128, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100058AC0;
  sub_100018AA4(0, &qword_1000786D8, CAFilter_ptr);
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 64) = a3;
  *(_QWORD *)(v8 + 120) = v9;
  *(_QWORD *)(v8 + 88) = v9;
  *(_QWORD *)(v8 + 96) = a4;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  sub_100036C74(v8, v13);

}

id sub_10003211C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "animationWithKeyPath:", v4);

  return v5;
}

id sub_100032188()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id result;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class isa;
  id v28;
  id v29;

  v2 = *(id *)(v0 + OBJC_IVAR___DisplayMainViewController_displayContainer);
  result = sub_1000190FC((uint64_t)v2, "view");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "snapshotViewAfterScreenUpdates:", 0);

    if (v5)
    {
      sub_10001E660(v5, "setTranslatesAutoresizingMaskIntoConstraints:");
      sub_100037448(v2, "addSubview:");
      v6 = (void *)objc_opt_self(NSLayoutConstraint);
      v7 = sub_100008414((uint64_t *)&unk_100078650);
      v8 = sub_100018C8C(v7, 64);
      *(_OWORD *)(v8 + 16) = xmmword_100058B00;
      v9 = sub_100018D44(v8, "leftAnchor");
      v10 = sub_10002761C((uint64_t)v9, "leftAnchor");
      v11 = sub_100036F30();
      sub_100027210();

      *(_QWORD *)(v8 + 32) = v1;
      v13 = sub_100018D44(v12, "rightAnchor");
      v14 = sub_10002761C((uint64_t)v13, "rightAnchor");
      v15 = sub_100036F30();
      sub_100027210();

      *(_QWORD *)(v8 + 40) = v1;
      v17 = sub_100018D44(v16, "topAnchor");
      v18 = sub_10002761C((uint64_t)v17, "topAnchor");
      v19 = sub_100036F30();
      sub_100027210();

      *(_QWORD *)(v8 + 48) = v1;
      v21 = sub_100018D44(v20, "bottomAnchor");
      v22 = sub_10002761C((uint64_t)v21, "bottomAnchor");
      v23 = sub_100036F30();
      sub_100027210();

      *(_QWORD *)(v8 + 56) = v1;
      specialized Array._endMutation()(v24, v25, v26);
      sub_100018AA4(0, (unint64_t *)&qword_1000786D0, NSLayoutConstraint_ptr);
      isa = sub_10002728C().super.isa;
      sub_100005DA4();
      objc_msgSend(v6, "activateConstraints:", isa);

      v28 = v2;
      v2 = v5;
      v29 = sub_100031DC4(v28, v2);
      objc_msgSend((id)objc_opt_self(CATransaction), "flush");

    }
    else
    {
      v29 = 0;
    }

    return v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100032438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  Class isa;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void *Strong;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];

  v42 = a4;
  v43 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100008414((uint64_t *)&unk_1000786C0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100008414((uint64_t *)&unk_100078320);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v42 - v20;
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v42 - v24;
  v26 = *(_QWORD *)(a2 + OBJC_IVAR___DisplayViewController_session);
  if (v26)
  {
    v27 = v26 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid;
    swift_beginAccess(v26 + OBJC_IVAR____TtC17ContinuityDisplay21SidecarDisplaySession_uuid, v46, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v25, v27, v5);
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  sub_100018974((uint64_t)v25, v28, 1, v5);
  v29 = (uint64_t)&v13[*(int *)(v10 + 48)];
  sub_100036A9C(v43, (uint64_t)v13, (uint64_t *)&unk_100078320);
  sub_100036A9C((uint64_t)v25, v29, (uint64_t *)&unk_100078320);
  if (sub_100018930((uint64_t)v13, 1, v5) != 1)
  {
    sub_100036A9C((uint64_t)v13, (uint64_t)v21, (uint64_t *)&unk_100078320);
    if (sub_100018930(v29, 1, v5) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v9, v29, v5);
      v30 = sub_100036C34();
      v31 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v9, v5, v30);
      v32 = *(void (**)(char *, uint64_t))(v6 + 8);
      v32(v9, v5);
      sub_10001893C((uint64_t)v25, (uint64_t *)&unk_100078320);
      v32(v21, v5);
      sub_10001893C((uint64_t)v13, (uint64_t *)&unk_100078320);
      if ((v31 & 1) == 0)
        return;
      goto LABEL_11;
    }
    sub_10001893C((uint64_t)v25, (uint64_t *)&unk_100078320);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v5);
LABEL_9:
    sub_10001893C((uint64_t)v13, (uint64_t *)&unk_1000786C0);
    return;
  }
  sub_10001893C((uint64_t)v25, (uint64_t *)&unk_100078320);
  if (sub_100018930(v29, 1, v5) != 1)
    goto LABEL_9;
  sub_10001893C((uint64_t)v13, (uint64_t *)&unk_100078320);
LABEL_11:
  v33 = v42 + 16;
  sub_100036A9C(v43, (uint64_t)v17, (uint64_t *)&unk_100078320);
  if (sub_100018930((uint64_t)v17, 1, v5) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  }
  v35 = sub_1000183B8(isa);

  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v39 = 134217984;
    v44 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v39 + 4);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "=== Reconfiguration Timeout (%lx ===", v39, 0xCu);
    swift_slowDealloc(v39, -1, -1);
  }

  swift_beginAccess(v33, &v44, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v33);
  if (Strong)
  {
    v41 = Strong;
    objc_msgSend(Strong, "completeRequest:", objc_msgSend(Strong, "requestCompleted"));

  }
}

void sub_100032874()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char v11[24];

  if (v0[OBJC_IVAR___DisplayMainViewController_reconfiguring] == 1)
  {
    v1 = v0;
    v2 = sub_100018C8C((uint64_t)&unk_10006B8B8, 33);
    v3 = (uint64_t)&v0[OBJC_IVAR___DisplayMainViewController_snapshot];
    sub_10000F664(v3, (uint64_t)v11, 0);
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_BYTE *)(v3 + 16);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)v3;
    *(_QWORD *)(v2 + 24) = v4;
    *(_BYTE *)(v2 + 32) = v5;
    if (*(_QWORD *)&v1[OBJC_IVAR___DisplayMainViewController_reconfigureWatchdog])
    {
      sub_1000373C8();
      sub_1000371B8();
      sub_1000270C0();
      OS_dispatch_source.cancel()();
      sub_100018C94();
    }
    else
    {
      sub_1000371B8();
    }
    v6 = sub_100037260();
    v7 = sub_100029A8C(v6);
    sub_100018C20(v7, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
    v8 = (void *)sub_100027230();
    v9 = sub_100018C8C((uint64_t)&unk_10006B8E0, 32);
    *(_QWORD *)(v9 + 16) = v2;
    *(_QWORD *)(v9 + 24) = v1;
    swift_retain(v2);
    v10 = v1;
    OS_dispatch_queue.after(_:closure:)();
    sub_1000372DC();

    swift_release(v9);
  }
  sub_1000373D0();
}

void sub_1000329A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v5[24];

  v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 33, 0);
  if (*(_QWORD *)(a1 + 16))
    sub_10002F7F0(0, v4, *(double *)(a2 + OBJC_IVAR___DisplayMainViewController_configurationAnimationDuration));
  swift_endAccess(v5);
  sub_1000299B4(0, 0, 0);
  *(_BYTE *)(a2 + OBJC_IVAR___DisplayMainViewController_reconfiguring) = 0;
}

id sub_100032A30(void *a1)
{
  return objc_msgSend(a1, "removeFromSuperview");
}

void sub_100032A3C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  char *v13;
  id v14;
  void *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD v33[4];

  v4 = a2 - 3;
  sub_100037334();
  switch(v4)
  {
    case 0:
    case 1:
    case 7:
    case 8:
      if ((*(_BYTE *)(v2 + OBJC_IVAR___DisplayMainViewController_reconfiguring) & 1) != 0)
        goto LABEL_25;
      goto LABEL_5;
    case 9:
      if (!*(_QWORD *)(v3 + 16))
        goto LABEL_20;
      sub_100019104();
      v7 = sub_100035B4C(12);
      if ((v8 & 1) != 0
        && (sub_10000C4D8(v7, v8, v9),
            (sub_100036F1C((uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Any, v30, v31, SWORD2(v31), SBYTE6(v31), SHIBYTE(v31), v33[0]) & 1) != 0))
      {
        sub_100005DA4();
        if ((v32 & 1) != 0)
        {
          if (*(_QWORD *)(v2 + OBJC_IVAR___DisplayMainViewController_qosViewController))
            goto LABEL_25;
          v10 = objc_allocWithZone((Class)type metadata accessor for QOSControllerViewController());
          v11 = sub_100037460();
          v12 = *(void **)(v2 + OBJC_IVAR___DisplayMainViewController_sidebarController);
          if (!v12)
            goto LABEL_14;
          v13 = v12;
          v14 = sub_1000190FC((uint64_t)v13, "view");
          if (v14)
          {
            v15 = v14;
            objc_msgSend(*(id *)&v13[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_topStack], "addArrangedSubview:", v14);

LABEL_14:
            isa = (Class)v11;
            v17 = (uint64_t)v11;
            goto LABEL_23;
          }
LABEL_27:
          __break(1u);
          JUMPOUT(0x100032CECLL);
        }
      }
      else
      {
        sub_100005DA4();
      }
LABEL_20:
      v27 = *(void **)(v2 + OBJC_IVAR___DisplayMainViewController_qosViewController);
      if (!v27)
        goto LABEL_25;
      isa = v27;
      v28 = -[objc_class view](isa, "view");
      if (!v28)
      {
        __break(1u);
        goto LABEL_27;
      }
      v29 = v28;
      objc_msgSend(v28, "removeFromSuperview");

      v17 = 0;
LABEL_23:
      sub_1000372A4(v17);
LABEL_24:

LABEL_25:
      sub_10001BA9C();
      return;
    case 10:
      if (qword_100077578 != -1)
        swift_once(&qword_100077578, sub_100009428);
      sub_10000F664((uint64_t)&qword_10007C888, (uint64_t)v33, 33);
      sub_10000A210();
      v18 = swift_endAccess(v33);
      v19 = sub_10002761C(v18, "request");
      if (!v19)
        goto LABEL_25;
      v20 = v19;
      v21 = sub_100008414((uint64_t *)&unk_100078650);
      *(_OWORD *)(sub_100018C8C(v21, 40) + 16) = xmmword_100058900;
      v33[3] = &type metadata for Bool;
      LOBYTE(v33[0]) = 1;
      sub_10003728C();
      sub_100035AC8();
      v25 = sub_10003727C(v22, v23, v24);
      sub_100036FF0(v25, (unint64_t *)&unk_100077E40);
      isa = sub_10002728C().super.isa;
      v26 = sub_100005DA4();
      sub_100036F04(v26, "sendItems:complete:");

      goto LABEL_24;
    case 12:
    case 13:
    case 14:
      v5 = sub_10000A8B4(0x10u, v3);
      qword_100077E70 = v6;
LABEL_5:
      sub_10002C47C(v5);
      return;
    default:
      goto LABEL_25;
  }
}

void sub_100032D28()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v0 = sub_100009408();
  oslog = sub_100036EDC(v0, (uint64_t)qword_100078360);
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)sub_10000F640(2);
    *(_WORD *)v2 = 0;
    sub_100036FFC((void *)&_mh_execute_header, oslog, v1, "=== Session Configuration Complete ===", v2);
    sub_10000F604((uint64_t)v2);
  }
  sub_100037044(oslog);
}

void sub_100032DD0()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  uint8_t *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v19;
  double v20;
  id v21;
  char *v22;
  id v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR___DisplayMainViewController_presentedAlert];
  v3 = *(void **)&v0[OBJC_IVAR___DisplayMainViewController_displayViewController];
  v4 = v2;
  v5 = v3;
  v6 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  sub_10003736C(v6);

  sub_100037110();
  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v7 = sub_100009408();
  sub_100036EDC(v7, (uint64_t)qword_100078360);
  v8 = sub_100018F48();
  if (sub_1000293FC(v8))
  {
    v9 = (_WORD *)sub_10000F640(2);
    *v9 = 0;
    sub_1000371F8();
    sub_100036FFC(v10, v11, v12, v13, v14);
    sub_10000F604((uint64_t)v9);
  }

  sub_10002CA14(0, 0.0);
  v15 = &v1[OBJC_IVAR___DisplayMainViewController_snapshot];
  v16 = sub_10000F664((uint64_t)&v1[OBJC_IVAR___DisplayMainViewController_snapshot], (uint64_t)&v24, 0);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    v18 = (void *)*((_QWORD *)v15 + 1);
    v19 = v15[16];
    v25[0] = v17;
    v25[1] = v18;
    v26 = v19 & 1;
    v20 = *(double *)&v1[OBJC_IVAR___DisplayMainViewController_configurationAnimationDuration];
    v21 = v4;
    v22 = v1;
    sub_100036D30(v17, v18);
    sub_10002E3A8(0, (uint64_t)v25, v2, v22, v20);
    sub_1000299B4(0, 0, 0);

  }
  else if (v2)
  {
    v23 = v4;
    sub_100030E78(v23);

  }
  sub_10002761C(v16, "serviceReady");

  sub_100037010();
}

id sub_100032FA4(id a1, void *a2)
{
  id v3;

  if (a2)
  {
    v3 = a2;
    sub_100030E78(v3);

  }
  return objc_msgSend(a1, "removeFromSuperview");
}

void sub_100032FEC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v11 = sub_100026E38(v6, (uint64_t)qword_100078360);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
    __chkstk_darwin(v12, v13);
    *(&v21 - 2) = a1;
    *(&v21 - 1) = a2;
    __chkstk_darwin(v14, &v21 - 4);
    *(&v21 - 2) = a3;
    sub_100028F80(sub_100036CFC, v15, sub_100018B80, &v21 - 4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_errorRelease(a3);
  }
  else
  {
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    sub_100026E38(v6, (uint64_t)qword_100078360);
    v16 = swift_bridgeObjectRetain_n(a2, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v22 = v20;
      *(_DWORD *)v19 = 136446210;
      swift_bridgeObjectRetain(a2);
      v21 = sub_10000EC54(a1, a2, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v19 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "=== Session Interrupted (%{public}s) ===", v19, 0xCu);
      swift_arrayDestroy(v20, 1);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
}

uint64_t sub_100033290(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;

  v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(30, 1);
  v4._object = (void *)0x80000001000574A0;
  v4._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x3D3D3D2029;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  return v8;
}

id sub_10003334C()
{
  objc_super v1;

  sub_100037248();
  return objc_msgSendSuper2(&v1, "backgrounded");
}

void sub_1000333B8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v8;

  v2 = sub_100037248();
  sub_100037320(v2, "setBackgrounded:", a1 & 1, v3, v4, v5, v6, v7, v8);
  sub_1000333EC();
  sub_100018E8C();
}

void sub_1000333EC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *oslog;

  if (objc_msgSend(v0, "backgrounded"))
  {
    sub_100030804();
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_100026E38(v1, (uint64_t)qword_100078360);
    oslog = Logger.logObject.getter(v2);
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      v5 = "=== Display Service Foreground ===";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, v5, v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }
  }
  else
  {
    if (qword_1000775B0 != -1)
      swift_once(&qword_1000775B0, sub_100031A0C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100026E38(v6, (uint64_t)qword_100078360);
    oslog = Logger.logObject.getter(v7);
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      v5 = "=== Display Service Background ===";
      goto LABEL_10;
    }
  }

}

void sub_100033558(uint64_t a1)
{
  __asm { BR              X10 }
}

double sub_1000335A0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v2 = sub_100008414((uint64_t *)&unk_100078650);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100059390;
  v4 = objc_msgSend(v0, "leftAnchor");
  v5 = OBJC_IVAR___DisplayMainViewController_displayContainer;
  v6 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR___DisplayMainViewController_displayContainer), "leftAnchor"));
  v7 = objc_msgSend(v4, "constraintEqualToAnchor:", v6);

  *(_QWORD *)(v3 + 32) = v7;
  v8 = objc_msgSend(v0, "topAnchor");
  v9 = objc_msgSend(*(id *)(v1 + v5), "topAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v3 + 40) = v10;
  specialized Array._endMutation()(v11, v12, v13);
  sub_100039E78(v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

void sub_100033974()
{
  char v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  void (*v4)(_BYTE *, _QWORD);
  void (*v5)(_BYTE *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v13[32];

  sub_100037334();
  v1 = sub_1000339F8(v0);
  if ((v2 & 1) != 0)
    goto LABEL_6;
  v3 = v1;
  sub_100029A98((uint64_t)v13);
  v5 = v4;
  v7 = v6;
  v8 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  if (sub_100037414(v7))
  {
LABEL_5:
    v5(v13, 0);
LABEL_6:
    sub_10000C57C();
    return;
  }
  v9 = v7 + *(int *)(v8 + 28);
  v10 = *(_QWORD *)(v9 + 8 * v3);
  v11 = __CFADD__(v10, 1);
  v12 = v10 + 1;
  if (!v11)
  {
    *(_QWORD *)(v9 + 8 * v3) = v12;
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_1000339F8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v2 = v1;
  sub_10001B8EC(v1, (uint64_t)v16);
  v4 = v16[0];
  v5 = v16[1];
  v6 = v16[2];
  v7 = v16[3];
  sub_10001B8EC(v2, (uint64_t)&v17);
  if (v21)
  {
    if (v21 == 1)
    {
      v8 = v4 == 8 && v5 == 6;
      if (v8
        && (!v6 && v7 == 0xE000000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0, 0xE000000000000000, v6, v7, 0) & 1) != 0))
      {
        return 13;
      }
      else
      {
        return 0;
      }
    }
    else if (v19 | v20 | v17 | v18)
    {
      v14 = v19 | v20 | v18;
      if (v17 != 1 || v14)
      {
        if (v14)
          v15 = 0;
        else
          v15 = v17 == 2;
        if (v15)
          return 2;
        else
          return 0;
      }
      else
      {
        return 14;
      }
    }
    else
    {
      return 16;
    }
  }
  else if ((v17 & 1) != 0)
  {
    if ((a1 & 1) != 0)
      return 11;
    else
      return 10;
  }
  else
  {
    v10 = 4;
    if ((a1 & 1) != 0)
      v10 = 5;
    v11 = v10 & (v17 << 60 >> 63);
    v12 = 6;
    if ((a1 & 1) != 0)
      v12 = 7;
    if ((v17 & 4) != 0)
      v11 = v12;
    v13 = 8;
    if ((a1 & 1) != 0)
      v13 = 9;
    if ((v17 & 2) != 0)
      return v13;
    else
      return v11;
  }
}

void sub_100033B70(uint64_t a1)
{
  uint64_t v2;
  int8x16_t v3;
  int8x8_t v4;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  int8x16_t v16[2];
  char v17;

  sub_100037404();
  v2 = sub_10001B8EC(a1, (uint64_t)v16);
  v3 = vorrq_s8(v16[0], v16[1]);
  v4 = vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  if (v17 == 2 && *(_QWORD *)&v4 == 0)
  {
    sub_100033C9C();
  }
  else
  {
    v6 = sub_1000190FC(v2, "request");
    if (v6)
    {
      v7 = v6;
      v8 = sub_100008414((uint64_t *)&unk_100078650);
      v9 = sub_100018C8C(v8, 40);
      *(_OWORD *)(v9 + 16) = xmmword_100058900;
      sub_10001F80C();
      sub_100008414((uint64_t *)&unk_100078660);
      sub_1000373C0();
      sub_100037230();
      *(_QWORD *)(v9 + 32) = v10;
      v13 = specialized Array._endMutation()(v10, v11, v12);
      sub_100037148(v13, (unint64_t *)&unk_100077E40);
      isa = sub_10002728C().super.isa;
      v15 = sub_100005DA4();
      sub_100036F04(v15, "sendItems:complete:");

    }
  }
}

void sub_100033C9C()
{
  void *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  id v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  _QWORD aBlock[6];
  _QWORD v37[5];
  _BYTE v38[40];
  _BYTE v39[40];
  _BYTE v40[48];
  Swift::String v41;
  Swift::String v42;

  sub_100030804();
  type metadata accessor for DisplayMainViewController.DarkAlert();
  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v41._object = (void *)0xE500000000000000;
  v3._object = (void *)0x80000001000574E0;
  v3._countAndFlagsBits = 0xD000000000000024;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v41._countAndFlagsBits = 0x656C746974;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v41);

  v6 = sub_100034458(v5._countAndFlagsBits, (uint64_t)v5._object, 0, 0, 0);
  sub_100018AA4(0, (unint64_t *)&unk_1000786F0, UIAlertAction_ptr);
  v7 = objc_msgSend(v1, "mainBundle");
  v42._object = (void *)0xEE006E6F69746361;
  v8._countAndFlagsBits = 0x656E6E6F63736944;
  v8._object = (void *)0xEA00000000007463;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0x20746C7561666544;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v42);

  v11 = swift_allocObject(&unk_10006B9D0, 24, 7);
  *(_QWORD *)(v11 + 16) = v0;
  v12 = v0;
  v13 = sub_100034648(v10._countAndFlagsBits, (uint64_t)v10._object, 2, (uint64_t)sub_100036E04, v11);
  objc_msgSend(v6, "addAction:", v13);

  v14 = objc_msgSend(v6, "popoverPresentationController");
  if (v14)
  {
    v15 = v14;
    v16 = OBJC_IVAR___DisplayMainViewController_sidebarController;
    v17 = *(_QWORD *)&v12[OBJC_IVAR___DisplayMainViewController_sidebarController];
    if (v17
      && (v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar14ViewController_buttonsByIdentifer),
          memset(v40, 0, 32),
          v40[32] = 2,
          swift_bridgeObjectRetain(v18),
          sub_100010180((uint64_t)v40, v18),
          v20 = v19,
          *(_QWORD *)&v21 = swift_bridgeObjectRelease(v18).n128_u64[0],
          v20))
    {
      objc_msgSend(v15, "setSourceView:", v20, v21);
      v22 = *(void **)&v12[v16];
      v23 = 0.0;
      if (v22)
      {
        sub_10001B8EC((uint64_t)v20 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier, (uint64_t)v39);
        v24 = v22;
        sub_100036E0C((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B928);
        sub_10001AB58((uint64_t)v39, (uint64_t)v37);
        v25 = *(double *)v37;
        v26 = *(double *)&v37[1];
        v27 = *(double *)&v37[2];
        v28 = *(double *)&v37[3];
        sub_100036E0C((uint64_t)v39, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);

        sub_100036E40((uint64_t)v37, (uint64_t)v38, &qword_100077958);
        v29 = 0.0;
        v30 = 0.0;
        v31 = 0.0;
        if ((v38[32] & 1) == 0)
        {
          v23 = v27;
          v29 = v28;
          v30 = v25;
          v31 = v26;
        }
      }
      else
      {
        v29 = 0.0;
        v30 = 0.0;
        v31 = 0.0;
      }
      objc_msgSend(v15, "setSourceRect:", v30, v31, v23, v29);
      objc_msgSend(v15, "setPermittedArrowDirections:", 12);
      objc_msgSend(v15, "_setPopoverBackgroundStyle:", 7);

    }
    else
    {

    }
  }
  v32 = objc_msgSend(v6, "view");
  if (v32)
  {
    v33 = v32;
    v34 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v33, "setBackgroundColor:", v34);

    objc_msgSend(v6, "setModalPresentationStyle:", 7);
    aBlock[4] = VideoStream.qosMonitorServerDidDie(_:);
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10000C66C;
    aBlock[3] = &unk_10006B9E8;
    v35 = _Block_copy(aBlock);
    objc_msgSend(v12, "presentViewController:animated:completion:", v6, 1, v35);
    _Block_release(v35);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000340E8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 *inited;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class v22;
  uint64_t v23;
  _BYTE v24[128];
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];

  if ((a2 & 1) != 0)
    sub_100037404();
  v4 = sub_10001B8EC(a1, (uint64_t)v27);
  if (v27[32] == 2 && ((sub_100037378(), v6 == 1) ? (v7 = v5 == 0) : (v7 = 0), v7))
  {
    if ((a2 & 1) != 0)
      sub_1000306DC();
    else
      sub_100030804();
  }
  else
  {
    v8 = sub_1000190FC(v4, "request");
    if (v8)
    {
      v9 = v8;
      v10 = sub_100008414((uint64_t *)&unk_100078650);
      v11 = sub_100018C8C(v10, 40);
      *(_OWORD *)(v11 + 16) = xmmword_100058900;
      v12 = sub_100008414(&qword_100077DE8);
      inited = (__n128 *)swift_initStackObject(v12, v24);
      sub_10003715C(inited, (__n128)xmmword_100058980);
      v14 = sub_10001F80C();
      v15 = sub_100008414((uint64_t *)&unk_100078660);
      inited[3].n128_u64[0] = v14;
      inited[4].n128_u64[1] = v15;
      inited[5].n128_u64[0] = 1853321060;
      isa = sub_100037348(0xE400000000000000).super.super.isa;
      inited[7].n128_u64[1] = swift_getObjectType(isa);
      inited[6].n128_u64[0] = (unint64_t)isa;
      v17 = Dictionary.init(dictionaryLiteral:)(inited);
      v26 = sub_100008414((uint64_t *)&unk_100078300);
      v25 = v17;
      sub_1000373C0();
      sub_100037230();
      *(_QWORD *)(v11 + 32) = v18;
      v25 = v11;
      v21 = specialized Array._endMutation()(v18, v19, v20);
      sub_100037148(v21, (unint64_t *)&unk_100077E40);
      v22 = sub_10002728C().super.isa;
      v23 = sub_100005DA4();
      sub_100036F04(v23, "sendItems:complete:");

    }
  }
  sub_100037050();
}

void sub_10003429C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *inited;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  _BYTE v23[128];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[40];

  sub_100037404();
  v3 = sub_10001B8EC(a1, (uint64_t)v26);
  if (v26[32] == 2)
  {
    sub_100037378();
    if (v5 == 3 && v4 == 0)
    {
      *(_BYTE *)(v1 + OBJC_IVAR___DisplayMainViewController_menuOverrideEnabled) = (*(_BYTE *)(v1
                                                                                             + OBJC_IVAR___DisplayMainViewController_menuOverrideEnabled) & 1) == 0;
      sub_100029AFC(3, &OBJC_IVAR___DisplayMainViewController_menuOverrideEnabled);
    }
  }
  v7 = sub_1000190FC(v3, "request");
  if (v7)
  {
    v8 = v7;
    v9 = sub_100008414((uint64_t *)&unk_100078650);
    v10 = sub_100018C8C(v9, 40);
    *(_OWORD *)(v10 + 16) = xmmword_100058900;
    v11 = sub_100008414(&qword_100077DE8);
    inited = (__n128 *)swift_initStackObject(v11, v23);
    sub_10003715C(inited, (__n128)xmmword_100058980);
    v13 = sub_10001F80C();
    v14 = sub_100008414((uint64_t *)&unk_100078660);
    inited[3].n128_u64[0] = v13;
    inited[4].n128_u64[1] = v14;
    inited[5].n128_u64[0] = 28271;
    isa = sub_100037348(0xE200000000000000).super.super.isa;
    inited[7].n128_u64[1] = swift_getObjectType(isa);
    inited[6].n128_u64[0] = (unint64_t)isa;
    v16 = Dictionary.init(dictionaryLiteral:)(inited);
    v25 = sub_100008414((uint64_t *)&unk_100078300);
    v24 = v16;
    sub_1000373C0();
    sub_100037230();
    *(_QWORD *)(v10 + 32) = v17;
    v24 = v10;
    v20 = specialized Array._endMutation()(v17, v18, v19);
    sub_100037148(v20, (unint64_t *)&unk_100077E40);
    v21 = sub_10002728C().super.isa;
    v22 = sub_100005DA4();
    sub_100036F04(v22, "sendItems:complete:");

  }
  sub_100037050();
}

id sub_100034458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  NSString v10;
  NSString v11;
  id v12;

  v6 = v5;
  if (!a2)
  {
    v10 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "alertControllerWithTitle:message:preferredStyle:", v10, v11, a5);

  return v12;
}

void sub_10003450C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  id v9;

  if (qword_1000775B0 != -1)
    swift_once(&qword_1000775B0, sub_100031A0C);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100026E38(v3, (uint64_t)qword_100078360);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "=== User Disconnect Button ===", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = objc_msgSend(a2, "request");
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "cancel");

  }
  else
  {
    objc_msgSend(a2, "completeRequest:", objc_msgSend(a2, "requestCompleted"));
  }
}

id sub_100034648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  NSString v11;
  void *v12;
  id v13;
  _QWORD v15[5];
  uint64_t v16;

  v6 = v5;
  if (!a2)
  {
    v11 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v15[4] = a4;
  v16 = a5;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_100034734;
  v15[3] = &unk_10006BA10;
  v12 = _Block_copy(v15);
  swift_release(v16);
LABEL_6:
  v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(v6), "actionWithTitle:style:handler:", v11, a3, v12);
  _Block_release(v12);

  return v13;
}

void sub_100034734(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_100034794(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v12;

  if (a2)
  {
    v5 = String._bridgeToObjectiveC()();
    sub_1000190F4();
  }
  else
  {
    v5 = 0;
  }
  v12.receiver = v3;
  v12.super_class = (Class)type metadata accessor for DisplayMainViewController.DarkAlert();
  sub_1000371C8((uint64_t)v12.super_class, "initWithNibName:bundle:", v6, v7, v8, v9, v10, v11, v12);

  sub_100036FE0();
}

void sub_100034800()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for DisplayMainViewController.DarkAlert();
  sub_1000370F0((uint64_t)v7.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v7);
  sub_100037458();
  sub_100018E8C();
}

id sub_10003485C()
{
  return sub_1000350C8(type metadata accessor for DisplayMainViewController.DarkAlert);
}

void sub_1000348A4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __int128 v12;
  char v13;

  v1 = sub_100037140(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController18DisplayUndoManager_delegate);
  if (v1)
  {
    v10 = v1;
    sub_100036FB4((__n128)xmmword_100058AE0, v1, v2, v3, v4, v5, v6, v7, v8, *(_OWORD *)&a1, v12, v9, v13);
    sub_10003740C((uint64_t)&v12);
    sub_1000370A8(v10);
  }
  else
  {
    sub_1000370D4();
  }
}

id sub_100034944()
{
  void *v0;
  objc_super v2;

  sub_10001BAD4(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController18DisplayUndoManager_delegate);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayMainViewController.DisplayUndoManager();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000349A0()
{
  return sub_1000350C8(type metadata accessor for DisplayMainViewController.DisplayUndoManager);
}

double sub_100034A24()
{
  double v0;

  if (!sub_100037140(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder_delegate))
    return 0.0;
  v0 = sub_10003147C();
  sub_100018C94();
  return v0;
}

void sub_100034AF4(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __int128 v12;
  char v13;

  v1 = sub_100037140(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder_delegate);
  if (v1)
  {
    v10 = v1;
    sub_100036FB4((__n128)xmmword_100058AE0, v1, v2, v3, v4, v5, v6, v7, v8, *(_OWORD *)&a1, v12, v9, v13);
    sub_10003740C((uint64_t)&v12);
    sub_1000370A8(v10);
  }
  else
  {
    sub_1000370D4();
  }
}

void sub_100034B5C()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  objc_msgSend(v0, "setView:", v1);

}

void sub_100034BE4(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  id v22;

  v3 = objc_msgSend((id)objc_opt_self(UIKeyboardImpl), "sharedInstance");
  if (v3
    && (v4 = v3, v5 = objc_msgSend(v3, "isInHardwareKeyboardMode"), v4, (v5 & 1) != 0)
    || (v6 = (void *)sub_100037140(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder_delegate)) == 0
    || (v7 = objc_msgSend(v6, "request"), sub_100018C94(), !v7))
  {
    sub_1000373D0();
  }
  else
  {
    v8 = sub_100008414((uint64_t *)&unk_100078650);
    v9 = sub_100018C8C(v8, 40);
    *(_OWORD *)(v9 + 16) = xmmword_100058900;
    sub_10003728C();
    swift_bridgeObjectRetain(a2);
    sub_100035AC8();
    *(_QWORD *)(v9 + 32) = v10;
    v13 = specialized Array._endMutation()(v10, v11, v12);
    sub_100036FF0(v13, (unint64_t *)&unk_100077E40);
    isa = Array._bridgeToObjectiveC()().super.isa;
    sub_100005DD0();
    sub_100037304(v7, "sendItems:complete:", v14, v15, v16, v17, v18, v19, v20, (uint64_t)isa);

  }
}

void sub_100034DA0()
{
  id v0;
  void *v1;
  unsigned __int8 v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  id v18;

  v0 = objc_msgSend((id)objc_opt_self(UIKeyboardImpl), "sharedInstance");
  if (v0
    && (v1 = v0, v2 = objc_msgSend(v0, "isInHardwareKeyboardMode"), v1, (v2 & 1) != 0)
    || (v3 = (void *)sub_100037140(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder_delegate)) == 0
    || (v4 = objc_msgSend(v3, "request"), sub_100018C94(), !v4))
  {
    sub_10001BA9C();
  }
  else
  {
    v5 = sub_100008414((uint64_t *)&unk_100078650);
    *(_OWORD *)(sub_100018C8C(v5, 40) + 16) = xmmword_100058900;
    sub_10003728C();
    sub_100037230();
    v9 = sub_10003727C(v6, v7, v8);
    sub_100036FF0(v9, (unint64_t *)&unk_100077E40);
    isa = sub_10002728C().super.isa;
    sub_100005DA4();
    sub_100037304(v4, "sendItems:complete:", v10, v11, v12, v13, v14, v15, v16, (uint64_t)isa);

    sub_100036F68(v18);
  }
}

void sub_100034F70(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_super v13;

  sub_10001BAD4(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder_delegate);
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    sub_1000190F4();
  }
  else
  {
    v6 = 0;
  }
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for DisplayMainViewController.KeyboardResponder();
  sub_1000371C8((uint64_t)v13.super_class, "initWithNibName:bundle:", v7, v8, v9, v10, v11, v12, v13);

  sub_100036FE0();
}

void sub_100034FF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, uint64_t, void *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  if (a3)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v9 = v8;
  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = a4;
  a5(v7, v9, a4);
  sub_100018F88();
}

void sub_100035054()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  sub_10001BAD4(OBJC_IVAR____TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder_delegate);
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for DisplayMainViewController.KeyboardResponder();
  sub_1000370F0((uint64_t)v7.super_class, "initWithCoder:", v1, v2, v3, v4, v5, v6, v7);
  sub_100037458();
  sub_100018E8C();
}

id sub_1000350BC()
{
  return sub_1000350C8(type metadata accessor for DisplayMainViewController.KeyboardResponder);
}

id sub_1000350C8(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_100035104(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  NSUUID v7;
  uint64_t v8;

  v7.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v8 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  if (a1)
  {
    SidecarAWDLogSidebarUsageSummary(v7.super.isa, *(_QWORD *)(a4 + *(int *)(v8 + 20)), a1, a2);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100035178(uint64_t (*a1)(id), double a2)
{
  id v3;

  v3 = objc_msgSend((id)objc_opt_self(CATransaction), "setAnimationDuration:", a2);
  return a1(v3);
}

uint64_t sub_1000351C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t UIScreenReferenceDisplayModeStatus.description.getter(uint64_t a1)
{
  uint64_t result;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;

  result = 0x6F70707553746F6ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6C62616E45746F6ELL;
      break;
    case 2:
      v5 = 0x6574696D696CLL;
      goto LABEL_6;
    case 3:
      v5 = 0x656C62616E65;
LABEL_6:
      result = v5 & 0xFFFFFFFFFFFFLL | 0x64000000000000;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v3);
      sub_100005DD0();
      v4._countAndFlagsBits = 41;
      v4._object = (void *)0xE100000000000000;
      String.append(_:)(v4);
      result = 0x286E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_100035300()
{
  uint64_t *v0;

  return UIScreenReferenceDisplayModeStatus.description.getter(*v0);
}

uint64_t sub_100035308()
{
  return type metadata accessor for DisplayMainViewController(0);
}

uint64_t type metadata accessor for DisplayMainViewController(uint64_t a1)
{
  return sub_100017440(a1, (uint64_t *)&unk_100078458, (uint64_t)&nominal type descriptor for DisplayMainViewController);
}

void sub_100035324(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[24];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_100059240;
  v4[3] = &unk_100059258;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = &unk_100059258;
  v4[6] = &unk_100059258;
  v4[7] = &unk_100059270;
  v4[8] = &unk_100059258;
  v4[9] = &unk_100059288;
  v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[13] = &unk_100059258;
  v4[14] = &unk_100059288;
  v4[15] = &unk_100059258;
  v4[16] = &unk_100059258;
  v4[17] = &unk_100059258;
  sub_100035404(319);
  if (v3 <= 0x3F)
  {
    v4[18] = *(_QWORD *)(v2 - 8) + 64;
    v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[20] = &unk_100059258;
    v4[21] = &unk_100059288;
    v4[22] = &unk_100059288;
    v4[23] = &unk_100059258;
    swift_updateClassMetadata2(a1, 256, 24, v4, a1 + 80);
  }
}

void sub_100035404(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100078468)
  {
    v2 = type metadata accessor for DisplayMainViewController.UsageSummary(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100078468);
  }
}

uint64_t type metadata accessor for DisplayMainViewController.UsageSummary(uint64_t a1)
{
  return sub_100017440(a1, qword_100078610, (uint64_t)&nominal type descriptor for DisplayMainViewController.UsageSummary);
}

uint64_t type metadata accessor for DisplayMainViewController.DarkAlert()
{
  return objc_opt_self(_TtCC17ContinuityDisplay25DisplayMainViewController9DarkAlert);
}

uint64_t type metadata accessor for DisplayMainViewController.DisplayUndoManager()
{
  return objc_opt_self(_TtCC17ContinuityDisplay25DisplayMainViewController18DisplayUndoManager);
}

uint64_t type metadata accessor for DisplayMainViewController.KeyboardResponder()
{
  return objc_opt_self(_TtCC17ContinuityDisplay25DisplayMainViewController17KeyboardResponder);
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayMainViewController.Snapshot(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for DisplayMainViewController.Snapshot(id *a1)
{

}

uint64_t assignWithCopy for DisplayMainViewController.Snapshot(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for DisplayMainViewController.Snapshot(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DisplayMainViewController.Snapshot(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayMainViewController.Snapshot(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayMainViewController.Snapshot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayMainViewController.Snapshot()
{
  return &type metadata for DisplayMainViewController.Snapshot;
}

uint64_t *sub_100035670(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    memcpy((char *)a1 + a3[7], (char *)a2 + a3[7], 0x88uLL);
  }
  return a1;
}

uint64_t sub_100035714(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100035748(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  memcpy((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), 0x88uLL);
  return a1;
}

uint64_t sub_1000357C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  v8[6] = v9[6];
  v8[7] = v9[7];
  v8[8] = v9[8];
  v8[9] = v9[9];
  v8[10] = v9[10];
  v8[11] = v9[11];
  v8[12] = v9[12];
  v8[13] = v9[13];
  v8[14] = v9[14];
  v8[15] = v9[15];
  v8[16] = v9[16];
  return a1;
}

uint64_t sub_1000358BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  memcpy((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), 0x88uLL);
  return a1;
}

uint64_t sub_100035934(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  v12 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v12;
  v13 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v13;
  v14 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v14;
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(v10 + 128);
  return a1;
}

uint64_t sub_1000359CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000359D8);
}

uint64_t sub_1000359D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100018F50();
  return sub_100018930(a1, a2, v4);
}

uint64_t sub_100035A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035A14);
}

uint64_t sub_100035A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100018F50();
  return sub_100018974(a1, a2, a2, v4);
}

uint64_t sub_100035A48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_100059308;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_100035AC8()
{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  NSString v6;

  sub_1000373A0();
  v3 = v2[3];
  v4 = sub_10000BE70(v2, v3);
  v5 = _bridgeAnythingToObjectiveC<A>(_:)(v4, v3);
  v6 = String._bridgeToObjectiveC()();
  sub_100005DD0();
  objc_msgSend(v0, "initWithObject:type:", v5, v6);
  swift_unknownObjectRelease(v5);

  sub_10000B910(v1);
  sub_100018F88();
}

uint64_t sub_100035B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _BYTE v6[72];

  sub_100037038(a1);
  v2 = sub_100009BB4();
  String.hash(into:)(v6, v2, v3);
  sub_100005DA4();
  v4 = sub_1000370C4();
  return sub_100035CC4(a1, v4);
}

unint64_t sub_100035BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[72];

  sub_1000373A0();
  sub_100037038(v2);
  String.hash(into:)(v7, v1, v0);
  sub_1000370C4();
  v3 = sub_1000372F0();
  return sub_1000361F8(v3, v4, v5);
}

unint64_t sub_100035C00()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;

  sub_100037334();
  v2 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
  return sub_1000362D8(v1, v2);
}

unint64_t sub_100035C2C(uint64_t a1)
{
  Swift::Int v2;
  _BYTE v4[72];

  sub_100037038(a1);
  sub_10001FAA0((uint64_t)v4);
  v2 = sub_1000370C4();
  return sub_10003639C(a1, v2);
}

unint64_t sub_100035C78(uint64_t a1)
{
  unsigned __int8 v1;
  Swift::Int v2;

  v1 = a1;
  sub_100037038(a1);
  Hasher._combine(_:)(v1);
  v2 = sub_1000370C4();
  return sub_1000365D0(v1, v2);
}

uint64_t sub_100035CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_1000361F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000362D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10000BEC8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10000BE94((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10003639C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  _QWORD v25[4];
  char v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  char v30;
  int8x16_t v31[2];
  char v32;
  _QWORD v33[4];
  char v34;
  _QWORD v35[4];
  char v36;
  _QWORD v37[4];
  char v38;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ~v4;
    v8 = *(_QWORD *)(v2 + 48);
    do
    {
      v9 = (uint64_t *)(v8 + 40 * v5);
      v10 = *v9;
      if (*((_BYTE *)v9 + 32))
      {
        v12 = v9[1];
        v11 = v9[2];
        v13 = v9[3];
        if (*((_BYTE *)v9 + 32) == 1)
        {
          sub_10001B8EC(a1, (uint64_t)v27);
          if (v30 == 1 && v10 == v27[0] && v12 == v27[1])
          {
            v15 = v11 == v28 && v13 == v29;
            if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v28, v29, 0) & 1) != 0)
              return v5;
          }
        }
        else if (v11 | v12 | v10 | v13)
        {
          v17 = v11 | v12 | v13;
          if (v10 == 1 && v17 == 0)
          {
            sub_10001B8EC(a1, (uint64_t)v33);
            if (v34 != 2 || v33[0] != 1)
              goto LABEL_21;
            v21 = v33[2];
            v20 = v33[3];
            v22 = v33[1];
          }
          else if (v10 == 2 && v17 == 0)
          {
            sub_10001B8EC(a1, (uint64_t)v35);
            if (v36 != 2 || v35[0] != 2)
              goto LABEL_21;
            v21 = v35[2];
            v20 = v35[3];
            v22 = v35[1];
          }
          else
          {
            sub_10001B8EC(a1, (uint64_t)v37);
            if (v38 != 2 || v37[0] != 3)
              goto LABEL_21;
            v21 = v37[2];
            v20 = v37[3];
            v22 = v37[1];
          }
          if (!(v21 | v20 | v22))
            return v5;
        }
        else
        {
          sub_10001B8EC(a1, (uint64_t)v31);
          if (v32 == 2)
          {
            v23 = vorrq_s8(v31[0], v31[1]);
            if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)))
              return v5;
          }
        }
      }
      else
      {
        sub_10001B8EC(a1, (uint64_t)v25);
        if (v26)
          v16 = 0;
        else
          v16 = v10 == v25[0];
        if (v16)
          return v5;
      }
LABEL_21:
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_1000365D0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

void sub_100036670(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4;

  v4 = String._bridgeToObjectiveC()();
  sub_100005DA4();
  objc_msgSend(a3, "setText:", v4);
  sub_100037044(v4);
}

uint64_t sub_1000366B4(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, "text");

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void sub_100036720(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4;

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "setText:", v4);

}

uint64_t sub_100036764()
{
  return os_variant_has_internal_ui("com.apple.sidecar");
}

uint64_t sub_100036770()
{
  uint64_t v0;

  sub_1000190E4();
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100036790()
{
  uint64_t v0;

  sub_1000190E4();
  sub_10003742C();
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000367BC()
{
  uint64_t v0;

  sub_10002D838(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(double *)(v0 + 40));
}

void sub_1000367D0()
{
  uint64_t v0;

  sub_1000301E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

const char *sub_1000367D8(int a1)
{
  if ((a1 - 1) > 0xA)
    return "?";
  else
    return off_10006BA38[a1 - 1];
}

uint64_t sub_100036800()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100036824()
{
  uint64_t v0;

  return sub_100035178(*(uint64_t (**)(id))(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_100036830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100036840(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100036848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10003742C();
  v0 = sub_100018FA8();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100036860()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

BOOL sub_100036880()
{
  return MGGetFloat32Answer(CFSTR("DeviceCornerRadius"), 0.0) != 0.0;
}

void sub_1000368B0(uint64_t a1, void *a2)
{
  Class isa;

  sub_100018AA4(0, &qword_100078698, CAAnimation_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, "setAnimations:", isa, swift_bridgeObjectRelease(a1).n128_f64[0]);

}

void sub_100036920(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v7;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  objc_msgSend(a4, "addAnimation:forKey:", a1, v7);

}

uint64_t sub_100036988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008414(&qword_1000786A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000369D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036A14(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DisplayMainViewController.UsageSummary(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100036A50(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100035104(a1, *(double *)(v2 + 24), a2, *(_QWORD *)(v2 + 16));
}

id sub_100036A70()
{
  uint64_t v0;

  return sub_10002C56C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100036A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

void sub_100036A9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100037238(a1, a2, a3);
  sub_1000373D8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_100005D94();
}

uint64_t sub_100036AC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  sub_100018CC8();
  v1 = *(_QWORD *)(sub_100008414((uint64_t *)&unk_100078320) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = sub_100009408();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = sub_100018F50();
  if (!sub_100037414(v0 + v3))
    sub_1000370BC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8));
  v10 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + v7 + 8) & ~v7;
  v12 = (v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v11, v5);
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v2 | v7 | 7);
}

void sub_100036BB0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(sub_100008414((uint64_t *)&unk_100078320) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(sub_100009408() - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_100032438(v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, *(_QWORD *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_100036C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100078330;
  if (!qword_100078330)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100078330);
  }
  return result;
}

void sub_100036C74(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, "setFilters:", isa);

}

void sub_100036CD0(void *a1, void *a2)
{
  if (a1)
  {

  }
}

uint64_t sub_100036CFC()
{
  uint64_t v0;

  return sub_100033290(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100036D04()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {

    sub_100019038();
  }
  return swift_deallocObject(v0, 33, 7);
}

id sub_100036D30(id result, void *a2)
{
  id v2;

  if (result)
  {
    v2 = result;
    return a2;
  }
  return result;
}

uint64_t sub_100036D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100019038();
  v1 = sub_100018FA8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100036D80()
{
  uint64_t v0;

  sub_1000329A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100036D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000190E4();
  sub_100019038();
  v0 = sub_100018FA8();
  return swift_deallocObject(v0, v1, v2);
}

id sub_100036DA8(void *a1)
{
  uint64_t v1;

  return sub_100032FA4(a1, *(void **)(v1 + 16));
}

uint64_t sub_100036DB4()
{
  uint64_t v0;

  sub_10003742C();

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100036DDC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

void sub_100036E04(uint64_t a1)
{
  uint64_t v1;

  sub_10003450C(a1, *(void **)(v1 + 16));
}

void sub_100036E0C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  sub_100005D94();
}

void sub_100036E40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_100037238(a1, a2, a3);
  sub_1000373D8(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_100005D94();
}

uint64_t sub_100036EAC()
{
  return 0x697463656E6E6F43;
}

uint64_t sub_100036EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100026E38(a1, a2);
  return Logger.logObject.getter(v2);
}

id sub_100036EF0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  return objc_msgSend(v2, *(SEL *)(v1 + 3848), a1);
}

id sub_100036F04(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3, 0);
}

uint64_t sub_100036F14()
{
  return 1;
}

uint64_t sub_100036F1C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>, uint64_t a3, int a4, __int16 a5, char a6, char a7, char a8)
{
  return swift_dynamicCast(&a7, &a8, a2 + 8, a1, 6);
}

id sub_100036F30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, *(SEL *)(v2 + 3848), v1);
}

id sub_100036F40()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v0, *(SEL *)(v3 + 600), v1, v2);
}

uint64_t sub_100036F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5)
{
  Swift::String v5;
  Swift::String v7;

  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v7._countAndFlagsBits = 0xD000000000000016;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, v5, v7)._countAndFlagsBits;
}

void sub_100036F68(id a1)
{

}

NSString sub_100036F70()
{
  return String._bridgeToObjectiveC()();
}

NSString sub_100036F94()
{
  return String._bridgeToObjectiveC()();
}

void sub_100036FB4(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, __n128 a12, char a13)
{
  a11 = a10;
  a12 = a1;
  a13 = 1;
  sub_1000340E8((uint64_t)&a11, 1);
}

uint64_t sub_100036FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v2 + v1) = a1;
  return swift_unknownObjectRelease(v3);
}

void sub_100036FF0(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;

  sub_100018AA4(0, a2, v2);
}

void sub_100036FFC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

void sub_100037004(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_100032FEC(a1, a2, v2);
}

uint64_t sub_10003702C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  uint64_t v11;

  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, v11, a3);
}

_QWORD *sub_100037038(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, *(_QWORD *)(v1 + 40));
}

void sub_100037044(id a1)
{

}

uint64_t sub_1000370A8(uint64_t a1)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1000370BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

Swift::Int sub_1000370C4()
{
  return Hasher._finalize()();
}

void sub_1000370CC()
{
  void *v0;

}

id sub_1000370F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;

  return objc_msgSendSuper2(&a9, a2, v9);
}

uint64_t sub_1000370FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100018974(v1, 1, 1, a1);
}

uint64_t sub_100037110()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

double sub_100037118()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v0;
  v5.origin.y = v1;
  v5.size.width = v2;
  v5.size.height = v3;
  return CGRectGetHeight(v5);
}

id sub_10003712C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  return objc_msgSend(v7, *(SEL *)(v6 + 704), v5, a4, a5, 0);
}

uint64_t sub_100037140@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_unknownObjectWeakLoadStrong(v1 + a1);
}

void sub_100037148(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;

  sub_100018AA4(0, a2, v2);
}

uint64_t sub_100037154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000189E4(a1 + a3, a2);
}

__n128 *sub_10003715C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x746E656469;
  result[2].n128_u64[1] = 0xE500000000000000;
  return result;
}

uint64_t sub_100037178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = a2;
  return swift_unknownObjectWeakAssign(a1, v2);
}

uint64_t sub_100037184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 120, v1, v2);
}

id sub_100037198(id a1, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(a1, a2, v2, v3);
}

id sub_1000371B8()
{
  void *v0;
  void *v1;

  return sub_100036D30(v0, v1);
}

id sub_1000371C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;
  uint64_t v10;

  return objc_msgSendSuper2(&a9, a2, v10, v9);
}

BOOL sub_1000371D8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000371E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0);
}

BOOL sub_100037208(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_100037218(_QWORD *a1@<X8>)
{
  *a1 = 0x6C69636E6570;
  a1[1] = 0xE600000000000000;
}

void sub_100037230()
{
  sub_100035AC8();
}

uint64_t sub_100037238(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_100008414(a3);
}

uint64_t sub_100037248()
{
  return type metadata accessor for DisplayMainViewController(0);
}

uint64_t sub_100037260()
{
  return 0;
}

BOOL sub_10003726C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10003727C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 32) = a1;
  return specialized Array._endMutation()(a1, a2, a3);
}

id sub_10003728C()
{
  Class *v0;

  return objc_allocWithZone(*v0);
}

uint64_t sub_100037294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void sub_1000372A4(uint64_t a1)
{
  sub_100029A74(a1);
}

id sub_1000372AC(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t sub_1000372B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_1000372BC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  return objc_msgSend(v0, *(SEL *)(v2 + 3848), v1);
}

uint64_t sub_1000372CC(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  return sub_10000B26C(*(_QWORD *)(v2 + 56) + 32 * a1, (uint64_t)va);
}

uint64_t sub_1000372DC()
{
  uint64_t v0;

  return swift_release(v0);
}

id sub_1000372E4(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0, 0);
}

uint64_t sub_1000372F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1000372FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

id sub_100037304(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return objc_msgSend(a1, a2, a10, 0);
}

NSNumber sub_100037310()
{
  return Double._bridgeToObjectiveC()();
}

id sub_100037318(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 0.0);
}

id sub_100037320(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2);
}

uint64_t sub_100037328()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

id sub_100037340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return *(id *)(v1 + a1);
}

NSNumber sub_100037348@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 88) = a1;
  return Bool._bridgeToObjectiveC()();
}

uint64_t sub_100037354(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10000EC54(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t sub_100037360()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(v0);
}

void sub_10003736C(uint64_t a1)
{
  sub_10002D540(a1, a1);
}

uint64_t sub_1000373AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSBundle a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Swift::String v8;

  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&a1, *(Swift::String_optional *)&a3, a5, v8, *(Swift::String *)&a8)._countAndFlagsBits;
}

id sub_1000373B8(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, *(SEL *)(v1 + 3720));
}

id sub_1000373C0()
{
  Class *v0;

  return objc_allocWithZone(*v0);
}

uint64_t sub_1000373C8()
{
  uint64_t v0;

  return swift_getObjectType(v0);
}

uint64_t sub_1000373D8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

id sub_1000373E4(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000373EC()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_1000373F8()
{
  uint64_t v0;
  uint64_t v1;

  return *(_QWORD *)(v0 + v1);
}

void sub_100037404()
{
  sub_100033974();
}

void sub_10003740C(uint64_t a1)
{
  sub_1000340E8(a1, 0);
}

uint64_t sub_100037414(uint64_t a1)
{
  uint64_t v1;

  return sub_100018930(a1, 1, v1);
}

void sub_100037420()
{
  void *v0;

}

uint64_t sub_10003742C()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100037434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100018974(a1, a2, 1, v2);
}

id sub_100037440(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id sub_100037448(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_100037450()
{
  return sub_100035B4C(3);
}

void sub_100037458()
{
  void *v0;

}

id sub_100037460()
{
  return sub_10000F720(1);
}

double sub_10003746C()
{
  double v0;

  return v0;
}

void *sub_100037480@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

uint64_t sub_10003748C()
{
  uint64_t v0;

  return swift_errorRetain(v0);
}

uint64_t sub_100037494()
{
  uint64_t v0;

  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_1000374A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = _swiftEmptyArrayStorage;
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = v1;
  v3 = sub_100008414((uint64_t *)&unk_100077A10);
  sub_1000084BC((unint64_t *)&qword_100077CA0, (uint64_t *)&unk_100077A10);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v6, v3, v4, v0, v2);
}

BOOL sub_10003754C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_100037578(uint64_t result)
{
  _QWORD *v1;

  *v1 |= result;
  return result;
}

id sub_100037588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSString v4;
  id v5;

  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(v2), "imageNamed:", v4);

  return v5;
}

_QWORD *sub_1000375E8(uint64_t a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  objc_super v22;
  Swift::String v23;

  sub_10001B8EC(a1, (uint64_t)v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier);
  sub_100036E0C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B928);
  v22.receiver = v1;
  v22.super_class = (Class)_s6ButtonCMa();
  v3 = objc_msgSendSuper2(&v22, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10001F668();
  v5 = v4;
  v7 = v6;
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = v3;
  v10 = objc_msgSend(v8, "mainBundle");
  v23._object = (void *)0xE600000000000000;
  v11._countAndFlagsBits = v5;
  v11._object = v7;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0x6E6F74747562;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v23);
  swift_bridgeObjectRelease(v7);

  sub_100038C00(v13._countAndFlagsBits, (uint64_t)v13._object, v9);
  sub_10000F6CC(v14, (unint64_t *)&unk_100078890, UIImage_ptr);
  sub_10001F4D8();
  v16 = v15;
  v18 = v17;
  v19 = v9;
  sub_100036E0C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B978);
  v20 = sub_100037588(v16, v18);
  sub_100038C9C((uint64_t)v20, "setImage:forState:");

  (*(void (**)(void))((swift_isaMask & *v19) + 0x60))();
  return v19;
}

void sub_10003779C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100038C50((uint64_t)"Fatal error", a2, a3, a4, 0x8000000100055EC0, (uint64_t)"ContinuityDisplay/SidebarButton.swift", a7, a8, 29, 0);
  __break(1u);
}

void sub_1000377E8()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  NSString v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;

  objc_msgSend(v0, "setContentEdgeInsets:", 0.0, 8.0, 0.0, 8.0);
  v1 = (void *)objc_opt_self(UIColor);
  v2 = objc_msgSend(v1, "blackColor");
  sub_100038CAC((uint64_t)v2, "setBackgroundColor:");

  v3 = objc_msgSend(v0, "titleLabel");
  if (v3)
  {
    v4 = v3;
    v5 = (void *)objc_opt_self(UIFont);
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "systemFontOfSize:weight:design:", v6, 15.0, 0.0);

    objc_msgSend(v4, "setFont:", v7);
  }
  v8 = objc_msgSend(v1, "whiteColor");
  sub_100038CAC((uint64_t)v8, "setTintColor:");

  sub_100038C80(v9, "setAdjustsImageWhenHighlighted:");
  v10 = objc_msgSend(v1, "redColor");
  objc_msgSend(v0, "setTitleShadowColor:forState:", v10, 4);

  v11 = objc_msgSend(v0, "layer");
  sub_10001BAAC(v11, "setMasksToBounds:");
  objc_msgSend(v11, "setCornerRadius:", 6.0);

}

id sub_100037A70(SEL *a1)
{
  void *v1;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)_s6ButtonCMa();
  return objc_msgSendSuper2(&v4, *a1);
}

void sub_100037AF0(char a1, SEL *a2)
{
  void *v2;
  void *v5;
  id v6;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)_s6ButtonCMa();
  objc_msgSendSuper2(&v7, *a2, a1 & 1);
  v5 = (void *)objc_opt_self(CATransaction);
  v6 = v2;
  objc_msgSend(v5, "begin");
  sub_10001BAAC(v5, "setDisableActions:");
  sub_100037B7C();
  objc_msgSend(v5, "commit");

  sub_100036FE0();
}

void sub_100037B7C()
{
  void *v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  id v3;
  double v4;
  double v5;
  id v6;
  void *v7;

  v1 = objc_msgSend(v0, "isSelected");
  v2 = objc_msgSend(v0, "isHighlighted");
  if ((v1 & 1) == 0)
  {
    if ((v2 & 1) == 0)
    {
      v6 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
      goto LABEL_9;
    }
    v3 = objc_allocWithZone((Class)UIColor);
    goto LABEL_6;
  }
  v3 = objc_allocWithZone((Class)UIColor);
  if ((v2 & 1) == 0)
  {
LABEL_6:
    v4 = 1.0;
    v5 = 0.25;
    goto LABEL_7;
  }
  v4 = 1.0;
  v5 = 0.5;
LABEL_7:
  v6 = objc_msgSend(v3, "initWithWhite:alpha:", v4, v5);
LABEL_9:
  v7 = v6;
  objc_msgSend(v0, "setBackgroundColor:");
  sub_100020CEC(v7);
}

id sub_100037C3C()
{
  void *v0;

  return objc_msgSend(v0, "bounds");
}

void sub_100037CA4()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.Button", 24, "init(frame:)", 12, 0);
  __break(1u);
}

id sub_100037CDC()
{
  return sub_1000350C8(_s6ButtonCMa);
}

uint64_t _s6ButtonCMa()
{
  return objc_opt_self(_TtCO17ContinuityDisplay7Sidebar6Button);
}

uint64_t sub_100037D24(uint64_t a1, uint64_t a2)
{
  return sub_100037D48(a1, a2, &OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downUpHandler);
}

uint64_t sub_100037D30(uint64_t a1, uint64_t a2)
{
  return sub_100037D48(a1, a2, &OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_stickyHandler);
}

uint64_t sub_100037D3C(uint64_t a1, uint64_t a2)
{
  return sub_100037D48(a1, a2, &OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_tapHandler);
}

uint64_t sub_100037D48(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(v3 + *a3);
  v5 = v4[1];
  *v4 = a1;
  v4[1] = a2;
  return swift_release(v5);
}

void sub_100037D60(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_doubleTapRecognizer);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_doubleTapRecognizer) = a1;

}

void sub_100037D74()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  _QWORD v4[4];

  sub_1000377E8();
  v4[3] = _s12StickyButtonCMa();
  v4[0] = v0;
  objc_allocWithZone((Class)UITapGestureRecognizer);
  v1 = v0;
  v2 = sub_100038B14(v4, (uint64_t)"_keyboardButtonGestureTriggeredWithRecognizer:");
  sub_100038C80((uint64_t)objc_msgSend(v2, "setNumberOfTapsRequired:", 2), "setDelaysTouchesEnded:");
  objc_msgSend(v2, "setDelegate:", v1);
  v3 = v2;
  sub_100037D60((uint64_t)v2);
  objc_msgSend(v1, "addGestureRecognizer:", v3);
  objc_msgSend(v1, "addTarget:action:forControlEvents:", v1, "_buttonDownWithSender:", 1);
  objc_msgSend(v1, "addTarget:action:forControlEvents:", v1, "_buttonUpWithSender:", 192);

}

void sub_100037E78(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void *v9;

  v2 = v1;
  v3 = objc_msgSend(a1, "view");
  if (v3)
  {
    v9 = v3;
    v4 = _s12StickyButtonCMa();
    v5 = (void *)swift_dynamicCastClass(v9, v4);
    if (v5)
    {
      sub_10001BAAC(v5, "setSelected:");
      sub_1000380A8();
      v7 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_stickyHandler);
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_stickyHandler + 8);
      swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_stickyHandler + 8));
      v7(v2);
      swift_release(v6);
      v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer);
      if (v8)
      {
        swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer));
        swift_unknownObjectRetain(v8);
        OS_dispatch_source.cancel()();
        swift_unknownObjectRelease(v8);
      }
    }
    sub_100020CEC(v9);
  }
  else
  {
    sub_100036FE0();
  }
}

void sub_100037F98()
{
  char *v0;
  char *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = v0;
  *(_QWORD *)&v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downTime] = mach_absolute_time();
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer];
  if (v3)
  {
    swift_getObjectType(v3);
    swift_unknownObjectRetain(v3);
    OS_dispatch_source.cancel()();
    *(_QWORD *)&v2 = swift_unknownObjectRelease(v3).n128_u64[0];
  }
  if (objc_msgSend(v1, "isSelected", v2))
  {
    v4 = OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_doubleTapRecognizer;
    v5 = *(void **)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_doubleTapRecognizer];
    if (v5 && (objc_msgSend(v5, "setEnabled:", 0), (v6 = *(void **)&v1[v4]) != 0))
      objc_msgSend(v6, "setEnabled:", 1);
    else
      sub_10000C644();
  }
  else
  {
    sub_1000380A8();
  }
}

void sub_1000380A8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__buttonDown) & 1) != 0)
  {
    sub_10000C644();
  }
  else
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__buttonDown) = 1;
    sub_100038C8C(OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downUpHandler);
    v2(v1, 1);
    sub_100038C74(v0);
  }
}

void sub_100038100()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__buttonDown) == 1)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__buttonDown) = 0;
    sub_100038C8C(OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downUpHandler);
    v2(v1, 0);
    sub_100038C74(v0);
  }
  else
  {
    sub_10000C644();
  }
}

void sub_100038158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(_QWORD *, uint64_t);
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD aBlock[5];
  uint64_t v75;

  v1 = type metadata accessor for DispatchTimeInterval(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6, v7);
  v73 = (uint64_t)&v61 - v8;
  v72 = type metadata accessor for DispatchWallTime(0);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72, v9);
  v69 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v71 = (char *)&v61 - v13;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v14 - 8);
  v68 = v14;
  __chkstk_darwin(v14, v15);
  sub_100027248();
  v18 = v17 - v16;
  v19 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v19 - 8);
  v66 = v19;
  __chkstk_darwin(v19, v20);
  sub_100027248();
  v23 = v22 - v21;
  v24 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  sub_100027248();
  v29 = v28 - v27;
  sub_100038C80(v30, "setSelected:");
  sub_100038100();
  v31 = *(void **)(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_doubleTapRecognizer);
  if (v31)
  {
    objc_msgSend(v31, "maximumIntervalBetweenSuccessiveTaps");
    v33 = v32;
    mach_absolute_time();
    HostTime.nanoseconds.getter();
    v35 = (double)v34 * 0.000000001;
    HostTime.nanoseconds.getter();
    if (v35 < v33 + (double)(unint64_t)v36 * 0.000000001)
    {
      sub_10000F6CC(v36, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
      v63 = v5;
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_1000057B8(&qword_100077E50, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
      v64 = v1;
      v38 = v37;
      v39 = sub_100008414(&qword_100077E58);
      v62 = v2;
      v40 = v39;
      sub_1000084BC(&qword_100077E60, &qword_100077E58);
      v42 = dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v40, v41, v24, v38);
      sub_10000F6CC(v42, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
      v43 = (void *)static OS_dispatch_queue.main.getter();
      v44 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v29, v43);

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, v24);
      ObjectType = swift_getObjectType(v44);
      v46 = swift_allocObject(&unk_10006BAC8, 24, 7);
      swift_unknownObjectWeakInit(v46 + 16, v0);
      aBlock[4] = sub_100038AF4;
      v75 = v46;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10000C66C;
      aBlock[3] = &unk_10006BAE0;
      v47 = _Block_copy(aBlock);
      v48 = swift_retain(v46);
      static DispatchQoS.unspecified.getter(v48);
      sub_1000374A0();
      OS_dispatch_source.setEventHandler(qos:flags:handler:)(v23, v18, v47, ObjectType);
      _Block_release(v47);
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v18, v68);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v23, v66);
      v49 = v75;
      swift_release(v46);
      v50 = swift_release(v49);
      v51 = v69;
      static DispatchWallTime.now()(v50);
      v52 = v71;
      + infix(_:_:)(v51, 0.5);
      v53 = *(void (**)(char *, uint64_t))(v70 + 8);
      v54 = v72;
      v53(v51, v72);
      v55 = v73;
      sub_100015270(v73);
      v56 = v63;
      sub_1000152B4(v63);
      OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v52, v55, v56, ObjectType);
      v57 = *(void (**)(_QWORD *, uint64_t))(v62 + 8);
      v58 = v56;
      v59 = v64;
      v57(v58, v64);
      v57((_QWORD *)v55, v59);
      v53(v52, v54);
      OS_dispatch_source.activate()();
      v60 = swift_unknownObjectRetain(v44);
      sub_1000386B8(v60);
      swift_unknownObjectRelease(v44);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000385F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  void (*v5)(void *);
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v5 = *(void (**)(void *))(result + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_tapHandler);
    v4 = *(_QWORD *)(result + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_tapHandler + 8);
    swift_retain(v4);
    v5(v3);

    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000386B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer);
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer) = a1;
  return swift_unknownObjectRelease(v2);
}

_QWORD *sub_1000386D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downUpHandler);
  *v2 = VideoStream.qosMonitorServerDidDie(_:);
  v2[1] = 0;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_stickyHandler);
  *v3 = VideoStream.qosMonitorServerDidDie(_:);
  v3[1] = 0;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_tapHandler);
  *v4 = VideoStream.qosMonitorServerDidDie(_:);
  v4[1] = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_doubleTapRecognizer) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__buttonDown) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downTime) = 0;
  return sub_1000375E8(a1);
}

id sub_10003874C(void *a1)
{
  _BYTE *v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  objc_super v8;

  v3 = &v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downUpHandler];
  *v3 = VideoStream.qosMonitorServerDidDie(_:);
  v3[1] = 0;
  v4 = &v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_stickyHandler];
  *v4 = VideoStream.qosMonitorServerDidDie(_:);
  v4[1] = 0;
  v5 = &v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_tapHandler];
  *v5 = VideoStream.qosMonitorServerDidDie(_:);
  v5[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_doubleTapRecognizer] = 0;
  v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__buttonDown] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downTime] = 0;
  v8.receiver = v1;
  v8.super_class = (Class)_s12StickyButtonCMa();
  v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

double sub_100038834()
{
  uint64_t v0;
  double result;

  sub_100038C6C(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_downUpHandler);
  sub_100038C6C(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_stickyHandler);
  sub_100038C6C(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton_tapHandler);

  *(_QWORD *)&result = swift_unknownObjectRelease(*(_QWORD *)(v0
                                                            + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar12StickyButton__tapTimer)).n128_u64[0];
  return result;
}

id sub_100038890()
{
  return sub_1000350C8(_s12StickyButtonCMa);
}

uint64_t _s12StickyButtonCMa()
{
  return objc_opt_self(_TtCO17ContinuityDisplay7Sidebar12StickyButton);
}

void sub_100038928()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0[OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar11StateButton_alternateState] = 0;

  sub_100038C50((uint64_t)"Fatal error", v1, v2, v3, 0x8000000100055EC0, (uint64_t)"ContinuityDisplay/SidebarButton.swift", v4, v5, 182, 0);
  __break(1u);
}

void sub_100038990()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v9;
  _BYTE v10[40];

  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar11StateButton_alternateState);
  *(_BYTE *)(v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar11StateButton_alternateState) = v1 ^ 1;
  v2 = v0 + OBJC_IVAR____TtCO17ContinuityDisplay7Sidebar6Button_identifier;
  if ((v1 & 1) != 0)
  {
    sub_10001B8EC(v2, (uint64_t)v10);
    sub_10001F4D8();
    v3 = v2;
    v5 = v4;
LABEL_15:
    sub_10000F6CC(v2, (unint64_t *)&unk_100078890, UIImage_ptr);
    v9 = sub_100037588(v3, v5);
    sub_100038C9C((uint64_t)v9, "setImage:forState:");

    return;
  }
  if (*(_BYTE *)(v2 + 32) == 2)
  {
    v6 = *(_QWORD *)(v2 + 16) | *(_QWORD *)(v2 + 24) | *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)v2 == 2 && v6 == 0)
    {
      v5 = 0xE800000000000000;
      v3 = 0x6B636F4465646968;
      goto LABEL_15;
    }
    if (*(_QWORD *)v2 == 3 && v6 == 0)
    {
      v5 = 0xEB00000000726142;
      v3 = 0x756E654D65646968;
      goto LABEL_15;
    }
  }
  __break(1u);
}

id sub_100038AA4()
{
  return sub_1000350C8(_s11StateButtonCMa);
}

uint64_t _s11StateButtonCMa()
{
  return objc_opt_self(_TtCO17ContinuityDisplay7Sidebar11StateButton);
}

uint64_t sub_100038AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectWeakDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_100038AF4()
{
  uint64_t v0;

  return sub_1000385F0(v0);
}

uint64_t sub_100038AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100038B0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_100038B14(_QWORD *a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v14;

  v4 = a1[3];
  if (v4)
  {
    v6 = sub_10000BE70(a1, a1[3]);
    v7 = *(_QWORD *)(v4 - 8);
    v8 = __chkstk_darwin(v6, v6);
    v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v10, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v4);
    sub_10000B910(a1);
  }
  else
  {
    v11 = 0;
  }
  v12 = objc_msgSend(v2, "initWithTarget:action:", v11, a2);
  swift_unknownObjectRelease(v11);
  return v12;
}

void sub_100038C00(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v5;

  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(a3, "setAccessibilityLabel:", v5);

}

uint64_t sub_100038C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, 0xD000000000000025, a5, a6, 37, 2, a9, a10);
}

uint64_t sub_100038C6C@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t sub_100038C74(uint64_t a1)
{
  return swift_release(a1);
}

id sub_100038C80(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_100038C8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + a1 + 8));
}

id sub_100038C9C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3, 0);
}

id sub_100038CAC(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

char *sub_100038CB8(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  NSNumber v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t inited;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  char *v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[7];
  objc_super v74;
  __int128 v75;
  __int128 v76;

  v3 = &v1[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_delegate];
  *((_QWORD *)v3 + 1) = 0;
  swift_unknownObjectWeakInit(v3, 0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_timeSyncClock] = 0;
  v4 = OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pencilInteraction;
  v5 = objc_allocWithZone((Class)UIPencilInteraction);
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, "init");
  v7 = OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pan;
  v8 = objc_allocWithZone((Class)UIPanGestureRecognizer);
  *(_QWORD *)&v6[v7] = sub_100039B44((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, v70, v73[0]);
  v16 = OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pinch;
  v17 = objc_allocWithZone((Class)UIPinchGestureRecognizer);
  *(_QWORD *)&v6[v16] = sub_100039B44((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24, v71, v73[0]);
  v25 = OBJC_IVAR____TtC17ContinuityDisplay15TouchController_rotate;
  v75 = 0u;
  v76 = 0u;
  v26 = objc_allocWithZone((Class)UIRotationGestureRecognizer);
  *(_QWORD *)&v6[v25] = sub_100039B44((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33, v72, v73[0]);
  v34 = OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchReport;
  type metadata accessor for HIDReport();
  HIDReport.__allocating_init(count:)(23);
  v36 = v35;
  swift_retain(v35);
  v37 = MultitouchReport.reportID.unsafeMutableAddressor();
  HIDReport.subscript.setter(*v37, 0);
  swift_release(v36);
  *(_QWORD *)&v6[v34] = v36;
  v38 = &v6[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchState];
  *(_OWORD *)v38 = 0u;
  *((_OWORD *)v38 + 1) = 0u;
  *((_QWORD *)v38 + 4) = 0;
  v38[40] = 1;
  *((_QWORD *)v38 + 6) = 0;
  *((_QWORD *)v38 + 7) = 0;
  v38[64] = 1;
  *((_QWORD *)v38 + 9) = 0;
  *((_QWORD *)v38 + 10) = 0;
  v38[88] = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_view] = a1;
  v39 = a1;

  v74.receiver = v6;
  v74.super_class = (Class)type metadata accessor for TouchController();
  v40 = objc_msgSendSuper2(&v74, "init");
  v41 = UIApp;
  if (UIApp)
  {
    v42 = type metadata accessor for App();
    v43 = swift_dynamicCastClass(v41, v42);
    if (v43)
      swift_unknownObjectWeakAssign(v43 + OBJC_IVAR___App_touchController, v40);
  }
  v44 = (char *)v40;
  sub_10001BAAC(v39, "setMultipleTouchEnabled:");
  sub_10001BAAC(v39, "setUserInteractionEnabled:");
  v45 = sub_100008414((uint64_t *)&unk_100078650);
  v46 = swift_allocObject(v45, 40, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100058900;
  v47.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(v46 + 32) = v47;
  *(_QWORD *)&v75 = v46;
  specialized Array._endMutation()(v47.super.super.isa, v48, v49);
  v50 = v75;
  inited = swift_initStackObject(v45, v73);
  *(_OWORD *)(inited + 16) = xmmword_100058AF0;
  v52 = *(void **)&v44[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pan];
  *(_QWORD *)(inited + 32) = v52;
  v53 = OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pinch;
  v54 = *(void **)&v44[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pinch];
  *(_QWORD *)(inited + 40) = v54;
  v55 = *(void **)&v44[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_rotate];
  *(_QWORD *)(inited + 48) = v55;
  *(_QWORD *)&v75 = inited;
  specialized Array._endMutation()(inited, v56, v57);
  v58 = v75;
  v59 = v39;
  v60 = v44;
  swift_bridgeObjectRetain(v50);
  v61 = v52;
  v62 = v54;
  v63 = v55;
  sub_100039048(v58, v50, v60, v59);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v58);
  v65 = sub_100039BB4(v64, "setMinimumNumberOfTouches:");
  sub_100039BB4((uint64_t)v65, "setMaximumNumberOfTouches:");
  sub_10001BAAC(*(id *)&v44[v53], "_setEndsOnSingleTouch:");
  v66 = *(void **)&v60[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pencilInteraction];
  objc_msgSend(v66, "setDelegate:", v60);
  sub_10001BAAC(v66, "setEnabled:");
  v67 = *(id *)&v60[OBJC_IVAR____TtC17ContinuityDisplay15TouchController_view];
  v68 = v66;
  objc_msgSend(v67, "addInteraction:", v68);

  return v60;
}

void sub_100039048(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
         : *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      sub_100039AB4();
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v10, "setAllowedTouchTypes:", isa);

      objc_msgSend(v10, "setCancelsTouchesInView:", 0);
      objc_msgSend(v10, "setDelegate:", a3);
      objc_msgSend(a4, "addGestureRecognizer:", v10);

      ++v8;
      if (v11 == v7)
        goto LABEL_9;
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_9:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);

}

BOOL sub_1000391B4(double a1, double a2, double a3, double a4)
{
  return a2 == a4 && a1 == a3;
}

BOOL sub_1000391C8(double *a1, double *a2)
{
  return sub_1000391B4(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1000391D4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      return 0;
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24) || *(double *)(a1 + 32) != *(double *)(a2 + 32))
      return 0;
  }
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
    return 0;
  v3 = *(_BYTE *)(a2 + 64);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 64))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 56) != *(double *)(a2 + 56))
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a2 + 72))
    return 0;
  v4 = *(_BYTE *)(a2 + 88);
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 88) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 80) != *(double *)(a2 + 80))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  return 1;
}

void sub_1000392B0(void *a1)
{
  uint64_t v1;
  double v2;
  uint64_t Strong;
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  void *v10;
  char *v11;
  double v12;
  void *v13;
  double v14;
  BOOL v15;
  double v16;
  void *v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  SidecarHID::HostTime v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  Swift::UInt64 rawValue;
  _QWORD __src[13];

  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_delegate);
  if (!Strong)
    goto LABEL_32;
  v5 = Strong;
  v41 = *(_QWORD *)(Strong + OBJC_IVAR___DisplayViewController_hidObserver);
  swift_retain(v41);
  swift_unknownObjectRelease(v5);
  v6 = (void *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchState);
  v7 = *(double *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchState);
  v8 = *(double *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchState + 8);
  v43 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchState + 48);
  v44 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchState + 72);
  v9 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_view);
  objc_msgSend(v9, "bounds");
  v10 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pan);
  v11 = (char *)objc_msgSend(v10, "state");
  v45 = 0.0;
  v12 = 0.0;
  if ((unint64_t)(v11 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    sub_10001E698(v10, "locationInView:");
    v7 = 0.0 / sub_100039B00();
    v8 = v2 / sub_100039B1C();
    sub_10001E698(v10, "translationInView:");
    v45 = 0.0 / sub_100039B00();
    v12 = v2 / sub_100039B1C();
    objc_msgSend(v10, "setTranslation:inView:", v9, 0.0, 0.0);
  }
  v13 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_pinch);
  if ((char *)objc_msgSend(v13, "state") - 1 > (char *)1)
  {
    v16 = 0.0;
    v15 = 1;
  }
  else
  {
    sub_10001E698(v13, "locationInView:");
    v7 = v12 / sub_100039B00();
    v8 = v2 / sub_100039B1C();
    objc_msgSend(v13, "scale");
    v15 = (*(_QWORD *)&v14 & 0x7FF0000000000000) == 0x7FF0000000000000;
    if ((*(_QWORD *)&v14 & 0x7FF0000000000000) == 0x7FF0000000000000)
      v16 = 0.0;
    else
      v16 = v14 + -1.0;
    objc_msgSend(v13, "setScale:", 1.0, v14 + -1.0);
  }
  v17 = *(void **)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_rotate);
  if ((char *)objc_msgSend(v17, "state") - 1 > (char *)1)
  {
    v20 = 0;
    v19 = 1;
  }
  else
  {
    sub_10001E698(v17, "locationInView:");
    v7 = v12 / sub_100039B00();
    v8 = v2 / sub_100039B1C();
    objc_msgSend(v17, "rotation");
    v19 = (v18 & 0x7FF0000000000000) == 0x7FF0000000000000;
    if ((v18 & 0x7FF0000000000000) == 0x7FF0000000000000)
      v20 = 0;
    else
      v20 = v18;
    objc_msgSend(v17, "setRotation:", 0.0);
  }
  *(double *)__src = v7;
  *(double *)&__src[1] = v8;
  __src[2] = v11;
  *(double *)&__src[3] = v45;
  *(double *)&__src[4] = v12;
  v42 = (unint64_t)(v11 - 3);
  LOBYTE(__src[5]) = (unint64_t)(v11 - 3) < 0xFFFFFFFFFFFFFFFELL;
  __src[6] = v43;
  *(double *)&__src[7] = v16;
  LOBYTE(__src[8]) = v15;
  __src[9] = v44;
  __src[10] = v20;
  LOBYTE(__src[11]) = v19;
  if ((sub_1000391D4((uint64_t)v6, (uint64_t)__src) & 1) != 0)
  {
    sub_100039B54();
    swift_release(v21);
    return;
  }
  memcpy(v6, __src, 0x59uLL);
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_multitouchReport);
  if (v7 > 0.0)
    v23 = v7;
  else
    v23 = 0.0;
  if (v23 > 1.0)
    v23 = 1.0;
  v24 = *(_QWORD *)&v23;
  v25 = sub_1000086D0();
  sub_100039BA8(v24, 0, (uint64_t)&type metadata for UInt16, 1);
  sub_100039B80();
  sub_100039BA8(v26, v27, (uint64_t)&type metadata for UInt16, 3);
  MultitouchReport.scale.setter();
  if (!v19)
    v20 = remainder(*(long double *)&v20, 6.28318531);
  v28 = sub_100039A78();
  HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(v20, v19, (uint64_t)&type metadata for Int16, 5, (uint64_t)&type metadata for Int16, v28);
  if (v42 >= 0xFFFFFFFFFFFFFFFELL)
  {
    sub_100039B80();
    sub_100039B30(v33, v34, (uint64_t)&type metadata for Int16, 11);
    sub_100039B80();
  }
  else
  {
    v29 = sub_100039B90();
    sub_100039B30(v29, v30, (uint64_t)&type metadata for Int16, 11);
    v31 = sub_100039B90();
  }
  sub_100039B30(v31, v32, (uint64_t)&type metadata for Int16, 9);
  objc_msgSend(a1, "timestamp");
  v36.rawValue = HostTime.init(nanoseconds:)(v35 * 1000000000.0).rawValue;
  HostTime.nanoseconds.getter();
  v38 = (double)v37 * 0.00001;
  if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v38 <= -9.22337204e18)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v38 < 9.22337204e18)
  {
    v39 = (uint64_t)v38;
    rawValue = v36.rawValue;
    v40 = sub_100008728();
    HIDReport.storeValue<A>(_:to:at:)((uint64_t)&rawValue, (uint64_t)&type metadata for UInt64, 15, (uint64_t)&type metadata for UInt64, v40);
    LOWORD(rawValue) = v39;
    HIDReport.storeValue<A>(_:to:at:)((uint64_t)&rawValue, (uint64_t)&type metadata for UInt16, 13, (uint64_t)&type metadata for UInt16, v25);
    sub_100006530(v22);
    swift_release(v41);
LABEL_32:
    sub_100039B54();
    return;
  }
LABEL_35:
  __break(1u);
}

void sub_100039814()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.TouchController", 33, "init()", 6, 0);
  __break(1u);
}

id sub_10003984C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TouchController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TouchController()
{
  return objc_opt_self(_TtC17ContinuityDisplay15TouchController);
}

uint64_t sub_100039920(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC17ContinuityDisplay15TouchController_delegate);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + OBJC_IVAR___DisplayViewController_hidObserver);
    swift_retain(v6);
    swift_unknownObjectRelease(v5);
    v7 = sub_1000065DC(a2);
    swift_release(v6);
    return v7 & 1;
  }
  return result;
}

void *initializeWithCopy for TouchController.MultitouchState(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x59uLL);
}

uint64_t getEnumTagSinglePayload for TouchController.MultitouchState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TouchController.MultitouchState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 89) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TouchController.MultitouchState()
{
  return &type metadata for TouchController.MultitouchState;
}

unint64_t sub_100039A78()
{
  unint64_t result;

  result = qword_100078978;
  if (!qword_100078978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int16, &type metadata for Int16);
    atomic_store(result, (unint64_t *)&qword_100078978);
  }
  return result;
}

unint64_t sub_100039AB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100078990;
  if (!qword_100078990)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100078990);
  }
  return result;
}

ValueMetadata *type metadata accessor for TouchController.MultitouchState.Point()
{
  return &type metadata for TouchController.MultitouchState.Point;
}

double sub_100039B00()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v0;
  v5.origin.y = v1;
  v5.size.width = v2;
  v5.size.height = v3;
  return CGRectGetWidth(v5);
}

double sub_100039B1C()
{
  CGFloat v0;
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGRect v5;

  v5.origin.x = v0;
  v5.origin.y = v1;
  v5.size.width = v2;
  v5.size.height = v3;
  return CGRectGetHeight(v5);
}

uint64_t sub_100039B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(a1, a2, a3, a4, v5, v4);
}

id sub_100039B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_100038B14((uint64_t *)va, 0);
}

uint64_t sub_100039B90()
{
  return 0;
}

uint64_t sub_100039BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(a1, a2, a3, a4, v5, v4);
}

id sub_100039BB4(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 2);
}

_UNKNOWN **sub_100039BC0()
{
  return &off_100069C30;
}

BOOL static HIDRequest.Request.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void HIDRequest.Request.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

void sub_100039C00(unsigned __int8 a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  Hasher._combine(_:)(a1);
  Hasher._finalize()();
  sub_10003A248();
}

BOOL sub_100039C3C(char *a1, char *a2)
{
  return static HIDRequest.Request.__derived_enum_equals(_:_:)(*a1, *a2);
}

void sub_100039C48()
{
  unsigned __int8 *v0;

  sub_100039C00(*v0);
}

void sub_100039C50(uint64_t a1)
{
  unsigned __int8 *v1;

  HIDRequest.Request.hash(into:)(a1, *v1);
}

void sub_100039C58(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_10003A248();
}

void sub_100039C90(_QWORD *a1@<X8>)
{
  *a1 = &off_100069C30;
}

uint64_t sub_100039CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_edgeConstraints);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_edgeConstraints) = a1;
  return swift_bridgeObjectRelease(v2);
}

id sub_100039CB8(char a1)
{
  _BYTE *v1;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v10;
  objc_super v11;

  *(_QWORD *)&v1[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_edgeConstraints] = _swiftEmptyArrayStorage;
  v1[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 0;
  v1[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_corner] = a1;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for RoundedCornerView();
  v3 = objc_msgSendSuper2(&v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v4 = objc_msgSend(v3, "layer");
  sub_1000085DC(0, (unint64_t *)&unk_100078890, UIImage_ptr);
  v5 = sub_100037588(0x7372656E726F63, 0xE700000000000000);
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "CGImage");

    if (v7)
    {
      v10 = v7;
      type metadata accessor for CGImage(0);
      v6 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(&v10, v8);

    }
    else
    {
      v6 = 0;
    }
  }
  objc_msgSend(v4, "setContents:", v6);
  swift_unknownObjectRelease(v6);
  objc_msgSend(v4, "setContentsCenter:", dbl_1000595F0[a1], dbl_1000595D0[a1], 0.5, 0.5);
  objc_msgSend(v4, "setContentsGravity:", kCAGravityResize);
  objc_msgSend(v4, "setContentsScale:", 2.0);

  return v3;
}

uint64_t sub_100039E78(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  Class isa;
  Class v6;
  uint64_t v7;

  v3 = (void *)objc_opt_self(NSLayoutConstraint);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_edgeConstraints);
  sub_1000085DC(0, (unint64_t *)&qword_1000786D0, NSLayoutConstraint_ptr);
  swift_bridgeObjectRetain(v4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "deactivateConstraints:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

  v6 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "activateConstraints:", v6);

  v7 = swift_bridgeObjectRetain(a1);
  return sub_100039CA0(v7);
}

void sub_100039F40()
{
  _BYTE *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_edgeConstraints] = &_swiftEmptyArrayStorage;
  v0[OBJC_IVAR____TtC17ContinuityDisplay17RoundedCornerView_isHidding] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100055EC0, "ContinuityDisplay/RoundedCornerView.swift", 41, 2, 57, 0);
  __break(1u);
}

void sub_100039FD4()
{
  _swift_stdlib_reportUnimplementedInitializer("ContinuityDisplay.RoundedCornerView", 35, "init(frame:)", 12, 0);
  __break(1u);
}

id sub_10003A00C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RoundedCornerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RoundedCornerView()
{
  return objc_opt_self(_TtC17ContinuityDisplay17RoundedCornerView);
}

uint64_t getEnumTagSinglePayload for RoundedCornerView.Corner(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RoundedCornerView.Corner(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003A140 + 4 * byte_100059505[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003A174 + 4 * byte_100059500[v4]))();
}

uint64_t sub_10003A174(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A17C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A184);
  return result;
}

uint64_t sub_10003A190(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A198);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003A19C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A1A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoundedCornerView.Corner()
{
  return &type metadata for RoundedCornerView.Corner;
}

unint64_t sub_10003A1C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100078A40;
  if (!qword_100078A40)
  {
    v1 = sub_100008478(&qword_100078A48);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100078A40);
  }
  return result;
}

unint64_t sub_10003A20C()
{
  unint64_t result;

  result = qword_100078A50;
  if (!qword_100078A50)
  {
    result = swift_getWitnessTable(&unk_1000595A4, &type metadata for RoundedCornerView.Corner);
    atomic_store(result, (unint64_t *)&qword_100078A50);
  }
  return result;
}

uint64_t sub_10003A254()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC17ContinuityDisplayP33_7C136FB92C27E5DCB1E1224A878EC96D19ResourceBundleClass);
}

Swift::Int32 __swiftcall __logMachError(_:)(Swift::Int32 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint8_t *v26;
  Swift::Int32 result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  type metadata accessor for Logger(0);
  sub_10003CD84();
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v28 - v9;
  if (!a1)
    return a1;
  v11 = mach_error_string(a1);
  if (!v11)
  {
    v22 = Logger.init()();
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)sub_10000F640(12);
      *(_DWORD *)v25 = 134217984;
      if (a1 < 0)
        goto LABEL_12;
      v26 = v25;
      v31 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v25 + 4);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "mach error: [%lx]", v26, 0xCu);
      sub_10000F604((uint64_t)v26);
    }

    (*(void (**)(char *))(v1 + 8))(v6);
    return a1;
  }
  v12 = v11;
  v13 = Logger.init()();
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v14, v15))
  {
LABEL_6:

    (*(void (**)(char *))(v1 + 8))(v10);
    return a1;
  }
  v16 = sub_10000F640(22);
  v29 = sub_10000F640(32);
  v31 = v29;
  *(_DWORD *)v16 = 134218242;
  if ((a1 & 0x80000000) == 0)
  {
    v30 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4);
    *(_WORD *)(v16 + 12) = 2082;
    v18 = String.init(cString:)(v12, v17);
    v20 = v19;
    v30 = sub_10000EC54(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 14);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "mach error: [%lx: %{public}s]", (uint8_t *)v16, 0x16u);
    v21 = v29;
    swift_arrayDestroy(v29, 1);
    sub_10000F604(v21);
    sub_10000F604(v16);
    goto LABEL_6;
  }
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

void *MachPort.null.unsafeMutableAddressor()
{
  return &static MachPort.null;
}

void *MachPort.dead.unsafeMutableAddressor()
{
  return &static MachPort.dead;
}

uint64_t static MachPort.dead.getter()
{
  return 0xFFFFFFFFLL;
}

void sub_10003A558()
{
  static MachPort.bootstrap = bootstrap_port;
}

int *MachPort.bootstrap.unsafeMutableAddressor()
{
  if (qword_10007AA00 != -1)
    swift_once(&qword_10007AA00, sub_10003A558);
  return &static MachPort.bootstrap;
}

uint64_t static MachPort.bootstrap.getter()
{
  return sub_10003B53C(qword_10007AA00, (unsigned int *)&static MachPort.bootstrap);
}

EyeCandyCore::MachPort::Right_optional __swiftcall MachPort.Right.init(rawValue:)(Swift::UInt32 rawValue)
{
  if (rawValue >= 5)
    LOBYTE(rawValue) = 5;
  return (EyeCandyCore::MachPort::Right_optional)rawValue;
}

uint64_t MachPort.Right.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL sub_10003A5E4(char a1, char a2)
{
  return dword_100059B68[a1] == dword_100059B68[a2];
}

Swift::Int sub_10003A608()
{
  unsigned __int8 *v0;

  return sub_10003A610(*v0);
}

Swift::Int sub_10003A610(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int sub_10003A654(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1 | 0x14);
  return Hasher._finalize()();
}

Swift::Int sub_10003A69C(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(dword_100059B68[a1]);
  return Hasher._finalize()();
}

void sub_10003A6EC(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10003A71C(a1, *v1);
}

void sub_10003A6F4(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1 | 0x14);
}

void sub_10003A71C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

void sub_10003A740(uint64_t a1, char a2)
{
  Hasher._combine(_:)(dword_100059B68[a2]);
}

Swift::Int sub_10003A770(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_10003A7C4(a1, *v1);
}

Swift::Int sub_10003A778(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(dword_100059B68[a2]);
  return Hasher._finalize()();
}

Swift::Int sub_10003A7C4(uint64_t a1, unsigned __int8 a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

Swift::Int sub_10003A804(uint64_t a1, char a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(a2 & 1 | 0x14);
  return Hasher._finalize()();
}

EyeCandyCore::MachPort::Right_optional sub_10003A848@<W0>(Swift::UInt32 *a1@<X0>, EyeCandyCore::MachPort::Right_optional *a2@<X8>)
{
  EyeCandyCore::MachPort::Right_optional result;

  result.value = MachPort.Right.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_10003A870@<X0>(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = MachPort.Right.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

EyeCandyCore::MachPort __swiftcall MachPort.init(allocating:)(EyeCandyCore::MachPort::Right allocating)
{
  unsigned __int8 v1;
  kern_return_t v2;
  EyeCandyCore::MachPort result;
  mach_port_name_t name;

  sub_10003CD40();
  v2 = mach_port_allocate(mach_task_self_, v1, &name);
  __logMachError(_:)(v2);
  sub_10003CD98();
  return result;
}

uint64_t MachPort.init(bootstrapCheckIn:)(char *service_name, uint64_t a2, char a3)
{
  kern_return_t v4;
  mach_port_t sp;
  uint64_t (*v7)(char *);
  char *v8;
  char v9;
  mach_port_t *p_sp;

  sp = 0;
  p_sp = &sp;
  v7 = sub_10003C194;
  v8 = &v9;
  if ((a3 & 1) != 0)
  {
    if (!((unint64_t)service_name >> 32))
    {
      if (service_name >> 11 != 27)
      {
        if (service_name >> 16 <= 0x10)
        {
          sub_10003BEB8(service_name, (uint64_t (*)(uint64_t *))sub_10003C19C);
          return sp;
        }
        __break(1u);
      }
      __break(1u);
    }
    goto LABEL_11;
  }
  if (!service_name)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (qword_10007AA00[0] != -1)
LABEL_12:
    swift_once(qword_10007AA00, sub_10003A558);
  v4 = bootstrap_check_in(static MachPort.bootstrap, service_name, &sp);
  __logMachError(_:)(v4);
  return sp;
}

uint64_t sub_10003AA08(char *service_name, mach_port_t *sp)
{
  kern_return_t v4;

  if (qword_10007AA00[0] != -1)
    swift_once(qword_10007AA00, sub_10003A558);
  v4 = bootstrap_check_in(static MachPort.bootstrap, service_name, sp);
  return __logMachError(_:)(v4);
}

Swift::Void __swiftcall MachPort.deallocate()()
{
  mach_port_name_t v0;
  kern_return_t v1;

  v1 = mach_port_deallocate(mach_task_self_, v0);
  __logMachError(_:)(v1);
}

Swift::Void __swiftcall MachPort.destroy()()
{
  mach_port_name_t v0;
  kern_return_t v1;

  v1 = mach_port_destroy(mach_task_self_, v0);
  __logMachError(_:)(v1);
}

Swift::Void __swiftcall MachPort.modRefs(_:_:)(EyeCandyCore::MachPort::Right a1, Swift::Int32 a2)
{
  mach_port_name_t v2;
  kern_return_t v3;

  v3 = mach_port_mod_refs(mach_task_self_, v2, a1, a2);
  __logMachError(_:)(v3);
}

EyeCandyCore::MachPort::TypeName_optional __swiftcall MachPort.TypeName.init(rawValue:)(Swift::UInt32 rawValue)
{
  EyeCandyCore::MachPort::TypeName_optional v1;

  if (rawValue == 21)
    v1.value = EyeCandyCore_MachPort_TypeName_makeSendOnce;
  else
    v1.value = EyeCandyCore_MachPort_TypeName_unknownDefault;
  if (rawValue == 20)
    return 0;
  else
    return v1;
}

uint64_t MachPort.TypeName.rawValue.getter(char a1)
{
  return a1 & 1 | 0x14u;
}

Swift::Int sub_10003AB08()
{
  char *v0;

  return sub_10003A654(*v0);
}

void sub_10003AB10(uint64_t a1)
{
  char *v1;

  sub_10003A6F4(a1, *v1);
}

Swift::Int sub_10003AB18(uint64_t a1)
{
  char *v1;

  return sub_10003A804(a1, *v1);
}

EyeCandyCore::MachPort::TypeName_optional sub_10003AB20@<W0>(Swift::UInt32 *a1@<X0>, EyeCandyCore::MachPort::TypeName_optional *a2@<X8>)
{
  EyeCandyCore::MachPort::TypeName_optional result;

  result.value = MachPort.TypeName.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_10003AB48@<X0>(_DWORD *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = MachPort.TypeName.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

EyeCandyCore::MachPort __swiftcall MachPort.insertRight(_:)(EyeCandyCore::MachPort::TypeName a1)
{
  mach_port_name_t v1;
  EyeCandyCore::MachPort v2;
  kern_return_t inserted;

  v2.name = v1;
  inserted = mach_port_insert_right(mach_task_self_, v1, v1, a1 & 1 | 0x14);
  __logMachError(_:)(inserted);
  if (inserted)
    return 0;
  else
    return v2;
}

BOOL MachPort.isValid.getter(int a1)
{
  return (a1 - 1) < 0xFFFFFFFE;
}

EyeCandyCore::MachPort::Notification_optional __swiftcall MachPort.Notification.init(rawValue:)(Swift::Int32 rawValue)
{
  if ((rawValue - 65) >= 8)
    return (EyeCandyCore::MachPort::Notification_optional)6;
  else
    return (EyeCandyCore::MachPort::Notification_optional)(0x504030206060100uLL >> (8 * (rawValue - 65)));
}

uint64_t MachPort.Notification.rawValue.getter(char a1)
{
  return dword_100059B68[a1];
}

BOOL sub_10003AC0C(char *a1, char *a2)
{
  return sub_10003A5E4(*a1, *a2);
}

Swift::Int sub_10003AC18()
{
  char *v0;

  return sub_10003A69C(*v0);
}

void sub_10003AC20(uint64_t a1)
{
  char *v1;

  sub_10003A740(a1, *v1);
}

Swift::Int sub_10003AC28(uint64_t a1)
{
  char *v1;

  return sub_10003A778(a1, *v1);
}

EyeCandyCore::MachPort::Notification_optional sub_10003AC30@<W0>(Swift::Int32 *a1@<X0>, EyeCandyCore::MachPort::Notification_optional *a2@<X8>)
{
  EyeCandyCore::MachPort::Notification_optional result;

  result.value = MachPort.Notification.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_10003AC58@<X0>(_DWORD *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = MachPort.Notification.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void *MachPort.TypeMask.send.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.send;
}

uint64_t static MachPort.TypeMask.send.getter()
{
  return 0x10000;
}

void *MachPort.TypeMask.receive.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.receive;
}

uint64_t static MachPort.TypeMask.receive.getter()
{
  return 0x20000;
}

void *MachPort.TypeMask.sendOnce.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.sendOnce;
}

uint64_t static MachPort.TypeMask.sendOnce.getter()
{
  return 0x40000;
}

void *MachPort.TypeMask.portSet.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.portSet;
}

uint64_t static MachPort.TypeMask.portSet.getter()
{
  return 0x80000;
}

void *MachPort.TypeMask.deadName.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.deadName;
}

uint64_t static MachPort.TypeMask.deadName.getter()
{
  return 0x100000;
}

void *MachPort.TypeMask.labelH.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.labelH;
}

uint64_t static MachPort.TypeMask.labelH.getter()
{
  return 0x200000;
}

uint64_t sub_10003ACF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    LODWORD(v2) = 0;
    v3 = (int *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      if ((v5 & ~(_DWORD)v2) == 0)
        v4 = 0;
      v2 = v4 | v2;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
  }
  swift_bridgeObjectRelease(a1);
  return v2;
}

void *MachPort.TypeMask.sendReceive.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.sendReceive;
}

uint64_t static MachPort.TypeMask.sendReceive.getter()
{
  return 196608;
}

void *MachPort.TypeMask.sendRights.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.sendRights;
}

uint64_t static MachPort.TypeMask.sendRights.getter()
{
  return 327680;
}

void *MachPort.TypeMask.portRights.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.portRights;
}

uint64_t static MachPort.TypeMask.portRights.getter()
{
  return 458752;
}

void *MachPort.TypeMask.portOrDead.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.portOrDead;
}

uint64_t static MachPort.TypeMask.portOrDead.getter()
{
  return 1507328;
}

void *MachPort.TypeMask.all.unsafeMutableAddressor()
{
  return &static MachPort.TypeMask.all;
}

uint64_t static MachPort.TypeMask.all.getter()
{
  return 2031616;
}

_DWORD *sub_10003ADAC@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10003ADB8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = variable initialization expression of Clock.heartbeat();
  *a1 = result;
  return result;
}

uint64_t sub_10003ADDC@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;
  uint64_t result;

  result = sub_10003AE08(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10003AE08(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t sub_10003AE10@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;
  uint64_t result;

  result = sub_10003AE3C(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10003AE3C(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t sub_10003AE44@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;
  uint64_t result;

  result = sub_10003AE70(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10003AE70(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

BOOL sub_10003AE78(_DWORD *a1, int *a2)
{
  return sub_10003AE80(a1, *a2);
}

BOOL sub_10003AE80(_DWORD *a1, int a2)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & a2;
  if (v3 != a2)
    *v2 |= a2;
  *a1 = a2;
  return v3 != a2;
}

unint64_t sub_10003AEAC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_10003AEDC(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

unint64_t sub_10003AEDC(unsigned int a1)
{
  int *v1;
  int v2;
  int v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *v1 & a1;
  if (v3)
  {
    *v1 = v2 & ~a1;
    v4 = v2 & a1;
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((unint64_t)(v3 == 0) << 32);
}

unint64_t sub_10003AF1C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_10003AF4C(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

unint64_t sub_10003AF4C(unsigned int a1)
{
  int *v1;
  int v2;

  v2 = *v1;
  *v1 |= a1;
  return v2 & a1 | ((unint64_t)((v2 & a1) == 0) << 32);
}

uint64_t sub_10003AF78(unsigned int *a1)
{
  return sub_10003AF80(*a1);
}

uint64_t sub_10003AF80(uint64_t result)
{
  _DWORD *v1;

  *v1 |= result;
  return result;
}

uint64_t sub_10003AF90(unsigned int *a1)
{
  return sub_10003AF98(*a1);
}

uint64_t sub_10003AF98(uint64_t result)
{
  _DWORD *v1;

  *v1 &= result;
  return result;
}

uint64_t sub_10003AFA8(unsigned int *a1)
{
  return sub_10003AFB0(*a1);
}

uint64_t sub_10003AFB0(uint64_t result)
{
  _DWORD *v1;

  *v1 ^= result;
  return result;
}

uint64_t sub_10003AFC0@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  int *v2;
  uint64_t result;

  result = sub_10003AFEC(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_10003AFEC(int a1, int a2)
{
  return a2 & ~a1;
}

BOOL sub_10003AFF4(int *a1)
{
  int *v1;

  return sub_10003B000(*a1, *v1);
}

BOOL sub_10003B000(int a1, int a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_10003B00C(int *a1)
{
  int *v1;

  return sub_10003B018(*a1, *v1);
}

BOOL sub_10003B018(int a1, int a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_10003B024(int *a1)
{
  int *v1;

  return sub_10003B030(*a1, *v1);
}

BOOL sub_10003B030(int a1, int a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_10003B03C()
{
  int *v0;

  return sub_10003B044(*v0);
}

BOOL sub_10003B044(int a1)
{
  return a1 == 0;
}

uint64_t sub_10003B050(unsigned int *a1)
{
  return sub_10003B058(*a1);
}

uint64_t sub_10003B058(uint64_t result)
{
  _DWORD *v1;

  *v1 &= ~(_DWORD)result;
  return result;
}

_DWORD *sub_10003B068@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10003B078(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10003B084@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = sub_10003ACF8(a1);
  *a2 = result;
  return result;
}

void MachPort.type.getter()
{
  mach_port_name_t v0;
  kern_return_t v1;
  mach_port_type_t ptype;

  sub_10003CD40();
  v1 = mach_port_type(mach_task_self_, v0, &ptype);
  __logMachError(_:)(v1);
  sub_10003CD98();
}

mach_port_context_t MachPort.context.getter(mach_port_name_t name)
{
  kern_return_t context;
  mach_port_context_t v3;

  v3 = 0;
  context = mach_port_get_context(mach_task_self_, name, &v3);
  __logMachError(_:)(context);
  return v3;
}

uint64_t MachPort.context.setter(mach_port_context_t context, mach_port_name_t a2)
{
  kern_return_t v2;

  v2 = mach_port_set_context(mach_task_self_, a2, context);
  return __logMachError(_:)(v2);
}

uint64_t (*MachPort.context.modify(uint64_t a1, mach_port_name_t a2))(uint64_t a1)
{
  _QWORD *v3;
  kern_return_t context;

  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  context = mach_port_get_context(mach_task_self_, a2, (mach_port_context_t *)(a1 + 8));
  __logMachError(_:)(context);
  *(_QWORD *)a1 = *v3;
  return sub_10003B21C;
}

uint64_t sub_10003B21C(uint64_t a1)
{
  kern_return_t v1;

  v1 = mach_port_set_context(mach_task_self_, *(_DWORD *)(a1 + 16), *(_QWORD *)a1);
  return __logMachError(_:)(v1);
}

void MachPort.setContext<A>(_:)(mach_port_context_t a1, mach_port_name_t name)
{
  mach_port_t v4;
  kern_return_t v5;
  kern_return_t v6;

  if (a1)
  {
    v4 = mach_task_self_;
    swift_unknownObjectRetain(a1);
    v5 = mach_port_set_context(v4, name, a1);
    __logMachError(_:)(v5);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    v6 = mach_port_set_context(mach_task_self_, name, 0);
    __logMachError(_:)(v6);
  }
}

uint64_t MachPort.getContext<A>()(mach_port_name_t name)
{
  kern_return_t context;
  uint64_t result;
  uint64_t v3;

  v3 = 0;
  context = mach_port_get_context(mach_task_self_, name, (mach_port_context_t *)&v3);
  __logMachError(_:)(context);
  result = v3;
  if (v3)
    return swift_unknownObjectRetain(v3);
  return result;
}

void MachPort.hash(into:)(uint64_t a1, unsigned int a2)
{
  Hasher._combine(_:)(a2 >> 8);
  sub_100005D94();
}

void MachPort.hashValue.getter(uint64_t a1)
{
  unsigned int v1;

  v1 = a1;
  sub_10003CD78(a1);
  sub_10003CD68(v1 >> 8);
  sub_1000370C4();
  sub_10003A248();
}

void sub_10003B37C()
{
  unsigned int *v0;

  MachPort.hashValue.getter(*v0);
}

void sub_10003B384(uint64_t a1)
{
  unsigned int *v1;

  MachPort.hash(into:)(a1, *v1);
}

Swift::Int sub_10003B38C(uint64_t a1)
{
  unsigned int *v1;
  unint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 >> 8);
  return Hasher._finalize()();
}

EyeCandyCore::MachSemaphore __swiftcall MachSemaphore.init(_:)(Swift::Int32 a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  Swift::Int32 v8;
  EyeCandyCore::MachSemaphore result;
  uint64_t v10;

  sub_10003CD40();
  v8 = sub_10003CD4C(mach_task_self_, v1, v2, v3, v4, v5, v6, v7, v10, HIDWORD(v10));
  __logMachError(_:)(v8);
  sub_10003CD98();
  return result;
}

Swift::Void __swiftcall MachSemaphore.destroy()()
{
  semaphore_t v0;
  kern_return_t v1;

  v1 = semaphore_destroy(mach_task_self_, v0);
  __logMachError(_:)(v1);
}

void static MachSemaphore.with(_:_:)(uint64_t a1, void (*a2)(_QWORD))
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  Swift::Int32 v10;
  kern_return_t v11;
  uint64_t v12;
  semaphore_t v13;

  sub_10003CD40();
  v10 = sub_10003CD4C(mach_task_self_, v3, v4, v5, v6, v7, v8, v9, v12, HIDWORD(v12));
  __logMachError(_:)(v10);
  a2(v13);
  v11 = semaphore_destroy(mach_task_self_, v13);
  __logMachError(_:)(v11);
  sub_100036FE0();
}

uint64_t sub_10003B4D0()
{
  kern_return_t v0;
  uint64_t result;
  mach_port_name_t name;

  sub_10003CD40();
  v0 = mach_port_allocate(mach_task_self_, 1u, &name);
  result = __logMachError(_:)(v0);
  dword_10007C924 = name;
  return result;
}

uint64_t sub_10003B53C(_QWORD *a1, unsigned int *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_10003B574()
{
  uint64_t result;

  result = sub_10003B590();
  qword_10007C928 = result;
  return result;
}

uint64_t sub_10003B590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD aBlock[5];
  uint64_t v21;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  sub_100027248();
  v5 = v4 - v3;
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  sub_100027248();
  v11 = v10 - v9;
  sub_1000085DC(0, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  if (qword_10007B330 != -1)
    swift_once(&qword_10007B330, sub_10003B4D0);
  v12 = dword_10007C924;
  sub_1000085DC(0, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter();
  v14 = static OS_dispatch_source.makeMachReceiveSource(port:queue:)(v12, v13);

  ObjectType = swift_getObjectType(v14);
  v16 = sub_100018C8C((uint64_t)&unk_10006C028, 24);
  *(_QWORD *)(v16 + 16) = v14;
  aBlock[4] = sub_10003CBD8;
  v21 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000C66C;
  aBlock[3] = &unk_10006C040;
  v17 = _Block_copy(aBlock);
  v18 = swift_unknownObjectRetain(v14);
  static DispatchQoS.unspecified.getter(v18);
  sub_1000374A0();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v11, v5, v17, ObjectType);
  _Block_release(v17);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v5, v0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  swift_release(v21);
  OS_dispatch_source.activate()();
  return v14;
}

void sub_10003B788()
{
  sub_100008414(&qword_100078B40);
  sub_10003CB78();
  qword_10007B348 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  sub_100005D94();
}

BOOL sub_10003B7D4(uint64_t a1, uint64_t a2)
{
  return dword_100059B68[(char)a1] == dword_100059B68[(char)a2] && HIDWORD(a1) == HIDWORD(a2);
}

void sub_10003B804(uint64_t a1, unint64_t a2)
{
  Hasher._combine(_:)(qword_100059B38[(char)a2] | (a2 >> 40 << 8));
  sub_100005D94();
}

void sub_10003B838(unint64_t a1)
{
  sub_10003CD78(a1);
  sub_10003CD68(qword_100059B38[(char)a1] | (a1 >> 40 << 8));
  sub_1000370C4();
  sub_10003A248();
}

void sub_10003B878()
{
  unsigned __int8 *v0;

  sub_10003B838(*v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32));
}

void sub_10003B888(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_10003B804(a1, *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32));
}

void sub_10003B898(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  int v3;
  _QWORD v4[9];

  v2 = *v1;
  v3 = *((_DWORD *)v1 + 1);
  Hasher.init(_seed:)(v4, a1);
  sub_10003CD68(qword_100059B38[v2] | v3 & 0xFFFFFF00);
  sub_1000370C4();
  sub_10003A248();
}

BOOL sub_10003B8DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003B7D4(*a1 | ((unint64_t)*((unsigned int *)a1 + 1) << 32), *a2 | ((unint64_t)*((unsigned int *)a2 + 1) << 32));
}

void sub_10003B8F8(char a1)
{
  __asm { BR              X10 }
}

void sub_10003B94C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, mach_port_t previous, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  mach_port_mscount_t v17;
  mach_port_name_t v18;
  mach_port_t v19;
  kern_return_t v20;
  kern_return_t v21;

  if (qword_10007B330 != -1)
    swift_once(&qword_10007B330, sub_10003B4D0);
  v19 = dword_10007C924;
  if (dword_10007C924 == v18)
  {
    v19 = v18;
  }
  else if (qword_10007B338 != -1)
  {
    swift_once(&qword_10007B338, sub_10003B574);
  }
  previous = 0;
  v20 = mach_port_request_notification(mach_task_self_, v18, 66, v17, v19, 0x15u, &previous);
  __logMachError(_:)(v20);
  if (previous + 1 >= 2)
  {
    v21 = mach_port_mod_refs(mach_task_self_, previous, 2u, -1);
    __logMachError(_:)(v21);
  }
  sub_100036FE0();
}

double MachPort.addNotification(_:sync:_:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  _BYTE v20[24];

  if (qword_10007B340 != -1)
    swift_once(&qword_10007B340, sub_10003B788);
  swift_beginAccess(&qword_10007B348, v20, 32, 0);
  v9 = a1 | (unint64_t)(a5 << 32);
  v10 = (_QWORD *)sub_10003BC10(v9, qword_10007B348);
  swift_endAccess(v20);
  if (v10)
  {
    v11 = sub_100018C8C((uint64_t)&unk_10006BD30, 32);
    *(_QWORD *)(v11 + 16) = a3;
    *(_QWORD *)(v11 + 24) = a4;
    sub_10001D5D0();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_10003CDA0(0, v10[2] + 1);
      v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v14 = v10[2];
    v13 = v10[3];
    if (v14 >= v13 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_10003CDA0((char *)(v13 > 1), v14 + 1);
      v10 = (_QWORD *)isUniquelyReferenced_nonNull_native;
    }
    v10[2] = v14 + 1;
    v15 = &v10[2 * v14];
    v15[4] = sub_10003C1E8;
    v15[5] = v11;
  }
  else
  {
    sub_10003B8F8(a1);
    v16 = sub_100008414(&qword_100078AF0);
    v10 = (_QWORD *)sub_100018C8C(v16, 48);
    *((_OWORD *)v10 + 1) = xmmword_100058B70;
    v17 = sub_100018C8C((uint64_t)&unk_10006BD58, 32);
    *(_QWORD *)(v17 + 16) = a3;
    *(_QWORD *)(v17 + 24) = a4;
    v10[4] = sub_10003CD10;
    v10[5] = v17;
    sub_10001D5D0();
    swift_bridgeObjectRelease(0);
  }
  sub_10003CD30(isUniquelyReferenced_nonNull_native, (uint64_t)v20);
  v18 = swift_bridgeObjectRetain(v10);
  sub_10003C3E0(v18, v9);
  swift_endAccess(v20);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  return result;
}

uint64_t sub_10003BC10(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (v3 = sub_10003C208(a1 & 0xFFFFFFFF000000FFLL), (v4 & 1) != 0))
    return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3));
  else
    return 0;
}

void sub_10003BC54(_DWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int32 v6;
  int v7;
  char *v8;

  type metadata accessor for Logger(0);
  sub_10003CD84();
  __chkstk_darwin(v4, v5);
  sub_100027248();
  v6 = a1[5];
  *a2 = *a1 & 0x1F;
  v7 = a1[2];
  a2[1] = 36;
  a2[2] = v7;
  a2[3] = 0;
  if (!__OFADD__(v6, 100))
  {
    a2[4] = 0;
    a2[5] = v6 + 100;
    v8 = (char *)&loc_10003BCE4
       + *((int *)qword_10003BE98 + MachPort.Notification.init(rawValue:)(v6).value);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x10003BE80);
}

uint64_t sub_10003BEB8(unsigned int a1, uint64_t (*a2)(uint64_t *))
{
  unsigned int v2;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  if (a1 >= 0x80)
  {
    v4 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v5 = (v4 | (a1 >> 6) & 0x3F) << 8;
      v6 = (((v5 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v2 = (v5 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v2 = v6;
    }
    else
    {
      v2 = (v4 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v2 = a1 + 1;
  }
  v7 = (v2 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v2) >> 3))));
  return a2(&v7);
}

char *sub_10003BF94(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_100078AF0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10000B0A4((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_10003C080(0, v8, (unint64_t)v13, a4);
  }
  return v11;
}

uint64_t sub_10003C080(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100008414(&qword_100078B48);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003C194(char *a1)
{
  uint64_t v1;

  return sub_10003AA08(a1, *(mach_port_t **)(v1 + 16));
}

void sub_10003C19C(uint64_t a1)
{
  uint64_t v1;

  if (a1)
  {
    (*(void (**)(void))(v1 + 16))();
    sub_100005D94();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10003C1C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10003C1E8(unsigned int *a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD))(v1 + 16))(*a1);
  sub_100005D94();
}

unint64_t sub_10003C208(unint64_t a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(qword_100059B38[(char)a1] | (a1 >> 40 << 8));
  v3 = Hasher._finalize()();
  return sub_10003C274(a1 & 0xFFFFFFFF000000FFLL, v3);
}

unint64_t sub_10003C274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (char *)(*(_QWORD *)(v2 + 48) + 8 * result);
      v8 = *v7;
      v9 = *((_DWORD *)v7 + 1);
      if (dword_100059B68[v8] == dword_100059B68[(char)a1] && v9 == HIDWORD(a1))
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t sub_10003C304(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v3 = sub_10003C208(a1 & 0xFFFFFFFF000000FFLL);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v14 = *v1;
  v7 = *v1;
  *v1 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_100008414(&qword_100078B38);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v5);
  v10 = sub_100008414(&qword_100078B40);
  v11 = sub_10003CB78();
  _NativeDictionary._delete(at:)(v5, v14, &unk_10006C0D0, v10, v11);
  v12 = *v2;
  *v2 = v14;
  swift_bridgeObjectRelease(v12);
  return v9;
}

double sub_10003C3E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  double result;
  uint64_t v9;

  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  *v3 = 0x8000000000000000;
  sub_10003CA2C(a1, a2 & 0xFFFFFFFF000000FFLL, isUniquelyReferenced_nonNull_native);
  v7 = *v3;
  *v3 = v9;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

unint64_t sub_10003C450()
{
  unint64_t result;

  result = qword_100078AF8;
  if (!qword_100078AF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort.Right, &type metadata for MachPort.Right);
    atomic_store(result, (unint64_t *)&qword_100078AF8);
  }
  return result;
}

unint64_t sub_10003C490()
{
  unint64_t result;

  result = qword_100078B00;
  if (!qword_100078B00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort.TypeName, &type metadata for MachPort.TypeName);
    atomic_store(result, (unint64_t *)&qword_100078B00);
  }
  return result;
}

unint64_t sub_10003C4D0()
{
  unint64_t result;

  result = qword_100078B08;
  if (!qword_100078B08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort.Notification, &type metadata for MachPort.Notification);
    atomic_store(result, (unint64_t *)&qword_100078B08);
  }
  return result;
}

unint64_t sub_10003C510()
{
  unint64_t result;

  result = qword_100078B10;
  if (!qword_100078B10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort.TypeMask, &type metadata for MachPort.TypeMask);
    atomic_store(result, (unint64_t *)&qword_100078B10);
  }
  return result;
}

unint64_t sub_10003C550()
{
  unint64_t result;

  result = qword_100078B18;
  if (!qword_100078B18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort.TypeMask, &type metadata for MachPort.TypeMask);
    atomic_store(result, (unint64_t *)&qword_100078B18);
  }
  return result;
}

unint64_t sub_10003C590()
{
  unint64_t result;

  result = qword_100078B20;
  if (!qword_100078B20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort.TypeMask, &type metadata for MachPort.TypeMask);
    atomic_store(result, (unint64_t *)&qword_100078B20);
  }
  return result;
}

unint64_t sub_10003C5D0()
{
  unint64_t result;

  result = qword_100078B28;
  if (!qword_100078B28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort.TypeMask, &type metadata for MachPort.TypeMask);
    atomic_store(result, (unint64_t *)&qword_100078B28);
  }
  return result;
}

unint64_t sub_10003C610()
{
  unint64_t result;

  result = qword_100078B30;
  if (!qword_100078B30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MachPort, &type metadata for MachPort);
    atomic_store(result, (unint64_t *)&qword_100078B30);
  }
  return result;
}

void type metadata accessor for MachPort()
{
  sub_10000C664();
}

uint64_t getEnumTagSinglePayload for MachPort.Right(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return sub_10003CD28(-1);
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return sub_10003CD28((*a1 | (v4 << 8)) - 5);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return sub_10003CD28((*a1 | (v4 << 8)) - 5);
    }
    v4 = a1[1];
    if (a1[1])
      return sub_10003CD28((*a1 | (v4 << 8)) - 5);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return sub_10003CD28(v8);
}

uint64_t storeEnumTagSinglePayload for MachPort.Right(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003C728 + 4 * byte_100059643[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003C75C + 4 * byte_10005963E[v4]))();
}

uint64_t sub_10003C760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C768);
  return result;
}

uint64_t sub_10003C770(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C778);
  return sub_10003CD20();
}

void type metadata accessor for MachPort.Right()
{
  sub_10000C664();
}

uint64_t getEnumTagSinglePayload for MachPort.TypeName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return sub_10003CD28(-1);
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return sub_10003CD28((*a1 | (v4 << 8)) - 2);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return sub_10003CD28((*a1 | (v4 << 8)) - 2);
    }
    v4 = a1[1];
    if (a1[1])
      return sub_10003CD28((*a1 | (v4 << 8)) - 2);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return sub_10003CD28(v8);
}

uint64_t storeEnumTagSinglePayload for MachPort.TypeName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003C864 + 4 * byte_10005964D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003C898 + 4 * byte_100059648[v4]))();
}

uint64_t sub_10003C89C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C8A4);
  return result;
}

uint64_t sub_10003C8AC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C8B4);
  return sub_10003CD20();
}

_BYTE *sub_10003C8C4(_BYTE *a1, char a2)
{
  return sub_10003CD20(a1, a2 & 1);
}

void type metadata accessor for MachPort.TypeName()
{
  sub_10000C664();
}

uint64_t getEnumTagSinglePayload for MachPort.Notification(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return sub_10003CD28(-1);
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return sub_10003CD28((*a1 | (v4 << 8)) - 6);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return sub_10003CD28((*a1 | (v4 << 8)) - 6);
    }
    v4 = a1[1];
    if (a1[1])
      return sub_10003CD28((*a1 | (v4 << 8)) - 6);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return sub_10003CD28(v8);
}

uint64_t storeEnumTagSinglePayload for MachPort.Notification(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10003C9A8 + 4 * byte_100059657[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10003C9DC + 4 * byte_100059652[v4]))();
}

uint64_t sub_10003C9E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C9E8);
  return result;
}

uint64_t sub_10003C9F0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C9F8);
  return sub_10003CD20();
}

void type metadata accessor for MachPort.Notification()
{
  sub_10000C664();
}

void type metadata accessor for MachPort.TypeMask()
{
  sub_10000C664();
}

void type metadata accessor for MachSemaphore()
{
  sub_10000C664();
}

void sub_10003CA2C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = a2 & 0xFFFFFFFF000000FFLL;
  v9 = sub_10003C208(a2 & 0xFFFFFFFF000000FFLL);
  v11 = v7[2];
  v12 = (v10 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v9;
  v15 = v10;
  sub_100008414(&qword_100078B38);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13))
    goto LABEL_5;
  v16 = sub_10003C208(v8);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&unk_10006C0D0);
    __break(1u);
    return;
  }
  v14 = v16;
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = v18[7];
    swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v14));
    *(_QWORD *)(v19 + 8 * v14) = a1;
  }
  else
  {
    sub_10003CB28(v14, v8, a1, v18);
  }
}

unint64_t sub_10003CB28(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = a4[6] + 8 * result;
  *(_BYTE *)v4 = a2;
  *(_DWORD *)(v4 + 4) = HIDWORD(a2);
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

unint64_t sub_10003CB78()
{
  unint64_t result;

  result = qword_10007B210[0];
  if (!qword_10007B210[0])
  {
    result = swift_getWitnessTable(&unk_100059AF8, &unk_10006C0D0);
    atomic_store(result, qword_10007B210);
  }
  return result;
}

uint64_t sub_10003CBB4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003CBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int32 v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = objc_opt_self(OS_dispatch_source);
  v3 = swift_dynamicCastObjCClassUnconditional(v1, v2, 0, 0, 0);
  v4 = dispatch_mig_server(v3, 60, sub_10003BEB4);
  return __logMachError(_:)(v4);
}

uint64_t sub_10003CC28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003CC38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_10003CC40(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10003CC4C(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (a2)
  {
    if (a2 >= 0xFB && a1[8])
      return sub_10003CD28(*(_DWORD *)a1 + 250);
    v3 = *a1;
    v4 = v3 >= 6;
    v5 = v3 - 6;
    if (!v4)
      return sub_10003CD28(-1);
  }
  else
  {
    v5 = -1;
  }
  return sub_10003CD28(v5);
}

_BYTE *sub_10003CC84(_BYTE *result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      result[8] = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      result[8] = 0;
    if (a2)
      return sub_10003CD20(result, a2 + 5);
  }
  return result;
}

void type metadata accessor for MachPort.NotificationKey()
{
  sub_10000C664();
}

unint64_t sub_10003CCD0()
{
  unint64_t result;

  result = qword_10007B2A0[0];
  if (!qword_10007B2A0[0])
  {
    result = swift_getWitnessTable(&unk_100059AD0, &unk_10006C0D0);
    atomic_store(result, qword_10007B2A0);
  }
  return result;
}

_BYTE *sub_10003CD20@<X0>(_BYTE *result@<X0>, char a2@<W8>)
{
  *result = a2;
  return result;
}

uint64_t sub_10003CD28@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t sub_10003CD30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return swift_beginAccess(v2, a2, 33, 0);
}

uint64_t sub_10003CD4C(task_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, semaphore_t semaphore)
{
  return semaphore_create(a1, &semaphore, 0, a4);
}

uint64_t sub_10003CD58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003CD60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

void sub_10003CD68(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_10003CD70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

_QWORD *sub_10003CD78(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return Hasher.init(_seed:)((uint64_t *)va, 0);
}

char *sub_10003CDA0(char *a1, int64_t a2)
{
  uint64_t v2;

  return sub_10003BF94(a1, a2, 1, v2);
}

uint64_t static DispatchTimeInterval.seconds(_:)(double a1)
{
  double v1;
  char v2;
  double v3;
  char v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t result;

  if (a1 < 0.0)
    goto LABEL_37;
  if (a1 < 9223372040.0)
  {
    sub_10003E0EC();
    if (v2)
    {
      __break(1u);
    }
    else if (v1 > -9.22337204e18)
    {
      sub_10003E0DC();
      if (!v4)
        goto LABEL_28;
      goto LABEL_24;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (a1 < 9.22337204e12)
  {
    sub_10003E0EC();
    if (v2)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (v5 <= -9.22337204e18)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    sub_10003E0DC();
    if (!v4)
      goto LABEL_31;
    goto LABEL_24;
  }
  if (a1 < 9.22337204e15)
  {
    sub_10003E0EC();
    if (v2)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    if (v6 <= -9.22337204e18)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    sub_10003E0DC();
    if (!v4)
      goto LABEL_34;
    goto LABEL_24;
  }
  sub_10003E0DC();
  if (!v4)
    goto LABEL_25;
  sub_10003E0EC();
  if (v2)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v3 > -9.22337204e18)
  {
LABEL_24:
    sub_10003E324(v3);
LABEL_25:
    sub_10003E068();
    v7 = sub_10003E22C();
    return v8(v7);
  }
LABEL_36:
  __break(1u);
LABEL_37:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002BLL, 0x80000001000579E0, "EyeCandyCore/Queue.swift", 24, 2, 16, 0);
  __break(1u);
  return result;
}

Swift::Void __swiftcall OS_dispatch_source_timer.reset(_:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_10003DFEC();
  v18 = v5;
  v19 = v6;
  sub_10003E068();
  sub_10003E35C();
  __chkstk_darwin(v7, v8);
  sub_10003E1C0();
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v17 - v11;
  sub_10003E0BC();
  sub_10003E310();
  __chkstk_darwin(v13, v14);
  sub_10003DF60();
  __chkstk_darwin(v15, v16);
  sub_10003E154();
  sub_10003E2BC();
  sub_10003E2B4(v2);
  (*(void (**)(char *, _QWORD))(v4 + 104))(v12, enum case for DispatchTimeInterval.never(_:));
  sub_10003E350();
  sub_10003E1AC();
  sub_10003E244(v1);
  sub_10003E244((uint64_t)v12);
  sub_10003E2B4(v3);
  sub_10003DF7C();
}

Swift::Void __swiftcall OS_dispatch_source_timer.reset(_:interval:)(Swift::Double _, Swift::Double interval)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_10003DFEC();
  v20 = v5;
  v21 = v6;
  v8 = v7;
  sub_10003E068();
  sub_10003E35C();
  __chkstk_darwin(v9, v10);
  sub_10003E1C0();
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v19 - v13;
  sub_10003E0BC();
  sub_10003E310();
  __chkstk_darwin(v15, v16);
  sub_10003DF60();
  __chkstk_darwin(v17, v18);
  sub_10003E154();
  sub_10003E2CC();
  sub_10003E2B4(v3);
  static DispatchTimeInterval.seconds(_:)(v8);
  sub_10003E350();
  sub_10003E1AC();
  sub_10003E244(v2);
  sub_10003E244((uint64_t)v14);
  sub_10003E2B4(v4);
  sub_10003DF7C();
}

uint64_t sub_10003D114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v0 = type metadata accessor for DispatchQoS.QoSClass(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  sub_100027248();
  v5 = v4 - v3;
  sub_10000F6CC(v6, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v0);
  v7 = static OS_dispatch_queue.global(qos:)(v5);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v5, v0);
  static OS_dispatch_queue.defaultPriority = v7;
  return result;
}

uint64_t *OS_dispatch_queue.defaultPriority.unsafeMutableAddressor()
{
  if (qword_10007B350 != -1)
    swift_once(&qword_10007B350, sub_10003D114);
  return &static OS_dispatch_queue.defaultPriority;
}

id static OS_dispatch_queue.defaultPriority.getter()
{
  if (qword_10007B350 != -1)
    swift_once(&qword_10007B350, sub_10003D114);
  return (id)static OS_dispatch_queue.defaultPriority;
}

void OS_dispatch_queue.after(_:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[5];
  uint64_t v39;

  sub_10003DFEC();
  v1 = v0;
  v3 = v2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v4 - 8);
  sub_100018C80();
  __chkstk_darwin(v5, v6);
  sub_100027248();
  v9 = v8 - v7;
  v10 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  sub_100018C80();
  __chkstk_darwin(v11, v12);
  sub_100027248();
  v15 = v14 - v13;
  v16 = sub_10003E0BC();
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v33 - v23;
  static DispatchTime.now()(v25);
  sub_10003E2BC();
  v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v20, v16);
  v38[4] = v3;
  v39 = v1;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 1107296256;
  v38[2] = sub_10000C66C;
  v38[3] = &unk_10006C228;
  v27 = _Block_copy(v38);
  v28 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v28);
  v37 = _swiftEmptyArrayStorage;
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = v29;
  v31 = sub_100018FB8();
  sub_100018F68((unint64_t *)&qword_100077CA0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v31, v32, v4, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v24, v15, v9, v27);
  _Block_release(v27);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v9, v4);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v15, v35);
  v26(v24, v16);
  swift_release(v39);
  sub_10003DF7C();
}

uint64_t sub_10003D450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003D460(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void OS_dispatch_queue.once(_:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  void (*v62)();
  _QWORD *v63;

  sub_10003DFEC();
  v47 = v0;
  v52 = v3;
  v53 = v4;
  v5 = sub_10003E068();
  v58 = *(_QWORD *)(v5 - 8);
  v59 = v5;
  sub_100018C80();
  __chkstk_darwin(v6, v7);
  sub_10003DFB4(v8, v46);
  __chkstk_darwin(v9, v10);
  v57 = (char *)&v46 - v11;
  v12 = sub_10003E0BC();
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  sub_100018C80();
  __chkstk_darwin(v13, v14);
  sub_10003DF60();
  __chkstk_darwin(v15, v16);
  v25 = sub_10003DFD4(v17, v18, v19, v20, v21, v22, v23, v24, v46);
  v50 = *(_QWORD *)(v25 - 8);
  v51 = v25;
  sub_100018C80();
  __chkstk_darwin(v26, v27);
  v28 = sub_10003DF98();
  v48 = *(_QWORD *)(v28 - 8);
  v49 = v28;
  sub_100018C80();
  __chkstk_darwin(v29, v30);
  sub_10003E078();
  sub_1000093F8();
  __chkstk_darwin(v31, v32);
  sub_10003E27C();
  sub_10000F6CC(v33, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  v60 = (void **)_swiftEmptyArrayStorage;
  sub_10003E24C(&qword_100077E50, v34, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  sub_100018FB8();
  sub_100018F68(&qword_100077E60);
  sub_10003E048(v35);
  sub_10003E17C();
  sub_10003E140();
  sub_1000373C8();
  v36 = (_QWORD *)sub_10003E344((uint64_t)&unk_10006C260);
  v37 = v53;
  v36[2] = v52;
  v36[3] = v37;
  v36[4] = &qword_100077E58;
  v62 = sub_10003D6A8;
  v63 = v36;
  v60 = _NSConcreteStackBlock;
  v61 = 1107296256;
  sub_100019088((uint64_t)sub_10000C66C);
  sub_10003E0B0();
  v38 = swift_unknownObjectRetain(&qword_100077E58);
  static DispatchQoS.unspecified.getter(v38);
  sub_10003E2EC();
  sub_10003E1DC();
  sub_10003E214();
  sub_10003E204();
  sub_10003E2DC();
  v39 = sub_10003E2C4();
  static DispatchTime.now()(v39);
  v40 = v54;
  sub_10003E2BC();
  v41 = sub_10003E008();
  sub_10003E114(v41, enum case for DispatchTimeInterval.never(_:));
  sub_10003E254();
  v42 = sub_10003E330();
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v42, v43, v44, v45);
  sub_10003E070(v1);
  sub_10003E070(v2);
  sub_10003E020(v40);
  OS_dispatch_source.resume()();
  sub_10003E304();
  sub_10003DF7C();
}

void OS_dispatch_queue.wallOnce(_:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  sub_10003DFEC();
  v52 = v3;
  v53 = v4;
  v6 = v5;
  sub_10003E068();
  sub_100018C80();
  __chkstk_darwin(v7, v8);
  sub_10003DFB4(v9, v49);
  __chkstk_darwin(v10, v11);
  sub_10003E0C4(v12, v13, v14, v15, v16, v17, v18, v19, v50);
  sub_100018C80();
  __chkstk_darwin(v20, v21);
  sub_10003DF60();
  __chkstk_darwin(v22, v23);
  sub_10003DFD4(v24, v25, v26, v27, v28, v29, v30, v31, v51);
  sub_100018C80();
  __chkstk_darwin(v32, v33);
  sub_10003DF98();
  sub_100018C80();
  __chkstk_darwin(v34, v35);
  sub_10003E078();
  sub_1000093F8();
  __chkstk_darwin(v36, v37);
  sub_10003E27C();
  sub_10000F6CC(v38, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  sub_10003E24C(&qword_100077E50, v39, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  sub_100018FB8();
  sub_100018F68(&qword_100077E60);
  sub_10003E048(v40);
  sub_10003E17C();
  sub_10003E140();
  sub_1000373C8();
  v41 = (_QWORD *)sub_10003E344((uint64_t)&unk_10006C2B0);
  v41[2] = v52;
  v41[3] = v53;
  v41[4] = &qword_100077E58;
  sub_100019088((uint64_t)sub_10000C66C);
  sub_10003E0B0();
  v42 = swift_unknownObjectRetain(&qword_100077E58);
  static DispatchQoS.unspecified.getter(v42);
  sub_10003E2EC();
  sub_10003E1DC();
  sub_10003E214();
  sub_10003E204();
  sub_10003E2DC();
  v43 = sub_10003E2C4();
  static DispatchWallTime.now()(v43);
  + infix(_:_:)(v2, v6);
  v44 = sub_10003E008();
  sub_10003E114(v44, enum case for DispatchTimeInterval.never(_:));
  sub_10003E254();
  v45 = sub_10003E330();
  OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v45, v46, v47, v48);
  sub_10003E070(v0);
  sub_10003E070(v1);
  sub_10003E020(v54);
  OS_dispatch_source.resume()();
  sub_10003E304();
  sub_10003DF7C();
}

uint64_t sub_10003D8E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10003D90C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  swift_getObjectType(v1);
  OS_dispatch_source.cancel()();
}

uint64_t sub_10003D944@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  *a1 = 0;
  sub_10003E068();
  v1 = sub_10003E22C();
  return v2(v1);
}

void OS_dispatch_queue.timer(_:interval:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  sub_10003DFEC();
  v44 = v0;
  v46 = v2;
  v47 = v3;
  v4 = sub_10003E068();
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  sub_100018C80();
  __chkstk_darwin(v5, v6);
  sub_10003DFB4(v7, v41[0]);
  __chkstk_darwin(v8, v9);
  v51 = (char *)v41 - v10;
  v11 = sub_10003E0BC();
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  sub_100018C80();
  __chkstk_darwin(v12, v13);
  sub_10003DF60();
  __chkstk_darwin(v14, v15);
  v45 = sub_10003DFD4(v16, v17, v18, v19, v20, v21, v22, v23, v41[0]);
  v43 = *(_QWORD *)(v45 - 8);
  sub_100018C80();
  __chkstk_darwin(v24, v25);
  v42 = sub_10003DF98();
  v41[1] = *(_QWORD *)(v42 - 8);
  sub_100018C80();
  __chkstk_darwin(v26, v27);
  sub_10003E094();
  sub_1000093F8();
  __chkstk_darwin(v28, v29);
  sub_10003E264();
  sub_10000F6CC(v30, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  v54 = (void **)_swiftEmptyArrayStorage;
  sub_10003E24C(&qword_100077E50, v31, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v32 = sub_100018FB8();
  sub_100018F68(&qword_100077E60);
  sub_10003E028(v33);
  sub_10003E21C();
  sub_10003E12C();
  sub_1000373C8();
  v56 = v46;
  v57 = v47;
  v54 = _NSConcreteStackBlock;
  v55 = 1107296256;
  sub_100019088((uint64_t)sub_10000C66C);
  v34 = sub_10003E0B0();
  static DispatchQoS.unspecified.getter(v34);
  sub_10003E2F8();
  sub_10003E168();
  sub_10003E214();
  sub_10003E1F0();
  sub_10003E0FC();
  v35 = sub_10003E2C4();
  static DispatchTime.now()(v35);
  v36 = v48;
  sub_10003E2CC();
  sub_10003E008();
  sub_10003E2A4();
  sub_10003E294();
  v37 = sub_10003E190();
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v37, v38, v39, v40);
  sub_10003E070(v32);
  sub_10003E070(v1);
  sub_10003E020(v36);
  OS_dispatch_source.resume()();
  sub_10003E304();
  sub_10003DF7C();
}

void OS_dispatch_queue.wallTimer(_:interval:closure:)()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_10003DFEC();
  v3 = v2;
  sub_10003E068();
  sub_100018C80();
  __chkstk_darwin(v4, v5);
  sub_10003DFB4(v6, v45);
  __chkstk_darwin(v7, v8);
  sub_10003E0C4(v9, v10, v11, v12, v13, v14, v15, v16, v46);
  sub_100018C80();
  __chkstk_darwin(v17, v18);
  sub_10003DF60();
  __chkstk_darwin(v19, v20);
  sub_10003DFD4(v21, v22, v23, v24, v25, v26, v27, v28, v47);
  sub_100018C80();
  __chkstk_darwin(v29, v30);
  sub_10003DF98();
  sub_100018C80();
  __chkstk_darwin(v31, v32);
  sub_10003E094();
  sub_1000093F8();
  __chkstk_darwin(v33, v34);
  sub_10003E264();
  sub_10000F6CC(v35, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  sub_10003E24C(&qword_100077E50, v36, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v37 = sub_100018FB8();
  sub_100018F68(&qword_100077E60);
  sub_10003E028(v38);
  sub_10003E21C();
  sub_10003E12C();
  sub_1000373C8();
  sub_100019088((uint64_t)sub_10000C66C);
  v39 = sub_10003E0B0();
  static DispatchQoS.unspecified.getter(v39);
  sub_10003E2F8();
  sub_10003E168();
  sub_10003E214();
  sub_10003E1F0();
  sub_10003E0FC();
  v40 = sub_10003E2C4();
  static DispatchWallTime.now()(v40);
  + infix(_:_:)(v1, v3);
  sub_10003E008();
  sub_10003E2A4();
  sub_10003E294();
  v41 = sub_10003E190();
  OS_dispatch_source_timer.schedule(wallDeadline:repeating:leeway:)(v41, v42, v43, v44);
  sub_10003E070(v37);
  sub_10003E070(v0);
  sub_10003E020(v48);
  OS_dispatch_source.resume()();
  sub_10003E304();
  sub_10003DF7C();
}

uint64_t OS_dispatch_semaphore.wait(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v13;

  v0 = sub_10003E0BC();
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v13 - v7;
  static DispatchTime.now()(v9);
  sub_10003E2BC();
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v11 = OS_dispatch_semaphore.wait(timeout:)(v8) & 1;
  v10(v8, v0);
  return v11;
}

void static OS_dispatch_source.makeSignalSourceIgnored(signal:queue:)(uint64_t a1, uint64_t a2)
{
  void (__cdecl *v4)(int);
  void (__cdecl *v5)(int);

  v4 = (void (__cdecl *)(int))SIG_IGN.getter();
  v5 = signal(a1, v4);
  sub_10000F6CC((uint64_t)v5, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  static OS_dispatch_source.makeSignalSource(signal:queue:)(a1, a2);
  sub_100005D94();
}

double OS_dispatch_source_data_replace.doubleData.getter()
{
  return COERCE_DOUBLE(OS_dispatch_source.data.getter());
}

void OS_dispatch_source_data_replace.doubleData.setter(double a1)
{
  OS_dispatch_source_data_replace.replace(data:)(*(Swift::UInt *)&a1);
}

void (*OS_dispatch_source_data_replace.doubleData.modify(_QWORD *a1, uint64_t a2))(Swift::UInt *a1)
{
  uint64_t v2;

  a1[1] = a2;
  a1[2] = v2;
  *a1 = OS_dispatch_source.data.getter(a2);
  return sub_10003DF1C;
}

void sub_10003DF1C(Swift::UInt *a1)
{
  OS_dispatch_source_data_replace.replace(data:)(*a1);
}

uint64_t sub_10003DF98()
{
  return type metadata accessor for DispatchQoS(0);
}

void sub_10003DFB4(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10003DFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 208) = (char *)&a9 - v9;
  return type metadata accessor for DispatchWorkItemFlags(0);
}

uint64_t sub_10003E008()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 200) + 8))(v0, *(_QWORD *)(v1 - 192));
}

uint64_t sub_10003E020(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10003E028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 152, v2, a1, v3, v1);
}

uint64_t sub_10003E048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 152, v2, a1, v3, v1);
}

uint64_t sub_10003E068()
{
  return type metadata accessor for DispatchTimeInterval(0);
}

uint64_t sub_10003E070(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_10003E078()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags(0);
}

uint64_t sub_10003E094()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags(0);
}

uint64_t sub_10003E0B0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10003E0BC()
{
  return type metadata accessor for DispatchTime(0);
}

uint64_t sub_10003E0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 184) = (char *)&a9 - v9;
  return type metadata accessor for DispatchWallTime(0);
}

uint64_t sub_10003E0FC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 264) + 8))(v0, *(_QWORD *)(v1 - 256));
}

uint64_t sub_10003E114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 168) + 104))(*(_QWORD *)(v2 - 184), a2, *(_QWORD *)(v2 - 160));
}

uint64_t sub_10003E12C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10003E140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10003E154()
{
  return static DispatchTime.now()();
}

uint64_t sub_10003E168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return OS_dispatch_source.setEventHandler(qos:flags:handler:)(v2, v3, v0, v1);
}

uint64_t sub_10003E17C()
{
  uint64_t v0;
  uint64_t v1;

  return static OS_dispatch_source.makeTimerSource(flags:queue:)(v0, *(_QWORD *)(v1 - 264));
}

uint64_t sub_10003E190()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003E1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v3, v2, v1, v0);
}

uint64_t sub_10003E1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return OS_dispatch_source.setEventHandler(qos:flags:handler:)(v1, v2, v0, v3);
}

uint64_t sub_10003E1F0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 248) + 8))(v0, *(_QWORD *)(v1 - 232));
}

uint64_t sub_10003E204()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 240) + 8))(v0, *(_QWORD *)(v1 - 232));
}

void sub_10003E214()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t sub_10003E21C()
{
  uint64_t v0;
  uint64_t v1;

  return static OS_dispatch_source.makeTimerSource(flags:queue:)(v0, *(_QWORD *)(v1 - 240));
}

uint64_t sub_10003E22C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003E244(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_10003E24C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  sub_1000057B8(a1, v3, a3);
}

uint64_t sub_10003E254()
{
  uint64_t v0;

  return sub_10003D944(*(_QWORD **)(v0 - 176));
}

uint64_t sub_10003E294()
{
  uint64_t v0;

  return sub_10003D944(*(_QWORD **)(v0 - 176));
}

uint64_t sub_10003E2A4()
{
  double v0;

  return static DispatchTimeInterval.seconds(_:)(v0);
}

uint64_t sub_10003E2B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_10003E2BC()
{
  double v0;

  return + infix(_:_:)(v0);
}

uint64_t sub_10003E2C4()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 - 112));
}

uint64_t sub_10003E2CC()
{
  double v0;

  return + infix(_:_:)(v0);
}

uint64_t sub_10003E2DC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 256) + 8))(v0, *(_QWORD *)(v1 - 248));
}

uint64_t sub_10003E2EC()
{
  return sub_1000374A0();
}

uint64_t sub_10003E2F8()
{
  return sub_1000374A0();
}

uint64_t sub_10003E304()
{
  uint64_t v0;

  return v0;
}

void sub_10003E324(double a1)
{
  _QWORD *v1;

  *v1 = (uint64_t)a1;
}

uint64_t sub_10003E330()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10003E344(uint64_t a1)
{
  return swift_allocObject(a1, 40, 7);
}

uint64_t sub_10003E350()
{
  _QWORD *v0;

  return sub_10003D944(v0);
}

uint64_t HIDEvent.Digitizer.init(timestamp:type:index:identity:mask:buttons:x:y:z:pressure:twist:range:touch:options:)(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, char a8, unint64_t a9)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  if ((a2 & 0x8000000000000000) == 0)
  {
    if (HIDWORD(a2))
      goto LABEL_21;
    if ((a3 & 0x8000000000000000) == 0)
    {
      if (HIDWORD(a3))
        goto LABEL_21;
      if ((a4 & 0x8000000000000000) == 0)
      {
        if (HIDWORD(a4))
          goto LABEL_21;
        if ((a5 & 0x8000000000000000) == 0)
        {
          if (HIDWORD(a5))
            goto LABEL_21;
          if ((a6 & 0x8000000000000000) == 0)
          {
            if (HIDWORD(a6))
              goto LABEL_21;
            if ((a8 & 1) != 0)
            {
              if ((a9 & 0x8000000000000000) == 0)
              {
                if (!HIDWORD(a9))
                {
                  LODWORD(v10) = 1;
LABEL_17:
                  v16 = v10;
                  IOHIDEventCreateDigitizerEvent(0, a1, a2);
                  if (sub_10003F298() == 11)
                    return v9;
                  __break(1u);
                  goto LABEL_20;
                }
LABEL_21:
                sub_10000C2B8();
                v14 = "Not enough bits to represent the passed value";
                v15 = 45;
                goto LABEL_22;
              }
            }
            else if ((a9 & 0x8000000000000000) == 0)
            {
              v10 = HIDWORD(a9);
              if (!HIDWORD(a9))
                goto LABEL_17;
              goto LABEL_21;
            }
          }
        }
      }
    }
  }
LABEL_20:
  sub_10000C2B8();
  v14 = "Negative value is not representable";
  v15 = 35;
LABEL_22:
  result = sub_10003F274((uint64_t)"Fatal error", 11, 2, (uint64_t)v14, v15, v12, (uint64_t)"Swift/Integers.swift", v13, v16, v17, v18);
  __break(1u);
  return result;
}

void HIDEvent.Digitizer.init(hidEvent:)()
{
  void *v0;

  if (sub_10003F298() != 11)

  sub_100005D94();
}

uint64_t HIDEvent.Digitizer.altitude.getter(uint64_t a1)
{
  return sub_10003F218(a1, 0xFu);
}

uint64_t HIDEvent.Digitizer.altitude.setter(uint64_t a1)
{
  return sub_10003F208(a1, 0xFu);
}

void HIDEvent.Digitizer.altitude.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10003F220(a1, a2);
  sub_10003F218(v3, 0xFu);
  *v2 = v4;
  sub_100005D94();
}

uint64_t sub_10003E508(uint64_t a1)
{
  return sub_10003F208(*(_QWORD *)(a1 + 8), 0xFu);
}

uint64_t HIDEvent.Digitizer.azimuth.getter(uint64_t a1)
{
  return sub_10003F218(a1, 0x10u);
}

uint64_t HIDEvent.Digitizer.azimuth.setter(uint64_t a1)
{
  return sub_10003F208(a1, 0x10u);
}

void HIDEvent.Digitizer.azimuth.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10003F220(a1, a2);
  sub_10003F218(v3, 0x10u);
  *v2 = v4;
  sub_100005D94();
}

uint64_t sub_10003E55C(uint64_t a1)
{
  return sub_10003F208(*(_QWORD *)(a1 + 8), 0x10u);
}

char *HIDEvent.Digitizer.children.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  unint64_t v6;
  unint64_t v7;

  v0 = HIDEvent.children.getter();
  v1 = v0;
  v2 = *((_QWORD *)v0 + 2);
  if (v2)
  {
    swift_bridgeObjectRetain(v0);
    v3 = 0;
    v4 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v5 = *(id *)&v1[8 * v3 + 32];
      if (IOHIDEventGetType() == 11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
          v4 = sub_10003F280(0, *((_QWORD *)v4 + 2) + 1);
        v7 = *((_QWORD *)v4 + 2);
        v6 = *((_QWORD *)v4 + 3);
        if (v7 >= v6 >> 1)
          v4 = sub_10003F280((char *)(v6 > 1), v7 + 1);
        *((_QWORD *)v4 + 2) = v7 + 1;
        *(_QWORD *)&v4[8 * v7 + 32] = v5;
      }
      else
      {

      }
      ++v3;
    }
    while (v2 != v3);
    sub_100005DD0();
  }
  else
  {
    v4 = (char *)_swiftEmptyArrayStorage;
  }
  sub_100005DD0();
  return v4;
}

uint64_t HIDEvent.Digitizer.didUpdateMask.getter(uint64_t a1)
{
  return sub_10003F230(a1, 0x1Du);
}

uint64_t HIDEvent.Digitizer.didUpdateMask.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F210(a2, 0x1Du);
}

void HIDEvent.Digitizer.didUpdateMask.modify(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = sub_10003F220(a1, a2);
  *v2 = sub_10003F230(v3, 0x1Du);
  sub_100005D94();
}

uint64_t sub_10003E6B0(uint64_t a1)
{
  return sub_10003F210(*(_QWORD *)(a1 + 8), 0x1Du);
}

uint64_t HIDEvent.Digitizer.eventMask.getter(uint64_t a1)
{
  return sub_10003F230(a1, 7u);
}

uint64_t HIDEvent.Digitizer.eventMask.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F210(a2, 7u);
}

void HIDEvent.Digitizer.eventMask.modify(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = sub_10003F220(a1, a2);
  *v2 = sub_10003F230(v3, 7u);
  sub_100005D94();
}

uint64_t sub_10003E708(uint64_t a1)
{
  return sub_10003F210(*(_QWORD *)(a1 + 8), 7u);
}

uint64_t HIDEvent.Digitizer.generationCount.getter(uint64_t a1)
{
  return sub_10003F230(a1, 0x1Bu);
}

uint64_t HIDEvent.Digitizer.generationCount.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F210(a2, 0x1Bu);
}

void HIDEvent.Digitizer.generationCount.modify(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = sub_10003F220(a1, a2);
  *v2 = sub_10003F230(v3, 0x1Bu);
  sub_100005D94();
}

uint64_t sub_10003E760(uint64_t a1)
{
  return sub_10003F210(*(_QWORD *)(a1 + 8), 0x1Bu);
}

uint64_t HIDEvent.Digitizer.index.getter(uint64_t a1)
{
  return sub_10003F230(a1, 5u);
}

BOOL HIDEvent.Digitizer.isCollection.getter(uint64_t a1)
{
  return sub_10003F230(a1, 0x16u) != 0;
}

uint64_t HIDEvent.Digitizer.isCollection.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F210(a2, 0x16u);
}

void HIDEvent.Digitizer.isCollection.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003F264(a1, a2);
  v3 = sub_10003F230(v2, 0x16u);
  sub_10003F254(v3);
  sub_100005D94();
}

uint64_t sub_10003E7D8(uint64_t *a1)
{
  return sub_10003F210(*a1, 0x16u);
}

BOOL HIDEvent.Digitizer.isInRange.getter(uint64_t a1)
{
  return sub_10003F230(a1, 8u) != 0;
}

uint64_t HIDEvent.Digitizer.isInRange.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F210(a2, 8u);
}

void HIDEvent.Digitizer.isInRange.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003F264(a1, a2);
  v3 = sub_10003F230(v2, 8u);
  sub_10003F254(v3);
  sub_100005D94();
}

uint64_t sub_10003E84C(uint64_t *a1)
{
  return sub_10003F210(*a1, 8u);
}

BOOL HIDEvent.Digitizer.isFinger.getter(uint64_t a1)
{
  return HIDEvent.Digitizer.type.getter(a1) == 2;
}

unint64_t HIDEvent.Digitizer.type.getter(uint64_t a1)
{
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  result = sub_10003F230(a1, 4u);
  if ((result & 0x8000000000000000) != 0)
  {
    sub_10000C2B8();
    v4 = "Negative value is not representable";
    v5 = 35;
LABEL_6:
    result = sub_10003F274((uint64_t)"Fatal error", 11, 2, (uint64_t)v4, v5, v2, (uint64_t)"Swift/Integers.swift", v3, v6, v7, v8);
    __break(1u);
    return result;
  }
  if (HIDWORD(result))
  {
    sub_10000C2B8();
    v4 = "Not enough bits to represent the passed value";
    v5 = 45;
    goto LABEL_6;
  }
  return result;
}

BOOL HIDEvent.Digitizer.isPencil.getter(uint64_t a1)
{
  return HIDEvent.Digitizer.type.getter(a1) == 0;
}

BOOL HIDEvent.Digitizer.isTouching.getter(uint64_t a1)
{
  return sub_10003F230(a1, 9u) != 0;
}

uint64_t HIDEvent.Digitizer.isTouching.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F210(a2, 9u);
}

void HIDEvent.Digitizer.isTouching.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10003F264(a1, a2);
  v3 = sub_10003F230(v2, 9u);
  sub_10003F254(v3);
  sub_100005D94();
}

uint64_t sub_10003E988(uint64_t *a1)
{
  return sub_10003F210(*a1, 9u);
}

uint64_t HIDEvent.Digitizer.pressure.getter(uint64_t a1)
{
  return sub_10003F218(a1, 0xAu);
}

uint64_t HIDEvent.Digitizer.tiltX.getter(uint64_t a1)
{
  return sub_10003F218(a1, 0xDu);
}

uint64_t HIDEvent.Digitizer.tiltX.setter(uint64_t a1)
{
  return sub_10003F208(a1, 0xDu);
}

void HIDEvent.Digitizer.tiltX.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10003F220(a1, a2);
  sub_10003F218(v3, 0xDu);
  *v2 = v4;
  sub_100005D94();
}

uint64_t sub_10003E9E4(uint64_t a1)
{
  return sub_10003F208(*(_QWORD *)(a1 + 8), 0xDu);
}

uint64_t HIDEvent.Digitizer.tiltY.getter(uint64_t a1)
{
  return sub_10003F218(a1, 0xEu);
}

uint64_t HIDEvent.Digitizer.tiltY.setter(uint64_t a1)
{
  return sub_10003F208(a1, 0xEu);
}

void HIDEvent.Digitizer.tiltY.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10003F220(a1, a2);
  sub_10003F218(v3, 0xEu);
  *v2 = v4;
  sub_100005D94();
}

uint64_t sub_10003EA38(uint64_t a1)
{
  return sub_10003F208(*(_QWORD *)(a1 + 8), 0xEu);
}

void HIDEvent.Digitizer.touchWithIndex(_:)(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v2 = HIDEvent.Digitizer.children.getter();
  v3 = v2;
  v4 = *((_QWORD *)v2 + 2);
  if (v4)
  {
    v5 = (void *)*((_QWORD *)v2 + 4);
    swift_bridgeObjectRetain(v2);
    v6 = v5;
    if (sub_10003F230((uint64_t)v6, 5u) == a1 || (v6, v4 == 1))
    {
LABEL_10:
      sub_10003F28C();
    }
    else
    {
      v7 = 5;
      while (1)
      {
        v8 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v9 = *(id *)&v3[8 * v7];
        if (sub_10003F230((uint64_t)v9, 5u) != a1)
        {

          ++v7;
          if (v8 != v4)
            continue;
        }
        goto LABEL_10;
      }
      __break(1u);
    }
  }
  else
  {
    sub_100005DD0();
  }
}

uint64_t HIDEvent.Digitizer.willUpdateMask.getter(uint64_t a1)
{
  return sub_10003F230(a1, 0x1Cu);
}

uint64_t HIDEvent.Digitizer.willUpdateMask.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F210(a2, 0x1Cu);
}

void HIDEvent.Digitizer.willUpdateMask.modify(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = sub_10003F220(a1, a2);
  *v2 = sub_10003F230(v3, 0x1Cu);
  sub_100005D94();
}

uint64_t sub_10003EB60(uint64_t a1)
{
  return sub_10003F210(*(_QWORD *)(a1 + 8), 0x1Cu);
}

uint64_t HIDEvent.Digitizer.x.getter(uint64_t a1)
{
  return IOHIDEventGetDoubleValue(a1, 720896);
}

void HIDEvent.Digitizer.x.modify(uint64_t a1, uint64_t a2)
{
  double *v2;
  uint64_t v3;

  v3 = sub_10003F220(a1, a2);
  *v2 = IOHIDEventGetDoubleValue(v3, 720896);
  sub_100005D94();
}

uint64_t sub_10003EBAC(uint64_t a1)
{
  return _s10SidecarHID8HIDEventV9DigitizerV1xSdvs_0(*(_QWORD *)(a1 + 8));
}

uint64_t HIDEvent.Digitizer.y.getter(uint64_t a1)
{
  return sub_10003F218(a1, 1u);
}

uint64_t HIDEvent.Digitizer.y.setter(uint64_t a1)
{
  return sub_10003F208(a1, 1u);
}

void HIDEvent.Digitizer.y.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10003F220(a1, a2);
  sub_10003F218(v3, 1u);
  *v2 = v4;
  sub_100005D94();
}

uint64_t sub_10003EBFC(uint64_t a1)
{
  return sub_10003F208(*(_QWORD *)(a1 + 8), 1u);
}

uint64_t HIDEvent.Digitizer.z.getter(uint64_t a1)
{
  return sub_10003F218(a1, 2u);
}

uint64_t HIDEvent.Digitizer.z.setter(uint64_t a1)
{
  return sub_10003F208(a1, 2u);
}

void HIDEvent.Digitizer.z.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10003F220(a1, a2);
  sub_10003F218(v3, 2u);
  *v2 = v4;
  sub_100005D94();
}

uint64_t sub_10003EC50(uint64_t a1)
{
  return sub_10003F208(*(_QWORD *)(a1 + 8), 2u);
}

uint64_t HIDEvent.Digitizer.roll.getter(uint64_t a1)
{
  return sub_10003F218(a1, 0x17u);
}

uint64_t HIDEvent.Digitizer.roll.setter(uint64_t a1)
{
  return sub_10003F208(a1, 0x17u);
}

void HIDEvent.Digitizer.roll.modify(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_10003F220(a1, a2);
  sub_10003F218(v3, 0x17u);
  *v2 = v4;
  sub_100005D94();
}

uint64_t sub_10003ECA4(uint64_t a1)
{
  return sub_10003F208(*(_QWORD *)(a1 + 8), 0x17u);
}

id sub_10003ECB8()
{
  id *v0;

  return HIDEvent.Digitizer.hidEvent.getter(*v0);
}

void variable initialization expression of KeyboardReport.report()
{
  sub_10003F24C();
  HIDReport.__allocating_init(count:)(8);
  sub_100005D94();
}

uint64_t variable initialization expression of KeyboardReport.Iterator.index()
{
  return -1;
}

void variable initialization expression of PencilReport.report()
{
  sub_10003F24C();
  HIDReport.__allocating_init(count:)(21);
  sub_100005D94();
}

void variable initialization expression of SqueezeGestureReport.report()
{
  sub_10003F24C();
  HIDReport.__allocating_init(count:)(32);
  sub_100005D94();
}

uint64_t variable initialization expression of ScrollFilter.state()
{
  return 0;
}

void variable initialization expression of TouchReport.report()
{
  sub_10003F24C();
  HIDReport.__allocating_init(count:)(23);
  sub_100005D94();
}

uint64_t sub_10003ED6C()
{
  uint64_t *v0;

  return HIDEvent.Digitizer.index.getter(*v0);
}

BOOL sub_10003ED74()
{
  uint64_t *v0;

  return HIDEvent.Digitizer.isTouching.getter(*v0);
}

BOOL sub_10003ED7C()
{
  uint64_t *v0;

  return HIDEvent.Digitizer.isInRange.getter(*v0);
}

void *variable initialization expression of Domain.completions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of TouchTrackerLog.tracker()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for TouchTracker();
  result = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

char *sub_10003EDC0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_100078C58);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10004C1CC((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_10003F020(0, v8, (unint64_t)v13, a4);
  }
  return v11;
}

ValueMetadata *type metadata accessor for HIDEvent.Digitizer()
{
  return &type metadata for HIDEvent.Digitizer;
}

void type metadata accessor for IOHIDReportType(uint64_t a1)
{
  sub_10003EEF8(a1, &qword_100078C38, (uint64_t)&unk_10006C460);
}

void type metadata accessor for IOHIDUserDevice(uint64_t a1)
{
  sub_10003EEF8(a1, &qword_100078C40, (uint64_t)&unk_10006C488);
}

void type metadata accessor for IOHIDEvent(uint64_t a1)
{
  sub_10003EEF8(a1, &qword_100078C48, (uint64_t)&unk_10006C4B8);
}

void sub_10003EEF8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
  sub_100005D94();
}

char *sub_10003EF38(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_100078C50);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  if ((v5 & 1) != 0)
  {
    sub_10004C220((char *)(a4 + 32), v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
    sub_100005DD0();
  }
  else
  {
    sub_10003F114(0, v8, v13, a4);
  }
  return v11;
}

uint64_t sub_10003F020(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 8 * a1 + 32;
  v7 = a3 + 8 * v4;
  if (v6 >= v7 || v6 + 8 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10003F114(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = (char *)(a4 + 16 * a1 + 32);
  v7 = &__dst[16 * v4];
  if (v6 >= v7 || &v6[16 * v4] <= __dst)
  {
    memcpy(__dst, v6, 16 * v4);
    swift_bridgeObjectRelease(a4);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003F208(uint64_t a1, unsigned __int16 a2)
{
  return IOHIDEventSetDoubleValue(a1, a2 | 0xB0000u);
}

uint64_t sub_10003F210(uint64_t a1, unsigned __int16 a2)
{
  return IOHIDEventSetIntegerValue(a1, a2 | 0xB0000u);
}

uint64_t sub_10003F218(uint64_t a1, unsigned __int16 a2)
{
  return IOHIDEventGetDoubleValue(a1, a2 | 0xB0000u);
}

uint64_t sub_10003F220(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  return a2;
}

uint64_t sub_10003F230(uint64_t a1, unsigned __int16 a2)
{
  return IOHIDEventGetIntegerValue(a1, a2 | 0xB0000u);
}

uint64_t _s10SidecarHID14RotationFilterC5state33_6D9B20B1CBACE08698756F1A498F0F01LLAC5StateAELLOvpfi_0()
{
  return 0;
}

uint64_t _s10SidecarHID8HIDEventV9DigitizerV1xSdvs_0(uint64_t a1)
{
  return IOHIDEventSetDoubleValue(a1, 720896);
}

uint64_t sub_10003F24C()
{
  return type metadata accessor for HIDReport();
}

uint64_t sub_10003F254(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result != 0;
  return result;
}

uint64_t sub_10003F264(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  return a2;
}

uint64_t sub_10003F274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, 2, a7, 20, a9, a10, a11);
}

char *sub_10003F280(char *a1, int64_t a2)
{
  uint64_t v2;

  return sub_10003EDC0(a1, a2, 1, v2);
}

uint64_t sub_10003F28C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 2);
}

uint64_t sub_10003F298()
{
  return IOHIDEventGetType();
}

uint64_t HIDEvent.GenericGesture.init(timestamp:gestureType:options:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  if ((a3 & 0x8000000000000000) != 0)
  {
    sub_10000C2B8();
    v6 = "Negative value is not representable";
    v7 = 35;
  }
  else
  {
    if (!HIDWORD(a3))
      return IOHIDEventCreateGenericGestureEvent(0, a1, a2, a3);
    sub_10000C2B8();
    v6 = "Not enough bits to represent the passed value";
    v7 = 45;
  }
  result = sub_10003F274((uint64_t)"Fatal error", 11, 2, (uint64_t)v6, v7, v4, (uint64_t)"Swift/Integers.swift", v5, v8, v9, v10);
  __break(1u);
  return result;
}

void *HIDEvent.GenericGesture.init(hidEvent:)(void *a1)
{
  if (IOHIDEventGetType() != 39)
  {

    return 0;
  }
  return a1;
}

unint64_t HIDEvent.GenericGesture.gestureType.getter(uint64_t a1)
{
  unint64_t result;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  result = IOHIDEventGetIntegerValue(a1, 2555904);
  if ((result & 0x8000000000000000) != 0)
  {
    sub_10000C2B8();
    v4 = "Negative value is not representable";
    v5 = 35;
LABEL_6:
    result = sub_10003F274((uint64_t)"Fatal error", 11, 2, (uint64_t)v4, v5, v2, (uint64_t)"Swift/Integers.swift", v3, v6, v7, v8);
    __break(1u);
    return result;
  }
  if (HIDWORD(result))
  {
    sub_10000C2B8();
    v4 = "Not enough bits to represent the passed value";
    v5 = 45;
    goto LABEL_6;
  }
  return result;
}

uint64_t HIDEvent.GenericGesture.gestureType.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F530(a2);
}

void HIDEvent.GenericGesture.gestureType.modify(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = HIDEvent.GenericGesture.gestureType.getter(a2);
  sub_100005D94();
}

uint64_t sub_10003F43C(uint64_t *a1)
{
  return sub_10003F530(*a1);
}

uint64_t HIDEvent.GenericGesture.tapCount.getter(uint64_t a1)
{
  return IOHIDEventGetIntegerValue(a1, 2555905);
}

uint64_t HIDEvent.GenericGesture.tapCount.setter(uint64_t a1, uint64_t a2)
{
  return sub_10003F524(a2);
}

void HIDEvent.GenericGesture.tapCount.modify(_QWORD *a1, uint64_t a2)
{
  a1[1] = a2;
  *a1 = IOHIDEventGetIntegerValue(a2, 2555905);
  sub_100005D94();
}

uint64_t sub_10003F4A0(uint64_t a1)
{
  return sub_10003F524(*(_QWORD *)(a1 + 8));
}

uint64_t HIDEvent.GenericGesture.swipeProgress.getter(uint64_t a1)
{
  return IOHIDEventGetDoubleValue(a1, 2555906);
}

void HIDEvent.GenericGesture.swipeProgress.modify(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  *(double *)a1 = IOHIDEventGetDoubleValue(a2, 2555906);
  sub_100005D94();
}

uint64_t sub_10003F4F8(uint64_t a1)
{
  return _s10SidecarHID8HIDEventV14GenericGestureV13swipeProgressSdvs_0(*(_QWORD *)(a1 + 8));
}

ValueMetadata *type metadata accessor for HIDEvent.GenericGesture()
{
  return &type metadata for HIDEvent.GenericGesture;
}

uint64_t _s10SidecarHID8HIDEventV14GenericGestureV13swipeProgressSdvs_0(uint64_t a1)
{
  return IOHIDEventSetDoubleValue(a1, 2555906);
}

uint64_t sub_10003F524(uint64_t a1)
{
  return IOHIDEventSetIntegerValue(a1, 2555905);
}

uint64_t sub_10003F530(uint64_t a1)
{
  return IOHIDEventSetIntegerValue(a1, 2555904);
}

uint64_t static HIDDescriptor.dataWithReportDescriptor(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = Data.count.getter(a1, a2);
  if ((v4 & 0x8000000000000000) != 0)
  {
    sub_10000C2B8();
    v10 = "Negative value is not representable";
    v11 = 35;
  }
  else
  {
    v5 = v4;
    if (v4 < 0x10000)
    {
      v6 = sub_100008414(&qword_100077B60);
      v7 = swift_allocObject(v6, 41, 7);
      *(_OWORD *)(v7 + 16) = xmmword_100059C70;
      *(_DWORD *)(v7 + 32) = 16851209;
      *(_WORD *)(v7 + 36) = 256;
      *(_BYTE *)(v7 + 38) = 34;
      *(_WORD *)(v7 + 39) = v5;
      sub_10003F650(v7);
      v12 = v8;
      Data.append(_:)(a1, a2);
      return v12;
    }
    sub_10000C2B8();
    v10 = "Not enough bits to represent the passed value";
    v11 = 45;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, 2, "Swift/Integers.swift", 20);
  __break(1u);
  return result;
}

void sub_10003F650(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v7 = sub_100008414(&qword_100078C60);
  v8 = sub_10003F70C(&qword_100078C68, &qword_100078C60, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v6[0] = a1;
  v2 = sub_10000BE70(v6, v7);
  v3 = *v2 + 32;
  v4 = v3 + *(_QWORD *)(*v2 + 16);
  swift_bridgeObjectRetain(a1);
  sub_10001D2EC(v3, v4, &v5);
  swift_bridgeObjectRelease(a1);
  sub_10000B910(v6);
  sub_10003F74C();
}

ValueMetadata *type metadata accessor for HIDDescriptor()
{
  return &type metadata for HIDDescriptor;
}

uint64_t sub_10003F70C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100008478(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

char *HIDEvent.children.getter()
{
  id v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *result;
  unint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = (id)IOHIDEventGetChildren();
  if (!v0)
    return (char *)&_swiftEmptyArrayStorage;
  v1 = v0;
  v13 = 0;
  type metadata accessor for IOHIDEvent(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v1, &v13, v2);

  v3 = v13;
  v4 = &_swiftEmptyArrayStorage;
  if (!v13)
    return (char *)v4;
  if (!((unint64_t)v13 >> 62))
  {
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease(v3);
    return (char *)v4;
  }
  if (v13 >= 0)
    v12 = v13 & 0xFFFFFFFFFFFFFF8;
  else
    v12 = v13;
  swift_bridgeObjectRetain(v13);
  v5 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease(v3);
  if (!v5)
    goto LABEL_19;
LABEL_5:
  v13 = (uint64_t)&_swiftEmptyArrayStorage;
  result = sub_100040540(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    v4 = (_QWORD *)v13;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v8 = (id)sub_100040738(v7, v3);
      else
        v8 = *(id *)(v3 + 8 * v7 + 32);
      v9 = v8;
      v13 = (uint64_t)v4;
      v11 = v4[2];
      v10 = v4[3];
      if (v11 >= v10 >> 1)
      {
        sub_100040540((char *)(v10 > 1), v11 + 1, 1);
        v4 = (_QWORD *)v13;
      }
      ++v7;
      v4[2] = v11 + 1;
      v4[v11 + 4] = v9;
    }
    while (v5 != v7);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

SidecarHID::HIDEvent::Phase_optional __swiftcall HIDEvent.Phase.init(rawValue:)(Swift::UInt16 rawValue)
{
  int v1;
  char v2;
  SidecarHID::HIDEvent::Phase_optional v3;

  if ((rawValue & 8) != 0)
    LOBYTE(v1) = 4;
  else
    v1 = (rawValue << 24 >> 31) & 5;
  if ((rawValue & 4) != 0)
    v2 = 3;
  else
    v2 = v1;
  if ((rawValue & 2) != 0)
    v3.value = SidecarHID_HIDEvent_Phase_changed;
  else
    v3.value = v2;
  if ((rawValue & 1) != 0)
    return (SidecarHID::HIDEvent::Phase_optional)1;
  else
    return v3;
}

uint64_t HIDEvent.Phase.rawValue.getter(char a1)
{
  return word_100059E12[a1];
}

BOOL sub_10003F928(char *a1, char *a2)
{
  return sub_10004B964(*a1, *a2);
}

void sub_10003F934()
{
  char *v0;

  sub_10004B988(*v0);
}

void sub_10003F93C(uint64_t a1)
{
  char *v1;

  sub_10004B9C8(a1, *v1);
}

void sub_10003F944(uint64_t a1)
{
  char *v1;

  sub_10004B9F4(a1, *v1);
}

SidecarHID::HIDEvent::Phase_optional sub_10003F94C@<W0>(Swift::UInt16 *a1@<X0>, SidecarHID::HIDEvent::Phase_optional *a2@<X8>)
{
  SidecarHID::HIDEvent::Phase_optional result;

  result.value = HIDEvent.Phase.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_10003F974@<X0>(_WORD *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = HIDEvent.Phase.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void HIDEvent.appendChild(_:)(_QWORD *a1, void *a2)
{
  sub_10003F9B4(a1, a2, (void (*)(id, id, _QWORD))&IOHIDEventAppendEvent);
}

void HIDEvent.removeChild(_:)(_QWORD *a1, void *a2)
{
  sub_10003F9B4(a1, a2, (void (*)(id, id, _QWORD))&IOHIDEventRemoveEvent);
}

void sub_10003F9B4(_QWORD *a1, void *a2, void (*a3)(id, id, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;

  v5 = a1[3];
  v6 = a1[4];
  sub_10000BE70(a1, v5);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v8 = a2;
  v9 = (id)v7(v5, v6);
  a3(v8, v9, 0);

}

uint64_t HIDEvent.flags.setter(uint64_t a1, uint64_t a2)
{
  return IOHIDEventSetEventFlags(a2, a1);
}

void HIDEvent.flags.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_10003F264(a1, a2);
  *(_DWORD *)(v2 + 8) = IOHIDEventGetEventFlags(v3);
  sub_100005D94();
}

uint64_t sub_10003FA7C(uint64_t a1)
{
  return IOHIDEventSetEventFlags(*(_QWORD *)a1, *(unsigned int *)(a1 + 8));
}

BOOL HIDEvent.isAbsolute.getter()
{
  return IOHIDEventIsAbsolute() != 0;
}

BOOL HIDEvent.isRepeat.getter()
{
  return IOHIDEventIsRepeat() != 0;
}

uint64_t HIDEvent.isRepeat.setter(uint64_t result, uint64_t a2)
{
  if ((result & 1) != 0)
    return IOHIDEventSetRepeat(a2);
  return result;
}

void HIDEvent.isRepeat.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_10003F264(a1, a2);
  *(_BYTE *)(v2 + 8) = IOHIDEventIsRepeat(v3) != 0;
  sub_100005D94();
}

uint64_t sub_10003FB08(uint64_t result)
{
  if (*(_BYTE *)(result + 8) == 1)
    return IOHIDEventSetRepeat(*(_QWORD *)result);
  return result;
}

uint64_t HIDEvent.latency.getter(uint64_t a1)
{
  return IOHIDEventGetLatency(a1, 1);
}

uint64_t HIDEvent.momentum.getter()
{
  return IOHIDEventGetScrollMomentum();
}

uint64_t HIDEvent.momentum.setter(uint64_t a1, uint64_t a2)
{
  return sub_100040AE8(a2);
}

void HIDEvent.momentum.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = sub_10003F264(a1, a2);
  *(_BYTE *)(v2 + 8) = IOHIDEventGetScrollMomentum(v3);
  sub_100005D94();
}

uint64_t sub_10003FB74(uint64_t *a1)
{
  return sub_100040AE8(*a1);
}

uint64_t HIDEvent.phase.getter()
{
  char Phase;
  int v1;
  int v2;
  unsigned int v3;

  Phase = IOHIDEventGetPhase();
  if ((Phase & 8) != 0)
    v1 = 4;
  else
    v1 = (Phase >> 7) & 5;
  if ((Phase & 4) != 0)
    v2 = 3;
  else
    v2 = v1;
  if ((Phase & 2) != 0)
    v3 = 2;
  else
    v3 = v2;
  if ((Phase & 1) != 0)
    return 1;
  else
    return v3;
}

uint64_t HIDEvent.phase.setter(char a1, uint64_t a2)
{
  return IOHIDEventSetPhase(a2, word_100059E12[a1]);
}

void HIDEvent.phase.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10003F264(a1, a2);
  *(_BYTE *)(v2 + 8) = HIDEvent.phase.getter();
  sub_100005D94();
}

uint64_t sub_10003FC18(uint64_t a1)
{
  return IOHIDEventSetPhase(*(_QWORD *)a1, word_100059E12[*(char *)(a1 + 8)]);
}

uint64_t HIDEvent.sender.setter(uint64_t a1, uint64_t a2)
{
  return IOHIDEventSetSenderID(a2, a1);
}

void HIDEvent.sender.modify(_QWORD *a1, uint64_t a2)
{
  a1[1] = a2;
  *a1 = IOHIDEventGetSenderID(a2);
  sub_100005D94();
}

uint64_t sub_10003FC78(_QWORD *a1)
{
  return IOHIDEventSetSenderID(a1[1], *a1);
}

uint64_t HIDEvent.timestamp.setter(uint64_t a1, uint64_t a2)
{
  return IOHIDEventSetTimeStamp(a2, a1);
}

void HIDEvent.timestamp.modify(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  *v2 = sub_100040B04(a1, a2);
  sub_100005D94();
}

uint64_t sub_10003FCC0(_QWORD *a1)
{
  return IOHIDEventSetTimeStamp(a1[1], *a1);
}

double HIDEvent.timestampSeconds.getter(uint64_t a1)
{
  unint64_t v1;

  IOHIDEventGetTimeStamp(a1);
  HostTime.nanoseconds.getter();
  return (double)v1 * 0.000000001;
}

void HostTime.seconds.getter()
{
  char v0;
  char v1;
  char v2;
  char v3;

  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  sub_100040AD8();
  if (!v1 & v0)
    return;
  sub_10003E0EC();
  if (v1)
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_100040AF8();
  if (v2 ^ v3 | v1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  sub_100040AD8();
  if (!v2)
    goto LABEL_13;
}

uint64_t HIDEvent.timestampSeconds.setter(uint64_t a1, double a2)
{
  SidecarHID::HostTime v3;

  v3.rawValue = HostTime.init(nanoseconds:)(a2 * 1000000000.0).rawValue;
  return sub_100040AF0(a1, v3.rawValue);
}

SidecarHID::HostTime __swiftcall HostTime.init(seconds:)(Swift::Double seconds)
{
  char v1;
  char v2;
  SidecarHID::HostTime result;
  char v4;
  char v5;

  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  sub_100040AD8();
  if (!v2 & v1)
    goto LABEL_10;
  sub_10003E0EC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_100040AF8();
    if (!(v4 ^ v5 | v2))
    {
      sub_100040AD8();
      if (!v4)
        goto LABEL_13;
LABEL_10:
      sub_100040B14();
      return result;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

void HIDEvent.timestampSeconds.modify(uint64_t a1, uint64_t a2)
{
  double *v2;
  unint64_t v3;

  sub_100040B04(a1, a2);
  HostTime.nanoseconds.getter();
  *v2 = (double)v3 * 0.000000001;
  sub_100005D94();
}

uint64_t sub_10003FEB0(uint64_t a1)
{
  uint64_t v1;
  SidecarHID::HostTime v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2.rawValue = HostTime.init(nanoseconds:)(*(double *)a1 * 1000000000.0).rawValue;
  return sub_100040AF0(v1, v2.rawValue);
}

uint64_t HIDEvent.vendor.getter(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  IOHIDEventGetVendorDefinedData(a1, &v3, &v2);
  result = v3;
  if (v3)
    return Data.init(bytes:count:)(v3, v2);
  return result;
}

float sub_10003FF50()
{
  __int128 v0;
  float result;
  mach_timebase_info v2;

  v2 = 0;
  mach_timebase_info(&v2);
  *(_QWORD *)&v0 = v2.numer;
  *((_QWORD *)&v0 + 1) = v2.denom;
  result = *(float *)&v2.numer;
  static HostTime.timebase = v0;
  return result;
}

__int128 *HostTime.timebase.unsafeMutableAddressor()
{
  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  return &static HostTime.timebase;
}

uint64_t static HostTime.timebase.getter()
{
  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  return static HostTime.timebase;
}

SidecarHID::HostTime __swiftcall HostTime.init(nanoseconds:)(Swift::Double nanoseconds)
{
  char v1;
  char v2;
  SidecarHID::HostTime result;
  char v4;
  char v5;

  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  sub_100040AD8();
  if (!v2 & v1)
    goto LABEL_10;
  sub_10003E0EC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_100040AF8();
    if (!(v4 ^ v5 | v2))
    {
      sub_100040AD8();
      if (!v4)
        goto LABEL_13;
LABEL_10:
      sub_100040B14();
      return result;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

SidecarHID::HostTime __swiftcall HostTime.init(nanoseconds:)(Swift::UInt64 nanoseconds)
{
  char v1;
  char v2;
  SidecarHID::HostTime result;
  char v4;
  char v5;

  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  sub_100040AD8();
  if (!v2 & v1)
    goto LABEL_10;
  sub_10003E0EC();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    sub_100040AF8();
    if (!(v4 ^ v5 | v2))
    {
      sub_100040AD8();
      if (!v4)
        goto LABEL_13;
LABEL_10:
      sub_100040B14();
      return result;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

void HostTime.nanoseconds.getter()
{
  char v0;
  char v1;
  char v2;
  char v3;

  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  sub_100040AD8();
  if (!v1 & v0)
    return;
  sub_10003E0EC();
  if (v1)
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_100040AF8();
  if (v2 ^ v3 | v1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  sub_100040AD8();
  if (!v2)
    goto LABEL_13;
}

uint64_t static HostTime.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __CFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

SidecarHID::HostTime static HostTime.+ infix(_:_:)(double a1)
{
  unint64_t v2;

  HostTime.nanoseconds.getter();
  return HostTime.init(nanoseconds:)(((double)v2 * 0.000000001 + a1) * 1000000000.0);
}

unint64_t static HostTime.- infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (a1 >= a2)
    return a1 - a2;
  else
    return 0;
}

BOOL sub_100040260(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

void static HostTime.- infix(_:_:)(double a1)
{
  char v2;
  double v3;
  char v4;
  char v5;
  char v6;
  double v7;

  if (qword_100078BC0 != -1)
    swift_once(&qword_100078BC0, sub_10003FF50);
  sub_100040AD8();
  if (!v4 & v2)
  {
    v3 = 1.84467441e10;
    goto LABEL_11;
  }
  sub_10003E0EC();
  if (v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_100040AF8();
  if (v5 ^ v6 | v4)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  sub_100040AD8();
  if (!v5)
    goto LABEL_16;
  v3 = (double)(unint64_t)v7 * 0.000000001;
LABEL_11:
  if (v3 > a1)
    HostTime.init(nanoseconds:)((v3 - a1) * 1000000000.0);
}

BOOL static HostTime.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL sub_100040360(unint64_t *a1, unint64_t *a2)
{
  return static HostTime.< infix(_:_:)(*a1, *a2);
}

BOOL sub_10004036C(unint64_t *a1, unint64_t *a2)
{
  return sub_100040378(*a1, *a2);
}

BOOL sub_100040378(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

BOOL sub_100040384(unint64_t *a1, unint64_t *a2)
{
  return sub_100040390(*a1, *a2);
}

BOOL sub_100040390(unint64_t a1, unint64_t a2)
{
  return a1 >= a2;
}

BOOL sub_10004039C(unint64_t *a1, unint64_t *a2)
{
  return sub_100040260(*a1, *a2);
}

uint64_t sub_1000403A8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 8 * a2 <= a1 || a1 + 8 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100040474(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy(a3);
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

char *sub_100040540(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100040578(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_10004055C(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_100040658(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_100040578(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414(&qword_100078C80);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10004C1CC(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000403A8((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

char *sub_100040658(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100008414((uint64_t *)&unk_1000779F0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 16);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_10000B0A4(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100040474((unint64_t)v14, v8, (unint64_t)v13);
  }
  swift_release(a4);
  return v11;
}

uint64_t sub_100040738(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  uint64_t ObjectType;
  Swift::String v13;
  void *object;

  if ((unint64_t)a2 >> 62)
  {
    if (a2 >= 0)
      a2 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = _CocoaArrayWrapper.subscript.getter(a1, a2);
    type metadata accessor for IOHIDEvent(0);
    if (swift_dynamicCastUnknownClass(v2, v8))
      return v2;
LABEL_12:
    _StringGuts.grow(_:)(85);
    v7 = 0xD000000000000046;
    v6 = 0x8000000100057A60;
    goto LABEL_13;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v2 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  type metadata accessor for IOHIDEvent(0);
  v4 = v3;
  v5 = swift_unknownObjectRetain(v2);
  if (swift_dynamicCastUnknownClass(v5, v4))
    return v2;
  _StringGuts.grow(_:)(82);
  v6 = 0x8000000100057A10;
  v7 = 0xD000000000000043;
LABEL_13:
  String.append(_:)(*(Swift::String *)&v7);
  v10._countAndFlagsBits = 0x6576454449484F49;
  v10._object = (void *)0xED0000666552746ELL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x756F662074756220;
  v11._object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v11);
  ObjectType = swift_getObjectType(v2);
  swift_unknownObjectRelease(v2);
  v13._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, 0);
  __break(1u);
  return result;
}

unint64_t sub_1000408F4()
{
  unint64_t result;

  result = qword_100078C70;
  if (!qword_100078C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HIDEvent.Phase, &type metadata for HIDEvent.Phase);
    atomic_store(result, (unint64_t *)&qword_100078C70);
  }
  return result;
}

unint64_t sub_100040934()
{
  unint64_t result;

  result = qword_100078C78;
  if (!qword_100078C78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HostTime, &type metadata for HostTime);
    atomic_store(result, (unint64_t *)&qword_100078C78);
  }
  return result;
}

void type metadata accessor for HIDEvent()
{
  sub_10000C664();
}

uint64_t getEnumTagSinglePayload for HIDEvent.Phase(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDEvent.Phase(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100040A50 + 4 * byte_100059CB5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100040A84 + 4 * byte_100059CB0[v4]))();
}

uint64_t sub_100040A84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040A8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100040A94);
  return result;
}

uint64_t sub_100040AA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100040AA8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100040AAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100040AB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for HIDEvent.Phase()
{
  sub_10000C664();
}

void type metadata accessor for HostTime()
{
  sub_10000C664();
}

uint64_t sub_100040AE8@<X0>(uint64_t a1@<X8>)
{
  return IOHIDEventSetScrollMomentum(a1);
}

uint64_t sub_100040AF0(uint64_t a1, uint64_t a2)
{
  return IOHIDEventSetTimeStamp(a1, a2);
}

uint64_t sub_100040B04(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  return IOHIDEventGetTimeStamp(a2);
}

uint64_t HIDReport.bytes.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void HIDReport.__allocating_init(count:)(int64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;

  v3 = swift_allocObject(v1, 32, 7);
  v4 = (void *)swift_slowAlloc(a1, -1);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = a1;
  if (!a1)
    goto LABEL_4;
  if (a1 >= 1)
  {
    bzero(v4, a1);
LABEL_4:
    sub_100005D94();
    return;
  }
  __break(1u);
}

void HIDReport.init(count:)(int64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)swift_slowAlloc(a1, -1);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = a1;
  if (!a1)
    goto LABEL_4;
  if (a1 >= 1)
  {
    bzero(v3, a1);
LABEL_4:
    sub_100005D94();
    return;
  }
  __break(1u);
}

uint64_t HIDReport.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    sub_10000F604(v1);
  return v0;
}

uint64_t HIDReport.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    sub_10000F604(v1);
  return swift_deallocClassInstance(v0, 32, 7);
}

const void *static HIDReport.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  size_t v2;
  const void *result;
  const void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != *(_QWORD *)(a2 + 24))
    return 0;
  result = *(const void **)(a1 + 16);
  if (result)
  {
    v4 = *(const void **)(a2 + 16);
    if (v4)
      return (const void *)(memcmp(result, v4, v2) == 0);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Clock.clockIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void (*HIDReport.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(*(_QWORD *)(v2 + 16) + a2);
  return sub_100040C80;
}

void sub_100040C80(uint64_t a1)
{
  sub_100043720(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

Swift::Int __swiftcall HIDReport.index(after:)(Swift::Int after)
{
  return after + 1;
}

uint64_t HIDReport.indices.getter()
{
  return 0;
}

Swift::Void __swiftcall HIDReport.swapAt(_:_:)(Swift::Int a1, Swift::Int a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = *(_BYTE *)(v3 + a1);
      *(_BYTE *)(v3 + a1) = *(_BYTE *)(v3 + a2);
      *(_BYTE *)(v3 + a2) = v4;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t HIDReport.baseAddress.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (!result)
    __break(1u);
  return result;
}

Swift::Void __swiftcall HIDReport.fill(with:)(Swift::UInt8 with)
{
  uint64_t v1;
  int v2;
  void *v3;

  v2 = with;
  v3 = *(void **)(v1 + 16);
  if (v3)
    memset(v3, v2, *(_QWORD *)(v1 + 24));
  else
    __break(1u);
}

void HIDReport.copy(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  size_t v5;
  const void *v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(char **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  if (v2 >= v4)
    v5 = *(_QWORD *)(v1 + 24);
  else
    v5 = *(_QWORD *)(a1 + 24);
  if (!v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v6 = *(const void **)(a1 + 16);
  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  memcpy(v3, v6, v5);
  if (v2 < v4)
  {
    if (!__OFSUB__(v4, v5))
    {
      bzero(&v3[v5], v4 - v5);
      return;
    }
    __break(1u);
    goto LABEL_11;
  }
}

void HIDReport.copy()()
{
  uint64_t v0;

  HIDReport.__allocating_init(count:)(*(_QWORD *)(v0 + 24));
  HIDReport.copy(from:)(v0);
  sub_100005D94();
}

char *HIDReport.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char *v3;
  char *result;
  unint64_t v5;
  char v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = _swiftEmptyArrayStorage;
  if (!v1)
  {
LABEL_9:
    v17 = (uint64_t)v2;
    v14 = sub_100008414(&qword_100077E68);
    sub_10004339C((uint64_t)&qword_100078190);
    v16 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v14, v15);
    swift_bridgeObjectRelease(v2);
    return (char *)v16;
  }
  v3 = *(char **)(v0 + 16);
  v19 = _swiftEmptyArrayStorage;
  result = sub_10004055C(0, v1 & ~(v1 >> 63), 0);
  if ((v1 & 0x8000000000000000) == 0)
  {
    v2 = v19;
    v5 = sub_100043010();
    do
    {
      v6 = *v3++;
      LOBYTE(v17) = v6;
      v7 = String.init<A>(_:radix:uppercase:)(&v17, 16, 0, &type metadata for UInt8, v5);
      v9 = v8;
      if (String.count.getter() <= 1)
      {
        v17 = 48;
        v18 = 0xE100000000000000;
        v10._countAndFlagsBits = v7;
        v10._object = v9;
        String.append(_:)(v10);
        swift_bridgeObjectRelease(v9);
        v7 = v17;
        v9 = (void *)v18;
      }
      v19 = v2;
      v12 = v2[2];
      v11 = v2[3];
      if (v12 >= v11 >> 1)
      {
        sub_10004055C((char *)(v11 > 1), v12 + 1, 1);
        v2 = v19;
      }
      v2[2] = v12 + 1;
      v13 = &v2[2 * v12];
      v13[4] = v7;
      v13[5] = v9;
      --v1;
    }
    while (v1);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

char *sub_100040F3C()
{
  return HIDReport.description.getter();
}

unint64_t sub_100040F5C(uint64_t *a1, uint64_t *a2)
{
  return (unint64_t)static HIDReport.== infix(_:_:)(*a1, *a2) & 1;
}

uint64_t sub_100040F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t result;

  v3 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v3)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    return result;
  }
  if (result < 0 || *(_QWORD *)(v2 + 24) < result)
    goto LABEL_6;
  return result;
}

uint64_t sub_100040FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_100041010(a1, a3);
  if (a2 < 1)
  {
    if (v5 <= 0 && v5 > a2)
      return 0;
  }
  else if ((v5 & 0x8000000000000000) == 0 && v5 < (unint64_t)a2)
  {
    return 0;
  }
  return sub_100040F7C(a1, a2);
}

uint64_t sub_100041010(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 24);
  if (v3 >= a2 && ((a2 | result) & 0x8000000000000000) == 0 && v3 >= result)
    return a2 - result;
  __break(1u);
  return result;
}

uint64_t sub_100041038@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100041064(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100041064(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v2)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    return result;
  }
  if (result < 0 || result >= *(_QWORD *)(v1 + 24))
    goto LABEL_6;
  return result;
}

uint64_t sub_100041088(uint64_t *a1)
{
  uint64_t result;

  result = sub_100041064(*a1);
  *a1 = result;
  return result;
}

uint64_t sub_1000410B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_100040F7C(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000410E0(uint64_t *a1, uint64_t *a2)
{
  return sub_100041010(*a1, *a2);
}

void sub_100041108(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_100041110(uint64_t *a1@<X8>)
{
  *a1 = Clock.clockIdentifier.getter();
  sub_100005D94();
}

uint64_t (*sub_100041134(_BYTE *a1, _QWORD *a2))()
{
  *a1 = HIDReport.subscript.getter(*a2);
  return VideoStream.qosMonitorServerDidDie(_:);
}

void sub_10004116C(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  HIDReport.subscript.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
}

uint64_t sub_1000411A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = HIDReport.indices.getter();
  *a1 = 0;
  a1[1] = v3;
  return result;
}

BOOL sub_1000411C8()
{
  return sub_1000411EC();
}

BOOL sub_1000411EC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) == 0;
}

uint64_t sub_1000411FC()
{
  return Clock.clockIdentifier.getter();
}

void sub_10004121C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void sub_10004122C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char v5;

  *(_QWORD *)a4 = sub_100040FA4(*a1, a2, *a3);
  *(_BYTE *)(a4 + 8) = v5 & 1;
  sub_100005D94();
}

uint64_t sub_100041260(uint64_t *a1, uint64_t *a2)
{
  return sub_10004128C(*a1, *a2, a2[1]);
}

uint64_t sub_10004128C(uint64_t result, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  BOOL v4;

  if (result >= a2)
  {
    v4 = __OFSUB__(result, a3);
    v3 = result - a3 < 0;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  if (v3 == v4)
    __break(1u);
  return result;
}

uint64_t sub_1000412A0(uint64_t *a1, uint64_t *a2)
{
  return sub_1000412CC(*a1, *a2, a2[1]);
}

uint64_t sub_1000412CC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result)
    __break(1u);
  return result;
}

uint64_t sub_1000412E0(uint64_t *a1, uint64_t *a2)
{
  return sub_100041310(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_100041310(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2)
    __break(1u);
  return result;
}

void sub_100041324(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  *a2 = HIDReport.index(after:)(*a1);
  sub_100005D94();
}

_QWORD *sub_100041348(_QWORD *result)
{
  ++*result;
  return result;
}

void sub_100041358(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_100041364()
{
  return 2;
}

_QWORD *sub_10004136C()
{
  return sub_10004138C();
}

_QWORD *sub_10004138C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = sub_1000433CC(v0);
  swift_release(v0);
  return v1;
}

void sub_1000413BC(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  sub_100045EEC(a1, a2, a3);
  sub_100005D94();
}

uint64_t sub_1000413D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t HIDReport.getValue(_:at:bit:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 > 0x3F)
  {
    LOBYTE(v3) = 0;
    return (v3 & *(_BYTE *)(*(_QWORD *)(v2 + 16) + a1)) != 0;
  }
  if (a2 == 63)
  {
    sub_10000C2B8();
    v7 = "Negative value is not representable";
    v8 = 35;
  }
  else
  {
    if (a2 < 8)
    {
      v3 = 1 << a2;
      return (v3 & *(_BYTE *)(*(_QWORD *)(v2 + 16) + a1)) != 0;
    }
    sub_10000C2B8();
    v7 = "Not enough bits to represent the passed value";
    v8 = 45;
  }
  result = sub_10003F274((uint64_t)"Fatal error", 11, 2, (uint64_t)v7, v8, v5, (uint64_t)"Swift/Integers.swift", v6, v9, v10, v11);
  __break(1u);
  return result;
}

Swift::Void __swiftcall HIDReport.setValue(_:at:bit:)(Swift::Bool _, Swift::Int at, Swift::Int bit)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  if (bit < -64)
  {
LABEL_2:
    LOBYTE(v4) = 0;
    if (!_)
      goto LABEL_12;
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_BYTE *)(v5 + at) | v4;
LABEL_13:
    *(_BYTE *)(v5 + at) = v6;
    return;
  }
  if (bit > 64)
    goto LABEL_5;
  if (bit < 0)
    goto LABEL_2;
  if ((unint64_t)bit >= 0x40)
  {
LABEL_5:
    LOBYTE(v4) = 0;
    if (_)
      goto LABEL_6;
LABEL_12:
    v5 = *(_QWORD *)(v3 + 16);
    v6 = *(_BYTE *)(v5 + at) & ~(_BYTE)v4;
    goto LABEL_13;
  }
  if (bit == 63)
  {
    sub_10000C2B8();
    v9 = "Negative value is not representable";
    v10 = 35;
  }
  else
  {
    if ((unint64_t)bit < 8)
    {
      v4 = 1 << bit;
      if (_)
        goto LABEL_6;
      goto LABEL_12;
    }
    sub_10000C2B8();
    v9 = "Not enough bits to represent the passed value";
    v10 = 45;
  }
  sub_10003F274((uint64_t)"Fatal error", 11, 2, (uint64_t)v9, v10, v7, (uint64_t)"Swift/Integers.swift", v8, v11, v12, v13);
  __break(1u);
}

unint64_t HIDReport.getValue(_:at:)(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (__OFADD__(result, 7))
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 16);
    return *(unsigned int *)(v2 + result) | ((unint64_t)*(unsigned __int8 *)(v2 + result + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(v2 + result + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v2 + result + 6) << 48) | ((unint64_t)*(unsigned __int8 *)(v2 + result + 7) << 56);
  }
  return result;
}

Swift::Void __swiftcall HIDReport.setValue(_:at:)(Swift::UInt64 _, Swift::Int at)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(v3 + at) = _;
  if (__OFADD__(at, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  *(_BYTE *)(v3 + at + 1) = BYTE1(_);
  if (__OFADD__(at, 2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_BYTE *)(v3 + at + 2) = BYTE2(_);
  if (__OFADD__(at, 3))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(_BYTE *)(v3 + at + 3) = BYTE3(_);
  if (__OFADD__(at, 4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_BYTE *)(v3 + at + 4) = BYTE4(_);
  if (__OFADD__(at, 5))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  *(_BYTE *)(v3 + at + 5) = BYTE5(_);
  if (__OFADD__(at, 6))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(_BYTE *)(v3 + at + 6) = BYTE6(_);
  if (!__OFADD__(at, 7))
  {
    *(_BYTE *)(v3 + at + 7) = HIBYTE(_);
    return;
  }
LABEL_15:
  __break(1u);
}

Swift::Void __swiftcall HIDReport.setValue(_:at:)(Swift::Int8 _, Swift::Int at)
{
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(v2 + 16) + at) = _;
}

uint64_t _s10SidecarHID9HIDReportC8getValue_2ats6UInt16VAGm_SitF_0(uint64_t result)
{
  uint64_t v1;

  if (!__OFADD__(result, 1))
    return *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + result) | (*(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + result + 1) << 8);
  __break(1u);
  return result;
}

void _s10SidecarHID9HIDReportC8setValue_2atys6UInt16V_SitF_0(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(v3 + a2) = a1;
  if (__OFADD__(a2, 1))
    __break(1u);
  else
    sub_100043720(v3);
}

uint64_t _s10SidecarHID9HIDReportC8getValue_2ats6UInt32VAGm_SitF_0(uint64_t result)
{
  uint64_t v1;

  if (!__OFADD__(result, 3))
    return *(unsigned __int16 *)(*(_QWORD *)(v1 + 16) + result) | (*(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + result + 2) << 16) | (*(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + result + 3) << 24);
  __break(1u);
  return result;
}

void _s10SidecarHID9HIDReportC8setValue_2atys6UInt32V_SitF_0(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(v3 + a2) = a1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  *(_BYTE *)(v3 + a2 + 1) = BYTE1(a1);
  if (__OFADD__(a2, 2))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(_BYTE *)(v3 + a2 + 2) = BYTE2(a1);
  if (!__OFADD__(a2, 3))
  {
    sub_100043720(v3);
    return;
  }
LABEL_7:
  __break(1u);
}

double sub_10004172C(unsigned __int8 a1)
{
  return sub_1000435E4(a1);
}

double sub_10004173C(unsigned __int16 a1)
{
  return sub_1000435E4(a1);
}

double HIDReport.scaleValue<A>(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t, double);
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  double v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  double v39;
  char v40;
  uint64_t v41;
  _QWORD v43[2];
  uint64_t v44;
  double v45;

  v4 = a2;
  v44 = a1;
  v5 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1, a2);
  sub_100043710();
  v8 = v6 - v7;
  __chkstk_darwin(v9, v10);
  v12 = (char *)v43 - v11;
  __chkstk_darwin(v13, v14);
  v16 = (char *)v43 - v15;
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)v43 - v20;
  v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v22((char *)v43 - v20, v23, v24, v19);
  if (sub_10004360C() < 65)
  {
    v26 = sub_100043534();
    v43[1] = v22;
    v27 = v4;
    v28 = v8;
    v29 = v26;
    v30 = sub_100043600();
    sub_1000435CC((uint64_t)v21);
    v31 = (v29 & 1) == 0;
    v8 = v28;
    v4 = v27;
    if (v31)
      v25 = (double)(unint64_t)v30;
    else
      v25 = (double)v30;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_100043508((uint64_t)&v45, (uint64_t)v21, (uint64_t)&type metadata for Double);
    sub_1000435CC((uint64_t)v21);
    v25 = v45;
  }
  sub_100043734((uint64_t)v16, v4);
  if (sub_10004360C() <= 64)
  {
    v33 = sub_100043534();
    v34 = sub_100043600();
    sub_1000435CC((uint64_t)v16);
    if ((v33 & 1) != 0)
      v32 = (double)v34;
    else
      v32 = (double)(unint64_t)v34;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_100043508((uint64_t)&v45, (uint64_t)v16, (uint64_t)&type metadata for Double);
    sub_1000435CC((uint64_t)v16);
    v32 = v45;
  }
  sub_100043734((uint64_t)v12, v44);
  if (sub_10004360C() <= 64)
  {
    v36 = v4;
    v37 = sub_100043534();
    v38 = sub_100043600();
    sub_1000435CC((uint64_t)v12);
    v31 = (v37 & 1) == 0;
    v4 = v36;
    if (v31)
      v35 = (double)(unint64_t)v38;
    else
      v35 = (double)v38;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_100043508((uint64_t)&v45, (uint64_t)v12, (uint64_t)&type metadata for Double);
    sub_1000435CC((uint64_t)v12);
    v35 = v45;
  }
  sub_100043734(v8, v4);
  if (sub_10004360C() <= 64)
  {
    v40 = sub_100043534();
    v41 = sub_100043600();
    sub_1000435CC(v8);
    if ((v40 & 1) != 0)
      v39 = (double)v41;
    else
      v39 = (double)(unint64_t)v41;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_100043508((uint64_t)&v45, v8, (uint64_t)&type metadata for Double);
    sub_1000435CC(v8);
    v39 = v45;
  }
  return (v35 - v39) / (v25 - v32);
}

double HIDReport.getScaledValue(_:at:logicalMinimum:logicalMaximum:)(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, double a4, double a5, double a6)
{
  uint64_t v6;

  LOBYTE(a6) = *(_BYTE *)(*(_QWORD *)(v6 + 16) + a1);
  return ((double)*(unint64_t *)&a6 - (double)a2) / ((double)a3 - (double)a2);
}

void HIDReport.getScaledValue(_:at:logicalMinimum:logicalMaximum:)(uint64_t a1)
{
  HIDReport.getValue(_:at:)(a1);
  sub_10000C644();
}

{
  sub_100043748(a1);
  sub_10000C644();
}

{
  HIDReport.getValue(_:at:)(a1);
  sub_10000C644();
}

{
  sub_100043748(a1);
  sub_10000C644();
}

double sub_100041AEC(char a1, char a2, char a3)
{
  return sub_100043584(a2, a3, a1);
}

double HIDReport.scaleValue<A>(_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, double);
  uint64_t v25;
  double v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  char v31;
  uint64_t v32;
  double v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD v39[13];
  uint64_t v40;
  uint64_t v41;

  sub_10003DFEC();
  v40 = v0;
  v41 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v11, v11);
  sub_100043710();
  v14 = v12 - v13;
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v39[-1] - v17;
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)&v39[-1] - v22;
  v24 = *(void (**)(char *, double))(v10 + 16);
  v24((char *)&v39[-1] - v22, v21);
  v25 = *(_QWORD *)(v3 + 8);
  if (sub_1000436A8() < 65)
  {
    v38 = v9;
    v27 = sub_1000435D4();
    v28 = sub_10004369C();
    sub_10004351C((uint64_t)v23);
    if ((v27 & 1) == 0)
    {
      v26 = (double)(unint64_t)v28;
      goto LABEL_9;
    }
    v26 = (double)v28;
    v9 = v38;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_100043524((uint64_t)v39, (uint64_t)v23, (uint64_t)&type metadata for Double, v5, (uint64_t)v23, v25);
    sub_10004351C((uint64_t)v23);
    v26 = *(double *)v39;
  }
  if (v26 < 0.0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v24)(v18, v9, v5);
    if (sub_1000436A8() >= 65)
    {
      sub_10004304C();
      sub_10004352C();
      sub_100043524((uint64_t)v39, (uint64_t)v18, (uint64_t)&type metadata for Double, v5, (uint64_t)v18, v25);
      v29 = (uint64_t)v18;
LABEL_11:
      sub_10004351C(v29);
      v30 = *(double *)v39;
      return v26 / fabs(v30);
    }
    v35 = sub_1000435D4();
    v36 = sub_10004369C();
    sub_10004351C((uint64_t)v18);
    v30 = (double)(unint64_t)v36;
    v33 = (double)v36;
    v34 = (v35 & 1) == 0;
    goto LABEL_14;
  }
LABEL_9:
  ((void (*)(uint64_t, uint64_t, uint64_t))v24)(v14, v7, v5);
  if (sub_1000436A8() >= 65)
  {
    sub_10004304C();
    sub_10004352C();
    sub_100043524((uint64_t)v39, v14, (uint64_t)&type metadata for Double, v5, v14, v25);
    v29 = v14;
    goto LABEL_11;
  }
  v31 = sub_1000435D4();
  v32 = sub_10004369C();
  sub_10004351C(v14);
  v30 = (double)(unint64_t)v32;
  v33 = (double)v32;
  v34 = (v31 & 1) == 0;
LABEL_14:
  if (!v34)
    v30 = v33;
  return v26 / fabs(v30);
}

double HIDReport.getScaledValue(_:at:logicalMinimum:logicalMaximum:)(uint64_t a1, char a2, char a3)
{
  uint64_t v3;

  return sub_100043584(a2, a3, *(char *)(*(_QWORD *)(v3 + 16) + a1));
}

void sub_100041DD4(double a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;

  sub_100043638(a3, a1);
  sub_1000477C8();
  if ((v13 & 1) != 0)
  {
    sub_100043544();
    sub_1000434D8();
    sub_1000434B8((uint64_t)" value cannot be converted to ");
    v4._countAndFlagsBits = 0x38746E4955;
    v4._object = (void *)0xE500000000000000;
    String.append(_:)(v4);
    sub_100043618(v3 + 16, (uint64_t)" because it is outside the representable range");
    sub_100043658();
    sub_100043558((uint64_t)"Fatal error", v5, v6, v7, v8, (uint64_t)"Swift/Integers.swift", v9, v10, v11, v12);
    __break(1u);
  }
  else
  {
    sub_100018D38();
  }
}

void sub_100041E6C(double a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;

  sub_100043638(a3, a1);
  sub_1000478C0();
  if ((v13 & 1) != 0)
  {
    sub_100043544();
    sub_1000434D8();
    sub_1000434B8((uint64_t)" value cannot be converted to ");
    v4._countAndFlagsBits = 0x3631746E4955;
    v4._object = (void *)0xE600000000000000;
    String.append(_:)(v4);
    sub_100043618(v3 + 16, (uint64_t)" because it is outside the representable range");
    sub_100043658();
    sub_100043558((uint64_t)"Fatal error", v5, v6, v7, v8, (uint64_t)"Swift/Integers.swift", v9, v10, v11, v12);
    __break(1u);
  }
  else
  {
    sub_100018D38();
  }
}

uint64_t sub_100041F04()
{
  uint64_t result;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  unsigned int v5;
  char v6;

  sub_1000479B8();
  if ((v6 & 1) == 0)
    return v5;
  _StringGuts.grow(_:)(80);
  v1._countAndFlagsBits = 0x656C62756F44;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2._object = (void *)0x8000000100057B40;
  v2._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x3233746E4955;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xD00000000000002ELL;
  v4._object = (void *)0x8000000100057B60;
  String.append(_:)(v4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
  __break(1u);
  return result;
}

void HIDReport.scaleValue<A>(_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  uint64_t v17;
  double v18;
  char v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double v24;

  sub_10003DFEC();
  sub_1000435A4();
  __chkstk_darwin(v3, v4);
  sub_1000436B4();
  __chkstk_darwin(v5, v6);
  sub_10004366C(v7, v8, v9, v10, v11, v12, v13, v14, v23);
  if (sub_100043578() < 65)
  {
    v16 = sub_1000434F8();
    v17 = sub_10004356C();
    sub_10004351C(v1);
    if ((v16 & 1) != 0)
      v15 = (double)v17;
    else
      v15 = (double)(unint64_t)v17;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_1000434A4((uint64_t)&v24, v1, (uint64_t)&type metadata for Double);
    sub_10004351C(v1);
    v15 = v24;
  }
  sub_100043700();
  if (sub_100043578() <= 64)
  {
    v19 = sub_1000434F8();
    v20 = sub_10004356C();
    sub_10004351C(v0);
    if ((v19 & 1) != 0)
      v18 = (double)v20;
    else
      v18 = (double)(unint64_t)v20;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_1000434A4((uint64_t)&v24, v0, (uint64_t)&type metadata for Double);
    sub_10004351C(v0);
    v18 = v24;
  }
  v21 = v15 + (v18 - v15) * v2;
  if (v21 <= v15)
    v21 = v15;
  if (v18 >= v21)
    v18 = v21;
  v24 = v18;
  v22 = sub_10004304C();
  sub_100043684(v22, (uint64_t)&type metadata for Double, v22);
  sub_10003DF7C();
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  uint64_t v17;
  double v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  double v25;

  sub_10003DFEC();
  sub_1000435A4();
  __chkstk_darwin(v3, v4);
  sub_1000436B4();
  __chkstk_darwin(v5, v6);
  sub_10004366C(v7, v8, v9, v10, v11, v12, v13, v14, v24);
  if (sub_100043578() < 65)
  {
    v16 = sub_1000434F8();
    v17 = sub_10004356C();
    sub_10004351C(v1);
    if ((v16 & 1) != 0)
      v15 = (double)v17;
    else
      v15 = (double)(unint64_t)v17;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_1000434A4((uint64_t)&v25, v1, (uint64_t)&type metadata for Double);
    sub_10004351C(v1);
    v15 = v25;
  }
  sub_100043700();
  if (sub_100043578() <= 64)
  {
    v19 = sub_1000434F8();
    v20 = sub_10004356C();
    sub_10004351C(v0);
    if ((v19 & 1) != 0)
      v18 = (double)v20;
    else
      v18 = (double)(unint64_t)v20;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_1000434A4((uint64_t)&v25, v0, (uint64_t)&type metadata for Double);
    sub_10004351C(v0);
    v18 = v25;
  }
  if (v2 >= 0.0)
    v21 = v18;
  else
    v21 = v15;
  v22 = fabs(v21) * v2;
  if (v22 <= v15)
    v22 = v15;
  if (v18 >= v22)
    v18 = v22;
  v25 = v18;
  v23 = sub_10004304C();
  sub_100043684(v23, (uint64_t)&type metadata for Double, v23);
  sub_10003DF7C();
}

void HIDReport.setScaledValue(_:_:at:logicalMinimum:logicalMaximum:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100042628(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100041DD4);
}

{
  sub_100042654(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100041E6C);
}

{
  sub_100042628(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000421B4);
}

{
  sub_100042654(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100042264);
}

uint64_t HIDReport.setScaledValue(_:_:at:logicalMinimum:logicalMaximum:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004269C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100041F04, (uint64_t (*)(uint64_t, uint64_t))HIDReport.setValue(_:at:));
}

{
  return sub_10004269C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100042390, (uint64_t (*)(uint64_t, uint64_t))HIDReport.setValue(_:at:));
}

void sub_1000421B4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;

  sub_100047AAC();
  if ((v10 & 1) != 0)
  {
    sub_100043544();
    sub_1000434D8();
    sub_1000434B8((uint64_t)" value cannot be converted to ");
    v1._countAndFlagsBits = 947154505;
    v1._object = (void *)0xE400000000000000;
    String.append(_:)(v1);
    sub_100043618(v0 + 16, (uint64_t)" because it is outside the representable range");
    sub_100043658();
    sub_100043558((uint64_t)"Fatal error", v2, v3, v4, v5, (uint64_t)"Swift/Integers.swift", v6, v7, v8, v9);
    __break(1u);
  }
  else
  {
    sub_100018D38();
  }
}

uint64_t sub_100042264()
{
  uint64_t result;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  unsigned __int16 v5;
  char v6;

  sub_100047BF8();
  if ((v6 & 1) == 0)
    return v5;
  _StringGuts.grow(_:)(80);
  v1._countAndFlagsBits = 0x656C62756F44;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2._object = (void *)0x8000000100057B40;
  v2._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x3631746E49;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xD00000000000002ELL;
  v4._object = (void *)0x8000000100057B60;
  String.append(_:)(v4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
  __break(1u);
  return result;
}

uint64_t sub_100042390()
{
  uint64_t result;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  unsigned int v5;
  char v6;

  sub_100047D44();
  if ((v6 & 1) == 0)
    return v5;
  _StringGuts.grow(_:)(80);
  v1._countAndFlagsBits = 0x656C62756F44;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2._object = (void *)0x8000000100057B40;
  v2._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x3233746E49;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xD00000000000002ELL;
  v4._object = (void *)0x8000000100057B60;
  String.append(_:)(v4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
  __break(1u);
  return result;
}

void sub_100042628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(*(_QWORD *)(v5 + 16) + v4) = sub_100043628(a1, a2, a3, a4);
  sub_100005D94();
}

void sub_100042654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v6 = sub_100043628(a1, a2, a3, a4);
  v7 = *(_QWORD *)(v5 + 16);
  *(_BYTE *)(v7 + v4) = v6;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_BYTE *)(v7 + v4 + 1) = HIBYTE(v6);
    sub_100005D94();
  }
}

uint64_t sub_10004269C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;

  v6 = sub_100043628(a1, a2, a3, a4);
  return a5(v6, v5);
}

Swift::Double __swiftcall HIDReport.resolution(logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(Swift::Double logicalMinimum, Swift::Double logicalMaximum, Swift::Double_optional physicalMinimum, Swift::Double_optional physicalMaximum, Swift::Double_optional exponent)
{
  int v5;
  double v6;
  char v7;
  double v10;
  double v11;
  double v12;

  v10 = logicalMaximum;
  v11 = logicalMinimum;
  if (((*(_DWORD *)&physicalMaximum.is_nil | v5) & 1) == 0)
  {
    v11 = *(double *)&physicalMinimum.is_nil;
    if (*(double *)&physicalMinimum.is_nil == 0.0)
    {
      if ((*(_QWORD *)&exponent.is_nil & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v10 = *(double *)&exponent.is_nil;
      else
        v10 = logicalMaximum;
      if ((*(_QWORD *)&exponent.is_nil & 0x7FFFFFFFFFFFFFFFLL) == 0)
        v11 = logicalMinimum;
    }
    else
    {
      v10 = *(double *)&exponent.is_nil;
    }
  }
  v12 = 1.0;
  if ((v7 & 1) == 0 && v6 != 0.0)
    v12 = __exp10(v6);
  return (logicalMaximum - logicalMinimum) / ((v10 - v11) * v12);
}

void HIDReport.loadValue<A>(from:at:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  _QWORD v35[3];
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v36 = a1;
  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(AssociatedTypeWitness, v9);
  v11 = (char *)v35 - v10;
  v38 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v12, v13);
  sub_100043710();
  v16 = v14 - v15;
  __chkstk_darwin(v17, v18);
  v20 = (char *)v35 - v19;
  __chkstk_darwin(v21, v22);
  v24 = (char *)v35 - v23;
  swift_getAssociatedConformanceWitness(v7, a2, AssociatedTypeWitness);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_100059E20, 256, AssociatedTypeWitness);
  v37 = v24;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v11, a2, v7);
  v25 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a2);
  if (v25 >= -7)
  {
    v35[2] = a4;
    if ((unint64_t)(v25 + 7) < 0xF)
    {
LABEL_7:
      v34 = v37;
      v33 = v38;
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v20, v37, a2);
      sub_1000436E0((uint64_t)v20, a2, v6);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, a2);
      sub_100018BBC();
      return;
    }
    v26 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(v35[1] + 16);
    v29 = v25 / 8;
    while (!__OFADD__(v36, v27))
    {
      v40 = *(_BYTE *)(v28 + v36 + v27);
      v30 = sub_100043010();
      sub_1000436E0((uint64_t)&v40, (uint64_t)&type metadata for UInt8, v30);
      if (v27 == 0x1000000000000000)
        goto LABEL_9;
      ++v27;
      v39 = v26;
      v31 = sub_10000F54C();
      dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v16, &v39, &type metadata for Int, v31, a2, v6);
      v32 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
      v32(v16, a2);
      dispatch thunk of static BinaryInteger.|= infix(_:_:)(v37, v20, a2, v6);
      v32((uint64_t)v20, a2);
      v26 += 8;
      if (v29 == v27)
        goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  __break(1u);
}

uint64_t HIDReport.loadValue<A>(from:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(uint64_t a1, uint64_t a2, Swift::Double a3, Swift::Double a4, __n128 a5, __n128 a6)
{
  char v6;
  char v7;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char v20;
  uint64_t v21;
  double v22;
  uint64_t result;
  uint64_t v25;
  double v26;

  v6 = a6.n128_u8[0];
  v7 = a5.n128_u8[0];
  __chkstk_darwin(a1, a2);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDReport.loadValue<A>(from:at:)(v12, v13, v14, (uint64_t)v11);
  if (sub_100043578() < 65)
  {
    v20 = sub_1000434F8();
    v21 = sub_10004356C();
    sub_1000436F0();
    if ((v20 & 1) != 0)
      v19 = (double)v21;
    else
      v19 = (double)(unint64_t)v21;
  }
  else
  {
    sub_10004304C();
    sub_10004352C();
    sub_1000434A4((uint64_t)&v26, (uint64_t)v11, (uint64_t)&type metadata for Double);
    sub_1000436F0();
    v19 = v26;
  }
  v22 = sub_1000436D0(v7, a3, a4, v16, v17, v18, v15, v6);
  if (v19 > a4 || v19 < a3)
    *(double *)&result = 0.0;
  else
    *(double *)&result = v19 / v22;
  return result;
}

uint64_t HIDReport.loadValue<A>(from:at:logicalMinimum:logicalMaximum:)(uint64_t a1, uint64_t a2, Swift::Double a3, Swift::Double a4, __n128 a5, __n128 a6)
{
  a5.n128_u64[0] = -1.0;
  return sub_100042B20(a1, a2, a3, a4, a5, a6);
}

{
  a5.n128_u64[0] = 0;
  return sub_100042B20(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100042B20(uint64_t a1, uint64_t a2, Swift::Double a3, Swift::Double a4, __n128 a5, __n128 a6)
{
  a6.n128_u64[0] = 1.0;
  return HIDReport.loadValue<A>(from:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(a1, a2, a3, a4, a5, a6);
}

void HIDReport.storeValue<A>(_:to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v23;

  v20 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1, a5);
  sub_100018F28();
  v9 = v8;
  v11 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v10);
  if (v11 >= -7)
  {
    if ((unint64_t)(v11 + 7) < 0xF)
    {
LABEL_7:
      sub_100018BBC();
      return;
    }
    v12 = 0;
    v13 = 0;
    v14 = *(_QWORD *)(v5 + 16);
    v15 = v11 / 8;
    while (1)
    {
      v16 = a3 + v13;
      if (__OFADD__(a3, v13))
        break;
      if (v13 == 0x1000000000000000)
        goto LABEL_9;
      ++v13;
      v23 = v12;
      v17 = *(_QWORD *)(v9 + 8);
      v18 = sub_10000F54C();
      dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)(a1, &v23, &type metadata for Int, v18, a4, v17);
      v19 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v17);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v6, a4);
      *(_BYTE *)(v14 + v16) = v19;
      v12 += 8;
      if (v15 == v13)
        goto LABEL_7;
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
  __break(1u);
}

uint64_t HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v22;

  v10 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1, a2);
  sub_100018F28();
  if ((v12 & 1) != 0 || (*(_QWORD *)&v11 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    sub_100042D70(a5, a6, v13, v14);
  }
  else
  {
    v22 = round(sub_1000436D0(SLOBYTE(v15), v13, v14, v15, v16, v17, v12, SLOBYTE(v16)) * v11);
    v18 = *(_QWORD *)(a6 + 8);
    v19 = sub_10004304C();
    dispatch thunk of BinaryInteger.init<A>(_:)(&v22, &type metadata for Double, v19, a5, v18);
  }
  HIDReport.storeValue<A>(_:to:at:)(v6, v20, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v6, a5);
}

uint64_t sub_100042D70(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t result;
  char v23;
  Swift::String v24;
  Swift::String v25;
  double v26;
  unint64_t v27;

  v8 = *(_QWORD *)(a1 - 8);
  v9 = ((uint64_t (*)(uint64_t, uint64_t))__chkstk_darwin)(a1, a2);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v26 - v14;
  v26 = v13;
  v17 = *(_QWORD *)(v16 + 8);
  v18 = sub_10004304C();
  dispatch thunk of BinaryInteger.init<A>(_:)(&v26, &type metadata for Double, v18, a1, v17);
  dispatch thunk of static FixedWidthInteger.min.getter(a1, a2);
  v19 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8);
  v20 = dispatch thunk of static Comparable.> infix(_:_:)(v15, v11, a1, v19);
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, a1);
  v21(v15, a1);
  if ((v20 & 1) != 0)
    return dispatch thunk of static FixedWidthInteger.min.getter(a1, a2);
  v26 = a4;
  dispatch thunk of BinaryInteger.init<A>(_:)(&v26, &type metadata for Double, v18, a1, v17);
  dispatch thunk of static FixedWidthInteger.max.getter(a1, a2);
  v23 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v11, a1, v19);
  v21(v11, a1);
  v21(v15, a1);
  if ((v23 & 1) != 0)
    return dispatch thunk of static FixedWidthInteger.max.getter(a1, a2);
  v26 = 0.0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(54);
  v24._object = (void *)0x8000000100057B00;
  v24._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v24);
  Double.write<A>(to:)(&v26, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a3);
  v25._countAndFlagsBits = 45;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  Double.write<A>(to:)(&v26, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)&v26, v27, "SidecarHID/HIDReport.swift", 26, 2, 381, 0);
  __break(1u);
  return result;
}

uint64_t HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100042FEC(a1, a2, a3, a4, a5, a6);
}

{
  return sub_100042FEC(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100042FEC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return HIDReport.storeValue<A>(_:to:at:logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(a1, a2 & 1, a3, a4, a5, a6);
}

double Double.clamped(to:)(double result, double a2, double a3)
{
  if (a3 > result)
    result = a3;
  if (result > a2)
    return a2;
  return result;
}

unint64_t sub_100043010()
{
  unint64_t result;

  result = qword_100078C88;
  if (!qword_100078C88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_100078C88);
  }
  return result;
}

unint64_t sub_10004304C()
{
  unint64_t result;

  result = qword_100078C90;
  if (!qword_100078C90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_100078C90);
  }
  return result;
}

void sub_100043088()
{
  sub_100043280((uint64_t)&unk_100078C98);
}

uint64_t type metadata accessor for HIDReport()
{
  return objc_opt_self(_TtC10SidecarHID9HIDReport);
}

unint64_t sub_1000430CC()
{
  return sub_1000432DC((uint64_t)&unk_100078CA0);
}

unint64_t sub_1000430F0()
{
  unint64_t result;

  result = qword_100078CB0;
  if (!qword_100078CB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100078CB0);
  }
  return result;
}

unint64_t sub_10004312C()
{
  return sub_1000431DC((uint64_t)&unk_100078CB8);
}

void sub_100043160()
{
  sub_100043280((uint64_t)&unk_100078CD0);
}

unint64_t sub_100043184()
{
  return sub_1000432DC((uint64_t)&unk_100078CD8);
}

unint64_t sub_1000431A8()
{
  return sub_1000431DC((uint64_t)&unk_100078CE0);
}

unint64_t sub_1000431DC(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100043754(a1);
  if (!result)
  {
    v5 = v4;
    v6 = v3;
    v7 = sub_100008478(&qword_100078CC0);
    sub_10004339C(v6);
    result = swift_getWitnessTable(v5, v7);
    atomic_store(result, v1);
  }
  return result;
}

void sub_10004325C()
{
  sub_100043280((uint64_t)&unk_100078CF0);
}

void sub_100043280(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;

  if (!sub_100043754(a1))
  {
    v2 = type metadata accessor for HIDReport();
    atomic_store(sub_100043728(v2), v1);
  }
  sub_100005D94();
}

void *sub_1000432AC()
{
  return &protocol witness table for Int;
}

unint64_t sub_1000432B8()
{
  return sub_1000432DC((uint64_t)&unk_100078CF8);
}

unint64_t sub_1000432DC(uint64_t a1)
{
  unint64_t *v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_100043754(a1);
  if (!result)
  {
    v4 = v3;
    v5 = sub_100008478(&qword_100078CA8);
    sub_1000430F0();
    result = swift_getWitnessTable(v4, v5);
    atomic_store(result, v1);
  }
  return result;
}

void sub_100043344()
{
  sub_10004339C((uint64_t)&unk_100078D00);
}

void sub_100043370()
{
  sub_10004339C((uint64_t)&unk_100078D08);
}

void sub_10004339C(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  if (!sub_100043754(a1))
  {
    v3 = sub_100008478(v2);
    atomic_store(sub_100043728(v3), v1);
  }
  sub_100005D94();
}

_QWORD *sub_1000433CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return _swiftEmptyArrayStorage;
  if (v1 <= 0)
  {
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = sub_100008414(&qword_100077B60);
    v4 = (_QWORD *)swift_allocObject(v3, v1 + 32, 7);
    v5 = j__malloc_size(v4);
    v4[2] = v1;
    v4[3] = 2 * v5 - 64;
  }
  sub_100047F84(&v10, (_BYTE *)v4 + 32, v1);
  v7 = v6;
  v8 = v10;
  swift_retain(a1);
  result = (_QWORD *)swift_release(v8);
  if (v7 == v1)
    return v4;
  __break(1u);
  return result;
}

uint64_t sub_1000434A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return static BinaryFloatingPoint<>._convert<A>(from:)(a1, a2, a3, v3, v4, v5);
}

void sub_1000434B8(uint64_t a1@<X8>)
{
  Swift::String v1;

  v1._object = (void *)((a1 - 32) | 0x8000000000000000);
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v1);
}

void sub_1000434D8()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x656C62756F44;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
}

uint64_t sub_1000434F8()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

uint64_t sub_100043508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return static BinaryFloatingPoint<>._convert<A>(from:)(a1, a2, a3, v3, v4, v5);
}

uint64_t sub_10004351C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100043524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static BinaryFloatingPoint<>._convert<A>(from:)(a1, a2, a3, a4, a5, a6);
}

unint64_t sub_10004352C()
{
  return sub_100008728();
}

uint64_t sub_100043534()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

void sub_100043544()
{
  _StringGuts.grow(_:)(80);
}

uint64_t sub_100043558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11, 2, a4, a5, a6, 20, 2, a9, a10);
}

uint64_t sub_10004356C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_100043578()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

double sub_100043584@<D0>(char a1@<W1>, char a2@<W2>, int a3@<W8>)
{
  double v3;

  v3 = (double)a3;
  if (a3 >= 0)
    a1 = a2;
  return v3 / fabs((double)a1);
}

uint64_t sub_1000435CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_1000435D4()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of static BinaryInteger.isSigned.getter(v0, v1);
}

double sub_1000435E4@<D0>(unsigned int a1@<W8>)
{
  unsigned int v1;
  unsigned int v2;

  return ((double)a1 - (double)v1) / ((double)v2 - (double)v1);
}

uint64_t sub_100043600()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_10004360C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

void sub_100043618(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100043628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  return a4(a2, a3);
}

double sub_100043638@<D0>(unsigned int a1@<W8>, double a2@<D0>)
{
  unsigned int v2;
  double result;

  result = ((double)a1 - (double)v2) * a2 + (double)v2;
  if (result <= (double)v2)
    return (double)v2;
  return result;
}

uint64_t sub_10004366C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return (*(uint64_t (**)(char *))(v10 + 16))((char *)&a9 - v9);
}

uint64_t sub_100043684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of BinaryInteger.init<A>(_:)(v5 - 104, a2, a3, v3, v4);
}

uint64_t sub_10004369C()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_1000436A8()
{
  uint64_t v0;
  uint64_t v1;

  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

double sub_1000436D0(char a1, Swift::Double a2, Swift::Double a3, double a4, double a5, double a6, uint64_t a7, char a8)
{
  char v8;

  v8 = 0;
  return HIDReport.resolution(logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(a2, a3, *(Swift::Double_optional *)(&a1 - 8), *(Swift::Double_optional *)&a5, *(Swift::Double_optional *)(&a8 - 8));
}

uint64_t sub_1000436E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return dispatch thunk of BinaryInteger.init<A>(_:)(a1, a2, a3, v3, v4);
}

uint64_t sub_1000436F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100043700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

void sub_100043720(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  *(_BYTE *)(a1 + v1) = v2;
}

uint64_t sub_100043728(uint64_t a1)
{
  uint64_t v1;

  return swift_getWitnessTable(v1, a1);
}

uint64_t sub_100043734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t _s10SidecarHID9HIDReportCys5UInt8VSicig_0(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + a1);
}

uint64_t sub_100043748(uint64_t result)
{
  return HIDReport.getValue(_:at:)(result);
}

uint64_t sub_100043754(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_100043760(unsigned int a1, unsigned __int8 a2)
{
  int v2;
  unsigned __int8 *v3;

  v2 = (a1 >> 5) & 3;
  if ((v2 - 2) >= 2)
  {
    if (v2 == 1)
    {
      if ((a2 - 1) < 0xBu)
      {
        v3 = (unsigned __int8 *)&unk_10005A13A + (char)(a2 - 1);
        return *v3;
      }
    }
    else if (a2 < 0xAu)
    {
      v3 = (unsigned __int8 *)&unk_10005A130 + (char)a2;
      return *v3;
    }
  }
  return 14;
}

Swift::Int HIDRequest.Request.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int sub_100043804()
{
  unsigned __int8 *v0;

  return HIDRequest.Request.hashValue.getter(*v0);
}

uint64_t HIDRequest.rawData.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_100009364(a2, a3);
  return a2;
}

uint64_t HIDRequest.wValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043864(a1, a2, a3, 2, 3);
}

uint64_t HIDRequest.wIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043864(a1, a2, a3, 4, 5);
}

uint64_t HIDRequest.wLength.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043864(a1, a2, a3, 6, 7);
}

uint64_t sub_100043864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v6;

  v6 = Data.subscript.getter(a4);
  return v6 | (Data.subscript.getter(a5) << 8);
}

void HIDRequest.data.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

uint64_t sub_1000438F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 9)
    return 0;
  if (v3)
  {
    if (v3 == 1)
    {
      if (!__OFSUB__(v4, (_DWORD)a3))
      {
        a2 = v4 - (int)a3;
        goto LABEL_8;
      }
      __break(1u);
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    v7 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    a2 = v6 - v7;
    if (__OFSUB__(v6, v7))
      goto LABEL_11;
  }
LABEL_8:
  if (a2 < 8)
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x100043984);
  }
  return ((uint64_t (*)(uint64_t))Data.subdata(in:))(8);
}

uint64_t HIDRequest.init(_:wValue:wIndex:data:)(uint64_t a1, __int16 a2, __int16 a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  const char *v15;
  uint64_t v16;

  v10 = a5 >> 60;
  if (a5 >> 60 != 15)
  {
    sub_100043FA8();
    v11 = Data.count.getter(a4, a5);
    sub_100043F90();
    if ((v11 & 0x8000000000000000) != 0)
    {
      sub_10000C2B8();
      v15 = "Negative value is not representable";
      v16 = 35;
    }
    else
    {
      if (v11 < 0x10000)
        goto LABEL_5;
      sub_10000C2B8();
      v15 = "Not enough bits to represent the passed value";
      v16 = 45;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v15, v16, 2, "Swift/Integers.swift", 20);
    __break(1u);
    return result;
  }
  LOWORD(v11) = 0;
LABEL_5:
  v12 = sub_100008414(&qword_100077B60);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10005A090;
  *(_BYTE *)(v13 + 32) = byte_10005A145[(char)a1];
  *(_BYTE *)(v13 + 33) = byte_10005A153[(char)a1];
  *(_WORD *)(v13 + 34) = a2;
  *(_WORD *)(v13 + 36) = a3;
  *(_WORD *)(v13 + 38) = v11;
  sub_10003F650(v13);
  if (v10 <= 0xE)
  {
    sub_100043FA8();
    Data.append(_:)(a4, a5);
    sub_100043F90();
    sub_100043F90();
  }
  return a1;
}

void HIDRequest.init(rawData:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100043B6C()
{
  unint64_t v0;
  uint64_t v1;
  unsigned int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  uint64_t v8;

  if (BYTE6(v0) > 7uLL)
  {
    v2 = sub_100043F84(0);
    v3 = sub_100043F84(1);
    v4 = sub_100043760(v2, v3);
    if (v4 != 14)
    {
      v5 = v4;
      sub_100009364(v1, v0);
      v6 = sub_100043F84(6);
      v7 = (unsigned __int16)(v6 | (unsigned __int16)((unsigned __int16)sub_100043F84(7) << 8)) + 8;
      if ((v7 & 0x10000) != 0)
      {
        __break(1u);
        JUMPOUT(0x100043C5CLL);
      }
      v8 = Data.count.getter(v1, v0);
      sub_100043F9C();
      if (v8 == (unsigned __int16)v7)
        return v5;
    }
  }
  sub_100043F9C();
  return 14;
}

unint64_t sub_100043C70()
{
  unint64_t result;

  result = qword_100078DB8;
  if (!qword_100078DB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HIDRequest.Request, &type metadata for HIDRequest.Request);
    atomic_store(result, (unint64_t *)&qword_100078DB8);
  }
  return result;
}

uint64_t destroy for HIDRequest(uint64_t a1)
{
  return sub_100009320(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t _s10SidecarHID10HIDRequestVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100009364(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for HIDRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100009364(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_100009320(v5, v6);
  return a1;
}

__n128 initializeWithTake for HIDRequest(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HIDRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100009320(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HIDRequest(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xF3 && a1[24])
    {
      v2 = *(_DWORD *)a1 + 242;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 0xE;
      v2 = v3 - 14;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 243;
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 13;
  }
  return result;
}

ValueMetadata *type metadata accessor for HIDRequest()
{
  return &type metadata for HIDRequest;
}

uint64_t getEnumTagSinglePayload for HIDRequest.Request(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF3)
  {
    if (a2 + 13 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 13) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 14;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v5 = v6 - 14;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HIDRequest.Request(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_100043F04 + 4 * byte_10005A0A5[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_100043F38 + 4 * byte_10005A0A0[v4]))();
}

uint64_t sub_100043F38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043F40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100043F48);
  return result;
}

uint64_t sub_100043F54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100043F5CLL);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_100043F60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100043F68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HIDRequest.Request()
{
  return &type metadata for HIDRequest.Request;
}

uint64_t sub_100043F84(uint64_t a1)
{
  return Data.subscript.getter(a1);
}

uint64_t sub_100043F90()
{
  unint64_t v0;
  uint64_t v1;

  return sub_10001891C(v1, v0);
}

uint64_t sub_100043F9C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009320(v1, v0);
}

uint64_t sub_100043FA8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009364(v1, v0);
}

uint64_t static HIDFixed.radix.getter()
{
  return 16;
}

uint64_t HIDFixed.rawValue.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*HIDFixed.rawValue.modify())()
{
  return VideoStream.qosMonitorServerDidDie(_:);
}

double static HIDFixed.scale.getter()
{
  return 65536.0;
}

double HIDFixed.doubleValue.getter(int a1)
{
  return (double)a1 * 0.0000152587891;
}

uint64_t HIDFixed.intValue.getter(int a1)
{
  return (uint64_t)a1 >> 16;
}

SidecarHID::HIDFixed __swiftcall HIDFixed.init(intValue:)(Swift::Int intValue)
{
  if (intValue < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (intValue > 0x7FFFFFFF)
  {
LABEL_5:
    __break(1u);
    return (SidecarHID::HIDFixed)intValue;
  }
  LODWORD(intValue) = (_DWORD)intValue << 16;
  return (SidecarHID::HIDFixed)intValue;
}

SidecarHID::HIDFixed_optional __swiftcall HIDFixed.init(doubleValue:)(Swift::Double doubleValue)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;

  v1 = *(_QWORD *)&doubleValue & 0x7FF0000000000000;
  if ((*(_QWORD *)&doubleValue & 0x7FF0000000000000) != 0x7FF0000000000000)
  {
    v3 = round(doubleValue * 65536.0);
    if (v3 <= -2147483650.0)
      v3 = -2147483650.0;
    if (v3 > 2147483650.0)
      v3 = 2147483650.0;
    if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
    {
      if (v3 > -2147483650.0)
      {
        if (v3 < 2147483650.0)
        {
          v2 = (int)v3;
          return (SidecarHID::HIDFixed_optional)(v2 | ((unint64_t)(v1 == 0x7FF0000000000000) << 32));
        }
LABEL_14:
        __break(1u);
        return (SidecarHID::HIDFixed_optional)v4;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
  v2 = 0;
  return (SidecarHID::HIDFixed_optional)(v2 | ((unint64_t)(v1 == 0x7FF0000000000000) << 32));
}

uint64_t static HIDFixed.+ infix(_:_:)(int a1, int a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFADD__(a1, a2);
  result = (a1 + a2);
  if (v2)
    __break(1u);
  return result;
}

_DWORD *static HIDFixed.+= infix(_:_:)(_DWORD *result, int a2)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *result += a2;
  return result;
}

uint64_t static HIDFixed.- infix(_:_:)(int a1, int a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a1, a2);
  result = (a1 - a2);
  if (v2)
    __break(1u);
  return result;
}

_DWORD *static HIDFixed.-= infix(_:_:)(_DWORD *result, int a2)
{
  if (__OFSUB__(*result, a2))
    __break(1u);
  else
    *result -= a2;
  return result;
}

void sub_10004411C(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100044124@<X0>(int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;

  result = static HIDFixed.+ infix(_:_:)(*a1, *a2);
  *a3 = result;
  return result;
}

_DWORD *sub_100044150(_DWORD *a1, int *a2)
{
  return static HIDFixed.+= infix(_:_:)(a1, *a2);
}

uint64_t sub_100044158@<X0>(int *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result;

  result = static HIDFixed.- infix(_:_:)(*a1, *a2);
  *a3 = result;
  return result;
}

_DWORD *sub_100044184(_DWORD *a1, int *a2)
{
  return static HIDFixed.-= infix(_:_:)(a1, *a2);
}

SidecarHID::HIDFixed sub_10004418C@<W0>(Swift::Int *a1@<X0>, SidecarHID::HIDFixed *a2@<X8>)
{
  SidecarHID::HIDFixed result;

  result.rawValue = HIDFixed.init(intValue:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

SidecarHID::HIDFixed __swiftcall HIDFixed.init(floatLiteral:)(Swift::Double floatLiteral)
{
  uint64_t v1;

  *(SidecarHID::HIDFixed_optional *)&v1 = HIDFixed.init(doubleValue:)(floatLiteral);
  return (SidecarHID::HIDFixed)sub_100044C9C(v1);
}

SidecarHID::HIDFixed sub_1000441CC@<W0>(Swift::Double *a1@<X0>, SidecarHID::HIDFixed *a2@<X8>)
{
  SidecarHID::HIDFixed result;

  result.rawValue = HIDFixed.init(floatLiteral:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

unint64_t HIDFixed.init<A>(exactly:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  signed int v73;
  unint64_t result;
  int v75;
  uint64_t v76;
  unsigned __int8 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  signed int v98;
  BOOL v99;
  char *v100;
  signed int v101;
  signed int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t AssociatedTypeWitness;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  signed int v115;

  v109 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v109, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  v107 = (char *)&v103 - v7;
  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v9, v10);
  v105 = (uint64_t)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100044CB0();
  __chkstk_darwin(v12, v13);
  sub_100044D00();
  v106 = v14;
  sub_100044CB0();
  __chkstk_darwin(v15, v16);
  sub_100044D00();
  v111 = v17;
  sub_100044CB0();
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v103 - v20;
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v103 - v24;
  __chkstk_darwin(v26, v27);
  sub_100044D00();
  v110 = v28;
  sub_100044CB0();
  __chkstk_darwin(v29, v30);
  sub_100044D00();
  v112 = v31;
  sub_100044CB0();
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v103 - v34;
  __chkstk_darwin(v36, v37);
  v39 = (char *)&v103 - v38;
  __chkstk_darwin(v40, v41);
  v43 = (char *)&v103 - v42;
  v44 = sub_1000434F8();
  v113 = a1;
  if ((v44 & 1) != 0)
  {
    if (sub_100043578() < 32)
    {
      v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      v46 = (uint64_t)v43;
LABEL_12:
      sub_100044CA8(v46, a1, v45);
      v55 = sub_10004356C();
      sub_100044CBC();
      v54 = v55 < -32768;
      goto LABEL_17;
    }
    v53 = sub_100044CF8(-32768);
    sub_100044C38(v53, (uint64_t)&type metadata for Int32, v53);
    sub_100044CCC();
LABEL_8:
    v54 = sub_100044C68(a1, v50, v51, v52);
    sub_100044CBC();
    goto LABEL_17;
  }
  v47 = sub_1000434F8();
  v48 = sub_100043578();
  if ((v47 & 1) == 0)
  {
    if (v48 >= 32)
    {
      v54 = 0;
      a1 = v113;
      goto LABEL_17;
    }
    v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v46 = (uint64_t)v43;
    a1 = v113;
    goto LABEL_12;
  }
  if (v48 > 32)
  {
    v49 = sub_100044CF8(-32768);
    sub_100044C38(v49, (uint64_t)&type metadata for Int32, v49);
    sub_100044CCC();
    a1 = v113;
    goto LABEL_8;
  }
  v104 = v25;
  v56 = v109;
  sub_100044D0C(v109);
  v57 = v107;
  sub_100044CD8((uint64_t)&unk_100059E20);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v57, a2, v56);
  sub_100044CCC();
  v58 = v113;
  v62 = sub_100044C68(v113, v59, v60, v61);
  sub_100044C30((uint64_t)v43);
  sub_100044CA8((uint64_t)v35, v58, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
  v54 = (v62 & 1) != 0 || (int)sub_10004356C() < -32768;
  sub_100044C30((uint64_t)v35);
  a1 = v113;
  v25 = v104;
LABEL_17:
  v63 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v63(v39, a1, a2);
  if ((v54 & 1) != 0)
  {
    sub_100044C30((uint64_t)v39);
LABEL_30:
    sub_100044C30(v113);
    v76 = 0;
    v77 = 1;
LABEL_44:
    LOBYTE(v115) = v77;
    return v76 | ((unint64_t)v77 << 32);
  }
  v104 = v21;
  v64 = sub_1000434F8();
  v65 = sub_100043578();
  if ((v64 & 1) != 0)
  {
    if (v65 > 32)
      goto LABEL_21;
LABEL_29:
    v75 = sub_10004356C();
    sub_100044C30((uint64_t)v39);
    if (v75 >= 0x8000)
      goto LABEL_30;
    goto LABEL_22;
  }
  if (v65 <= 31)
    goto LABEL_29;
LABEL_21:
  v66 = sub_100044CF8(0x7FFF);
  sub_100044C38(v66, (uint64_t)&type metadata for Int32, v66);
  v67 = dispatch thunk of static Comparable.< infix(_:_:)(v43, v39, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
  sub_100044C30((uint64_t)v43);
  sub_100044C30((uint64_t)v39);
  if ((v67 & 1) != 0)
    goto LABEL_30;
LABEL_22:
  v68 = v112;
  v63((char *)v112, v113, a2);
  v69 = sub_1000434F8();
  v70 = v110;
  sub_100044C74(v110);
  if ((v69 & 1) == 0)
  {
    sub_100044C30(v70);
    v72 = v111;
    goto LABEL_32;
  }
  v71 = sub_100043578();
  sub_100044C30(v70);
  v99 = v71 <= 32;
  v72 = v111;
  if (v99)
    goto LABEL_32;
  sub_100044C74((uint64_t)v25);
  v115 = 0x80000000;
  if ((sub_1000434F8() & 1) == 0)
  {
    v92 = sub_1000434F8();
    v93 = sub_100043578();
    if ((v92 & 1) != 0)
    {
      if (v93 > 32)
      {
        v94 = sub_100044974();
        sub_100044C38(v94, (uint64_t)&type metadata for Int32, v94);
        v95 = sub_100044C50();
        sub_100044C30((uint64_t)v43);
        result = sub_100044C30((uint64_t)v25);
        v68 = v112;
        if ((v95 & 1) != 0)
          goto LABEL_60;
        goto LABEL_32;
      }
      sub_100044D0C(v109);
      v100 = v107;
      sub_100044CD8((uint64_t)&unk_100059E20);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v100, a2, v109);
      LOBYTE(v100) = sub_100044C50();
      sub_100044C30((uint64_t)v43);
      v84 = v105;
      sub_100044CA8(v105, (uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
      if ((v100 & 1) != 0)
        goto LABEL_59;
      v101 = v115;
      v102 = sub_10004356C();
      result = sub_100044C30(v84);
      v99 = v101 <= v102;
    }
    else
    {
      if (v93 >= 32)
      {
        sub_100044C30((uint64_t)v25);
        v68 = v112;
        goto LABEL_32;
      }
      v98 = sub_10004356C();
      result = sub_100044C30((uint64_t)v25);
      v99 = v115 <= v98;
    }
    v68 = v112;
    if (!v99)
      goto LABEL_60;
    goto LABEL_32;
  }
  if (sub_100043578() >= 32)
  {
    v96 = sub_100044974();
    sub_100044C38(v96, (uint64_t)&type metadata for Int32, v96);
    v97 = sub_100044C50();
    sub_100044C30((uint64_t)v43);
    result = sub_100044C30((uint64_t)v25);
    if ((v97 & 1) != 0)
      goto LABEL_60;
  }
  else
  {
    v73 = sub_10004356C();
    result = sub_100044C30((uint64_t)v25);
    if (v115 > v73)
      goto LABEL_60;
  }
LABEL_32:
  v78 = sub_100043578();
  v79 = (uint64_t)v104;
  sub_100044C74((uint64_t)v104);
  if (v78 < 33)
  {
    v80 = sub_100043578();
    sub_100044C30(v79);
    if (v80 != 32 || (sub_1000434F8() & 1) != 0)
      goto LABEL_43;
  }
  else
  {
    sub_100044C30(v79);
  }
  sub_100044C74(v72);
  v115 = 0x7FFFFFFF;
  v81 = sub_1000434F8();
  v82 = sub_100043578();
  if ((v81 & 1) == 0)
  {
    if (v82 > 31)
    {
      v114 = 0x7FFFFFFF;
      sub_100044CA8((uint64_t)v43, v72, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
      v86 = sub_100044974();
      v87 = v106;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v114, &type metadata for Int32, v86, a2, a3);
      sub_100044CCC();
      v84 = sub_100044C68(v87, v88, v89, v90);
      sub_100044C30(v87);
      v85 = (uint64_t)v43;
      goto LABEL_42;
    }
LABEL_40:
    sub_10004356C();
    sub_100044C30(v72);
    v68 = v112;
LABEL_43:
    v91 = sub_10004356C();
    sub_100044C30(v68);
    sub_100044C30(v113);
    v77 = 0;
    v76 = (v91 << 16);
    goto LABEL_44;
  }
  if (v82 <= 32)
    goto LABEL_40;
  v83 = sub_100044974();
  sub_100044C38(v83, (uint64_t)&type metadata for Int32, v83);
  v84 = dispatch thunk of static Comparable.< infix(_:_:)(v43, v72, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
  sub_100044C30((uint64_t)v43);
  v85 = v72;
LABEL_42:
  sub_100044C30(v85);
  v68 = v112;
  if ((v84 & 1) == 0)
    goto LABEL_43;
  __break(1u);
LABEL_59:
  result = sub_100044C30(v84);
LABEL_60:
  __break(1u);
  return result;
}

unint64_t sub_100044974()
{
  unint64_t result;

  result = qword_100078DC0;
  if (!qword_100078DC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_100078DC0);
  }
  return result;
}

uint64_t HIDFixed.magnitude.getter(uint64_t result)
{
  if ((int)result >= 0)
    return result;
  else
    return -(int)result;
}

unint64_t sub_1000449BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result;

  result = HIDFixed.init<A>(exactly:)(a1, a2, a3);
  *(_DWORD *)a4 = result;
  *(_BYTE *)(a4 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1000449E8@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = HIDFixed.magnitude.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100044A10@<X0>(int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = static HIDFixed.* infix(_:_:)(*a1);
  *a2 = result;
  return result;
}

uint64_t static HIDFixed.* infix(_:_:)(int a1)
{
  double v1;
  double v2;
  uint64_t v3;

  v1 = sub_100044C80(a1);
  *(SidecarHID::HIDFixed_optional *)&v3 = HIDFixed.init(doubleValue:)(v1 * v2);
  return sub_100044C9C(v3);
}

uint64_t sub_100044A5C(int *a1)
{
  return static HIDFixed.*= infix(_:_:)(a1);
}

uint64_t static HIDFixed.*= infix(_:_:)(int *a1)
{
  uint64_t result;

  result = static HIDFixed.* infix(_:_:)(*a1);
  *a1 = result;
  return result;
}

uint64_t static HIDFixed.* infix(_:_:)()
{
  double v0;
  double v1;
  uint64_t v2;

  sub_100044CE4();
  *(SidecarHID::HIDFixed_optional *)&v2 = HIDFixed.init(doubleValue:)(v1 * v0);
  return sub_100044C9C(v2);
}

uint64_t static HIDFixed./ infix(_:_:)(int a1)
{
  double v1;
  double v2;
  uint64_t v3;

  v1 = sub_100044C80(a1);
  *(SidecarHID::HIDFixed_optional *)&v3 = HIDFixed.init(doubleValue:)(v1 / v2);
  return sub_100044C9C(v3);
}

uint64_t static HIDFixed./= infix(_:_:)(int *a1)
{
  uint64_t result;

  result = static HIDFixed./ infix(_:_:)(*a1);
  *a1 = result;
  return result;
}

uint64_t static HIDFixed./ infix(_:_:)()
{
  double v0;
  double v1;
  uint64_t v2;

  sub_100044CE4();
  *(SidecarHID::HIDFixed_optional *)&v2 = HIDFixed.init(doubleValue:)(v1 / v0);
  return sub_100044C9C(v2);
}

uint64_t HIDFixed.description.getter(int a1)
{
  return Double.description.getter((double)a1 * 0.0000152587891);
}

unint64_t sub_100044B2C()
{
  unint64_t result;

  result = qword_100078DC8;
  if (!qword_100078DC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HIDFixed, &type metadata for HIDFixed);
    atomic_store(result, (unint64_t *)&qword_100078DC8);
  }
  return result;
}

void *sub_100044B68()
{
  return &protocol witness table for Int;
}

void *sub_100044B74()
{
  return &protocol witness table for Double;
}

unint64_t sub_100044B84()
{
  unint64_t result;

  result = qword_100078DD0;
  if (!qword_100078DD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HIDFixed, &type metadata for HIDFixed);
    atomic_store(result, (unint64_t *)&qword_100078DD0);
  }
  return result;
}

unint64_t sub_100044BC4()
{
  unint64_t result;

  result = qword_100078DD8;
  if (!qword_100078DD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HIDFixed, &type metadata for HIDFixed);
    atomic_store(result, (unint64_t *)&qword_100078DD8);
  }
  return result;
}

void *sub_100044C00()
{
  return &protocol witness table for Int32;
}

void *sub_100044C0C()
{
  return &protocol witness table for Int32;
}

uint64_t sub_100044C18()
{
  int *v0;

  return HIDFixed.description.getter(*v0);
}

ValueMetadata *type metadata accessor for HIDFixed()
{
  return &type metadata for HIDFixed;
}

uint64_t sub_100044C30(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t sub_100044C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v5 - 84, a2, a3, v3, v4);
}

uint64_t sub_100044C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return dispatch thunk of static Comparable.< infix(_:_:)(v3, v2, v0, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8));
}

uint64_t sub_100044C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  return dispatch thunk of static Comparable.< infix(_:_:)(a1, v5, v4, a4);
}

uint64_t sub_100044C74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

double sub_100044C80(int a1)
{
  return (double)a1 * 0.0000152587891;
}

uint64_t sub_100044C9C(uint64_t result)
{
  if ((result & (unint64_t)&_mh_execute_header) != 0)
    return 0;
  else
    return result;
}

uint64_t sub_100044CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_100044CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_100044CD8(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(a1, 256, v1);
}

unint64_t sub_100044CF8@<X0>(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 - 84) = a1;
  return sub_100044974();
}

uint64_t sub_100044D0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return swift_getAssociatedConformanceWitness(a1, v1, v2);
}

uint64_t HIDUsage._usage.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t HIDUsage.page.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

SidecarHID::HIDUsage __swiftcall HIDUsage.init(page:usage:)(Swift::Int page, Swift::Int usage)
{
  return (SidecarHID::HIDUsage)((unsigned __int16)page | ((unsigned __int16)usage << 16));
}

void HIDUsage.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2;

  v2 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

Swift::Int HIDUsage.hashValue.getter(unsigned int a1)
{
  Swift::UInt16 v1;
  unsigned int v2;
  _QWORD v4[9];

  v1 = a1;
  v2 = HIWORD(a1);
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_100044DBC()
{
  unsigned int *v0;

  return HIDUsage.hashValue.getter(*v0);
}

void sub_100044DC4(int a1)
{
  unsigned int *v1;

  HIDUsage.hash(into:)(a1, *v1);
}

Swift::Int sub_100044DCC(uint64_t a1)
{
  Swift::UInt16 *v1;
  Swift::UInt16 v2;
  Swift::UInt16 v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t HIDUsage.description.getter(unsigned int a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;

  v1 = HIWORD(a1);
  v24 = (unsigned __int16)a1;
  v2 = sub_10000F54C();
  v10 = sub_100045008(v2, v3, v4, v5, v6, v7, v8, v9, v24);
  v18 = sub_100045008(v10, v11, v12, v13, v14, v15, v16, v17, v1);
  v20 = v19;
  v21._countAndFlagsBits = 58;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = v18;
  v22._object = v20;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v20);
  return v10;
}

uint64_t sub_100044EBC()
{
  unsigned int *v0;

  return HIDUsage.description.getter(*v0);
}

BOOL static HIDUsage.< infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return (unsigned __int16)a2 >= (unsigned __int16)a1 && HIWORD(a1) < HIWORD(a2);
}

BOOL static HIDUsage.<= infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return (unsigned __int16)a2 >= (unsigned __int16)a1 && HIWORD(a2) >= HIWORD(a1);
}

BOOL static HIDUsage.>= infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return (unsigned __int16)a1 >= (unsigned __int16)a2 && HIWORD(a1) >= HIWORD(a2);
}

BOOL static HIDUsage.> infix(_:_:)(unsigned int a1, unsigned int a2)
{
  return (unsigned __int16)a1 >= (unsigned __int16)a2 && HIWORD(a2) < HIWORD(a1);
}

unint64_t sub_100044F38()
{
  unint64_t result;

  result = qword_100078DE0;
  if (!qword_100078DE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HIDUsage, &type metadata for HIDUsage);
    atomic_store(result, (unint64_t *)&qword_100078DE0);
  }
  return result;
}

BOOL sub_100044F74(unsigned int *a1, unsigned int *a2)
{
  return static HIDUsage.< infix(_:_:)(*a1, *a2);
}

BOOL sub_100044F80(unsigned int *a1, unsigned int *a2)
{
  return static HIDUsage.<= infix(_:_:)(*a1, *a2);
}

BOOL sub_100044F8C(unsigned int *a1, unsigned int *a2)
{
  return static HIDUsage.>= infix(_:_:)(*a1, *a2);
}

BOOL sub_100044F98(unsigned int *a1, unsigned int *a2)
{
  return static HIDUsage.> infix(_:_:)(*a1, *a2);
}

_DWORD *initializeBufferWithCopyOfBuffer for HIDUsage(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HIDUsage(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for HIDUsage(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HIDUsage()
{
  return &type metadata for HIDUsage;
}

uint64_t sub_100045008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return String.init<A>(_:radix:uppercase:)(&a9, 16, 0, v10, v9);
}

void sub_100045020()
{
  static KeyboardReport.reportID = 1;
}

char *KeyboardReport.reportID.unsafeMutableAddressor()
{
  if (qword_100078BC8 != -1)
    swift_once(&qword_100078BC8, sub_100045020);
  return &static KeyboardReport.reportID;
}

uint64_t static KeyboardReport.reportID.getter()
{
  if (qword_100078BC8 != -1)
    swift_once(&qword_100078BC8, sub_100045020);
  return static KeyboardReport.reportID;
}

void sub_1000450B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100008414(&qword_100077B60);
  v1 = swift_allocObject(v0, 74, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10005A420;
  *(_DWORD *)(v1 + 32) = 101253381;
  *(_WORD *)(v1 + 36) = 417;
  *(_BYTE *)(v1 + 38) = -123;
  if (qword_100078BC8 != -1)
    swift_once(&qword_100078BC8, sub_100045020);
  *(_BYTE *)(v1 + 39) = static KeyboardReport.reportID;
  *(_OWORD *)(v1 + 40) = xmmword_10005A430;
  *(_OWORD *)(v1 + 56) = xmmword_10005A440;
  *(_WORD *)(v1 + 72) = -16384;
  sub_10003F650(v1);
  static KeyboardReport.reportDescriptor = v2;
  unk_10007C960 = v3;
}

uint64_t *KeyboardReport.reportDescriptor.unsafeMutableAddressor()
{
  if (qword_100078BD0 != -1)
    swift_once(&qword_100078BD0, sub_1000450B4);
  return &static KeyboardReport.reportDescriptor;
}

uint64_t static KeyboardReport.reportDescriptor.getter()
{
  uint64_t v0;

  if (qword_100078BD0 != -1)
    swift_once(&qword_100078BD0, sub_1000450B4);
  v0 = static KeyboardReport.reportDescriptor;
  sub_100009364(static KeyboardReport.reportDescriptor, unk_10007C960);
  return v0;
}

uint64_t KeyboardReport.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for HIDReport();
  sub_100045A8C();
  v1 = v0;
  v2 = qword_100078BC8;
  swift_retain(v0);
  if (v2 != -1)
    swift_once(&qword_100078BC8, sub_100045020);
  HIDReport.subscript.setter(static KeyboardReport.reportID, 0);
  sub_100027240();
  return v1;
}

uint64_t KeyboardReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for Data.Iterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HIDReport();
  sub_100045A8C();
  v10 = v9;
  swift_retain(v9);
  v11 = Data.subscript.getter(0);
  if (qword_100078BC8 != -1)
    swift_once(&qword_100078BC8, sub_100045020);
  if (static KeyboardReport.reportID == v11
    && (v12 = Data.count.getter(a1, a2), v13 = *(_QWORD *)(v10 + 24), v12 >= v13))
  {
    v14 = *(_QWORD *)(v10 + 16);
    sub_100027240();
    sub_100009364(a1, a2);
    Data._copyContents(initializing:)(v8, v14, v13, a1, a2);
    sub_100045A70();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100045A70();
  }
  else
  {
    sub_100045A70();
    sub_100027240();
    sub_100027240();
    return 0;
  }
  return v10;
}

uint64_t sub_1000453CC(uint64_t result, char a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = 1;
  v7 = 1;
  while ((v7 & 1) != 0)
  {
    v5 = 7;
LABEL_6:
    result = HIDReport.subscript.getter(v5);
    if (result == v3)
      return v5;
    v7 = 0;
    if (!(_BYTE)result)
      v4 = v5;
    v6 &= result != 0;
    if (v5 == 2)
    {
      if ((a2 & 1) != 0)
        return v4;
      else
        return 0;
    }
  }
  if (v5 >= 3)
  {
    --v5;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall KeyboardReport.addUsage(_:)(SidecarHID::HIDUsage a1)
{
  Swift::Int8 usage;
  uint64_t v3;
  char v4;
  Swift::Int v5;
  Swift::Int8 v6;
  Swift::Int v7;

  if ((*(_DWORD *)&a1 & 0xFF00FFFF) == 7)
  {
    usage = a1._usage;
    if ((LOBYTE(a1._usage) + 24) >= 0xF8u && ((LOBYTE(a1._usage) + 32) & 0x3Fu) <= 7)
    {
      v6 = sub_100045A7C() | LOBYTE(a1._usage);
      v7 = 1;
LABEL_9:
      HIDReport.subscript.setter(v6, v7);
      goto LABEL_10;
    }
    v3 = sub_1000453CC(a1._usage, 1);
    if ((v4 & 1) == 0)
    {
      v5 = v3;
      v6 = usage;
      v7 = v5;
      goto LABEL_9;
    }
  }
LABEL_10:
  sub_100005D94();
}

Swift::Void __swiftcall KeyboardReport.removeUsage(_:)(SidecarHID::HIDUsage a1)
{
  char v1;
  uint64_t usage;
  uint64_t v4;
  char v5;
  Swift::Int v6;
  Swift::Int8 v7;
  Swift::Int v8;

  if ((*(_DWORD *)&a1 & 0xFF00FFFF) == 7)
  {
    usage = a1._usage;
    if ((usage + 24) >= 0xF8u && (((_BYTE)usage + 32) & 0x3Fu) <= 7)
    {
      v7 = sub_100045A7C() & ~v1;
      v8 = 1;
LABEL_9:
      HIDReport.subscript.setter(v7, v8);
      goto LABEL_10;
    }
    v4 = sub_1000453CC(usage, 0);
    if ((v5 & 1) == 0)
    {
      v6 = v4;
      v7 = 0;
      v8 = v6;
      goto LABEL_9;
    }
  }
LABEL_10:
  sub_100005D94();
}

char *KeyboardReport.description.getter()
{
  return HIDReport.description.getter();
}

char *sub_100045588()
{
  return KeyboardReport.description.getter();
}

SidecarHID::HIDUsage_optional __swiftcall KeyboardReport.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  SidecarHID::HIDUsage v3;
  unint64_t i;
  unsigned __int8 v5;
  unsigned __int8 v6;
  Swift::Int v7;

  v2 = *(_QWORD *)(v1 + 8);
  if (v2 < -1)
  {
    v3 = 0;
LABEL_12:
    v6 = 1;
    return (SidecarHID::HIDUsage_optional)(*(unsigned int *)&v3 | ((unint64_t)v6 << 32));
  }
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    return (SidecarHID::HIDUsage_optional)v0;
  }
  for (i = v2 - 7; i + 8 > 7; ++i)
  {
    if (i > 5)
    {
      v3 = 0;
      *(_QWORD *)(v1 + 8) = -2;
      goto LABEL_12;
    }
    v5 = HIDReport.subscript.getter(i + 2);
    if (v5)
    {
      *(_QWORD *)(v1 + 8) = i + 8;
      v7 = v5;
      goto LABEL_14;
    }
LABEL_10:
    ;
  }
  if ((HIDReport.subscript.getter(1) & (1 << (i + 8))) == 0)
    goto LABEL_10;
  *(_QWORD *)(v1 + 8) = i + 8;
  v7 = i + 232;
LABEL_14:
  v3 = HIDUsage.init(page:usage:)(7, v7);
  v6 = 0;
  return (SidecarHID::HIDUsage_optional)(*(unsigned int *)&v3 | ((unint64_t)v6 << 32));
}

void sub_100045684(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(SidecarHID::HIDUsage_optional *)&v2 = KeyboardReport.Iterator.next()();
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 4) = BYTE4(v2) & 1;
  sub_100005D94();
}

void sub_1000456B4(_QWORD *a1@<X8>)
{
  uint64_t v2;

  KeyboardReport.makeIterator()();
  *a1 = v2;
  a1[1] = -1;
  sub_100005D94();
}

uint64_t sub_1000456DC()
{
  return variable initialization expression of Clock.heartbeatTimer();
}

uint64_t sub_1000456E4()
{
  uint64_t *v0;

  return sub_1000456EC(*v0);
}

uint64_t sub_1000456EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100045724(a1);
  swift_release(a1);
  return v2;
}

uint64_t sub_10004571C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_100045EE8(a1, a2, a3, *v3);
}

uint64_t sub_100045724(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _WORD *v5;
  uint64_t result;
  __int16 v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  swift_retain(a1);
  v2 = 0;
  v3 = 0;
  v4 = _swiftEmptyArrayStorage;
  v5 = &_swiftEmptyArrayStorage[4];
  while (v2 >= 8)
  {
    if (v2 - 8 >= 6)
    {
      result = swift_release(a1);
      v19 = v4[3];
      if (v19 >= 2)
      {
        v20 = v19 >> 1;
        v18 = __OFSUB__(v20, v3);
        v21 = v20 - v3;
        if (v18)
          goto LABEL_31;
        v4[2] = v21;
      }
      return (uint64_t)v4;
    }
    result = HIDReport.subscript.getter(v2 - 6);
    if ((_BYTE)result)
    {
      v7 = result;
      if (v3)
        goto LABEL_23;
      goto LABEL_10;
    }
LABEL_8:
    ++v2;
  }
  result = HIDReport.subscript.getter(1);
  if ((result & (1 << v2)) == 0)
    goto LABEL_8;
  v7 = v2 + 224;
  if (!v3)
  {
LABEL_10:
    v8 = v4[3];
    if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_30;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = v9;
    v11 = sub_100008414(&qword_100078DF0);
    v12 = (_QWORD *)swift_allocObject(v11, 4 * v10 + 32, 7);
    v13 = (uint64_t)(j__malloc_size(v12) - 32) / 4;
    v12[2] = v10;
    v12[3] = 2 * v13;
    v14 = (unint64_t)(v12 + 4);
    v15 = v4[3];
    v16 = v15 >> 1;
    if (v4[2])
    {
      if (v12 != v4 || v14 >= (unint64_t)v4 + 4 * v16 + 32)
        memmove(v12 + 4, v4 + 4, 4 * v16);
      v4[2] = 0;
    }
    v5 = (_WORD *)(v14 + 4 * v16);
    v3 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - (v15 >> 1);
    result = swift_release(v4);
    v4 = v12;
  }
LABEL_23:
  v18 = __OFSUB__(v3--, 1);
  if (!v18)
  {
    *v5 = 7;
    v5[1] = v7;
    v5 += 2;
    goto LABEL_8;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_1000458D8()
{
  unint64_t result;

  result = qword_100078DE8;
  if (!qword_100078DE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for KeyboardReport.Iterator, &type metadata for KeyboardReport.Iterator);
    atomic_store(result, (unint64_t *)&qword_100078DE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardReport()
{
  return &type metadata for KeyboardReport;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyboardReport.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for KeyboardReport.Iterator(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for KeyboardReport.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for KeyboardReport.Iterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyboardReport.Iterator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyboardReport.Iterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardReport.Iterator()
{
  return &type metadata for KeyboardReport.Iterator;
}

uint64_t sub_100045A70()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009320(v1, v0);
}

uint64_t sub_100045A7C()
{
  return HIDReport.subscript.getter(1);
}

void sub_100045A8C()
{
  HIDReport.__allocating_init(count:)(8);
}

void sub_100045A98(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  id v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  os_log_type_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  id v186;
  id v187;
  id v188;
  id v189;
  id v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  uint64_t v201;
  uint64_t v202;

  v4 = a3();
  v5 = (void *)_convertErrorToNSError(_:)(v4);
  swift_errorRelease(v4);
  v6 = objc_msgSend(v5, "localizedDescription");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = a1();
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    v185 = v5;
    swift_bridgeObjectRetain(v13);
    v14 = sub_1000293E4();
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (sub_1000293FC(v16))
    {
      v17 = sub_10000F640(42);
      v170 = sub_10000F640(96);
      v202 = v170;
      *(_DWORD *)v17 = 136446979;
      swift_bridgeObjectRetain(v13);
      v201 = sub_10000EC54(v12, v13, &v202);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v17 + 4);
      v18 = sub_1000293EC(v13);
      *(_WORD *)(v17 + 12) = 2082;
      v25 = sub_1000293DC(v18, "domain", v19, v20, v21, v22, v23, v24, v170, v185);
      v26 = v7;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      v201 = sub_10000EC54(v27, v29, &v202);
      v30 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v17 + 14);
      sub_1000293B0(v30, v31, v32, v33, v34, v35, v36, v37, v171, v186);
      sub_1000293B0(v38, v39, v40, v41, v42, v43, v44, v45, v172, v187);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v17 + 22) = 2048;
      v53 = sub_1000293DC(v46, "code", v47, v48, v49, v50, v51, v52, v173, v188);
      sub_1000293B0((int)v53, v54, v55, v56, v57, v58, v59, v60, v174, v189);
      v201 = (uint64_t)v53;
      v63 = sub_100045ED8(v61, v62);
      sub_1000293B0(v63, v64, v65, v66, v67, v68, v69, v70, v175, v190);
      *(_WORD *)(v17 + 32) = 2081;
      sub_1000293E4();
      v201 = sub_10000EC54(v26, v9, &v202);
      sub_100045ED8(v201, v71);
      sub_1000293EC(v9);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v5, "%{public}s: %{public}s (%ld) %{private}s", (uint8_t *)v17, 0x2Au);
      swift_arrayDestroy(v176, 3);
      v72 = v176;
LABEL_6:
      sub_10000F604(v72);
      sub_10000F604(v17);

      sub_1000293B0(v128, v129, v130, v131, v132, v133, v134, v135, v176, v191);
      return;
    }
    swift_bridgeObjectRelease_n(v9, 2);
    v136 = v13;
  }
  else
  {
    v185 = v5;
    v73 = sub_1000293E4();
    v15 = Logger.logObject.getter(v73);
    v74 = static os_log_type_t.error.getter();
    if (sub_1000293FC(v74))
    {
      v17 = sub_10000F640(32);
      v75 = sub_10000F640(64);
      v202 = v75;
      *(_DWORD *)v17 = 136446723;
      v82 = sub_1000293DC(v75, "domain", v76, v77, v78, v79, v80, v81, v169, v185);
      v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
      v85 = v84;

      v201 = sub_10000EC54(v83, v85, &v202);
      v87 = sub_100045EC8(v201, v86);
      sub_1000293B0(v87, v88, v89, v90, v91, v92, v93, v94, v177, v192);
      sub_1000293B0(v95, v96, v97, v98, v99, v100, v101, v102, v178, v193);
      swift_bridgeObjectRelease(v85);
      *(_WORD *)(v17 + 12) = 2048;
      LODWORD(v83) = sub_1000293DC(v103, "code", v104, v105, v106, v107, v108, v109, v179, v194);
      sub_1000293B0(v83, v110, v111, v112, v113, v114, v115, v116, v180, v195);
      v119 = sub_100045EC8(v117, v118);
      sub_1000293B0(v119, v120, v121, v122, v123, v124, v125, v126, v181, v196);
      *(_WORD *)(v17 + 22) = 2081;
      sub_1000293E4();
      v201 = sub_10000EC54(v7, v9, &v202);
      sub_100045EC8(v201, v127);
      sub_1000293EC(v9);
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v5, "%{public}s (%ld) %{private}s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy(v75, 2);
      v72 = v75;
      goto LABEL_6;
    }
    v136 = v9;
  }
  swift_bridgeObjectRelease_n(v136, 2);

  sub_1000293B0(v137, v138, v139, v140, v141, v142, v143, v144, v169, v185);
  sub_1000293B0(v145, v146, v147, v148, v149, v150, v151, v152, v182, v197);
  sub_1000293B0(v153, v154, v155, v156, v157, v158, v159, v160, v183, v198);
  sub_1000293B0(v161, v162, v163, v164, v165, v166, v167, v168, v184, v199);

}

uint64_t sub_100045EC8(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v3, v2);
}

uint64_t sub_100045ED8(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(va, v3, v2);
}

uint64_t sub_100045EF0()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10004815C();
  while (v3 != v5)
  {
    if (v2 >= -16 && v2 <= 16 && (v2 & 0x8000000000000000) == 0 && (unint64_t)v2 < 0x10)
      result = (*(unsigned __int8 *)(v4 + v6) << (v2 & 8)) | result;
    if (v3 == 1)
      return result;
    ++v3;
    v2 += 8;
    v6 = v1 + v3;
    if (__OFADD__(v1, v3))
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100045F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v3 = 0;
  v4 = 0;
  result = 0;
  v6 = a1;
  while (v4 != 0x1000000000000000)
  {
    if (v3 < -16)
      goto LABEL_4;
    if (v3 <= 16)
    {
      if (v3 < 0)
      {
LABEL_4:
        v7 = 0;
LABEL_9:
        result = v7 | result;
        goto LABEL_10;
      }
      if ((unint64_t)v3 <= 0xF)
      {
        v7 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + v6) << (v3 & 8);
        goto LABEL_9;
      }
    }
LABEL_10:
    if (v4 == 1)
      return result;
    ++v4;
    v3 += 8;
    v6 = a1 + v4;
    if (__OFADD__(a1, v4))
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100045FD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = 0;
  v4 = 0;
  result = 0;
  v6 = a1;
  while (v4 != 0x1000000000000000)
  {
    if (v3 >= -64 && v3 <= 64 && (v3 & 0x8000000000000000) == 0 && (unint64_t)v3 < 0x40)
      result |= (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + v6) << (v3 & 0x38);
    if (v4 == 7)
      return result;
    ++v4;
    v3 += 8;
    v6 = a1 + v4;
    if (__OFADD__(a1, v4))
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100046050()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = sub_10004815C();
  while (v3 != v5)
  {
    if (v2 >= -32 && v2 <= 32 && (v2 & 0x8000000000000000) == 0 && (unint64_t)v2 < 0x20)
      result = (*(unsigned __int8 *)(v4 + v6) << (v2 & 0x18)) | result;
    if (v3 == 3)
      return result;
    ++v3;
    v2 += 8;
    v6 = v1 + v3;
    if (__OFADD__(v1, v3))
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000460B8()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  result = sub_10004815C();
  while (v3 != v5)
  {
    if (v2 < -32)
      goto LABEL_4;
    if (v2 <= 32)
    {
      if (v2 < 0)
      {
LABEL_4:
        v7 = 0;
LABEL_9:
        result = v7 | result;
        goto LABEL_10;
      }
      if ((unint64_t)v2 <= 0x1F)
      {
        v7 = *(unsigned __int8 *)(v4 + v6) << (v2 & 0x18);
        goto LABEL_9;
      }
    }
LABEL_10:
    if (v3 == 3)
      return result;
    ++v3;
    v2 += 8;
    v6 = v1 + v3;
    if (__OFADD__(v1, v3))
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_100046128()
{
  char v0;
  char v1;
  Swift::Double v2;
  Swift::Double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  sub_1000481A0();
  sub_100045EF0();
  sub_1000436D0(v1, v3, v2, v5, v6, v7, v4, v0);
  sub_100048208();
}

uint64_t sub_100046190(uint64_t a1, Swift::Double a2, Swift::Double a3, __n128 a4, __n128 a5)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  double v9;
  double v10;
  uint64_t result;
  Swift::Double_optional v13;
  Swift::Double_optional v14;
  Swift::Double_optional v15;

  v5 = a5.n128_u8[0];
  v6 = a4.n128_u8[0];
  v9 = (double)(__int16)sub_100045F58(a1);
  v13.is_nil = v6;
  v15.is_nil = v5;
  v14.is_nil = 0;
  v10 = HIDReport.resolution(logicalMinimum:logicalMaximum:physicalMinimum:physicalMaximum:exponent:)(a2, a3, v13, v14, v15);
  if (v9 > a3 || v9 < a2)
    *(double *)&result = 0.0;
  else
    *(double *)&result = v9 / v10;
  return result;
}

void sub_100046220()
{
  char v0;
  char v1;
  Swift::Double v2;
  Swift::Double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  sub_1000481A0();
  sub_100046050();
  sub_1000436D0(v1, v3, v2, v5, v6, v7, v4, v0);
  sub_100048208();
}

uint64_t sub_100046284(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(v3 + a2) = result;
  if (__OFADD__(a2, 1))
    __break(1u);
  else
    *(_BYTE *)(v3 + a2 + 1) = BYTE1(result);
  return result;
}

uint64_t sub_1000462A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(v3 + a2) = result;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  *(_BYTE *)(v3 + a2 + 1) = BYTE1(result);
  if (__OFADD__(a2, 2))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(_BYTE *)(v3 + a2 + 2) = BYTE2(result);
  if (!__OFADD__(a2, 3))
  {
    *(_BYTE *)(v3 + a2 + 3) = BYTE3(result);
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000462F0(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Double a4, Swift::Double a5, double a6, double a7, double a8)
{
  return sub_100046314(a1, a2, a3, (void (*)(unsigned __int16 *, double))sub_1000478C0, 0x3631746E4955, (void *)0xE600000000000000, (uint64_t (*)(void))sub_10004650C, a4, a5, a6, a7, a8);
}

uint64_t sub_100046314(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned __int16 *, double), uint64_t a5, void *a6, uint64_t (*a7)(void), Swift::Double a8, Swift::Double a9, double a10, double a11, double a12)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  double v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 v31;
  char v32;

  if ((a2 & 1) != 0 || (a1 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    result = a7();
  }
  else
  {
    v12 = a6;
    v14 = a5;
    v18 = sub_1000436D0(SLOBYTE(a10), a8, a9, a10, a11, a12, a2, SLOBYTE(a11));
    a4(&v31, round(v18 * *(double *)&a1));
    if ((v32 & 1) != 0)
      goto LABEL_9;
    result = v31;
  }
  v20 = *(_QWORD *)(v13 + 16);
  *(_BYTE *)(v20 + a3) = result;
  if (!__OFADD__(a3, 1))
  {
    *(_BYTE *)(v20 + a3 + 1) = BYTE1(result);
    return result;
  }
  __break(1u);
LABEL_9:
  sub_100043544();
  sub_1000434D8();
  sub_1000481F8(v21, 0x8000000100057B40);
  v22._countAndFlagsBits = v14;
  v22._object = v12;
  String.append(_:)(v22);
  sub_100043618(0xD00000000000002ELL, (uint64_t)" because it is outside the representable range");
  sub_100043658();
  result = sub_100043558((uint64_t)"Fatal error", v23, v24, v25, v26, (uint64_t)"Swift/Integers.swift", v27, v28, v29, v30);
  __break(1u);
  return result;
}

uint64_t sub_100046424(uint64_t a1, uint64_t a2, uint64_t a3, Swift::Double a4, Swift::Double a5, double a6, double a7, double a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  char v22;

  if ((a2 & 1) != 0 || (a1 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    v9 = sub_100046904();
    return sub_1000462A8(v9, a3);
  }
  sub_1000436D0(SLOBYTE(a6), a4, a5, a6, a7, a8, a2, SLOBYTE(a7));
  sub_1000479B8();
  if ((v22 & 1) == 0)
  {
    v9 = v21;
    return sub_1000462A8(v9, a3);
  }
  sub_100043544();
  sub_1000434D8();
  sub_1000481F8(v11, 0x8000000100057B40);
  v12._countAndFlagsBits = 0x3233746E4955;
  v12._object = (void *)0xE600000000000000;
  String.append(_:)(v12);
  sub_100043618(0xD00000000000002ELL, (uint64_t)" because it is outside the representable range");
  sub_100043658();
  result = sub_100043558((uint64_t)"Fatal error", v13, v14, v15, v16, (uint64_t)"Swift/Integers.swift", v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_10004650C(double a1, double a2)
{
  uint64_t result;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;

  sub_1000478C0();
  if ((v11 & 0x10000) != 0)
    goto LABEL_7;
  if ((_WORD)v11)
    return 0;
  sub_1000478C0();
  if ((v11 & 0x10000) != 0)
  {
LABEL_7:
    v11 = 0;
    v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v5._countAndFlagsBits = 0x656C62756F44;
    v5._object = (void *)0xE600000000000000;
    String.append(_:)(v5);
    v6._object = (void *)0x8000000100057B40;
    v6._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v6);
    v7._countAndFlagsBits = 0x3631746E4955;
    v7._object = (void *)0xE600000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD00000000000002ELL;
    v8._object = (void *)0x8000000100057B60;
    String.append(_:)(v8);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
  }
  else
  {
    if ((__int16)v11 != -1)
      return 0xFFFFLL;
    v11 = 0;
    v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v9._countAndFlagsBits = 0xD000000000000031;
    v9._object = (void *)0x8000000100057B00;
    String.append(_:)(v9);
    Double.write<A>(to:)(&v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
    v10._countAndFlagsBits = 45;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    Double.write<A>(to:)(&v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, "SidecarHID/HIDReport.swift", 26, 2, 381, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_100046708(double a1, double a2)
{
  uint64_t result;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;

  sub_100047BF8();
  if ((v11 & 0x10000) != 0)
    goto LABEL_8;
  if ((__int16)v11 != -32768)
    return 0x8000;
  sub_100047BF8();
  if ((v11 & 0x10000) != 0)
  {
LABEL_8:
    v11 = 0;
    v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v7._countAndFlagsBits = 0x656C62756F44;
    v7._object = (void *)0xE600000000000000;
    String.append(_:)(v7);
    v8._object = (void *)0x8000000100057B40;
    v8._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = 0x3631746E49;
    v9._object = (void *)0xE500000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0xD00000000000002ELL;
    v10._object = (void *)0x8000000100057B60;
    String.append(_:)(v10);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    goto LABEL_9;
  }
  result = 0x7FFFLL;
  if ((unsigned __int16)v11 == 0x7FFF)
  {
    v11 = 0;
    v12 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v5._countAndFlagsBits = 0xD000000000000031;
    v5._object = (void *)0x8000000100057B00;
    String.append(_:)(v5);
    Double.write<A>(to:)(&v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
    v6._countAndFlagsBits = 45;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    Double.write<A>(to:)(&v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v11, v12, "SidecarHID/HIDReport.swift", 26, 2, 381, 0);
LABEL_9:
    __break(1u);
  }
  return result;
}

uint64_t sub_100046904()
{
  uint64_t result;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;

  sub_1000479B8();
  if ((v5 & 0x100000000) != 0)
    goto LABEL_6;
  if ((_DWORD)v5)
    return 0;
  sub_1000479B8();
  if ((v5 & 0x100000000) == 0)
    return 0xFFFFFFFFLL;
LABEL_6:
  v5 = 0;
  v6 = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v1._countAndFlagsBits = 0x656C62756F44;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  v2._object = (void *)0x8000000100057B40;
  v2._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x3233746E4955;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xD00000000000002ELL;
  v4._object = (void *)0x8000000100057B60;
  String.append(_:)(v4);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
  __break(1u);
  return result;
}

void sub_100046B00()
{
  static MultitouchReport.reportID = 6;
}

char *MultitouchReport.reportID.unsafeMutableAddressor()
{
  if (qword_100078BD8 != -1)
    swift_once(&qword_100078BD8, sub_100046B00);
  return &static MultitouchReport.reportID;
}

uint64_t static MultitouchReport.reportID.getter()
{
  if (qword_100078BD8 != -1)
    swift_once(&qword_100078BD8, sub_100046B00);
  return static MultitouchReport.reportID;
}

void sub_100046B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100008414(&qword_100077B60);
  v1 = swift_allocObject(v0, 154, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10005A540;
  *(_QWORD *)(v1 + 32) = 0x8501A12109FF1A06;
  if (qword_100078BD8 != -1)
    swift_once(&qword_100078BD8, sub_100046B00);
  *(_BYTE *)(v1 + 40) = static MultitouchReport.reportID;
  *(_OWORD *)(v1 + 41) = xmmword_10005A550;
  *(_OWORD *)(v1 + 57) = xmmword_10005A560;
  *(_OWORD *)(v1 + 73) = xmmword_10005A570;
  *(_OWORD *)(v1 + 89) = xmmword_10005A580;
  *(_OWORD *)(v1 + 105) = xmmword_10005A590;
  *(_OWORD *)(v1 + 121) = xmmword_10005A5A0;
  *(_OWORD *)(v1 + 137) = xmmword_10005A5B0;
  *(_BYTE *)(v1 + 153) = -64;
  sub_10003F650(v1);
  static MultitouchReport.reportDescriptor = v2;
  *(_QWORD *)algn_10007C978 = v3;
}

uint64_t *MultitouchReport.reportDescriptor.unsafeMutableAddressor()
{
  if (qword_100078BE0 != -1)
    swift_once(&qword_100078BE0, sub_100046B90);
  return &static MultitouchReport.reportDescriptor;
}

void static MultitouchReport.reportDescriptor.getter()
{
  if (qword_100078BE0 != -1)
    swift_once(&qword_100078BE0, sub_100046B90);
  sub_100009364(static MultitouchReport.reportDescriptor, *(unint64_t *)algn_10007C978);
  sub_100005D94();
}

uint64_t MultitouchReport.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10003F24C();
  sub_10004817C();
  v1 = v0;
  v2 = qword_100078BD8;
  swift_retain(v0);
  if (v2 != -1)
    swift_once(&qword_100078BD8, sub_100046B00);
  HIDReport.subscript.setter(static MultitouchReport.reportID, 0);
  sub_100027240();
  return v1;
}

void MultitouchReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Data.Iterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F24C();
  sub_10004817C();
  v10 = v9;
  swift_retain(v9);
  v11 = Data.subscript.getter(0);
  if (qword_100078BD8 != -1)
    swift_once(&qword_100078BD8, sub_100046B00);
  if (static MultitouchReport.reportID == v11
    && (v12 = Data.count.getter(a1, a2), v13 = *(_QWORD *)(v10 + 24), v12 >= v13))
  {
    v14 = *(_QWORD *)(v10 + 16);
    sub_100027240();
    sub_100009364(a1, a2);
    Data._copyContents(initializing:)(v8, v14, v13, a1, a2);
    sub_100045A70();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100045A70();
  }
  else
  {
    sub_100045A70();
    sub_100027240();
    sub_100027240();
  }
  sub_1000371A4();
}

uint64_t MultitouchReport.init(report:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v9;

  sub_10003F24C();
  sub_10004817C();
  v3 = v2;
  v4 = HIDReport.subscript.getter(0);
  v5 = qword_100078BD8;
  swift_retain(v3);
  if (v5 != -1)
    swift_once(&qword_100078BD8, sub_100046B00);
  if (static MultitouchReport.reportID == v4 && (v6 = *(_QWORD *)(v3 + 24), *(_QWORD *)(a1 + 24) >= v6))
  {
    v7 = *(_BYTE **)(v3 + 16);
    sub_100048284();
    sub_100047F84(&v9, v7, v6);
    swift_release(v9);
  }
  else
  {
    sub_100048284();
    swift_release(a1);
    sub_100048284();
    return 0;
  }
  return v3;
}

void MultitouchReport.x.getter()
{
  char v0;

  sub_1000481D0();
  sub_100046128();
  if ((v0 & 1) != 0)
    __break(1u);
}

void MultitouchReport.x.setter()
{
  double v0;
  double v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  sub_10004810C(v0);
  sub_1000480AC(v4, 0, 1, (void (*)(unsigned __int16 *, double))sub_1000478C0, 0.0, 32767.0, 0.0, 1.0, 0.0, v5, v6, (uint64_t (*)(void))sub_10004650C);
  sub_100005D94();
}

void MultitouchReport.x.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  a1[1] = a2;
  sub_1000481D0();
  sub_100046128();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = v3;
    sub_100005D94();
  }
}

void sub_100047068()
{
  double v0;
  double v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  sub_10004810C(v0);
  sub_1000480AC(v4, 0, 1, (void (*)(unsigned __int16 *, double))sub_1000478C0, 0.0, 32767.0, 0.0, 1.0, 0.0, v5, v6, (uint64_t (*)(void))sub_10004650C);
  sub_100005D94();
}

void MultitouchReport.y.getter()
{
  char v0;

  sub_1000481B8();
  sub_100046128();
  if ((v0 & 1) != 0)
    __break(1u);
}

void MultitouchReport.y.setter()
{
  double v0;
  double v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  sub_10004810C(v0);
  sub_1000480AC(v4, 0, 3, (void (*)(unsigned __int16 *, double))sub_1000478C0, 0.0, 32767.0, 0.0, 1.0, 0.0, v5, v6, (uint64_t (*)(void))sub_10004650C);
  sub_100005D94();
}

void MultitouchReport.y.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  a1[1] = a2;
  sub_1000481B8();
  sub_100046128();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = v3;
    sub_100005D94();
  }
}

void sub_10004719C()
{
  double v0;
  double v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  sub_10004810C(v0);
  sub_1000480AC(v4, 0, 3, (void (*)(unsigned __int16 *, double))sub_1000478C0, 0.0, 32767.0, 0.0, 1.0, 0.0, v5, v6, (uint64_t (*)(void))sub_10004650C);
  sub_100005D94();
}

void MultitouchReport.rotation.getter(double a1, double a2, __n128 a3, __n128 a4)
{
  a3.n128_u64[0] = 0xC0EEADE000000000;
  a4.n128_u64[0] = 0x40EEADE000000000;
  sub_100046190(5, -32767.0, 32767.0, a3, a4);
  sub_100005D94();
}

void MultitouchReport.rotation.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = a2 & 1;
  if ((a2 & 1) == 0)
    a1 = remainder(*(long double *)&a1, 6.28318531);
  sub_100048054(a1, v6, 5, (void (*)(unsigned __int16 *, double))sub_100047BF8, -32767.0, 32767.0, -62831.0, 62831.0, -4.0, a5, a6, (uint64_t (*)(void))sub_100046708);
  sub_100005D94();
}

void MultitouchReport.rotation.modify(uint64_t a1, uint64_t a2)
{
  __n128 v2;
  __n128 v3;
  uint64_t v4;
  char v5;

  sub_100048278(a1, a2);
  v2.n128_u64[0] = 0xC0EEADE000000000;
  v3.n128_u64[0] = 0x40EEADE000000000;
  v4 = sub_100048228(5, -32767.0, 32767.0, v2, v3);
  sub_10004814C(v4, v5);
  sub_100005D94();
}

void sub_100047308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)a1;
  v8 = *(unsigned __int8 *)(a1 + 8);
  if ((v8 & 1) == 0)
    v7 = remainder(*(long double *)&v7, 6.28318531);
  sub_100048054(v7, v8, 5, (void (*)(unsigned __int16 *, double))sub_100047BF8, -32767.0, 32767.0, -62831.0, 62831.0, -4.0, a5, a6, (uint64_t (*)(void))sub_100046708);
  sub_100005D94();
}

void MultitouchReport.scale.getter()
{
  uint64_t v0;
  Swift::Double v1;
  Swift::Double v2;
  __n128 v3;
  __n128 v4;

  v0 = sub_100048264();
  sub_100046190(v0, v1, v2, v3, v4);
  sub_100005D94();
}

void MultitouchReport.scale.setter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(unsigned __int16 *, double);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  Swift::Double v8;
  Swift::Double v9;
  double v10;
  double v11;
  double v12;

  sub_100048218();
  if ((v1 & 1) == 0)
    sub_100048068(v0);
  sub_100048120();
  sub_100048054(v2, v3, 7, v4, v8, v9, v10, v11, v12, v5, v6, v7);
  sub_100005D94();
}

void MultitouchReport.scale.modify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Double v3;
  Swift::Double v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  char v8;

  sub_100048278(a1, a2);
  v2 = sub_100048264();
  v7 = sub_100048228(v2, v3, v4, v5, v6);
  sub_10004814C(v7, v8);
  sub_100005D94();
}

void sub_100047448(uint64_t a1)
{
  sub_10004751C(a1);
}

void MultitouchReport.tx.getter()
{
  uint64_t v0;
  Swift::Double v1;
  Swift::Double v2;
  __n128 v3;
  __n128 v4;

  v0 = sub_10004823C();
  sub_100046190(v0, v1, v2, v3, v4);
  sub_100005D94();
}

void MultitouchReport.tx.setter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(unsigned __int16 *, double);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  Swift::Double v8;
  Swift::Double v9;
  double v10;
  double v11;
  double v12;

  sub_100048218();
  if ((v1 & 1) == 0)
    sub_100048068(v0);
  sub_100048120();
  sub_100048054(v2, v3, 11, v4, v8, v9, v10, v11, v12, v5, v6, v7);
  sub_100005D94();
}

void MultitouchReport.tx.modify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Double v3;
  Swift::Double v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  char v8;

  sub_100048278(a1, a2);
  v2 = sub_10004823C();
  v7 = sub_100048228(v2, v3, v4, v5, v6);
  sub_10004814C(v7, v8);
  sub_100005D94();
}

void sub_100047514(uint64_t a1)
{
  sub_10004751C(a1);
}

void sub_10004751C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(unsigned __int16 *, double);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  Swift::Double v10;
  Swift::Double v11;
  double v12;
  double v13;
  double v14;

  v2 = *(_QWORD *)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    sub_100048068(v2);
  sub_100048120();
  sub_100048054(v3, v4, v5, v6, v10, v11, v12, v13, v14, v7, v8, v9);
  sub_100005D94();
}

void MultitouchReport.ty.getter()
{
  uint64_t v0;
  Swift::Double v1;
  Swift::Double v2;
  __n128 v3;
  __n128 v4;

  v0 = sub_100048250();
  sub_100046190(v0, v1, v2, v3, v4);
  sub_100005D94();
}

void MultitouchReport.ty.setter()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(unsigned __int16 *, double);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  Swift::Double v8;
  Swift::Double v9;
  double v10;
  double v11;
  double v12;

  sub_100048218();
  if ((v1 & 1) == 0)
    sub_100048068(v0);
  sub_100048120();
  sub_100048054(v2, v3, 9, v4, v8, v9, v10, v11, v12, v5, v6, v7);
  sub_100005D94();
}

void MultitouchReport.ty.modify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Double v3;
  Swift::Double v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  char v8;

  sub_100048278(a1, a2);
  v2 = sub_100048250();
  v7 = sub_100048228(v2, v3, v4, v5, v6);
  sub_10004814C(v7, v8);
  sub_100005D94();
}

void sub_10004763C(uint64_t a1)
{
  sub_10004751C(a1);
}

uint64_t MultitouchReport.scanTime.getter()
{
  return sub_100045EF0();
}

uint64_t MultitouchReport.scanTime.setter(uint64_t result, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)(a2 + 16) + 13) = result;
  return result;
}

void MultitouchReport.scanTime.modify(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = sub_100045EF0();
  sub_100005D94();
}

_WORD *sub_1000476AC(_WORD *result)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)result + 16) + 13) = result[4];
  return result;
}

uint64_t MultitouchReport.hostTime.getter()
{
  return sub_100045FD8(15);
}

void MultitouchReport.hostTime.setter(Swift::UInt64 a1)
{
  HIDReport.setValue(_:at:)(a1, 15);
  sub_100005D94();
}

void MultitouchReport.hostTime.modify(uint64_t *a1, uint64_t a2)
{
  a1[1] = a2;
  *a1 = sub_100045FD8(15);
  sub_100005D94();
}

void sub_10004773C(Swift::UInt64 *a1)
{
  HIDReport.setValue(_:at:)(*a1, 15);
  sub_100005D94();
}

void SqueezeGestureReport.description.getter()
{
  HIDReport.description.getter();
  sub_100005D94();
}

unint64_t static MultitouchReport.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_10003F24C();
  return (unint64_t)static HIDReport.== infix(_:_:)(a1, a2) & 1;
}

void sub_1000477B4()
{
  SqueezeGestureReport.description.getter();
}

unint64_t sub_1000477BC(uint64_t *a1, uint64_t *a2)
{
  return static MultitouchReport.__derived_struct_equals(_:_:)(*a1, *a2);
}

void sub_1000477C8()
{
  _BYTE *v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  sub_100048038();
  if (!v3)
  {
    sub_100048194();
    goto LABEL_16;
  }
  v4 = v2 == 2047 || v1 <= -1.0;
  if (!v4 && sub_100048144() <= 7)
  {
    sub_1000480E0();
    sub_100048130();
    if (v8)
    {
      __break(1u);
    }
    else
    {
      if (v7 <= 7)
        goto LABEL_15;
      sub_100048188();
      if (!v10)
        goto LABEL_15;
      if ((v9 & 0x8000000000000000) == 0)
      {
        sub_1000480EC();
LABEL_15:
        sub_1000481E8();
        goto LABEL_16;
      }
    }
    sub_100048098();
    goto LABEL_15;
  }
  sub_1000480FC();
LABEL_16:
  *v0 = v5;
  v0[1] = v6;
  sub_100048088();
}

void sub_1000478C0()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  sub_100048038();
  if (!v3)
  {
    sub_100048194();
    goto LABEL_16;
  }
  v4 = v2 == 2047 || v1 <= -1.0;
  if (!v4 && sub_100048144() <= 15)
  {
    sub_1000480E0();
    sub_100048130();
    if (v8)
    {
      __break(1u);
    }
    else
    {
      if (v7 <= 15)
        goto LABEL_15;
      sub_100048188();
      if (!v10)
        goto LABEL_15;
      if ((v9 & 0x8000000000000000) == 0)
      {
        sub_1000480EC();
LABEL_15:
        sub_1000481E8();
        goto LABEL_16;
      }
    }
    sub_100048098();
    goto LABEL_15;
  }
  sub_1000480FC();
LABEL_16:
  *(_WORD *)v0 = v5;
  *(_BYTE *)(v0 + 2) = v6;
  sub_100048088();
}

void sub_1000479B8()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  sub_100048038();
  if (!v3)
  {
    sub_100048194();
    goto LABEL_16;
  }
  v4 = v2 == 2047 || v1 <= -1.0;
  if (!v4 && sub_100048144() <= 31)
  {
    sub_1000480E0();
    sub_100048130();
    if (v8)
    {
      __break(1u);
    }
    else
    {
      if (v7 <= 31)
        goto LABEL_15;
      sub_100048188();
      if (!v10)
        goto LABEL_15;
      if ((v9 & 0x8000000000000000) == 0)
      {
        sub_1000480EC();
LABEL_15:
        sub_1000481E8();
        goto LABEL_16;
      }
    }
    sub_100048098();
    goto LABEL_15;
  }
  sub_1000480FC();
LABEL_16:
  *(_DWORD *)v0 = v5;
  *(_BYTE *)(v0 + 4) = v6;
  sub_100048088();
}

void sub_100047AAC()
{
  _BYTE *v0;
  uint64_t v1;
  int v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;

  sub_100048038();
  if (!v5)
  {
    sub_100048194();
    goto LABEL_27;
  }
  if (v4 == 2047 || sub_100048144() > 7)
  {
LABEL_36:
    sub_1000480FC();
    goto LABEL_27;
  }
  v6 = sub_1000480E0();
  sub_1000480C0(v6);
  if (v9)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v8 > 7)
  {
    sub_100048188();
    if (v12)
    {
      if (v11 < 0)
        sub_100048098();
      else
        sub_1000480EC();
    }
    else
    {
      LOBYTE(v7) = 0;
    }
LABEL_18:
    if (v1 != 7)
    {
      if (v1 < 0)
      {
        LOBYTE(v10) = 0;
        goto LABEL_22;
      }
      goto LABEL_21;
    }
LABEL_29:
    if (v3 >= 0.0 || (_BYTE)v7)
      goto LABEL_36;
    goto LABEL_31;
  }
  if (v7 >= -8 && v7 <= 8)
  {
    if (v7 < 0)
    {
      if ((unint64_t)v7 <= 0xFFFFFFFFFFFFFFF8)
        goto LABEL_8;
      LODWORD(v7) = v2 >> -(char)v7;
    }
    else
    {
      if ((unint64_t)v7 >= 8)
        goto LABEL_8;
      LODWORD(v7) = v2 << v7;
    }
    goto LABEL_18;
  }
LABEL_8:
  if (v1 == 7)
    goto LABEL_35;
  LOBYTE(v10) = 0;
  LOBYTE(v7) = 0;
  if ((v1 & 0x8000000000000000) == 0)
LABEL_21:
    v10 = 1 << v1;
LABEL_22:
  v13 = (char)(v7 | v10);
  if (v3 >= 0.0)
  {
    if ((v13 & 0x80000000) == 0)
    {
      v14 = 0;
      goto LABEL_27;
    }
    goto LABEL_34;
  }
  if (v13 < 0)
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v3 >= 0.0)
      goto LABEL_36;
LABEL_31:
    v14 = 0;
    LOBYTE(v13) = 0x80;
    goto LABEL_27;
  }
  v14 = 0;
  v13 = -v13;
LABEL_27:
  *v0 = v13;
  v0[1] = v14;
  sub_100048088();
}

void sub_100047BF8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;

  sub_100048038();
  if (!v5)
  {
    sub_100048194();
    goto LABEL_27;
  }
  if (v4 == 2047 || sub_100048144() > 15)
  {
LABEL_36:
    sub_1000480FC();
    goto LABEL_27;
  }
  v6 = sub_1000480E0();
  sub_1000480C0(v6);
  if (v9)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v8 > 15)
  {
    sub_100048188();
    if (v12)
    {
      if (v11 < 0)
        sub_100048098();
      else
        sub_1000480EC();
    }
    else
    {
      LOWORD(v7) = 0;
    }
LABEL_18:
    if (v1 != 15)
    {
      if (v1 < 0)
      {
        LOWORD(v10) = 0;
        goto LABEL_22;
      }
      goto LABEL_21;
    }
LABEL_29:
    if (v3 >= 0.0 || (_WORD)v7)
      goto LABEL_36;
    goto LABEL_31;
  }
  if (v7 >= -16 && v7 <= 16)
  {
    if (v7 < 0)
    {
      if ((unint64_t)v7 <= 0xFFFFFFFFFFFFFFF0)
        goto LABEL_8;
      LODWORD(v7) = (unsigned __int16)v2 >> -(char)v7;
    }
    else
    {
      if ((unint64_t)v7 >= 0x10)
        goto LABEL_8;
      LODWORD(v7) = v2 << v7;
    }
    goto LABEL_18;
  }
LABEL_8:
  if (v1 == 15)
    goto LABEL_35;
  LOWORD(v10) = 0;
  LOWORD(v7) = 0;
  if ((v1 & 0x8000000000000000) == 0)
LABEL_21:
    v10 = 1 << v1;
LABEL_22:
  v13 = (__int16)(v7 | v10);
  if (v3 >= 0.0)
  {
    if ((v13 & 0x80000000) == 0)
    {
      v14 = 0;
      goto LABEL_27;
    }
    goto LABEL_34;
  }
  if (v13 < 0)
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v3 >= 0.0)
      goto LABEL_36;
LABEL_31:
    v14 = 0;
    LOWORD(v13) = 0x8000;
    goto LABEL_27;
  }
  v14 = 0;
  v13 = -v13;
LABEL_27:
  *(_WORD *)v0 = v13;
  *(_BYTE *)(v0 + 2) = v14;
  sub_100048088();
}

void sub_100047D44()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  char v14;

  sub_100048038();
  if (!v5)
  {
    sub_100048194();
    goto LABEL_27;
  }
  if (v4 == 2047 || sub_100048144() > 31)
  {
LABEL_36:
    sub_1000480FC();
    goto LABEL_27;
  }
  v6 = sub_1000480E0();
  sub_1000480C0(v6);
  if (v9)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v8 > 31)
  {
    sub_100048188();
    if (v12)
    {
      if (v11 < 0)
        sub_100048098();
      else
        sub_1000480EC();
    }
    else
    {
      LODWORD(v7) = 0;
    }
LABEL_18:
    if (v1 != 31)
    {
      if (v1 < 0)
      {
        v10 = 0;
        goto LABEL_22;
      }
      goto LABEL_21;
    }
LABEL_29:
    if (v3 >= 0.0 || (_DWORD)v7)
      goto LABEL_36;
    goto LABEL_31;
  }
  if (v7 >= -32 && v7 <= 32)
  {
    if (v7 < 0)
    {
      if ((unint64_t)v7 <= 0xFFFFFFFFFFFFFFE0)
        goto LABEL_8;
      LODWORD(v7) = v2 >> -(char)v7;
    }
    else
    {
      if ((unint64_t)v7 >= 0x20)
        goto LABEL_8;
      LODWORD(v7) = v2 << v7;
    }
    goto LABEL_18;
  }
LABEL_8:
  if (v1 == 31)
    goto LABEL_35;
  v10 = 0;
  LODWORD(v7) = 0;
  if ((v1 & 0x8000000000000000) == 0)
LABEL_21:
    v10 = 1 << v1;
LABEL_22:
  v13 = v7 | v10;
  if (v3 >= 0.0)
  {
    if ((v13 & 0x80000000) == 0)
    {
      v14 = 0;
      goto LABEL_27;
    }
    goto LABEL_34;
  }
  if (v13 < 0)
  {
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    if (v3 >= 0.0)
      goto LABEL_36;
LABEL_31:
    v14 = 0;
    v13 = 0x80000000;
    goto LABEL_27;
  }
  v14 = 0;
  v13 = -v13;
LABEL_27:
  *(_DWORD *)v0 = v13;
  *(_BYTE *)(v0 + 4) = v14;
  sub_100048088();
}

_QWORD *sub_100047E84(_QWORD *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  unsigned __int8 v12;
  __int16 v13;

  v5 = result;
  if (!a2)
  {
    v6 = 0;
    goto LABEL_16;
  }
  v6 = a3;
  if (!a3)
  {
LABEL_16:
    v9 = -1;
    goto LABEL_18;
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  v7 = a2;
  v8 = 0;
  v9 = -1;
  while (2)
  {
    v10 = v8++;
    for (i = v9 - 7; i < 0xFFFFFFFFFFFFFFF8; ++i)
    {
      if (i > 5)
      {
        v9 = -2;
        v6 = v10;
        goto LABEL_18;
      }
      v12 = HIDReport.subscript.getter(i + 2);
      if (v12)
      {
        v13 = v12;
        goto LABEL_13;
      }
LABEL_11:
      ;
    }
    if ((HIDReport.subscript.getter(1) & (1 << (i + 8))) == 0)
      goto LABEL_11;
    v13 = i + 232;
LABEL_13:
    *v7 = 7;
    v7[1] = v13;
    v7 += 2;
    v9 = i + 8;
    if (v8 != v6)
      continue;
    break;
  }
LABEL_18:
  *v5 = a4;
  v5[1] = v9;
  return (_QWORD *)v6;
}

void sub_100047F84(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_13;
  }
  v5 = a3;
  if (!a3)
  {
LABEL_13:
    *a1 = v3;
    a1[1] = v5;
    sub_1000371A4();
    return;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(v3 + 24);
    if (v6)
    {
      *a2 = HIDReport.subscript.getter(0);
      if (v5 != 1)
      {
        v8 = 1;
        while (v5 != v8)
        {
          if (v6 == v8)
            goto LABEL_12;
          a2[v8] = HIDReport.subscript.getter(v8);
          if (v5 == ++v8)
            goto LABEL_13;
        }
        __break(1u);
        goto LABEL_15;
      }
    }
    else
    {
LABEL_12:
      v5 = v6;
    }
    goto LABEL_13;
  }
LABEL_15:
  __break(1u);
}

ValueMetadata *type metadata accessor for MultitouchReport()
{
  return &type metadata for MultitouchReport;
}

uint64_t sub_100048054(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned __int16 *, double), Swift::Double a5, Swift::Double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void))
{
  return sub_100046314(a1, a2, a3, a4, 0x3631746E49, (void *)0xE500000000000000, a12, a5, a6, a7, a8, a9);
}

double sub_100048068(uint64_t a1)
{
  double result;

  result = *(double *)&a1;
  if (*(double *)&a1 <= -1.0)
    result = -1.0;
  if (result > 1.0)
    return 1.0;
  return result;
}

uint64_t sub_1000480AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned __int16 *, double), Swift::Double a5, Swift::Double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void))
{
  return sub_100046314(a1, a2, a3, a4, 0x3631746E4955, (void *)0xE600000000000000, a12, a5, a6, a7, a8, a9);
}

BOOL sub_1000480C0(uint64_t a1)
{
  uint64_t v1;

  return v1 >= a1;
}

uint64_t sub_1000480E0()
{
  double v0;

  return Double.significandWidth.getter(v0);
}

uint64_t sub_1000480FC()
{
  return 0;
}

double sub_10004810C(double result)
{
  if (result > 1.0)
    return 1.0;
  return result;
}

uint64_t sub_100048144()
{
  double v0;

  return Double.exponent.getter(v0);
}

uint64_t sub_10004814C(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t sub_10004815C()
{
  return 0;
}

void sub_10004817C()
{
  HIDReport.__allocating_init(count:)(23);
}

uint64_t sub_100048194()
{
  return 1;
}

uint64_t sub_1000481B8()
{
  return 3;
}

uint64_t sub_1000481D0()
{
  return 1;
}

void sub_1000481F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD00000000000001ELL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_100048228(uint64_t a1, Swift::Double a2, Swift::Double a3, __n128 a4, __n128 a5)
{
  return sub_100046190(a1, a2, a3, a4, a5);
}

uint64_t sub_10004823C()
{
  return 11;
}

uint64_t sub_100048250()
{
  return 9;
}

uint64_t sub_100048264()
{
  return 7;
}

uint64_t sub_100048278(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_100048284()
{
  uint64_t v0;

  return swift_release(v0);
}

id sub_10004828C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  NSString v22;
  uint64_t v23;
  Class isa;
  id v25;
  uint64_t v27;
  _QWORD *v28;
  char v29[8];
  _QWORD v30[3];
  void *v31;
  uint64_t v32;

  v7 = v6;
  v32 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage);
  if (a5)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    v31 = &type metadata for String;
    v30[0] = a4;
    v30[1] = a5;
    sub_100009E20((uint64_t)v30, v13, v14);
  }
  if (a6)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v17 = v16;
    swift_getErrorValue(a6, v29, &v27);
    v18 = v27;
    v19 = v28;
    v31 = v28;
    v20 = sub_100018A08(v30);
    (*(void (**)(_QWORD *, uint64_t, _QWORD *))(*(v19 - 1) + 16))(v20, v18, v19);
    sub_100009E20((uint64_t)v30, v15, v17);
  }
  v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v23 = v32;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v25 = objc_msgSend(v21, "initWithDomain:code:userInfo:", v22, a3, isa, swift_bridgeObjectRelease(v23).n128_f64[0]);

  swift_errorRelease(a6);
  return v25;
}

id sub_10004843C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMachErrorDomain);
  return sub_10004828C(v6, v7, a1, a2, a3, 0);
}

void *PencilReport.version1ByteCount.unsafeMutableAddressor()
{
  return &static PencilReport.version1ByteCount;
}

uint64_t static PencilReport.version1ByteCount.getter()
{
  return 19;
}

void *PencilReport.version2ByteCount.unsafeMutableAddressor()
{
  return &static PencilReport.version2ByteCount;
}

uint64_t static PencilReport.version2ByteCount.getter()
{
  return 21;
}

void PencilReport.report.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_release(*v1);
  *v1 = a1;
  sub_100005D94();
}

void sub_100048510()
{
  static PencilReport.reportID = 4;
}

char *PencilReport.reportID.unsafeMutableAddressor()
{
  if (qword_100078BE8 != -1)
    swift_once(&qword_100078BE8, sub_100048510);
  return &static PencilReport.reportID;
}

uint64_t static PencilReport.reportID.getter()
{
  if (qword_100078BE8 != -1)
    swift_once(&qword_100078BE8, sub_100048510);
  return static PencilReport.reportID;
}

void sub_1000485A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100008414(&qword_100077B60);
  v1 = swift_allocObject(v0, 184, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10005A650;
  *(_DWORD *)(v1 + 32) = 34147589;
  *(_WORD *)(v1 + 36) = 417;
  *(_BYTE *)(v1 + 38) = -123;
  if (qword_100078BE8 != -1)
    swift_once(&qword_100078BE8, sub_100048510);
  *(_BYTE *)(v1 + 39) = static PencilReport.reportID;
  *(_OWORD *)(v1 + 40) = xmmword_10005A660;
  *(_OWORD *)(v1 + 56) = xmmword_10005A670;
  *(_OWORD *)(v1 + 72) = xmmword_10005A680;
  *(_OWORD *)(v1 + 88) = xmmword_10005A690;
  *(_OWORD *)(v1 + 104) = xmmword_10005A6A0;
  *(_OWORD *)(v1 + 120) = xmmword_10005A6B0;
  *(_OWORD *)(v1 + 136) = xmmword_10005A6C0;
  *(_OWORD *)(v1 + 152) = xmmword_10005A6D0;
  *(_OWORD *)(v1 + 168) = xmmword_10005A6E0;
  sub_10003F650(v1);
  static PencilReport.reportDescriptor = v2;
  unk_10007C990 = v3;
}

uint64_t *PencilReport.reportDescriptor.unsafeMutableAddressor()
{
  if (qword_100078BF0 != -1)
    swift_once(&qword_100078BF0, sub_1000485A0);
  return &static PencilReport.reportDescriptor;
}

void static PencilReport.reportDescriptor.getter()
{
  if (qword_100078BF0 != -1)
    swift_once(&qword_100078BF0, sub_1000485A0);
  sub_100009364(static PencilReport.reportDescriptor, unk_10007C990);
  sub_100005D94();
}

void PencilReport.init()()
{
  uint64_t v0;
  uint64_t v1;

  sub_10003F24C();
  sub_100049774();
  v0 = qword_100078BE8;
  swift_retain(v1);
  if (v0 != -1)
    swift_once(&qword_100078BE8, sub_100048510);
  sub_100049868();
  sub_100027240();
  sub_100005D94();
}

uint64_t PencilReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = type metadata accessor for Data.Iterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F24C();
  sub_100049774();
  v10 = v9;
  swift_retain(v9);
  v11 = Data.subscript.getter(0);
  if (qword_100078BE8 != -1)
    swift_once(&qword_100078BE8, sub_100048510);
  if (static PencilReport.reportID == v11 && Data.count.getter(a1, a2) >= 19)
  {
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 24);
    sub_100027240();
    sub_100009364(a1, a2);
    Data._copyContents(initializing:)(v8, v12, v13, a1, a2);
    sub_100045A70();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100045A70();
  }
  else
  {
    sub_100045A70();
    swift_release_n(v10, 2);
    return 0;
  }
  return v10;
}

uint64_t PencilReport.init(report:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v9;

  sub_10003F24C();
  sub_100049774();
  v3 = v2;
  v4 = HIDReport.subscript.getter(0);
  v5 = qword_100078BE8;
  swift_retain(v3);
  if (v5 != -1)
    swift_once(&qword_100078BE8, sub_100048510);
  if (static PencilReport.reportID == v4 && (v6 = *(_QWORD *)(v3 + 24), *(_QWORD *)(a1 + 24) >= v6))
  {
    v7 = *(_BYTE **)(v3 + 16);
    sub_100048284();
    sub_100047F84(&v9, v7, v6);
    swift_release(v9);
  }
  else
  {
    sub_100048284();
    swift_release(a1);
    sub_100048284();
    return 0;
  }
  return v3;
}

Swift::Void __swiftcall PencilReport.copyOnWrite()()
{
  uint64_t *v0;
  uint64_t v1;

  if ((sub_100049878() & 1) != 0)
  {
    sub_10000C644();
  }
  else
  {
    sub_10003F24C();
    sub_100049838();
    sub_100049844();
    v1 = *v0;
    *v0 = (uint64_t)v0;
    swift_release(v1);
  }
}

void PencilReport.x.getter()
{
  sub_1000497B8();
  sub_100049750();
}

void PencilReport.x.setter(double a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Double v7;
  double v8;
  double v9;
  double v10;

  if ((sub_100049878() & 1) == 0)
  {
    sub_10003F24C();
    sub_100049838();
    sub_100049844();
    sub_1000498E8();
  }
  v2 = 0.0;
  if (a1 > 0.0)
    v2 = a1;
  sub_100049850(v2);
  v3 = sub_1000497F4();
  sub_1000462F0(v4, v5, v6, v3, v7, v8, v9, v10);
  sub_100048088();
}

void PencilReport.x.modify(uint64_t a1)
{
  uint64_t v1;
  char v2;

  sub_100049764(a1);
  sub_1000497B8();
  sub_1000498B8(v1, v2);
  sub_100049750();
}

void sub_100048AD8(double *a1)
{
  PencilReport.x.setter(*a1);
  sub_100005D94();
}

void PencilReport.y.getter()
{
  sub_10004979C();
  sub_100049750();
}

void PencilReport.y.setter(double a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Double v7;
  double v8;
  double v9;
  double v10;

  if ((sub_100049878() & 1) == 0)
  {
    sub_10003F24C();
    sub_100049838();
    sub_100049844();
    sub_1000498E8();
  }
  v2 = 0.0;
  if (a1 > 0.0)
    v2 = a1;
  sub_100049850(v2);
  v3 = sub_100049810();
  sub_1000462F0(v4, v5, v6, v3, v7, v8, v9, v10);
  sub_100048088();
}

void PencilReport.y.modify(uint64_t a1)
{
  uint64_t v1;
  char v2;

  sub_100049764(a1);
  sub_10004979C();
  sub_1000498B8(v1, v2);
  sub_100049750();
}

void sub_100048BC4(double *a1)
{
  PencilReport.y.setter(*a1);
  sub_100005D94();
}

void PencilReport.isInRange.getter()
{
  HIDReport.getValue(_:at:bit:)(5, 0);
  sub_100005D94();
}

void PencilReport.isInRange.setter()
{
  char v0;
  Swift::Int v1;

  sub_1000498B0();
  v0 = sub_100049898();
  HIDReport.setValue(_:at:bit:)(v0, v1, 0);
  sub_100005D94();
}

void PencilReport.isInRange.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000497D4(a1);
  *(_BYTE *)(v1 + 8) = HIDReport.getValue(_:at:bit:)(v2, 0) & 1;
  sub_100005D94();
}

void sub_100048C64(uint64_t a1, uint64_t a2)
{
  sub_100048D7C(a1, a2, 0);
}

void PencilReport.tipSwitch.getter()
{
  HIDReport.getValue(_:at:bit:)(5, 1uLL);
  sub_100005D94();
}

void PencilReport.tipSwitch.setter()
{
  char v0;
  Swift::Int v1;

  sub_1000498B0();
  v0 = sub_100049898();
  HIDReport.setValue(_:at:bit:)(v0, v1, 1);
  sub_100005D94();
}

void PencilReport.tipSwitch.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000497D4(a1);
  *(_BYTE *)(v1 + 8) = HIDReport.getValue(_:at:bit:)(v2, 1uLL) & 1;
  sub_100005D94();
}

void sub_100048CEC(uint64_t a1, uint64_t a2)
{
  sub_100048D7C(a1, a2, 1);
}

void PencilReport.barrelSwitch.getter()
{
  HIDReport.getValue(_:at:bit:)(5, 2uLL);
  sub_100005D94();
}

void PencilReport.barrelSwitch.setter()
{
  char v0;
  Swift::Int v1;

  sub_1000498B0();
  v0 = sub_100049898();
  HIDReport.setValue(_:at:bit:)(v0, v1, 2);
  sub_100005D94();
}

void PencilReport.barrelSwitch.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1000497D4(a1);
  *(_BYTE *)(v1 + 8) = HIDReport.getValue(_:at:bit:)(v2, 2uLL) & 1;
  sub_100005D94();
}

void sub_100048D74(uint64_t a1, uint64_t a2)
{
  sub_100048D7C(a1, a2, 2);
}

void sub_100048D7C(uint64_t a1, uint64_t a2, Swift::Int a3)
{
  char v4;

  v4 = *(_BYTE *)(a1 + 8);
  PencilReport.copyOnWrite()();
  HIDReport.setValue(_:at:bit:)(v4, 5, a3);
  sub_10000C644();
}

void PencilReport.tipPressure.getter()
{
  unsigned __int8 v0;

  v0 = HIDReport.getValue(_:at:)(6);
  sub_1000498F4(v0);
  sub_100005D94();
}

void PencilReport.tipPressure.setter()
{
  Swift::Int8 v0;

  sub_1000498A8();
  sub_10004978C();
  sub_1000498CC(v0);
  sub_100049750();
}

void PencilReport.tipPressure.modify(uint64_t a1)
{
  double *v1;
  unsigned __int8 v2;

  sub_100049764(a1);
  v2 = HIDReport.getValue(_:at:)(6);
  *v1 = sub_1000498F4(v2);
  sub_100005D94();
}

void sub_100048E38()
{
  Swift::Int8 v0;

  sub_10004982C();
  sub_10004978C();
  sub_1000498CC(v0);
  sub_100049750();
}

void PencilReport.tiltX.getter()
{
  char v0;

  v0 = HIDReport.subscript.getter(7);
  sub_100049780(v0);
  sub_100005D94();
}

void PencilReport.tiltX.setter()
{
  Swift::Int8 v0;

  sub_1000498A8();
  sub_100049740();
  sub_100049914(v0);
  sub_100049750();
}

void PencilReport.tiltX.modify(uint64_t a1)
{
  double *v1;
  char v2;

  sub_100049764(a1);
  v2 = HIDReport.subscript.getter(7);
  *v1 = sub_100049780(v2);
  sub_100005D94();
}

void sub_100048EE0()
{
  Swift::Int8 v0;

  sub_10004982C();
  sub_100049740();
  sub_100049914(v0);
  sub_100049750();
}

void PencilReport.tiltY.getter()
{
  char v0;

  v0 = HIDReport.subscript.getter(8);
  sub_100049780(v0);
  sub_100005D94();
}

void PencilReport.tiltY.setter()
{
  Swift::Int8 v0;

  sub_1000498A8();
  sub_100049740();
  sub_10004990C(v0);
  sub_100049750();
}

void PencilReport.tiltY.modify(uint64_t a1)
{
  double *v1;
  char v2;

  sub_100049764(a1);
  v2 = HIDReport.subscript.getter(8);
  *v1 = sub_100049780(v2);
  sub_100005D94();
}

void sub_100048F88()
{
  Swift::Int8 v0;

  sub_10004982C();
  sub_100049740();
  sub_10004990C(v0);
  sub_100049750();
}

void PencilReport.scanTime.getter()
{
  HIDReport.getValue(_:at:)(9);
  sub_100005D94();
}

void PencilReport.scanTime.setter(Swift::UInt16 a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  if ((sub_100049878() & 1) == 0)
  {
    v4 = *v1;
    sub_10003F24C();
    HIDReport.__allocating_init(count:)(*(_QWORD *)(v4 + 24));
    v6 = v5;
    HIDReport.copy(from:)(v4);
    v7 = *v2;
    *v2 = v6;
    swift_release(v7);
  }
  HIDReport.setValue(_:at:)(a1, 9);
  sub_10000C644();
}

void PencilReport.scanTime.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_WORD *)(a1 + 8) = HIDReport.getValue(_:at:)(9);
  sub_100005D94();
}

void sub_10004906C(uint64_t a1)
{
  PencilReport.scanTime.setter(*(_WORD *)(a1 + 8));
  sub_100005D94();
}

void PencilReport.hostTime.getter()
{
  HIDReport.getValue(_:at:)(0xBuLL);
  sub_100005D94();
}

void PencilReport.hostTime.setter()
{
  PencilReport.copyOnWrite()();
  sub_100049888();
  sub_100005D94();
}

void PencilReport.hostTime.modify(uint64_t a1)
{
  unint64_t *v1;

  sub_100049764(a1);
  *v1 = HIDReport.getValue(_:at:)(0xBuLL);
  sub_100005D94();
}

void sub_1000490FC()
{
  PencilReport.copyOnWrite()();
  sub_100049888();
  sub_100005D94();
}

double PencilReport.roll.getter(uint64_t a1)
{
  unsigned __int16 v1;
  double result;

  if (*(uint64_t *)(a1 + 24) >= 21)
  {
    v1 = HIDReport.getValue(_:at:)(19);
    return sub_100049900(v1);
  }
  return result;
}

void PencilReport.roll.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  double v5;
  Swift::UInt16 v6;

  if (*(uint64_t *)(*(_QWORD *)v2 + 24) >= 21)
  {
    PencilReport.copyOnWrite()();
    v5 = *(double *)&a1;
    if ((a2 & 1) != 0)
      v5 = 0.0;
    sub_1000497E8(v5);
    sub_1000498E0(v6);
  }
  sub_10000C644();
}

void (*PencilReport.roll.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  unsigned __int16 v5;

  *(_QWORD *)(a1 + 16) = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v4 = 0.0;
  if (v3 >= 21)
  {
    v5 = HIDReport.getValue(_:at:)(19);
    v4 = sub_100049900(v5);
  }
  *(double *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v3 < 21;
  return sub_100049218;
}

void sub_100049218(uint64_t a1, char a2)
{
  int v2;
  double v3;
  double v4;
  Swift::UInt16 v5;

  if ((a2 & 1) != 0)
  {
    PencilReport.roll.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  }
  else if (*(uint64_t *)(**(_QWORD **)(a1 + 16) + 24) >= 21)
  {
    v2 = *(unsigned __int8 *)(a1 + 8);
    v3 = *(double *)a1;
    PencilReport.copyOnWrite()();
    v4 = 0.0;
    if (!v2)
      v4 = v3;
    sub_1000497E8(v4);
    sub_1000498E0(v5);
  }
  sub_100049750();
}

void static SqueezeGestureReport.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_10003F24C();
  static HIDReport.== infix(_:_:)(a1, a2);
  sub_100005D94();
}

void sub_1000492B8(uint64_t *a1, uint64_t *a2)
{
  static SqueezeGestureReport.__derived_struct_equals(_:_:)(*a1, *a2);
}

void PencilReport.version1Report.getter(uint64_t a1)
{
  sub_10003F24C();
  HIDReport.__allocating_init(count:)(19);
  HIDReport.copy(from:)(a1);
  sub_100005D94();
}

unint64_t *sub_1000492FC()
{
  unint64_t *v0;
  unint64_t *result;

  v0 = (unint64_t *)swift_slowAlloc(8, -1);
  result = sub_100049718(v0, 0.0);
  qword_100078DF8 = (uint64_t)v0;
  return result;
}

unint64_t *static PencilReport.setInterfaceOrientation(_:)(unint64_t *result)
{
  double v1;

  if ((unint64_t)result - 1 <= 3)
  {
    v1 = dbl_10005A780[(_QWORD)result - 1];
    if (qword_100078BF8 != -1)
      swift_once(&qword_100078BF8, sub_1000492FC);
    return sub_100049718((unint64_t *)qword_100078DF8, v1);
  }
  return result;
}

void sub_10004939C(uint64_t a1)
{
  uint64_t *v1;
  Swift::UInt64 TimeStamp;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double DoubleValue;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  Swift::Bool v19;
  Swift::Bool v20;
  uint64_t v21;
  double v22;
  double v23;
  Swift::Int8 v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  Swift::Int8 v33;
  uint64_t v34;
  Swift::Int8 v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  Swift::UInt16 v40;

  if (qword_100078BE8 != -1)
    swift_once(&qword_100078BE8, sub_100048510);
  sub_100049868();
  TimeStamp = IOHIDEventGetTimeStamp(a1);
  IOHIDEventGetDoubleValue(a1, 720896);
  sub_10004975C();
  v4 = sub_1000497F4();
  sub_1000462F0(v5, v6, v7, v4, 32767.0, v8, v9, v10);
  DoubleValue = IOHIDEventGetDoubleValue(a1, 720897);
  sub_10004975C();
  v12 = sub_100049810();
  sub_1000462F0(v13, v14, v15, v12, 32767.0, v16, v17, v18);
  v19 = IOHIDEventGetIntegerValue(a1, 720904) != 0;
  sub_10004975C();
  HIDReport.setValue(_:at:bit:)(v19, 5, 0);
  v20 = IOHIDEventGetIntegerValue(a1, 720905) != 0;
  sub_10004975C();
  HIDReport.setValue(_:at:bit:)(v20, 5, 1);
  sub_100049880(v21, 720906);
  v23 = v22 / 500.0;
  sub_10004975C();
  sub_10004978C();
  sub_1000498CC(v24);
  HostTime.nanoseconds.getter();
  v26 = (double)v25 * 0.00001;
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v26 < 9.22337204e18)
  {
    v27 = (uint64_t)v26;
    sub_10004975C();
    HIDReport.setValue(_:at:)(v27, 9);
    sub_10004975C();
    HIDReport.setValue(_:at:)(TimeStamp, 11);
    v29 = sub_100049880(v28, 720911);
    v23 = v30;
    sub_100049880(v29, 720912);
    DoubleValue = v31;
    if (qword_100078BF8 == -1)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  swift_once(&qword_100078BF8, sub_1000492FC);
LABEL_7:
  v32 = DoubleValue + sub_100049734((unint64_t *)qword_100078DF8);
  sin(v23);
  __sincos_stret(v32);
  sub_10004975C();
  sub_1000421B4();
  sub_100049914(v33);
  sub_10004975C();
  v34 = *v1;
  sub_100049740();
  sub_10004990C(v35);
  sub_100049880(v36, 720919);
  if (*(uint64_t *)(v34 + 24) > 20)
  {
    v38 = v37 / 3.14159265;
    if (v38 >= 0.0)
      v39 = v38;
    else
      v39 = v38 + 1.0;
    sub_10004975C();
    sub_1000497E8(v39);
    sub_1000498E0(v40);
  }
}

void PencilReport.init(digitizerEvent:)(void *a1)
{
  sub_10003F24C();
  sub_100049774();
  sub_1000498D4();

  sub_100018E8C();
}

void PencilReport.init(hidEvent:)(void *a1)
{
  id v2;

  sub_10003F24C();
  sub_100049774();
  v2 = a1;
  if (IOHIDEventGetType() == 11)
    sub_1000498D4();
  else
    sub_100027240();

  sub_100018E8C();
}

unint64_t *sub_100049718(unint64_t *result, double a2)
{
  atomic_store(*(unint64_t *)&a2, result);
  return result;
}

ValueMetadata *type metadata accessor for PencilReport()
{
  return &type metadata for PencilReport;
}

double sub_100049734(unint64_t *a1)
{
  return COERCE_DOUBLE(atomic_load(a1));
}

void sub_100049740()
{
  sub_1000421B4();
}

void sub_10004975C()
{
  PencilReport.copyOnWrite()();
}

uint64_t sub_100049764(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(result + 8) = v1;
  return result;
}

void sub_100049774()
{
  HIDReport.__allocating_init(count:)(21);
}

double sub_100049780(char a1)
{
  return sub_100041AEC(a1, 166, 90);
}

void sub_10004978C()
{
  double v0;

  sub_100041DD4(v0, 0, 0xFFu);
}

void sub_10004979C()
{
  sub_100046128();
}

void sub_1000497B8()
{
  sub_100046128();
}

uint64_t sub_1000497D4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = v1;
  return 5;
}

void sub_1000497E8(double a1)
{
  sub_100041E6C(a1, 0, 0x168u);
}

double sub_1000497F4()
{
  return 0.0;
}

double sub_100049810()
{
  return 0.0;
}

void sub_10004982C()
{
  PencilReport.copyOnWrite()();
}

void sub_100049838()
{
  uint64_t v0;

  HIDReport.__allocating_init(count:)(*(_QWORD *)(v0 + 24));
}

void sub_100049844()
{
  uint64_t v0;

  HIDReport.copy(from:)(v0);
}

double sub_100049850(double result)
{
  if (result > 1.0)
    return 1.0;
  return result;
}

void sub_100049868()
{
  HIDReport.subscript.setter(static PencilReport.reportID, 0);
}

uint64_t sub_100049878()
{
  _QWORD *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t sub_100049880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return IOHIDEventGetDoubleValue(v2, a2);
}

void sub_100049888()
{
  Swift::UInt64 v0;

  HIDReport.setValue(_:at:)(v0, 11);
}

uint64_t sub_100049898()
{
  uint64_t v0;

  return v0;
}

double sub_1000498A8()
{
  double result;

  PencilReport.copyOnWrite()();
  return result;
}

void sub_1000498B0()
{
  PencilReport.copyOnWrite()();
}

uint64_t sub_1000498B8(uint64_t result, char a2)
{
  double *v2;
  double v3;
  double v4;

  v4 = *(double *)&result;
  if ((a2 & 1) != 0)
    v4 = v3;
  *v2 = v4;
  return result;
}

void sub_1000498CC(Swift::Int8 a1)
{
  HIDReport.subscript.setter(a1, 6);
}

void sub_1000498D4()
{
  uint64_t v0;

  sub_10004939C(v0);
}

void sub_1000498E0(Swift::UInt16 a1)
{
  HIDReport.setValue(_:at:)(a1, 19);
}

uint64_t sub_1000498E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *v0 = v1;
  return swift_release(v2);
}

double sub_1000498F4(unsigned __int8 a1)
{
  return sub_10004172C(a1);
}

double sub_100049900(unsigned __int16 a1)
{
  return sub_10004173C(a1);
}

void sub_10004990C(Swift::Int8 a1)
{
  HIDReport.setValue(_:at:)(a1, 8);
}

void sub_100049914(Swift::Int8 a1)
{
  HIDReport.setValue(_:at:)(a1, 7);
}

void sub_10004991C()
{
  static SqueezeGestureReport.reportID = 7;
}

char *SqueezeGestureReport.reportID.unsafeMutableAddressor()
{
  if (qword_100078C00 != -1)
    swift_once(&qword_100078C00, sub_10004991C);
  return &static SqueezeGestureReport.reportID;
}

uint64_t static SqueezeGestureReport.reportID.getter()
{
  if (qword_100078C00 != -1)
    swift_once(&qword_100078C00, sub_10004991C);
  return static SqueezeGestureReport.reportID;
}

void sub_1000499AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100008414(&qword_100077B60);
  v1 = swift_allocObject(v0, 115, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10005A7A0;
  *(_QWORD *)(v1 + 32) = 0x8501A14109FF1A06;
  if (qword_100078C00 != -1)
    swift_once(&qword_100078C00, sub_10004991C);
  *(_BYTE *)(v1 + 40) = static SqueezeGestureReport.reportID;
  *(_OWORD *)(v1 + 41) = xmmword_10005A7B0;
  *(_OWORD *)(v1 + 57) = xmmword_10005A7C0;
  *(_OWORD *)(v1 + 73) = xmmword_10005A7D0;
  *(_OWORD *)(v1 + 89) = xmmword_10005A7E0;
  *(_QWORD *)(v1 + 105) = 0x2811495087500FFLL;
  *(_WORD *)(v1 + 113) = -16192;
  sub_10003F650(v1);
  static SqueezeGestureReport.reportDescriptor = v2;
  *(_QWORD *)algn_10007C9A8 = v3;
}

uint64_t *SqueezeGestureReport.reportDescriptor.unsafeMutableAddressor()
{
  if (qword_100078C08 != -1)
    swift_once(&qword_100078C08, sub_1000499AC);
  return &static SqueezeGestureReport.reportDescriptor;
}

void static SqueezeGestureReport.reportDescriptor.getter()
{
  if (qword_100078C08 != -1)
    swift_once(&qword_100078C08, sub_1000499AC);
  sub_100009364(static SqueezeGestureReport.reportDescriptor, *(unint64_t *)algn_10007C9A8);
  sub_100005D94();
}

uint64_t SqueezeGestureReport.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10003F24C();
  sub_10004A4B8();
  v1 = v0;
  v2 = qword_100078C00;
  swift_retain(v0);
  if (v2 != -1)
    swift_once(&qword_100078C00, sub_10004991C);
  HIDReport.subscript.setter(static SqueezeGestureReport.reportID, 0);
  sub_100027240();
  return v1;
}

uint64_t SqueezeGestureReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for Data.Iterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F24C();
  sub_10004A4B8();
  v10 = v9;
  swift_retain(v9);
  v11 = Data.subscript.getter(0);
  if (qword_100078C00 != -1)
    swift_once(&qword_100078C00, sub_10004991C);
  if (static SqueezeGestureReport.reportID == v11
    && (v12 = Data.count.getter(a1, a2), v13 = *(_QWORD *)(v10 + 24), v12 >= v13))
  {
    v14 = *(_QWORD *)(v10 + 16);
    sub_100027240();
    sub_100009364(a1, a2);
    Data._copyContents(initializing:)(v8, v14, v13, a1, a2);
    sub_100045A70();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100045A70();
  }
  else
  {
    sub_100045A70();
    sub_100027240();
    sub_100027240();
    return 0;
  }
  return v10;
}

uint64_t SqueezeGestureReport.init(report:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v9;

  sub_10003F24C();
  sub_10004A4B8();
  v3 = v2;
  v4 = HIDReport.subscript.getter(0);
  v5 = qword_100078C00;
  swift_retain(v3);
  if (v5 != -1)
    swift_once(&qword_100078C00, sub_10004991C);
  if (static SqueezeGestureReport.reportID == v4 && (v6 = *(_QWORD *)(v3 + 24), *(_QWORD *)(a1 + 24) >= v6))
  {
    v7 = *(_BYTE **)(v3 + 16);
    sub_100048284();
    sub_100047F84(&v9, v7, v6);
    swift_release(v9);
  }
  else
  {
    sub_100048284();
    swift_release(a1);
    sub_100048284();
    return 0;
  }
  return v3;
}

void SqueezeGestureReport.phase.getter()
{
  Swift::UInt16 v0;

  v0 = sub_100045EF0();
  HIDEvent.Phase.init(rawValue:)(v0);
  sub_100005D94();
}

void SqueezeGestureReport.phase.setter(char a1)
{
  sub_10004A548(a1);
  sub_100005D94();
}

void SqueezeGestureReport.phase.modify(uint64_t a1, uint64_t a2)
{
  Swift::UInt16 v3;
  SidecarHID::HIDEvent::Phase_optional v4;
  SidecarHID::HIDEvent::Phase value;

  *(_QWORD *)a1 = a2;
  v3 = sub_100045EF0();
  v4.value = HIDEvent.Phase.init(rawValue:)(v3).value;
  if (v4.value == SidecarHID_HIDEvent_Phase_unknownDefault)
    value = SidecarHID_HIDEvent_Phase_none;
  else
    value = v4.value;
  *(_BYTE *)(a1 + 8) = value;
  sub_100005D94();
}

void sub_100049E44(uint64_t a1)
{
  sub_10004A548(*(char *)(a1 + 8));
  sub_100005D94();
}

uint64_t SqueezeGestureReport.hostTime.getter()
{
  return sub_100045FD8(2);
}

void SqueezeGestureReport.hostTime.setter(Swift::UInt64 a1)
{
  HIDReport.setValue(_:at:)(a1, 2);
  sub_100005D94();
}

void SqueezeGestureReport.hostTime.modify(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_10004A4C4(a1, a2);
  *v2 = sub_100045FD8(2);
  sub_100005D94();
}

void sub_100049EE4(Swift::UInt64 *a1)
{
  HIDReport.setValue(_:at:)(*a1, 2);
  sub_100005D94();
}

void SqueezeGestureReport.stage.getter()
{
  _s10SidecarHID9HIDReportCys5UInt8VSicig_0(10);
  sub_100005D94();
}

void SqueezeGestureReport.stage.setter(Swift::Int8 a1)
{
  HIDReport.setValue(_:at:)(a1, 10);
  sub_100005D94();
}

void SqueezeGestureReport.stage.modify(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = _s10SidecarHID9HIDReportCys5UInt8VSicig_0(10);
  sub_100005D94();
}

void sub_100049F7C(uint64_t a1)
{
  HIDReport.setValue(_:at:)(*(_BYTE *)(a1 + 8), 10);
  sub_100005D94();
}

void SqueezeGestureReport.transition.getter()
{
  _s10SidecarHID9HIDReportCys5UInt8VSicig_0(11);
  sub_100005D94();
}

void SqueezeGestureReport.transition.setter(Swift::Int8 a1)
{
  HIDReport.setValue(_:at:)(a1, 11);
  sub_100005D94();
}

void SqueezeGestureReport.transition.modify(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = _s10SidecarHID9HIDReportCys5UInt8VSicig_0(11);
  sub_100005D94();
}

void sub_10004A018(uint64_t a1)
{
  HIDReport.setValue(_:at:)(*(_BYTE *)(a1 + 8), 11);
  sub_100005D94();
}

void SqueezeGestureReport.nextThreshold.getter()
{
  uint64_t v0;
  char v1;

  sub_10004A508();
  sub_100046220();
  sub_10004A4A8(v0, v1);
  sub_100049750();
}

void SqueezeGestureReport.nextThreshold.setter()
{
  double v0;
  double v1;
  char v2;
  char v3;
  double v4;
  uint64_t v5;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  v4 = sub_10004810C(v0);
  sub_10004A438(v5, v4, 4294967300.0);
  sub_100005D94();
}

void SqueezeGestureReport.nextThreshold.modify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  sub_10004A4C4(a1, a2);
  sub_10004A508();
  sub_10004A540();
  sub_1000498B8(v2, v3);
  sub_100049750();
}

void sub_10004A0D8(uint64_t a1)
{
  double v1;
  double v2;
  char v3;
  char v4;
  double v5;
  uint64_t v6;

  v1 = sub_10004A424(a1);
  if (!(!v4 & v3))
    v1 = v2;
  v5 = sub_10004810C(v1);
  sub_10004A438(v6, v5, 4294967300.0);
  sub_100005D94();
}

void SqueezeGestureReport.pressedThreshold.getter()
{
  uint64_t v0;
  char v1;

  sub_10004A4EC();
  sub_100046220();
  sub_10004A4A8(v0, v1);
  sub_100049750();
}

void SqueezeGestureReport.pressedThreshold.setter()
{
  double v0;
  double v1;
  char v2;
  char v3;
  double v4;
  uint64_t v5;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  v4 = sub_10004810C(v0);
  sub_10004A48C(v5, v4, 4294967300.0);
  sub_100005D94();
}

void SqueezeGestureReport.pressedThreshold.modify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  sub_10004A4C4(a1, a2);
  sub_10004A4EC();
  sub_10004A540();
  sub_1000498B8(v2, v3);
  sub_100049750();
}

void sub_10004A1A0(uint64_t a1)
{
  double v1;
  double v2;
  char v3;
  char v4;
  double v5;
  uint64_t v6;

  v1 = sub_10004A424(a1);
  if (!(!v4 & v3))
    v1 = v2;
  v5 = sub_10004810C(v1);
  sub_10004A48C(v6, v5, 4294967300.0);
  sub_100005D94();
}

void SqueezeGestureReport.releasedThreshold.getter()
{
  uint64_t v0;
  char v1;

  sub_10004A4D0();
  sub_100046220();
  sub_10004A4A8(v0, v1);
  sub_100049750();
}

void SqueezeGestureReport.releasedThreshold.setter()
{
  double v0;
  double v1;
  char v2;
  char v3;
  double v4;
  uint64_t v5;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  v4 = sub_10004810C(v0);
  sub_10004A470(v5, v4, 4294967300.0);
  sub_100005D94();
}

void SqueezeGestureReport.releasedThreshold.modify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  sub_10004A4C4(a1, a2);
  sub_10004A4D0();
  sub_10004A540();
  sub_1000498B8(v2, v3);
  sub_100049750();
}

void sub_10004A268(uint64_t a1)
{
  double v1;
  double v2;
  char v3;
  char v4;
  double v5;
  uint64_t v6;

  v1 = sub_10004A424(a1);
  if (!(!v4 & v3))
    v1 = v2;
  v5 = sub_10004810C(v1);
  sub_10004A470(v6, v5, 4294967300.0);
  sub_100005D94();
}

void SqueezeGestureReport.normalizedForce.getter()
{
  uint64_t v0;
  char v1;

  sub_10004A524();
  sub_100046220();
  sub_10004A4A8(v0, v1);
  sub_100049750();
}

void SqueezeGestureReport.normalizedForce.setter()
{
  double v0;
  double v1;
  char v2;
  char v3;
  double v4;
  uint64_t v5;

  sub_100048230();
  if (!(!v3 & v2))
    v0 = v1;
  v4 = sub_10004810C(v0);
  sub_10004A454(v5, v4, 4294967300.0);
  sub_100005D94();
}

void SqueezeGestureReport.normalizedForce.modify(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  sub_10004A4C4(a1, a2);
  sub_10004A524();
  sub_10004A540();
  sub_1000498B8(v2, v3);
  sub_100049750();
}

void sub_10004A330(uint64_t a1)
{
  double v1;
  double v2;
  char v3;
  char v4;
  double v5;
  uint64_t v6;

  v1 = sub_10004A424(a1);
  if (!(!v4 & v3))
    v1 = v2;
  v5 = sub_10004810C(v1);
  sub_10004A454(v6, v5, 4294967300.0);
  sub_100005D94();
}

double SqueezeGestureReport.normalizedForceVelocity.getter()
{
  int v0;

  v0 = sub_1000460B8();
  return HIDFixed.doubleValue.getter(v0);
}

void SqueezeGestureReport.normalizedForceVelocity.setter(Swift::Double a1)
{
  uint64_t v1;

  *(SidecarHID::HIDFixed_optional *)&v1 = HIDFixed.init(doubleValue:)(a1);
  if ((v1 & 0x100000000) == 0)
    sub_1000462A4();
  sub_100005D94();
}

void SqueezeGestureReport.normalizedForceVelocity.modify(uint64_t a1, uint64_t a2)
{
  double *v2;
  int v3;

  sub_10004A4C4(a1, a2);
  v3 = sub_1000460B8();
  *v2 = HIDFixed.doubleValue.getter(v3);
  sub_100005D94();
}

void sub_10004A3E4(Swift::Double *a1)
{
  uint64_t v1;

  *(SidecarHID::HIDFixed_optional *)&v1 = HIDFixed.init(doubleValue:)(*a1);
  if ((v1 & 0x100000000) == 0)
    sub_1000462A4();
  sub_100005D94();
}

ValueMetadata *type metadata accessor for SqueezeGestureReport()
{
  return &type metadata for SqueezeGestureReport;
}

double sub_10004A424(uint64_t a1)
{
  return *(double *)a1;
}

uint64_t sub_10004A438(uint64_t a1, double a2, Swift::Double a3)
{
  return sub_100046424(a1, 0, 12, 0.0, a3, 0.0, 1.0, 0.0);
}

uint64_t sub_10004A454(uint64_t a1, double a2, Swift::Double a3)
{
  return sub_100046424(a1, 0, 24, 0.0, a3, 0.0, 1.0, 0.0);
}

uint64_t sub_10004A470(uint64_t a1, double a2, Swift::Double a3)
{
  return sub_100046424(a1, 0, 20, 0.0, a3, 0.0, 1.0, 0.0);
}

uint64_t sub_10004A48C(uint64_t a1, double a2, Swift::Double a3)
{
  return sub_100046424(a1, 0, 16, 0.0, a3, 0.0, 1.0, 0.0);
}

double sub_10004A4A8(uint64_t a1, char a2)
{
  double v2;
  double result;

  result = *(double *)&a1;
  if ((a2 & 1) != 0)
    return v2;
  return result;
}

void sub_10004A4B8()
{
  HIDReport.__allocating_init(count:)(32);
}

uint64_t sub_10004A4C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_10004A4D0()
{
  return 20;
}

uint64_t sub_10004A4EC()
{
  return 16;
}

uint64_t sub_10004A508()
{
  return 12;
}

uint64_t sub_10004A524()
{
  return 24;
}

void sub_10004A540()
{
  sub_100046220();
}

uint64_t sub_10004A548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100046284(*(unsigned __int16 *)(v1 + 2 * a1), 1);
}

uint64_t sub_10004A554()
{
  uint64_t result;

  sub_10004A8B8();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000011, 0x8000000100056270, 6580584, 0xE300000000000000);
  qword_100078E00 = result;
  return result;
}

uint64_t sub_10004A5A8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026FA4(v0, qword_100078E08);
  sub_100026E38(v0, (uint64_t)qword_100078E08);
  if (qword_100078C10 != -1)
    swift_once(&qword_100078C10, sub_10004A554);
  return Logger.init(_:)((id)qword_100078E00);
}

void sub_10004A628(char *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_100078C10 != -1)
    swift_once(&qword_100078C10, sub_10004A554);
  v6 = qword_100078E00;
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7) && sub_100036764())
  {
    sub_10004D784(a1, a2, a3);
    if (qword_100078C18 != -1)
      swift_once(&qword_100078C18, sub_10004A5A8);
    v8 = type metadata accessor for Logger(0);
    sub_100026E38(v8, (uint64_t)qword_100078E08);
    v9 = sub_10004A99C();
    v10 = (void *)Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (sub_1000293FC(v11))
    {
      sub_10004A950();
      v12 = sub_10004A980();
      v13 = sub_10004A93C(4.8751e-34);
      v14 = sub_10004A970(v13);
      sub_10004A8F4(v14, v15, v16, v17, v18, v19, v20, v21, v24, v12);
      sub_10004A990();
      sub_10004A928((void *)&_mh_execute_header, v22, v23, "%{public}s");
      sub_10004A960();
      sub_10000F604(v12);
      sub_10000F604((uint64_t)v6);

    }
    else
    {

      sub_10003F28C();
    }
  }
  sub_10004A910();
}

void SidecarHIDDebugLog(_:)(void (*a1)(void))
{
  uint64_t v1;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_100078C10 != -1)
    swift_once(&qword_100078C10, sub_10004A554);
  v3 = qword_100078E00;
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4) && sub_100036764())
  {
    a1();
    if (qword_100078C18 != -1)
      swift_once(&qword_100078C18, sub_10004A5A8);
    v5 = type metadata accessor for Logger(0);
    sub_100026E38(v5, (uint64_t)qword_100078E08);
    v6 = sub_10004A99C();
    v7 = (void *)Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (sub_1000293FC(v8))
    {
      sub_10004A950();
      v9 = sub_10004A980();
      v10 = sub_10004A93C(4.8751e-34);
      v11 = sub_10004A970(v10);
      sub_10004A8F4(v11, v12, v13, v14, v15, v16, v17, v18, v21, v9);
      sub_10004A990();
      sub_10004A928((void *)&_mh_execute_header, v19, v20, "%{public}s");
      sub_10004A960();
      sub_10000F604(v9);
      sub_10000F604(v1);

    }
    else
    {

      sub_10003F28C();
    }
  }
  sub_10004A910();
}

unint64_t sub_10004A8B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100078E20;
  if (!qword_100078E20)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100078E20);
  }
  return result;
}

uint64_t sub_10004A8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a9 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a9, &a10, v10);
}

void sub_10004A928(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10004A93C(float a1)
{
  uint64_t v1;
  float *v2;

  *v2 = a1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10004A950()
{
  return swift_slowAlloc(12, -1);
}

uint64_t sub_10004A960()
{
  uint64_t v0;

  return swift_arrayDestroy(v0, 1);
}

uint64_t sub_10004A970(uint64_t a1, ...)
{
  unint64_t v1;
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return sub_10000EC54(v2, v1, (uint64_t *)va);
}

uint64_t sub_10004A980()
{
  return swift_slowAlloc(32, -1);
}

uint64_t sub_10004A990()
{
  uint64_t v0;

  return swift_bridgeObjectRelease_n(v0, 3);
}

uint64_t sub_10004A99C()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(v0);
}

void sub_10004A9A8()
{
  static TouchReport.reportID = 5;
}

char *TouchReport.reportID.unsafeMutableAddressor()
{
  if (qword_100078C20 != -1)
    swift_once(&qword_100078C20, sub_10004A9A8);
  return &static TouchReport.reportID;
}

uint64_t static TouchReport.reportID.getter()
{
  if (qword_100078C20 != -1)
    swift_once(&qword_100078C20, sub_10004A9A8);
  return static TouchReport.reportID;
}

void sub_10004AA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100008414(&qword_100077B60);
  v1 = swift_allocObject(v0, 198, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10005A890;
  *(_DWORD *)(v1 + 32) = 67702021;
  *(_WORD *)(v1 + 36) = 417;
  *(_BYTE *)(v1 + 38) = -123;
  if (qword_100078C20 != -1)
    swift_once(&qword_100078C20, sub_10004A9A8);
  *(_BYTE *)(v1 + 39) = static TouchReport.reportID;
  *(_OWORD *)(v1 + 40) = xmmword_10005A8A0;
  *(_OWORD *)(v1 + 56) = xmmword_10005A8B0;
  *(_OWORD *)(v1 + 72) = xmmword_10005A8C0;
  *(_OWORD *)(v1 + 88) = xmmword_10005A8D0;
  *(_OWORD *)(v1 + 104) = xmmword_10005A8E0;
  *(_OWORD *)(v1 + 120) = xmmword_10005A8F0;
  *(_OWORD *)(v1 + 136) = xmmword_10005A900;
  *(_OWORD *)(v1 + 152) = xmmword_10005A910;
  *(_OWORD *)(v1 + 168) = xmmword_10005A920;
  *(_QWORD *)(v1 + 184) = 0x7500FF2600151109;
  *(_DWORD *)(v1 + 192) = -2126539512;
  *(_WORD *)(v1 + 196) = -16350;
  sub_10003F650(v1);
  static TouchReport.reportDescriptor = v2;
  unk_10007C9C0 = v3;
}

uint64_t *TouchReport.reportDescriptor.unsafeMutableAddressor()
{
  if (qword_100078C28 != -1)
    swift_once(&qword_100078C28, sub_10004AA38);
  return &static TouchReport.reportDescriptor;
}

void static TouchReport.reportDescriptor.getter()
{
  if (qword_100078C28 != -1)
    swift_once(&qword_100078C28, sub_10004AA38);
  sub_100009364(static TouchReport.reportDescriptor, unk_10007C9C0);
  sub_100005D94();
}

void TouchReport.init()()
{
  uint64_t v0;
  uint64_t v1;

  sub_10003F24C();
  sub_10004817C();
  v0 = qword_100078C20;
  swift_retain(v1);
  if (v0 != -1)
    swift_once(&qword_100078C20, sub_10004A9A8);
  HIDReport.subscript.setter(static TouchReport.reportID, 0);
  sub_100027240();
  sub_100005D94();
}

uint64_t TouchReport.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for Data.Iterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003F24C();
  sub_10004817C();
  v10 = v9;
  swift_retain(v9);
  v11 = Data.subscript.getter(0);
  if (qword_100078C20 != -1)
    swift_once(&qword_100078C20, sub_10004A9A8);
  if (static TouchReport.reportID == v11 && (v12 = Data.count.getter(a1, a2), v13 = *(_QWORD *)(v10 + 24), v12 >= v13))
  {
    v14 = *(_QWORD *)(v10 + 16);
    sub_100027240();
    sub_100009364(a1, a2);
    Data._copyContents(initializing:)(v8, v14, v13, a1, a2);
    sub_100045A70();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100045A70();
  }
  else
  {
    sub_100045A70();
    sub_100027240();
    sub_100027240();
    return 0;
  }
  return v10;
}

uint64_t TouchReport.init(report:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v9;

  sub_10003F24C();
  sub_10004817C();
  v3 = v2;
  v4 = HIDReport.subscript.getter(0);
  v5 = qword_100078C20;
  swift_retain(v3);
  if (v5 != -1)
    swift_once(&qword_100078C20, sub_10004A9A8);
  if (static TouchReport.reportID == v4 && (v6 = *(_QWORD *)(v3 + 24), *(_QWORD *)(a1 + 24) >= v6))
  {
    v7 = *(_BYTE **)(v3 + 16);
    sub_100048284();
    sub_100047F84(&v9, v7, v6);
    swift_release(v9);
  }
  else
  {
    sub_100048284();
    swift_release(a1);
    sub_100048284();
    return 0;
  }
  return v3;
}

uint64_t TouchReport.Contact._offset.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t TouchReport.Contact.mutable.getter(uint64_t a1, unsigned int a2)
{
  return (a2 >> 8) & 1;
}

void *TouchReport.Contact.reportSize.unsafeMutableAddressor()
{
  return &static TouchReport.Contact.reportSize;
}

uint64_t static TouchReport.Contact.reportSize.getter()
{
  return 5;
}

uint64_t TouchReport.Contact.offset.getter(uint64_t a1, unsigned __int8 a2)
{
  return a2;
}

void TouchReport.Contact.init(report:offset:mutable:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = 5 * a2;
  if ((unsigned __int128)(a2 * (__int128)5) >> 64 != (5 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2)
  {
LABEL_6:
    sub_10000C2B8();
    sub_10004B8FC();
LABEL_8:
    sub_10003F274(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
    __break(1u);
    return;
  }
  if ((unint64_t)(v2 + 1) >= 0x100)
  {
    sub_10000C2B8();
    sub_10004B8EC();
    goto LABEL_8;
  }
}

Swift::Void __swiftcall TouchReport.Contact.copyOnWrite()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*((_BYTE *)v0 + 9) & 1) != 0 || (v1 = v0, (swift_isUniquelyReferenced_nonNull_native(*v0) & 1) != 0))
  {
    sub_10000C644();
  }
  else
  {
    v2 = *v0;
    sub_10003F24C();
    HIDReport.__allocating_init(count:)(*(_QWORD *)(v2 + 24));
    v4 = v3;
    HIDReport.copy(from:)(v2);
    v5 = *v1;
    *v1 = v4;
    swift_release(v5);
  }
}

void TouchReport.Contact.x.getter()
{
  char v0;

  sub_10004B8B4();
  if ((v0 & 1) != 0)
    __break(1u);
}

void TouchReport.Contact.x.setter(double a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  TouchReport.Contact.copyOnWrite()();
  v2 = 0.0;
  if (a1 > 0.0)
    v2 = a1;
  v3 = sub_10004B930(v2);
  sub_10004B90C(v4, v3, 32767.0, v5, v6);
  sub_100049750();
}

void TouchReport.Contact.x.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  a1[1] = v1;
  sub_10004B8B4();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = v3;
    sub_100005D94();
  }
}

void sub_10004B08C(double *a1)
{
  TouchReport.Contact.x.setter(*a1);
  sub_100005D94();
}

void TouchReport.Contact.y.getter()
{
  char v0;

  sub_10004B8B4();
  if ((v0 & 1) != 0)
    __break(1u);
}

void TouchReport.Contact.y.setter(double a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  TouchReport.Contact.copyOnWrite()();
  v2 = 0.0;
  if (a1 > 0.0)
    v2 = a1;
  v3 = sub_10004B930(v2);
  sub_10004B90C(v4, v3, 32767.0, v5, v6);
  sub_100049750();
}

void TouchReport.Contact.y.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  a1[1] = v1;
  sub_10004B8B4();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = v3;
    sub_100005D94();
  }
}

void sub_10004B178(double *a1)
{
  TouchReport.Contact.y.setter(*a1);
  sub_100005D94();
}

void TouchReport.Contact.index.getter(uint64_t a1, unsigned __int8 a2)
{
  sub_10004B924(a1, a2);
  sub_100005D94();
}

void TouchReport.Contact.index.setter(char a1)
{
  char v2;

  TouchReport.Contact.copyOnWrite()();
  v2 = sub_10004B8C8();
  sub_10004B95C(v2 & 0xE0 | a1 & 0x1F);
  sub_10000C644();
}

void TouchReport.Contact.index.modify(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_10004B8DC() & 0x1F;
  sub_100005D94();
}

void sub_10004B214(_QWORD *a1)
{
  TouchReport.Contact.index.setter(*a1);
  sub_100005D94();
}

void TouchReport.Contact.isInRange.getter(uint64_t a1, unsigned __int8 a2)
{
  sub_10004B924(a1, a2);
  sub_100005D94();
}

void TouchReport.Contact.isInRange.setter(char a1)
{
  char v2;
  char v3;

  TouchReport.Contact.copyOnWrite()();
  v2 = sub_10004B8C8();
  if ((a1 & 1) != 0)
    v3 = 0x80;
  else
    v3 = 0;
  sub_10004B95C(v3 & 0x80 | v2 & 0x7F);
  sub_10000C644();
}

void TouchReport.Contact.isInRange.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (sub_10004B8DC() & 0x80) != 0;
  sub_100005D94();
}

void sub_10004B2BC(uint64_t a1)
{
  TouchReport.Contact.isInRange.setter(*(_BYTE *)(a1 + 8));
  sub_100005D94();
}

void TouchReport.Contact.isTouching.getter(uint64_t a1, unsigned __int8 a2)
{
  sub_10004B924(a1, a2);
  sub_100005D94();
}

void TouchReport.Contact.isTouching.setter(char a1)
{
  char v2;
  char v3;

  TouchReport.Contact.copyOnWrite()();
  v2 = sub_10004B8C8();
  if ((a1 & 1) != 0)
    v3 = 64;
  else
    v3 = 0;
  sub_10004B95C(v2 & 0xBF | v3);
  sub_10000C644();
}

void TouchReport.Contact.isTouching.modify(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = (sub_10004B8DC() & 0x40) != 0;
  sub_100005D94();
}

void sub_10004B368(uint64_t a1)
{
  TouchReport.Contact.isTouching.setter(*(_BYTE *)(a1 + 8));
  sub_100005D94();
}

void TouchReport.mutableContact(at:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  sub_10004B948();
  if (!v2)
  {
    __break(1u);
LABEL_6:
    sub_10000C2B8();
    sub_10004B8FC();
    goto LABEL_8;
  }
  if (v1 <= -2)
    goto LABEL_6;
  if ((unint64_t)(v1 + 1) < 0x100)
  {
    swift_retain(v0);
    sub_100018D38();
    return;
  }
  sub_10000C2B8();
  sub_10004B8EC();
LABEL_8:
  sub_10003F274(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  __break(1u);
}

void TouchReport.contact(at:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  sub_10004B948();
  if (!v2)
  {
    __break(1u);
LABEL_6:
    sub_10000C2B8();
    sub_10004B8FC();
    goto LABEL_8;
  }
  if (v1 <= -2)
    goto LABEL_6;
  if ((unint64_t)(v1 + 1) < 0x100)
  {
    swift_retain(v0);
    sub_100018D38();
    return;
  }
  sub_10000C2B8();
  sub_10004B8EC();
LABEL_8:
  sub_10003F274(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  __break(1u);
}

void TouchReport.contacts.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100008414(&qword_100078E28);
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100058980;
  *(_QWORD *)(v3 + 32) = a1;
  *(_WORD *)(v3 + 40) = 1;
  *(_QWORD *)(v3 + 48) = a1;
  *(_WORD *)(v3 + 56) = 6;
  swift_retain_n(a1, 2);
  sub_100005D94();
}

void TouchReport.contactCount.getter()
{
  _s10SidecarHID9HIDReportCys5UInt8VSicig_0(11);
  sub_100005D94();
}

void TouchReport.contactCount.setter(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if ((a1 & 0x8000000000000000) != 0)
  {
    sub_10000C2B8();
    sub_10004B8FC();
  }
  else
  {
    if (a1 < 0x100)
    {
      HIDReport.setValue(_:at:)(a1, 11);
      return;
    }
    sub_10000C2B8();
    sub_10004B8EC();
  }
  sub_10003F274(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  __break(1u);
}

void TouchReport.contactCount.modify(_QWORD *a1, uint64_t a2)
{
  a1[1] = a2;
  *a1 = _s10SidecarHID9HIDReportCys5UInt8VSicig_0(11);
  sub_100005D94();
}

void sub_10004B610(unint64_t *a1)
{
  TouchReport.contactCount.setter(*a1);
}

void TouchReport.scanTime.getter()
{
  sub_100045EF0();
  sub_100005D94();
}

void TouchReport.scanTime.setter(uint64_t a1)
{
  sub_100046284(a1, 13);
  sub_100005D94();
}

void TouchReport.scanTime.modify(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 8) = sub_100045EF0();
  sub_100005D94();
}

void sub_10004B690(uint64_t a1)
{
  sub_100046284(*(unsigned __int16 *)(a1 + 8), 13);
  sub_100005D94();
}

void TouchReport.hostTime.getter()
{
  sub_100045FD8(15);
  sub_100005D94();
}

void sub_10004B6D4()
{
  uint64_t v0;

  TouchReport.Contact.index.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_10004B6F4()
{
  uint64_t v0;

  TouchReport.Contact.isTouching.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_10004B714()
{
  uint64_t v0;

  TouchReport.Contact.isInRange.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

ValueMetadata *type metadata accessor for TouchReport()
{
  return &type metadata for TouchReport;
}

void sub_10004B748(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  swift_retain(v3);
  sub_100005D94();
}

uint64_t *assignWithCopy for TouchReport.Contact(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t initializeWithTake for TouchReport.Contact(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for TouchReport.Contact(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TouchReport.Contact(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 10))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchReport.Contact(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 10) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TouchReport.Contact()
{
  return &type metadata for TouchReport.Contact;
}

void sub_10004B8B4()
{
  sub_100046128();
}

uint64_t sub_10004B8C8()
{
  uint64_t v0;

  return _s10SidecarHID9HIDReportCys5UInt8VSicig_0(*(unsigned __int8 *)(v0 + 8));
}

uint64_t sub_10004B8DC()
{
  uint64_t v0;

  return _s10SidecarHID9HIDReportCys5UInt8VSicig_0(*(unsigned __int8 *)(v0 + 8));
}

uint64_t sub_10004B90C(uint64_t a1, double a2, Swift::Double a3, uint64_t a4, uint64_t a5)
{
  return sub_1000462F0(a1, 0, a5, 0.0, a3, 0.0, 1.0, 0.0);
}

uint64_t sub_10004B924(uint64_t a1, unsigned __int8 a2)
{
  return _s10SidecarHID9HIDReportCys5UInt8VSicig_0(a2);
}

double sub_10004B930(double result)
{
  if (result > 1.0)
    return 1.0;
  return result;
}

void sub_10004B95C(Swift::Int8 a1)
{
  Swift::Int v1;

  HIDReport.setValue(_:at:)(a1, v1);
}

BOOL sub_10004B964(char a1, char a2)
{
  return word_10005AC22[a1] == word_10005AC22[a2];
}

void sub_10004B988(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  sub_10004C658(a1);
  Hasher._finalize()();
  sub_10003A248();
}

void sub_10004B9C8(uint64_t a1, char a2)
{
  Hasher._combine(_:)(word_10005AC22[a2]);
  sub_100005D94();
}

void sub_10004B9F4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_10004C658(a2);
  Hasher._finalize()();
  sub_10003A248();
}

Swift::Int sub_10004BA30(uint64_t a1, Swift::UInt a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

void sub_10004BA70(uint64_t a1)
{
  _QWORD *v1;

  sub_10004C648(*v1 | a1);
}

void sub_10004BA7C(uint64_t a1)
{
  _QWORD *v1;

  sub_10004C648(*v1 & a1);
}

void sub_10004BA88(uint64_t a1)
{
  _QWORD *v1;

  sub_10004C648(*v1 ^ a1);
}

void sub_10004BA94(uint64_t a1)
{
  _QWORD *v1;

  sub_10004C648(*v1 & ~a1);
}

void sub_10004BAA0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = VideoStream.qosMonitorServerDidDie(_:)(*a1);
  sub_100005D94();
}

Swift::Int sub_10004BAC4(uint64_t a1)
{
  Swift::UInt *v1;

  return sub_10004BA30(a1, *v1);
}

void sub_10004BACC(uint64_t *a1@<X8>)
{
  *a1 = variable initialization expression of Clock.heartbeatTimer();
  sub_100005D94();
}

uint64_t sub_10004BAEC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_100018FE8(*a1, *v2);
  *a2 = result;
  return result;
}

void sub_10004BB18(uint64_t *a1)
{
  sub_10004BA70(*a1);
}

void sub_10004BB20(uint64_t *a1)
{
  sub_10004BA7C(*a1);
}

void sub_10004BB28(uint64_t *a1)
{
  sub_10004BA88(*a1);
}

void sub_10004BB30(uint64_t *a1)
{
  sub_10004BA94(*a1);
}

uint64_t sub_10004BB38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = VideoStream.qosMonitorServerDidDie(_:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t TouchTracker.__allocating_init()()
{
  uint64_t v0;
  uint64_t result;

  result = sub_10004C630(v0);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t TouchTracker.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  return result;
}

uint64_t TouchTracker.track<A>(_:where:)(Swift::Int a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t (*v26)(uint64_t, uint64_t);
  Swift::Bool IsNativeType;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  Swift::Int after;
  uint64_t v46;

  v6 = v5;
  v40 = a2;
  v41 = a3;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(a1, a2);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v38 - v15;
  v42 = *(_QWORD *)(v5 + 16) & *(_QWORD *)(v5 + 24);
  v46 = v42;
  v18 = swift_bridgeObjectRetain(v17);
  v19 = Array.startIndex.getter(v18, a4);
  after = v19;
  if (v19 == sub_10004C664())
  {
LABEL_2:
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)(v6 + 24) = v42;
    after = a1;
    v22 = __chkstk_darwin(v20, v21);
    *(&v38 - 4) = a4;
    *(&v38 - 3) = a5;
    *(&v38 - 2) = (uint64_t)&v46;
    v23 = type metadata accessor for Array(0, a4, v22);
    swift_bridgeObjectRetain(a1);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v23);
    return _ArrayProtocol.filter(_:)(sub_10004C474, &v38 - 6, v23, WitnessTable);
  }
  v39 = v11;
  v43 = *(void (**)(uint64_t, uint64_t))(a5 + 8);
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 24);
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v19, IsNativeType, a1, a4);
    if (!IsNativeType)
      break;
    sub_10004C650((uint64_t)v16, a1+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
LABEL_6:
    swift_bridgeObjectRetain(a1);
    Array.formIndex(after:)(&after);
    swift_bridgeObjectRelease(a1);
    sub_10004C650((uint64_t)v12, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
    v43(a4, a5);
    if ((v26(a4, a5) & 1) != 0)
    {
      sub_10004C670();
      if (!v30 & v29)
        v31 = 0;
      else
        v31 = v28;
      v32 = *(_QWORD *)(v6 + 16);
      if ((v31 & ~v32) != 0)
      {
        *(_QWORD *)(v6 + 16) = v32 | v31;
        v35 = v40(v12);
        sub_10004C620();
        if ((v35 & 1) != 0)
        {
          v36 = v42;
          if ((v42 & v31) != v31)
          {
            v42 |= v31;
            v46 = v36 | v31;
          }
        }
      }
      else
      {
        sub_10004C620();
      }
    }
    else
    {
      sub_10004C620();
      sub_10004C670();
      if (!v30 & v29)
        v33 = 0;
      v34 = *(_QWORD *)(v6 + 16);
      if ((v34 & v33) != 0)
        *(_QWORD *)(v6 + 16) = v34 & ~v33;
    }
    v19 = after;
    if (v19 == sub_10004C664())
      goto LABEL_2;
  }
  result = _ArrayBuffer._getElementSlowPath(_:)(v19, a1, a4);
  if (v39 == 8)
  {
    v37 = result;
    v44 = result;
    sub_10004C650((uint64_t)v16, (uint64_t)&v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
    swift_unknownObjectRelease(v37);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

BOOL sub_10004BE6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v6 = 1 << v5;
  if (v5 >= 0x40)
    v6 = 0;
  if (v5 > 0x40)
    v6 = 0;
  return (v6 & ~v4) == 0;
}

uint64_t TouchTracker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TouchTracker.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t TouchTrackerLog.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10004C630(v0);
  TouchTrackerLog.init()();
  return v1;
}

uint64_t TouchTrackerLog.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
  v1 = type metadata accessor for TouchTracker();
  v2 = sub_10004C630(v1);
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v0 + 24) = v2;
  return v0;
}

uint64_t TouchTrackerLog.track<A>(_:timestamp:where:)(Swift::Int a1, uint64_t a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v23[24];
  _BYTE v24[24];

  v13 = (char **)(v6 + 16);
  sub_100018BB0(v6 + 16, (uint64_t)v24);
  v14 = *(_QWORD **)(v6 + 16);
  if (v14[2])
  {
    v15 = v14[4];
    v16 = v14[5];
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v17 = *(_QWORD *)(v6 + 24);
  v18 = TouchTracker.track<A>(_:where:)(a1, a3, a4, a5, a6);
  v19 = *(_QWORD *)(v17 + 24);
  if ((v16 & ~v19) != 0 || !*((_QWORD *)*v13 + 2))
  {
    sub_10004C63C((uint64_t)v13, (uint64_t)v23);
    sub_10004C274(0, 0, a2, v19);
  }
  else
  {
    sub_10004C63C((uint64_t)v13, (uint64_t)v23);
    v20 = *v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
    *v13 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_12;
    while (!*((_QWORD *)v20 + 2))
    {
      __break(1u);
LABEL_12:
      v20 = sub_10004C460((uint64_t)v20);
      *v13 = v20;
    }
    *((_QWORD *)v20 + 4) = v15;
    *((_QWORD *)v20 + 5) = v19;
  }
  swift_endAccess(v23);
  return v18;
}

Swift::Bool __swiftcall TouchTrackerLog.find(index:timestamp:)(Swift::Int index, Swift::UInt64 timestamp)
{
  uint64_t v2;
  Swift::Bool result;
  int64_t *v6;
  int64_t v7;
  Swift::UInt64 *v8;
  unint64_t i;
  Swift::UInt64 v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  char v15[24];

  result = sub_100018BB0(v2 + 16, (uint64_t)v15);
  v6 = *(int64_t **)(v2 + 16);
  v7 = v6[2];
  if (!v7)
    return 0;
  if (v6[4] <= timestamp)
  {
    i = 0;
    goto LABEL_10;
  }
  if (v7 == 1)
    return 0;
  v8 = (Swift::UInt64 *)(v6 + 6);
  for (i = 1; ; ++i)
  {
    v10 = *v8;
    v8 += 2;
    if (v10 <= timestamp)
      break;
    v11 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    if (v11 == v7)
      return 0;
  }
LABEL_10:
  if (__OFADD__(i, 1))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((uint64_t)(i + 1) < v7)
  {
    sub_10004C63C(v2 + 16, (uint64_t)v14);
    sub_10004C374(i + 1, v7);
    result = swift_endAccess(v14);
    v6 = *(int64_t **)(v2 + 16);
  }
  if ((i & 0x8000000000000000) != 0)
    goto LABEL_23;
  if (i >= v6[2])
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v12 = v6[2 * i + 5];
  v13 = 1 << index;
  if ((unint64_t)index >= 0x40)
    v13 = 0;
  if ((unint64_t)index > 0x40)
    v13 = 0;
  return (v13 & ~v12) == 0;
}

uint64_t TouchTrackerLog.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t TouchTrackerLog.__deallocating_deinit()
{
  uint64_t v0;

  TouchTrackerLog.deinit();
  return swift_deallocClassInstance(v0, 32, 7);
}

char *sub_10004C1CC(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10004C608();
    result = (char *)sub_10000C2CC((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10004C5F8(a3, result);
  }
  return result;
}

char *sub_10004C220(char *result, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2 < 0)
  {
    sub_10004C608();
    result = (char *)sub_10000C2CC((uint64_t)"Fatal error", v4, v5, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", v6, v7, (uint64_t)"Swift/UnsafePointer.swift", v8, v9, v10, v11);
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10004C5F8(a3, result);
  }
  return result;
}

uint64_t sub_10004C274(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v8 = result;
  v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)result || v11 > *(_QWORD *)(v6 + 24) >> 1)
  {
    if (v7 <= v11)
      v14 = v7 + v10;
    else
      v14 = v7;
    result = (uint64_t)sub_10003EF38((char *)result, v14, 1, v6);
    v6 = result;
  }
  v15 = v6 + 32 + 16 * v8;
  if (!v10)
    goto LABEL_16;
  v16 = *(_QWORD *)(v6 + 16);
  if (__OFSUB__(v16, a2))
    goto LABEL_22;
  result = (uint64_t)sub_10004C220((char *)(v6 + 32 + 16 * a2), v16 - a2, (char *)(v15 + 16));
  v17 = *(_QWORD *)(v6 + 16);
  v18 = __OFADD__(v17, v10);
  v19 = v17 + v10;
  if (!v18)
  {
    *(_QWORD *)(v6 + 16) = v19;
LABEL_16:
    *(_QWORD *)v15 = a3;
    *(_QWORD *)(v15 + 8) = a4;
    *v4 = v6;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10004C374(uint64_t result, int64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  char *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char *v14;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = (char *)(result - a2);
  if (__OFSUB__(0, v7))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (!v8)
      goto LABEL_17;
  }
  else
  {
    if (v5 <= v9)
      v10 = (int64_t)&v8[v5];
    else
      v10 = v5;
    result = (uint64_t)sub_10003EF38((char *)result, v10, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_17;
  }
  v11 = *(_QWORD *)(v4 + 16);
  if (__OFSUB__(v11, a2))
    goto LABEL_23;
  result = (uint64_t)sub_10004C220((char *)(v4 + 32 + 16 * a2), v11 - a2, (char *)(v4 + 32 + 16 * v6));
  v12 = *(_QWORD *)(v4 + 16);
  v13 = __OFADD__(v12, v8);
  v14 = &v8[v12];
  if (!v13)
  {
    *(_QWORD *)(v4 + 16) = v14;
LABEL_17:
    *v2 = v4;
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

char *sub_10004C460(uint64_t a1)
{
  return sub_10003EF38(0, *(_QWORD *)(a1 + 16), 0, a1);
}

BOOL sub_10004C474(uint64_t a1)
{
  uint64_t v1;

  return sub_10004BE6C(a1, *(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for TouchTracker()
{
  return objc_opt_self(_TtC10SidecarHID12TouchTracker);
}

uint64_t type metadata accessor for TouchTrackerLog()
{
  return objc_opt_self(_TtC10SidecarHID15TouchTrackerLog);
}

ValueMetadata *type metadata accessor for TouchTrackerLog.TouchEpoch()
{
  return &type metadata for TouchTrackerLog.TouchEpoch;
}

ValueMetadata *type metadata accessor for TouchMask()
{
  return &type metadata for TouchMask;
}

unint64_t sub_10004C4F8()
{
  unint64_t result;

  result = qword_100078FE0;
  if (!qword_100078FE0)
  {
    result = swift_getWitnessTable(&unk_10005ABC0, &type metadata for TouchMask);
    atomic_store(result, (unint64_t *)&qword_100078FE0);
  }
  return result;
}

unint64_t sub_10004C538()
{
  unint64_t result;

  result = qword_100078FE8;
  if (!qword_100078FE8)
  {
    result = swift_getWitnessTable(&unk_10005AA50, &type metadata for TouchMask);
    atomic_store(result, (unint64_t *)&qword_100078FE8);
  }
  return result;
}

unint64_t sub_10004C578()
{
  unint64_t result;

  result = qword_100078FF0;
  if (!qword_100078FF0)
  {
    result = swift_getWitnessTable(&unk_10005AA80, &type metadata for TouchMask);
    atomic_store(result, (unint64_t *)&qword_100078FF0);
  }
  return result;
}

unint64_t sub_10004C5B8()
{
  unint64_t result;

  result = qword_100078FF8;
  if (!qword_100078FF8)
  {
    result = swift_getWitnessTable(&unk_10005AAB8, &type metadata for TouchMask);
    atomic_store(result, (unint64_t *)&qword_100078FF8);
  }
  return result;
}

void *sub_10004C5F8@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t sub_10004C620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10004C630(uint64_t a1)
{
  return swift_allocObject(a1, 32, 7);
}

uint64_t sub_10004C63C(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 33, 0);
}

void sub_10004C648(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *v1 = a1;
}

uint64_t sub_10004C650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void sub_10004C658(uint64_t a1@<X8>)
{
  uint64_t v1;

  Hasher._combine(_:)(*(_WORD *)(v1 + 2 * a1));
}

uint64_t sub_10004C664()
{
  uint64_t v0;
  uint64_t v1;

  return Array.endIndex.getter(v0, v1);
}

void sub_10004C684(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10004C6E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  v4 = v1;
  v5 = v2;
  v6 = BYTE2(v2);
  v7 = BYTE3(v2);
  v8 = BYTE4(v2);
  v9 = BYTE5(v2);
  UserDevice.handleReport(pointer:count:)((char *)&v4, BYTE6(v2));
  return swift_release(v0);
}

id UserDevice.device.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t UserDevice.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC10SidecarHID10UserDevice_uuid;
  v4 = sub_100018F50();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10004C8C0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026FA4(v0, qword_100079000);
  sub_100026E38(v0, (uint64_t)qword_100079000);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x8000000100056270, 6580584, 0xE300000000000000);
}

uint64_t UserDevice._serviceID.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID;
  sub_10000F664(v0 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID, (uint64_t)v3, 0);
  return *(_QWORD *)v1;
}

void UserDevice._serviceID.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v6[24];

  v5 = v2 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID;
  sub_10000F664(v5, (uint64_t)v6, 1);
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  sub_10000C57C();
}

void UserDevice._serviceID.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000F664(v1 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID, a1, 33);
  sub_100005D94();
}

uint64_t UserDevice.serviceID.getter()
{
  uint64_t v0;
  _BYTE *v1;
  _BYTE v3[24];

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID);
  sub_10000F664(v0 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID, (uint64_t)v3, 0);
  if (v1[8])
    return 0;
  else
    return *(_QWORD *)v1;
}

_QWORD *UserDevice.__allocating_init(descriptor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return UserDevice.init(descriptor:)(a1, a2);
}

_QWORD *UserDevice.init(descriptor:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFDictionary *v16;
  IOHIDUserDeviceRef v17;
  uint64_t v18;

  v3 = v2;
  v6 = *v2;
  v7 = (char *)v2 + OBJC_IVAR____TtC10SidecarHID10UserDevice_uuid;
  _s10SidecarHID10UserDeviceC4uuid10Foundation4UUIDVvpfi_0();
  v8 = (char *)v2 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID;
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler);
  *v9 = 0;
  v9[1] = 0;
  v10 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler);
  *v10 = 0;
  v10[1] = 0;
  v11 = sub_100008414(&qword_100079018);
  v12 = swift_allocObject(v11, 416, 7);
  *(_OWORD *)(v12 + 16) = xmmword_10005AC30;
  *(_QWORD *)(v12 + 32) = 0x4449726F646E6556;
  *(_QWORD *)(v12 + 40) = 0xE800000000000000;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = 1452;
  *(_QWORD *)(v12 + 88) = &type metadata for Int;
  *(_QWORD *)(v12 + 96) = 0x49746375646F7250;
  *(_QWORD *)(v12 + 104) = 0xE900000000000044;
  *(_QWORD *)(v12 + 120) = &type metadata for String;
  *(_QWORD *)(v12 + 128) = 34304;
  *(_QWORD *)(v12 + 152) = &type metadata for Int;
  strcpy((char *)(v12 + 160), "ReportInterval");
  *(_BYTE *)(v12 + 175) = -18;
  *(_QWORD *)(v12 + 184) = &type metadata for String;
  *(_QWORD *)(v12 + 192) = 8000;
  *(_QWORD *)(v12 + 216) = &type metadata for Int;
  *(_QWORD *)(v12 + 224) = 0xD000000000000010;
  *(_QWORD *)(v12 + 232) = 0x8000000100057C00;
  *(_QWORD *)(v12 + 248) = &type metadata for String;
  *(_QWORD *)(v12 + 256) = a1;
  *(_QWORD *)(v12 + 264) = a2;
  *(_QWORD *)(v12 + 312) = &type metadata for String;
  *(_QWORD *)(v12 + 280) = &type metadata for Data;
  *(_QWORD *)(v12 + 288) = 0xD000000000000014;
  *(_QWORD *)(v12 + 296) = 0x8000000100057C20;
  *(_BYTE *)(v12 + 320) = 1;
  *(_QWORD *)(v12 + 376) = &type metadata for String;
  *(_QWORD *)(v12 + 344) = &type metadata for Bool;
  *(_QWORD *)(v12 + 352) = 0xD000000000000016;
  *(_QWORD *)(v12 + 360) = 0x8000000100057C40;
  v13 = sub_10004DD30();
  v14 = UUID.uuidString.getter(v13);
  *(_QWORD *)(v12 + 408) = &type metadata for String;
  *(_QWORD *)(v12 + 384) = v14;
  *(_QWORD *)(v12 + 392) = v15;
  sub_100018AA4(0, &qword_100079020, NSMutableDictionary_ptr);
  v16 = (const __CFDictionary *)NSDictionary.init(dictionaryLiteral:)(v12);
  v17 = IOHIDUserDeviceCreateWithProperties(0, v16, 1u);
  sub_10004DD0C();

  if (v17)
  {
    v3[2] = v17;
  }
  else
  {
    v18 = sub_100018F50();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v7, v18);
    sub_10004DD18((_QWORD *)((char *)v3 + OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler));
    sub_10004DD18((_QWORD *)((char *)v3 + OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler));
    swift_deallocPartialClassInstance(v3, v6, *(unsigned int *)(*v3 + 48), *(unsigned __int16 *)(*v3 + 52));
    return 0;
  }
  return v3;
}

uint64_t sub_10004CD00(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void UserDevice.setDispatchQueue(_:)(dispatch_queue_t queue)
{
  uint64_t v1;

  IOHIDUserDeviceSetDispatchQueue(*(IOHIDUserDeviceRef *)(v1 + 16), queue);
}

void UserDevice.registerCancel(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __IOHIDUserDevice *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v3 = *(__IOHIDUserDevice **)(v2 + 16);
  v6[4] = a1;
  v7 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10000C66C;
  v6[3] = &unk_10006D0E0;
  v4 = _Block_copy(v6);
  v5 = v7;
  sub_10004DD50();
  swift_release(v5);
  IOHIDUserDeviceSetCancelHandler(v3, v4);
  _Block_release(v4);
}

uint64_t sub_10004CDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004CDBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t static UserDevice.fromOpaque(_:)(uint64_t result)
{
  if (result)
    return swift_retain(result);
  __break(1u);
  return result;
}

uint64_t UserDevice.getReportHandler.getter()
{
  return sub_10004CE48(&OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler, (void (*)(_QWORD, _QWORD))sub_10004DCFC);
}

void UserDevice.getReportHandler.setter(uint64_t a1, uint64_t a2)
{
  sub_10004CEC8(a1, a2, &OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler, (void (*)(uint64_t, uint64_t))sub_10004DCF8);
}

void UserDevice.getReportHandler.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000F664(v1 + OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler, a1, 33);
  sub_100005D94();
}

uint64_t UserDevice.setReportHandler.getter()
{
  return sub_10004CE48(&OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler, (void (*)(_QWORD, _QWORD))sub_10004CEA4);
}

uint64_t sub_10004CE48(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (_QWORD *)(v2 + *a1);
  sub_10000F664((uint64_t)v4, (uint64_t)v7, 0);
  v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t sub_10004CEA4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

void UserDevice.setReportHandler.setter(uint64_t a1, uint64_t a2)
{
  sub_10004CEC8(a1, a2, &OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler, (void (*)(uint64_t, uint64_t))sub_10004CD00);
}

void sub_10004CEC8(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v8 = (uint64_t *)(v4 + *a3);
  sub_10000F664((uint64_t)v8, (uint64_t)v11, 1);
  v9 = *v8;
  v10 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  a4(v9, v10);
  sub_10000C57C();
}

void UserDevice.setReportHandler.modify(uint64_t a1)
{
  uint64_t v1;

  sub_10000F664(v1 + OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler, a1, 33);
  sub_100005D94();
}

void static UserDevice.getReport(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, uint64_t *);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[24];
  uint64_t v31;
  unint64_t v32;

  sub_10004DD20();
  sub_10004DD3C();
  __chkstk_darwin(v11, v12);
  sub_100027248();
  v16 = v15 - v14;
  if (!v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  v17 = *a5;
  v18 = enum case for Data.Deallocator.none(_:);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104);
  sub_10004DD50();
  v19(v16, v18, v7);
  v20 = Data.init(bytesNoCopy:count:deallocator:)(a4, v17, v16);
  v22 = v21;
  v31 = v20;
  v32 = v21;
  v23 = v5 + OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler;
  sub_10000F664(v5 + OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler, (uint64_t)v30, 0);
  v24 = *(void (**)(uint64_t, _QWORD, uint64_t *))v23;
  if (!*(_QWORD *)v23)
  {
LABEL_11:
    __break(1u);
    return;
  }
  v25 = *(_QWORD *)(v23 + 8);
  sub_10004DD30();
  sub_10004CEA4((uint64_t)v24, v25);
  v24(v6, a3, &v31);
  sub_10004CD00((uint64_t)v24, v25);
  v26 = v31;
  v27 = v32;
  sub_100009364(v31, v32);
  LOBYTE(v25) = static Data.== infix(_:_:)(v26, v27, v20, v22);
  sub_10004DD00();
  if ((v25 & 1) != 0)
  {
    sub_10004DD00();
    sub_10004DD0C();
    sub_100048284();
  }
  else
  {
    v28 = Data.count.getter(v20, v22);
    if (v17 >= v28)
      v29 = v28;
    else
      v29 = v17;
    *a5 = v29;
    sub_100048284();
    sub_10004DD0C();
    sub_10004DD00();
  }
  sub_100018BBC();
}

void static UserDevice.setReport(_:_:_:_:_:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, uint64_t, unint64_t);
  uint64_t v24;
  _BYTE v25[24];

  sub_10004DD20();
  sub_10004DD3C();
  __chkstk_darwin(v11, v12);
  sub_100027248();
  v16 = v15 - v14;
  if (v5)
  {
    v17 = enum case for Data.Deallocator.none(_:);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104);
    sub_10004DD50();
    v18(v16, v17, v7);
    v19 = Data.init(bytesNoCopy:count:deallocator:)(a4, a5, v16);
    v21 = v20;
    v22 = v5 + OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler;
    sub_10000F664(v5 + OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler, (uint64_t)v25, 0);
    v23 = *(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))v22;
    if (*(_QWORD *)v22)
    {
      v24 = *(_QWORD *)(v22 + 8);
      swift_retain(v24);
      v23(v6, a3, v19, v21);
      sub_10004CD00((uint64_t)v23, v24);
      sub_100009320(v19, v21);
      sub_100048284();
      sub_100018BBC();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t UserDevice.registerGetReport(_:)(uint64_t a1, uint64_t a2)
{
  return sub_10004D234(a1, a2, &OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler, (void (*)(uint64_t, uint64_t))sub_10004DCF8, (uint64_t)sub_10004D1F4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback);
}

uint64_t sub_10004D1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10004D2C0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static UserDevice.getReport(_:_:_:_:_:));
}

uint64_t UserDevice.registerSetReport(_:)(uint64_t a1, uint64_t a2)
{
  return sub_10004D234(a1, a2, &OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler, (void (*)(uint64_t, uint64_t))sub_10004CD00, (uint64_t)sub_10004D320, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&IOHIDUserDeviceRegisterSetReportCallback);
}

uint64_t sub_10004D234(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v12 = (uint64_t *)(v6 + *a3);
  sub_10000F664((uint64_t)v12, (uint64_t)v17, 1);
  v13 = *v12;
  v14 = v12[1];
  *v12 = a1;
  v12[1] = a2;
  a4(v13, v14);
  v15 = *(_QWORD *)(v6 + 16);
  swift_retain(a2);
  return a6(v15, a5, v6);
}

uint64_t sub_10004D2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for UserDevice(0);
  return a6(a1, a2, a3, a4, a5);
}

uint64_t sub_10004D320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10004D2C0(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))static UserDevice.setReport(_:_:_:_:_:));
}

Swift::Void __swiftcall UserDevice.activate()()
{
  uint64_t v0;
  uint64_t v1;
  __IOHIDUserDevice *v2;
  io_registry_entry_t v3;
  io_object_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t entryID;
  _BYTE v13[24];
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *(__IOHIDUserDevice **)(v0 + 16);
  IOHIDUserDeviceActivate(v2);
  v3 = IOHIDUserDeviceCopyService(v2);
  if (v3)
  {
    v4 = v3;
    entryID = 0;
    IORegistryEntryGetRegistryEntryID(v3, &entryID);
    if (qword_100078C30 != -1)
      swift_once(&qword_100078C30, sub_10004C8C0);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100026E38(v5, (uint64_t)qword_100079000);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v9 = 134217984;
      sub_10000F664((uint64_t)&entryID, (uint64_t)v13, 0);
      v15 = entryID;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "IOHIDUserDeviceCreate: %llx", v9, 0xCu);
      swift_slowDealloc(v9, -1, -1);
    }

    IOObjectRetain(v4);
    sub_10000F664((uint64_t)&entryID, (uint64_t)&v15, 0);
    v10 = entryID;
    v11 = v1 + OBJC_IVAR____TtC10SidecarHID10UserDevice__serviceID;
    sub_10000F664(v11, (uint64_t)v14, 1);
    *(_QWORD *)v11 = v10;
    *(_BYTE *)(v11 + 8) = 0;
  }
}

Swift::Void __swiftcall UserDevice.cancel()()
{
  uint64_t v0;

  IOHIDUserDeviceCancel(*(IOHIDUserDeviceRef *)(v0 + 16));
}

double UserDevice.property(forKey:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __IOHIDUserDevice *v3;
  __CFString *v4;
  CFTypeRef v5;
  double result;

  v3 = *(__IOHIDUserDevice **)(v1 + 16);
  v4 = (__CFString *)String._bridgeToObjectiveC()();
  v5 = IOHIDUserDeviceCopyProperty(v3, v4);

  if (v5)
  {
    *(_QWORD *)(a1 + 24) = swift_getObjectType(v5);
    *(_QWORD *)a1 = v5;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double UserDevice.setProperty(_:forKey:)(_QWORD *a1)
{
  uint64_t v1;
  __IOHIDUserDevice *v3;
  __CFString *v4;
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  double result;

  v3 = *(__IOHIDUserDevice **)(v1 + 16);
  v4 = (__CFString *)String._bridgeToObjectiveC()();
  v5 = a1[3];
  v6 = sub_10000BE70(a1, v5);
  v7 = (const void *)_bridgeAnythingToObjectiveC<A>(_:)(v6, v5);
  IOHIDUserDeviceSetProperty(v3, v4, v7);

  *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
  return result;
}

uint64_t UserDevice.handleReport(pointer:count:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  sub_100027248();
  v10 = v9 - v8;
  v11 = UserDevice.serviceID.getter();
  sub_10004A628(a1, a2, v11);
  result = IOHIDUserDeviceHandleReport(*(_QWORD *)(v2 + 16), a1, a2);
  if ((_DWORD)result)
  {
    v13 = result;
    sub_100018AA4(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v14 = sub_10004843C(v13, 0, 0);
    if (qword_100078C30 != -1)
      swift_once(&qword_100078C30, sub_10004C8C0);
    v15 = sub_100026E38(v5, (uint64_t)qword_100079000);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v15, v5);
    __chkstk_darwin(v16, v17);
    *(&v21 - 2) = v11;
    __chkstk_darwin(v18, &v21 - 4);
    *(&v21 - 2) = (uint64_t)v14;
    sub_100045A98(sub_10004DB34, v19, sub_10000F588);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
    return swift_willThrow(v20);
  }
  return result;
}

char *sub_10004D784(char *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  char *result;
  unint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  v4 = _swiftEmptyArrayStorage;
  if (!a2)
  {
LABEL_10:
    v25 = (uint64_t)v4;
    v17 = sub_100008414(&qword_100077E68);
    v18 = sub_1000204A4();
    v19 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v17, v18);
    v21 = v20;
    swift_bridgeObjectRelease(v4);
    v22 = sub_100008414((uint64_t *)&unk_100078670);
    v23 = swift_allocObject(v22, 112, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100058980;
    *(_QWORD *)(v23 + 56) = &type metadata for UInt64;
    *(_QWORD *)(v23 + 64) = &protocol witness table for UInt64;
    *(_QWORD *)(v23 + 32) = a3;
    *(_QWORD *)(v23 + 96) = &type metadata for String;
    *(_QWORD *)(v23 + 104) = sub_10000FEB8();
    *(_QWORD *)(v23 + 72) = v19;
    *(_QWORD *)(v23 + 80) = v21;
    return (char *)String.init(format:_:)(0xD000000000000017, 0x8000000100057D00, v23);
  }
  v5 = a2;
  v27 = _swiftEmptyArrayStorage;
  result = sub_10004055C(0, a2 & ~(a2 >> 63), 0);
  if (v5 >= 1)
  {
    v24 = a3;
    v4 = v27;
    v8 = sub_100043010();
    do
    {
      v9 = *a1++;
      LOBYTE(v25) = v9;
      v10 = String.init<A>(_:radix:uppercase:)(&v25, 16, 0, &type metadata for UInt8, v8);
      v12 = v11;
      if (String.count.getter() <= 1)
      {
        v25 = 48;
        v26 = 0xE100000000000000;
        v13._countAndFlagsBits = v10;
        v13._object = v12;
        String.append(_:)(v13);
        swift_bridgeObjectRelease(v12);
        v10 = v25;
        v12 = (void *)v26;
      }
      v27 = v4;
      v15 = v4[2];
      v14 = v4[3];
      if (v15 >= v14 >> 1)
      {
        sub_10004055C((char *)(v14 > 1), v15 + 1, 1);
        v4 = v27;
      }
      v4[2] = v15 + 1;
      v16 = &v4[2 * v15];
      v16[4] = v10;
      v16[5] = v12;
      --v5;
    }
    while (v5);
    a3 = v24;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004D980(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  unint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(8, 1);
  v11 = v2;
  v3._countAndFlagsBits = 0x5B74726F706552;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  v9 = a1;
  v4 = sub_10004DCBC();
  v5._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v9, 16, 1, &type metadata for UInt64, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 93;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v10;
}

void UserDevice.handleReport(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_retain(v2);
  sub_10004C684(a1, a2);
}

char *sub_10004DA54(char *result, uint64_t a2)
{
  if (result)
    return (char *)UserDevice.handleReport(pointer:count:)(result, a2 - (_QWORD)result);
  __break(1u);
  return result;
}

char *UserDevice.handleReport(_:)(uint64_t a1)
{
  char *result;

  result = *(char **)(a1 + 16);
  if (result)
    return (char *)UserDevice.handleReport(pointer:count:)(result, *(_QWORD *)(a1 + 24));
  __break(1u);
  return result;
}

uint64_t UserDevice.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10SidecarHID10UserDevice_uuid;
  v2 = sub_100018F50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10004DD18((uint64_t *)(v0 + OBJC_IVAR____TtC10SidecarHID10UserDevice_getReportHandler));
  sub_10004DD18((uint64_t *)(v0 + OBJC_IVAR____TtC10SidecarHID10UserDevice_setReportHandler));
  return v0;
}

uint64_t UserDevice.__deallocating_deinit()
{
  uint64_t v0;

  UserDevice.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004DB34()
{
  uint64_t v0;

  return sub_10004D980(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10004DB3C()
{
  return type metadata accessor for UserDevice(0);
}

uint64_t type metadata accessor for UserDevice(uint64_t a1)
{
  uint64_t result;

  result = qword_100079050;
  if (!qword_100079050)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserDevice);
  return result;
}

uint64_t sub_10004DB7C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = "\t";
    v4[3] = &unk_10005AC78;
    v4[4] = &unk_10005AC78;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10004DC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  result = __DataStorage._bytes.getter();
  v8 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = &v8[v12];
  if (v8)
    v14 = (uint64_t)v13;
  else
    v14 = 0;
  sub_10004DA54(v8, v14);
  return swift_release(a4);
}

unint64_t sub_10004DCBC()
{
  unint64_t result;

  result = qword_1000790F8;
  if (!qword_1000790F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_1000790F8);
  }
  return result;
}

uint64_t sub_10004DD00()
{
  uint64_t v0;
  unint64_t v1;

  return sub_100009320(v0, v1);
}

uint64_t sub_10004DD0C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009320(v1, v0);
}

uint64_t sub_10004DD18@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004CD00(*a1, a1[1]);
}

uint64_t sub_10004DD20()
{
  return type metadata accessor for Data.Deallocator(0);
}

uint64_t sub_10004DD30()
{
  unint64_t v0;
  uint64_t v1;

  return sub_100009364(v1, v0);
}

uint64_t sub_10004DD50()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_10004DD58()
{
  return 0;
}

uint64_t variable initialization expression of Domain.result()
{
  return 0;
}

uint64_t variable initialization expression of Domain.peer@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[136];

  sub_10004DE08((uint64_t)v3);
  return sub_10004DE28((uint64_t)v3, a1);
}

double sub_10004DE08(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_10004DE28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100008414((uint64_t *)&unk_100079110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t variable initialization expression of Clock.masterIdentifier()
{
  return TSNullgPTPClockIdentity;
}

uint64_t sub_10004DE90(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  unint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v11 = v2;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  v9 = a1;
  v4 = sub_10004DCBC();
  v5._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v9, 16, 1, &type metadata for UInt64, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return v10;
}

id sub_10004DF20()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TimeSyncManager()), "init");
  qword_100079120 = (uint64_t)result;
  return result;
}

id sub_10004DF50()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation];
  *(_QWORD *)v2 = 0;
  v2[8] = -1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_clocks] = &_swiftEmptyArrayStorage;
  *(_QWORD *)&v0[OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions] = &_swiftEmptyArrayStorage;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t sub_10004DFDC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_100026FA4(v0, qword_100079128);
  sub_100026E38(v0, (uint64_t)qword_100079128);
  return Logger.init(subsystem:category:)(0xD000000000000011, 0x8000000100056270, 0x636E7973656D6974, 0xE800000000000000);
}

BOOL sub_10004E050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v5 = swift_allocObject(&unk_10006D4B0, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (uint64_t *)(v2
                 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions);
  swift_beginAccess(v6, v11, 33, 0);
  swift_retain(a2);
  sub_100050ECC((uint64_t *)&unk_100079370);
  v7 = *(char **)(*v6 + 16);
  sub_100050F24(v7, (uint64_t *)&unk_100079370);
  v8 = *v6;
  *(_QWORD *)(v8 + 16) = v7 + 1;
  v9 = v8 + 16 * (_QWORD)v7;
  *(_QWORD *)(v9 + 32) = sub_1000511E4;
  *(_QWORD *)(v9 + 40) = v5;
  swift_endAccess(v11);
  return sub_10004E120();
}

BOOL sub_10004E120()
{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(void **);
  void *v10;
  char v11;
  _BYTE v12[24];

  v1 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation
                          + 8);
  if (v1 != 255)
  {
    v2 = *(void **)(v0
                  + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
    v3 = (uint64_t *)(v0
                   + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_completions);
    swift_beginAccess(v3, v12, 1, 0);
    v4 = *v3;
    *v3 = (uint64_t)_swiftEmptyArrayStorage;
    sub_100051300(v2, v1);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = (uint64_t *)(v4 + 40);
      do
      {
        v8 = (void (*)(void **))*(v6 - 1);
        v7 = *v6;
        v10 = v2;
        v11 = v1 & 1;
        swift_retain(v7);
        v8(&v10);
        swift_release(v7);
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    sub_100051268(v2, v1);
    swift_bridgeObjectRelease(v4);
  }
  return v1 != 255;
}

void sub_10004E20C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  sub_10004E050(a1, a2);
  if (!sub_10004E120())
  {
    if (qword_100079108 != -1)
      swift_once(&qword_100079108, sub_10004DFDC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100026E38(v2, (uint64_t)qword_100079128);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Activating TimeSync", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    sub_10004E2F8();
  }
}

void sub_10004E2F8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  uint64_t v7;

  v1 = (void *)objc_opt_self(TSClockManager);
  v2 = swift_allocObject(&unk_10006D2D0, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v6[4] = sub_10005128C;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_10000C66C;
  v6[3] = &unk_10006D2E8;
  v3 = _Block_copy(v6);
  v4 = v7;
  v5 = v0;
  swift_release(v4);
  objc_msgSend(v1, "notifyWhenClockManagerIsAvailable:", v3);
  _Block_release(v3);
}

void sub_10004E3B8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  unsigned int v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id aBlock[5];
  uint64_t v26;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100079108 != -1)
    swift_once(&qword_100079108, sub_10004DFDC);
  v7 = sub_100026E38(v2, (uint64_t)qword_100079128);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "TSClockManager is Available", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = objc_msgSend((id)objc_opt_self(TSClockManager), "sharedClockManager");
  objc_msgSend(v11, "addClient:", a1);
  aBlock[0] = 0;
  v12 = objc_msgSend(v11, "addgPTPServicesWithError:", aBlock);
  v13 = aBlock[0];
  if (v12)
  {
    v14 = (void *)objc_opt_self(TSgPTPManager);
    v15 = swift_allocObject(&unk_10006D320, 24, 7);
    *(_QWORD *)(v15 + 16) = a1;
    aBlock[4] = sub_1000512B4;
    v26 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10000C66C;
    aBlock[3] = &unk_10006D338;
    v16 = _Block_copy(aBlock);
    v17 = v26;
    v18 = v13;
    v19 = a1;
    swift_release(v17);
    objc_msgSend(v14, "notifyWhengPTPManagerIsAvailable:", v16);
    _Block_release(v16);

  }
  else
  {
    v20 = aBlock[0];
    v21 = (void *)_convertNSErrorToError(_:)(v13);

    swift_willThrow(v22);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    __chkstk_darwin(v23, v24);
    aBlock[-2] = v21;
    sub_100045A98(sub_10004E9F8, 0, (uint64_t (*)(void))sub_1000184A0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_errorRetain(v21);
    sub_10004E7D4(v21, 1);
    swift_errorRelease(v21);
    swift_errorRelease(v21);
  }
}

void sub_10004E6B4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  id v6;

  if (qword_100079108 != -1)
    swift_once(&qword_100079108, sub_10004DFDC);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100026E38(v0, (uint64_t)qword_100079128);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "gPTPManager is Available", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = objc_msgSend((id)objc_opt_self(TSgPTPManager), "sharedgPTPManager");
  v6 = v5;
  sub_10004E7D4(v5, 0);

}

uint64_t sub_10004E7D4(void *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000085DC(0, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = swift_allocObject(&unk_10006D370, 33, 7);
  *(_QWORD *)(v15 + 16) = v2;
  *(_QWORD *)(v15 + 24) = a1;
  v16 = a2 & 1;
  *(_BYTE *)(v15 + 32) = a2 & 1;
  aBlock[4] = sub_1000512E8;
  v29 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000C66C;
  aBlock[3] = &unk_10006D388;
  v17 = _Block_copy(aBlock);
  v18 = v29;
  v19 = v3;
  sub_1000512F4(a1, v16);
  v20 = swift_release(v18);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = v21;
  v23 = sub_100008414((uint64_t *)&unk_100077A10);
  sub_1000084BC((unint64_t *)&qword_100077CA0, (uint64_t *)&unk_100077A10);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v6, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v26);
}

uint64_t sub_10004E9F8()
{
  return 0x636E7953656D6954;
}

BOOL sub_10004EA1C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;
  char v7;

  v4 = a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation;
  v5 = *(void **)(a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
  *(_QWORD *)v4 = a2;
  v6 = *(_BYTE *)(v4 + 8);
  v7 = a3 & 1;
  *(_BYTE *)(v4 + 8) = a3 & 1;
  sub_100051268(v5, v6);
  sub_1000512F4(a2, v7);
  return sub_10004E120();
}

id sub_10004EA78()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10004EAFC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100079108 != -1)
    swift_once(&qword_100079108, sub_10004DFDC);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100026E38(v11, (uint64_t)qword_100079128);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "TimeSync Connection Interrupted", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  sub_1000085DC(0, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  v17 = swift_allocObject(&unk_10006D280, 24, 7);
  *(_QWORD *)(v17 + 16) = v1;
  aBlock[4] = sub_100051248;
  v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000C66C;
  aBlock[3] = &unk_10006D298;
  v18 = _Block_copy(aBlock);
  v19 = v30;
  v20 = v1;
  v21 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = v22;
  v24 = sub_100008414((uint64_t *)&unk_100077A10);
  sub_1000084BC((unint64_t *)&qword_100077CA0, (uint64_t *)&unk_100077A10);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v2, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_10004EDB0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  v1 = a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation;
  v2 = *(void **)(a1 + OBJC_IVAR____TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager_activation);
  *(_QWORD *)v1 = 0;
  v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(v1 + 8) = -1;
  sub_100051268(v2, v3);
  sub_10004E2F8();
}

uint64_t sub_10004EE48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100079108 != -1)
    swift_once(&qword_100079108, sub_10004DFDC);
  v9 = sub_100026E38(v4, (uint64_t)qword_100079128);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  __chkstk_darwin(v10, v11);
  *(&v18 - 2) = v12;
  __chkstk_darwin(v13, &v18 - 4);
  *(&v18 - 2) = a1;
  sub_100045A98(sub_1000513E4, v14, sub_100018B80);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v16 = *(unsigned __int8 *)(v2 + 24);
  if (v16 == 255 || (v16 & 1) == 0)
  {
    v17 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = a1;
    *(_BYTE *)(v2 + 24) = 1;
    sub_10004F354(v17, v16);
    swift_errorRetain(a1);
    return sub_10004EFC0();
  }
  return result;
}

BOOL sub_10004EFC0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t *);
  uint64_t v9;
  char v10;
  _BYTE v11[24];

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
  {
    v2 = *(_QWORD *)(v0 + 16);
    swift_beginAccess(v0 + 168, v11, 1, 0);
    v3 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 168) = _swiftEmptyArrayStorage;
    sub_1000513EC(v2, v1);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v5 = (uint64_t *)(v3 + 40);
      do
      {
        v7 = (void (*)(uint64_t *))*(v5 - 1);
        v6 = *v5;
        v9 = v2;
        v10 = v1 & 1;
        swift_retain(v6);
        v7(&v9);
        swift_release(v6);
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    sub_10004F354(v2, v1);
    swift_bridgeObjectRelease(v3);
  }
  return v1 != 255;
}

void Domain.__allocating_init()()
{
  uint64_t v0;

  sub_100018C8C(v0, 176);
  Domain.init()();
  sub_100005D94();
}

uint64_t Domain.init()()
{
  uint64_t v0;
  _BYTE v2[136];

  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = -1;
  sub_10004DE08((uint64_t)v2);
  sub_10004DE28((uint64_t)v2, v0 + 32);
  *(_QWORD *)(v0 + 168) = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t Domain.deinit()
{
  uint64_t v0;

  Domain.deallocate()();
  sub_10004F354(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
  return v0;
}

Swift::Void __swiftcall Domain.deallocate()()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = *(_BYTE *)(v0 + 24);
  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v3 + 24);
    if (v4 != TSNullClockIdentifier)
    {
      sub_10004F644(*(_QWORD *)(v0 + 16), 0);
      if (qword_100079108 != -1)
        swift_once(&qword_100079108, sub_10004DFDC);
      v5 = type metadata accessor for Logger(0);
      v6 = sub_100026E38(v5, (uint64_t)qword_100079128);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v9 = 134217984;
        v14 = v4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "%llx: Deallocating", v9, 0xCu);
        swift_slowDealloc(v9, -1, -1);
      }

      if (qword_100079100 != -1)
        swift_once(&qword_100079100, sub_10004DF20);
      v10 = sub_100018C8C((uint64_t)&unk_10006D230, 32);
      *(_QWORD *)(v10 + 16) = v1;
      *(_QWORD *)(v10 + 24) = v4;
      swift_retain(v1);
      sub_10004E20C((uint64_t)sub_10004FCB8, v10);
      swift_release(v10);
      sub_10004F354(v3, v2);
    }
  }
  sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
  v11 = sub_100051484(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 207);
  v12 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v11;
  v13 = *(_BYTE *)(v1 + 24);
  *(_BYTE *)(v1 + 24) = 1;
  sub_10004F354(v12, v13);
}

uint64_t sub_10004F354(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_10004F36C(result, a2 & 1);
  return result;
}

uint64_t sub_10004F36C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_release(a1);
}

uint64_t Domain.__deallocating_deinit()
{
  uint64_t v0;

  Domain.deinit();
  return swift_deallocClassInstance(v0, 176, 7);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Domain.bind(peer:)(Swift::String peer)
{
  uint64_t v1;
  _OWORD v2[8];
  _BYTE __dst[128];

  memset(v2, 0, sizeof(v2));
  sub_10004F438((uint64_t)v2, 0x80u, peer._countAndFlagsBits, (uint64_t)peer._object);
  if (!v1)
  {
    memcpy(__dst, v2, sizeof(__dst));
    sub_10004F52C(__dst);
  }
}

uint64_t sub_10004F438(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  id v10;
  uint64_t v11;

  v5 = a2;
  v11 = a2;
  v6 = String.utf8CString.getter(a3, a4);
  v7 = StringToSockAddr(v6 + 32, a1, v5, &v11);
  v8 = swift_release(v6);
  result = noErr.getter(v8);
  if (v7 != (_DWORD)result)
  {
    sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v10 = sub_100051478(v7, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 154);
    return swift_willThrow(v10);
  }
  return result;
}

uint64_t sub_10004F52C(const void *a1)
{
  uint64_t v1;
  id v4;
  _BYTE __dst[136];
  _BYTE v6[136];
  _BYTE v7[136];

  sub_10004DE28(v1 + 32, (uint64_t)v6);
  sub_10004DE28((uint64_t)v6, (uint64_t)v7);
  if (sub_1000511AC((uint64_t)v7) == 1)
  {
    memcpy(__dst, a1, 0x80uLL);
    sub_100051404((uint64_t)__dst);
    sub_10004DE28((uint64_t)__dst, v1 + 32);
    return sub_10004F650();
  }
  else
  {
    sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v4 = sub_100051484(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 166);
    return swift_willThrow(v4);
  }
}

BOOL Domain.isBound.getter()
{
  uint64_t v0;
  _BYTE v2[136];

  sub_10004DE28(v0 + 32, (uint64_t)v2);
  return sub_1000511AC((uint64_t)v2) == 0;
}

uint64_t sub_10004F644(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_retain(a1);
}

uint64_t sub_10004F650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[136];
  _BYTE __src[136];
  _BYTE __dst[128];

  v1 = v0;
  result = sub_10004EFC0();
  if ((result & 1) == 0)
  {
    sub_10004DE28(v0 + 32, (uint64_t)v15);
    sub_10004DE28((uint64_t)v15, (uint64_t)__src);
    result = sub_1000511AC((uint64_t)__src);
    if ((_DWORD)result != 1)
    {
      memcpy(__dst, __src, sizeof(__dst));
      if (qword_100079108 != -1)
        swift_once(&qword_100079108, sub_10004DFDC);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_100026E38(v3, (uint64_t)qword_100079128);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(12, -1);
        v8 = swift_slowAlloc(32, -1);
        v14 = v8;
        *(_DWORD *)v7 = 136446210;
        v9 = sub_100021AEC();
        v11 = v10;
        v13 = sub_10000EC54((uint64_t)v9, v10, &v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4);
        swift_bridgeObjectRelease(v11);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: Allocating", v7, 0xCu);
        swift_arrayDestroy(v8, 1);
        swift_slowDealloc(v8, -1, -1);
        swift_slowDealloc(v7, -1, -1);
      }

      if (qword_100079100 != -1)
        swift_once(&qword_100079100, sub_10004DF20);
      v12 = swift_allocObject(&unk_10006D438, 152, 7);
      *(_QWORD *)(v12 + 16) = v1;
      memcpy((void *)(v12 + 24), __dst, 0x80uLL);
      swift_retain(v1);
      sub_10004E20C((uint64_t)sub_1000513A4, v12);
      return swift_release(v12);
    }
  }
  return result;
}

uint64_t Domain.allocate(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v5 = sub_100018C8C((uint64_t)&unk_10006D258, 32);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  sub_10000F664(v2 + 168, (uint64_t)v10, 33);
  swift_retain(a2);
  sub_100050ECC((uint64_t *)&unk_100079360);
  v6 = *(char **)(*(_QWORD *)(v2 + 168) + 16);
  sub_100050F24(v6, (uint64_t *)&unk_100079360);
  v7 = *(_QWORD *)(v2 + 168);
  *(_QWORD *)(v7 + 16) = v6 + 1;
  v8 = v7 + 16 * (_QWORD)v6;
  *(_QWORD *)(v8 + 32) = sub_1000511E4;
  *(_QWORD *)(v8 + 40) = v5;
  swift_endAccess(v10);
  return sub_10004F650();
}

void sub_10004F944(void *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  id v34;
  uint64_t v35;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_100079108 != -1)
      swift_once(&qword_100079108, sub_10004DFDC);
    v20 = sub_100026E38(v7, (uint64_t)qword_100079128);
    v21 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v20, v7);
    __chkstk_darwin(v21, v22);
    *(_QWORD *)&v33[-16] = a4;
    __chkstk_darwin(v23, &v33[-32]);
    *(_QWORD *)&v33[-16] = a1;
    sub_100045A98(sub_10005146C, v24, sub_100018B80);
    sub_100051280(a1, 1);
    goto LABEL_14;
  }
  v34 = 0;
  v12 = objc_msgSend(a1, "removePTPInstanceWithIdentifier:error:", a4, &v34);
  v13 = v34;
  if ((v12 & 1) == 0)
  {
    v25 = v34;
    v26 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v27);
    if (qword_100079108 != -1)
      swift_once(&qword_100079108, sub_10004DFDC);
    v28 = sub_100026E38(v7, (uint64_t)qword_100079128);
    v29 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v28, v7);
    __chkstk_darwin(v29, v30);
    *(_QWORD *)&v33[-16] = a4;
    __chkstk_darwin(v31, &v33[-32]);
    *(_QWORD *)&v33[-16] = v26;
    sub_100045A98(sub_10005146C, v32, sub_100018B80);
    sub_100051280(a1, 0);
    swift_errorRelease(v26);
LABEL_14:
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
    return;
  }
  v14 = qword_100079108;
  v15 = v34;
  if (v14 != -1)
    swift_once(&qword_100079108, sub_10004DFDC);
  v16 = sub_100026E38(v7, (uint64_t)qword_100079128);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    v34 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%llx: Deallocated", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }
  sub_100051280(a1, 0);

}

uint64_t sub_10004FCA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100051470();
  v0 = sub_100018FA8();
  return swift_deallocObject(v0, v1, v2);
}

void sub_10004FCB8(void *a1, char a2)
{
  uint64_t v2;

  sub_10004F944(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_10004FCC4(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    sub_10004EE48((uint64_t)a1);
    sub_100051280(a1, 1);
  }
  else
  {
    v13 = 0;
    v14 = TSNullClockIdentifier;
    v6 = objc_msgSend(a1, "addPTPInstance:error:", &v14, &v13);
    v7 = v13;
    if (v6)
    {
      v8 = v14;
      v9 = v13;
      sub_10004FE0C(v8, a4, 10);
      sub_100051280(a1, 0);
    }
    else
    {
      v10 = v13;
      v11 = _convertNSErrorToError(_:)(v7);

      swift_willThrow(v12);
      sub_10004EE48(v11);
      sub_100051280(a1, 0);
      swift_errorRelease(v11);
    }
  }
}

uint64_t sub_10004FE0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSString v37;
  unsigned int v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  id v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id aBlock[5];
  _QWORD *v95;
  _QWORD v96[2];

  v4 = v3;
  v91 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v89 = *(_QWORD *)(v7 - 8);
  v90 = v7;
  __chkstk_darwin(v7, v8);
  v88 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v86 = *(_QWORD *)(v10 - 8);
  v87 = v10;
  __chkstk_darwin(v10, v11);
  v85 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTimeInterval(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (uint64_t *)((char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for DispatchTime(0);
  v18 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84, v19);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v83 = (char *)&v80 - v24;
  v25 = *(unsigned __int8 *)(a2 + 1);
  if (v25 == 30)
  {
    v26 = *(_QWORD *)(a2 + 8);
    v27 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    if (v25 != 2)
    {
LABEL_14:
      sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
      v57 = sub_100051484(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 261);
      swift_willThrow(v57);
      goto LABEL_20;
    }
    v26 = sub_10004DD58();
  }
  v96[0] = v26;
  v96[1] = v27;
  sub_100021638();
  if (!v28)
    goto LABEL_14;
  v29 = v28;
  v82 = v4;
  v30 = objc_msgSend((id)objc_opt_self(TSClockManager), "sharedClockManager");
  v31 = a1;
  v32 = v30;
  v81 = v31;
  v33 = objc_msgSend(v30, "clockWithClockIdentifier:");

  if (!v33)
  {
LABEL_16:
    swift_bridgeObjectRelease(v29);
    v58 = v91;
    if (v91)
    {
      sub_1000085DC(0, (unint64_t *)&qword_100077B50, OS_dispatch_queue_ptr);
      v80 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()(v80);
      *v17 = 100;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DispatchTimeInterval.milliseconds(_:), v13);
      v59 = v83;
      + infix(_:_:)(v21, v17);
      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
      v60 = *(void (**)(char *, uint64_t))(v18 + 8);
      v61 = v84;
      v60(v21, v84);
      v62 = (_QWORD *)swift_allocObject(&unk_10006D460, 168, 7);
      v63 = v82;
      v64 = v81;
      v62[2] = v82;
      v62[3] = v64;
      memcpy(v62 + 4, (const void *)a2, 0x80uLL);
      v62[20] = v58;
      aBlock[4] = sub_1000513D4;
      v95 = v62;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_10000C66C;
      aBlock[3] = &unk_10006D478;
      v65 = _Block_copy(aBlock);
      v66 = v95;
      swift_retain(v63);
      v67 = swift_release(v66);
      v68 = v85;
      static DispatchQoS.unspecified.getter(v67);
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_1000057B8((unint64_t *)&qword_100077C90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v70 = v69;
      v71 = sub_100008414((uint64_t *)&unk_100077A10);
      sub_1000084BC((unint64_t *)&qword_100077CA0, (uint64_t *)&unk_100077A10);
      v72 = v88;
      v73 = v71;
      v74 = v90;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v73, v75, v90, v70);
      v76 = (void *)v80;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v59, v68, v72, v65);
      _Block_release(v65);

      (*(void (**)(char *, uint64_t))(v89 + 8))(v72, v74);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v68, v87);
      return ((uint64_t (*)(char *, uint64_t))v60)(v59, v61);
    }
    sub_1000085DC(0, (unint64_t *)&qword_100077C80, NSError_ptr);
    v57 = sub_100051484(-536870212, 0, 0, (uint64_t)"SidecarTimeSync/SidecarTimeSync.swift", 37, 2, 268);
    swift_willThrow(v57);
    goto LABEL_20;
  }
  v34 = objc_opt_self(TSgPTPClock);
  v35 = swift_dynamicCastObjCClass(v33, v34);
  if (!v35)
  {

    goto LABEL_16;
  }
  v36 = (void *)v35;
  LOWORD(v92) = 0;
  v37 = String._bridgeToObjectiveC()();
  aBlock[0] = 0;
  v38 = objc_msgSend(v36, "addUnicastUDPv6EtEPortOnInterfaceNamed:withDestinationAddress:allocatedPortNumber:error:", v37, v96, &v92, aBlock);

  v39 = aBlock[0];
  if (v38)
  {
    v40 = aBlock[0];
    swift_bridgeObjectRelease(v29);
    if (qword_100079108 != -1)
      swift_once(&qword_100079108, sub_10004DFDC);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_100026E38(v41, (uint64_t)qword_100079128);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = v81;
    if (v45)
    {
      v47 = swift_slowAlloc(22, -1);
      v48 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v48;
      *(_DWORD *)v47 = 136446466;
      v49 = sub_100021AEC();
      v51 = v50;
      v92 = sub_10000EC54((uint64_t)v49, v50, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v47 + 4);
      swift_bridgeObjectRelease(v51);
      *(_WORD *)(v47 + 12) = 2048;
      v92 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v47 + 14);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Allocated %llx", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy(v48, 1);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }

    v52 = type metadata accessor for Clock();
    swift_allocObject(v52, 56, 7);
    v53 = sub_100050600(v36);
    v54 = v82;
    v55 = *(_QWORD *)(v82 + 16);
    *(_QWORD *)(v82 + 16) = v53;
    v56 = *(_BYTE *)(v54 + 24);
    *(_BYTE *)(v54 + 24) = 0;
    sub_10004F354(v55, v56);
    return sub_10004EFC0();
  }
  v78 = aBlock[0];
  v57 = (id)_convertNSErrorToError(_:)(v39);

  swift_willThrow(v79);
  swift_bridgeObjectRelease(v29);
LABEL_20:
  sub_10004EE48((uint64_t)v57);
  swift_errorRelease(v57);
  return sub_10004EFC0();
}

uint64_t sub_100050530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (!__OFSUB__(a4, 1))
    return sub_10004FE0C(a2, a3, a4 - 1);
  __break(1u);
  return result;
}

uint64_t static Clock.nullClockIdentifier.getter()
{
  return TSNullClockIdentifier;
}

void Clock.__allocating_init(clockIdentifier:)(uint64_t a1)
{
  uint64_t v1;

  sub_100018C8C(v1, 56);
  Clock.init(clockIdentifier:)(a1);
  sub_100005D94();
}

void Clock.init(clockIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = TSNullgPTPClockIdentity;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)TSgPTPClock), "initWithClockIdentifier:", a1);
  sub_100005D94();
}

uint64_t sub_100050600(void *a1)
{
  uint64_t v1;
  id v3;

  *(_QWORD *)(v1 + 32) = TSNullgPTPClockIdentity;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  v3 = objc_msgSend(a1, "clockIdentifier");
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = v3;
  return v1;
}

Swift::UInt64 __swiftcall Clock.domainTimeForMachAbsoluteTime(_:)(Swift::UInt64 a1)
{
  uint64_t v1;
  Swift::UInt64 result;
  uint64_t v3;

  v3 = TSNullgPTPClockIdentity;
  result = (Swift::UInt64)objc_msgSend(*(id *)(v1 + 16), "convertFromMachAbsoluteToDomainTime:grandmasterUsed:", a1, &v3);
  *(_QWORD *)(v1 + 32) = v3;
  return result;
}

Swift::UInt64 __swiftcall Clock.machAbsoluteTimeForDomainTime(_:)(Swift::UInt64 a1)
{
  uint64_t v1;
  Swift::UInt64 result;
  __int16 v3;
  uint64_t v4;

  v4 = TSNullgPTPClockIdentity;
  v3 = 0;
  result = (Swift::UInt64)objc_msgSend(*(id *)(v1 + 16), "convertFromDomainToMachAbsoluteTime:grandmasterUsed:portNumber:", a1, &v4, &v3);
  *(_QWORD *)(v1 + 32) = v4;
  return result;
}

uint64_t sub_100050738()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _BYTE v3[24];

  result = swift_beginAccess(v0 + 40, v3, 0, 0);
  v2 = *(_QWORD *)(v0 + 48);
  if (*(_BYTE *)(v0 + 40) == 1)
  {
    if (!v2)
      return sub_100050788();
  }
  else if (v2)
  {
    return sub_100050B20();
  }
  return result;
}

uint64_t sub_100050788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(_QWORD *, uint64_t);
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD aBlock[5];
  uint64_t v64;

  v0 = type metadata accessor for DispatchTimeInterval(0);
  v59 = *(_QWORD *)(v0 - 8);
  v60 = v0;
  sub_100018C80();
  __chkstk_darwin(v1, v2);
  v58 = (uint64_t *)((char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v51 - v6);
  v8 = type metadata accessor for DispatchTime(0);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  sub_100018C80();
  __chkstk_darwin(v9, v10);
  sub_100027248();
  v57 = v12 - v11;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  sub_100018C80();
  __chkstk_darwin(v14, v15);
  sub_100027248();
  v18 = v17 - v16;
  v19 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v19 - 8);
  v54 = v19;
  sub_100018C80();
  __chkstk_darwin(v20, v21);
  sub_100027248();
  v24 = v23 - v22;
  v25 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  sub_100027248();
  v30 = v29 - v28;
  sub_1000085DC(0, (unint64_t *)&unk_100078B50, OS_dispatch_source_ptr);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000057B8(&qword_100077E50, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v32 = v31;
  v33 = sub_100008414(&qword_100077E58);
  sub_1000084BC(&qword_100077E60, &qword_100077E58);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v25, v32);
  v35 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v30, 0);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v30, v25);
  ObjectType = swift_getObjectType(v35);
  v37 = sub_100018C8C((uint64_t)&unk_10006D3C0, 24);
  v38 = v52;
  swift_weakInit(v37 + 16, v52);
  v39 = sub_100018C8C((uint64_t)&unk_10006D3E8, 32);
  *(_QWORD *)(v39 + 16) = v37;
  *(_QWORD *)(v39 + 24) = v35;
  aBlock[4] = sub_10005135C;
  v64 = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000C66C;
  aBlock[3] = &unk_10006D400;
  v40 = _Block_copy(aBlock);
  swift_retain(v37);
  v41 = swift_unknownObjectRetain(v35);
  static DispatchQoS.unspecified.getter(v41);
  sub_1000374A0();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v24, v18, v40, ObjectType);
  _Block_release(v40);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v18, v56);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v24, v54);
  v42 = v64;
  swift_release(v37);
  v43 = swift_release(v42);
  v44 = v57;
  static DispatchTime.now()(v43);
  *v7 = 5;
  v45 = v59;
  v46 = v60;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v59 + 104))(v7, enum case for DispatchTimeInterval.seconds(_:), v60);
  v47 = v58;
  sub_1000152B4(v58);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v44, v7, v47, ObjectType);
  v48 = *(void (**)(_QWORD *, uint64_t))(v45 + 8);
  v48(v47, v46);
  v48(v7, v46);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v44, v62);
  OS_dispatch_source.activate()();
  v49 = *(_QWORD *)(v38 + 48);
  *(_QWORD *)(v38 + 48) = v35;
  return swift_unknownObjectRelease(v49);
}

uint64_t sub_100050B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    swift_getObjectType(v2);
    swift_unknownObjectRetain(v2);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v2);
    v3 = *(_QWORD *)(v1 + 48);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v1 + 48) = 0;
  return swift_unknownObjectRelease(v3);
}

uint64_t Clock.heartbeat.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  sub_10000F664(v0 + 40, (uint64_t)v2, 0);
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t Clock.heartbeat.setter(char a1)
{
  uint64_t v1;
  _BYTE v4[24];

  sub_10000F664(v1 + 40, (uint64_t)v4, 1);
  *(_BYTE *)(v1 + 40) = a1;
  return sub_100050738();
}

uint64_t (*Clock.heartbeat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  sub_10000F664(v1 + 40, a1, 33);
  return sub_100050C24;
}

uint64_t sub_100050C24(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return sub_100050738();
  return result;
}

void sub_100050C54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = mach_absolute_time();
    v7 = Clock.domainTimeForMachAbsoluteTime(_:)(v6);
    sub_100051364(*(_QWORD *)(v5 + 32), v6, v7, (int)objc_msgSend(*(id *)(v5 + 16), "lockState"));
    if (qword_100079108 != -1)
      swift_once(&qword_100079108, sub_10004DFDC);
    v8 = type metadata accessor for Logger(0);
    sub_100026E38(v8, (uint64_t)qword_100079128);
    v9 = swift_retain(v5);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(42, -1);
      *(_DWORD *)v12 = 134218752;
      v13 = *(_QWORD *)(v5 + 24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 4);
      *(_WORD *)(v12 + 12) = 2048;
      v13 = *(_QWORD *)(v5 + 32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 14);
      swift_release(v5);
      *(_WORD *)(v12 + 22) = 2048;
      v13 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 24);
      *(_WORD *)(v12 + 32) = 2048;
      v13 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v12 + 34);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%llx: (%llx) %llu -> %llu", (uint8_t *)v12, 0x2Au);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release(v5);
    }
    if (v7 == TSInvalidTime)
    {
      swift_getObjectType(a2);
      OS_dispatch_source.cancel()();
    }
    swift_release(v5);
  }
  else
  {
    swift_getObjectType(a2);
    OS_dispatch_source.cancel()();
  }
}

uint64_t Clock.deinit()
{
  uint64_t v0;

  sub_1000190E4();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t Clock.__deallocating_deinit()
{
  uint64_t v0;

  Clock.deinit();
  return swift_deallocClassInstance(v0, 56, 7);
}

char *sub_100050ECC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *result;

  v3 = *v1;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = sub_100050F64(result, *(_QWORD *)(v3 + 16) + 1, 1, v3, a1);
    *v1 = (uint64_t)result;
  }
  return result;
}

char *sub_100050F24(char *result, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*v2 + 24);
  if ((uint64_t)(result + 1) > (uint64_t)(v3 >> 1))
  {
    result = sub_100050F64((char *)(v3 > 1), (int64_t)(result + 1), 1, *v2, a2);
    *v2 = (uint64_t)result;
  }
  return result;
}

char *sub_100050F64(char *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a4 + 24);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *(_QWORD *)(a4 + 16);
  if (v8 <= v9)
    v10 = *(_QWORD *)(a4 + 16);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100008414(a5);
    v12 = (char *)sub_100018C8C(v11, 16 * v10 + 32);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  if ((v6 & 1) != 0)
  {
    sub_10005113C((char *)(a4 + 32), v9, v14);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    sub_100051048(0, v9, (unint64_t)v14, a4);
  }
  return v12;
}

uint64_t sub_100051048(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    sub_10000C2B8();
    v13 = "UnsafeMutablePointer.initialize with negative count";
    v14 = 51;
    goto LABEL_11;
  }
  v7 = a4 + 16 * a1 + 32;
  v8 = a3 + 16 * v4;
  if (v7 >= v8 || v7 + 16 * v4 <= a3)
  {
    sub_100008414(&qword_100078B48);
    swift_arrayInitWithCopy(a3);
    swift_bridgeObjectRelease(a4);
    return v8;
  }
  sub_10000C2B8();
  v13 = "UnsafeMutablePointer.initialize overlapping range";
  v14 = 49;
LABEL_11:
  result = sub_10000C2E4((uint64_t)"Fatal error", 11, 2, (uint64_t)v13, v14, v11, (uint64_t)"Swift/UnsafePointer.swift", v12, v15, v16, v17);
  __break(1u);
  return result;
}

char *sub_10005113C(char *__src, uint64_t a2, char *__dst)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a2 < 0)
  {
    sub_10000C2B8();
    __src = (char *)sub_10000C2E4((uint64_t)"Fatal error", 11, 2, (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count", 55, v4, (uint64_t)"Swift/UnsafePointer.swift", v5, v6, v7, v8);
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_1000511AC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000511C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = sub_100018FA8();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t type metadata accessor for TimeSyncManager()
{
  return objc_opt_self(_TtC15SidecarTimeSyncP33_52E478E0294A7D1A30B0593D640BE43C15TimeSyncManager);
}

uint64_t type metadata accessor for Domain()
{
  return objc_opt_self(_TtC15SidecarTimeSync6Domain);
}

uint64_t type metadata accessor for Clock()
{
  return objc_opt_self(_TtC15SidecarTimeSync5Clock);
}

void sub_100051248()
{
  uint64_t v0;

  sub_10004EDB0(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100051250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100051260(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100051268(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_100051280(a1, a2 & 1);
}

void sub_100051280(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

void sub_10005128C()
{
  uint64_t v0;

  sub_10004E3B8(*(void **)(v0 + 16));
}

uint64_t sub_100051294()
{
  uint64_t v0;

  sub_1000190E4();
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000512B4()
{
  sub_10004E6B4();
}

uint64_t sub_1000512BC()
{
  uint64_t v0;

  sub_1000190E4();
  sub_100051280(*(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

BOOL sub_1000512E8()
{
  uint64_t v0;

  return sub_10004EA1C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

id sub_1000512F4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

id sub_100051300(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_1000512F4(result, a2 & 1);
  return result;
}

uint64_t sub_100051318()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005133C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100051470();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = sub_100018FA8();
  return swift_deallocObject(v1, v2, v3);
}

void sub_10005135C()
{
  uint64_t v0;

  sub_100050C54(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100051364(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return kdebug_trace(553976352, a1, a2, a3, a4);
}

uint64_t sub_100051384()
{
  uint64_t v0;

  sub_100051470();
  return swift_deallocObject(v0, 152, 7);
}

void sub_1000513A4(void *a1, char a2)
{
  uint64_t v2;

  sub_10004FCC4(a1, a2 & 1, *(_QWORD *)(v2 + 16), v2 + 24);
}

uint64_t sub_1000513B4()
{
  uint64_t v0;

  sub_100051470();
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1000513D4()
{
  uint64_t *v0;

  return sub_100050530(v0[2], v0[3], (uint64_t)(v0 + 4), v0[20]);
}

uint64_t sub_1000513E4()
{
  uint64_t v0;

  return sub_10004DE90(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000513EC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_10004F644(result, a2 & 1);
  return result;
}

uint64_t sub_100051404(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t sub_10005140C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100051470()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 16));
}

id sub_100051478(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100051490(a1, a2, a3, a4, a5, a6, a7, &NSOSStatusErrorDomain);
}

id sub_100051484(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100051490(a1, a2, a3, a4, a5, a6, a7, &NSMachErrorDomain);
}

id sub_100051490(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v11;
  uint64_t v12;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a8);
  return sub_10004828C(v11, v12, a1, a2, a3, 0);
}

void SidecarPowerLogDisplaySession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  __CFString *v10;
  void *v11;
  void *v12;
  _QWORD v13[3];
  _QWORD v14[3];

  v13[0] = CFSTR("IsConnected");
  v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1));
  v6 = (void *)v5;
  v7 = &stru_10006D658;
  if (a2 == 1)
    v7 = CFSTR("HEVC");
  if (!a2)
    v7 = CFSTR("H.264");
  v14[0] = v5;
  v14[1] = v7;
  v13[1] = CFSTR("Codec");
  v13[2] = CFSTR("Transport");
  v8 = 1;
  if (a3 != 2)
    v8 = -1;
  if (a3 == 1)
    v9 = 0;
  else
    v9 = v8;
  v10 = v7;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v9));
  v14[2] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 3));

  PLLogRegisteredEvent(94, CFSTR("ConnectedDevicesChanged"), v12, 0);
}

const __CFData *sub_100051650()
{
  io_registry_entry_t v0;
  __CFString *v1;
  const __CFData *CFProperty;
  uint64_t v3;
  const UInt8 *BytePtr;
  const char *v5;
  CFStringRef v6;
  uint64_t v7;

  v0 = IORegistryEntryFromPath(kIOMainPortDefault, "IOService:/");
  v1 = CFSTR("model");
  if (v0)
  {
    CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v0, CFSTR("model"), 0, 0);
    IOObjectRelease(v0);
    v3 = objc_opt_class(NSData);
    if ((objc_opt_isKindOfClass(CFProperty, v3) & 1) != 0)
    {
      BytePtr = CFDataGetBytePtr(CFProperty);
      if (BytePtr)
      {
        v5 = (const char *)BytePtr;
        if (CFDataGetLength(CFProperty) >= 1)
        {
          v6 = CFStringCreateWithCString(0, v5, 0);
LABEL_9:

          CFProperty = (const __CFData *)v6;
        }
      }
    }
    else
    {
      v7 = objc_opt_class(NSString);
      if ((objc_opt_isKindOfClass(CFProperty, v7) & 1) == 0)
      {
        v6 = 0;
        goto LABEL_9;
      }
    }
  }
  else
  {
    CFProperty = 0;
  }

  return CFProperty;
}

__CFString *sub_10005174C()
{
  BOOL v0;
  size_t v2;
  char __s1[64];

  v2 = 64;
  if (sysctlbyname("kern.osversion", __s1, &v2, 0, 0))
    v0 = 1;
  else
    v0 = v2 == 0;
  if (v0)
    return &stru_10006D658;
  v2 = strnlen(__s1, 0x40uLL);
  return (__CFString *)(id)CFStringCreateWithBytes(0, (const UInt8 *)__s1, v2, 0, 0);
}

void sub_1000517F8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  operator delete();
}

void sub_100051838()
{
  sub_100051844();
}

void sub_100051844()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10005188C(exception);
}

void sub_100051878(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10005188C(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "basic_string");
  return result;
}

void sub_1000518B8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.sidecar", "awd");
  v2 = (void *)qword_10007C868;
  qword_10007C868 = (uint64_t)v1;

}

void SidecarAWDLogSidebarUsageSummary(void *a1, unint64_t a2, uint64_t *a3, double a4)
{
  id v7;
  id v8;
  const char *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)(PB::Base *);
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE __dst[24];
  double v51;
  __int16 v52;
  uint64_t v53;

  v7 = a1;
  v33 = &off_10006D518;
  v43 = 0;
  v49 = 0;
  sub_100051C1C((uint64_t)&v33);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString")));
  v9 = (const char *)objc_msgSend(v8, "UTF8String");
  v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_100051838();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    *(_QWORD *)&__dst[8] = v11;
    *(_QWORD *)&__dst[16] = v14 | 0x8000000000000000;
    *(_QWORD *)__dst = v12;
    goto LABEL_8;
  }
  __dst[23] = v10;
  v12 = __dst;
  if (v10)
LABEL_8:
    memmove(v12, v9, v11);
  v12[v11] = 0;
  sub_100051C1C((uint64_t)&v33);
  v15 = v43;
  if (*(char *)(v43 + 23) < 0)
    operator delete(*(void **)v43);
  *(_OWORD *)v15 = *(_OWORD *)__dst;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)&__dst[16];
  __dst[0] = 0;

  v37 = vcvtpd_u64_f64(a4 * 1000.0);
  if (a2 >= 3)
  {
    v16 = HIDWORD(v49) | 0x20;
  }
  else
  {
    v16 = HIDWORD(v49) | 0x80020;
    LODWORD(v49) = a2;
  }
  v17 = *((_OWORD *)a3 + 3);
  v34 = *((_OWORD *)a3 + 2);
  v41 = v17;
  v18 = *((_OWORD *)a3 + 5);
  v35 = *((_OWORD *)a3 + 4);
  v19 = *a3;
  v20 = a3[1];
  v21 = a3[13];
  v42 = a3[12];
  v22 = a3[2];
  v23 = a3[3];
  v47 = v19;
  v48 = v21;
  v24 = a3[14];
  v25 = a3[15];
  v45 = v22;
  v46 = v24;
  v44 = v18;
  v39 = v25;
  v40 = v20;
  v26 = a3[16];
  HIDWORD(v49) = v16 | 0x5FFDF;
  v38 = v23;
  v36 = v26;
  AWDPostMetric(0x880006u, (const PB::Base *)&v33);
  if (qword_10007C860 != -1)
    dispatch_once(&qword_10007C860, &stru_10006D4E8);
  v27 = qword_10007C868;
  if (os_log_type_enabled((os_log_t)qword_10007C868, OS_LOG_TYPE_DEBUG))
    v28 = (void *)v27;
  else
    v28 = 0;
  v29 = v28;
  v30 = v29;
  if (v29)
  {
    v31 = 0;
    v32 = 0;
    do
      v32 += a3[v31++];
    while (v31 != 17);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__dst = 138544130;
      *(_QWORD *)&__dst[4] = v7;
      *(_WORD *)&__dst[12] = 2048;
      *(_QWORD *)&__dst[14] = a2;
      *(_WORD *)&__dst[22] = 2048;
      v51 = a4;
      v52 = 2048;
      v53 = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "AWDSidecarDisplaySidebarUsage: {\n  uuid: %{public}@\n  position: %ld\n  duration: %.3f\n  buttons: %ld\n}", __dst, 0x2Au);
    }
  }

  sub_10005354C((PB::Base *)&v33);
}

void sub_100051BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  uint64_t v11;

  if (*(char *)(v11 - 137) < 0)
    operator delete(*(void **)(v11 - 160));

  sub_10005354C((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100051C1C(uint64_t result)
{
  if (!*(_QWORD *)(result + 104))
    operator new();
  return result;
}

void sub_100051C80(PB::Base *a1)
{
  sub_10005354C(a1);
  operator delete();
}

uint64_t sub_100051CA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unsigned __int8 v19;
  unint64_t v20;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  char v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  char v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;
  char v191;
  unsigned int v192;
  unint64_t v193;
  char v194;
  char v195;
  unsigned int v196;
  unint64_t v197;
  char v198;
  char v199;
  unsigned int v200;
  unint64_t v201;
  char v202;
  char v203;
  unsigned int v204;
  unint64_t v205;
  char v206;
  char v207;
  unsigned int v208;
  unint64_t v209;
  char v210;
  char v211;
  unsigned int v212;
  unint64_t v213;
  char v214;
  char v215;
  unsigned int v216;
  unint64_t v217;
  char v218;
  char v219;
  unsigned int v220;
  unint64_t v221;
  char v222;
  char v223;
  unsigned int v224;
  unint64_t v225;
  char v226;
  char v227;
  unsigned int v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  char v238;
  char v239;
  unsigned int v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  char v262;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)this;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
      break;
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_26;
      v15 += 7;
      v2 = v17;
      v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    v19 = 0;
    LODWORD(v20) = 0;
LABEL_20:
    result = PB::Reader::skip(this, v20, v19, 0);
    if (!(_DWORD)result)
      return result;
LABEL_21:
    v2 = *((_QWORD *)this + 1);
    v3 = *((_QWORD *)this + 2);
    v4 = *((unsigned __int8 *)this + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = v2 + 1;
    *((_QWORD *)this + 1) = v2 + 1;
    v13 = *(_BYTE *)(v8 + v2);
    v11 |= (unint64_t)(v13 & 0x7F) << v9;
    if ((v13 & 0x80) == 0)
      break;
    v9 += 7;
    v2 = v12;
    v14 = v10++ > 8;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  v19 = v11 & 7;
  if ((v11 & 7) != 4)
  {
    v20 = v11 >> 3;
    switch((v11 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 172) |= 0x20000u;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        v25 = *(_QWORD *)this;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)this + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_312;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_175:
          v28 = 0;
          goto LABEL_312;
        }
        v183 = 0;
        v184 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v24 == v23)
          {
            v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v185 = v23 + 1;
            v186 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)this + 1) = v185;
            v28 |= (unint64_t)(v186 & 0x7F) << v183;
            if (v186 < 0)
            {
              v183 += 7;
              v23 = v185;
              v14 = v184++ > 8;
              if (v14)
                goto LABEL_175;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v28 = 0;
          }
          break;
        }
LABEL_312:
        *(_QWORD *)(a1 + 152) = v28;
        goto LABEL_21;
      case 2u:
        operator new();
      case 3u:
        *(_DWORD *)(a1 + 172) |= 0x20u;
        v31 = *((_QWORD *)this + 1);
        v32 = *((_QWORD *)this + 2);
        v33 = *(_QWORD *)this;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)this + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_316;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_182:
          v36 = 0;
          goto LABEL_316;
        }
        v187 = 0;
        v188 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v32 == v31)
          {
            v36 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v189 = v31 + 1;
            v190 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)this + 1) = v189;
            v36 |= (unint64_t)(v190 & 0x7F) << v187;
            if (v190 < 0)
            {
              v187 += 7;
              v31 = v189;
              v14 = v188++ > 8;
              if (v14)
                goto LABEL_182;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v36 = 0;
          }
          break;
        }
LABEL_316:
        *(_QWORD *)(a1 + 48) = v36;
        goto LABEL_21;
      case 4u:
        *(_DWORD *)(a1 + 172) |= 0x80000u;
        v39 = *((_QWORD *)this + 1);
        v40 = *((_QWORD *)this + 2);
        v41 = *(_QWORD *)this;
        if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
        {
          v42 = 0;
          v43 = 0;
          v44 = 0;
          do
          {
            v45 = v39 + 1;
            *((_QWORD *)this + 1) = v39 + 1;
            v46 = *(_BYTE *)(v41 + v39);
            v44 |= (unint64_t)(v46 & 0x7F) << v42;
            if ((v46 & 0x80) == 0)
              goto LABEL_320;
            v42 += 7;
            v39 = v45;
            v14 = v43++ > 8;
          }
          while (!v14);
LABEL_189:
          LODWORD(v44) = 0;
          goto LABEL_320;
        }
        v191 = 0;
        v192 = 0;
        v44 = 0;
        if (v40 <= v39)
          v40 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v40 == v39)
          {
            LODWORD(v44) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v193 = v39 + 1;
            v194 = *(_BYTE *)(v41 + v39);
            *((_QWORD *)this + 1) = v193;
            v44 |= (unint64_t)(v194 & 0x7F) << v191;
            if (v194 < 0)
            {
              v191 += 7;
              v39 = v193;
              v14 = v192++ > 8;
              if (v14)
                goto LABEL_189;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v44) = 0;
          }
          break;
        }
LABEL_320:
        *(_DWORD *)(a1 + 168) = v44;
        goto LABEL_21;
      case 0xAu:
        *(_DWORD *)(a1 + 172) |= 0x10000u;
        v47 = *((_QWORD *)this + 1);
        v48 = *((_QWORD *)this + 2);
        v49 = *(_QWORD *)this;
        if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          do
          {
            v53 = v47 + 1;
            *((_QWORD *)this + 1) = v47 + 1;
            v54 = *(_BYTE *)(v49 + v47);
            v52 |= (unint64_t)(v54 & 0x7F) << v50;
            if ((v54 & 0x80) == 0)
              goto LABEL_324;
            v50 += 7;
            v47 = v53;
            v14 = v51++ > 8;
          }
          while (!v14);
LABEL_196:
          v52 = 0;
          goto LABEL_324;
        }
        v195 = 0;
        v196 = 0;
        v52 = 0;
        if (v48 <= v47)
          v48 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v48 == v47)
          {
            v52 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v197 = v47 + 1;
            v198 = *(_BYTE *)(v49 + v47);
            *((_QWORD *)this + 1) = v197;
            v52 |= (unint64_t)(v198 & 0x7F) << v195;
            if (v198 < 0)
            {
              v195 += 7;
              v47 = v197;
              v14 = v196++ > 8;
              if (v14)
                goto LABEL_196;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v52 = 0;
          }
          break;
        }
LABEL_324:
        *(_QWORD *)(a1 + 144) = v52;
        goto LABEL_21;
      case 0xBu:
        *(_DWORD *)(a1 + 172) |= 0x100u;
        v55 = *((_QWORD *)this + 1);
        v56 = *((_QWORD *)this + 2);
        v57 = *(_QWORD *)this;
        if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
        {
          v58 = 0;
          v59 = 0;
          v60 = 0;
          do
          {
            v61 = v55 + 1;
            *((_QWORD *)this + 1) = v55 + 1;
            v62 = *(_BYTE *)(v57 + v55);
            v60 |= (unint64_t)(v62 & 0x7F) << v58;
            if ((v62 & 0x80) == 0)
              goto LABEL_328;
            v58 += 7;
            v55 = v61;
            v14 = v59++ > 8;
          }
          while (!v14);
LABEL_203:
          v60 = 0;
          goto LABEL_328;
        }
        v199 = 0;
        v200 = 0;
        v60 = 0;
        if (v56 <= v55)
          v56 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v56 == v55)
          {
            v60 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v201 = v55 + 1;
            v202 = *(_BYTE *)(v57 + v55);
            *((_QWORD *)this + 1) = v201;
            v60 |= (unint64_t)(v202 & 0x7F) << v199;
            if (v202 < 0)
            {
              v199 += 7;
              v55 = v201;
              v14 = v200++ > 8;
              if (v14)
                goto LABEL_203;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v60 = 0;
          }
          break;
        }
LABEL_328:
        *(_QWORD *)(a1 + 72) = v60;
        goto LABEL_21;
      case 0xCu:
        *(_DWORD *)(a1 + 172) |= 0x4000u;
        v63 = *((_QWORD *)this + 1);
        v64 = *((_QWORD *)this + 2);
        v65 = *(_QWORD *)this;
        if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
        {
          v66 = 0;
          v67 = 0;
          v68 = 0;
          do
          {
            v69 = v63 + 1;
            *((_QWORD *)this + 1) = v63 + 1;
            v70 = *(_BYTE *)(v65 + v63);
            v68 |= (unint64_t)(v70 & 0x7F) << v66;
            if ((v70 & 0x80) == 0)
              goto LABEL_332;
            v66 += 7;
            v63 = v69;
            v14 = v67++ > 8;
          }
          while (!v14);
LABEL_210:
          v68 = 0;
          goto LABEL_332;
        }
        v203 = 0;
        v204 = 0;
        v68 = 0;
        if (v64 <= v63)
          v64 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v64 == v63)
          {
            v68 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v205 = v63 + 1;
            v206 = *(_BYTE *)(v65 + v63);
            *((_QWORD *)this + 1) = v205;
            v68 |= (unint64_t)(v206 & 0x7F) << v203;
            if (v206 < 0)
            {
              v203 += 7;
              v63 = v205;
              v14 = v204++ > 8;
              if (v14)
                goto LABEL_210;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v68 = 0;
          }
          break;
        }
LABEL_332:
        *(_QWORD *)(a1 + 128) = v68;
        goto LABEL_21;
      case 0xDu:
        *(_DWORD *)(a1 + 172) |= 0x40u;
        v71 = *((_QWORD *)this + 1);
        v72 = *((_QWORD *)this + 2);
        v73 = *(_QWORD *)this;
        if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          do
          {
            v77 = v71 + 1;
            *((_QWORD *)this + 1) = v71 + 1;
            v78 = *(_BYTE *)(v73 + v71);
            v76 |= (unint64_t)(v78 & 0x7F) << v74;
            if ((v78 & 0x80) == 0)
              goto LABEL_336;
            v74 += 7;
            v71 = v77;
            v14 = v75++ > 8;
          }
          while (!v14);
LABEL_217:
          v76 = 0;
          goto LABEL_336;
        }
        v207 = 0;
        v208 = 0;
        v76 = 0;
        if (v72 <= v71)
          v72 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v72 == v71)
          {
            v76 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v209 = v71 + 1;
            v210 = *(_BYTE *)(v73 + v71);
            *((_QWORD *)this + 1) = v209;
            v76 |= (unint64_t)(v210 & 0x7F) << v207;
            if (v210 < 0)
            {
              v207 += 7;
              v71 = v209;
              v14 = v208++ > 8;
              if (v14)
                goto LABEL_217;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v76 = 0;
          }
          break;
        }
LABEL_336:
        *(_QWORD *)(a1 + 56) = v76;
        goto LABEL_21;
      case 0xEu:
        *(_DWORD *)(a1 + 172) |= 1u;
        v79 = *((_QWORD *)this + 1);
        v80 = *((_QWORD *)this + 2);
        v81 = *(_QWORD *)this;
        if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
        {
          v82 = 0;
          v83 = 0;
          v84 = 0;
          do
          {
            v85 = v79 + 1;
            *((_QWORD *)this + 1) = v79 + 1;
            v86 = *(_BYTE *)(v81 + v79);
            v84 |= (unint64_t)(v86 & 0x7F) << v82;
            if ((v86 & 0x80) == 0)
              goto LABEL_340;
            v82 += 7;
            v79 = v85;
            v14 = v83++ > 8;
          }
          while (!v14);
LABEL_224:
          v84 = 0;
          goto LABEL_340;
        }
        v211 = 0;
        v212 = 0;
        v84 = 0;
        if (v80 <= v79)
          v80 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v80 == v79)
          {
            v84 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v213 = v79 + 1;
            v214 = *(_BYTE *)(v81 + v79);
            *((_QWORD *)this + 1) = v213;
            v84 |= (unint64_t)(v214 & 0x7F) << v211;
            if (v214 < 0)
            {
              v211 += 7;
              v79 = v213;
              v14 = v212++ > 8;
              if (v14)
                goto LABEL_224;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v84 = 0;
          }
          break;
        }
LABEL_340:
        *(_QWORD *)(a1 + 8) = v84;
        goto LABEL_21;
      case 0xFu:
        *(_DWORD *)(a1 + 172) |= 2u;
        v87 = *((_QWORD *)this + 1);
        v88 = *((_QWORD *)this + 2);
        v89 = *(_QWORD *)this;
        if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
        {
          v90 = 0;
          v91 = 0;
          v92 = 0;
          do
          {
            v93 = v87 + 1;
            *((_QWORD *)this + 1) = v87 + 1;
            v94 = *(_BYTE *)(v89 + v87);
            v92 |= (unint64_t)(v94 & 0x7F) << v90;
            if ((v94 & 0x80) == 0)
              goto LABEL_344;
            v90 += 7;
            v87 = v93;
            v14 = v91++ > 8;
          }
          while (!v14);
LABEL_231:
          v92 = 0;
          goto LABEL_344;
        }
        v215 = 0;
        v216 = 0;
        v92 = 0;
        if (v88 <= v87)
          v88 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v88 == v87)
          {
            v92 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v217 = v87 + 1;
            v218 = *(_BYTE *)(v89 + v87);
            *((_QWORD *)this + 1) = v217;
            v92 |= (unint64_t)(v218 & 0x7F) << v215;
            if (v218 < 0)
            {
              v215 += 7;
              v87 = v217;
              v14 = v216++ > 8;
              if (v14)
                goto LABEL_231;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v92 = 0;
          }
          break;
        }
LABEL_344:
        *(_QWORD *)(a1 + 16) = v92;
        goto LABEL_21;
      case 0x10u:
        *(_DWORD *)(a1 + 172) |= 0x200u;
        v95 = *((_QWORD *)this + 1);
        v96 = *((_QWORD *)this + 2);
        v97 = *(_QWORD *)this;
        if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
        {
          v98 = 0;
          v99 = 0;
          v100 = 0;
          do
          {
            v101 = v95 + 1;
            *((_QWORD *)this + 1) = v95 + 1;
            v102 = *(_BYTE *)(v97 + v95);
            v100 |= (unint64_t)(v102 & 0x7F) << v98;
            if ((v102 & 0x80) == 0)
              goto LABEL_348;
            v98 += 7;
            v95 = v101;
            v14 = v99++ > 8;
          }
          while (!v14);
LABEL_238:
          v100 = 0;
          goto LABEL_348;
        }
        v219 = 0;
        v220 = 0;
        v100 = 0;
        if (v96 <= v95)
          v96 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v96 == v95)
          {
            v100 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v221 = v95 + 1;
            v222 = *(_BYTE *)(v97 + v95);
            *((_QWORD *)this + 1) = v221;
            v100 |= (unint64_t)(v222 & 0x7F) << v219;
            if (v222 < 0)
            {
              v219 += 7;
              v95 = v221;
              v14 = v220++ > 8;
              if (v14)
                goto LABEL_238;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v100 = 0;
          }
          break;
        }
LABEL_348:
        *(_QWORD *)(a1 + 80) = v100;
        goto LABEL_21;
      case 0x11u:
        *(_DWORD *)(a1 + 172) |= 0x400u;
        v103 = *((_QWORD *)this + 1);
        v104 = *((_QWORD *)this + 2);
        v105 = *(_QWORD *)this;
        if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
        {
          v106 = 0;
          v107 = 0;
          v108 = 0;
          do
          {
            v109 = v103 + 1;
            *((_QWORD *)this + 1) = v103 + 1;
            v110 = *(_BYTE *)(v105 + v103);
            v108 |= (unint64_t)(v110 & 0x7F) << v106;
            if ((v110 & 0x80) == 0)
              goto LABEL_352;
            v106 += 7;
            v103 = v109;
            v14 = v107++ > 8;
          }
          while (!v14);
LABEL_245:
          v108 = 0;
          goto LABEL_352;
        }
        v223 = 0;
        v224 = 0;
        v108 = 0;
        if (v104 <= v103)
          v104 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v104 == v103)
          {
            v108 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v225 = v103 + 1;
            v226 = *(_BYTE *)(v105 + v103);
            *((_QWORD *)this + 1) = v225;
            v108 |= (unint64_t)(v226 & 0x7F) << v223;
            if (v226 < 0)
            {
              v223 += 7;
              v103 = v225;
              v14 = v224++ > 8;
              if (v14)
                goto LABEL_245;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v108 = 0;
          }
          break;
        }
LABEL_352:
        *(_QWORD *)(a1 + 88) = v108;
        goto LABEL_21;
      case 0x12u:
        *(_DWORD *)(a1 + 172) |= 4u;
        v111 = *((_QWORD *)this + 1);
        v112 = *((_QWORD *)this + 2);
        v113 = *(_QWORD *)this;
        if (v111 <= 0xFFFFFFFFFFFFFFF5 && v111 + 10 <= v112)
        {
          v114 = 0;
          v115 = 0;
          v116 = 0;
          do
          {
            v117 = v111 + 1;
            *((_QWORD *)this + 1) = v111 + 1;
            v118 = *(_BYTE *)(v113 + v111);
            v116 |= (unint64_t)(v118 & 0x7F) << v114;
            if ((v118 & 0x80) == 0)
              goto LABEL_356;
            v114 += 7;
            v111 = v117;
            v14 = v115++ > 8;
          }
          while (!v14);
LABEL_252:
          v116 = 0;
          goto LABEL_356;
        }
        v227 = 0;
        v228 = 0;
        v116 = 0;
        if (v112 <= v111)
          v112 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v112 == v111)
          {
            v116 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v229 = v111 + 1;
            v230 = *(_BYTE *)(v113 + v111);
            *((_QWORD *)this + 1) = v229;
            v116 |= (unint64_t)(v230 & 0x7F) << v227;
            if (v230 < 0)
            {
              v227 += 7;
              v111 = v229;
              v14 = v228++ > 8;
              if (v14)
                goto LABEL_252;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v116 = 0;
          }
          break;
        }
LABEL_356:
        *(_QWORD *)(a1 + 24) = v116;
        goto LABEL_21;
      case 0x13u:
        *(_DWORD *)(a1 + 172) |= 8u;
        v119 = *((_QWORD *)this + 1);
        v120 = *((_QWORD *)this + 2);
        v121 = *(_QWORD *)this;
        if (v119 <= 0xFFFFFFFFFFFFFFF5 && v119 + 10 <= v120)
        {
          v122 = 0;
          v123 = 0;
          v124 = 0;
          do
          {
            v125 = v119 + 1;
            *((_QWORD *)this + 1) = v119 + 1;
            v126 = *(_BYTE *)(v121 + v119);
            v124 |= (unint64_t)(v126 & 0x7F) << v122;
            if ((v126 & 0x80) == 0)
              goto LABEL_360;
            v122 += 7;
            v119 = v125;
            v14 = v123++ > 8;
          }
          while (!v14);
LABEL_259:
          v124 = 0;
          goto LABEL_360;
        }
        v231 = 0;
        v232 = 0;
        v124 = 0;
        if (v120 <= v119)
          v120 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v120 == v119)
          {
            v124 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v233 = v119 + 1;
            v234 = *(_BYTE *)(v121 + v119);
            *((_QWORD *)this + 1) = v233;
            v124 |= (unint64_t)(v234 & 0x7F) << v231;
            if (v234 < 0)
            {
              v231 += 7;
              v119 = v233;
              v14 = v232++ > 8;
              if (v14)
                goto LABEL_259;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v124 = 0;
          }
          break;
        }
LABEL_360:
        *(_QWORD *)(a1 + 32) = v124;
        goto LABEL_21;
      case 0x14u:
        *(_DWORD *)(a1 + 172) |= 0x1000u;
        v127 = *((_QWORD *)this + 1);
        v128 = *((_QWORD *)this + 2);
        v129 = *(_QWORD *)this;
        if (v127 <= 0xFFFFFFFFFFFFFFF5 && v127 + 10 <= v128)
        {
          v130 = 0;
          v131 = 0;
          v132 = 0;
          do
          {
            v133 = v127 + 1;
            *((_QWORD *)this + 1) = v127 + 1;
            v134 = *(_BYTE *)(v129 + v127);
            v132 |= (unint64_t)(v134 & 0x7F) << v130;
            if ((v134 & 0x80) == 0)
              goto LABEL_364;
            v130 += 7;
            v127 = v133;
            v14 = v131++ > 8;
          }
          while (!v14);
LABEL_266:
          v132 = 0;
          goto LABEL_364;
        }
        v235 = 0;
        v236 = 0;
        v132 = 0;
        if (v128 <= v127)
          v128 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v128 == v127)
          {
            v132 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v237 = v127 + 1;
            v238 = *(_BYTE *)(v129 + v127);
            *((_QWORD *)this + 1) = v237;
            v132 |= (unint64_t)(v238 & 0x7F) << v235;
            if (v238 < 0)
            {
              v235 += 7;
              v127 = v237;
              v14 = v236++ > 8;
              if (v14)
                goto LABEL_266;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v132 = 0;
          }
          break;
        }
LABEL_364:
        *(_QWORD *)(a1 + 112) = v132;
        goto LABEL_21;
      case 0x15u:
        *(_DWORD *)(a1 + 172) |= 0x2000u;
        v135 = *((_QWORD *)this + 1);
        v136 = *((_QWORD *)this + 2);
        v137 = *(_QWORD *)this;
        if (v135 <= 0xFFFFFFFFFFFFFFF5 && v135 + 10 <= v136)
        {
          v138 = 0;
          v139 = 0;
          v140 = 0;
          do
          {
            v141 = v135 + 1;
            *((_QWORD *)this + 1) = v135 + 1;
            v142 = *(_BYTE *)(v137 + v135);
            v140 |= (unint64_t)(v142 & 0x7F) << v138;
            if ((v142 & 0x80) == 0)
              goto LABEL_368;
            v138 += 7;
            v135 = v141;
            v14 = v139++ > 8;
          }
          while (!v14);
LABEL_273:
          v140 = 0;
          goto LABEL_368;
        }
        v239 = 0;
        v240 = 0;
        v140 = 0;
        if (v136 <= v135)
          v136 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v136 == v135)
          {
            v140 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v241 = v135 + 1;
            v242 = *(_BYTE *)(v137 + v135);
            *((_QWORD *)this + 1) = v241;
            v140 |= (unint64_t)(v242 & 0x7F) << v239;
            if (v242 < 0)
            {
              v239 += 7;
              v135 = v241;
              v14 = v240++ > 8;
              if (v14)
                goto LABEL_273;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v140 = 0;
          }
          break;
        }
LABEL_368:
        *(_QWORD *)(a1 + 120) = v140;
        goto LABEL_21;
      case 0x16u:
        *(_DWORD *)(a1 + 172) |= 0x800u;
        v143 = *((_QWORD *)this + 1);
        v144 = *((_QWORD *)this + 2);
        v145 = *(_QWORD *)this;
        if (v143 <= 0xFFFFFFFFFFFFFFF5 && v143 + 10 <= v144)
        {
          v146 = 0;
          v147 = 0;
          v148 = 0;
          do
          {
            v149 = v143 + 1;
            *((_QWORD *)this + 1) = v143 + 1;
            v150 = *(_BYTE *)(v145 + v143);
            v148 |= (unint64_t)(v150 & 0x7F) << v146;
            if ((v150 & 0x80) == 0)
              goto LABEL_372;
            v146 += 7;
            v143 = v149;
            v14 = v147++ > 8;
          }
          while (!v14);
LABEL_280:
          v148 = 0;
          goto LABEL_372;
        }
        v243 = 0;
        v244 = 0;
        v148 = 0;
        if (v144 <= v143)
          v144 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v144 == v143)
          {
            v148 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v245 = v143 + 1;
            v246 = *(_BYTE *)(v145 + v143);
            *((_QWORD *)this + 1) = v245;
            v148 |= (unint64_t)(v246 & 0x7F) << v243;
            if (v246 < 0)
            {
              v243 += 7;
              v143 = v245;
              v14 = v244++ > 8;
              if (v14)
                goto LABEL_280;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v148 = 0;
          }
          break;
        }
LABEL_372:
        *(_QWORD *)(a1 + 96) = v148;
        goto LABEL_21;
      case 0x17u:
        *(_DWORD *)(a1 + 172) |= 0x40000u;
        v151 = *((_QWORD *)this + 1);
        v152 = *((_QWORD *)this + 2);
        v153 = *(_QWORD *)this;
        if (v151 <= 0xFFFFFFFFFFFFFFF5 && v151 + 10 <= v152)
        {
          v154 = 0;
          v155 = 0;
          v156 = 0;
          do
          {
            v157 = v151 + 1;
            *((_QWORD *)this + 1) = v151 + 1;
            v158 = *(_BYTE *)(v153 + v151);
            v156 |= (unint64_t)(v158 & 0x7F) << v154;
            if ((v158 & 0x80) == 0)
              goto LABEL_376;
            v154 += 7;
            v151 = v157;
            v14 = v155++ > 8;
          }
          while (!v14);
LABEL_287:
          v156 = 0;
          goto LABEL_376;
        }
        v247 = 0;
        v248 = 0;
        v156 = 0;
        if (v152 <= v151)
          v152 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v152 == v151)
          {
            v156 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v249 = v151 + 1;
            v250 = *(_BYTE *)(v153 + v151);
            *((_QWORD *)this + 1) = v249;
            v156 |= (unint64_t)(v250 & 0x7F) << v247;
            if (v250 < 0)
            {
              v247 += 7;
              v151 = v249;
              v14 = v248++ > 8;
              if (v14)
                goto LABEL_287;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v156 = 0;
          }
          break;
        }
LABEL_376:
        *(_QWORD *)(a1 + 160) = v156;
        goto LABEL_21;
      case 0x18u:
        *(_DWORD *)(a1 + 172) |= 0x8000u;
        v159 = *((_QWORD *)this + 1);
        v160 = *((_QWORD *)this + 2);
        v161 = *(_QWORD *)this;
        if (v159 <= 0xFFFFFFFFFFFFFFF5 && v159 + 10 <= v160)
        {
          v162 = 0;
          v163 = 0;
          v164 = 0;
          do
          {
            v165 = v159 + 1;
            *((_QWORD *)this + 1) = v159 + 1;
            v166 = *(_BYTE *)(v161 + v159);
            v164 |= (unint64_t)(v166 & 0x7F) << v162;
            if ((v166 & 0x80) == 0)
              goto LABEL_380;
            v162 += 7;
            v159 = v165;
            v14 = v163++ > 8;
          }
          while (!v14);
LABEL_294:
          v164 = 0;
          goto LABEL_380;
        }
        v251 = 0;
        v252 = 0;
        v164 = 0;
        if (v160 <= v159)
          v160 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v160 == v159)
          {
            v164 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v253 = v159 + 1;
            v254 = *(_BYTE *)(v161 + v159);
            *((_QWORD *)this + 1) = v253;
            v164 |= (unint64_t)(v254 & 0x7F) << v251;
            if (v254 < 0)
            {
              v251 += 7;
              v159 = v253;
              v14 = v252++ > 8;
              if (v14)
                goto LABEL_294;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v164 = 0;
          }
          break;
        }
LABEL_380:
        *(_QWORD *)(a1 + 136) = v164;
        goto LABEL_21;
      case 0x19u:
        *(_DWORD *)(a1 + 172) |= 0x80u;
        v167 = *((_QWORD *)this + 1);
        v168 = *((_QWORD *)this + 2);
        v169 = *(_QWORD *)this;
        if (v167 <= 0xFFFFFFFFFFFFFFF5 && v167 + 10 <= v168)
        {
          v170 = 0;
          v171 = 0;
          v172 = 0;
          do
          {
            v173 = v167 + 1;
            *((_QWORD *)this + 1) = v167 + 1;
            v174 = *(_BYTE *)(v169 + v167);
            v172 |= (unint64_t)(v174 & 0x7F) << v170;
            if ((v174 & 0x80) == 0)
              goto LABEL_384;
            v170 += 7;
            v167 = v173;
            v14 = v171++ > 8;
          }
          while (!v14);
LABEL_301:
          v172 = 0;
          goto LABEL_384;
        }
        v255 = 0;
        v256 = 0;
        v172 = 0;
        if (v168 <= v167)
          v168 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v168 == v167)
          {
            v172 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v257 = v167 + 1;
            v258 = *(_BYTE *)(v169 + v167);
            *((_QWORD *)this + 1) = v257;
            v172 |= (unint64_t)(v258 & 0x7F) << v255;
            if (v258 < 0)
            {
              v255 += 7;
              v167 = v257;
              v14 = v256++ > 8;
              if (v14)
                goto LABEL_301;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v172 = 0;
          }
          break;
        }
LABEL_384:
        *(_QWORD *)(a1 + 64) = v172;
        goto LABEL_21;
      case 0x1Au:
        *(_DWORD *)(a1 + 172) |= 0x10u;
        v175 = *((_QWORD *)this + 1);
        v176 = *((_QWORD *)this + 2);
        v177 = *(_QWORD *)this;
        if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
        {
          v178 = 0;
          v179 = 0;
          v180 = 0;
          do
          {
            v181 = v175 + 1;
            *((_QWORD *)this + 1) = v175 + 1;
            v182 = *(_BYTE *)(v177 + v175);
            v180 |= (unint64_t)(v182 & 0x7F) << v178;
            if ((v182 & 0x80) == 0)
              goto LABEL_388;
            v178 += 7;
            v175 = v181;
            v14 = v179++ > 8;
          }
          while (!v14);
LABEL_308:
          v180 = 0;
          goto LABEL_388;
        }
        v259 = 0;
        v260 = 0;
        v180 = 0;
        if (v176 <= v175)
          v176 = *((_QWORD *)this + 1);
        break;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      if (v176 == v175)
      {
        v180 = 0;
        *((_BYTE *)this + 24) = 1;
        goto LABEL_388;
      }
      v261 = v175 + 1;
      v262 = *(_BYTE *)(v177 + v175);
      *((_QWORD *)this + 1) = v261;
      v180 |= (unint64_t)(v262 & 0x7F) << v259;
      if ((v262 & 0x80) == 0)
        break;
      v259 += 7;
      v175 = v261;
      v14 = v260++ > 8;
      if (v14)
        goto LABEL_308;
    }
    if (*((_BYTE *)this + 24))
      v180 = 0;
LABEL_388:
    *(_QWORD *)(a1 + 40) = v180;
    goto LABEL_21;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t sub_100053020(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = result;
  if ((*(_BYTE *)(result + 174) & 2) != 0)
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(result + 152), 1u);
  v4 = *(_QWORD *)(v3 + 104);
  if (v4)
    result = PB::Writer::write(this, v4, 2);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x20) != 0)
  {
    result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 48), 3u);
    v5 = *(_DWORD *)(v3 + 172);
    if ((v5 & 0x80000) == 0)
    {
LABEL_7:
      if ((v5 & 0x10000) == 0)
        goto LABEL_8;
      goto LABEL_27;
    }
  }
  else if ((v5 & 0x80000) == 0)
  {
    goto LABEL_7;
  }
  result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 4u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x10000) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 144), 0xAu);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 72), 0xBu);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 128), 0xCu);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 56), 0xDu);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 1) == 0)
  {
LABEL_12:
    if ((v5 & 2) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 8), 0xEu);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 2) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 16), 0xFu);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 80), 0x10u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 88), 0x11u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 24), 0x12u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 32), 0x13u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x1000) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 112), 0x14u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x2000) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 120), 0x15u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 96), 0x16u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 160), 0x17u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 136), 0x18u);
  v5 = *(_DWORD *)(v3 + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 0x1Au);
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 64), 0x19u);
  if ((*(_DWORD *)(v3 + 172) & 0x10) != 0)
    return PB::Writer::writeVarInt(this, *(_QWORD *)(v3 + 40), 0x1Au);
  return result;
}

uint64_t sub_100053284(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  int v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "commandKey", *(_QWORD *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 172);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "commandKeySticky", *(_QWORD *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "controlKey", *(_QWORD *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "controlKeySticky", *(_QWORD *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "disconnect", *(_QWORD *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "durationMillis", *(_QWORD *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "hideDock", *(_QWORD *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "hideKeyboard", *(_QWORD *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "hideMenuBar", *(_QWORD *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "optionKey", *(_QWORD *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "optionKeySticky", *(_QWORD *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 172);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_37:
  PB::TextFormatter::format(this, "position", *(_DWORD *)(a1 + 168));
  if ((*(_DWORD *)(a1 + 172) & 0x800) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "redo", *(_QWORD *)(a1 + 96));
LABEL_15:
  if (*(_QWORD *)(a1 + 104))
    PB::TextFormatter::format(this, "sessionUUID");
  v6 = *(_DWORD *)(a1 + 172);
  if ((v6 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "shiftKey", *(_QWORD *)(a1 + 112));
    v6 = *(_DWORD *)(a1 + 172);
    if ((v6 & 0x2000) == 0)
    {
LABEL_19:
      if ((v6 & 0x4000) == 0)
        goto LABEL_20;
      goto LABEL_41;
    }
  }
  else if ((v6 & 0x2000) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(this, "shiftKeySticky", *(_QWORD *)(a1 + 120));
  v6 = *(_DWORD *)(a1 + 172);
  if ((v6 & 0x4000) == 0)
  {
LABEL_20:
    if ((v6 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "showDock", *(_QWORD *)(a1 + 128));
  v6 = *(_DWORD *)(a1 + 172);
  if ((v6 & 0x8000) == 0)
  {
LABEL_21:
    if ((v6 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "showKeyboard", *(_QWORD *)(a1 + 136));
  v6 = *(_DWORD *)(a1 + 172);
  if ((v6 & 0x10000) == 0)
  {
LABEL_22:
    if ((v6 & 0x20000) == 0)
      goto LABEL_23;
LABEL_44:
    PB::TextFormatter::format(this, "timestamp", *(_QWORD *)(a1 + 152));
    if ((*(_DWORD *)(a1 + 172) & 0x40000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_43:
  PB::TextFormatter::format(this, "showMenuBar", *(_QWORD *)(a1 + 144));
  v6 = *(_DWORD *)(a1 + 172);
  if ((v6 & 0x20000) != 0)
    goto LABEL_44;
LABEL_23:
  if ((v6 & 0x40000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "undo", *(_QWORD *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

void sub_10005354C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10006D518;
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    sub_1000517F8(v2);
  PB::Base::~Base(this);
}

uint64_t _s10SidecarHID10UserDeviceC4uuid10Foundation4UUIDVvpfi_0()
{
  return UUID.init()();
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

