void type metadata accessor for ASCAppState(uint64_t a1)
{
  sub_1000053F4(a1, &qword_1001163E0, (uint64_t)&unk_1001081D8);
}

void type metadata accessor for SBUISystemApertureContentRole(uint64_t a1)
{
  sub_1000053F4(a1, &qword_1001163E8, (uint64_t)&unk_100108200);
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
  sub_1000053F4(a1, &qword_1001163F0, (uint64_t)&unk_100108220);
}

uint64_t sub_100003E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;

  v33 = a2;
  v3 = sub_100004F7C(&qword_1001164F8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_100116500);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100004F7C(&qword_100116508);
  v10 = __chkstk_darwin(v31);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v30 - v13;
  v32 = sub_100004F7C(&qword_100116510);
  __chkstk_darwin(v32);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1;
  v17 = Label.init(title:icon:)(sub_100004FBC, v34, sub_100004274, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
  v18 = static Font.footnote.getter(v17);
  KeyPath = swift_getKeyPath(&unk_1000D1648, v19);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v9, v6, v3);
  v21 = (uint64_t *)&v9[*(int *)(v7 + 36)];
  *v21 = KeyPath;
  v21[1] = v18;
  v22 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LODWORD(v18) = static HierarchicalShapeStyle.secondary.getter(v22);
  sub_100004FCC((uint64_t)v9, (uint64_t)v12);
  *(_DWORD *)&v12[*(int *)(v31 + 36)] = v18;
  sub_10000526C((uint64_t)v9, &qword_100116500);
  v23 = sub_100005014((uint64_t)v12, (uint64_t)v14);
  v24 = static Alignment.leading.getter(v23);
  sub_100033D54(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v24, v25);
  sub_10000526C((uint64_t)v14, &qword_100116508);
  if (qword_1001160A8 != -1)
    swift_once(&qword_1001160A8, sub_10007FFB4);
  v26 = qword_100124560;
  v27 = *(_QWORD *)algn_100124568;
  v28 = sub_10000505C();
  View.accessibilityIdentifier(_:)(v26, v27, v32, v28);
  return sub_10000526C((uint64_t)v16, &qword_100116510);
}

uint64_t sub_100004164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin();
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1);
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v6);
  v14 = a1;
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v14, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
  v7._countAndFlagsBits = 0x5F4D415A41485320;
  v7._object = (void *)0xED0000544E554F43;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v7);
  v8 = LocalizedStringKey.init(stringInterpolation:)(v5);
  result = Text.init(_:tableName:bundle:comment:)(v8);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v11 & 1;
  *(_QWORD *)(a2 + 24) = v12;
  return result;
}

uint64_t sub_100004274@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000010, 0x80000001000D8DA0);
  *a1 = result;
  return result;
}

uint64_t sub_1000042B8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1000042D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100003E88(*v1, a1);
}

id sub_1000042D8()
{
  id *v0;

  return *v0;
}

uint64_t sub_1000042E0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_1000042E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004864(&qword_100116488, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D12E8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100004328(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004864(&qword_100116488, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D12E8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10000436C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000043AC(uint64_t a1, uint64_t a2)
{
  return sub_1000049FC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000043C8@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000043F8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10000446C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000044E8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_100004528()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SHErrorDomain);
}

uint64_t sub_100004538(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100004578(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000045B8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10000461C()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100004650(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000046A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_1000046FC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_10000470C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10000471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100004774(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100004788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004864(&qword_100116410, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_1000D0F5C);
  v3 = sub_100004864(&qword_100116418, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_1000D0EFC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000480C()
{
  return sub_100004864(&qword_1001163F8, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_1000D0EC0);
}

uint64_t sub_100004838()
{
  return sub_100004864(&qword_100116400, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_1000D0E94);
}

uint64_t sub_100004864(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000048A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004864(&qword_1001164C8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000D1440);
  v3 = sub_100004864(&qword_1001164D0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000D1394);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004928@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000496C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100004864(&qword_1001164D8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000D1164);
  v3 = sub_100004864(&qword_1001164E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000D1104);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000049F0(uint64_t a1, uint64_t a2)
{
  return sub_1000049FC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000049FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100004A38(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100004A78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_100004AE8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100004B70()
{
  return sub_100004864(&qword_100116408, (uint64_t (*)(uint64_t))type metadata accessor for ASCAppState, (uint64_t)&unk_1000D0F30);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116420, (uint64_t)&unk_100108240);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116428, (uint64_t)&unk_100108270);
}

void type metadata accessor for SHError(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116430, (uint64_t)&unk_100108298);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116438, (uint64_t)&unk_1001082C0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116440, (uint64_t)&unk_1001082E8);
}

uint64_t sub_100004C00()
{
  return sub_100004864(&qword_100116448, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000D10C8);
}

uint64_t sub_100004C2C()
{
  return sub_100004864(&qword_100116450, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000D109C);
}

uint64_t sub_100004C58()
{
  return sub_100004864(&qword_100116458, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1000D1138);
}

uint64_t sub_100004C84()
{
  return sub_100004864(&qword_100116460, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1200);
}

uint64_t sub_100004CB0()
{
  return sub_100004864(&qword_100116468, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D122C);
}

uint64_t sub_100004CDC()
{
  return sub_100004864(&qword_100116470, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000D1358);
}

uint64_t sub_100004D08()
{
  return sub_100004864(&qword_100116478, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000D132C);
}

uint64_t sub_100004D34()
{
  return sub_100004864(&qword_100116480, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000D13C8);
}

uint64_t sub_100004D60()
{
  return sub_100004864(&qword_100116488, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D12E8);
}

uint64_t sub_100004D8C()
{
  return sub_100004864(&qword_100116490, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D12B4);
}

uint64_t sub_100004DB8()
{
  return sub_100004864(&qword_100116498, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1270);
}

uint64_t sub_100004DE4()
{
  return sub_100004864(&qword_1001164A0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1000D152C);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_1000053F4(a1, &qword_1001164E8, (uint64_t)&unk_100108310);
}

uint64_t sub_100004E24()
{
  return sub_100004864(&qword_1001164A8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1000D14F0);
}

unint64_t sub_100004E54()
{
  unint64_t result;

  result = qword_1001164B0;
  if (!qword_1001164B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001164B0);
  }
  return result;
}

uint64_t sub_100004E98()
{
  return sub_100004864(&qword_1001164B8, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1000D1568);
}

uint64_t sub_100004EC4()
{
  return sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
}

__n128 initializeWithTake for MusicRecognition(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100004F00(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004F20(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000053F4(a1, &qword_1001164F0, (uint64_t)&unk_100108388);
}

ValueMetadata *type metadata accessor for ShazamCountsView()
{
  return &type metadata for ShazamCountsView;
}

uint64_t sub_100004F6C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD194, 1);
}

uint64_t sub_100004F7C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100004FBC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100004164(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100004FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100116500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100005014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100116508);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10000505C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116518;
  if (!qword_100116518)
  {
    v1 = sub_1000050C8(&qword_100116510);
    sub_10000510C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116518);
  }
  return result;
}

uint64_t sub_1000050C8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_10000510C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116520;
  if (!qword_100116520)
  {
    v1 = sub_1000050C8(&qword_100116508);
    sub_100005190();
    sub_10000522C(&qword_100116548, &qword_100116550, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116520);
  }
  return result;
}

unint64_t sub_100005190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116528;
  if (!qword_100116528)
  {
    v1 = sub_1000050C8(&qword_100116500);
    sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116528);
  }
  return result;
}

uint64_t sub_10000522C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000050C8(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000526C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100004F7C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for LocationBottomModuleView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for LoadingView(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000052E4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100005304(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116558, (uint64_t)&unk_100108430);
}

unint64_t sub_100005348()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116560;
  if (!qword_100116560)
  {
    v1 = sub_1000050C8(&qword_100116568);
    sub_10000505C();
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116560);
  }
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116578, (uint64_t)&unk_1001084B0);
}

void type metadata accessor for Style(uint64_t a1)
{
  sub_1000053F4(a1, &qword_100116580, (uint64_t)&unk_1001084D8);
}

void sub_1000053F4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_100005450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD v42[3];

  v37 = a3;
  v38 = type metadata accessor for TaskPriority(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_1001165A8);
  v33 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_1001165E8);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000D1718, v13);
  v16 = swift_getKeyPath(&unk_1000D1718, v15);
  v42[1] = a1;
  v42[2] = a2;
  v17 = sub_100004F7C(&qword_1001165F0);
  State.wrappedValue.getter(v42, v17);
  v39 = KeyPath;
  LOBYTE(v40) = 0;
  v41 = v16;
  v18 = swift_allocObject(&unk_100108768, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  swift_retain(a2);
  swift_retain(a1);
  v19 = sub_100004F7C(&qword_1001165B0);
  v20 = sub_1000072B0();
  View.onContinueUserActivity(_:perform:)(0xD000000000000022, 0x80000001000D8BE0, sub_1000073CC, v18, v19, v20);
  swift_release(v18);
  swift_release(v39);
  swift_release(v41);
  swift_release(v42[0]);
  v21 = swift_allocObject(&unk_100108790, 32, 7);
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  swift_retain(a1);
  swift_retain(a2);
  v39 = v19;
  v40 = v20;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v39, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
  View.onContinueUserActivity(_:perform:)(0xD000000000000024, 0x80000001000D8C10, sub_100007418, v21, v7, OpaqueTypeConformance2);
  swift_release(v21);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v9, v7);
  static TaskPriority.userInitiated.getter(v23);
  v24 = sub_100004F7C(&qword_100116598);
  v25 = v37;
  v26 = (char *)(v37 + *(int *)(v24 + 36));
  v27 = type metadata accessor for _TaskModifier(0);
  v28 = v36;
  v29 = v38;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(&v26[*(int *)(v27 + 20)], v6, v38);
  *(_QWORD *)v26 = &unk_1001165F8;
  *((_QWORD *)v26 + 1) = 0;
  v31 = v34;
  v30 = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v25, v12, v35);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v12, v30);
}

_QWORD *sub_100005764@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_100007434();
  result = EnvironmentValues.subscript.getter(&v4, &_s20ViewConfigurationKeyVN, &_s20ViewConfigurationKeyVN, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000057B0(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = sub_100007434();
  swift_retain(v3);
  return EnvironmentValues.subscript.setter(&v3, &_s20ViewConfigurationKeyVN, &_s20ViewConfigurationKeyVN, v1);
}

uint64_t sub_10000580C(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = sub_100004F7C(&qword_1001165F0);
  State.wrappedValue.getter(&v9, v6);
  v7 = v9;
  sub_10009BC64(a4, a1);
  return swift_release(v7);
}

uint64_t sub_100005870()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[3] = v2;
  v0[4] = v3;
  return swift_task_switch(sub_1000058D8, v2, v3);
}

uint64_t sub_1000058D8()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1001162F8 != -1)
    swift_once(&qword_1001162F8, sub_1000AA1F8);
  v1 = (_QWORD *)swift_task_alloc(dword_10011C27C);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_10000594C;
  return sub_1000A9B74();
}

uint64_t sub_10000594C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return swift_task_switch(sub_100005998, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100005998()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000059C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = sub_100004F7C(&qword_100116590);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  v5 = v0[1];
  v7 = swift_allocObject(&unk_100108740, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  swift_retain(v5);
  swift_retain(v6);
  v8 = sub_100004F7C(&qword_100116598);
  v9 = sub_1000071D4();
  WindowGroup.init(id:title:lazyContent:)(0, 0, 0, 0, 0, 0, sub_1000071CC, v7, v8, v9);
  v10 = sub_10000522C(&qword_1001165E0, &qword_100116590, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
  static SceneBuilder.buildBlock<A>(_:)(v4, v1, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100005AF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100007150();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100005B18@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;

  v47[1] = a3;
  v4 = a2 & 1;
  v5 = sub_100004F7C(&qword_100116608);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_100116610);
  __chkstk_darwin(v9);
  v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_retain(a1);
  v13 = sub_10000687C(v12, v4);
  swift_release(a1);
  KeyPath = swift_getKeyPath(&unk_1000D17A8, v14);
  v50 = v13;
  v16 = sub_100004864((unint64_t *)&qword_100116618, type metadata accessor for ViewConfiguration, (uint64_t)&unk_1000D6CA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v50, KeyPath, v16);
  swift_release(KeyPath);
  v17 = *(unsigned __int8 *)(v13 + 16);
  v18 = swift_release(v13);
  if (v17)
  {
    if (v17 == 1)
    {
      v19 = type metadata accessor for HistoryListProvider(0);
      v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
      type metadata accessor for SHLibrary(0);
      v21 = static SHLibrary.default.getter();
      *(_QWORD *)(v20 + 16) = v21;
      ObservationRegistrar.init()(v21);
      v22 = sub_100004F7C(&qword_100116650);
      v23 = swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      ObservationRegistrar.init()(v23);
      *(_QWORD *)(v23 + 16) = v20;
      v24 = sub_100004F7C(&qword_100116658);
      swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
      v25 = swift_retain(v20);
      *(_QWORD *)(v23 + 24) = sub_100006558(v25);
      v48 = v23;
      v49 = 1;
      swift_retain(v23);
      v26 = sub_100004F7C(&qword_100116640);
      v27 = sub_10000522C(&qword_100116638, &qword_100116640, (uint64_t)&unk_1000D6178);
      _ConditionalContent<>.init(storage:)(&v48, &type metadata for Color, v26, &protocol witness table for Color, v27);
      v28 = v51;
      *(_QWORD *)v11 = v50;
      v11[8] = v28;
      swift_storeEnumTagMultiPayload(v11, v9, 0);
      v29 = sub_100004F7C(&qword_100116628);
      v30 = sub_10000762C();
      v31 = sub_10000522C(&qword_100116648, &qword_100116608, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
      _ConditionalContent<>.init(storage:)(v11, v29, v5, v30, v31);
      return swift_release(v23);
    }
    else
    {
      __chkstk_darwin(v18);
      v47[-2] = a1;
      LOBYTE(v47[-1]) = v41;
      v42 = type metadata accessor for TrackPageView(0);
      v43 = sub_100004864(&qword_100116620, type metadata accessor for TrackPageView, (uint64_t)&unk_1000D3458);
      NavigationStack.init<>(root:)(sub_100007620, &v47[-4], v42, v43);
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v8, v5);
      swift_storeEnumTagMultiPayload(v11, v9, 1);
      v44 = sub_100004F7C(&qword_100116628);
      v45 = sub_10000762C();
      v46 = sub_10000522C(&qword_100116648, &qword_100116608, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
      _ConditionalContent<>.init(storage:)(v11, v44, v5, v45, v46);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    v50 = static Color.clear.getter(v18);
    v33 = sub_1000076B0();
    v34 = Color.init<A>(_:)(&v50, &type metadata for Color, v33, &protocol witness table for Color);
    v48 = v34;
    v49 = 0;
    swift_retain(v34);
    v35 = sub_100004F7C(&qword_100116640);
    v36 = sub_10000522C(&qword_100116638, &qword_100116640, (uint64_t)&unk_1000D6178);
    _ConditionalContent<>.init(storage:)(&v48, &type metadata for Color, v35, &protocol witness table for Color, v36);
    v37 = v51;
    *(_QWORD *)v11 = v50;
    v11[8] = v37;
    swift_storeEnumTagMultiPayload(v11, v9, 0);
    v38 = sub_100004F7C(&qword_100116628);
    v39 = sub_10000762C();
    v40 = sub_10000522C(&qword_100116648, &qword_100116608, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    _ConditionalContent<>.init(storage:)(v11, v38, v5, v39, v40);
    return swift_release(v34);
  }
}

uint64_t sub_100005FDC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v41;
  id v42;
  uint64_t v43;
  _QWORD v44[5];

  v43 = a3;
  v4 = a2 & 1;
  v5 = type metadata accessor for TrackPageView(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  v9 = sub_10000687C(v8, v4);
  swift_release(a1);
  KeyPath = swift_getKeyPath(&unk_1000D17D0, v10);
  v44[0] = v9;
  v12 = sub_100004864((unint64_t *)&qword_100116618, type metadata accessor for ViewConfiguration, (uint64_t)&unk_1000D6CA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v44, KeyPath, v12);
  swift_release(KeyPath);
  v41 = *(void **)(v9 + 32);
  v42 = v41;
  swift_release(v9);
  v13 = swift_retain(a1);
  v14 = sub_10000687C(v13, v4);
  swift_release(a1);
  v16 = swift_getKeyPath(&unk_1000D17F8, v15);
  v44[0] = v14;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v44, v16, v12);
  swift_release(v16);
  v17 = *(_QWORD *)(v14 + 40);
  v18 = *(_QWORD *)(v14 + 48);
  swift_bridgeObjectRetain(v18);
  swift_release(v14);
  v19 = swift_retain(a1);
  v20 = sub_10000687C(v19, v4);
  swift_release(a1);
  v22 = swift_getKeyPath(&unk_1000D1820, v21);
  v44[0] = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v44, v22, v12);
  swift_release(v22);
  v23 = *(_BYTE *)(v20 + 56);
  swift_release(v20);
  v24 = swift_retain(a1);
  v25 = sub_10000687C(v24, v4);
  swift_release(a1);
  v27 = swift_getKeyPath(&unk_1000D17A8, v26);
  v44[0] = v25;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v44, v27, v12);
  swift_release(v27);
  v28 = *(_BYTE *)(v25 + 16);
  swift_release(v25);
  if (qword_1001162F8 != -1)
    swift_once(&qword_1001162F8, sub_1000AA1F8);
  v29 = 0xB0A0Cu >> (8 * v28);
  v30 = qword_1001247E8;
  v31 = type metadata accessor for MusicSubscriptionStatusController(0);
  v44[3] = v31;
  v44[4] = &off_10010D670;
  v44[0] = v30;
  v32 = type metadata accessor for TrackPageViewModel(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v34 = sub_1000076F4((uint64_t)v44, v31);
  __chkstk_darwin(v34);
  v36 = (uint64_t *)((char *)&v41 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  v38 = *v36;
  swift_retain_n(v30, 2);
  v39 = sub_10000771C(v41, v17, v18, v23, v38, v29, v33);

  _s16MusicRecognition11AnyPlaylistVwxx_0(v44);
  swift_release(v30);
  sub_100034C08(v39, 0, 0, (uint64_t)v7);
  return sub_100007B7C((uint64_t)v7, v43);
}

uint64_t sub_100006338@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100005B18(*(_QWORD *)v1, *(_BYTE *)(v1 + 8), a1);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100006378();
  static App.main()();
  return 0;
}

unint64_t sub_100006378()
{
  unint64_t result;

  result = qword_100116588;
  if (!qword_100116588)
  {
    result = swift_getWitnessTable(&unk_1000D16D4, &type metadata for MusicRecognition);
    atomic_store(result, (unint64_t *)&qword_100116588);
  }
  return result;
}

uint64_t destroy for MusicRecognition(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s16MusicRecognition16MusicRecognitionVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for MusicRecognition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

_QWORD *assignWithTake for MusicRecognition(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicRecognition(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MusicRecognition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicRecognition()
{
  return &type metadata for MusicRecognition;
}

uint64_t sub_100006548(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD23C, 1);
}

uint64_t sub_100006558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD v37[5];

  v3 = type metadata accessor for NavigationPath(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v37[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000014, 0x80000001000D8E20);
  v7 = v1 + qword_1001244D0;
  *(_QWORD *)v7 = LocalizedStringKey.init(stringLiteral:)(0x535F4D415A414853, 0xEB0000000054524FLL);
  *(_QWORD *)(v7 + 8) = v8;
  *(_BYTE *)(v7 + 16) = v9 & 1;
  *(_QWORD *)(v7 + 24) = v10;
  v11 = v1 + qword_1001244D8;
  *(_QWORD *)v11 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x80000001000D8E40);
  *(_QWORD *)(v11 + 8) = v12;
  *(_BYTE *)(v11 + 16) = v13 & 1;
  *(_QWORD *)(v11 + 24) = v14;
  v15 = v1 + qword_1001244E0;
  *(_QWORD *)v15 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x80000001000D8E60);
  *(_QWORD *)(v15 + 8) = v16;
  *(_BYTE *)(v15 + 16) = v17 & 1;
  *(_QWORD *)(v15 + 24) = v18;
  v19 = v1 + qword_1001244E8;
  *(_QWORD *)v19 = LocalizedStringKey.init(stringLiteral:)(0x445F4D415A414853, 0xED00004554454C45);
  *(_QWORD *)(v19 + 8) = v20;
  *(_BYTE *)(v19 + 16) = v21 & 1;
  *(_QWORD *)(v19 + 24) = v22;
  v23 = (_QWORD *)(v1 + qword_100117418);
  *v23 = 0;
  v23[1] = 0xE000000000000000;
  *(_BYTE *)(v1 + qword_100117420) = 0;
  *(_BYTE *)(v1 + qword_100117428) = 0;
  NavigationPath.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + qword_100117430, v6, v3);
  if (qword_1001162F8 != -1)
    swift_once(&qword_1001162F8, sub_1000AA1F8);
  v24 = qword_1001247E8;
  v25 = type metadata accessor for MusicSubscriptionStatusController(0);
  v37[3] = v25;
  v37[4] = &off_10010D670;
  v37[0] = v24;
  v26 = type metadata accessor for TrackPageViewModel(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v28 = sub_1000076F4((uint64_t)v37, v25);
  __chkstk_darwin(v28);
  v30 = (_QWORD *)((char *)&v37[-1] - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  v32 = *v30;
  swift_retain_n(v24, 2);
  v33 = sub_10000771C(0, 0, 0, 0, v32, 12, v27);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v37);
  swift_release(v24);
  *(_QWORD *)(v1 + qword_100117438) = v33;
  v34 = sub_100017318();
  *(_QWORD *)(v1 + qword_100117440) = v34;
  ObservationRegistrar.init()(v34);
  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 184)) = a1;
  return v1;
}

uint64_t sub_10000687C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter(v8);
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = sub_1000529F4(0xD000000000000011, 0x80000001000D8EA0, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v16, v7, a1);
    swift_release(a1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  return a1;
}

uint64_t sub_100006A38@<X0>(_QWORD *a1@<X8>)
{
  return sub_100006A9C(&qword_1001166A0, (uint64_t (*)(_QWORD))&type metadata accessor for OpenURLAction, 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_100006A6C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100006A9C(&qword_100116698, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100006A9C@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007C8C(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v17, v19);
  }
  else
  {
    v21 = *v17;
    v22 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      v29 = a4;
      v24 = swift_slowAlloc(12, -1);
      v30 = a5;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v33 = v26;
      *(_DWORD *)v25 = 136315138;
      v32 = sub_1000529F4(v31, v29, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v25;
      a5 = v30;
      swift_slowDealloc(v27, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v14, v21);
    swift_release(v21);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100006CD4@<X0>(_QWORD *a1@<X8>)
{
  return sub_100006A9C(&qword_100116680, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, 0x616850656E656353, 0xEA00000000006573, a1);
}

uint64_t sub_100006D00@<X0>(_QWORD *a1@<X8>)
{
  return sub_100006A9C(&qword_100116678, (uint64_t (*)(_QWORD))&type metadata accessor for DismissAction, 0x417373696D736944, 0xED00006E6F697463, a1);
}

uint64_t sub_100006D34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t EnumCaseMultiPayload;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100116688);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100007C8C(v2, (uint64_t)v10, &qword_100116688);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return sub_100007C48((uint64_t)v10, (uint64_t)a1, &qword_100116690);
  v13 = *v10;
  v14 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
  v15 = static Log.runtimeIssuesLog.getter();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v23 = a1;
    v19 = v18;
    v25 = v18;
    *(_DWORD *)v17 = 136315138;
    v24 = sub_1000529F4(0xD000000000000020, 0x80000001000D8EC0, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v20 = v19;
    a1 = v23;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(a1, v7, v13);
  v21 = swift_release(v13);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v21);
}

uint64_t sub_100006F64(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_1000529F4(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_100007CD0(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_10000711C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100006A9C(&qword_1001166A8, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100007150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for ViewConfiguration(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_BYTE *)(v1 + 16) = 0;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_BYTE *)(v1 + 56) = 0;
  ObservationRegistrar.init()(v1);
  v3 = v1;
  State.init(wrappedValue:)(&v4, &v3, v0);
  return v4;
}

uint64_t sub_1000071CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100005450(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1000071D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_1001165A0;
  if (!qword_1001165A0)
  {
    v1 = sub_1000050C8(&qword_100116598);
    v2 = sub_1000050C8(&qword_1001165A8);
    v4 = sub_1000050C8(&qword_1001165B0);
    v5 = sub_1000072B0();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onContinueUserActivity(_:perform:)>>, 1);
    sub_100004864(&qword_1001165D8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001165A0);
  }
  return result;
}

unint64_t sub_1000072B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001165B8;
  if (!qword_1001165B8)
  {
    v1 = sub_1000050C8(&qword_1001165B0);
    sub_100007334();
    sub_10000522C(&qword_1001165C8, &qword_1001165D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001165B8);
  }
  return result;
}

unint64_t sub_100007334()
{
  unint64_t result;

  result = qword_1001165C0;
  if (!qword_1001165C0)
  {
    result = swift_getWitnessTable(&unk_1000D1758, &type metadata for MusicRecognitionRoot);
    atomic_store(result, (unint64_t *)&qword_1001165C0);
  }
  return result;
}

_QWORD *sub_100007378@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_100007434();
  result = EnvironmentValues.subscript.getter(&v4, &_s20ViewConfigurationKeyVN, &_s20ViewConfigurationKeyVN, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1000073CC(void *a1)
{
  uint64_t v1;

  return sub_10000580C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), 1);
}

uint64_t sub_1000073EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100007418(void *a1)
{
  uint64_t v1;

  return sub_10000580C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), 2);
}

unint64_t sub_100007434()
{
  unint64_t result;

  result = qword_100116600;
  if (!qword_100116600)
  {
    result = swift_getWitnessTable(&unk_1000D6DA8, &_s20ViewConfigurationKeyVN);
    atomic_store(result, (unint64_t *)&qword_100116600);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MusicRecognitionRoot(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for MusicRecognitionRoot(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for MusicRecognitionRoot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

uint64_t initializeWithTake for MusicRecognitionRoot(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for MusicRecognitionRoot(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MusicRecognitionRoot(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MusicRecognitionRoot(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicRecognitionRoot()
{
  return &type metadata for MusicRecognitionRoot;
}

uint64_t sub_1000075DC()
{
  return sub_10000522C(&qword_1001165E0, &qword_100116590, (uint64_t)&protocol conformance descriptor for WindowGroup<A>);
}

uint64_t sub_100007608(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD264, 1);
}

uint64_t sub_100007620@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100005FDC(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

unint64_t sub_10000762C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116630;
  if (!qword_100116630)
  {
    v1 = sub_1000050C8(&qword_100116628);
    sub_10000522C(&qword_100116638, &qword_100116640, (uint64_t)&unk_1000D6178);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116630);
  }
  return result;
}

unint64_t sub_1000076B0()
{
  unint64_t result;

  result = qword_100116660;
  if (!qword_100116660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&qword_100116660);
  }
  return result;
}

uint64_t sub_1000076F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10000771C(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[4];
  int v43;
  _QWORD v44[5];

  v43 = a6;
  v13 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v14 = __chkstk_darwin(v13);
  v16 = &v42[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v42[-v18];
  __chkstk_darwin(v17);
  v21 = &v42[-v20];
  v44[3] = type metadata accessor for MusicSubscriptionStatusController(0);
  v44[4] = &off_10010D670;
  v44[0] = a5;
  *(_QWORD *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 24) = 0;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_QWORD *)(a7 + 128) = 0;
  *(_BYTE *)(a7 + 136) = 2;
  *(_QWORD *)(a7 + 144) = 0x3FE6666666666666;
  *(_QWORD *)(a7 + 200) = 0;
  *(_OWORD *)(a7 + 152) = 0u;
  *(_OWORD *)(a7 + 168) = 0u;
  *(_OWORD *)(a7 + 177) = 0u;
  *(_QWORD *)(a7 + 248) = 0;
  *(_OWORD *)(a7 + 232) = 0u;
  *(_OWORD *)(a7 + 216) = 0u;
  *(_OWORD *)(a7 + 264) = 0u;
  *(_OWORD *)(a7 + 280) = 0u;
  *(_OWORD *)(a7 + 296) = 0u;
  *(_OWORD *)(a7 + 312) = 0u;
  *(_OWORD *)(a7 + 328) = 0u;
  *(_OWORD *)(a7 + 344) = 0u;
  *(_OWORD *)(a7 + 360) = 0u;
  *(_OWORD *)(a7 + 376) = 0u;
  *(_OWORD *)(a7 + 392) = 0u;
  *(_OWORD *)(a7 + 408) = 0u;
  *(_QWORD *)(a7 + 424) = 0;
  *(_QWORD *)(a7 + 432) = 1;
  *(_OWORD *)(a7 + 440) = 0u;
  *(_OWORD *)(a7 + 456) = 0u;
  *(_OWORD *)(a7 + 472) = 0u;
  *(_QWORD *)(a7 + 488) = objc_msgSend((id)objc_opt_self(SHRemoteConfiguration), "sharedInstance");
  *(_QWORD *)(a7 + 496) = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D8E80);
  *(_QWORD *)(a7 + 504) = v22;
  *(_BYTE *)(a7 + 512) = v23 & 1;
  *(_QWORD *)(a7 + 520) = v24;
  v25 = LocalizedStringKey.init(stringLiteral:)(0x4C5F4D415A414853, 0xEE00474E4944414FLL);
  *(_QWORD *)(a7 + 528) = v25;
  *(_QWORD *)(a7 + 536) = v26;
  *(_BYTE *)(a7 + 544) = v27 & 1;
  *(_QWORD *)(a7 + 552) = v28;
  *(_QWORD *)(a7 + 560) = 0;
  *(_QWORD *)(a7 + 576) = 0;
  *(_QWORD *)(a7 + 568) = 0;
  *(_BYTE *)(a7 + 584) = 0;
  ObservationRegistrar.init()(v25);
  v29 = *(void **)(a7 + 560);
  v30 = a1;

  *(_QWORD *)(a7 + 560) = a1;
  swift_bridgeObjectRelease(*(_QWORD *)(a7 + 576));
  *(_QWORD *)(a7 + 568) = a2;
  *(_QWORD *)(a7 + 576) = a3;
  *(_BYTE *)(a7 + 584) = a4;
  sub_100007AE0((uint64_t)v44, a7 + 592);
  *(_BYTE *)(a7 + 256) = v43;
  if (a1)
  {
    v31 = objc_msgSend(v30, "artworkURL");
    if (v31)
    {
      v32 = v31;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v19, 0, 1, v33);
    }
    else
    {
      v35 = type metadata accessor for URL(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v19, 1, 1, v35);
    }
    sub_100007C48((uint64_t)v19, (uint64_t)v21, (uint64_t *)&unk_100118CE0);
  }
  else
  {
    v34 = type metadata accessor for URL(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v21, 1, 1, v34);
  }
  v36 = type metadata accessor for URL(0);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v37((uint64_t)v16, 1, 1, v36);
  v38 = type metadata accessor for SongArtworkViewModel(0);
  v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v37(v39 + OBJC_IVAR____TtC16MusicRecognition20SongArtworkViewModel__artworkURL, 1, 1, v36);
  v40 = v37(v39 + OBJC_IVAR____TtC16MusicRecognition20SongArtworkViewModel___animatedArtworkURL, 1, 1, v36);
  ObservationRegistrar.init()(v40);
  sub_1000B793C((uint64_t)v21, (uint64_t)v16);
  sub_100007B24((uint64_t)v16);
  sub_100007B24((uint64_t)v21);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v44);
  *(_QWORD *)(a7 + 208) = v39;
  return a7;
}

uint64_t _s16MusicRecognition11AnyPlaylistVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100007AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100007B24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100007B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrackPageView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100007BC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116668;
  if (!qword_100116668)
  {
    v1 = sub_1000050C8(&qword_100116670);
    sub_10000762C();
    sub_10000522C(&qword_100116648, &qword_100116608, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116668);
  }
  return result;
}

uint64_t sub_100007C48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004F7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100007C8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004F7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100007CD0(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100007CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v14 - v6;
  URL.init(string:)(0x70612E636973756DLL, 0xEF6D6F632E656C70);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v7, v5, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    v15 = Image.init(systemName:)(0x696D2E636973756DLL, 0xE900000000000063);
    v11 = AnyView.init<A>(_:)(&v15, &type metadata for Image, &protocol witness table for Image);
    *(_QWORD *)a1 = 0x495F545349545241;
    *(_QWORD *)(a1 + 8) = 0xE900000000000044;
    *(_QWORD *)(a1 + 16) = 0x747369747241;
    *(_QWORD *)(a1 + 24) = 0xE600000000000000;
    *(_OWORD *)(a1 + 32) = xmmword_1000D1870;
    v12 = (int *)type metadata accessor for DesignTimeArtistMetadata(0);
    result = sub_100007EE4((uint64_t)v7, a1 + v12[7]);
    v13 = (_QWORD *)(a1 + v12[8]);
    *v13 = 0xD0000000000001BDLL;
    v13[1] = 0x80000001000D8EF0;
    *(_QWORD *)(a1 + v12[9]) = v11;
  }
  return result;
}

uint64_t type metadata accessor for DesignTimeArtistMetadata(uint64_t a1)
{
  uint64_t result;

  result = qword_100116708;
  if (!qword_100116708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DesignTimeArtistMetadata);
  return result;
}

uint64_t sub_100007EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100007F2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[8];
    v18 = a3[9];
    v19 = (uint64_t *)((char *)v4 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v16 = *(uint64_t *)((char *)a2 + v18);
    *(uint64_t *)((char *)v4 + v18) = v16;
    swift_bridgeObjectRetain(v21);
  }
  swift_retain(v16);
  return v4;
}

uint64_t sub_100008088(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + a2[7];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[9]));
}

_QWORD *sub_100008128(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = a3[8];
  v16 = a3[9];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = *(_QWORD *)((char *)a2 + v16);
  *(_QWORD *)((char *)a1 + v16) = v20;
  swift_bridgeObjectRetain(v19);
  swift_retain(v20);
  return a1;
}

_QWORD *sub_10000825C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = *(_QWORD *)((char *)a2 + v26);
  v28 = *(_QWORD *)((char *)a1 + v26);
  *(_QWORD *)((char *)a1 + v26) = v27;
  swift_retain(v27);
  swift_release(v28);
  return a1;
}

_OWORD *sub_100008414(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *sub_1000084FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = *(_QWORD *)((char *)a1 + v27);
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  swift_release(v28);
  return a1;
}

uint64_t sub_10000866C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100008678);
}

uint64_t sub_100008678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1000086F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100008704);
}

uint64_t sub_100008704(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_10000877C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1000D18A0;
  v4[1] = &unk_1000D18A0;
  v4[2] = &unk_1000D18B8;
  sub_10000880C(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_1000D18B8;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_10000880C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100116718)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100116718);
  }
}

uint64_t sub_100008860()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_10000888C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t sub_1000088B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100008944(v2 + *(int *)(a1 + 28), a2);
}

uint64_t sub_1000088C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 32));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1000088FC(uint64_t a1)
{
  uint64_t v1;

  return swift_retain(*(_QWORD *)(v1 + *(int *)(a1 + 36)));
}

uint64_t sub_100008908@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_100008944(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10000898C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    if (*a2)
    {
      v7 = a2[1];
      *v4 = *a2;
      v4[1] = v7;
      swift_retain(v7);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    v9 = a2[2];
    v10 = a2[3];
    v4[2] = v9;
    v4[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    swift_retain(v9);
    swift_retain(v10);
    v14 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = v12;
      v17 = v14;
      v18 = 1;
    }
    else
    {
      v19 = *v13;
      *v12 = *v13;
      swift_retain(v19);
      v16 = v12;
      v17 = v14;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return v4;
}

uint64_t sub_100008AA0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (*a1)
    swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) != 1)
    return swift_release(*v4);
  v6 = type metadata accessor for OpenURLAction(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
}

_QWORD *sub_100008B30(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*a2)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v7 = a2[2];
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  return a1;
}

uint64_t *sub_100008C10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  if (*a1)
  {
    if (v6)
    {
      v7 = a2[1];
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v7;
      swift_retain(v7);
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v6)
  {
    v9 = a2[1];
    *a1 = v6;
    a1[1] = v9;
    swift_retain(v9);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a1[3];
  v13 = a2[3];
  a1[3] = v13;
  swift_retain(v13);
  swift_release(v12);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_10000526C((uint64_t)a1 + v14, &qword_1001166A0);
    v17 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
  }
  return a1;
}

uint64_t sub_100008D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100008E10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  if (*a1)
  {
    if (v6)
    {
      v7 = a2[1];
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v7;
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v6)
  {
    v9 = a2[1];
    *a1 = v6;
    a1[1] = v9;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v10 = a1[2];
  a1[2] = a2[2];
  swift_release(v10);
  v11 = a1[3];
  a1[3] = a2[3];
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_10000526C((uint64_t)a1 + v12, &qword_1001166A0);
    v15 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100008F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100008F40);
}

uint64_t sub_100008F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004F7C(&qword_100116768);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100008FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100008FCC);
}

uint64_t sub_100008FCC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004F7C(&qword_100116768);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ContextMenuForUnsubscribedUserView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001167C8;
  if (!qword_1001167C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContextMenuForUnsubscribedUserView);
  return result;
}

void sub_100009080(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000D1918;
  v4[1] = &unk_1000D1930;
  sub_1000090FC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000090FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001167D8)
  {
    v2 = type metadata accessor for OpenURLAction(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001167D8);
  }
}

uint64_t sub_100009150(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD33C, 1);
}

void sub_100009160()
{
  qword_100116758 = 0x6C7070612E6D6F63;
  unk_100116760 = 0xEF636973754D2E65;
}

uint64_t sub_100009190@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char v97[16];
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 v106;

  v2 = v1;
  v96 = a1;
  v86 = type metadata accessor for NavigationBarButtonStyle(0);
  v3 = __chkstk_darwin(v86);
  v94 = (uint64_t *)((char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v95 = (uint64_t)&v73 - v5;
  v6 = type metadata accessor for ButtonMenuStyle(0);
  v7 = *(_QWORD *)(v6 - 8);
  v88 = v6;
  v89 = v7;
  __chkstk_darwin(v6);
  v85 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v9 - 8);
  v10 = v9;
  __chkstk_darwin(v9);
  v79 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100004F7C(&qword_100116810);
  v82 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v74 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100004F7C(&qword_100116818);
  v84 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v76 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100004F7C(&qword_100116820);
  v87 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v81 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100004F7C(&qword_100116828);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v75 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100004F7C(&qword_100116830);
  __chkstk_darwin(v92);
  v90 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(v2, (uint64_t)v15, type metadata accessor for ContextMenuForUnsubscribedUserView);
  v21 = *(unsigned __int8 *)(v13 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_1001088E8, v22 + v14, v21 | 7);
  sub_10000B4D4((uint64_t)v15, v23 + v22, type metadata accessor for ContextMenuForUnsubscribedUserView);
  v98 = v2;
  v24 = sub_100004F7C(&qword_100116838);
  v25 = sub_100004F7C(&qword_100116840);
  v99 = &type metadata for Image;
  v100 = &protocol witness table for Image;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  v27 = sub_10000522C(&qword_100116848, &qword_100116840, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Menu.init(onPresentationChanged:content:label:)(sub_10000B0AC, v23, sub_10000B0F8, v97, sub_10000A354, 0, v24, v25, OpaqueTypeConformance2, v27);
  v28 = *(_QWORD *)(v2 + 24);
  v104 = *(_QWORD *)(v2 + 16);
  v105 = v28;
  v29 = sub_100004F7C(&qword_100116850);
  State.projectedValue.getter(&v99);
  v30 = v99;
  v31 = v100;
  v32 = v101;
  KeyPath = swift_getKeyPath(&unk_1000D1998, v33);
  v99 = v30;
  v100 = v31;
  v101 = v32;
  v35 = sub_100004F7C(&qword_100116858);
  Binding.subscript.getter(&v104, KeyPath, v35);
  swift_release(v32);
  swift_release(v31);
  swift_release(KeyPath);
  swift_release(v30);
  v37 = v104;
  v36 = v105;
  v38 = v106;
  v39 = *(void **)(v2 + 24);
  v99 = *(void **)(v2 + 16);
  v100 = v39;
  State.wrappedValue.getter(&v103, v29);
  v40 = v103;
  v41 = v80;
  v42 = v79;
  v43 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, v103 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamURL, v10);
  swift_release(v40);
  v44 = sub_10000522C(&qword_100116860, &qword_100116810, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v45 = (void *)v78;
  v46 = v76;
  v47 = v74;
  View.sharingPicker(isPresented:item:subject:message:)(v37, v36, v38, v42, 0, 0, 0, 0, 0, 0, 0, 0, v78, v44);
  swift_release(v36);
  swift_release(v37);
  v48 = *(void (**)(char *, uint64_t))(v41 + 8);
  v49 = (void *)v77;
  v48(v42, v43);
  v50 = (*(uint64_t (**)(char *, void *))(v82 + 8))(v47, v45);
  v51 = v85;
  ButtonMenuStyle.init()(v50);
  v99 = v45;
  v100 = (void *)v44;
  v52 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.sharingPicker(isPresented:item:subject:message:)>>, 1);
  v53 = sub_100004864(&qword_100116868, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
  v54 = v81;
  v55 = (void *)v83;
  v56 = (void *)v88;
  View.menuStyle<A>(_:)(v51, v83, v88, v52, v53);
  (*(void (**)(char *, void *))(v89 + 8))(v51, v56);
  (*(void (**)(char *, void *))(v84 + 8))(v46, v55);
  v58 = swift_getKeyPath(&unk_1000D19C0, v57);
  v59 = (uint64_t)v94;
  *v94 = v58;
  v60 = sub_100004F7C(&qword_100116698);
  swift_storeEnumTagMultiPayload(v59, v60, 0);
  v61 = v95;
  sub_10000B4D4(v59, v95, type metadata accessor for NavigationBarButtonStyle);
  v99 = v55;
  v100 = v56;
  v101 = v52;
  v102 = v53;
  v62 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
  v63 = sub_100004864(&qword_100116870, type metadata accessor for NavigationBarButtonStyle, (uint64_t)&unk_1000D2ACC);
  v64 = v75;
  v65 = (void *)v86;
  View.buttonStyle<A>(_:)(v61, v49);
  sub_10000B600(v61, type metadata accessor for NavigationBarButtonStyle);
  (*(void (**)(char *, void *))(v87 + 8))(v54, v49);
  if (qword_100116110 != -1)
    swift_once(&qword_100116110, sub_1000801D8);
  v66 = qword_100124630;
  v67 = *(_QWORD *)algn_100124638;
  v99 = v49;
  v100 = v65;
  v101 = v62;
  v102 = v63;
  v68 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v69 = (uint64_t)v90;
  v70 = v93;
  View.accessibilityIdentifier(_:)(v66, v67, v93, v68);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v64, v70);
  v99 = (void *)qword_100124630;
  v100 = *(void **)algn_100124638;
  v71 = sub_10000B110();
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v99, v92, &type metadata for String, v71);
  return sub_10000526C(v69, &qword_100116830);
}

uint64_t sub_100009944@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  _BYTE v60[16];
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v58 = a2;
  v3 = sub_100004F7C(&qword_100116880);
  v4 = __chkstk_darwin(v3);
  v53 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v56 = (char *)&v52 - v6;
  v7 = sub_100004F7C(&qword_100116888);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v57 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v55 = (char *)&v52 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v52 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v52 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v52 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v52 - v22;
  v63 = a1;
  v24 = sub_100004F7C(&qword_100116890);
  v25 = sub_10000B180();
  Section<>.init(content:)(sub_10000B178, v62, v24, v25);
  v54 = v8;
  v26 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v59 = v23;
  v26(v23, v21, v7);
  v61 = a1;
  Section<>.init(content:)(sub_10000B21C, v60, v24, v25);
  v26(v18, v15, v7);
  v27 = *(_QWORD *)(a1 + 24);
  v64 = *(_QWORD *)(a1 + 16);
  v65 = v27;
  v28 = sub_100004F7C(&qword_100116850);
  State.wrappedValue.getter(&v66, v28);
  v29 = *(_QWORD *)(*(_QWORD *)(v66
                              + OBJC_IVAR____TtC16MusicRecognition39ContextMenuForUnsubscribedUserViewModel_streamingServices)
                  + 16);
  swift_release(v66);
  if (v29)
  {
    v30 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000020, 0x80000001000D90B0);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    __chkstk_darwin(v30);
    *(&v52 - 2) = a1;
    v37 = sub_100004F7C(&qword_1001168B0);
    v38 = sub_10000B244();
    v39 = v36;
    v40 = (uint64_t)v56;
    Section<>.init(_:content:)(v30, v32, v34 & 1, v39, sub_10000B23C, &v52 - 4, v37, v38);
    v41 = sub_100004F7C(&qword_1001168C0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 0, 1, v41);
  }
  else
  {
    v42 = sub_100004F7C(&qword_1001168C0);
    v40 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v56, 1, 1, v42);
  }
  v44 = v54;
  v43 = v55;
  v45 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v45(v55, v59, v7);
  v46 = v57;
  v45(v57, v18, v7);
  v47 = v53;
  sub_10000B2A8(v40, v53);
  v48 = v58;
  v45(v58, v43, v7);
  v49 = sub_100004F7C(&qword_1001168C8);
  v45(&v48[*(int *)(v49 + 48)], v46, v7);
  sub_10000B2A8(v47, (uint64_t)&v48[*(int *)(v49 + 64)]);
  sub_10000526C(v40, &qword_100116880);
  v50 = *(void (**)(char *, uint64_t))(v44 + 8);
  v50(v18, v7);
  v50(v59, v7);
  sub_10000526C(v47, &qword_100116880);
  v50(v46, v7);
  return ((uint64_t (*)(char *, uint64_t))v50)(v43, v7);
}

uint64_t sub_100009D44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_100004F7C(&qword_1001168A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(a1, (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForUnsubscribedUserView);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100108988, v10 + v4, v9 | 7);
  sub_10000B4D4((uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for ContextMenuForUnsubscribedUserView);
  v12 = sub_100004F7C(&qword_1001164F8);
  v13 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_10000B728, v11, sub_10000A728, 0, v12, v13);
  if (qword_100116118 != -1)
    swift_once(&qword_100116118, sub_100080208);
  v14 = qword_100124640;
  v15 = *(_QWORD *)algn_100124648;
  v16 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(v14, v15, v5, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100009F10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  _QWORD v30[2];

  v2 = v1;
  v30[0] = a1;
  v3 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100004F7C(&qword_1001168A8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100116890);
  __chkstk_darwin(v10);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(v2, (uint64_t)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForUnsubscribedUserView);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_100108960, v14 + v5, v13 | 7);
  sub_10000B4D4((uint64_t)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for ContextMenuForUnsubscribedUserView);
  v16 = sub_100004F7C(&qword_1001164F8);
  v17 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_10000B640, v15, sub_10000A88C, 0, v16, v17);
  if (qword_1001160C0 != -1)
    swift_once(&qword_1001160C0, sub_100080044);
  v18 = qword_100124590;
  v19 = *(_QWORD *)algn_100124598;
  v20 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(v18, v19, v6, v20);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D8E80);
  v22 = Text.init(_:tableName:bundle:comment:)(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_10000B64C(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  return sub_10000526C((uint64_t)v12, &qword_100116890);
}

uint64_t sub_10000A1B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v19[2];
  uint64_t v20;

  v2 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = *(_QWORD *)(a1 + 24);
  v19[0] = *(_QWORD *)(a1 + 16);
  v19[1] = v5;
  v6 = sub_100004F7C(&qword_100116850);
  State.wrappedValue.getter(&v20, v6);
  v7 = v20;
  v8 = *(_QWORD *)(v20 + OBJC_IVAR____TtC16MusicRecognition39ContextMenuForUnsubscribedUserViewModel_streamingServices);
  swift_bridgeObjectRetain(v8);
  swift_release(v7);
  v19[0] = v8;
  sub_10000B340(a1, (uint64_t)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForUnsubscribedUserView);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100108910, v10 + v4, v9 | 7);
  sub_10000B4D4((uint64_t)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, type metadata accessor for ContextMenuForUnsubscribedUserView);
  v12 = sub_100004F7C(&qword_1001168D0);
  v13 = sub_100004F7C(&qword_100116890);
  v14 = sub_10000522C(&qword_1001168D8, &qword_1001168D0, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = sub_10000B180();
  v16 = sub_100004864(&qword_1001168E0, type metadata accessor for StreamingService, (uint64_t)&unk_1000D3D00);
  return ForEach<>.init(_:content:)(v19, sub_10000B2F4, v11, v12, &type metadata for String, v13, v14, v15, v16);
}

uint64_t sub_10000A354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v0 = type metadata accessor for SymbolVariants(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v10 - v5;
  v11 = Image.init(systemName:)(0x73697370696C6C65, 0xE800000000000000);
  v7 = static SymbolVariants.circle.getter();
  SymbolVariants.fill.getter(v7);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v6, v0);
  View.symbolVariant(_:)(v4, &type metadata for Image, &protocol witness table for Image);
  v8(v4, v0);
  return swift_release(v11);
}

uint64_t sub_10000A44C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D19F0, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100116878, type metadata accessor for ContextMenuViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  result = swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel__shareSheetFromOverflow);
  return result;
}

uint64_t sub_10000A4E0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D19F0, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864(&qword_100116878, type metadata accessor for ContextMenuViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10000B15C, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t sub_10000A588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = sub_100004F7C(&qword_100116850);
  State.wrappedValue.getter(&v3, v0);
  v1 = v3;
  sub_1000C77FC((uint64_t (*)(_QWORD))sub_10000B770);
  return swift_release(v1);
}

uint64_t sub_10000A5EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OpenURLAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  sub_100006A38(v9);
  v10 = *(_QWORD *)(a1 + 24);
  v14[1] = *(_QWORD *)(a1 + 16);
  v14[2] = v10;
  v11 = sub_100004F7C(&qword_100116850);
  State.wrappedValue.getter(&v15, v11);
  v12 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamAppStoreURL, v2);
  swift_release(v12);
  OpenURLAction.callAsFunction(_:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10000A728()
{
  return Label.init(title:icon:)(sub_10000A764, 0, sub_100004274, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10000A764@<X0>(uint64_t a1@<X8>)
{
  return sub_10000A8E4(a1);
}

uint64_t sub_10000A780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  _QWORD v8[3];
  char v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[1] = *(_QWORD *)(a1 + 24);
  v1 = sub_100004F7C(&qword_100116850);
  State.wrappedValue.getter(&v11, v1);
  v2 = v11;
  KeyPath = swift_getKeyPath(&unk_1000D19F0, v3);
  v8[2] = v2;
  v9 = 1;
  v10[0] = v2;
  v5 = sub_100004864(&qword_100116878, type metadata accessor for ContextMenuViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v10, KeyPath, sub_10000B918, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member))
    v6 = 67840;
  else
    v6 = 2304;
  sub_1000A6994(v6, 0xD000000000000028, 0x80000001000D90E0);
  return swift_release(v2);
}

uint64_t sub_10000A88C()
{
  return Label.init(title:icon:)(sub_10000A8C8, 0, sub_10000A940, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10000A8C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10000A8E4(a1);
}

uint64_t sub_10000A8E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)();
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_10000A940@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000013, 0x80000001000D9110);
  *a1 = result;
  return result;
}

uint64_t sub_10000A97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;

  v25 = a2;
  v28 = a3;
  v4 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v26 = type metadata accessor for StreamingService(0);
  v7 = *(_QWORD *)(v26 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v26);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_1001168A8);
  v27 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(a1, (uint64_t)v9, type metadata accessor for StreamingService);
  sub_10000B340(v25, (uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForUnsubscribedUserView);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v8 + v15 + v14) & ~v15;
  v17 = swift_allocObject(&unk_100108938, v16 + v6, v13 | v15 | 7);
  sub_10000B4D4((uint64_t)v9, v17 + v14, type metadata accessor for StreamingService);
  sub_10000B4D4((uint64_t)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for ContextMenuForUnsubscribedUserView);
  v30 = a1;
  v18 = sub_100004F7C(&qword_1001164F8);
  v19 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_10000B518, v17, sub_10000B578, v29, v18, v19);
  v20 = (uint64_t *)(a1 + *(int *)(v26 + 24));
  v21 = *v20;
  v22 = v20[1];
  v23 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(v21, v22, v10, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v10);
}

uint64_t sub_10000ABB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  if (qword_100115DD0 != -1)
    swift_once(&qword_100115DD0, sub_100009160);
  v6 = v4 == qword_100116758 && v5 == unk_100116760;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, qword_100116758, unk_100116760, 0) & 1) != 0)
  {
    v7 = sub_100004F7C(&qword_100116850);
    State.wrappedValue.getter(&v12, v7);
    v8 = v12;
    sub_10000AD18((uint64_t)a1, a2, "Opening Apple Music provider URL %s");
    if (*(_BYTE *)(v8 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member))
      v9 = 67841;
    else
      v9 = 2305;
  }
  else
  {
    v10 = sub_100004F7C(&qword_100116850);
    State.wrappedValue.getter(&v12, v10);
    v8 = v12;
    sub_10000AD18((uint64_t)a1, a2, "Opening third party provider URL %s");
    if (*(_BYTE *)(v8 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member))
      v9 = 67844;
    else
      v9 = 2308;
  }
  sub_1000A6994(v9, 0xD000000000000028, 0x80000001000D90E0);
  return swift_release(v8);
}

uint64_t sub_10000AD18(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a3;
  v4 = type metadata accessor for OpenURLAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint8_t **)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for StreamingService(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v11 = type metadata accessor for Logger(0);
  sub_10000B5E8(v11, (uint64_t)qword_100124478);
  v12 = sub_10000B340(a1, (uint64_t)v10, type metadata accessor for StreamingService);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v29 = v4;
    v16 = (uint8_t *)v15;
    v26 = swift_slowAlloc(32, -1);
    v27 = v5;
    v32 = v26;
    *(_DWORD *)v16 = 136315138;
    v28 = a1;
    v25 = v16 + 4;
    v17 = type metadata accessor for URL(0);
    v18 = sub_100004864((unint64_t *)&qword_1001168E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    v21 = v20;
    v31 = sub_1000529F4(v19, v20, &v32);
    a1 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v25, v16 + 12);
    swift_bridgeObjectRelease(v21);
    sub_10000B600((uint64_t)v10, type metadata accessor for StreamingService);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v30, v16, 0xCu);
    v22 = v26;
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v5 = v27;
    swift_slowDealloc(v22, -1, -1);
    v23 = v16;
    v4 = v29;
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    sub_10000B600((uint64_t)v10, type metadata accessor for StreamingService);
  }

  type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  sub_100006A38(v7);
  OpenURLAction.callAsFunction(_:)(a1 + *(int *)(v8 + 20));
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10000AFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = (_QWORD *)(a1 + *(int *)(type metadata accessor for StreamingService(0) + 24));
  v4 = v3[1];
  v10[0] = *v3;
  v10[1] = v4;
  v5 = sub_10000B110();
  swift_bridgeObjectRetain(v4);
  result = Text.init<A>(_:)(v10, &type metadata for String, v5);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_10000B050@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for StreamingService(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  swift_bridgeObjectRetain(v5);
  result = Image.init(_internalSystemName:)(v4, v5);
  *a2 = result;
  return result;
}

uint64_t sub_10000B0AC(char a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t (**v5)(void);

  result = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  if ((a1 & 1) != 0)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
    v5 = (uint64_t (**)(void))(v1 + ((v4 + 16) & ~v4));
    if (*v5)
      return (*v5)();
  }
  return result;
}

uint64_t sub_10000B0F8@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100009944(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10000B110()
{
  unint64_t result;

  result = qword_100119780;
  if (!qword_100119780)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, &qword_100119780);
  }
  return result;
}

uint64_t sub_10000B15C()
{
  uint64_t v0;

  return sub_1000C7B70(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10000B178()
{
  uint64_t v0;

  return sub_100009D44(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10000B180()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116898;
  if (!qword_100116898)
  {
    v1 = sub_1000050C8(&qword_100116890);
    sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116898);
  }
  return result;
}

uint64_t sub_10000B21C@<X0>(uint64_t a1@<X8>)
{
  return sub_100009F10(a1);
}

uint64_t sub_10000B23C()
{
  uint64_t v0;

  return sub_10000A1B0(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10000B244()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001168B8;
  if (!qword_1001168B8)
  {
    v1 = sub_1000050C8(&qword_1001168B0);
    sub_10000B180();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1001168B8);
  }
  return result;
}

uint64_t sub_10000B2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100116880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B2F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContextMenuForUnsubscribedUserView(0) - 8) + 80);
  return sub_10000A97C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_10000B340(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000B384()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for StreamingService(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v12 = v0 + v4 + v1[5];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + v1[7] + 8));
  v14 = (_QWORD *)(v0 + v9);
  if (*(_QWORD *)(v0 + v9))
    swift_release(v14[1]);
  swift_release(v14[2]);
  swift_release(v14[3]);
  v15 = (_QWORD *)((char *)v14 + *(int *)(v6 + 24));
  v16 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  return swift_deallocObject(v0, v9 + v10, v3 | v8 | 7);
}

uint64_t sub_10000B4D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000B518()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for StreamingService(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContextMenuForUnsubscribedUserView(0) - 8) + 80);
  return sub_10000ABB4((uint64_t *)(v0 + v2), v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_10000B578()
{
  uint64_t v0;
  _QWORD v2[4];
  _BYTE v3[16];
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 16);
  v2[2] = v4;
  return Label.init(title:icon:)(sub_10000B5D8, v3, sub_10000B5E0, v2, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_10000B5D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000AFD4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10000B5E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10000B050(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10000B5E8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10000B600(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000B640()
{
  return sub_10000B734(sub_10000A780);
}

uint64_t sub_10000B64C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10000B660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release(v6[1]);
  swift_release(v6[2]);
  swift_release(v6[3]);
  v7 = (_QWORD *)((char *)v6 + *(int *)(v1 + 24));
  v8 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10000B728()
{
  return sub_10000B734((uint64_t (*)(uint64_t))sub_10000A588);
}

uint64_t sub_10000B734(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContextMenuForUnsubscribedUserView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_10000B770()
{
  uint64_t v0;

  return sub_10000A5EC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10000B77C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = qword_1001168F0;
  if (!qword_1001168F0)
  {
    v1 = sub_1000050C8(&qword_100116830);
    v2 = sub_1000050C8(&qword_100116820);
    v3 = type metadata accessor for NavigationBarButtonStyle(255);
    v4 = sub_1000050C8(&qword_100116818);
    v5 = type metadata accessor for ButtonMenuStyle(255);
    v10 = sub_1000050C8(&qword_100116810);
    v11 = sub_10000522C(&qword_100116860, &qword_100116810, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.sharingPicker(isPresented:item:subject:message:)>>, 1);
    v7 = sub_100004864(&qword_100116868, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
    v10 = v4;
    v11 = v5;
    v12 = OpaqueTypeConformance2;
    v13 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v9 = sub_100004864(&qword_100116870, type metadata accessor for NavigationBarButtonStyle, (uint64_t)&unk_1000D2ACC);
    v10 = v2;
    v11 = v3;
    v12 = v8;
    v13 = v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001168F0);
  }
  return result;
}

uint64_t sub_10000B918()
{
  return sub_10000B15C();
}

ValueMetadata *type metadata accessor for Blur()
{
  return &type metadata for Blur;
}

void *sub_10000B93C()
{
  return &protocol witness table for Never;
}

id sub_10000B948()
{
  _QWORD *v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", *v0);
  v2 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v1);

  return v2;
}

void sub_10000B9B4(void *a1)
{
  _QWORD *v1;
  id v3;

  v3 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", *v1);
  objc_msgSend(a1, "setEffect:", v3);

}

uint64_t sub_10000BA2C(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_10000BA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10000BB78();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10000BABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10000BB78();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10000BB0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000BB78();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10000BB34()
{
  unint64_t result;

  result = qword_1001168F8;
  if (!qword_1001168F8)
  {
    result = swift_getWitnessTable(&unk_1000D1A28, &type metadata for Blur);
    atomic_store(result, (unint64_t *)&qword_1001168F8);
  }
  return result;
}

unint64_t sub_10000BB78()
{
  unint64_t result;

  result = qword_100116900;
  if (!qword_100116900)
  {
    result = swift_getWitnessTable(&unk_1000D1A78, &type metadata for Blur);
    atomic_store(result, (unint64_t *)&qword_100116900);
  }
  return result;
}

uint64_t sub_10000BBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10000BBF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10000BC2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10000BC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10000BCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10000BCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10000BD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000BD48);
}

uint64_t sub_10000BD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10000BD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000BD90);
}

uint64_t sub_10000BD90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ShazamCampaignWebView(uint64_t a1)
{
  uint64_t result;

  result = qword_100116960;
  if (!qword_100116960)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShazamCampaignWebView);
  return result;
}

uint64_t sub_10000BE0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10000BE74()
{
  return sub_100004864(&qword_100116998, type metadata accessor for ShazamCampaignWebView, (uint64_t)&unk_1000D1BB8);
}

id sub_10000BEA0()
{
  id v0;
  id v1;
  id v2;
  id v3;

  v0 = objc_msgSend(objc_allocWithZone((Class)WKWebViewConfiguration), "init");
  v1 = objc_msgSend(objc_allocWithZone((Class)WKUserContentController), "init");
  objc_msgSend(v0, "setUserContentController:", v1);

  v2 = objc_msgSend(objc_allocWithZone((Class)WKPreferences), "init");
  objc_msgSend(v2, "setTextInteractionEnabled:", 0);
  objc_msgSend(v0, "setPreferences:", v2);
  v3 = objc_msgSend(objc_allocWithZone((Class)WKWebView), "initWithFrame:configuration:", v0, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v3, "setAllowsBackForwardNavigationGestures:", 0);

  return v3;
}

uint64_t sub_10000BF94(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for ShazamCampaignWebView(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v1, v6);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v9, 0, 60.0);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v14 = type metadata accessor for Logger(0);
  sub_10000B5E8(v14, (uint64_t)qword_100124478);
  v15 = sub_10000C398(v1, (uint64_t)v5);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v29 = v11;
    v20 = v19;
    v33 = v19;
    v30 = v10;
    v31 = a1;
    *(_DWORD *)v18 = 136315138;
    v21 = sub_100004864((unint64_t *)&qword_1001168E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v6, v21);
    v24 = v23;
    v32 = sub_1000529F4(v22, v23, &v33);
    v10 = v30;
    a1 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v24);
    sub_10000C3DC((uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Opening %s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v25 = v20;
    v11 = v29;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    sub_10000C3DC((uint64_t)v5);
  }

  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

id sub_10000C274()
{
  return sub_10000BEA0();
}

uint64_t sub_10000C28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100004864(&qword_1001169A0, type metadata accessor for ShazamCampaignWebView, (uint64_t)&unk_1000D1B28);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10000C2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100004864(&qword_1001169A0, type metadata accessor for ShazamCampaignWebView, (uint64_t)&unk_1000D1B28);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10000C35C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004864(&qword_1001169A0, type metadata accessor for ShazamCampaignWebView, (uint64_t)&unk_1000D1B28);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10000C398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShazamCampaignWebView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000C3DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ShazamCampaignWebView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000C418()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10000C484(v0, qword_100124478);
  sub_10000B5E8(v0, (uint64_t)qword_100124478);
  return Logger.init(subsystem:category:)(0xD000000000000021, 0x80000001000D9150, 1701998435, 0xE400000000000000);
}

uint64_t *sub_10000C484(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10000C4C4(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 16);
    v7 = v2;
    swift_retain(v6);
    CurrentValueSubject.send(_:)(&v7);
    swift_release(v5);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_10000C540()
{
  _QWORD *v0;

  swift_release(v0[2]);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v0 + 3);
  swift_release(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for AnyMusicLibrary()
{
  return objc_opt_self(_TtC16MusicRecognition15AnyMusicLibrary);
}

uint64_t sub_10000C594()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10000C5B0, 0, 0);
}

uint64_t sub_10000C5B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_10000C9EC;
  return v7(v2, v3);
}

uint64_t sub_10000C62C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10000C648, 0, 0);
}

uint64_t sub_10000C648()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 24);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_10000C6C4;
  return v7(v2, v3);
}

uint64_t sub_10000C6C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 24);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000C70C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10000C728, 0, 0);
}

uint64_t sub_10000C728()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 32);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 24) = v5;
  *v5 = v0;
  v5[1] = sub_10000C7A4;
  return v7(v2, v3);
}

uint64_t sub_10000C7A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_10000C7F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_10000C810, 0, 0);
}

uint64_t sub_10000C810()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[3];
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 40);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *v5 = v0;
  v5[1] = sub_10000C894;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[2], v2, v3);
}

uint64_t sub_10000C894()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000C8DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return swift_task_switch(sub_10000C8FC, 0, 0);
}

uint64_t sub_10000C8FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[4];
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 48);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_10000C980;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[2], v0[3], v2, v3);
}

uint64_t sub_10000C980()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_QWORD *sub_10000C9C8(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000C9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, char *, uint64_t);
  void (*v18)(uint64_t, uint64_t);
  uint64_t v20;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD **)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v20 - v12;
  v14 = swift_retain(v3);
  ObservationRegistrar.init()(v14);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC16MusicRecognition39ContextMenuForUnsubscribedUserViewModel_streamingServices) = a3;
  swift_release(v3);
  v15 = (void (*)(char *, uint64_t, uint64_t))v8[2];
  v15(v13, a1, v7);
  v16 = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(v11, a2, v7);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel__shareSheetFromOverflow) = 0;
  ObservationRegistrar.init()(v16);
  v17 = (void (*)(uint64_t, char *, uint64_t))v8[4];
  v17(v3 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamAppStoreURL, v13, v7);
  v17(v3 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamURL, v11, v7);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member) = 0;
  v18 = (void (*)(uint64_t, uint64_t))v8[1];
  v18(a2, v7);
  v18(a1, v7);
  return v3;
}

uint64_t sub_10000CB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC16MusicRecognition39ContextMenuForUnsubscribedUserViewModel_streamingServices));
  v1 = v0 + OBJC_IVAR____TtC16MusicRecognition39ContextMenuForUnsubscribedUserViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_10000CBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamAppStoreURL;
  v2 = type metadata accessor for URL(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamURL, v2);
  v4 = v0 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel___observationRegistrar;
  v5 = type metadata accessor for ObservationRegistrar(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC16MusicRecognition39ContextMenuForUnsubscribedUserViewModel_streamingServices));
  v6(v0 + OBJC_IVAR____TtC16MusicRecognition39ContextMenuForUnsubscribedUserViewModel___observationRegistrar, v5);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000CC78()
{
  return type metadata accessor for ContextMenuForUnsubscribedUserViewModel(0);
}

uint64_t type metadata accessor for ContextMenuForUnsubscribedUserViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100116AB0;
  if (!qword_100116AB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContextMenuForUnsubscribedUserViewModel);
  return result;
}

uint64_t sub_10000CCBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 216);
    if (!result)
      return 0;
  }
  return result;
}

id sub_10000CDDC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController____lazy_storage___customLayoutHeightConstraint;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController____lazy_storage___customLayoutHeightConstraint);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController____lazy_storage___customLayoutHeightConstraint);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView), "heightAnchor");
    v5 = objc_msgSend(v4, "constraintEqualToConstant:", 84.0);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_10000CEE0(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v13;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v4 = type metadata accessor for Logger(0);
  sub_10000B5E8(v4, (uint64_t)qword_100124478);
  v5 = v2;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v13 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Deinitializing %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v14.receiver = v5;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "dealloc");
}

id sub_10000D15C(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id result;
  void *v9;
  void *v10;
  NSString v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned __int8 v35;
  objc_super v36;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v5 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36.receiver = v2;
  v36.super_class = ObjectType;
  objc_msgSendSuper2(&v36, "viewDidLoad");
  result = objc_msgSend(v2, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v9 = result;
  objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  result = objc_msgSend(v3, "view");
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v10 = result;
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setAccessibilityIdentifier:", v11);

  result = objc_msgSend(v3, "view");
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v12 = result;
  v13 = *(void **)&v3[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView];
  objc_msgSend(result, "addSubview:", v13);

  v14 = qword_100115EE0;
  v16 = v13;
  if (v14 != -1)
    swift_once(&qword_100115EE0, sub_100045C0C);
  v17 = qword_100124510;
  KeyPath = swift_getKeyPath(&unk_1000D1D58, v15);
  v20 = swift_getKeyPath(&unk_1000D1D80, v19);
  static Published.subscript.getter(&v33, v17, KeyPath, v20);
  swift_release(v20);
  swift_release(KeyPath);
  v21 = v33;
  v22 = v34;
  LOBYTE(v20) = v35;
  sub_1000A3C24(v33, v34, v35);
  sub_1000100FC(v21, v22, v20);

  sub_10000D498();
  v23 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 1, 1, v23);
  v24 = swift_allocObject(&unk_100108C98, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v3);
  type metadata accessor for MainActor(0);
  v25 = swift_retain(v24);
  v26 = static MainActor.shared.getter(v25);
  v27 = (_QWORD *)swift_allocObject(&unk_100108D10, 40, 7);
  v27[2] = v26;
  v27[3] = &protocol witness table for MainActor;
  v27[4] = v24;
  swift_release(v24);
  v28 = sub_1000AA064((uint64_t)v7, (uint64_t)&unk_100116DA8, (uint64_t)v27);
  swift_release(v28);
  sub_100010200((uint64_t)v3, qword_100124510);
  v29 = sub_100004F7C(&qword_100116DB0);
  v30 = swift_allocObject(v29, 48, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1000D1CC0;
  *(_QWORD *)(v30 + 32) = type metadata accessor for UITraitBacklightLuminance(0);
  *(_QWORD *)(v30 + 40) = &protocol witness table for UITraitBacklightLuminance;
  v31 = UIViewController.registerForTraitChanges<A>(_:handler:)(v30, sub_1000102FC, 0, ObjectType);
  swift_bridgeObjectRelease(v30);
  return (id)swift_unknownObjectRelease(v31);
}

uint64_t sub_10000D498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t v8;
  void (**v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(void *);
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView);
  v2 = swift_allocObject(&unk_100108C98, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  v3 = (uint64_t (**)())(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_retryHandler);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_retryHandler + 8);
  *v3 = sub_10001072C;
  v3[1] = (uint64_t (*)())v2;
  swift_release(v4);
  v5 = swift_allocObject(&unk_100108C98, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v0);
  v6 = (uint64_t (**)())(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_cancellationHandler);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_cancellationHandler + 8);
  *v6 = sub_100010760;
  v6[1] = (uint64_t (*)())v5;
  swift_release(v7);
  v8 = swift_allocObject(&unk_100108C98, 24, 7);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  v9 = (void (**)(uint64_t))(v1
                                     + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_appleMusicURLHandler);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_appleMusicURLHandler + 8);
  *v9 = sub_100010794;
  v9[1] = (void (*)(uint64_t))v8;
  swift_release(v10);
  v11 = swift_allocObject(&unk_100108C98, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v0);
  v12 = (uint64_t (**)(void *))(v1
                                        + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_displayMatchedMediaItemHandler);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_displayMatchedMediaItemHandler + 8);
  *v12 = sub_10001079C;
  v12[1] = (uint64_t (*)(void *))v11;
  return swift_release(v13);
}

void sub_10000D60C(char a1, uint64_t a2)
{
  char *v2;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  objc_super v14;

  v14.receiver = v2;
  v14.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v14, "viewWillAppear:", a1 & 1);
  if ((v2[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_presentationStyle] & 1) == 0)
  {
    v4 = objc_msgSend(v2, "view");
    if (v4)
    {
      v5 = v4;
      if (qword_100115DE0 != -1)
        swift_once(&qword_100115DE0, sub_10000FA24);
      objc_msgSend(v5, "setBackgroundColor:", qword_100124498);

      v6 = (void *)objc_opt_self(NSLayoutConstraint);
      v7 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeConstraints;
      v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeConstraints];
      sub_100010498(0, (unint64_t *)&qword_1001177E0, NSLayoutConstraint_ptr);
      swift_bridgeObjectRetain(v8);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v8);
      objc_msgSend(v6, "deactivateConstraints:", isa);

      sub_10000D794(4);
      v10 = *(_QWORD *)&v2[v7];
      *(_QWORD *)&v2[v7] = v11;
      swift_bridgeObjectRelease(v10);
      v12 = *(_QWORD *)&v2[v7];
      swift_bridgeObjectRetain(v12);
      v13 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v12);
      objc_msgSend(v6, "activateConstraints:", v13);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10000D794(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  double v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  uint64_t v79;
  CGRect v80;

  if (a1 != 4)
  {
    if (a1 == 3)
    {
      v21 = sub_100004F7C(&qword_100116D90);
      v4 = swift_allocObject(v21, 64, 7);
      *(_OWORD *)(v4 + 16) = xmmword_1000D1CE0;
      v22 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_listeningAccessoryView];
      v23 = objc_msgSend(v22, "centerXAnchor");
      v24 = objc_msgSend(v1, "view");
      if (!v24)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      v25 = v24;
      v26 = objc_msgSend(v24, "SBUISA_systemApertureLeadingConcentricContentLayoutGuide");

      v27 = objc_msgSend(v26, "centerXAnchor");
      v28 = objc_msgSend(v23, "constraintEqualToAnchor:", v27);

      *(_QWORD *)(v4 + 32) = v28;
      v29 = objc_msgSend(v22, "widthAnchor");
      v30 = objc_msgSend(v29, "constraintEqualToConstant:", 25.0);

      *(_QWORD *)(v4 + 40) = v30;
      v31 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_waveformAccessoryView];
      v32 = objc_msgSend(v31, "widthAnchor");
      v33 = objc_msgSend(v32, "constraintEqualToConstant:", 24.0);

      *(_QWORD *)(v4 + 48) = v33;
      v34 = objc_msgSend(v31, "centerXAnchor");
      v35 = objc_msgSend(v1, "view");
      if (!v35)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v36 = v35;
      v37 = objc_msgSend(v35, "SBUISA_systemApertureTrailingConcentricContentLayoutGuide");

      v38 = objc_msgSend(v37, "centerXAnchor");
      v39 = objc_msgSend(v34, "constraintEqualToAnchor:", v38);

      *(_QWORD *)(v4 + 56) = v39;
    }
    else
    {
      v2 = (uint64_t)_swiftEmptyArrayStorage;
      if (a1 != 2)
        goto LABEL_15;
      v3 = sub_100004F7C(&qword_100116D90);
      v4 = swift_allocObject(v3, 48, 7);
      *(_OWORD *)(v4 + 16) = xmmword_1000D1CF0;
      v5 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_minimalAccessoryView];
      v6 = objc_msgSend(v5, "heightAnchor");
      v7 = objc_msgSend(v6, "constraintEqualToConstant:", 20.0);

      *(_QWORD *)(v4 + 32) = v7;
      v8 = objc_msgSend(v5, "widthAnchor");
      v9 = objc_msgSend(v8, "constraintEqualToConstant:", 20.0);

      *(_QWORD *)(v4 + 40) = v9;
    }
    specialized Array._endMutation()();
    v2 = v4;
LABEL_15:
    if (!((unint64_t)v2 >> 62))
      goto LABEL_16;
    goto LABEL_31;
  }
  v10 = objc_msgSend(v1, "view");
  if (!v10)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v11 = v10;
  v12 = objc_msgSend(v10, "window");

  v13 = objc_msgSend(v1, "view");
  v14 = v13;
  if (v12)
  {
    if (!v13)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v15 = objc_msgSend(v13, "widthAnchor");

    v16 = objc_msgSend(v1, "view");
    if (!v16)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v17 = v16;
    v18 = objc_msgSend(v16, "window");

    if (!v18)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v19 = objc_msgSend(v18, "widthAnchor");

    v20 = objc_msgSend(v15, "constraintEqualToAnchor:", v19);
LABEL_26:

    v56 = sub_100004F7C(&qword_100116D90);
    v2 = swift_allocObject(v56, 80, 7);
    *(_OWORD *)(v2 + 16) = xmmword_1000D1CD0;
    *(_QWORD *)(v2 + 32) = v20;
    v57 = v20;
    *(_QWORD *)(v2 + 40) = sub_10000CDDC();
    v58 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView];
    v59 = objc_msgSend(v58, "topAnchor");
    v60 = objc_msgSend(v1, "view");
    if (!v60)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v61 = v60;
    v62 = objc_msgSend(v60, "topAnchor");

    v63 = objc_msgSend(v59, "constraintEqualToAnchor:", v62);
    *(_QWORD *)(v2 + 48) = v63;
    v64 = objc_msgSend(v58, "bottomAnchor");
    v65 = objc_msgSend(v1, "view");
    if (!v65)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v66 = v65;
    v67 = objc_msgSend(v65, "bottomAnchor");

    v68 = objc_msgSend(v64, "constraintEqualToAnchor:", v67);
    *(_QWORD *)(v2 + 56) = v68;
    v69 = objc_msgSend(v58, "leadingAnchor");
    v70 = objc_msgSend(v1, "view");
    if (!v70)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v71 = v70;
    v72 = objc_msgSend(v70, "leadingAnchor");

    v73 = objc_msgSend(v69, "constraintEqualToAnchor:", v72);
    *(_QWORD *)(v2 + 64) = v73;
    v74 = objc_msgSend(v58, "trailingAnchor");
    v75 = objc_msgSend(v1, "view");
    if (!v75)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v76 = v75;
    v77 = objc_msgSend(v75, "trailingAnchor");

    v78 = objc_msgSend(v74, "constraintEqualToAnchor:", v77);
    *(_QWORD *)(v2 + 72) = v78;
    specialized Array._endMutation()();

    if (!((unint64_t)v2 >> 62))
    {
LABEL_16:
      v40 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v40)
      {
LABEL_17:
        specialized ContiguousArray.reserveCapacity(_:)(v40);
        if ((v40 & 0x8000000000000000) == 0)
        {
          v41 = 0;
          do
          {
            if ((v2 & 0xC000000000000001) != 0)
              v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41);
            else
              v42 = *(id *)(v2 + 8 * v41 + 32);
            v44 = v42;
            ++v41;
            LODWORD(v43) = 1144750080;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(objc_msgSend(v42, "setPriority:", v43));
            v45 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v45);
            v46 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v44);
            specialized ContiguousArray._endMutation()(v46);
          }
          while (v40 != v41);
          goto LABEL_35;
        }
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      swift_bridgeObjectRelease(v2);
      return;
    }
LABEL_31:
    if (v2 < 0)
      v79 = v2;
    else
      v79 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v40 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v2);
    if (v40)
      goto LABEL_17;
    goto LABEL_35;
  }
  if (v13)
  {
    v19 = objc_msgSend(v13, "widthAnchor");

    v47 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v47, "nativeBounds");
    v49 = v48;
    v51 = v50;
    v53 = v52;
    v55 = v54;

    v80.origin.x = v49;
    v80.origin.y = v51;
    v80.size.width = v53;
    v80.size.height = v55;
    v20 = objc_msgSend(v19, "constraintEqualToConstant:", CGRectGetWidth(v80));
    goto LABEL_26;
  }
LABEL_47:
  __break(1u);
}

uint64_t sub_10000E008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[12] = a1;
  v4[13] = a4;
  v5 = sub_100004F7C(&qword_100116DC0);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v4[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[16] = v7;
  v4[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100116DC8);
  v4[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[19] = v9;
  v4[20] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100116DD0);
  v4[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[22] = v11;
  v4[23] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MainActor(0);
  v4[24] = static MainActor.shared.getter(v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor);
  return swift_task_switch(sub_10000E118, v13, v14);
}

uint64_t sub_10000E118()
{
  uint64_t v0;
  uint64_t v1;
  char *Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 192));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    if (qword_100115EE0 != -1)
      swift_once(&qword_100115EE0, sub_100045C0C);
    v3 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 160);
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 104) + 16;
    v8 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 120);
    swift_beginAccess(qword_100124510 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer__result, v0 + 40, 33, 0);
    v9 = sub_100004F7C(&qword_100116DD8);
    Published.projectedValue.getter(v9);
    v10 = swift_endAccess(v0 + 40);
    NSRunLoop.SchedulerTimeType.Stride.init(_:)(v10, 0.02);
    *(_QWORD *)(v0 + 88) = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v11 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
    v12 = sub_100010498(0, (unint64_t *)&qword_100116DE0, NSRunLoop_ptr);
    v13 = sub_10000522C(&qword_100116DE8, &qword_100116DC8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v14 = sub_1000104D0();
    Publisher.debounce<A>(for:scheduler:options:)(v8, v0 + 88, v6, v5, v12, v13, v14);
    sub_10000526C(v6, &qword_100116DC0);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v8, v28);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v4, v5);
    v15 = swift_allocObject(&unk_100108C98, 24, 7);
    swift_beginAccess(v7, v0 + 64, 0, 0);
    v16 = (void *)swift_unknownObjectWeakLoadStrong(v7);
    swift_unknownObjectWeakInit(v15 + 16, v16);

    v17 = sub_10000522C(&qword_100116DF8, &qword_100116DD0, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
    v18 = Publisher<>.sink(receiveValue:)(sub_100010528, v15, v30, v17);
    v19 = swift_release(v15);
    (*(void (**)(uint64_t, uint64_t, __n128))(v31 + 8))(v3, v30, v19);
    v20 = *(_QWORD *)&Strong[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_musicRecognitionCancellable];
    *(_QWORD *)&Strong[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_musicRecognitionCancellable] = v18;

    swift_release(v20);
  }
  v21 = Strong == 0;
  v22 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 112);
  **(_BYTE **)(v0 + 96) = v21;
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000E43C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  char *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _BYTE v12[24];

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (char *)Strong;
    sub_1000A49C8(v2, v3, v4);
    v8 = *(id *)&v7[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView];
    sub_1000A3C24(v2, v3, v4);

    v9 = *(id *)&v7[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_listeningAccessoryView];
    sub_1000A3F40(v2, v3, v4);

    v10 = *(id *)&v7[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_minimalAccessoryView];
    sub_1000A3F40(v2, v3, v4);

    v11 = *(id *)&v7[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_waveformAccessoryView];
    sub_1000A45A0(v2, v3, v4);

  }
}

void sub_10000E554(char *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = objc_msgSend(a1, "traitCollection");
  v3 = objc_msgSend(v2, "_backlightLuminance");

  if (v3 == (id)2)
  {
    v5 = objc_retain(*(id *)(*(_QWORD *)&a1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView]
                           + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView));
    sub_100078EEC();

  }
  else if (v3 == (id)1)
  {
    v4 = objc_retain(*(id *)(*(_QWORD *)&a1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView]
                           + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView));
    sub_100078DB4();

  }
}

void sub_10000E630(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  uint64_t v9;

  sub_10000D794(*(_QWORD *)(v1
                          + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeLayoutMode));
  v4 = v3;
  v5 = swift_allocObject(&unk_100108C98, 24, 7);
  swift_unknownObjectWeakInit(v5 + 16, v1);
  v6 = swift_allocObject(&unk_100108CC0, 32, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  v8[4] = sub_1000100EC;
  v9 = v6;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10000E83C;
  v8[3] = &unk_100108CD8;
  v7 = _Block_copy(v8);
  swift_release(v9);
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v7, 0);
  _Block_release(v7);
}

void sub_10000E718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  _BYTE v14[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (char *)Strong;
    v7 = (void *)objc_opt_self(NSLayoutConstraint);
    v8 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeConstraints;
    v9 = *(_QWORD *)&v6[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeConstraints];
    sub_100010498(0, (unint64_t *)&qword_1001177E0, NSLayoutConstraint_ptr);
    swift_bridgeObjectRetain(v9);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v9);
    objc_msgSend(v7, "deactivateConstraints:", isa);

    v11 = *(_QWORD *)&v6[v8];
    *(_QWORD *)&v6[v8] = a3;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v11);
    v12 = *(_QWORD *)&v6[v8];
    swift_bridgeObjectRetain(v12);
    v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v12);
    objc_msgSend(v7, "activateConstraints:", v13);

  }
}

uint64_t sub_10000E83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

id sub_10000E8CC(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v8;
  objc_class *v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  NSString v19;
  id v20;
  objc_super v22;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  v8 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_listeningAccessoryView;
  v9 = (objc_class *)type metadata accessor for ListeningAccessoryView();
  v10 = objc_allocWithZone(v9);
  v11 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_waveformAccessoryView;
  *(_QWORD *)&v11[v12] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WaveformAccessoryView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_minimalAccessoryView;
  *(_QWORD *)&v11[v13] = objc_msgSend(objc_allocWithZone(v9), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView;
  *(_QWORD *)&v11[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MatchingFlowCustomView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_presentationStyle] = 1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeLayoutMode] = 0;
  v15 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_keyColor;
  if (qword_100115DE8 != -1)
    swift_once(&qword_100115DE8, sub_10000FA5C);
  v16 = *(_QWORD *)algn_1001244A8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1001244A8);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v18 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v17);

  *(_QWORD *)&v11[v15] = v18;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_contentRole] = 2;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_preferredLayoutMode] = 3;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_musicRecognitionCancellable] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_assertionTimer] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController____lazy_storage___customLayoutHeightConstraint] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_maximumLayoutMode] = 4;
  *(_QWORD *)&v11[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeConstraints] = _swiftEmptyArrayStorage;

  if (a2)
  {
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v19 = 0;
  }
  v22.receiver = v11;
  v22.super_class = ObjectType;
  v20 = objc_msgSendSuper2(&v22, "initWithNibName:bundle:", v19, a3);

  return v20;
}

id sub_10000EBBC(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v6;
  objc_class *v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  id v17;
  objc_super v19;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v6 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_listeningAccessoryView;
  v7 = (objc_class *)type metadata accessor for ListeningAccessoryView();
  v8 = objc_allocWithZone(v7);
  v9 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v10 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_waveformAccessoryView;
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for WaveformAccessoryView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_minimalAccessoryView;
  *(_QWORD *)&v9[v11] = objc_msgSend(objc_allocWithZone(v7), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v12 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView;
  *(_QWORD *)&v9[v12] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MatchingFlowCustomView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_presentationStyle] = 1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeLayoutMode] = 0;
  v13 = OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_keyColor;
  if (qword_100115DE8 != -1)
    swift_once(&qword_100115DE8, sub_10000FA5C);
  v14 = *(_QWORD *)algn_1001244A8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1001244A8);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v16 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v15);

  *(_QWORD *)&v9[v13] = v16;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_contentRole] = 2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_preferredLayoutMode] = 3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_musicRecognitionCancellable] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_assertionTimer] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController____lazy_storage___customLayoutHeightConstraint] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_maximumLayoutMode] = 4;
  *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeConstraints] = _swiftEmptyArrayStorage;

  v19.receiver = v9;
  v19.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v19, "initWithCoder:", a1);

  return v17;
}

uint64_t type metadata accessor for MusicRecognitionPlatterViewController()
{
  return objc_opt_self(_TtC16MusicRecognition37MusicRecognitionPlatterViewController);
}

void sub_10000EE58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  int64_t v5;
  char *v6;
  void **v7;
  float *v8;
  unint64_t v9;
  int64_t v10;
  float v11;
  unint64_t v12;
  float v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  void **v21;
  float *v22;
  char *v23;
  float v24;
  unint64_t v25;
  float v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void **aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  id (*v38)();
  uint64_t v39;

  v2 = a1;
  v3 = *(char **)(*(_QWORD *)(v1
                            + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView)
                + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView);
  v4 = *(void **)&v3[OBJC_IVAR____TtC16MusicRecognition13ListeningView_waveformView];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    aBlock = (void **)_swiftEmptyArrayStorage;
    v6 = v3;
    sub_1000531BC(0, v5, 0);
    v7 = (void **)_swiftEmptyArrayStorage;
    v33 = v2;
    v8 = (float *)(v2 + 32);
    v9 = _swiftEmptyArrayStorage[2];
    v10 = v5;
    do
    {
      v11 = *v8;
      aBlock = v7;
      v12 = (unint64_t)v7[3];
      if (v9 >= v12 >> 1)
      {
        sub_1000531BC(v12 > 1, v9 + 1, 1);
        v7 = aBlock;
      }
      v13 = powf(v11 * 0.6, 0.4);
      v7[2] = (void *)(v9 + 1);
      *((float *)v7 + v9 + 8) = v13;
      ++v8;
      ++v9;
      --v10;
    }
    while (v10);
    v1 = v32;
    v2 = v33;
    v4 = v31;
  }
  else
  {
    v14 = v3;
    v7 = (void **)_swiftEmptyArrayStorage;
  }
  v15 = (void *)objc_opt_self(UIView);
  v16 = swift_allocObject(&unk_100108BF8, 32, 7);
  *(_QWORD *)(v16 + 16) = v4;
  *(_QWORD *)(v16 + 24) = v7;
  v38 = sub_10001004C;
  v39 = v16;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_1000A5684;
  v37 = &unk_100108C10;
  v17 = _Block_copy(&aBlock);
  v18 = v39;
  v19 = v4;
  swift_release(v18);
  objc_msgSend(v15, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v17, 0, 0.325, 0.0, 0.8, 0.0);
  _Block_release(v17);

  v20 = *(void **)(*(_QWORD *)(v1
                             + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_waveformAccessoryView)
                 + OBJC_IVAR____TtC16MusicRecognition21WaveformAccessoryView_waveformView);
  v21 = (void **)_swiftEmptyArrayStorage;
  if (v5)
  {
    aBlock = (void **)_swiftEmptyArrayStorage;
    sub_1000531BC(0, v5, 0);
    v21 = aBlock;
    v22 = (float *)(v2 + 32);
    v23 = (char *)aBlock[2];
    do
    {
      v24 = *v22;
      aBlock = v21;
      v25 = (unint64_t)v21[3];
      if ((unint64_t)v23 >= v25 >> 1)
      {
        sub_1000531BC(v25 > 1, (int64_t)(v23 + 1), 1);
        v21 = aBlock;
      }
      v26 = powf(v24 * 0.6, 0.4);
      v21[2] = v23 + 1;
      *((float *)v21 + (_QWORD)v23 + 8) = v26;
      ++v22;
      ++v23;
      --v5;
    }
    while (v5);
  }
  v27 = swift_allocObject(&unk_100108C48, 32, 7);
  *(_QWORD *)(v27 + 16) = v20;
  *(_QWORD *)(v27 + 24) = v21;
  v38 = sub_100010C1C;
  v39 = v27;
  aBlock = _NSConcreteStackBlock;
  v35 = 1107296256;
  v36 = sub_1000A5684;
  v37 = &unk_100108C60;
  v28 = _Block_copy(&aBlock);
  v29 = v39;
  v30 = v20;
  swift_release(v29);
  objc_msgSend(v15, "animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:", 0, v28, 0, 0.325, 0.0, 0.8, 0.0);
  _Block_release(v28);
}

uint64_t sub_10000F218(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[5] = a1;
  v2 = sub_100004F7C(&qword_100116E28);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[7] = v3;
  v1[8] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[9] = v4;
  v1[10] = v5;
  return swift_task_switch(sub_10000F2AC, v4, v5);
}

uint64_t sub_10000F2AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_100115EE0 != -1)
    a1 = swift_once(&qword_100115EE0, sub_100045C0C);
  v2 = v1[7];
  v1[11] = qword_100124510;
  v1[12] = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[13] = v3;
  v1[14] = v4;
  return swift_task_switch(sub_10000F340, v3, v4);
}

uint64_t sub_10000F340()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = v0[6];
  v2 = v0[11] + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
  swift_beginAccess(v2, v0 + 2, 0, 0);
  sub_100010AE8(v2, v1);
  v3 = (uint64_t **)swift_task_alloc(dword_100118BDC);
  v0[15] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10000F3C8;
  return sub_100046CB4(1, v0[6]);
}

uint64_t sub_10000F3C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 120);
  v6 = *(_QWORD *)(*v3 + 48);
  *(_QWORD *)(v4 + 128) = a1;
  *(_QWORD *)(v4 + 136) = a2;
  *(_BYTE *)(v4 + 144) = a3;
  swift_task_dealloc(v5);
  sub_10000526C(v6, &qword_100116E28);
  return swift_task_switch(sub_10000F438, *(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 112));
}

uint64_t sub_10000F438()
{
  _QWORD *v0;

  swift_release(v0[12]);
  return swift_task_switch(sub_10000F470, v0[9], v0[10]);
}

uint64_t sub_10000F470()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_BYTE *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  *(_QWORD *)v5 = v3;
  *(_QWORD *)(v5 + 8) = v2;
  *(_BYTE *)(v5 + 16) = v1;
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F4CC(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v22[24];

  v10 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v10);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v14 = (void *)Strong;
    sub_1000107A4(a2);

  }
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  v16 = type metadata accessor for MainActor(0);
  v17 = static MainActor.shared.getter(v16);
  v18 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = &protocol witness table for MainActor;
  v19 = a5(v12, a4, v18);
  return swift_release(v19);
}

uint64_t sub_10000F5E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[3] = v2;
  v0[4] = v3;
  return swift_task_switch(sub_10000F64C, v2, v3);
}

uint64_t sub_10000F64C()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_100115EE0 != -1)
    swift_once(&qword_100115EE0, sub_100045C0C);
  v1 = (_QWORD *)swift_task_alloc(dword_100118BBC);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_10000594C;
  return sub_1000455FC();
}

void sub_10000F6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000107A4(1u);

  }
  sub_1000C8FE8(a1);
}

uint64_t sub_10000F720(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_1000107A4(0xBu);

  }
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  type metadata accessor for MainActor(0);
  v10 = a1;
  v11 = static MainActor.shared.getter(v10);
  v12 = (_QWORD *)swift_allocObject(&unk_100108DD8, 40, 7);
  v12[2] = v11;
  v12[3] = &protocol witness table for MainActor;
  v12[4] = v10;
  v13 = sub_1000A5724((uint64_t)v6, (uint64_t)&unk_100116E20, (uint64_t)v12);
  return swift_release(v13);
}

uint64_t sub_10000F83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[15] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[16] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[17] = v6;
  v4[18] = v7;
  return swift_task_switch(sub_10000F8A8, v6, v7);
}

uint64_t sub_10000F8A8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = v0[15];
  v3 = (void *)objc_opt_self(SHMediaItem);
  v0[2] = v0;
  v0[3] = sub_10000F950;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_1000A56B0;
  v5[3] = &unk_100108DF0;
  v5[4] = v4;
  objc_msgSend(v3, "presentMediaItem:completionHandler:", v2, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_10000F950()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 152) = v2;
  if (v2)
    v3 = sub_10000F9E0;
  else
    v3 = sub_10000F9AC;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
}

uint64_t sub_10000F9AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F9E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 128));
  swift_willThrow(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10000FA24()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  qword_100124498 = (uint64_t)result;
  return result;
}

void sub_10000FA5C()
{
  qword_1001244A0 = 0x6F436D617A616853;
  *(_QWORD *)algn_1001244A8 = 0xEB00000000726F6CLL;
}

void sub_10000FA88(double a1)
{
  char *v1;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  uint64_t v8;

  if (v1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_presentationStyle] == 1)
  {
    v3 = sub_10000CDDC();
    objc_msgSend(v3, "setConstant:", a1);

    if (*(_QWORD *)&v1[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_activeLayoutMode] == 4)
    {
      v4 = objc_msgSend(v1, "systemApertureElementContext");
      v5 = swift_allocObject(&unk_100108C98, 24, 7);
      swift_unknownObjectWeakInit(v5 + 16, v1);
      v7[4] = sub_100010724;
      v8 = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 1107296256;
      v7[2] = sub_1000A5684;
      v7[3] = &unk_100108DA0;
      v6 = _Block_copy(v7);
      objc_msgSend(v4, "setElementNeedsLayoutUpdateWithOptions:coordinatedAnimations:", 1, v6, swift_release(v8).n128_f64[0]);
      _Block_release(v6);
      swift_unknownObjectRelease(v4);
    }
  }
}

uint64_t sub_10000FBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[2] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[3] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[4] = v6;
  v4[5] = v7;
  return swift_task_switch(sub_10000FC20, v6, v7);
}

uint64_t sub_10000FC20()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_100115EE0 != -1)
    swift_once(&qword_100115EE0, sub_100045C0C);
  v1 = (_QWORD *)swift_task_alloc(dword_100118BBC);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_10000FC94;
  return sub_1000455FC();
}

uint64_t sub_10000FC94()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return swift_task_switch(sub_10000FCE0, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10000FCE0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 24));
  v2 = objc_retain(*(id *)(*(_QWORD *)(v1
                                     + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView)
                         + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView));
  sub_100078EEC();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[5] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v4[9] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v4[10] = v8;
  v4[11] = v9;
  return swift_task_switch(sub_10000FDD0, v8, v9);
}

uint64_t sub_10000FDD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.seconds(_:)(10.0);
  v3 = v2;
  ContinuousClock.init()();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100118C10 + dword_100118C10);
  v4 = (_QWORD *)swift_task_alloc(unk_100118C14);
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = sub_10000FE64;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_10000FE64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[7] + 8))(v2[8], v2[6]);
  if (v0)
    v4 = sub_10000FF8C;
  else
    v4 = sub_10000FED4;
  return swift_task_switch(v4, v2[10], v2[11]);
}

uint64_t sub_10000FED4()
{
  uint64_t v0;
  uint64_t v1;
  char *Strong;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    *(_QWORD *)&Strong[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_maximumLayoutMode] = 1;
    *(_QWORD *)&Strong[OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_preferredLayoutMode] = 1;
    v4 = objc_msgSend(Strong, "systemApertureElementContext");
    objc_msgSend(v4, "requestTransitionToPreferredLayoutMode");
    swift_unknownObjectRelease(v4);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000FF8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000FFC8(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  id v4;
  _BYTE v5[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(Strong, "view");

    if (v4)
    {
      objc_msgSend(v4, "layoutIfNeeded");

    }
    else
    {
      __break(1u);
    }
  }
}

id sub_10001004C()
{
  uint64_t v0;

  return sub_10001F100(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100010054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100010064(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100010070()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001009C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000100C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000100EC(uint64_t a1)
{
  uint64_t v1;

  sub_10000E718(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1000100FC(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    sub_100010110(a1, a2, a3);
}

void sub_100010110(void *a1, void *a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2)
      return;
    swift_errorRelease();
    a1 = a2;
  }

}

uint64_t sub_10001014C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100116DA4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000101B8;
  return sub_10000E008(a1, v4, v5, v6);
}

uint64_t sub_1000101B8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100010200(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  _BYTE v10[24];
  _BYTE v11[8];

  swift_unknownObjectWeakInit(v10, 0);
  swift_unknownObjectWeakAssign(v10, a1);
  sub_100010450((uint64_t)v10, (uint64_t)v11);
  v4 = (char **)(a2 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_spectralOutputObservers);
  swift_beginAccess(v4, v10, 33, 0);
  v5 = *v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *v4 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = sub_1000492A8(0, *((_QWORD *)v5 + 2) + 1, 1, (unint64_t)v5);
    *v4 = v5;
  }
  v8 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  if (v8 >= v7 >> 1)
  {
    v5 = sub_1000492A8((char *)(v7 > 1), v8 + 1, 1, (unint64_t)v5);
    *v4 = v5;
  }
  *((_QWORD *)v5 + 2) = v8 + 1;
  sub_100010450((uint64_t)v11, (uint64_t)&v5[8 * v8 + 32]);
  return swift_endAccess(v10);
}

void sub_1000102FC(void *a1, id a2)
{
  _BOOL4 v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[5];
  uint64_t v12;

  v3 = objc_msgSend(a2, "_backlightLuminance") != (id)1;
  v4 = objc_msgSend(a1, "traitCollection");
  v5 = objc_msgSend(v4, "_backlightLuminance");

  if (((v3 ^ (v5 == (id)1)) & 1) == 0)
  {
    v6 = (void *)objc_opt_self(UIView);
    v7 = swift_allocObject(&unk_100108D38, 24, 7);
    *(_QWORD *)(v7 + 16) = a1;
    v11[4] = sub_100010448;
    v12 = v7;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_1000A5684;
    v11[3] = &unk_100108D50;
    v8 = _Block_copy(v11);
    v9 = v12;
    v10 = a1;
    swift_release(v9);
    objc_msgSend(v6, "animateWithDuration:animations:", v8, 0.15);
    _Block_release(v8);
  }
}

uint64_t sub_100010424()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100010448()
{
  uint64_t v0;

  sub_10000E554(*(char **)(v0 + 16));
}

uint64_t sub_100010450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100116DB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010498(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1000104D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116DF0;
  if (!qword_100116DF0)
  {
    v1 = sub_100010498(255, (unint64_t *)&qword_100116DE0, NSRunLoop_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_100116DF0);
  }
  return result;
}

void sub_100010528(uint64_t a1)
{
  uint64_t v1;

  sub_10000E43C(a1, v1);
}

double sub_100010530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000FA88(128.0);
  v5 = objc_retain(*(id *)(*(_QWORD *)(v0
                                     + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_matchingFlowView)
                         + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView));
  sub_100078EEC();

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_presentationStyle) == 1)
  {
    v7 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    v8 = swift_allocObject(&unk_100108C98, 24, 7);
    swift_unknownObjectWeakInit(v8 + 16, v1);
    type metadata accessor for MainActor(0);
    v9 = swift_retain(v8);
    v10 = static MainActor.shared.getter(v9);
    v11 = (_QWORD *)swift_allocObject(&unk_100108D88, 40, 7);
    v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v8;
    swift_release(v8);
    v12 = sub_1000A5724((uint64_t)v4, (uint64_t)&unk_100116E10, (uint64_t)v11);
    *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  }
  return result;
}

uint64_t sub_10001068C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000106B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100116E0C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000101B8;
  return sub_10000FD3C(a1, v4, v5, v6);
}

void sub_100010724()
{
  uint64_t v0;

  sub_10000FFC8(v0);
}

uint64_t sub_10001072C()
{
  uint64_t v0;

  return sub_10000F4CC(v0, 0xEu, (uint64_t)&unk_100108E40, (uint64_t)&unk_100116E48, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1000AA080);
}

uint64_t sub_100010760()
{
  uint64_t v0;

  return sub_10000F4CC(v0, 0xDu, (uint64_t)&unk_100108E18, (uint64_t)&unk_100116E38, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1000A9F18);
}

void sub_100010794(uint64_t a1)
{
  uint64_t v1;

  sub_10000F6C0(a1, v1);
}

uint64_t sub_10001079C(void *a1)
{
  uint64_t v1;

  return sub_10000F720(a1, v1);
}

uint64_t sub_1000107A4(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int v13;
  void (*v14)(char *, uint64_t);
  _BYTE v16[24];

  v2 = type metadata accessor for IntentSystemContext.Source(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100004F7C(&qword_100116E28);
  __chkstk_darwin(v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_100115EE0 != -1)
    swift_once(&qword_100115EE0, sub_100045C0C);
  v9 = qword_100124510 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
  swift_beginAccess(qword_100124510 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin, v16, 0, 0);
  sub_100010AE8(v9, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    return sub_10000526C((uint64_t)v8, &qword_100116E28);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v11 == enum case for IntentSystemContext.Source.app(_:)
    || v11 == enum case for IntentSystemContext.Source.CLI(_:))
  {
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  if (v11 == enum case for IntentSystemContext.Source.siri(_:))
  {
LABEL_12:
    v13 = 768;
LABEL_15:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return sub_1000A6994(v13 | a1 | 0x20000u, 0xD000000000000028, 0x80000001000D90E0);
  }
  if (v11 == enum case for IntentSystemContext.Source.shortcuts(_:))
  {
    v13 = 1280;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.testing(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (v11 == enum case for IntentSystemContext.Source.actionButton(_:))
  {
    v13 = 256;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.spotlight(_:))
  {
    v13 = 1024;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.controlCenter(_:))
  {
    v13 = 0;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.widget(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (v11 == enum case for IntentSystemContext.Source.assistant(_:))
    goto LABEL_12;
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v14)(v8, v2);
}

uint64_t sub_100010A50()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100010A7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100116E1C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100010C20;
  return sub_10000F83C(a1, v4, v5, v6);
}

uint64_t sub_100010AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100116E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010B30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100010B54()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100116E34);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100010C20;
  return sub_10000F5E4();
}

uint64_t sub_100010BB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_100116E44);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100010C20;
  return sub_10000F218(a1);
}

uint64_t destroy for LocationBottomModuleView(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = swift_bridgeObjectRelease(a1[5]);
  if (a1[6])
    return swift_release(a1[7]);
  return result;
}

_QWORD *initializeWithCopy for LocationBottomModuleView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v8 = a2 + 6;
  v7 = a2[6];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain(v9);
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  return a1;
}

_QWORD *assignWithCopy for LocationBottomModuleView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (!a1[6])
  {
    if (v10)
    {
      v13 = a2[7];
      a1[6] = v10;
      a1[7] = v13;
      swift_retain(v13);
      return a1;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v10)
  {
    swift_release(a1[7]);
    goto LABEL_7;
  }
  v11 = a2[7];
  v12 = a1[7];
  a1[6] = v10;
  a1[7] = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

__n128 initializeWithTake for LocationBottomModuleView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for LocationBottomModuleView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (!a1[6])
  {
    if (v10)
    {
      v13 = a2[7];
      a1[6] = v10;
      a1[7] = v13;
      return a1;
    }
LABEL_7:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v10)
  {
    swift_release(a1[7]);
    goto LABEL_7;
  }
  v11 = a2[7];
  v12 = a1[7];
  a1[6] = v10;
  a1[7] = v11;
  swift_release(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationBottomModuleView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationBottomModuleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationBottomModuleView()
{
  return &type metadata for LocationBottomModuleView;
}

uint64_t sub_100010F64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD484, 1);
}

uint64_t sub_100010F74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  v2 = sub_100004F7C(&qword_100116EC8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v22 - v6;
  v8 = sub_100004F7C(&qword_100116ED0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  v14 = sub_100004F7C(&qword_100116ED8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v22 - v18;
  sub_1000111A8((uint64_t)&v22 - v18);
  sub_100011500((uint64_t)v13);
  sub_1000117A4((uint64_t)v7);
  sub_100007C8C((uint64_t)v19, (uint64_t)v17, &qword_100116ED8);
  sub_100007C8C((uint64_t)v13, (uint64_t)v11, &qword_100116ED0);
  sub_100007C8C((uint64_t)v7, (uint64_t)v5, &qword_100116EC8);
  sub_100007C8C((uint64_t)v17, a1, &qword_100116ED8);
  v20 = sub_100004F7C(&qword_100116EE0);
  sub_100007C8C((uint64_t)v11, a1 + *(int *)(v20 + 48), &qword_100116ED0);
  sub_100007C8C((uint64_t)v5, a1 + *(int *)(v20 + 64), &qword_100116EC8);
  sub_10000526C((uint64_t)v7, &qword_100116EC8);
  sub_10000526C((uint64_t)v13, &qword_100116ED0);
  sub_10000526C((uint64_t)v19, &qword_100116ED8);
  sub_10000526C((uint64_t)v5, &qword_100116EC8);
  sub_10000526C((uint64_t)v11, &qword_100116ED0);
  return sub_10000526C((uint64_t)v17, &qword_100116ED8);
}

uint64_t sub_1000111A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;

  v45 = a1;
  v44 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v44);
  v47 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004F7C(&qword_100116FA8);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100116FB0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  __chkstk_darwin(v6);
  v41 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 24);
  v48 = *(_QWORD *)(v1 + 16);
  v49 = v8;
  v9 = sub_10000B110();
  swift_bridgeObjectRetain(v8);
  v10 = Text.init<A>(_:)(&v48, &type metadata for String, v9);
  v12 = v11;
  v14 = v13;
  v46 = v13;
  v16 = v15 & 1;
  KeyPath = swift_getKeyPath(&unk_1000D1E50, v11);
  LODWORD(v9) = static HierarchicalShapeStyle.secondary.getter(KeyPath);
  v18 = static Font.caption.getter();
  v20 = swift_getKeyPath(&unk_1000D1EB0, v19);
  v48 = v10;
  v49 = v12;
  LOBYTE(v50) = v16;
  v51 = v14;
  v52 = KeyPath;
  v53 = 1;
  v54 = 0;
  v55 = v9;
  v56 = v20;
  v57 = v18;
  v21 = static Font.Weight.semibold.getter();
  v22 = sub_100004F7C(&qword_100116FB8);
  v37 = sub_1000121E0();
  v38 = v5;
  v23 = (uint64_t)v47;
  View.fontWeight(_:)(*(_QWORD *)&v21, 0, v22);
  sub_10000B64C(v10, v12, v16);
  swift_release(v18);
  swift_release(v20);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v46);
  v24 = enum case for DynamicTypeSize.xxxLarge(_:);
  v25 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  v26 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v23, v23, v25, v26);
  if ((result & 1) != 0)
  {
    v48 = v22;
    v49 = v37;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v48, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    v29 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v31 = v40;
    v30 = v41;
    v32 = v44;
    v33 = v38;
    View.dynamicTypeSize<A>(_:)(v23, v40, v44, OpaqueTypeConformance2, v29);
    sub_10000526C(v23, &qword_100116EE8);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v31);
    v48 = v31;
    v49 = v32;
    v50 = OpaqueTypeConformance2;
    v51 = v29;
    v34 = swift_getOpaqueTypeConformance2(&v48, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v35 = v43;
    View.accessibilityIdentifier(_:)(0xD000000000000024, 0x80000001000D96B0, v43, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v30, v35);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100011500@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v36 = a1;
  v2 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004F7C(&qword_100116F90);
  v35 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v37 = v8;
  v38 = v9;
  v10 = sub_10000B110();
  swift_bridgeObjectRetain(v9);
  v11 = Text.init<A>(_:)(&v37, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  KeyPath = swift_getKeyPath(&unk_1000D1E50, v12);
  v19 = static Font.subheadline.getter();
  v21 = swift_getKeyPath(&unk_1000D1EB0, v20);
  v37 = v11;
  v38 = v13;
  LOBYTE(v39) = v15 & 1;
  v40 = v17;
  v41 = KeyPath;
  v42 = 1;
  v43 = 0;
  v44 = v21;
  v45 = v19;
  v22 = enum case for DynamicTypeSize.xxxLarge(_:);
  v23 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v4, v22, v23);
  v24 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v4, v4, v23, v24);
  if ((result & 1) != 0)
  {
    v26 = sub_100004F7C(&qword_100116F98);
    v27 = sub_10001215C();
    v28 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v4, v26, v2, v27, v28);
    sub_10000526C((uint64_t)v4, &qword_100116EE8);
    v29 = v40;
    v30 = v41;
    v31 = v44;
    v32 = v45;
    sub_10000B64C(v37, v38, v39);
    swift_release(v31);
    swift_release(v30);
    swift_bridgeObjectRelease(v29);
    swift_release(v32);
    v37 = v26;
    v38 = v2;
    v39 = v27;
    v40 = v28;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v37, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    View.accessibilityIdentifier(_:)(0xD00000000000001CLL, 0x80000001000D9690, v5, OpaqueTypeConformance2);
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000117A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE v73[16];
  uint64_t v74;
  unint64_t v75;

  v3 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v3);
  v66 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for DefaultButtonStyle(0);
  v62 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_100116EF0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100004F7C(&qword_100116EF8);
  __chkstk_darwin(v63);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_100116F00);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  __chkstk_darwin(v13);
  v64 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(&qword_100116F08);
  v60 = *(_QWORD *)(v15 - 8);
  v61 = v15;
  __chkstk_darwin(v15);
  v59 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004F7C(&qword_100116F10);
  v67 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  __chkstk_darwin(v17);
  v56 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007C48(v1 + 32, (uint64_t)v73, &qword_1001197A0);
  sub_100007C48((uint64_t)v73, (uint64_t)&v74, &qword_1001197A0);
  v19 = v75;
  if (!v75)
    goto LABEL_7;
  v55 = v3;
  v20 = v74;
  v21 = HIBYTE(v75) & 0xF;
  if ((v75 & 0x2000000000000000) == 0)
    v21 = v74 & 0xFFFFFFFFFFFFLL;
  if (!v21)
  {
LABEL_7:
    v51 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(a1, v51, 1, v68);
  }
  v53 = a1;
  v22 = (_OWORD *)swift_allocObject(&unk_100108F00, 80, 7);
  v54 = &v52;
  v23 = *(_OWORD *)(v1 + 16);
  v22[1] = *(_OWORD *)v1;
  v22[2] = v23;
  v24 = *(_OWORD *)(v1 + 48);
  v22[3] = *(_OWORD *)(v1 + 32);
  v22[4] = v24;
  __chkstk_darwin(v22);
  *(&v52 - 2) = v20;
  *(&v52 - 1) = v19;
  sub_100011EE4((_QWORD *)v1);
  v25 = sub_100004F7C(&qword_100116F18);
  v26 = sub_100011F54();
  v27 = Button.init(action:label:)(sub_100011EB4, v22, sub_100011EDC, &v52 - 4, v25, v26);
  v28 = static Color.blue.getter(v27);
  KeyPath = swift_getKeyPath(&unk_1000D1E20, v29);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v10, v7);
  v31 = v63;
  v32 = (uint64_t *)&v12[*(int *)(v63 + 36)];
  *v32 = KeyPath;
  v32[1] = v28;
  v33 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  DefaultButtonStyle.init()(v33);
  v34 = sub_100012064();
  v35 = sub_100004864(&qword_100116F78, (uint64_t (*)(uint64_t))&type metadata accessor for DefaultButtonStyle, (uint64_t)&protocol conformance descriptor for DefaultButtonStyle);
  v37 = v64;
  v36 = v65;
  View.buttonStyle<A>(_:)(v6, v31, v65, v34, v35);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v6, v36);
  sub_10000526C((uint64_t)v12, &qword_100116EF8);
  v38 = enum case for DynamicTypeSize.xxxLarge(_:);
  v39 = type metadata accessor for DynamicTypeSize(0);
  v40 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v66, v38, v39);
  v41 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v40, v40, v39, v41);
  if ((result & 1) != 0)
  {
    v69 = v31;
    v70 = v36;
    v71 = v34;
    v72 = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v69, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v44 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v46 = v58;
    v45 = v59;
    v47 = v55;
    View.dynamicTypeSize<A>(_:)(v40, v58, v55, OpaqueTypeConformance2, v44);
    sub_10000526C(v40, &qword_100116EE8);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v46);
    v69 = v46;
    v70 = v47;
    v71 = OpaqueTypeConformance2;
    v72 = v44;
    v48 = swift_getOpaqueTypeConformance2(&v69, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v49 = (uint64_t)v56;
    v50 = v61;
    View.accessibilityIdentifier(_:)(0xD000000000000021, 0x80000001000D9660, v61, v48);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v50);
    a1 = v53;
    sub_100007C48(v49, v53, &qword_100116F10);
    v51 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(a1, v51, 1, v68);
  }
  __break(1u);
  return result;
}

uint64_t sub_100011D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v5 = sub_10000B110();
  swift_bridgeObjectRetain(a2);
  v6 = Text.init<A>(_:)(v25, &type metadata for String, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.subheadline.getter();
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  sub_10000B64C(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  KeyPath = swift_getKeyPath(&unk_1000D1E50, v21);
  result = swift_getKeyPath(&unk_1000D1E80, v23);
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v16;
  *(_BYTE *)(a3 + 16) = v18 & 1;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = KeyPath;
  *(_QWORD *)(a3 + 40) = 1;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = result;
  *(_QWORD *)(a3 + 64) = 0x3FE3333333333333;
  return result;
}

uint64_t sub_100011E10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;

  *(_QWORD *)a9 = static HorizontalAlignment.leading.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a9 + 8) = 0x4010000000000000;
  *(_BYTE *)(a9 + 16) = 0;
  v10 = sub_100004F7C(&qword_100116EC0);
  return sub_100010F74(a9 + *(int *)(v10 + 44));
}

uint64_t sub_100011E70()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  if (v0[8])
    swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100011EB4()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 64);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_100011EDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100011D00(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *sub_100011EE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100011F44(v4, v5);
  return a1;
}

uint64_t sub_100011F44(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

unint64_t sub_100011F54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F20;
  if (!qword_100116F20)
  {
    v1 = sub_1000050C8(&qword_100116F18);
    sub_100011FD8();
    sub_10000522C(&qword_100116F48, &qword_100116F50, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F20);
  }
  return result;
}

unint64_t sub_100011FD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F28;
  if (!qword_100116F28)
  {
    v1 = sub_1000050C8(&qword_100116F30);
    sub_10000522C(&qword_100116F38, &qword_100116F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F28);
  }
  return result;
}

unint64_t sub_100012064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F58;
  if (!qword_100116F58)
  {
    v1 = sub_1000050C8(&qword_100116EF8);
    sub_10000522C(&qword_100116F60, &qword_100116EF0, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000522C((unint64_t *)&qword_100116F68, &qword_100116F70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F58);
  }
  return result;
}

void sub_100012108(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100012130(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

unint64_t sub_10001215C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116FA0;
  if (!qword_100116FA0)
  {
    v1 = sub_1000050C8(&qword_100116F98);
    sub_100011FD8();
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116FA0);
  }
  return result;
}

unint64_t sub_1000121E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116FC0;
  if (!qword_100116FC0)
  {
    v1 = sub_1000050C8(&qword_100116FB8);
    sub_100012264();
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116FC0);
  }
  return result;
}

unint64_t sub_100012264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116FC8;
  if (!qword_100116FC8)
  {
    v1 = sub_1000050C8(&qword_100116FD0);
    sub_100011FD8();
    sub_10000522C(&qword_100116548, &qword_100116550, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116FC8);
  }
  return result;
}

uint64_t sub_1000122E8()
{
  return sub_10000522C(&qword_100116FD8, &qword_100116FE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t *assignWithCopy for OpenLinkImageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

ValueMetadata *type metadata accessor for OpenLinkImageView()
{
  return &type metadata for OpenLinkImageView;
}

uint64_t sub_100012380(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD4C8, 1);
}

double sub_100012390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t KeyPath;

  v9 = Image.init(systemName:)(0xD000000000000010, 0x80000001000D96E0);
  KeyPath = swift_getKeyPath(&unk_1000D1F48, v4);
  swift_retain(a2);
  v5 = swift_retain(a1);
  v6 = static Font.Weight.bold.getter(v5);
  v7 = sub_100004F7C(&qword_100116FE8);
  sub_100012484();
  View.fontWeight(_:)(*(_QWORD *)&v6, 0, v7);
  swift_release(a1);
  swift_release(KeyPath);
  swift_release(a2);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

double sub_100012474()
{
  uint64_t *v0;

  return sub_100012390(*v0, v0[1]);
}

unint64_t sub_100012484()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116FF0;
  if (!qword_100116FF0)
  {
    v1 = sub_1000050C8(&qword_100116FE8);
    sub_100012508();
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116FF0);
  }
  return result;
}

unint64_t sub_100012508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116FF8;
  if (!qword_100116FF8)
  {
    v1 = sub_1000050C8(&qword_100117000);
    sub_10000522C(&qword_100117008, (uint64_t *)&unk_100117010, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116FF8);
  }
  return result;
}

uint64_t sub_10001258C()
{
  _QWORD v1[2];

  v1[0] = sub_1000050C8(&qword_100116FE8);
  v1[1] = sub_100012484();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
}

void sub_1000125D8()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v1 = objc_msgSend(v0, "colorWithAlphaComponent:", 0.9);

  qword_100117020 = (uint64_t)v1;
}

id sub_100012754(uint64_t a1, uint64_t a2)
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for MusicRecognitionSceneDelegate()
{
  return objc_opt_self(_TtC16MusicRecognition29MusicRecognitionSceneDelegate);
}

void sub_1000127E0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  void *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;

  v2 = v1;
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v4 = type metadata accessor for Logger(0);
  sub_10000B5E8(v4, (uint64_t)qword_100124478);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = v5;
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Scene will connect %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    v12 = v9;
    v2 = v1;
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v13 = type metadata accessor for ActivityScene(0);
  v14 = swift_dynamicCastClass(v5, v13);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = type metadata accessor for MusicRecognitionPlatterViewController();
    v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v16));
    v18 = v5;
    v19 = objc_msgSend(v17, "init");
    v20 = OBJC_IVAR____TtC16MusicRecognition29MusicRecognitionSceneDelegate_musicRecognitionPlatterViewController;
    v21 = *(void **)(v2
                   + OBJC_IVAR____TtC16MusicRecognition29MusicRecognitionSceneDelegate_musicRecognitionPlatterViewController);
    *(_QWORD *)(v2
              + OBJC_IVAR____TtC16MusicRecognition29MusicRecognitionSceneDelegate_musicRecognitionPlatterViewController) = v19;

    if (objc_msgSend(v15, "SBUI_isHostedBySystemAperture"))
    {
      objc_msgSend(v15, "setSystemApertureElementViewControllerProvider:", *(_QWORD *)(v2 + v20));
    }
    else
    {
      v24 = objc_allocWithZone((Class)type metadata accessor for ActivitySceneMetrics(0));
      v25 = ActivitySceneMetrics.init(size:cornerRadius:)(0.0, 84.0, 0.0);
      dispatch thunk of ActivityScene.resolvedMetrics.setter(v25);
      if (qword_100115DF0 != -1)
        swift_once(&qword_100115DF0, sub_1000125D8);
      v26 = qword_100117020;
      v27 = (id)qword_100117020;
      dispatch thunk of ActivityScene.backgroundTintColor.setter(v26);
      v28 = *(_QWORD *)(v2 + v20);
      if (v28)
        *(_BYTE *)(v28 + OBJC_IVAR____TtC16MusicRecognition37MusicRecognitionPlatterViewController_presentationStyle) = 0;
      v29 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "initWithWindowScene:", v15);
      v30 = OBJC_IVAR____TtC16MusicRecognition29MusicRecognitionSceneDelegate_window;
      v31 = *(void **)(v2 + OBJC_IVAR____TtC16MusicRecognition29MusicRecognitionSceneDelegate_window);
      *(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition29MusicRecognitionSceneDelegate_window) = v29;

      v32 = *(void **)(v2 + v30);
      if (v32)
      {
        objc_msgSend(v32, "setRootViewController:", *(_QWORD *)(v2 + v20));
        v33 = *(void **)(v2 + v30);
        if (v33)
        {
          v34 = v33;
          objc_msgSend(v34, "makeKeyAndVisible");

        }
      }
    }
  }
  else
  {
    v18 = Logger.logObject.getter(0);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v22, "Unable to connect to ActivityScene", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
  }

}

uint64_t *sub_100012B5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)a1 + v11 + 24) = v12;
    (**(void (***)(void))(v12 - 8))();
  }
  return a1;
}

uint64_t sub_100012C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(a1 + *(int *)(a2 + 20)));
}

char *sub_100012CC4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(_OWORD *)&a2[v9 + 24];
  *(_OWORD *)&a1[v9 + 24] = v10;
  (**(void (***)(void))(v10 - 8))();
  return a1;
}

char *sub_100012D98(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  sub_100012EA4(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)]);
  return a1;
}

_QWORD *sub_100012EA4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

char *sub_10001300C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
  return a1;
}

char *sub_1000130D8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  _s16MusicRecognition11AnyPlaylistVwxx_0(&a1[v12]);
  v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
  return a1;
}

uint64_t sub_1000131F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100013204);
}

uint64_t sub_100013204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100013288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100013294);
}

uint64_t sub_100013294(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AnyAlbum(uint64_t a1)
{
  uint64_t result;

  result = qword_100117178;
  if (!qword_100117178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnyAlbum);
  return result;
}

void sub_100013350(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10000880C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1000133C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
}

uint64_t sub_100013410(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
}

uint64_t sub_100013458(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
}

uint64_t sub_1000134A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
}

uint64_t sub_1000134E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
}

uint64_t sub_100013530(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
}

uint64_t sub_100013580(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
}

uint64_t sub_1000135D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 64))(v3, v4);
}

unint64_t sub_10001361C()
{
  unint64_t result;

  result = qword_1001171B0;
  if (!qword_1001171B0)
  {
    result = swift_getWitnessTable(&unk_1000D2020, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171B0);
  }
  return result;
}

uint64_t sub_100013660()
{
  uint64_t v0;

  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10000C484(v0, qword_1001244B0);
  sub_10000B5E8(v0, (uint64_t)qword_1001244B0);
  return TypeDisplayRepresentation.init(stringLiteral:)(0xD00000000000002FLL, 0x80000001000D9970);
}

uint64_t sub_1000136C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v26[1] = a1;
  v1 = sub_100004F7C(&qword_100117230);
  __chkstk_darwin(v1);
  v26[0] = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004F7C(&qword_100117238);
  __chkstk_darwin(v3);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v26 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v26 - v15;
  EntityProperty.wrappedValue.getter(&v27, v14);
  v17 = v27;
  v18 = v28;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000D9940);
  if (v18)
    LocalizedStringResource.init(stringLiteral:)(v17, v18);
  else
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v16, v13, v6);
  v19 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v20 = v19(v13, v6);
  EntityProperty.wrappedValue.getter(&v27, v20);
  v21 = v27;
  v22 = v28;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000D9940);
  if (v22)
    LocalizedStringResource.init(stringLiteral:)(v21, v22);
  else
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v5, v10, v6);
  v19(v10, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v23 = type metadata accessor for DisplayRepresentation.Image(0);
  v24 = v26[0];
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v26[0], 1, 1, v23);
  return DisplayRepresentation.init(title:subtitle:image:)(v16, v5, v24);
}

__n128 sub_100013908@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __n128 result;
  _OWORD v4[5];

  sub_10001416C((uint64_t *)v4);
  v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v4[4];
  result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100013950()
{
  unint64_t result;

  result = qword_1001171B8;
  if (!qword_1001171B8)
  {
    result = swift_getWitnessTable(&unk_1000D2078, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171B8);
  }
  return result;
}

unint64_t sub_100013998()
{
  unint64_t result;

  result = qword_1001171C0;
  if (!qword_1001171C0)
  {
    result = swift_getWitnessTable(&unk_1000D20B0, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171C0);
  }
  return result;
}

unint64_t sub_1000139E0()
{
  unint64_t result;

  result = qword_1001171C8;
  if (!qword_1001171C8)
  {
    result = swift_getWitnessTable(&unk_1000D20E0, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171C8);
  }
  return result;
}

uint64_t sub_100013A24()
{
  return sub_10000522C(&qword_1001171D0, &qword_1001171D8, (uint64_t)&protocol conformance descriptor for _TransientAppEntityQuery<A>);
}

void *sub_100013A50()
{
  return &protocol witness table for String;
}

uint64_t sub_100013A5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000148C4();
  return static TransientAppEntity.defaultQuery.getter(a1, v2);
}

unint64_t sub_100013A98()
{
  unint64_t result;

  result = qword_1001171E0;
  if (!qword_1001171E0)
  {
    result = swift_getWitnessTable(&unk_1000D2118, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171E0);
  }
  return result;
}

unint64_t sub_100013AE0()
{
  unint64_t result;

  result = qword_1001171E8;
  if (!qword_1001171E8)
  {
    result = swift_getWitnessTable(&unk_1000D2140, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171E8);
  }
  return result;
}

unint64_t sub_100013B28()
{
  unint64_t result;

  result = qword_1001171F0;
  if (!qword_1001171F0)
  {
    result = swift_getWitnessTable(&unk_1000D2168, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171F0);
  }
  return result;
}

unint64_t sub_100013B70()
{
  unint64_t result;

  result = qword_1001171F8;
  if (!qword_1001171F8)
  {
    result = swift_getWitnessTable(&unk_1000D21C0, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_1001171F8);
  }
  return result;
}

void *sub_100013BB4()
{
  return &protocol witness table for String;
}

_QWORD *sub_100013BC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = EntityProperty.wrappedValue.getter(&v12, v4);
  v8 = v13;
  if (v13)
  {
    v9 = v12;
  }
  else
  {
    v10 = UUID.init()(result);
    v9 = UUID.uuidString.getter(v10);
    v8 = v11;
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  *a1 = v9;
  a1[1] = v8;
  return result;
}

uint64_t sub_100013C78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100115DF8 != -1)
    swift_once(&qword_100115DF8, sub_100013660);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10000B5E8(v2, (uint64_t)qword_1001244B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100013CE8()
{
  return sub_10000522C(&qword_100117200, &qword_100117208, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_100013D14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001361C();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100013D50()
{
  unint64_t result;

  result = qword_100117210;
  if (!qword_100117210)
  {
    result = swift_getWitnessTable(&unk_1000D21F0, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_100117210);
  }
  return result;
}

uint64_t sub_100013D98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100013B70();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t destroy for ShazamMediaEntity(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_release(a1[8]);
  return swift_release(a1[9]);
}

uint64_t *initializeWithCopy for ShazamMediaEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  v9 = a2[6];
  v10 = a2[7];
  a1[6] = v9;
  a1[7] = v10;
  v11 = a2[8];
  v12 = a2[9];
  a1[8] = v11;
  a1[9] = v12;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t *assignWithCopy for ShazamMediaEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[4];
  v13 = a1[4];
  a1[4] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[5];
  v15 = a1[5];
  a1[5] = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a2[6];
  v17 = a1[6];
  a1[6] = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = a2[7];
  v19 = a1[7];
  a1[7] = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a2[8];
  v21 = a1[8];
  a1[8] = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = a2[9];
  v23 = a1[9];
  a1[9] = v22;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

__n128 initializeWithTake for ShazamMediaEntity(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

_QWORD *assignWithTake for ShazamMediaEntity(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  swift_release(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  swift_release(v6);
  swift_release(a1[6]);
  v7 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  swift_release(v7);
  swift_release(a1[8]);
  v8 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShazamMediaEntity(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShazamMediaEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShazamMediaEntity()
{
  return &type metadata for ShazamMediaEntity;
}

uint64_t sub_10001416C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004F7C(&qword_100117218);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x80000001000D97C0);
  v16 = EntityProperty<>.init(title:)(v4);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D97F0);
  v15 = EntityProperty<>.init(title:)(v4);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000019, 0x80000001000D9810);
  v14 = EntityProperty<>.init(title:)(v4);
  sub_100004F7C(&qword_100117220);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001000D9830);
  v13 = EntityProperty<>.init(title:)(v4);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000D9850);
  v5 = EntityProperty<>.init(title:)(v4);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000023, 0x80000001000D9870);
  v6 = EntityProperty<>.init(title:)(v4);
  sub_100004F7C(&qword_100117228);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000D98A0);
  v7 = EntityProperty<>.init(title:)(v4);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000D98C0);
  v8 = EntityProperty<>.init(title:)(v4);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000022, 0x80000001000D98E0);
  v9 = EntityProperty<>.init(title:)(v4);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000029, 0x80000001000D9910);
  result = EntityProperty<>.init(title:)(v4);
  v11 = v15;
  *a1 = v16;
  a1[1] = v11;
  v12 = v13;
  a1[2] = v14;
  a1[3] = v12;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  a1[9] = result;
  return result;
}

__n128 sub_1000143E4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __n128 result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[5];

  v63 = a2;
  v3 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v62 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v62 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v62 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v62 - v16;
  sub_10001416C((uint64_t *)v66);
  v18 = objc_msgSend(a1, "appleMusicID");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0;
  }
  v64 = v20;
  v65 = v22;
  EntityProperty.wrappedValue.setter(&v64);
  v23 = objc_msgSend(a1, "artist");
  if (v23)
  {
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v64 = v25;
  v65 = v27;
  EntityProperty.wrappedValue.setter(&v64);
  v28 = objc_msgSend(a1, "title");
  if (v28)
  {
    v29 = v28;
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v32 = v31;

  }
  else
  {
    v30 = 0;
    v32 = 0;
  }
  v64 = v30;
  v65 = v32;
  EntityProperty.wrappedValue.setter(&v64);
  v33 = objc_msgSend(a1, "artworkURL");
  if (v33)
  {
    v34 = v33;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v17, 0, 1, v35);
  }
  else
  {
    v36 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v17, 1, 1, v36);
  }
  sub_100008944((uint64_t)v17, (uint64_t)v15);
  EntityProperty.wrappedValue.setter(v15);
  sub_100007B24((uint64_t)v17);
  v37 = objc_msgSend(a1, "webURL");
  if (v37)
  {
    v38 = v37;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v39 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v12, 0, 1, v39);
  }
  else
  {
    v40 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v12, 1, 1, v40);
  }
  sub_100008944((uint64_t)v12, (uint64_t)v15);
  EntityProperty.wrappedValue.setter(v15);
  sub_100007B24((uint64_t)v12);
  v41 = objc_msgSend(a1, "appleMusicURL");
  if (v41)
  {
    v42 = v41;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v43 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v9, 0, 1, v43);
  }
  else
  {
    v44 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v9, 1, 1, v44);
  }
  sub_100008944((uint64_t)v9, (uint64_t)v15);
  EntityProperty.wrappedValue.setter(v15);
  sub_100007B24((uint64_t)v9);
  LOBYTE(v64) = objc_msgSend(a1, "explicitContent");
  EntityProperty.wrappedValue.setter(&v64);
  v45 = objc_msgSend(a1, "videoURL");
  if (v45)
  {
    v46 = v45;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v47 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v6, 0, 1, v47);
  }
  else
  {
    v48 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v6, 1, 1, v48);
  }
  sub_100008944((uint64_t)v6, (uint64_t)v15);
  EntityProperty.wrappedValue.setter(v15);
  sub_100007B24((uint64_t)v6);
  v49 = objc_msgSend(a1, "lyricsSnippet");
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v53 = v52;

  }
  else
  {
    v51 = 0;
    v53 = 0;
  }
  v64 = v51;
  v65 = v53;
  EntityProperty.wrappedValue.setter(&v64);
  v54 = objc_msgSend(a1, "syncedLyricsSnippet");
  if (v54)
  {
    v55 = v54;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v58 = v57;

  }
  else
  {
    v56 = 0;
    v58 = 0;
  }
  v64 = v56;
  v65 = v58;
  EntityProperty.wrappedValue.setter(&v64);
  v59 = v66[3];
  v60 = v63;
  *(_OWORD *)(v63 + 32) = v66[2];
  *(_OWORD *)(v60 + 48) = v59;
  *(_OWORD *)(v60 + 64) = v66[4];
  result = (__n128)v66[1];
  *(_OWORD *)v60 = v66[0];
  *(__n128 *)(v60 + 16) = result;
  return result;
}

unint64_t sub_1000148C4()
{
  unint64_t result;

  result = qword_100117240;
  if (!qword_100117240)
  {
    result = swift_getWitnessTable(&unk_1000D1FF0, &type metadata for ShazamMediaEntity);
    atomic_store(result, (unint64_t *)&qword_100117240);
  }
  return result;
}

uint64_t sub_100014908(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artist(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100014944(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Artist(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100014978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000149BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100014A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100014A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100014A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100014A94);
}

uint64_t sub_100014A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artist(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100014AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100014ADC);
}

uint64_t sub_100014ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artist(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MusicKitArtist(uint64_t a1)
{
  uint64_t result;

  result = qword_1001172B0;
  if (!qword_1001172B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MusicKitArtist);
  return result;
}

uint64_t sub_100014B58(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Artist(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_100014BC0()
{
  qword_100117248 = 0x696D2E636973756DLL;
  unk_100117250 = 0xE900000000000063;
}

uint64_t sub_100014BE8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v0 = sub_100004F7C(&qword_100117318);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004F7C(&qword_100117320);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Artist.genres.getter(v4);
  v7 = sub_100004F7C(&qword_100117328);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    v9 = &qword_100117318;
    v10 = (uint64_t)v2;
  }
  else
  {
    sub_100050C54((uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v2, v7);
    v11 = type metadata accessor for Genre(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11) != 1)
    {
      v13 = Genre.name.getter();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v11);
      return v13;
    }
    v9 = &qword_100117320;
    v10 = (uint64_t)v6;
  }
  sub_10000526C(v10, v9);
  return 0;
}

uint64_t sub_100014D58()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t OpaqueTypeConformance2;
  _QWORD v18[3];

  v0 = sub_100004F7C(&qword_1001172E8);
  __chkstk_darwin(v0);
  v2 = (char *)&v18[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ArtworkImage(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_1001172F8);
  __chkstk_darwin(v7);
  v9 = (char *)&v18[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_1001172F0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  v12 = swift_release(v11);
  ArtworkImage.init(_:)(v2, v12);
  v13 = sub_100004F7C(&qword_100117300);
  v14 = sub_10001524C();
  ArtworkImage.artworkPlaceholder<A>(_:)(sub_100014F50, 0, v13, v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v18[0] = v13;
  v18[1] = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v18, &opaque type descriptor for <<opaque return type of ArtworkImage.artworkPlaceholder<A>(_:)>>, 1);
  return AnyView.init<A>(_:)(v9, v7, OpaqueTypeConformance2);
}

uint64_t sub_100014F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for ArtworkUnavailableView(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100115E00 != -1)
    swift_once(&qword_100115E00, sub_100014BC0);
  v4 = qword_100117248;
  v5 = unk_100117250;
  swift_bridgeObjectRetain(unk_100117250);
  ArtworkUnavailableView.init(placeholderImage:widthRatio:heightRatio:)(v4, v5, 0x3FDCCCCCCCCCCCCDLL, 0, 0x3FDCCCCCCCCCCCCDLL, 0);
  if (qword_1001160D8 != -1)
    swift_once(&qword_1001160D8, sub_1000800BC);
  v6 = qword_1001245C0;
  v7 = *(_QWORD *)algn_1001245C8;
  v8 = sub_100004864((unint64_t *)&qword_100117310, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkUnavailableView, (uint64_t)&protocol conformance descriptor for ArtworkUnavailableView);
  View.accessibilityIdentifier(_:)(v6, v7, v0, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000150A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = sub_100004F7C(&qword_1001172E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_1001172F0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = MusicAttributeProperty.init(_:)(0x6B726F77747261, 0xE700000000000000);
  Artist.subscript.getter();
  v11 = swift_release(v10);
  v12 = type metadata accessor for Artwork(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) == 1)
  {
    sub_10000526C((uint64_t)v8, &qword_1001172E8);
    v14 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
  else
  {
    Artwork.url(width:height:)(a1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v8, v12);
  }
}

unint64_t sub_10001524C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117308;
  if (!qword_100117308)
  {
    v1 = sub_1000050C8(&qword_100117300);
    sub_100004864((unint64_t *)&qword_100117310, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkUnavailableView, (uint64_t)&protocol conformance descriptor for ArtworkUnavailableView);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117308);
  }
  return result;
}

id sub_1000152E8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.470588235, 0.470588235, 0.501960784, 0.36);
  qword_100117330 = (uint64_t)result;
  return result;
}

id sub_10001533C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.615686275, 0.615686275, 0.615686275, 1.0);
  qword_100117338 = (uint64_t)result;
  return result;
}

id sub_100015380(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  objc_class *ObjectType;
  uint64_t v13;
  id v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  objc_super v21;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v13 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLayerView;
  v14 = objc_allocWithZone((Class)UIView);
  v15 = v6;
  *(_QWORD *)&v7[v13] = objc_msgSend(v14, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v16 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLayer;
  *(_QWORD *)&v15[v16] = objc_msgSend(objc_allocWithZone((Class)SHListeningLayer), "initWithIntroAnimation:useCustomCompatibleBackground:", 0, 1);
  v17 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLabel;
  *(_QWORD *)&v15[v17] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v18 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_cancelButton;
  *(_QWORD *)&v15[v18] = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v21.receiver = v15;
  v21.super_class = ObjectType;
  v19 = objc_msgSendSuper2(&v21, "initWithFrame:", a1, a2, a3, a4);
  sub_1000154E8();

  return v19;
}

void sub_1000154E8()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  NSString v11;
  NSString v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  Class isa;
  id v22;
  id v23;
  NSString v24;
  NSString v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  Class v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  Swift::String v62;

  v1 = v0;
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v2 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLayerView];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v3 = objc_msgSend(v2, "layer");
  v60 = *(id *)&v1[OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLayer];
  objc_msgSend(v3, "addSublayer:");

  objc_msgSend(v1, "addSubview:", v2);
  v4 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLabel];
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", v4);
  v5 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 62.0, UIFontWeightSemibold);
  objc_msgSend(v4, "setFont:", v5);

  v6 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  objc_msgSend(v4, "setTextColor:", v6);

  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8._countAndFlagsBits = 0xD00000000000001ELL;
  v62._object = (void *)0xE000000000000000;
  v8._object = (void *)0x80000001000D9A40;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v62._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v62)._object;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v4, "setText:", v11);

  if (qword_100116190 != -1)
    swift_once(&qword_100116190, sub_100080480);
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setAccessibilityIdentifier:", v12);

  v13 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_cancelButton];
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", v13);
  v14 = sub_100004F7C(&qword_100116D90);
  v15 = swift_allocObject(v14, 48, 7);
  *(_OWORD *)(v15 + 16) = xmmword_1000D1CF0;
  if (qword_100115E10 != -1)
    swift_once(&qword_100115E10, sub_10001533C);
  v16 = (void *)qword_100117338;
  *(_QWORD *)(v15 + 32) = qword_100117338;
  v17 = qword_100115E08;
  v18 = v16;
  if (v17 != -1)
    v18 = (id)swift_once(&qword_100115E08, sub_1000152E8);
  v19 = (void *)qword_100117330;
  *(_QWORD *)(v15 + 40) = qword_100117330;
  specialized Array._endMutation()(v18);
  sub_100010498(0, (unint64_t *)&qword_100117388, UIColor_ptr);
  v20 = v19;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  v22 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPaletteColors:", isa);

  v23 = v22;
  v24 = String._bridgeToObjectiveC()();
  v61 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v24, v23);

  v59 = v23;
  objc_msgSend(v13, "setImage:forState:", v61, 0);
  objc_msgSend(v13, "setContentVerticalAlignment:", 3);
  objc_msgSend(v13, "setContentHorizontalAlignment:", 3);
  if (qword_100116198 != -1)
    swift_once(&qword_100116198, sub_1000804B0);
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setAccessibilityIdentifier:", v25);

  v58 = (id)objc_opt_self(NSLayoutConstraint);
  v26 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v26 + 16) = xmmword_1000D22A0;
  v27 = objc_msgSend(v2, "leadingAnchor");
  v28 = objc_msgSend(v1, "leadingAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v26 + 32) = v29;
  v30 = objc_msgSend(v2, "centerYAnchor");
  v31 = objc_msgSend(v1, "centerYAnchor");
  v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

  *(_QWORD *)(v26 + 40) = v32;
  v33 = objc_msgSend(v2, "heightAnchor");
  v34 = objc_msgSend(v1, "heightAnchor");
  v35 = objc_msgSend(v33, "constraintEqualToAnchor:multiplier:", v34, 0.65);

  *(_QWORD *)(v26 + 48) = v35;
  v36 = objc_msgSend(v2, "widthAnchor");
  v37 = objc_msgSend(v1, "heightAnchor");
  v38 = objc_msgSend(v36, "constraintEqualToAnchor:multiplier:", v37, 0.65);

  *(_QWORD *)(v26 + 56) = v38;
  v39 = objc_msgSend(v4, "centerYAnchor");
  v40 = objc_msgSend(v1, "centerYAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

  *(_QWORD *)(v26 + 64) = v41;
  v42 = objc_msgSend(v4, "trailingAnchor");
  v43 = objc_msgSend(v1, "trailingAnchor");
  v44 = objc_msgSend(v42, "constraintEqualToAnchor:constant:", v43, -36.0);

  *(_QWORD *)(v26 + 72) = v44;
  v45 = objc_msgSend(v13, "heightAnchor");
  v46 = objc_msgSend(v45, "constraintEqualToConstant:", 54.0);

  *(_QWORD *)(v26 + 80) = v46;
  v47 = objc_msgSend(v13, "widthAnchor");
  v48 = objc_msgSend(v47, "constraintEqualToConstant:", 54.0);

  *(_QWORD *)(v26 + 88) = v48;
  v49 = objc_msgSend(v13, "topAnchor");
  v50 = objc_msgSend(v1, "topAnchor");
  v51 = objc_msgSend(v49, "constraintEqualToAnchor:constant:", v50, -26.0);

  *(_QWORD *)(v26 + 96) = v51;
  v52 = objc_msgSend(v13, "trailingAnchor");
  v53 = objc_msgSend(v1, "trailingAnchor");
  v54 = objc_msgSend(v52, "constraintEqualToAnchor:", v53);

  *(_QWORD *)(v26 + 104) = v54;
  specialized Array._endMutation()(v55);
  v56 = v26;
  sub_100010498(0, (unint64_t *)&qword_1001177E0, NSLayoutConstraint_ptr);
  v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v56);
  objc_msgSend(v58, "activateConstraints:", v57);

  objc_msgSend(v60, "startActiveListeningAnimation");
}

id sub_100015DE0(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v6 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLayerView;
  v7 = objc_allocWithZone((Class)UIView);
  v8 = v3;
  *(_QWORD *)&v3[v6] = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLayer;
  *(_QWORD *)&v8[v9] = objc_msgSend(objc_allocWithZone((Class)SHListeningLayer), "initWithIntroAnimation:useCustomCompatibleBackground:", 0, 1);
  v10 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_listeningLabel;
  *(_QWORD *)&v8[v10] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11 = OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_cancelButton;
  *(_QWORD *)&v8[v11] = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v16.receiver = v8;
  v16.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v16, "initWithCoder:", a1);
  v13 = v12;
  if (v12)
  {
    v14 = v12;
    sub_1000154E8();

  }
  return v13;
}

uint64_t type metadata accessor for AmbientListeningView()
{
  return objc_opt_self(_TtC16MusicRecognition20AmbientListeningView);
}

uint64_t type metadata accessor for MusicRecognitionAmbientSceneDelegate()
{
  return objc_opt_self(_TtC16MusicRecognition36MusicRecognitionAmbientSceneDelegate);
}

void sub_1000161C0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;

  v2 = v1;
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v4 = type metadata accessor for Logger(0);
  sub_10000B5E8(v4, (uint64_t)qword_100124478);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v30 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Ambient scene will connect %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    v12 = v8;
    v2 = v1;
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v13 = type metadata accessor for ActivityScene(0);
  v14 = swift_dynamicCastClass(v5, v13);
  if (v14)
  {
    v15 = v14;
    v16 = type metadata accessor for MusicRecognitionAmbientViewController();
    v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v16));
    v18 = v5;
    v19 = objc_msgSend(v17, "init");
    v20 = OBJC_IVAR____TtC16MusicRecognition36MusicRecognitionAmbientSceneDelegate_musicRecognitionAmbientViewController;
    v21 = *(void **)(v2
                   + OBJC_IVAR____TtC16MusicRecognition36MusicRecognitionAmbientSceneDelegate_musicRecognitionAmbientViewController);
    *(_QWORD *)(v2
              + OBJC_IVAR____TtC16MusicRecognition36MusicRecognitionAmbientSceneDelegate_musicRecognitionAmbientViewController) = v19;

    v22 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "initWithWindowScene:", v15);
    v23 = OBJC_IVAR____TtC16MusicRecognition36MusicRecognitionAmbientSceneDelegate_window;
    v24 = *(void **)(v2 + OBJC_IVAR____TtC16MusicRecognition36MusicRecognitionAmbientSceneDelegate_window);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition36MusicRecognitionAmbientSceneDelegate_window) = v22;

    v25 = *(void **)(v2 + v23);
    if (v25)
    {
      objc_msgSend(v25, "setRootViewController:", *(_QWORD *)(v2 + v20));
      v26 = *(void **)(v2 + v23);
      if (v26)
      {
        v27 = v26;
        objc_msgSend(v27, "makeKeyAndVisible");

      }
    }
  }
  else
  {
    v18 = Logger.logObject.getter(0);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v28, "Unable to connect to ActivityScene", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
  }

}

uint64_t type metadata accessor for DesignTimeMediaItem()
{
  return objc_opt_self(_TtC16MusicRecognition19DesignTimeMediaItem);
}

uint64_t sub_1000164FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for ShortcutTileColor.blue(_:);
  v3 = type metadata accessor for ShortcutTileColor(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

ValueMetadata *type metadata accessor for MusicRecognitionAppShortcuts()
{
  return &type metadata for MusicRecognitionAppShortcuts;
}

uint64_t sub_100016550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD, uint64_t);
  void (*v31)(_BYTE *, uint64_t);
  Swift::String v32;
  _BYTE *v33;
  Swift::String v34;
  Swift::String v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[4];
  unsigned int v44;
  void (*v45)(_BYTE *, uint64_t);
  void (*v46)(_BYTE *, _QWORD, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _QWORD v56[2];

  v0 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v0);
  v55 = &v43[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v49 = type metadata accessor for AppShortcutPhraseToken(0);
  v2 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v4 = &v43[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100004F7C(&qword_1001173F0);
  v6 = __chkstk_darwin(v5);
  v51 = &v43[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v10 = &v43[-v9];
  __chkstk_darwin(v8);
  v12 = &v43[-v11];
  v13 = type metadata accessor for AppShortcut(0);
  v53 = *(_QWORD *)(v13 - 8);
  v54 = v13;
  __chkstk_darwin(v13);
  v52 = &v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v56[0] = sub_10001D340();
  v56[1] = v15;
  v16 = sub_100004F7C(&qword_1001173F8);
  v17 = *(_QWORD *)(sub_100004F7C(&qword_100117400) - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(unsigned __int8 *)(v17 + 80);
  v20 = (v19 + 32) & ~v19;
  v48 = 2 * v18;
  v21 = swift_allocObject(v16, v20 + 3 * v18, v19 | 7);
  v50 = v21;
  *(_OWORD *)(v21 + 16) = xmmword_1000D2320;
  v47 = v21 + v20;
  v22 = sub_1000169A8();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 1);
  v23._countAndFlagsBits = 0x206E69676542;
  v23._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v23);
  v24 = enum case for AppShortcutPhraseToken.applicationName(_:);
  v25 = v2;
  v46 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104);
  v44 = enum case for AppShortcutPhraseToken.applicationName(_:);
  v26 = v49;
  v46(v4, enum case for AppShortcutPhraseToken.applicationName(_:), v49);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v4, v5);
  v45 = *(void (**)(_BYTE *, uint64_t))(v25 + 8);
  v45(v4, v26);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v27);
  AppShortcutPhrase.init(stringInterpolation:)(v12, &type metadata for RecognizeMusicIntent, v22);
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(6, 1);
  v28._countAndFlagsBits = 0x207472617453;
  v28._object = (void *)0xE600000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = v24;
  v30 = v46;
  v46(v4, v29, v26);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v4, v5);
  v31 = v45;
  v45(v4, v26);
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v32);
  AppShortcutPhrase.init(stringInterpolation:)(v10, &type metadata for RecognizeMusicIntent, v22);
  v33 = v51;
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v34);
  v30(v4, v44, v26);
  AppShortcutPhrase.StringInterpolation.appendInterpolation(_:)(v4, v5);
  v31(v4, v26);
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v35);
  AppShortcutPhrase.init(stringInterpolation:)(v33, &type metadata for RecognizeMusicIntent, v22);
  v36 = v55;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x80000001000D9B20);
  v37 = v52;
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)(v56, v50, v36, 0x6D726F6665766177, 0xE800000000000000, &type metadata for RecognizeMusicIntent, v22);
  v38 = static AppShortcutsBuilder.buildExpression(_:)(v37);
  (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v37, v54);
  v39 = sub_100004F7C(&qword_100117410);
  v40 = swift_allocObject(v39, 40, 7);
  *(_OWORD *)(v40 + 16) = xmmword_1000D1CC0;
  *(_QWORD *)(v40 + 32) = v38;
  v41 = static AppShortcutsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v40);
  return v41;
}

unint64_t sub_1000169A8()
{
  unint64_t result;

  result = qword_100117408;
  if (!qword_100117408)
  {
    result = swift_getWitnessTable(&unk_1000D2878, &type metadata for RecognizeMusicIntent);
    atomic_store(result, (unint64_t *)&qword_100117408);
  }
  return result;
}

uint64_t sub_1000169F0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[13];

  result = type metadata accessor for LocalizedStringResource(319);
  if (v3 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = " ";
    v7[2] = " ";
    v7[3] = " ";
    v7[4] = " ";
    v7[5] = &unk_1000D23D0;
    v7[6] = &unk_1000D23E8;
    v7[7] = &unk_1000D23E8;
    result = type metadata accessor for NavigationPath(319);
    if (v4 <= 0x3F)
    {
      v7[8] = *(_QWORD *)(result - 8) + 64;
      v7[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[10] = &unk_1000D2400;
      result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
      if (v5 <= 0x3F)
      {
        v7[11] = *(_QWORD *)(result - 8) + 64;
        result = type metadata accessor for ObservationRegistrar(319);
        if (v6 <= 0x3F)
        {
          v7[12] = *(_QWORD *)(result - 8) + 64;
          return swift_initClassMetadata2(a1, 0, 13, v7, a1 + 96);
        }
      }
    }
  }
  return result;
}

uint64_t sub_100016AEC(char a1)
{
  id v1;
  unint64_t v2;
  const char *v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  if (a1)
  {
    if (a1 == 1)
    {
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000016;
      v9 = 0xE000000000000000;
      v3 = "SHAZAM_SORT_TYPE_TITLE";
    }
    else
    {
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v2 = 0xD000000000000019;
      v9 = 0xE000000000000000;
      v3 = "SHAZAM_SORT_TYPE_SUBTITLE";
    }
    v4 = (unint64_t)(v3 - 32) | 0x8000000000000000;
  }
  else
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v9 = 0xE000000000000000;
    v4 = 0x80000001000D9CD0;
    v2 = 0xD000000000000015;
  }
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

BOOL sub_100016C28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100016C3C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100016C80()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100016CA8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100016CE8(_QWORD *a1@<X8>)
{
  *a1 = &off_100107B68;
}

void sub_100016CF8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_100016D04()
{
  char *v0;

  return sub_100016AEC(*v0);
}

uint64_t sub_100016D0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

uint64_t sub_100016D34()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A328();
  swift_bridgeObjectRetain(v1);
  return v0;
}

uint64_t sub_100016D68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)v2 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D25A8, &v11);
  v8 = v2;
  v9 = a1;
  v10 = a2;
  sub_100016E4C(KeyPath, (uint64_t)sub_10001C0D4, (uint64_t)&v7, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100016DF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_1000D2440, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_100016E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_1000D2440, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_100016EE0()
{
  uint64_t v0;
  uint64_t KeyPath;
  __int128 v3;

  v3 = *(_OWORD *)(*(_QWORD *)v0 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D24D8, &v3);
  sub_100016DF0(KeyPath);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + qword_100117428);
}

double sub_100016F38(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D24D8, &v8);
  v6 = v1;
  v7 = a1;
  sub_100016E4C(KeyPath, (uint64_t)sub_10001A538, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100016FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  _BYTE v8[24];

  v7 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D24A0, &v7);
  sub_100016DF0(KeyPath);
  swift_release(KeyPath);
  v4 = v1 + qword_100117430;
  swift_beginAccess(v4, v8, 0, 0);
  v5 = type metadata accessor for NavigationPath(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t sub_10001704C(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v9 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D24A0, &v9);
  v7 = v1;
  v8 = a1;
  sub_100016E4C(KeyPath, (uint64_t)sub_100019000, (uint64_t)&v6, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  v4 = type metadata accessor for NavigationPath(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t sub_1000170E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + qword_100117430;
  swift_beginAccess(a1 + qword_100117430, v6, 33, 0);
  v4 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

uint64_t sub_10001715C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t WitnessTable;
  __int128 v5;
  _QWORD *v6;

  v1 = *a1;
  v6 = a1;
  v5 = *(_OWORD *)(v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D24A0, &v5);
  WitnessTable = swift_getWitnessTable(&unk_1000D2440, v1);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v6, KeyPath, WitnessTable);
  return swift_release(KeyPath);
}

uint64_t sub_1000171D8()
{
  uint64_t v0;

  v0 = sub_10001A3AC((uint64_t)&unk_1000D2570, &qword_100117438);
  return swift_retain(v0);
}

double sub_1000171FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D2570, &v8);
  v6 = v1;
  v7 = a1;
  sub_100016E4C(KeyPath, (uint64_t)sub_10001C014, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_10001727C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 8))(*(_QWORD *)(*(_QWORD *)v0 + 80));
  v2 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 >= 0)
      v1 &= 0xFFFFFFFFFFFFFF8uLL;
    v3 = _CocoaArrayWrapper.endIndex.getter(v1);
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_1000172E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 24))(*(_QWORD *)(*(_QWORD *)v0 + 80)) & 1;
}

id sub_100017318()
{
  id result;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  NSString v12;
  Swift::String v13;

  result = objc_msgSend((id)objc_opt_self(CDPAccount), "sharedInstance");
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "primaryAccountAltDSID");

    if (!v2)
      return 0;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v4 = v3;

    v5 = objc_allocWithZone((Class)CDPUIDeviceToDeviceEncryptionFlowContext);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    v7 = objc_msgSend(v5, "initWithAltDSID:", v6);

    objc_msgSend(v7, "setDeviceToDeviceEncryptionUpgradeType:", 0);
    objc_msgSend(v7, "setDeviceToDeviceEncryptionUpgradeUIStyle:", 1);
    v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v13._object = (void *)0xE000000000000000;
    v9._object = (void *)0x80000001000D9C50;
    v9._countAndFlagsBits = 0xD00000000000001ELL;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v13._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v13)._object;

    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v7, "setFeatureName:", v12);

    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1000174B4()
{
  void *v0;
  id v1;

  v0 = (void *)sub_10001A3AC((uint64_t)&unk_1000D2510, qword_100117440);
  v1 = v0;
  return v0;
}

void sub_1000174EC(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;

  v7 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D2510, &v7);
  v5 = v1;
  v6 = a1;
  sub_100016E4C(KeyPath, (uint64_t)sub_10001A5CC, (uint64_t)&v4, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);

}

uint64_t sub_100017568()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 88) + 32))(*(_QWORD *)(*(_QWORD *)v0 + 80)) & 1;
}

uint64_t sub_10001759C(__int16 a1)
{
  uint64_t *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;

  v2 = a1;
  v52 = a1 & 0x100;
  v3 = *v1;
  v4 = type metadata accessor for String.StandardComparator(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v51 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v51 - v12;
  v14 = sub_100004F7C(&qword_100117500);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v21 = (char *)&v51 - v20;
  v22 = v2;
  if (v2)
  {
    v51 = v19;
    v23 = v18;
    if (v22 == 1)
    {
      v24 = v52 == 0;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 88) + 8))(*(_QWORD *)(v3 + 80));
      KeyPath = swift_getKeyPath(&unk_1000D2660, v25);
      static String.StandardComparator.localizedStandard.getter();
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v8, v4);
      SortDescriptor.init(_:comparator:order:)(KeyPath, v11, v24);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v27 = sub_100004F7C(&qword_100117508);
      v28 = sub_10000522C(&qword_100117510, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
      v29 = sub_10000522C(&qword_100117518, &qword_100117500, (uint64_t)&protocol conformance descriptor for SortDescriptor<A>);
      v30 = Sequence.sorted<A>(using:)(v17, v27, v23, v28, v29);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v23);
      swift_bridgeObjectRelease(v53);
      v31 = &selRef_title;
    }
    else
    {
      v38 = v52 == 0;
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 88) + 8))(*(_QWORD *)(v3 + 80));
      v40 = swift_getKeyPath(&unk_1000D2690, v39);
      static String.StandardComparator.localizedStandard.getter();
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v13, v4);
      SortDescriptor.init(_:comparator:order:)(v40, v11, v38);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v41 = sub_100004F7C(&qword_100117508);
      v42 = sub_10000522C(&qword_100117510, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
      v43 = sub_10000522C(&qword_100117518, &qword_100117500, (uint64_t)&protocol conformance descriptor for SortDescriptor<A>);
      v30 = Sequence.sorted<A>(using:)(v21, v41, v23, v42, v43);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v21, v23);
      swift_bridgeObjectRelease(v53);
      v31 = &selRef_subtitle;
    }
    sub_1000194D4(v30, (SEL *)v31);
  }
  else
  {
    v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 88) + 8))(*(_QWORD *)(v3 + 80));
    v33 = v32;
    if (v32 < 0 || (v32 & 0x4000000000000000) != 0)
    {
      v50 = swift_bridgeObjectRetain(v32);
      v34 = (unint64_t)sub_100019A18(v50);
      swift_bridgeObjectRelease(v33);
    }
    else
    {
      v34 = v32 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v32);
    }
    v53 = v34;
    sub_100019998((uint64_t *)&v53, v52);
    swift_bridgeObjectRelease(v33);
    sub_100019018(v53);
  }
  v44 = v35;
  v45 = v36;
  v46 = v37;
  swift_retain(v35);
  swift_retain(v45);
  swift_retain(v46);
  sub_100017EAC(v44, v45, v46);
  v48 = v47;
  swift_release_n(v46, 2);
  swift_release_n(v45, 2);
  swift_release_n(v44, 2);
  return v48;
}

uint64_t sub_1000179C4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a2;
  v3 = type metadata accessor for Date.FormatStyle.Symbol.Year(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  __chkstk_darwin(v3);
  v43 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date.FormatStyle.Symbol.Month(0);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Date.FormatStyle(0);
  v39 = *(_QWORD *)(v44 - 8);
  v8 = __chkstk_darwin(v44);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v38 - v12;
  __chkstk_darwin(v11);
  v42 = (char *)&v38 - v14;
  v15 = sub_100004F7C(&qword_100117528);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v38 - v23;
  v25 = objc_msgSend(*a1, "creationDate");
  if (!v25)
  {
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    goto LABEL_5;
  }
  v26 = v25;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v27 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v27(v17, v22, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  if ((_DWORD)v28 == 1)
  {
LABEL_5:
    static Date.now.getter(v28);
    v29 = sub_10000526C((uint64_t)v17, &qword_100117528);
    goto LABEL_6;
  }
  v29 = ((uint64_t (*)(char *, char *, uint64_t))v27)(v24, v17, v18);
LABEL_6:
  v30 = static FormatStyle<>.dateTime.getter(v29);
  static Date.FormatStyle.Symbol.Month.abbreviated.getter(v30);
  Date.FormatStyle.month(_:)(v7);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v41);
  v31 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
  v32 = v44;
  v33 = v31(v10, v44);
  v34 = v43;
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v33);
  v35 = v42;
  Date.FormatStyle.year(_:)(v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v46);
  v31(v13, v32);
  v36 = sub_100004864(&qword_100117530, (uint64_t (*)(uint64_t))&type metadata accessor for Date.FormatStyle, (uint64_t)&protocol conformance descriptor for Date.FormatStyle);
  Date.formatted<A>(_:)(v35, v32, v36);
  v31(v35, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v24, v18);
}

void sub_100017D14(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

uint64_t sub_100017D74@<X0>(id *a1@<X0>, SEL *a2@<X1>, uint64_t *a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v8 = sub_10000B110();
    StringProtocol.precomposedStringWithCanonicalMapping.getter(&type metadata for String, v8);
    v10 = v9;
    swift_bridgeObjectRelease(v7);
    v11 = StringProtocol.localizedUppercase.getter(&type metadata for String, v8);
    v13 = v12;
    swift_bridgeObjectRelease(v10);
    v14 = sub_10001A608(1, v11, v13);
    v16 = v15;
    v18 = v17;
    v20 = v19;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v14 = Substring.init(_:)(35, 0xE100000000000000);
    v16 = v21;
    v18 = v22;
    v20 = v23;
  }
  v24 = static String._fromSubstring(_:)(v14, v16, v18, v20);
  v26 = v25;
  result = swift_bridgeObjectRelease(v20);
  *a3 = v24;
  a3[1] = v26;
  return result;
}

void sub_100017EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = *(_QWORD *)(a3 + 16);
  if (v20)
  {
    v19 = *(_QWORD *)(a2 + 16);
    swift_retain(a1);
    swift_retain(a2);
    swift_retain(a3);
    v5 = 0;
    v17 = a2;
    v6 = (uint64_t *)(a2 + 40);
    v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v19 == v5)
      {
        __break(1u);
        return;
      }
      v8 = *(v6 - 1);
      v9 = *v6;
      v10 = *(_QWORD *)(a3 + 8 * v5 + 32);
      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0)
          v15 = *(_QWORD *)(a3 + 8 * v5 + 32);
        else
          v15 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*(_QWORD *)(a3 + 8 * v5 + 32), 2);
        swift_bridgeObjectRetain(v9);
        v16 = _CocoaArrayWrapper.endIndex.getter(v15);
        swift_bridgeObjectRelease(v10);
        if (v16)
        {
LABEL_8:
          if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
            v7 = sub_1000493FC(0, v7[2] + 1, 1, v7);
          v13 = v7[2];
          v12 = v7[3];
          if (v13 >= v12 >> 1)
            v7 = sub_1000493FC((_QWORD *)(v12 > 1), v13 + 1, 1, v7);
          v7[2] = v13 + 1;
          v14 = &v7[3 * v13];
          v14[4] = v8;
          v14[5] = v9;
          v14[6] = v10;
          goto LABEL_4;
        }
      }
      else
      {
        v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)(a3 + 8 * v5 + 32));
        swift_bridgeObjectRetain(v9);
        if (v11)
          goto LABEL_8;
      }
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
LABEL_4:
      ++v5;
      v6 += 2;
      if (v20 == v5)
      {
        swift_release(a3);
        swift_release(v17);
        swift_release(a1);
        return;
      }
    }
  }
}

double sub_100018074(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;

  v2 = v1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A3AC((uint64_t)&unk_1000D2510, qword_100117440);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v2 + *(_QWORD *)(*v2 + 184), v4);
    type metadata accessor for MainActor(0);
    v14 = v12;
    v15 = static MainActor.shared.getter(v14);
    v16 = *(unsigned __int8 *)(v5 + 80);
    v17 = (v16 + 56) & ~v16;
    v18 = (char *)swift_allocObject(&unk_100109438, v17 + v6, v16 | 7);
    *((_QWORD *)v18 + 2) = v15;
    *((_QWORD *)v18 + 3) = &protocol witness table for MainActor;
    *((_QWORD *)v18 + 4) = v4;
    *((_QWORD *)v18 + 5) = *(_QWORD *)(v3 + 88);
    *((_QWORD *)v18 + 6) = v14;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v18[v17], v7, v4);
    v19 = sub_1000A5724((uint64_t)v10, (uint64_t)&unk_1001174D0, (uint64_t)v18);
    swift_release(v19);

    return sub_100016F38(0);
  }
  else
  {
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10000B5E8(v21, (uint64_t)qword_100124478);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to perform encryption repair, missing context", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    return sub_100016F38(0);
  }
}

uint64_t sub_1000182E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[18] = a6;
  v7[19] = a7;
  v7[16] = a4;
  v7[17] = a5;
  v8 = type metadata accessor for Logger(0);
  v7[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[21] = v9;
  v7[22] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v7[23] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v7[24] = v11;
  v7[25] = v12;
  return swift_task_switch(sub_100018380, v11, v12);
}

uint64_t sub_100018380()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = objc_msgSend(objc_allocWithZone((Class)CDPUIDeviceToDeviceEncryptionHelper), "initWithContext:", v0[16]);
  v0[26] = v2;
  v0[7] = v0 + 29;
  v0[2] = v0;
  v0[3] = sub_100018440;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_100018804;
  v4[3] = &unk_100109450;
  v4[4] = v3;
  objc_msgSend(v2, "performDeviceToDeviceEncryptionStateRepairWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100018440()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 216) = v2;
  if (v2)
    v3 = sub_1000187B4;
  else
    v3 = sub_10001849C;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
}

uint64_t sub_10001849C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;

  v1 = *(unsigned __int8 *)(v0 + 232);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = sub_10000B5E8(v4, (uint64_t)qword_100124478);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 160);
  if (v9)
  {
    v23 = *(_QWORD *)(v0 + 160);
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    *(_DWORD *)v13 = 136315138;
    v25 = v14;
    if (v1)
      v15 = 0x6564656563637573;
    else
      v15 = 0x64656C696166;
    v22 = v11;
    v16 = v1;
    if (v1)
      v17 = 0xE900000000000064;
    else
      v17 = 0xE600000000000000;
    *(_QWORD *)(v0 + 120) = sub_1000529F4(v15, v17, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Encryption repair %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v23);
    if (!v16)
      goto LABEL_11;
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    if (!v1)
    {
LABEL_11:
      v18 = *(_QWORD *)(v0 + 184);

      swift_release(v18);
      swift_task_dealloc(*(_QWORD *)(v0 + 176));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  v20 = *(int **)(*(_QWORD *)(v0 + 152) + 48);
  v24 = (int *)((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc(v20[1]);
  *(_QWORD *)(v0 + 224) = v21;
  *v21 = v0;
  v21[1] = sub_100018720;
  return ((uint64_t (*)(_QWORD, _QWORD))v24)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
}

uint64_t sub_100018720()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 224));
  return swift_task_switch(sub_10001876C, *(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
}

uint64_t sub_10001876C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);

  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000187B4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = swift_release(*(_QWORD *)(v0 + 184));
  swift_willThrow(v3);

  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018804(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004F7C(&qword_1001174D8);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100018884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for NavigationPath(0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  NavigationPath.init()(v1);
  return sub_10001704C((uint64_t)v3);
}

uint64_t sub_1000188E4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v4 + 16))(v6, v1 + qword_1001244C8);
    v7 = String.init(localized:)(v6);
  }
  else
  {
    v7 = 0;
    v8 = 0xE000000000000000;
  }
  return sub_100016D68(v7, v8);
}

double sub_100018978(void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t WitnessTable;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[5];
  void *v41;

  v5 = *v2;
  v41 = a1;
  v7 = *(_QWORD *)(v5 + 88);
  v39[0] = *(_QWORD *)(v5 + 80);
  v6 = v39[0];
  v39[1] = v7;
  KeyPath = swift_getKeyPath(&unk_1000D24A0, v39);
  sub_100016DF0(KeyPath);
  swift_release(KeyPath);
  v40[0] = v2;
  v38[0] = v6;
  v38[1] = v7;
  v9 = swift_getKeyPath(&unk_1000D24A0, v38);
  WitnessTable = swift_getWitnessTable(&unk_1000D2440, v5);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v40, v9, WitnessTable);
  swift_release(v9);
  swift_beginAccess((char *)v2 + qword_100117430, v40, 33, 0);
  v11 = sub_10001C11C();
  v12 = sub_100004864(&qword_1001174F8, (uint64_t (*)(uint64_t))sub_10001C11C, (uint64_t)&protocol conformance descriptor for NSObject);
  NavigationPath.append<A>(_:)(&v41, v11, v12);
  swift_endAccess(v40);
  sub_10001715C(v2);
  v14 = swift_getKeyPath(&unk_1000D25E0, v13);
  v40[0] = a2;
  v15 = sub_100004864((unint64_t *)&qword_100116618, type metadata accessor for ViewConfiguration, (uint64_t)&unk_1000D6CA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v40, v14, v15);
  swift_release(v14);
  v16 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 40);
  v18 = swift_getKeyPath(&unk_1000D2608, v17);
  v40[0] = a2;
  swift_bridgeObjectRetain(v16);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v40, v18, v15);
  swift_release(v18);
  v19 = *(_BYTE *)(a2 + 56);
  v21 = swift_getKeyPath(&unk_1000D2630, v20);
  v40[0] = a2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v40, v21, v15);
  swift_release(v21);
  v22 = *(_BYTE *)(a2 + 16);
  if (qword_1001162F8 != -1)
    swift_once(&qword_1001162F8, sub_1000AA1F8);
  v23 = 0xB0A0Cu >> (8 * v22);
  v24 = qword_1001247E8;
  v25 = type metadata accessor for MusicSubscriptionStatusController(0);
  v40[3] = v25;
  v40[4] = &off_10010D670;
  v40[0] = v24;
  v26 = type metadata accessor for TrackPageViewModel(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v28 = sub_1000076F4((uint64_t)v40, v25);
  __chkstk_darwin(v28);
  v30 = (uint64_t *)((char *)&v36 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  v32 = *v30;
  swift_retain_n(v24, 2);
  v33 = a1;
  v34 = sub_10000771C(a1, v37, v16, v19, v32, v23, v27);

  _s16MusicRecognition11AnyPlaylistVwxx_0(v40);
  swift_release(v24);
  return sub_1000171FC(v34);
}

uint64_t *sub_100018C98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *v0;
  v2 = (uint64_t)v0 + qword_1001244C8;
  v3 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = *(uint64_t *)((char *)v0 + qword_1001244D0 + 8);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + qword_1001244D0 + 24));
  swift_bridgeObjectRelease(v4);
  v5 = *(uint64_t *)((char *)v0 + qword_1001244D8 + 8);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + qword_1001244D8 + 24));
  swift_bridgeObjectRelease(v5);
  v6 = *(uint64_t *)((char *)v0 + qword_1001244E0 + 8);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + qword_1001244E0 + 24));
  swift_bridgeObjectRelease(v6);
  v7 = *(uint64_t *)((char *)v0 + qword_1001244E8 + 8);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + qword_1001244E8 + 24));
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + qword_100117418 + 8));
  v8 = (uint64_t)v0 + qword_100117430;
  v9 = type metadata accessor for NavigationPath(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(uint64_t *)((char *)v0 + qword_100117438));

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 184));
  v10 = (uint64_t)v0 + *(_QWORD *)(*v0 + 192);
  v11 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return v0;
}

uint64_t sub_100018E08()
{
  uint64_t v0;

  sub_100018C98();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for LibraryListViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LibraryListViewModel);
}

uint64_t sub_100018E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

_WORD *initializeBufferWithCopyOfBuffer for HistorySortSelection(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HistorySortSelection(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HistorySortSelection(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100018F60 + 4 * byte_1000D2385[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100018F94 + 4 * asc_1000D2380[v4]))();
}

uint64_t sub_100018F94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100018F9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100018FA4);
  return result;
}

uint64_t sub_100018FB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100018FB8);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_100018FBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100018FC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HistorySortSelection()
{
  return &type metadata for HistorySortSelection;
}

uint64_t sub_100018FE8()
{
  return 16;
}

__n128 sub_100018FF4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100019000()
{
  uint64_t v0;

  return sub_1000170E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100019018(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  id v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;

  v1 = a1;
  v56 = 0;
  v57 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_71;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v3 = 0;
    v50 = v1 & 0xC000000000000001;
    v47 = v1 & 0xFFFFFFFFFFFFFF8;
    v48 = v1;
    v46 = v1 + 32;
    v4 = _swiftEmptyArrayStorage;
    v49 = v2;
    while (1)
    {
      if (v50)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3);
      }
      else
      {
        if (v3 >= *(_QWORD *)(v47 + 16))
          goto LABEL_70;
        v5 = *(id *)(v46 + 8 * v3);
      }
      v6 = v5;
      if (__OFADD__(v3++, 1))
        break;
      v55 = v5;
      sub_1000179C4(&v55, (uint64_t)&v53);
      if (v52)
      {
        swift_bridgeObjectRelease_n(v48, 2);
        swift_release(v56);
        v44 = v57;

        swift_release(v4);
        swift_release(v44);
        return;
      }
      v9 = v53;
      v8 = v54;
      v11 = v56;
      v10 = v57;
      v1 = v57[2];
      v51 = v6;
      if (v56)
      {
        swift_retain(v57);
        swift_retain(v11);
        v12 = sub_100019EC0(v9, v8, (uint64_t)(v10 + 4), v1, (_QWORD *)(v11 + 16), v11 + 32);
        v1 = v13;
        v15 = v14;
        swift_release(v10);
        swift_release(v11);
        v16 = v8;
        if ((v1 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        if (!v1)
        {
          v15 = 0;
          v16 = v54;
          goto LABEL_27;
        }
        v17 = v57[4];
        v18 = v57[5];
        v16 = v54;
        v19 = v17 == v53 && v18 == v54;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v53, v54, 0) & 1) != 0)
        {
          v12 = 0;
        }
        else
        {
          if (v1 == 1)
            goto LABEL_37;
          v31 = v10[6];
          v32 = v10[7];
          if (v31 == v9 && v32 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v9, v8, 0) & 1) != 0)
          {
            v12 = 1;
          }
          else
          {
            if (v1 == 2)
              goto LABEL_37;
            v33 = v10[8];
            v34 = v10[9];
            if (v33 == v9 && v34 == v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v9, v8, 0) & 1) != 0)
            {
              v12 = 2;
            }
            else
            {
              if (v1 == 3)
                goto LABEL_37;
              v35 = v10[10];
              v36 = v10[11];
              if (v35 == v9 && v36 == v8
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v9, v8, 0) & 1) != 0)
              {
                v12 = 3;
              }
              else
              {
                if (v1 == 4)
                  goto LABEL_37;
                v37 = v10[12];
                v38 = v10[13];
                if ((v37 != v9 || v38 != v8)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v9, v8, 0) & 1) == 0)
                {
                  v39 = v10 + 15;
                  v40 = 5;
                  while (v1 != v40)
                  {
                    v41 = *(v39 - 1);
                    v42 = *v39;
                    if (v41 == v9 && v42 == v8)
                    {
                      v12 = v40;
                      goto LABEL_20;
                    }
                    v12 = v40++;
                    v39 += 2;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v9, v8, 0) & 1) != 0)
                      goto LABEL_20;
                  }
LABEL_37:
                  v15 = 0;
LABEL_27:
                  sub_100019B0C(v9, v16, v15);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
                  v58 = v4;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_1000531D8(0, v4[2] + 1, 1);
                    v4 = v58;
                  }
                  v20 = v51;
                  v25 = v4[2];
                  v24 = v4[3];
                  if (v25 >= v24 >> 1)
                  {
                    sub_1000531D8(v24 > 1, v25 + 1, 1);
                    v4 = v58;
                  }
                  v4[2] = v25 + 1;
                  v26 = &v4[v25];
                  v26[4] = _swiftEmptyArrayStorage;
                  v1 = (uint64_t)(v26 + 4);
                  v21 = v51;
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  v22 = *(_QWORD *)v1;
                  goto LABEL_32;
                }
                v12 = 4;
              }
            }
          }
        }
      }
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = (_QWORD *)sub_10004D750(v4);
      v20 = v51;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_68;
      if (v12 >= v4[2])
        goto LABEL_69;
      v1 = (uint64_t)&v4[v12 + 4];
      v21 = v51;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v22 = *(_QWORD *)v1;
LABEL_32:
      v27 = v22 & 0xFFFFFFFFFFFFFF8;
      v29 = *(_QWORD *)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      if (v29 >= v28 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v21);
      specialized Array._endMutation()(v30);

      swift_bridgeObjectRelease(v16);
      if (v3 == v49)
      {
        swift_bridgeObjectRelease_n(v48, 2);
        return;
      }
    }
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    if (v1 < 0)
      v45 = v1;
    else
      v45 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v45);
  }
  swift_bridgeObjectRelease_n(v1, 2);
}

void sub_1000194D4(unint64_t a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  id v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;

  v3 = v2;
  v4 = a1;
  v57 = 0;
  v58 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_70;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v5)
  {
    v6 = 0;
    v51 = v4 & 0xC000000000000001;
    v48 = v4 & 0xFFFFFFFFFFFFFF8;
    v49 = v4;
    v47 = v4 + 32;
    v7 = _swiftEmptyArrayStorage;
    v50 = v5;
    while (1)
    {
      if (v51)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v48 + 16))
          goto LABEL_69;
        v8 = *(id *)(v47 + 8 * v6);
      }
      v9 = v8;
      if (__OFADD__(v6++, 1))
        break;
      v56 = v8;
      sub_100017D74(&v56, a2, &v54);
      if (v3)
      {
        swift_bridgeObjectRelease_n(v49, 2);
        swift_release(v57);
        v45 = v58;

        swift_release(v7);
        swift_release(v45);
        return;
      }
      v53 = v9;
      v11 = v54;
      v3 = v55;
      v13 = v57;
      v12 = v58;
      v4 = v58[2];
      if (v57)
      {
        swift_retain(v58);
        swift_retain(v13);
        v14 = sub_100019EC0(v11, v3, (uint64_t)(v12 + 4), v4, (_QWORD *)(v13 + 16), v13 + 32);
        v4 = v15;
        v17 = v16;
        swift_release(v12);
        swift_release(v13);
        if ((v4 & 1) != 0)
          goto LABEL_28;
      }
      else
      {
        if (!v4)
          goto LABEL_27;
        v18 = v58[4];
        v19 = v58[5];
        v20 = v18 == v54 && v19 == v55;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v54, v55, 0) & 1) != 0)
        {
          v14 = 0;
        }
        else
        {
          if (v4 == 1)
            goto LABEL_27;
          v32 = v12[6];
          v33 = v12[7];
          if (v32 == v11 && v33 == v3 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v11, v3, 0) & 1) != 0)
          {
            v14 = 1;
          }
          else
          {
            if (v4 == 2)
              goto LABEL_27;
            v34 = v12[8];
            v35 = v12[9];
            if (v34 == v11 && v35 == v3
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, v11, v3, 0) & 1) != 0)
            {
              v14 = 2;
            }
            else
            {
              if (v4 == 3)
                goto LABEL_27;
              v36 = v12[10];
              v37 = v12[11];
              if (v36 == v11 && v37 == v3
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v11, v3, 0) & 1) != 0)
              {
                v14 = 3;
              }
              else
              {
                if (v4 == 4)
                  goto LABEL_27;
                v38 = v12[12];
                v39 = v12[13];
                if ((v38 != v11 || v39 != v3)
                  && (_stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v11, v3, 0) & 1) == 0)
                {
                  v40 = v12 + 15;
                  v41 = 5;
                  while (v4 != v41)
                  {
                    v42 = *(v40 - 1);
                    v43 = *v40;
                    if (v42 == v11 && v43 == v3)
                    {
                      v14 = v41;
                      goto LABEL_20;
                    }
                    v14 = v41++;
                    v40 += 2;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, v11, v3, 0) & 1) != 0)
                      goto LABEL_20;
                  }
LABEL_27:
                  v17 = 0;
LABEL_28:
                  sub_100019B0C(v11, v3, v17);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
                  v59 = v7;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_1000531D8(0, v7[2] + 1, 1);
                    v7 = v59;
                  }
                  v21 = v53;
                  v26 = v7[2];
                  v25 = v7[3];
                  if (v26 >= v25 >> 1)
                  {
                    sub_1000531D8(v25 > 1, v26 + 1, 1);
                    v7 = v59;
                  }
                  v7[2] = v26 + 1;
                  v27 = &v7[v26];
                  v27[4] = _swiftEmptyArrayStorage;
                  v4 = (uint64_t)(v27 + 4);
                  v22 = v53;
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  v23 = *(_QWORD *)v4;
                  goto LABEL_33;
                }
                v14 = 4;
              }
            }
          }
        }
      }
LABEL_20:
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = (_QWORD *)sub_10004D750(v7);
      v21 = v53;
      if ((v14 & 0x8000000000000000) != 0)
        goto LABEL_67;
      if (v14 >= v7[2])
        goto LABEL_68;
      v4 = (uint64_t)&v7[v14 + 4];
      v22 = v53;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v23 = *(_QWORD *)v4;
LABEL_33:
      v28 = v23 & 0xFFFFFFFFFFFFFF8;
      v30 = *(_QWORD *)(v28 + 16);
      v29 = *(_QWORD *)(v28 + 24);
      if (v30 >= v29 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v22);
      specialized Array._endMutation()(v31);

      swift_bridgeObjectRelease(v3);
      v3 = 0;
      if (v6 == v50)
      {
        swift_bridgeObjectRelease_n(v49, 2);
        return;
      }
    }
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    if (v4 < 0)
      v46 = v4;
    else
      v46 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v46);
  }
  swift_bridgeObjectRelease_n(v4, 2);
}

uint64_t sub_100019998(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_10004D73C(v4);
    *a1 = v4;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v9[0] = v4 + 32;
  v9[1] = v6;
  sub_10001B064(v9, (a2 >> 8) & 1);
  return specialized ContiguousArray._endMutation()(v7);
}

_QWORD *sub_100019A18(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100004F7C(&qword_100116D90);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_10001A028((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

void sub_100019B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isUniquelyReferenced_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[24];

  v4 = v3;
  v10 = v3[1];
  v8 = v3 + 1;
  v9 = v10;
  swift_bridgeObjectRetain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  *v8 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1000531F4(0, *(_QWORD *)(v9 + 16) + 1, 1);
    v9 = *v8;
  }
  v13 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  if (v13 >= v12 >> 1)
  {
    sub_1000531F4(v12 > 1, v13 + 1, 1);
    v9 = *v8;
  }
  *(_QWORD *)(v9 + 16) = v13 + 1;
  v14 = v9 + 16 * v13;
  *(_QWORD *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = a2;
  v4[1] = v9;
  v15 = *(_QWORD *)(v9 + 16);
  v16 = *v4;
  if (*v4)
  {
    swift_beginAccess(v16 + 16, v22, 0, 0);
    if (static _HashTable.maximumCapacity(forScale:)(*(_QWORD *)(v16 + 16) & 0x3FLL) >= v15)
    {
      isUniquelyReferenced_native = swift_isUniquelyReferenced_native(*v4);
      v18 = *v4;
      if (!isUniquelyReferenced_native)
      {
        if (!v18)
        {
LABEL_16:
          __break(1u);
          return;
        }
        v18 = _HashTable.copy()(*v4);
        swift_release(*v4);
        *v4 = v18;
      }
      if (v18)
      {
        v20 = *(_QWORD *)(v18 + 16);
        v19 = v18 + 16;
        v21 = *(_QWORD *)(*v8 + 16) + ~(*(uint64_t *)(v19 + 8) >> 6);
        _HashTable.UnsafeHandle.subscript.setter((-1 << v20) ^ ~(((v21 >> 63) & ~(-1 << v20)) + v21), a3, v19, v19 + 16);
        return;
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v15 < 0x10)
  {
    return;
  }
  sub_100019C84();
}

void sub_100019C84()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8[24];

  v1 = *v0;
  v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess(v1 + 16, v8, 0, 0);
    v3 = *(_QWORD *)(v1 + 24) & 0x3FLL;
    v4 = *(_QWORD *)(v2 + 16);
    if (v3)
      goto LABEL_7;
  }
  else
  {
    v3 = 0;
    v4 = *(_QWORD *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  v6 = static _HashTable.scale(forCapacity:)(v4);
  if (v3 <= v6)
    v7 = v6;
  else
    v7 = v3;
  v5 = sub_100019D24(v2, v7, 0, v3);
LABEL_11:
  swift_release(v1);
  *v0 = v5;
}

uint64_t sub_100019D24(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = static _HashTable.scale(forCapacity:)(*(_QWORD *)(a1 + 16));
  v9 = 0;
  if ((a3 & 1) != 0)
    v10 = 0;
  else
    v10 = a2;
  if (v10 <= v8)
    v10 = v8;
  if (v10 <= a4)
    v11 = a4;
  else
    v11 = v10;
  if (v11 >= 5)
  {
    v9 = _HashTable.init(scale:reservedScale:)();
    sub_100019DA8(a1, (_QWORD *)(v9 + 16), v9 + 32);
  }
  return v9;
}

Swift::Int sub_100019DA8(Swift::Int result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v6 = 0;
    v7 = result + 32;
    while (1)
    {
      v8 = (uint64_t *)(v7 + 16 * v6);
      v9 = *v8;
      v10 = v8[1];
      Hasher.init(_seed:)(v20);
      swift_bridgeObjectRetain(v10);
      String.hash(into:)(v20, v9, v10);
      result = Hasher._finalize()();
      v11 = 1 << *a2;
      v12 = __OFSUB__(v11, 1);
      v13 = v11 - 1;
      if (v12)
        break;
      v14 = v13 & result;
      v15 = _HashTable.UnsafeHandle._startIterator(bucket:)(v13 & result, a2, a3);
      v17 = v16;
      v19 = v18;
      swift_bridgeObjectRelease(v10);
      v20[0] = a2;
      v20[1] = a3;
      v20[2] = v14;
      v21 = v15;
      v22 = v17;
      v23 = v19;
      v24 = 0;
      while (v21)
        _HashTable.BucketIterator.advance()();
      result = _HashTable.BucketIterator.currentValue.setter(v6++, 0);
      if (v6 == v3)
        return result;
    }
    __break(1u);
  }
  return result;
}

Swift::Int sub_100019EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  Swift::Int result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;

  Hasher.init(_seed:)(&v33);
  String.hash(into:)(&v33, a1, a2);
  result = Hasher._finalize()();
  v12 = 1 << *a5;
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    v15 = v14 & result;
    v16 = _HashTable.UnsafeHandle._startIterator(bucket:)(v14 & result, a5, a6);
    *(_QWORD *)&v33 = a5;
    *((_QWORD *)&v33 + 1) = a6;
    *(_QWORD *)&v34 = v15;
    *((_QWORD *)&v34 + 1) = v16;
    *(_QWORD *)&v35 = v17;
    *((_QWORD *)&v35 + 1) = v18;
    v36 = 0;
    v19 = _HashTable.BucketIterator.currentValue.getter();
    v20 = v19;
    v29 = v33;
    v30 = v34;
    v31 = v35;
    v32 = v36;
    if ((v21 & 1) == 0)
    {
      v22 = (uint64_t *)(a3 + 16 * v19);
      v23 = *v22;
      v24 = v22[1];
      if (*v22 != a1 || v24 != a2)
      {
        do
        {
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, a1, a2, 0) & 1) != 0)
            break;
          _HashTable.BucketIterator.advance()();
          v37 = v29;
          v38 = v30;
          v39 = v31;
          v40 = v32;
          v25 = _HashTable.BucketIterator.currentValue.getter();
          v20 = v25;
          if ((v26 & 1) != 0)
            break;
          v27 = (uint64_t *)(a3 + 16 * v25);
          v23 = *v27;
          v24 = v27[1];
        }
        while (*v27 != a1 || v24 != a2);
      }
    }
    return v20;
  }
  return result;
}

uint64_t sub_10001A028(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10000522C(&qword_100117520, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100004F7C(&qword_100117508);
          v13 = sub_10001A234(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001C11C();
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_10001A234(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10001A2B4(v6, a2, a3);
  return sub_10001A288;
}

void sub_10001A288(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_10001A2B4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for DeviceToDeviceEncryptionView;
  }
  __break(1u);
  return result;
}

void destroy for DeviceToDeviceEncryptionView(id *a1)
{

}

uint64_t sub_10001A328()
{
  uint64_t v0;
  uint64_t KeyPath;
  __int128 v3;

  v3 = *(_OWORD *)(*(_QWORD *)v0 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D25A8, &v3);
  sub_100016DF0(KeyPath);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + qword_100117418);
}

uint64_t sub_10001A384()
{
  return sub_10001A3AC((uint64_t)&unk_1000D2570, &qword_100117438);
}

uint64_t sub_10001A398()
{
  return sub_10001A3AC((uint64_t)&unk_1000D2510, qword_100117440);
}

uint64_t sub_10001A3AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  __int128 v6;

  v6 = *(_OWORD *)(*(_QWORD *)v2 + 80);
  KeyPath = swift_getKeyPath(a1, &v6);
  sub_100016DF0(KeyPath);
  swift_release(KeyPath);
  return *(_QWORD *)(v2 + *a2);
}

uint64_t sub_10001A404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001A478(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[6];
  v10 = (uint64_t)v1 + ((v6 + 56) & ~v6);
  v11 = (_QWORD *)swift_task_alloc(dword_1001174CC);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_1000101B8;
  return sub_1000182E8(a1, v7, v8, v9, v10, v4, v5);
}

uint64_t sub_10001A520()
{
  return 16;
}

__n128 sub_10001A52C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10001A538()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + qword_100117428) = *(_BYTE *)(v0 + 24);
}

id sub_10001A550@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  v2 = (void *)sub_10001A3AC((uint64_t)&unk_1000D2510, qword_100117440);
  *a1 = v2;
  return v2;
}

void sub_10001A588(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  sub_1000174EC(v1);
}

uint64_t sub_10001A5B4()
{
  return 16;
}

__n128 sub_10001A5C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_10001A5CC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + qword_100117440);
  *(_QWORD *)(v1 + qword_100117440) = v2;
  v4 = v2;

}

uint64_t sub_10001A608(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

BOOL sub_10001A690(void **a1, id *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  void *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  id v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  id v35;
  int v36;

  v36 = a3;
  v5 = sub_100004F7C(&qword_100117528);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v35 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v35 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v35 - v19;
  v21 = *a1;
  v35 = *a2;
  v22 = objc_msgSend(v21, "creationDate");
  if (v22)
  {
    v23 = v22;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v24(v10, v18, v11);
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v25(v10, 0, 1, v11);
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
    if ((_DWORD)v26 != 1)
    {
      v24(v20, v10, v11);
      goto LABEL_6;
    }
  }
  else
  {
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v26 = v25(v10, 1, 1, v11);
  }
  static Date.now.getter(v26);
  sub_10000526C((uint64_t)v10, &qword_100117528);
LABEL_6:
  v27 = objc_msgSend(v35, "creationDate");
  if (v27)
  {
    v28 = v27;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v29 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v29(v8, v18, v11);
    v25(v8, 0, 1, v11);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11);
    if ((_DWORD)v30 != 1)
    {
      v29(v15, v8, v11);
      goto LABEL_11;
    }
  }
  else
  {
    v30 = v25(v8, 1, 1, v11);
  }
  static Date.now.getter(v30);
  sub_10000526C((uint64_t)v8, &qword_100117528);
LABEL_11:
  v31 = Date.compare(_:)(v15);
  v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  v32(v15, v11);
  v32(v20, v11);
  v33 = -1;
  if ((v36 & 1) == 0)
    v33 = 1;
  return v31 == v33;
}

uint64_t sub_10001A95C(void **__src, void **a2, unint64_t a3, id *__dst, char a5)
{
  id *v5;
  void **v7;
  void **v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  void **v16;
  id *v17;
  id v18;
  void *v19;
  id v20;
  BOOL v21;
  BOOL v22;
  void **v23;
  void **v24;
  id *v25;
  void **v26;
  void **v27;
  unint64_t v28;
  id *v29;
  void *v30;
  void *v31;
  id v32;
  BOOL v33;
  BOOL v34;
  void **v35;
  id *v36;
  uint64_t result;
  id *v38;
  void **v39;
  uint64_t v41;
  id v42;
  void *v43;
  id *v44;
  id *v45;
  void **v46;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = (char *)a2 - (char *)__src;
  v10 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v10 = (char *)a2 - (char *)__src;
  v11 = v10 >> 3;
  v12 = a3 - (_QWORD)a2;
  v13 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v13 = a3 - (_QWORD)a2;
  v14 = v13 >> 3;
  v46 = __src;
  v45 = __dst;
  if (v11 >= v13 >> 3)
  {
    if (v12 >= -7)
    {
      if (__dst != a2 || &a2[v14] <= __dst)
        memmove(__dst, a2, 8 * v14);
      v25 = &v5[v14];
      v44 = v25;
      v46 = v7;
      if (v8 < v7 && v12 >= 8)
      {
        v26 = (void **)(a3 - 8);
        v27 = v7;
        v38 = v5;
        v39 = v8;
        while (1)
        {
          v28 = (unint64_t)v25;
          v29 = v25 - 1;
          v43 = *(v25 - 1);
          v30 = *--v27;
          v42 = v30;
          v31 = v43;
          v32 = v30;
          v33 = sub_10001A690(&v43, &v42, a5 & 1);
          if (v41)
            break;
          v34 = v33;
          v41 = 0;
          v35 = v26 + 1;

          if (v34)
          {
            if (v35 != v7 || v26 >= v7)
              *v26 = *v27;
            v46 = v27;
            v36 = v38;
            v25 = (id *)v28;
            if (v27 <= v39)
              goto LABEL_48;
          }
          else
          {
            v44 = v29;
            if ((unint64_t)v35 < v28 || (unint64_t)v26 >= v28 || v35 != (void **)v28)
              *v26 = *v29;
            v27 = v7;
            v25 = v29;
            v36 = v38;
            if (v7 <= v39)
              goto LABEL_48;
          }
          --v26;
          v7 = v27;
          if (v25 <= v36)
            goto LABEL_48;
        }

      }
      goto LABEL_48;
    }
  }
  else if (v9 >= -7)
  {
    if (__dst != __src || &__src[v11] <= __dst)
      memmove(__dst, __src, 8 * v11);
    v15 = &v5[v11];
    v44 = v15;
    if ((unint64_t)v7 < a3 && v9 >= 8)
    {
      while (1)
      {
        v16 = v8;
        v43 = *v7;
        v17 = v5;
        v42 = *v5;
        v18 = v42;
        v19 = v43;
        v20 = v18;
        v21 = sub_10001A690(&v43, &v42, a5 & 1);
        if (v41)
          break;
        v22 = v21;

        if (v22)
        {
          v23 = v7 + 1;
          v24 = v16;
          if (v16 < v7 || v16 >= v23 || v16 != v7)
            *v16 = *v7;
          v5 = v17;
        }
        else
        {
          v24 = v16;
          if (v16 != v17)
            *v16 = *v17;
          v5 = v17 + 1;
          v45 = v17 + 1;
          v23 = v7;
        }
        v41 = 0;
        v8 = v24 + 1;
        v46 = v8;
        if (v5 < v15)
        {
          v7 = v23;
          if ((unint64_t)v23 < a3)
            continue;
        }
        goto LABEL_48;
      }

    }
LABEL_48:
    sub_10004D574((void **)&v46, (const void **)&v45, &v44);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10001ACB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  id v36;
  void *v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  BOOL v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  id v64;

  v54 = a1;
  v9 = sub_100004F7C(&qword_100117528);
  v10 = __chkstk_darwin(v9);
  v59 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v52 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v58 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v62 = (char *)&v52 - v19;
  __chkstk_darwin(v18);
  v56 = (char *)&v52 - v20;
  v53 = a2;
  if (a3 != a2)
  {
    v21 = *a4;
    v22 = -1;
    if ((a5 & 1) == 0)
      v22 = 1;
    v57 = v22;
    v60 = v21;
    v23 = v21 + 8 * a3 - 8;
LABEL_7:
    v24 = *(void **)(v60 + 8 * a3);
    v25 = v54;
    v55 = v23;
    v26 = v56;
    v61 = a3;
    while (1)
    {
      v27 = *(void **)v23;
      v28 = v24;
      v64 = v27;
      v63 = v28;
      v29 = objc_msgSend(v28, "creationDate");
      if (v29)
      {
        v30 = v29;
        v31 = v62;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v32 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v32(v13, v31, v14);
        v33 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v33(v13, 0, 1, v14);
        v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
        if ((_DWORD)v34 != 1)
        {
          v32(v26, v13, v14);
          goto LABEL_13;
        }
      }
      else
      {
        v33 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v34 = v33(v13, 1, 1, v14);
      }
      static Date.now.getter(v34);
      sub_10000526C((uint64_t)v13, &qword_100117528);
LABEL_13:
      v35 = v13;
      v36 = objc_msgSend(v64, "creationDate");
      if (v36)
      {
        v37 = v36;
        v38 = v62;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v39 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v40 = (uint64_t)v59;
        v41 = v38;
        v26 = v56;
        v39(v59, v41, v14);
        v33((char *)v40, 0, 1, v14);
        v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v40, 1, v14);
        if ((_DWORD)v42 != 1)
        {
          v43 = v58;
          v39(v58, (char *)v40, v14);
          v44 = v43;
          goto LABEL_18;
        }
      }
      else
      {
        v40 = (uint64_t)v59;
        v42 = v33(v59, 1, 1, v14);
      }
      v44 = v58;
      static Date.now.getter(v42);
      sub_10000526C(v40, &qword_100117528);
LABEL_18:
      v45 = Date.compare(_:)(v44);
      v46 = v44;
      v47 = v45;
      v48 = *(void (**)(char *, uint64_t))(v15 + 8);
      v48(v46, v14);
      v48(v26, v14);

      v49 = v47 == v57;
      v50 = v61;
      v13 = v35;
      if (!v49)
        goto LABEL_6;
      if (!v60)
      {
        __break(1u);
        return;
      }
      v51 = *(void **)v23;
      v24 = *(void **)(v23 + 8);
      *(_QWORD *)v23 = v24;
      *(_QWORD *)(v23 + 8) = v51;
      v23 -= 8;
      if (v50 == ++v25)
      {
LABEL_6:
        a3 = v50 + 1;
        v23 = v55 + 8;
        if (a3 == v53)
          return;
        goto LABEL_7;
      }
    }
  }
}

void sub_10001B064(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  void *v48;
  char *v49;
  _QWORD *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  id v55;
  void *v56;
  char *v57;
  _QWORD *v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t *v66;
  Swift::Int v67;
  Swift::Int v68;
  uint64_t *v69;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  Swift::Int v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  char *v80;
  _QWORD *v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t (*v83)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  void (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  void *v99;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  Swift::Int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  char v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  Swift::Int v168;
  Swift::Int v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  Swift::Int v174;
  Swift::Int v175;
  uint64_t v176;
  char *v177;
  id *v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  Swift::Int v186;
  char *v187;
  id v188;
  char *v189;
  _QWORD *v190;
  id v191;
  void *v192;
  uint64_t v193;

  v179 = a2;
  v4 = sub_100004F7C(&qword_100117528);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v164 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v164 - v12;
  __chkstk_darwin(v11);
  v173 = (char *)&v164 - v14;
  v15 = type metadata accessor for Date(0);
  v190 = *(_QWORD **)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v183 = (char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v189 = (char *)&v164 - v19;
  v20 = __chkstk_darwin(v18);
  v172 = (char *)&v164 - v21;
  v22 = __chkstk_darwin(v20);
  v187 = (char *)&v164 - v23;
  __chkstk_darwin(v22);
  v177 = (char *)&v164 - v24;
  v25 = a1[1];
  v26 = _minimumMergeRunLength(_:)(v25);
  if (v26 >= v25)
  {
    if (v25 < 0)
      goto LABEL_160;
    if (v25)
      sub_10001ACB8(0, v25, 1, a1, v179 & 1);
    return;
  }
  if (v25 >= 0)
    v27 = v25;
  else
    v27 = v25 + 1;
  if (v25 < -1)
    goto LABEL_168;
  v168 = v26;
  v182 = v7;
  v175 = v25;
  v180 = v2;
  v165 = a1;
  if (v25 < 2)
  {
    v31 = (char *)_swiftEmptyArrayStorage;
    v193 = (uint64_t)_swiftEmptyArrayStorage;
    v178 = (id *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v25 != 1)
    {
      v103 = _swiftEmptyArrayStorage[2];
      goto LABEL_123;
    }
  }
  else
  {
    v28 = v27 >> 1;
    v29 = sub_10001C11C();
    v30 = static Array._allocateBufferUninitialized(minimumCapacity:)(v28, v29);
    *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) = v28;
    v178 = (id *)((v30 & 0xFFFFFFFFFFFFFF8) + 32);
    v193 = v30;
  }
  v32 = 0;
  v33 = *a1;
  v34 = -1;
  if ((v179 & 1) == 0)
    v34 = 1;
  v184 = v34;
  v166 = v33 + 16;
  v181 = v33;
  v167 = v33 - 8;
  v31 = (char *)_swiftEmptyArrayStorage;
  v185 = v10;
  v170 = v13;
  v35 = v175;
  do
  {
    v36 = v32 + 1;
    v174 = v32;
    if (v32 + 1 >= v35)
    {
      v37 = v181;
      goto LABEL_44;
    }
    v37 = v181;
    v38 = *(void **)(v181 + 8 * v36);
    v191 = *(id *)(v181 + 8 * v32);
    v39 = v191;
    v192 = v38;
    v40 = v38;
    v41 = v39;
    v42 = v180;
    LODWORD(v176) = sub_10001A690(&v192, &v191, v179 & 1);
    v180 = v42;
    if (v42)
    {
      swift_bridgeObjectRelease(v31);

      goto LABEL_136;
    }

    v36 = v32 + 2;
    if (v32 + 2 >= v175)
      goto LABEL_35;
    v43 = (id *)(v166 + 8 * v32);
    v171 = v31;
    while (1)
    {
      v186 = v36;
      v44 = *(v43 - 1);
      v45 = *v43;
      v46 = v44;
      v188 = v45;
      v47 = objc_msgSend(v45, "creationDate");
      if (v47)
      {
        v48 = v47;
        v49 = v187;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v50 = v190;
        v51 = (void (*)(char *, char *, uint64_t))v190[4];
        v52 = (uint64_t)v173;
        v51(v173, v49, v15);
        v53 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v50[7];
        v53((char *)v52, 0, 1, v15);
        v54 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v50[6])(v52, 1, v15);
        if ((_DWORD)v54 != 1)
        {
          v51(v177, (char *)v52, v15);
          goto LABEL_24;
        }
      }
      else
      {
        v53 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v190[7];
        v52 = (uint64_t)v173;
        v54 = v53(v173, 1, 1, v15);
      }
      static Date.now.getter(v54);
      sub_10000526C(v52, &qword_100117528);
LABEL_24:
      v55 = objc_msgSend(v46, "creationDate");
      if (v55)
      {
        v56 = v55;
        v57 = v187;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v58 = v190;
        v59 = (void (*)(char *, char *, uint64_t))v190[4];
        v60 = (uint64_t)v170;
        v59(v170, v57, v15);
        v53((char *)v60, 0, 1, v15);
        v61 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58[6])(v60, 1, v15);
        if ((_DWORD)v61 != 1)
        {
          v62 = v172;
          v59(v172, (char *)v60, v15);
          goto LABEL_29;
        }
      }
      else
      {
        v60 = (uint64_t)v170;
        v61 = v53(v170, 1, 1, v15);
      }
      v62 = v172;
      static Date.now.getter(v61);
      sub_10000526C(v60, &qword_100117528);
LABEL_29:
      v31 = v171;
      v63 = v177;
      v64 = Date.compare(_:)(v62);
      v65 = (void (*)(char *, uint64_t))v190[1];
      v65(v62, v15);
      v65(v63, v15);

      if (((v176 ^ (v64 != v184)) & 1) == 0)
        break;
      v36 = v186 + 1;
      ++v43;
      v37 = v181;
      if (v175 == v186 + 1)
      {
        v36 = v175;
        goto LABEL_34;
      }
    }
    v37 = v181;
    v36 = v186;
LABEL_34:
    v32 = v174;
LABEL_35:
    if ((v176 & 1) != 0)
    {
      if (v36 >= v32)
      {
        if (v32 < v36)
        {
          v66 = (uint64_t *)(v167 + 8 * v36);
          v67 = v36;
          v68 = v32;
          v69 = (uint64_t *)(v37 + 8 * v32);
          while (1)
          {
            if (v68 != --v67)
            {
              if (!v37)
                goto LABEL_166;
              v70 = *v69;
              *v69 = *v66;
              *v66 = v70;
            }
            ++v68;
            --v66;
            ++v69;
            if (v68 >= v67)
              goto LABEL_44;
          }
        }
        goto LABEL_44;
      }
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return;
    }
LABEL_44:
    if (v36 >= v175)
      goto LABEL_71;
    if (__OFSUB__(v36, v32))
      goto LABEL_159;
    if (v36 - v32 >= v168)
      goto LABEL_71;
    if (__OFADD__(v32, v168))
      goto LABEL_161;
    v71 = v175;
    if (v32 + v168 < v175)
      v71 = v32 + v168;
    if (v71 < v32)
    {
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }
    if (v36 == v71)
      goto LABEL_71;
    v171 = v31;
    v72 = v167 + 8 * v36;
    v169 = v71;
    while (2)
    {
      v74 = *(void **)(v37 + 8 * v36);
      v176 = v72;
      v186 = v36;
      while (2)
      {
        v75 = *(void **)v72;
        v76 = v74;
        v77 = v75;
        v188 = v76;
        v78 = objc_msgSend(v76, "creationDate");
        if (v78)
        {
          v79 = v78;
          v80 = v187;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v81 = v190;
          v82 = (void (*)(char *, char *, uint64_t))v190[4];
          v82(v10, v80, v15);
          v83 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v81[7];
          v83(v10, 0, 1, v15);
          v84 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81[6])(v10, 1, v15);
          if ((_DWORD)v84 != 1)
          {
            v82(v189, v10, v15);
            goto LABEL_61;
          }
        }
        else
        {
          v83 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v190[7];
          v84 = v83(v10, 1, 1, v15);
        }
        static Date.now.getter(v84);
        sub_10000526C((uint64_t)v10, &qword_100117528);
LABEL_61:
        v85 = objc_msgSend(v77, "creationDate");
        if (v85)
        {
          v86 = v85;
          v87 = v15;
          v88 = v187;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v89 = v190;
          v90 = (void (*)(char *, char *, uint64_t))v190[4];
          v91 = (uint64_t)v182;
          v92 = v88;
          v15 = v87;
          v37 = v181;
          v90(v182, v92, v15);
          v83((char *)v91, 0, 1, v15);
          v93 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v89[6])(v91, 1, v15);
          if ((_DWORD)v93 != 1)
          {
            v94 = v183;
            v90(v183, (char *)v91, v15);
            goto LABEL_66;
          }
        }
        else
        {
          v91 = (uint64_t)v182;
          v93 = v83(v182, 1, 1, v15);
        }
        v94 = v183;
        static Date.now.getter(v93);
        sub_10000526C(v91, &qword_100117528);
LABEL_66:
        v95 = v94;
        v96 = v189;
        v97 = Date.compare(_:)(v94);
        v98 = (void (*)(char *, uint64_t))v190[1];
        v98(v95, v15);
        v98(v96, v15);

        v10 = v185;
        if (v97 == v184)
        {
          v73 = v186;
          if (!v37)
            goto LABEL_164;
          v99 = *(void **)v72;
          v74 = *(void **)(v72 + 8);
          *(_QWORD *)v72 = v74;
          *(_QWORD *)(v72 + 8) = v99;
          v72 -= 8;
          if (v73 == ++v32)
            goto LABEL_54;
          continue;
        }
        break;
      }
      v73 = v186;
LABEL_54:
      v36 = v73 + 1;
      v72 = v176 + 8;
      v32 = v174;
      if (v36 != v169)
        continue;
      break;
    }
    v36 = v169;
    v31 = v171;
LABEL_71:
    if (v36 < v32)
      goto LABEL_155;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
    v186 = v36;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v31 = sub_10004D47C(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
    v102 = *((_QWORD *)v31 + 2);
    v101 = *((_QWORD *)v31 + 3);
    v103 = v102 + 1;
    if (v102 >= v101 >> 1)
      v31 = sub_10004D47C((char *)(v101 > 1), v102 + 1, 1, v31);
    *((_QWORD *)v31 + 2) = v103;
    v104 = v31 + 32;
    v105 = &v31[16 * v102 + 32];
    v106 = v186;
    *(_QWORD *)v105 = v32;
    *((_QWORD *)v105 + 1) = v106;
    if (v102)
    {
      while (2)
      {
        v107 = v103 - 1;
        if (v103 >= 4)
        {
          v112 = &v104[16 * v103];
          v113 = *((_QWORD *)v112 - 8);
          v114 = *((_QWORD *)v112 - 7);
          v118 = __OFSUB__(v114, v113);
          v115 = v114 - v113;
          if (v118)
            goto LABEL_143;
          v117 = *((_QWORD *)v112 - 6);
          v116 = *((_QWORD *)v112 - 5);
          v118 = __OFSUB__(v116, v117);
          v110 = v116 - v117;
          v111 = v118;
          if (v118)
            goto LABEL_144;
          v119 = v103 - 2;
          v120 = &v104[16 * v103 - 32];
          v122 = *(_QWORD *)v120;
          v121 = *((_QWORD *)v120 + 1);
          v118 = __OFSUB__(v121, v122);
          v123 = v121 - v122;
          if (v118)
            goto LABEL_146;
          v118 = __OFADD__(v110, v123);
          v124 = v110 + v123;
          if (v118)
            goto LABEL_149;
          if (v124 >= v115)
          {
            v142 = &v104[16 * v107];
            v144 = *(_QWORD *)v142;
            v143 = *((_QWORD *)v142 + 1);
            v118 = __OFSUB__(v143, v144);
            v145 = v143 - v144;
            if (v118)
              goto LABEL_153;
            v135 = v110 < v145;
          }
          else
          {
LABEL_90:
            if ((v111 & 1) != 0)
              goto LABEL_145;
            v119 = v103 - 2;
            v125 = &v104[16 * v103 - 32];
            v127 = *(_QWORD *)v125;
            v126 = *((_QWORD *)v125 + 1);
            v128 = __OFSUB__(v126, v127);
            v129 = v126 - v127;
            v130 = v128;
            if (v128)
              goto LABEL_148;
            v131 = &v104[16 * v107];
            v133 = *(_QWORD *)v131;
            v132 = *((_QWORD *)v131 + 1);
            v118 = __OFSUB__(v132, v133);
            v134 = v132 - v133;
            if (v118)
              goto LABEL_151;
            if (__OFADD__(v129, v134))
              goto LABEL_152;
            if (v129 + v134 < v110)
              goto LABEL_102;
            v135 = v110 < v134;
          }
          if (v135)
            v107 = v119;
        }
        else
        {
          if (v103 == 3)
          {
            v109 = *((_QWORD *)v31 + 4);
            v108 = *((_QWORD *)v31 + 5);
            v118 = __OFSUB__(v108, v109);
            v110 = v108 - v109;
            v111 = v118;
            goto LABEL_90;
          }
          v136 = *((_QWORD *)v31 + 4);
          v137 = *((_QWORD *)v31 + 5);
          v118 = __OFSUB__(v137, v136);
          v129 = v137 - v136;
          v130 = v118;
LABEL_102:
          if ((v130 & 1) != 0)
            goto LABEL_147;
          v138 = &v104[16 * v107];
          v140 = *(_QWORD *)v138;
          v139 = *((_QWORD *)v138 + 1);
          v118 = __OFSUB__(v139, v140);
          v141 = v139 - v140;
          if (v118)
            goto LABEL_150;
          if (v141 < v129)
            goto LABEL_119;
        }
        v146 = v107 - 1;
        if (v107 - 1 >= v103)
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }
        if (!v181)
          goto LABEL_165;
        v147 = v31;
        v148 = &v104[16 * v146];
        v149 = *(_QWORD *)v148;
        v150 = v104;
        v151 = &v104[16 * v107];
        v152 = *((_QWORD *)v151 + 1);
        v153 = v180;
        sub_10001A95C((void **)(v181 + 8 * *(_QWORD *)v148), (void **)(v181 + 8 * *(_QWORD *)v151), v181 + 8 * v152, v178, v179 & 1);
        v180 = v153;
        if (v153)
        {
          v155 = v147;
          goto LABEL_135;
        }
        if (v152 < v149)
          goto LABEL_140;
        if (v107 > *((_QWORD *)v147 + 2))
          goto LABEL_141;
        *(_QWORD *)v148 = v149;
        *(_QWORD *)&v150[16 * v146 + 8] = v152;
        v154 = *((_QWORD *)v147 + 2);
        if (v107 >= v154)
          goto LABEL_142;
        v31 = v147;
        v103 = v154 - 1;
        memmove(v151, v151 + 16, 16 * (v154 - 1 - v107));
        v104 = v150;
        *((_QWORD *)v147 + 2) = v154 - 1;
        v10 = v185;
        if (v154 <= 2)
          goto LABEL_119;
        continue;
      }
    }
    v103 = 1;
LABEL_119:
    v35 = v175;
    v32 = v186;
  }
  while (v186 < v175);
LABEL_123:
  if (v103 >= 2)
  {
    v156 = *v165;
    do
    {
      v157 = v103 - 2;
      if (v103 < 2)
        goto LABEL_154;
      if (!v156)
        goto LABEL_167;
      v158 = *(_QWORD *)&v31[16 * v157 + 32];
      v159 = *(_QWORD *)&v31[16 * v103 + 24];
      v160 = v180;
      sub_10001A95C((void **)(v156 + 8 * v158), (void **)(v156 + 8 * *(_QWORD *)&v31[16 * v103 + 16]), v156 + 8 * v159, v178, v179 & 1);
      v180 = v160;
      if (v160)
        break;
      if (v159 < v158)
        goto LABEL_156;
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
        v31 = sub_10004D728((uint64_t)v31);
      if (v157 >= *((_QWORD *)v31 + 2))
        goto LABEL_157;
      v161 = &v31[16 * v157 + 32];
      *(_QWORD *)v161 = v158;
      *((_QWORD *)v161 + 1) = v159;
      v162 = *((_QWORD *)v31 + 2);
      if (v103 > v162)
        goto LABEL_158;
      memmove(&v31[16 * v103 + 16], &v31[16 * v103 + 32], 16 * (v162 - v103));
      *((_QWORD *)v31 + 2) = v162 - 1;
      v103 = v162 - 1;
    }
    while (v162 > 2);
  }
  v155 = v31;
LABEL_135:
  v163 = swift_bridgeObjectRelease(v155);
LABEL_136:
  *(_QWORD *)((v193 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
  specialized Array._endMutation()(v163);
  swift_bridgeObjectRelease(v193);
}

uint64_t sub_10001BD40(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  _QWORD v21[3];

  v4 = type metadata accessor for MusicSubscription(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_1001174E0);
  __chkstk_darwin(v8);
  v11 = (char *)&v21[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001162F8 != -1)
    swift_once(&qword_1001162F8, sub_1000AA1F8);
  v12 = qword_1001247E8;
  KeyPath = swift_getKeyPath(&unk_1000D2548, v9);
  v21[0] = v12;
  v14 = sub_100004864((unint64_t *)&qword_1001174E8, type metadata accessor for MusicSubscriptionStatusController, (uint64_t)&unk_1000D7214);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v21, KeyPath, v14);
  swift_release(KeyPath);
  v15 = v12 + OBJC_IVAR____TtC16MusicRecognition33MusicSubscriptionStatusController__musicSubscription;
  swift_beginAccess(v12 + OBJC_IVAR____TtC16MusicRecognition33MusicSubscriptionStatusController__musicSubscription, v21, 0, 0);
  sub_10001BF54(v15, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4))
  {
    sub_10000526C((uint64_t)v11, &qword_1001174E0);
    v16 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, v4);
    v17 = sub_10000526C((uint64_t)v11, &qword_1001174E0);
    v18 = MusicSubscription.canBecomeSubscriber.getter(v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v18 & 1) != 0)
      v16 = 0;
    else
      v16 = 0x10000;
  }
  return sub_1000A6994(v16 | a1 | (a2 << 8), 0xD000000000000028, 0x80000001000D90E0);
}

uint64_t sub_10001BF54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_1001174E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001BF9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = sub_10001A3AC((uint64_t)&unk_1000D2570, &qword_100117438);
  *a1 = v2;
  return swift_retain(v2);
}

double sub_10001BFD4(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return sub_1000171FC(v1);
}

uint64_t sub_10001BFFC()
{
  return 16;
}

__n128 sub_10001C008(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001C014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + qword_100117438);
  *(_QWORD *)(v2 + qword_100117438) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_10001C054@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_10001A328();
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001C080(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain(v2);
  return sub_100016D68(v1, v2);
}

uint64_t sub_10001C0BC()
{
  return 16;
}

__n128 sub_10001C0C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10001C0D4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[4];
  v2 = (_QWORD *)(v0[2] + qword_100117418);
  v3 = v2[1];
  *v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

unint64_t sub_10001C11C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001174F0;
  if (!qword_1001174F0)
  {
    v1 = objc_opt_self(SHMediaItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001174F0);
  }
  return result;
}

const char *sub_10001C170()
{
  return "title";
}

void sub_10001C17C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100017D14(a1, (SEL *)&selRef_title, a2);
}

const char *sub_10001C198()
{
  return "subtitle";
}

void sub_10001C1A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_100017D14(a1, (SEL *)&selRef_subtitle, a2);
}

_BYTE *initializeBufferWithCopyOfBuffer for ViewConfiguration.ViewName(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ViewConfiguration.ViewName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HistorySortSelection.SortType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10001C2AC + 4 * byte_1000D238F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001C2E0 + 4 * byte_1000D238A[v4]))();
}

uint64_t sub_10001C2E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001C2E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001C2F0);
  return result;
}

uint64_t sub_10001C2FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001C304);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001C308(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001C310(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001C31C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001C328(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HistorySortSelection.SortType()
{
  return &type metadata for HistorySortSelection.SortType;
}

uint64_t sub_10001C340()
{
  return sub_10000522C(&qword_100117538, &qword_100117540, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_10001C370()
{
  unint64_t result;

  result = qword_100117548;
  if (!qword_100117548)
  {
    result = swift_getWitnessTable(&unk_1000D2780, &type metadata for HistorySortSelection.SortType);
    atomic_store(result, (unint64_t *)&qword_100117548);
  }
  return result;
}

unint64_t sub_10001C3B8()
{
  unint64_t result;

  result = qword_100117550;
  if (!qword_100117550)
  {
    result = swift_getWitnessTable(&unk_1000D2720, &type metadata for HistorySortSelection.SortType);
    atomic_store(result, (unint64_t *)&qword_100117550);
  }
  return result;
}

unint64_t sub_10001C400()
{
  unint64_t result;

  result = qword_100117558;
  if (!qword_100117558)
  {
    result = swift_getWitnessTable(&unk_1000D2850, &type metadata for RecognizeMusicIntent);
    atomic_store(result, (unint64_t *)&qword_100117558);
  }
  return result;
}

uint64_t sub_10001C448(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD73C, 1);
}

uint64_t sub_10001C458()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10000C484(v0, qword_1001244F0);
  sub_10000B5E8(v0, (uint64_t)qword_1001244F0);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000020, 0x80000001000D9B20);
}

uint64_t sub_10001C4B8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = sub_100004F7C(&qword_100117230);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004F7C(&qword_100117238);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100115E18 != -1)
    swift_once(&qword_100115E18, sub_10001C458);
  v10 = sub_10000B5E8(v6, (uint64_t)qword_1001244F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  v11 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 1, 1, v11);
  return DisplayRepresentation.init(title:subtitle:image:)(v9, v5, v2);
}

uint64_t sub_10001C62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3[36] = a2;
  v3[37] = a3;
  v3[35] = a1;
  v4 = type metadata accessor for IntentDonationManager(0);
  v3[38] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[39] = v5;
  v3[40] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for IntentDonationIdentifier(0);
  v3[41] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[42] = v7;
  v3[43] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100116E28);
  v3[44] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[45] = swift_task_alloc(v9);
  v3[46] = swift_task_alloc(v9);
  v10 = type metadata accessor for IntentSystemContext(0);
  v3[47] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[48] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[49] = swift_task_alloc(v12);
  v3[50] = swift_task_alloc(v12);
  return swift_task_switch(sub_10001C728, 0, 0);
}

uint64_t sub_10001C728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 408) = sub_10000B5E8(v3, (uint64_t)qword_100124478);
  swift_retain_n(v1, 2);
  v4 = swift_retain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 400);
    v27 = *(_QWORD *)(v0 + 384);
    v8 = *(_QWORD *)(v0 + 368);
    v28 = *(_QWORD *)(v0 + 376);
    v29 = *(_QWORD *)(v0 + 352);
    v10 = *(_QWORD *)(v0 + 288);
    v9 = *(_QWORD *)(v0 + 296);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v32 = v30;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v0 + 248) = v10;
    *(_QWORD *)(v0 + 256) = v9;
    v12 = sub_1000169A8();
    v13 = AppIntent.systemContext.getter(&type metadata for RecognizeMusicIntent, v12);
    IntentSystemContext.source.getter(v13);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v7, v28);
    v14 = Optional.debugDescription.getter(v29);
    v16 = v15;
    sub_10001DBB4(v8);
    *(_QWORD *)(v0 + 272) = sub_1000529F4(v14, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v11 + 4, v11 + 12);
    swift_release_n(v9, 2);
    swift_release_n(v10, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Performing Music Recognition request triggered by %s", v11, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v18 = *(_QWORD *)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 296);

    swift_release_n(v17, 2);
    swift_release_n(v18, 2);
  }
  if (qword_100115EE0 != -1)
    swift_once(&qword_100115EE0, sub_100045C0C);
  v20 = *(_QWORD *)(v0 + 384);
  v19 = *(_QWORD *)(v0 + 392);
  v21 = *(_QWORD *)(v0 + 376);
  v22 = qword_100124510;
  v31 = *(_OWORD *)(v0 + 288);
  IntentParameter.wrappedValue.getter();
  *(_BYTE *)(v22 + 24) = *(_BYTE *)(v0 + 456);
  *(_QWORD *)(v0 + 200) = type metadata accessor for MusicRecognizer(0);
  *(_QWORD *)(v0 + 208) = &off_10010A490;
  *(_QWORD *)(v0 + 176) = v22;
  *(_OWORD *)(v0 + 216) = v31;
  v23 = sub_1000169A8();
  *(_QWORD *)(v0 + 416) = v23;
  swift_retain(v22);
  v24 = AppIntent.systemContext.getter(&type metadata for RecognizeMusicIntent, v23);
  IntentSystemContext.source.getter(v24);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  *(_QWORD *)&v31 = (char *)&dword_1001175B8 + dword_1001175B8;
  v25 = (_QWORD *)swift_task_alloc(unk_1001175BC);
  *(_QWORD *)(v0 + 424) = v25;
  *v25 = v0;
  v25[1] = sub_10001CA94;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v31)(v0 + 16, v0 + 176, *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 296));
}

uint64_t sub_10001CA94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  v4 = *(_QWORD *)(*v1 + 360);
  *(_QWORD *)(*v1 + 432) = v0;
  swift_task_dealloc(v3);
  sub_10001DBB4(v4);
  if (v0)
  {
    v5 = sub_10001CCC4;
  }
  else
  {
    _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(v2 + 176));
    v5 = sub_10001CB14;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10001CB14()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v8 = *(_OWORD *)(v0 + 288);
  sub_10001DBF4(v0 + 16, v0 + 96);
  v1 = sub_100004F7C(&qword_1001175C0);
  v2 = sub_10001DC3C();
  static IntentResult.result<A>(value:)(v0 + 96, v1, v2);
  v3 = sub_10001DCA0((uint64_t *)(v0 + 16));
  static IntentDonationManager.shared.getter(v3);
  *(_OWORD *)(v0 + 232) = v8;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to IntentDonationManager.donate<A, B>(intent:result:)[1]);
  *(_QWORD *)(v0 + 440) = v4;
  v5 = sub_100004F7C(&qword_100117580);
  v6 = sub_10000522C(&qword_1001175D0, &qword_100117580, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
  *v4 = v0;
  v4[1] = sub_10001CC28;
  return IntentDonationManager.donate<A, B>(intent:result:)(*(_QWORD *)(v0 + 344), v0 + 232, *(_QWORD *)(v0 + 280), &type metadata for RecognizeMusicIntent, v5, *(_QWORD *)(v0 + 416), v6);
}

uint64_t sub_10001CC28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
  {
    v7 = sub_10001CDC0;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[42] + 8))(v2[43], v2[41]);
    v7 = sub_10001CD48;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10001CCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 320);
  _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(v0 + 176));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 448);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 448);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 264) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "IntentDonationManager unable to donate App Intent %@", v6, 0xCu);
    v9 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 448);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v11 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 344);
  v15 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CF90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v2 = sub_100004F7C(&qword_100117590);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v13 - v7;
  v9 = sub_1000169A8();
  IntentPrediction.init<>(displayRepresentation:)(sub_10001C4B8, 0, a1, v9);
  v10 = sub_10000522C(&qword_100117588, &qword_100117590, (uint64_t)&protocol conformance descriptor for IntentPrediction<A, B>);
  static IntentPredictionsBuilder.buildExpression<A>(_:)(v6, a1, v2, v10);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  static IntentPredictionsBuilder.buildBlock<A>(_:)(v8, a1, v2, v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v8, v2);
}

unint64_t sub_10001D0B4()
{
  unint64_t result;

  result = qword_100117560;
  if (!qword_100117560)
  {
    result = swift_getWitnessTable(&unk_1000D2908, &type metadata for RecognizeMusicIntent);
    atomic_store(result, (unint64_t *)&qword_100117560);
  }
  return result;
}

unint64_t sub_10001D0FC()
{
  unint64_t result;

  result = qword_100117568;
  if (!qword_100117568)
  {
    result = swift_getWitnessTable(&unk_1000D2930, &type metadata for RecognizeMusicIntent);
    atomic_store(result, (unint64_t *)&qword_100117568);
  }
  return result;
}

uint64_t sub_10001D140(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &unk_1000DD708, 1) + 8);
}

uint64_t sub_10001D164(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000169A8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10001D1A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100115E18 != -1)
    swift_once(&qword_100115E18, sub_10001C458);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10000B5E8(v2, (uint64_t)qword_1001244F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10001D228(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1001175B4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000101B8;
  return sub_10001C62C(a1, v5, v4);
}

uint64_t sub_10001D28C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_10001D340();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001D2B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000169A8();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for RecognizeMusicIntent()
{
  return &type metadata for RecognizeMusicIntent;
}

uint64_t sub_10001D2E8()
{
  return sub_10000522C(&qword_100117578, &qword_100117580, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10001D314()
{
  return sub_10000522C(&qword_100117588, &qword_100117590, (uint64_t)&protocol conformance descriptor for IntentPrediction<A, B>);
}

uint64_t sub_10001D340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v23;
  void (*v24)(char *);
  unsigned int v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  char v33;

  v31 = type metadata accessor for InputConnectionBehavior(0);
  v0 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v30 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100004F7C(&qword_100117598);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004F7C(&qword_1001175A0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100117238);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource(0);
  v12 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  __chkstk_darwin(v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004F7C(&qword_1001175A8);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000039, 0x80000001000D9DE0);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001000D9E20);
  v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
  v28(v10, 0, 1, v11);
  v33 = 1;
  v15 = type metadata accessor for Bool.IntentDisplayName(0);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v23 = v7;
  v27(v7, 1, 1, v15);
  v16 = type metadata accessor for IntentDialog(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17 = v4;
  v26(v4, 1, 1, v16);
  v25 = enum case for InputConnectionBehavior.default(_:);
  v24 = *(void (**)(char *))(v0 + 104);
  v18 = v30;
  v19 = v31;
  v24(v30);
  v20 = IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v14, v10, &v33, v7, v4, v18);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000042, 0x80000001000D9E60);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000048, 0x80000001000D9EB0);
  v28(v10, 0, 1, v29);
  v32 = 0;
  v21 = v23;
  v27(v23, 1, 1, v15);
  v26(v17, 1, 1, v16);
  ((void (*)(char *, _QWORD, uint64_t))v24)(v18, v25, v19);
  IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v14, v10, &v32, v21, v17, v18);
  return v20;
}

uint64_t sub_10001D68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  return swift_task_switch(sub_10001D6A8, 0, 0);
}

uint64_t sub_10001D6A8()
{
  uint64_t v0;
  _QWORD *v1;

  sub_10000C9C8(*(_QWORD **)(v0 + 104), *(_QWORD *)(*(_QWORD *)(v0 + 104) + 24));
  v1 = (_QWORD *)swift_task_alloc(dword_100118BDC);
  *(_QWORD *)(v0 + 128) = v1;
  *v1 = v0;
  v1[1] = sub_10001D704;
  return sub_100046CB4(0, *(_QWORD *)(v0 + 112));
}

uint64_t sub_10001D704(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 128);
  *(_QWORD *)(v4 + 136) = a1;
  *(_QWORD *)(v4 + 144) = a2;
  *(_BYTE *)(v4 + 153) = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10001D764, 0, 0);
}

void sub_10001D764()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  uint8_t *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  void *v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char v47;
  void (*v48)(void);
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v1 = *(unsigned __int8 *)(v0 + 153);
  v2 = 0uLL;
  if ((_DWORD)v1 == 255)
  {
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
LABEL_34:
    v54 = *(_OWORD **)(v0 + 96);
    *v54 = v2;
    v54[1] = v15;
    v54[2] = v16;
    v54[3] = v17;
    v54[4] = v18;
    v48 = *(void (**)(void))(v0 + 8);
    goto LABEL_35;
  }
  if ((SHSession.Result.wasCancelled.getter(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v1) & 1) != 0)
  {
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10000B5E8(v3, (uint64_t)qword_100124478);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_BYTE *)(v0 + 153);
    v10 = *(void **)(v0 + 136);
    v9 = *(void **)(v0 + 144);
    if (!v7)
    {
      sub_1000100FC(*(void **)(v0 + 136), *(void **)(v0 + 144), *(_BYTE *)(v0 + 153));

LABEL_33:
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      v2 = 0uLL;
      goto LABEL_34;
    }
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Match attempt was cancelled so returning nil from the App Intent", v11, 2u);
    swift_slowDealloc(v11, -1, -1);

    v12 = v10;
    v13 = v9;
    v14 = v8;
LABEL_32:
    sub_1000100FC(v12, v13, v14);
    goto LABEL_33;
  }
  if (*(_BYTE *)(v0 + 153))
  {
    if (*(_BYTE *)(v0 + 153) == 1)
    {
      IntentParameter.wrappedValue.getter();
      v20 = *(void **)(v0 + 136);
      v19 = *(void **)(v0 + 144);
      if ((*(_BYTE *)(v0 + 152) & 1) == 0)
      {
        v12 = *(void **)(v0 + 136);
        v13 = *(void **)(v0 + 144);
        v14 = 1;
        goto LABEL_32;
      }
      v21 = sub_10001DD90();
      v22 = swift_allocError(&type metadata for RecognizeMusicError, v21, 0, 0);
      *v23 = 0;
      swift_willThrow(v22);
      v24 = v20;
      v25 = v19;
      v26 = 1;
LABEL_25:
      sub_1000100FC(v24, v25, v26);
      v48 = *(void (**)(void))(v0 + 8);
LABEL_35:
      v48();
      return;
    }
    v35 = *(_QWORD *)(v0 + 136);
    swift_errorRetain(v35);
    v36 = (void *)_convertErrorToNSError(_:)(v35);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
    v39 = v38;
    v40 = sub_10005BA60((uint64_t)&off_100107B90);
    v41 = (void *)sub_1000AC948(v37, v39, v40);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v39);
    if (v41)
    {

    }
    else if (objc_msgSend(v36, "code") != (id)202)
    {
      v43 = *(void **)(v0 + 136);
      v42 = *(void **)(v0 + 144);
      v49 = sub_10001DD90();
      v45 = swift_allocError(&type metadata for RecognizeMusicError, v49, 0, 0);
      v47 = 2;
      goto LABEL_24;
    }
    v43 = *(void **)(v0 + 136);
    v42 = *(void **)(v0 + 144);
    v44 = sub_10001DD90();
    v45 = swift_allocError(&type metadata for RecognizeMusicError, v44, 0, 0);
    v47 = 1;
LABEL_24:
    *v46 = v47;
    swift_willThrow(v45);

    swift_errorRelease(v35);
    v24 = v43;
    v25 = v42;
    v26 = 2;
    goto LABEL_25;
  }
  v27 = *(void **)(v0 + 136);
  sub_10001DDD4(v27, *(void **)(v0 + 144), 0);
  v28 = objc_msgSend(v27, "mediaItems");
  v29 = sub_10001DE0C();
  v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

  if (!((unint64_t)v30 >> 62))
  {
    if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_15;
LABEL_31:
    v53 = *(void **)(v0 + 136);
    v52 = *(void **)(v0 + 144);
    swift_bridgeObjectRelease(v30);
    sub_1000100FC(v53, v52, 0);
    v12 = v53;
    v13 = v52;
    v14 = 0;
    goto LABEL_32;
  }
  if (v30 < 0)
    v50 = v30;
  else
    v50 = v30 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v30);
  v51 = _CocoaArrayWrapper.endIndex.getter(v50);
  swift_bridgeObjectRelease(v30);
  if (!v51)
    goto LABEL_31;
LABEL_15:
  if ((v30 & 0xC000000000000001) != 0)
  {
    v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
    goto LABEL_18;
  }
  if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v31 = *(id *)(v30 + 32);
LABEL_18:
    v32 = v31;
    v34 = *(void **)(v0 + 136);
    v33 = *(void **)(v0 + 144);
    swift_bridgeObjectRelease(v30);
    sub_1000143E4(v32, v0 + 16);
    v58 = *(_OWORD *)(v0 + 32);
    v59 = *(_OWORD *)(v0 + 16);
    v56 = *(_OWORD *)(v0 + 64);
    v57 = *(_OWORD *)(v0 + 48);
    v55 = *(_OWORD *)(v0 + 80);

    sub_1000100FC(v34, v33, 0);
    sub_1000100FC(v34, v33, 0);
    v18 = v55;
    v17 = v56;
    v16 = v57;
    v15 = v58;
    v2 = v59;
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_10001DBB4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004F7C(&qword_100116E28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001DBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_1001175C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10001DC3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001175C8;
  if (!qword_1001175C8)
  {
    v1 = sub_1000050C8(&qword_1001175C0);
    sub_100013B28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001175C8);
  }
  return result;
}

uint64_t *sub_10001DCA0(uint64_t *a1)
{
  sub_10001DCE8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  return a1;
}

uint64_t sub_10001DCE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_release(result);
    swift_release(a2);
    swift_release(a3);
    swift_release(a4);
    swift_release(a5);
    swift_release(a6);
    swift_release(a7);
    swift_release(a8);
    swift_release(a9);
    return swift_release(a10);
  }
  return result;
}

unint64_t sub_10001DD90()
{
  unint64_t result;

  result = qword_1001175D8;
  if (!qword_1001175D8)
  {
    result = swift_getWitnessTable(&unk_1000D5274, &type metadata for RecognizeMusicError);
    atomic_store(result, (unint64_t *)&qword_1001175D8);
  }
  return result;
}

id sub_10001DDD4(id result, void *a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2)
      return result;
    swift_errorRetain();
    result = a2;
  }
  return result;
}

unint64_t sub_10001DE0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001175E0;
  if (!qword_1001175E0)
  {
    v1 = objc_opt_self(SHMatchedMediaItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001175E0);
  }
  return result;
}

uint64_t sub_10001DE48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Playlist(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10001DE84(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Playlist(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10001DEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Playlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10001DEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Playlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10001DF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Playlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10001DF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Playlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10001DFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001DFD4);
}

uint64_t sub_10001DFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Playlist(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10001E010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001E01C);
}

uint64_t sub_10001E01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Playlist(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MusicKitPlaylist(uint64_t a1)
{
  uint64_t result;

  result = qword_100117658;
  if (!qword_100117658)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MusicKitPlaylist);
  return result;
}

uint64_t sub_10001E098(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Playlist(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10001E100()
{
  qword_1001175E8 = 0x6F6E2E636973756DLL;
  unk_1001175F0 = 0xEF7473696C2E6574;
}

uint64_t sub_10001E130()
{
  uint64_t result;

  result = static Color.gray.getter();
  qword_1001175F8 = result;
  return result;
}

uint64_t sub_10001E14C()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;

  v50 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v50);
  v1 = (_OWORD *)((char *)&v50 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0));
  v2 = sub_100004F7C(&qword_100117690);
  __chkstk_darwin(v2);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100004F7C(&qword_100117698);
  __chkstk_darwin(v54);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_1001172E8);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ArtworkImage(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_1001176A0);
  v52 = *(_QWORD *)(v14 - 8);
  v53 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100004F7C(&qword_1001176A8);
  v17 = __chkstk_darwin(v51);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20.n128_f64[0] = Playlist.artwork.getter(v17);
  ArtworkImage.init(_:)(v9, v20);
  v21 = type metadata accessor for ArtworkUnavailableView(0);
  v22 = sub_10001E610();
  ArtworkImage.artworkPlaceholder<A>(_:)(sub_10001E560, 0, v21, v22);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v23 = (char *)v1 + *(int *)(v50 + 20);
  v24 = enum case for RoundedCornerStyle.continuous(_:);
  v25 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  __asm { FMOV            V0.2D, #5.0 }
  *v1 = _Q0;
  if (qword_100115E28 != -1)
    swift_once(&qword_100115E28, sub_10001E130);
  v31 = qword_1001175F8;
  swift_retain(qword_1001175F8);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v55, 0, 0, _swiftEmptyArrayStorage, 0.4, 10.0, 0.0);
  sub_10001E658((uint64_t)v1, (uint64_t)v4);
  v32 = &v4[*(int *)(sub_100004F7C(&qword_1001176B0) + 36)];
  v33 = v55[1];
  *(_OWORD *)v32 = v55[0];
  *((_OWORD *)v32 + 1) = v33;
  *((_QWORD *)v32 + 4) = v56;
  v34 = sub_100004F7C(&qword_1001176B8);
  *(_QWORD *)&v4[*(int *)(v34 + 52)] = v31;
  *(_WORD *)&v4[*(int *)(v34 + 56)] = 256;
  v35 = static Alignment.center.getter(v34);
  v37 = v36;
  v38 = (uint64_t *)&v4[*(int *)(sub_100004F7C(&qword_1001176C0) + 36)];
  *v38 = v35;
  v38[1] = v37;
  sub_10001E69C((uint64_t)v1);
  sub_100007C8C((uint64_t)v4, (uint64_t)v6, &qword_100117690);
  *(_QWORD *)&v6[*(int *)(v54 + 36)] = 0x3FC999999999999ALL;
  v39 = sub_10000526C((uint64_t)v4, &qword_100117690);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  v43 = v51;
  v44 = (uint64_t)&v19[*(int *)(v51 + 36)];
  sub_100007C8C((uint64_t)v6, v44, &qword_100117698);
  v45 = (uint64_t *)(v44 + *(int *)(sub_100004F7C(&qword_1001176C8) + 36));
  *v45 = v40;
  v45[1] = v42;
  v47 = v52;
  v46 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v19, v16, v53);
  sub_10000526C((uint64_t)v6, &qword_100117698);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v46);
  v48 = sub_10001E6D8();
  return AnyView.init<A>(_:)(v19, v43, v48);
}

uint64_t sub_10001E560()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_100115E20 != -1)
    swift_once(&qword_100115E20, sub_10001E100);
  v0 = qword_1001175E8;
  v1 = unk_1001175F0;
  swift_bridgeObjectRetain(unk_1001175F0);
  return ArtworkUnavailableView.init(placeholderImage:widthRatio:heightRatio:)(v0, v1, 0x3FD999999999999ALL, 0, 0x3FD999999999999ALL, 0);
}

uint64_t sub_10001E5F4()
{
  return Playlist.isCollaborative.getter() & 1;
}

unint64_t sub_10001E610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117310;
  if (!qword_100117310)
  {
    v1 = type metadata accessor for ArtworkUnavailableView(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ArtworkUnavailableView, v1);
    atomic_store(result, (unint64_t *)&qword_100117310);
  }
  return result;
}

uint64_t sub_10001E658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001E69C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001E6D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001176D0;
  if (!qword_1001176D0)
  {
    v1 = sub_1000050C8(&qword_1001176A8);
    v2[0] = type metadata accessor for ArtworkUnavailableView(255);
    v2[1] = sub_10001E610();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of ArtworkImage.artworkPlaceholder<A>(_:)>>, 1);
    sub_10001E768();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001176D0);
  }
  return result;
}

unint64_t sub_10001E768()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001176D8;
  if (!qword_1001176D8)
  {
    v1 = sub_1000050C8(&qword_1001176C8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _OverlayModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001176D8);
  }
  return result;
}

BOOL sub_10001E7B4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void sub_10001E7CC()
{
  NSString v0;
  id v1;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "colorNamed:", v0);

  if (v1)
    qword_1001176E0 = (uint64_t)v1;
  else
    __break(1u);
}

id sub_10001E844()
{
  char *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double Width;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE v24[24];
  CGRect v25;

  v1 = (uint64_t *)&v0[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews];
  swift_beginAccess(&v0[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews], v24, 0, 0);
  v2 = *v1;
  if ((unint64_t)*v1 >> 62)
    goto LABEL_22;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v4 = OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData;
  if (v3 != *(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData]
                       + 16))
    sub_10001EAB8();
  objc_msgSend(v0, "bounds");
  Width = CGRectGetWidth(v25);
  v2 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v2 < 0)
      v22 = *v1;
    else
      v22 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = *(_QWORD *)(*(_QWORD *)&v0[v4] + 16);
  if (v7)
  {
    v8 = 0;
    v9 = Width / (double)v6 * 0.5;
    do
    {
      swift_beginAccess(v1, v23, 32, 0);
      v10 = *v1;
      if ((*v1 & 0xC000000000000001) != 0)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8);
      }
      else
      {
        if (v8 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          if (v2 < 0)
            v21 = v2;
          else
            v21 = v2 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v2);
          v3 = _CocoaArrayWrapper.endIndex.getter(v21);
          swift_bridgeObjectRelease(v2);
          goto LABEL_3;
        }
        v11 = *(id *)(v10 + 8 * v8 + 32);
      }
      v2 = (uint64_t)v11;
      swift_endAccess(v23);
      v12 = *(_QWORD *)&v0[v4];
      if (v8 >= *(_QWORD *)(v12 + 16))
        goto LABEL_21;
      v13 = v8 + 1;
      v14 = *(float *)(v12 + 4 * v8 + 32);
      objc_msgSend(v0, "bounds");
      v16 = v15 * fmin(v14, 1.0);
      if (v9 > v16)
        v17 = v9;
      else
        v17 = v16;
      v18 = objc_msgSend((id)v2, "layer");
      objc_msgSend(v18, "setBounds:", 0.0, 0.0, v9, v17);

      v19 = objc_msgSend((id)v2, "layer");
      objc_msgSend(v19, "setCornerRadius:", v9 * 0.5);

      v8 = v13;
    }
    while (v7 != v13);
  }
  return objc_msgSend(v0, "setNeedsDisplay");
}

void sub_10001EAB8()
{
  char *v0;
  char *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  id v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  char v22[24];

  v1 = v0;
  v2 = (uint64_t *)&v0[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews];
  swift_beginAccess(v2, v22, 1, 0);
  v3 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_21;
LABEL_3:
    v4 = *v2;
    if ((unint64_t)*v2 >> 62)
    {
      if (v4 < 0)
        v11 = *v2;
      else
        v11 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(*v2, 2);
      v5 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (v5)
        goto LABEL_5;
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(*v2, 2);
      if (v5)
      {
LABEL_5:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v5; ++i)
        {
          if ((v4 & 0xC000000000000001) != 0)
            v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i);
          else
            v7 = *(id *)(v4 + 8 * i + 32);
          v8 = v7;
          objc_msgSend(v7, "removeFromSuperview");

        }
      }
    }
    swift_bridgeObjectRelease_n(v4, 2);
    v12 = *v2;
    *v2 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v12);
    goto LABEL_21;
  }
  if (v3 < 0)
    v9 = *v2;
  else
    v9 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v10 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(v3);
  if (v10)
    goto LABEL_3;
LABEL_21:
  for (j = *(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData]
                      + 16); j; --j)
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v15 = objc_msgSend(v14, "layer");
    objc_msgSend(v15, "setCornerCurve:", kCACornerCurveContinuous);

    v16 = objc_msgSend(v14, "layer");
    objc_msgSend(v16, "setAllowsEdgeAntialiasing:", 1);

    if (qword_100115E30 != -1)
      swift_once(&qword_100115E30, sub_10001E7CC);
    objc_msgSend(v14, "setBackgroundColor:", qword_1001176E0);
    swift_beginAccess(v2, v21, 33, 0);
    v17 = v14;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v19 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v18 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v19 >= v18 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
    v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
    specialized Array._endMutation()(v20);
    swift_endAccess(v21);
    objc_msgSend(v1, "addSubview:", v17);

  }
}

void sub_10001EE1C(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  char v4;
  double v5;
  double v6;
  _QWORD *v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];
  objc_super v30;
  CGRect v31;

  v30.receiver = v2;
  v30.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v30, "layoutSubviews");
  v3 = OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_style;
  v4 = v2[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_style];
  objc_msgSend(v2, "bounds");
  v6 = v5;
  v7 = &unk_100117000;
  v8 = (uint64_t *)&v2[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews];
  v9 = &v2[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews];
  if ((v4 & 1) != 0)
  {
    swift_beginAccess(v9, v29, 0, 0);
    v10 = *v8;
    if ((unint64_t)v10 >> 62)
      goto LABEL_21;
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_4:
    v12 = v6 / (double)v11;
    v13 = 0.52;
  }
  else
  {
    swift_beginAccess(v9, v29, 0, 0);
    v14 = *v8;
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v27 = v14;
      else
        v27 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v14);
      v15 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v12 = (v6 + -2.0) / (double)v15;
    v13 = 0.54;
  }
  v6 = v12 * v13;
  v16 = *(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData] + 16);
  if (v16)
  {
    v17 = 0;
    v10 = (uint64_t)&v2[v7[222]];
    do
    {
      swift_beginAccess(v10, v28, 32, 0);
      v18 = *(_QWORD *)v10;
      if ((*(_QWORD *)v10 & 0xC000000000000001) != 0)
      {
        v19 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17);
      }
      else
      {
        if ((unint64_t)v17 >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_21:
          if (v10 < 0)
            v26 = v10;
          else
            v26 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v10);
          v11 = _CocoaArrayWrapper.endIndex.getter(v26);
          swift_bridgeObjectRelease(v10);
          goto LABEL_4;
        }
        v19 = *(id *)(v18 + 8 * v17 + 32);
      }
      v7 = v19;
      v20 = v17 + 1;
      swift_endAccess(v28);
      v21 = objc_msgSend(v7, "layer");
      objc_msgSend(v21, "setCornerRadius:", v6 * 0.5);

      v22 = v12 * (double)v17;
      v23 = v22 + 1.0;
      v24 = (v12 - v6) * 0.5 + v6 * 0.5 + v22;
      if (v2[v3])
        v25 = v24;
      else
        v25 = v23;
      objc_msgSend(v2, "bounds");
      objc_msgSend(v7, "setCenter:", v25, CGRectGetMidY(v31));
      objc_msgSend(v7, "bounds");
      objc_msgSend(v7, "setBounds:", 0.0, 0.0, v6);

      ++v17;
    }
    while (v16 != v20);
  }
}

id sub_10001F100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v2);
  return sub_10001E844();
}

uint64_t type metadata accessor for SpectralOutputWaveformView()
{
  return objc_opt_self(_TtC16MusicRecognition26SpectralOutputWaveformView);
}

uint64_t getEnumTagSinglePayload for SpectralOutputWaveformStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SpectralOutputWaveformStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001F2A0 + 4 * byte_1000D29B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001F2D4 + 4 * byte_1000D29B0[v4]))();
}

uint64_t sub_10001F2D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001F2DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001F2E4);
  return result;
}

uint64_t sub_10001F2F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001F2F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001F2FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001F304(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10001F310(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SpectralOutputWaveformStyle()
{
  return &type metadata for SpectralOutputWaveformStyle;
}

unint64_t sub_10001F330()
{
  unint64_t result;

  result = qword_100117728;
  if (!qword_100117728)
  {
    result = swift_getWitnessTable(&unk_1000D2A3C, &type metadata for SpectralOutputWaveformStyle);
    atomic_store(result, (unint64_t *)&qword_100117728);
  }
  return result;
}

void sub_10001F374()
{
  qword_100117730 = 0x636974617473;
  *(_QWORD *)algn_100117738 = 0xE600000000000000;
}

void sub_10001F394(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  objc_class *ObjectType;
  uint64_t v13;
  objc_class *v14;
  _BYTE *v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  NSString v20;
  id v21;
  id v22;
  objc_super v23;
  objc_super v24;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v13 = OBJC_IVAR____TtC16MusicRecognition21WaveformAccessoryView_waveformView;
  v14 = (objc_class *)type metadata accessor for SpectralOutputWaveformView();
  v15 = objc_allocWithZone(v14);
  *(_QWORD *)&v15[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v15[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData] = _swiftEmptyArrayStorage;
  v15[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_style] = 0;
  v24.receiver = v15;
  v24.super_class = v14;
  v16 = v7;
  v17 = objc_msgSendSuper2(&v24, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10001EAB8();

  *(_QWORD *)&v7[v13] = v17;
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v19 = objc_allocWithZone((Class)BSUICAPackageView);
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "initWithPackageName:inBundle:", v20, v18);

  if (v21)
  {
    *(_QWORD *)&v16[OBJC_IVAR____TtC16MusicRecognition21WaveformAccessoryView_listeningView] = v21;

    v23.receiver = v16;
    v23.super_class = ObjectType;
    v22 = objc_msgSendSuper2(&v23, "initWithFrame:", a1, a2, a3, a4);
    sub_10001F540();

  }
  else
  {
    __break(1u);
  }
}

void sub_10001F540()
{
  char *v0;
  void *v1;
  NSString v2;
  void *v3;
  NSString v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  Class isa;

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition21WaveformAccessoryView_waveformView];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v1);
  if (qword_1001161D0 != -1)
    swift_once(&qword_1001161D0, sub_1000805EC);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setAccessibilityIdentifier:", v2);

  v3 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition21WaveformAccessoryView_listeningView];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  if (qword_1001161C8 != -1)
    swift_once(&qword_1001161C8, sub_1000805C0);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setAccessibilityIdentifier:", v4);

  objc_msgSend(v3, "setClipsToBounds:", 1);
  if (qword_100115E38 != -1)
    swift_once(&qword_100115E38, sub_10001F374);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setState:", v5);

  objc_msgSend(v0, "addSubview:", v3);
  v29 = (void *)objc_opt_self(NSLayoutConstraint);
  v6 = sub_100004F7C(&qword_100116D90);
  v7 = swift_allocObject(v6, 96, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000D2A70;
  v8 = objc_msgSend(v1, "centerXAnchor");
  v9 = objc_msgSend(v0, "centerXAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v7 + 32) = v10;
  v11 = objc_msgSend(v1, "centerYAnchor");
  v12 = objc_msgSend(v0, "centerYAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v7 + 40) = v13;
  v14 = objc_msgSend(v1, "heightAnchor");
  v15 = objc_msgSend(v14, "constraintEqualToConstant:", 24.0);

  *(_QWORD *)(v7 + 48) = v15;
  v16 = objc_msgSend(v1, "widthAnchor");
  v17 = objc_msgSend(v16, "constraintEqualToConstant:", 24.0);

  *(_QWORD *)(v7 + 56) = v17;
  v18 = objc_msgSend(v3, "centerXAnchor");
  v19 = objc_msgSend(v0, "centerXAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:", v19);

  *(_QWORD *)(v7 + 64) = v20;
  v21 = objc_msgSend(v3, "centerYAnchor");
  v22 = objc_msgSend(v0, "centerYAnchor");
  v23 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

  *(_QWORD *)(v7 + 72) = v23;
  v24 = objc_msgSend(v3, "heightAnchor");
  v25 = objc_msgSend(v24, "constraintEqualToConstant:", 24.0);

  *(_QWORD *)(v7 + 80) = v25;
  v26 = objc_msgSend(v3, "widthAnchor");
  v27 = objc_msgSend(v26, "constraintEqualToConstant:", 24.0);

  *(_QWORD *)(v7 + 88) = v27;
  specialized Array._endMutation()(v28);
  sub_10001FC14();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v29, "activateConstraints:", isa);

}

void sub_10001F9F8(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v6;
  objc_class *v7;
  _BYTE *v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  objc_super v17;
  objc_super v18;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v6 = OBJC_IVAR____TtC16MusicRecognition21WaveformAccessoryView_waveformView;
  v7 = (objc_class *)type metadata accessor for SpectralOutputWaveformView();
  v8 = objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v8[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData] = _swiftEmptyArrayStorage;
  v8[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_style] = 0;
  v18.receiver = v8;
  v18.super_class = v7;
  v9 = v3;
  v10 = objc_msgSendSuper2(&v18, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_10001EAB8();

  *(_QWORD *)&v3[v6] = v10;
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v12 = objc_allocWithZone((Class)BSUICAPackageView);
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "initWithPackageName:inBundle:", v13, v11);

  if (v14)
  {
    *(_QWORD *)&v9[OBJC_IVAR____TtC16MusicRecognition21WaveformAccessoryView_listeningView] = v14;

    v17.receiver = v9;
    v17.super_class = ObjectType;
    v15 = objc_msgSendSuper2(&v17, "initWithCoder:", a1);
    if (v15)
    {
      v16 = v15;
      sub_10001F540();

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for WaveformAccessoryView()
{
  return objc_opt_self(_TtC16MusicRecognition21WaveformAccessoryView);
}

unint64_t sub_10001FC14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001177E0;
  if (!qword_1001177E0)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001177E0);
  }
  return result;
}

uint64_t *sub_10001FC50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100004F7C(&qword_100116698);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v6 = v4;
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v12 = *a2;
      *a1 = *a2;
      swift_retain(v12);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

double sub_10001FD18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(a1, v2) == 1)
  {
    v3 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*a1).n128_u64[0];
  }
  return result;
}

uint64_t *sub_10001FD7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    v6 = a1;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_retain(v9);
    v6 = a1;
    v7 = v4;
    v8 = 0;
  }
  swift_storeEnumTagMultiPayload(v6, v7, v8);
  return a1;
}

uint64_t *sub_10001FE18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_10000526C((uint64_t)a1, &qword_100116698);
    v4 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = a1;
      v7 = v4;
      v8 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v6 = a1;
      v7 = v4;
      v8 = 0;
    }
    swift_storeEnumTagMultiPayload(v6, v7, v8);
  }
  return a1;
}

void *sub_10001FECC(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

void *sub_10001FF64(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    sub_10000526C((uint64_t)a1, &qword_100116698);
    v4 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100020014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020020);
}

uint64_t sub_100020020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100117800);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100020060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002006C);
}

uint64_t sub_10002006C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100117800);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for NavigationBarButtonStyle(uint64_t a1)
{
  uint64_t result;

  result = qword_100117860;
  if (!qword_100117860)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NavigationBarButtonStyle);
  return result;
}

void sub_1000200EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100020154(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_100020154(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117870)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117870);
  }
}

uint64_t sub_1000201A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD838, 1);
}

uint64_t sub_1000201B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = static Color.black.getter();
  v1 = Color.opacity(_:)(0.26);
  result = swift_release(v0);
  qword_1001177F0 = v1;
  return result;
}

uint64_t sub_1000201F8()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_1001177F8 = result;
  return result;
}

uint64_t sub_100020214@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t *v35;
  uint64_t (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t OpaqueTypeConformance2;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t *v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD v100[3];

  v96 = a1;
  v85 = type metadata accessor for ColorScheme(0);
  v93 = *(_QWORD *)(v85 - 8);
  v1 = __chkstk_darwin(v85);
  v87 = (char *)&v78 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v98 = (char *)&v78 - v3;
  v4 = type metadata accessor for BorderlessButtonStyle(0);
  v5 = *(_QWORD *)(v4 - 8);
  v88 = v4;
  v89 = v5;
  __chkstk_darwin(v4);
  v86 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SymbolVariants(0);
  v83 = *(_QWORD *)(v7 - 8);
  v84 = v7;
  v8 = __chkstk_darwin(v7);
  v81 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v78 - v10;
  v12 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v79 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(&qword_1001178A0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004F7C(&qword_1001178A8);
  __chkstk_darwin(v19);
  v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100004F7C(&qword_1001178B0);
  v82 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v23 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100004F7C(&qword_1001178B8);
  v91 = *(_QWORD *)(v24 - 8);
  v92 = v24;
  __chkstk_darwin(v24);
  v97 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100004F7C(&qword_1001178C0);
  __chkstk_darwin(v90);
  v99 = (uint64_t)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100004F7C(&qword_1001178C8);
  v27 = __chkstk_darwin(v94);
  v95 = (uint64_t)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = ButtonStyleConfiguration.label.getter(v27);
  v30 = static Font.Weight.bold.getter(v29);
  sub_100004864(&qword_1001178D0, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
  View.fontWeight(_:)(*(_QWORD *)&v30, 0, v12);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v14, v12);
  v32 = static Font.title2.getter(v31);
  KeyPath = swift_getKeyPath(&unk_1000D2B08, v33);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v18, v15);
  v35 = (uint64_t *)&v21[*(int *)(v19 + 36)];
  *v35 = KeyPath;
  v35[1] = v32;
  v36 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  v37 = v85;
  v38 = v36(v18, v15);
  v39 = static SymbolVariants.circle.getter(v38);
  v40 = v81;
  SymbolVariants.fill.getter(v39);
  v41 = v84;
  v42 = *(void (**)(char *, uint64_t))(v83 + 8);
  v42(v11, v84);
  v43 = sub_1000209E0();
  View.symbolVariant(_:)(v40, v19, v43);
  v42(v40, v41);
  v44 = sub_10000526C((uint64_t)v21, &qword_1001178A8);
  v45 = v86;
  BorderlessButtonStyle.init()(v44);
  v100[0] = v19;
  v100[1] = v43;
  v46 = v87;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v100, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  v48 = sub_100004864(&qword_1001178E0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  v49 = v80;
  v50 = v88;
  View.buttonStyle<A>(_:)(v45, v80, v88, OpaqueTypeConformance2, v48);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v45, v50);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v23, v49);
  v51 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  v89 = Color.init(uiColor:)(v51);
  v52 = v98;
  sub_100006A6C(v98);
  v53 = enum case for ColorScheme.light(_:);
  v54 = v93;
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 104);
  v55(v46, enum case for ColorScheme.light(_:), v37);
  v56 = v52;
  LOBYTE(v32) = static ColorScheme.== infix(_:_:)(v52, v46);
  v57 = *(void (**)(char *, uint64_t))(v54 + 8);
  v57(v46, v37);
  v57(v56, v37);
  if ((v32 & 1) != 0)
  {
    if (qword_100115E40 != -1)
      swift_once(&qword_100115E40, sub_1000201B8);
    v58 = &qword_1001177F0;
  }
  else
  {
    if (qword_100115E48 != -1)
      swift_once(&qword_100115E48, sub_1000201F8);
    v58 = &qword_1001177F8;
  }
  v59 = *v58;
  v60 = swift_retain(*v58);
  v61 = v91;
  v62 = v92;
  v63 = v99;
  v64 = v97;
  (*(void (**)(uint64_t, char *, uint64_t, __n128))(v91 + 16))(v99, v97, v92, v60);
  v65 = (uint64_t *)(v63 + *(int *)(v90 + 36));
  *v65 = v89;
  v65[1] = v59;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v64, v62);
  v66 = v98;
  sub_100006A6C(v98);
  v55(v46, v53, v37);
  v67 = static ColorScheme.== infix(_:_:)(v66, v46);
  v57(v46, v37);
  v57(v66, v37);
  if ((v67 & 1) != 0)
  {
    if (qword_100115E40 != -1)
      swift_once(&qword_100115E40, sub_1000201B8);
    v68 = &qword_1001177F0;
  }
  else
  {
    if (qword_100115E48 != -1)
      swift_once(&qword_100115E48, sub_1000201F8);
    v68 = &qword_1001177F8;
  }
  v69 = *v68;
  swift_retain(*v68);
  v71 = swift_getKeyPath(&unk_1000D2B38, v70);
  v100[0] = v69;
  v72 = swift_retain(v69);
  v73 = AnyShapeStyle.init<A>(_:)(v100, &type metadata for Color, &protocol witness table for Color, v72);
  v74 = v99;
  v75 = v95;
  sub_100020B40(v99, v95);
  swift_release(v69);
  v76 = (uint64_t *)(v75 + *(int *)(v94 + 36));
  *v76 = v71;
  v76[1] = v73;
  sub_10000526C(v74, &qword_1001178C0);
  return sub_100020B88(v75, v96);
}

uint64_t sub_100020940@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100020968@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100020990(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_1000209B8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_1000209E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001178D8;
  if (!qword_1001178D8)
  {
    v1 = sub_1000050C8(&qword_1001178A8);
    v2[0] = type metadata accessor for ButtonStyleConfiguration.Label(255);
    v2[1] = sub_100004864(&qword_1001178D0, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001178D8);
  }
  return result;
}

uint64_t sub_100020AA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100020AC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100020AF0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_100020B18(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_100020B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_1001178C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100020B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_1001178C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100020BD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001178E8;
  if (!qword_1001178E8)
  {
    v1 = sub_1000050C8(&qword_1001178C8);
    sub_100020C58();
    sub_10000522C(&qword_100117908, &qword_100117910, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001178E8);
  }
  return result;
}

unint64_t sub_100020C58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_1001178F0;
  if (!qword_1001178F0)
  {
    v1 = sub_1000050C8(&qword_1001178C0);
    v2 = sub_1000050C8(&qword_1001178B0);
    v3 = type metadata accessor for BorderlessButtonStyle(255);
    v6 = sub_1000050C8(&qword_1001178A8);
    v7 = sub_1000209E0();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    v5 = sub_100004864(&qword_1001178E0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_10000522C(&qword_1001178F8, &qword_100117900, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001178F0);
  }
  return result;
}

void sub_100020D70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v8 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)((char *)a4 + *(int *)(type metadata accessor for AddToPlaylistView(0) + 20));
  *v11 = swift_getKeyPath(&unk_1000D2B70, v12);
  v13 = sub_100004F7C(&qword_1001166A0);
  swift_storeEnumTagMultiPayload(v11, v13, 0);
  v14 = type metadata accessor for AddToPlaylistViewModel(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain(a1);
  swift_retain(a3);
  URL.init(string:)(0xD000000000000017, 0x80000001000DA0D0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16) == 1)
  {
    __break(1u);
  }
  else
  {
    v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v15 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_appleMusicBaseURL, v10, v16);
    v19 = v15 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state;
    *(_QWORD *)v19 = 1;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *(_QWORD *)(v19 + 40) = 0;
    ObservationRegistrar.init()(v18);
    *(_QWORD *)(v15 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_libraryController) = a1;
    v20 = (_QWORD *)(v15 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler);
    *v20 = a2;
    v20[1] = a3;
    v23 = v15;
    State.init(wrappedValue:)(v24, &v23, v14);
    swift_release(a1);
    swift_release(a3);
    v21 = v24[1];
    *a4 = v24[0];
    a4[1] = v21;
  }
}

uint64_t type metadata accessor for AddToPlaylistView(uint64_t a1)
{
  uint64_t result;

  result = qword_100117990;
  if (!qword_100117990)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AddToPlaylistView);
  return result;
}

uint64_t sub_100020F8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  char v137[24];
  uint64_t v138;
  uint64_t v139;

  v2 = (uint64_t)v1;
  v127 = a1;
  v128 = sub_100004F7C(&qword_1001179C8);
  v115 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v114 = (uint64_t)&v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100004F7C(&qword_1001179D0);
  v118 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v117 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100004F7C(&qword_1001179D8);
  v5 = __chkstk_darwin(v122);
  v7 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v120 = (uint64_t *)((char *)&v110 - v8);
  v123 = sub_100004F7C(&qword_1001179E0);
  __chkstk_darwin(v123);
  v126 = (uint64_t)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_100004F7C(&qword_1001179E8);
  __chkstk_darwin(v116);
  v119 = (uint64_t)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100004F7C(&qword_1001179F0);
  __chkstk_darwin(v125);
  v121 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for _TaskModifier(0);
  __chkstk_darwin(v111);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for TaskPriority(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v15 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for AddToPlaylistView(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v1[1];
  v138 = *v1;
  v139 = v20;
  v21 = sub_100004F7C(&qword_1001179F8);
  State.wrappedValue.getter(&v133, v21);
  v22 = v133;
  KeyPath = swift_getKeyPath(&unk_1000D2C20, v23);
  v138 = v22;
  v25 = sub_100004864((unint64_t *)&qword_100117A00, type metadata accessor for AddToPlaylistViewModel, (uint64_t)&unk_1000D3F58);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, KeyPath, v25);
  swift_release(KeyPath);
  v26 = (uint64_t *)(v22 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state);
  swift_beginAccess(v22 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state, v137, 0, 0);
  sub_100024E88(v26, (uint64_t)&v138);
  swift_release(v22);
  v27 = v138;
  if (v138)
  {
    if (v138 == 1)
    {
      v28 = LocalizedStringKey.init(stringLiteral:)(0x4C5F4D415A414853, 0xEE00474E4944414FLL);
      v30 = v29;
      LODWORD(v118) = v31;
      v33 = v32;
      sub_10000B340(v2, (uint64_t)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddToPlaylistView);
      v34 = *(unsigned __int8 *)(v17 + 80);
      v35 = (v34 + 16) & ~v34;
      v36 = swift_allocObject(&unk_100109880, v35 + v18, v34 | 7);
      v37 = sub_10002515C((uint64_t)v19, v36 + v35);
      static TaskPriority.userInitiated.getter(v37);
      v38 = v112;
      v39 = v113;
      (*(void (**)(char *, char *, uint64_t))(v112 + 16))(&v13[*(int *)(v111 + 20)], v15, v113);
      *(_QWORD *)v13 = &unk_100117A98;
      *((_QWORD *)v13 + 1) = v36;
      sub_10000B340((uint64_t)v13, (uint64_t)&v7[*(int *)(v122 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
      *(_QWORD *)v7 = v28;
      *((_QWORD *)v7 + 1) = v30;
      v7[16] = v118 & 1;
      *((_QWORD *)v7 + 3) = v33;
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v33);
      sub_10000B600((uint64_t)v13, (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v39);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v30);
      v40 = (uint64_t)v120;
      sub_100007C48((uint64_t)v7, (uint64_t)v120, &qword_1001179D8);
      v41 = v40;
      v42 = v119;
      sub_100007C8C(v41, v119, &qword_1001179D8);
      swift_storeEnumTagMultiPayload(v42, v116, 0);
      v43 = sub_100024FF4();
      v44 = sub_1000050C8(&qword_100117A28);
      v45 = sub_1000050C8(&qword_100117A30);
      v118 = v45;
      v46 = sub_1000050C8(&qword_100117A38);
      v47 = sub_1000050C8(&qword_100117A40);
      v48 = sub_10000522C(&qword_100117A48, &qword_100117A40, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
      v133 = v47;
      v134 = v48;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
      v133 = v46;
      v134 = OpaqueTypeConformance2;
      v50 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
      v51 = sub_1000250BC();
      v133 = v44;
      v134 = v45;
      v135 = v50;
      v136 = (void *)v51;
      v52 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
      v53 = (uint64_t)v121;
      _ConditionalContent<>.init(storage:)(v42, v122, v124, v43, v52);
      v54 = v126;
      sub_100007C8C(v53, v126, &qword_1001179F0);
      swift_storeEnumTagMultiPayload(v54, v123, 0);
      v55 = sub_100024EC4();
      v56 = sub_1000050C8(&qword_100117A68);
      v57 = sub_1000050C8(&qword_100117A70);
      v58 = sub_1000050C8(&qword_100117A78);
      v59 = sub_1000050C8(&qword_100117A80);
      v60 = type metadata accessor for InsetListStyle(255);
      v61 = sub_10000522C(&qword_100117A88, &qword_100117A80, (uint64_t)&protocol conformance descriptor for List<A, B>);
      v133 = v59;
      v134 = v60;
      v135 = v61;
      v136 = &protocol witness table for InsetListStyle;
      v62 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
      v133 = v58;
      v134 = v62;
      v63 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
      v133 = v57;
      v134 = v63;
      v64 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
      v133 = v56;
      v134 = v118;
      v135 = v64;
      v136 = (void *)v51;
      v65 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
      _ConditionalContent<>.init(storage:)(v54, v125, v128, v55, v65);
      sub_10000526C(v53, &qword_1001179F0);
      v66 = v120;
      v67 = &qword_1001179D8;
    }
    else
    {
      sub_100007C48((uint64_t)&v139, (uint64_t)&v133, &qword_100117A08);
      v95 = v114;
      sub_100022020(v27, (uint64_t)&v133, v114);
      swift_bridgeObjectRelease(v27);
      v96 = v115;
      v97 = v126;
      v98 = v128;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v126, v95, v128);
      swift_storeEnumTagMultiPayload(v97, v123, 1);
      v124 = sub_100024EC4();
      v123 = sub_1000050C8(&qword_100117A68);
      v99 = sub_1000050C8(&qword_100117A30);
      v100 = sub_1000050C8(&qword_100117A70);
      v101 = sub_1000050C8(&qword_100117A78);
      v102 = sub_1000050C8(&qword_100117A80);
      v103 = type metadata accessor for InsetListStyle(255);
      v104 = sub_10000522C(&qword_100117A88, &qword_100117A80, (uint64_t)&protocol conformance descriptor for List<A, B>);
      v129 = v102;
      v130 = v103;
      v131 = v104;
      v132 = &protocol witness table for InsetListStyle;
      v105 = swift_getOpaqueTypeConformance2(&v129, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
      v129 = v101;
      v130 = v105;
      v106 = swift_getOpaqueTypeConformance2(&v129, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
      v129 = v100;
      v130 = v106;
      v107 = swift_getOpaqueTypeConformance2(&v129, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
      v108 = sub_1000250BC();
      v129 = v123;
      v130 = v99;
      v131 = v107;
      v132 = (void *)v108;
      v109 = swift_getOpaqueTypeConformance2(&v129, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
      _ConditionalContent<>.init(storage:)(v97, v125, v98, v124, v109);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v98);
      v66 = &v133;
      v67 = &qword_100117A08;
    }
    return sub_10000526C((uint64_t)v66, v67);
  }
  else
  {
    v68 = v117;
    sub_100021CAC(v117);
    v69 = v119;
    v70 = v124;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v118 + 16))(v119, v68, v124);
    swift_storeEnumTagMultiPayload(v69, v116, 1);
    v71 = sub_100024FF4();
    v72 = sub_1000050C8(&qword_100117A28);
    v73 = sub_1000050C8(&qword_100117A30);
    v120 = (uint64_t *)v73;
    v74 = sub_1000050C8(&qword_100117A38);
    v75 = sub_1000050C8(&qword_100117A40);
    v76 = sub_10000522C(&qword_100117A48, &qword_100117A40, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
    v133 = v75;
    v134 = v76;
    v77 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v133 = v74;
    v134 = v77;
    v78 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v79 = sub_1000250BC();
    v133 = v72;
    v134 = v73;
    v135 = v78;
    v136 = (void *)v79;
    v80 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v81 = (uint64_t)v121;
    _ConditionalContent<>.init(storage:)(v69, v122, v70, v71, v80);
    v82 = v126;
    sub_100007C8C(v81, v126, &qword_1001179F0);
    swift_storeEnumTagMultiPayload(v82, v123, 0);
    v83 = sub_100024EC4();
    v84 = sub_1000050C8(&qword_100117A68);
    v85 = sub_1000050C8(&qword_100117A70);
    v86 = sub_1000050C8(&qword_100117A78);
    v87 = sub_1000050C8(&qword_100117A80);
    v88 = type metadata accessor for InsetListStyle(255);
    v89 = sub_10000522C(&qword_100117A88, &qword_100117A80, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v133 = v87;
    v134 = v88;
    v135 = v89;
    v136 = &protocol witness table for InsetListStyle;
    v90 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v133 = v86;
    v134 = v90;
    v91 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v133 = v85;
    v134 = v91;
    v92 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v133 = v84;
    v134 = (uint64_t)v120;
    v135 = v92;
    v136 = (void *)v79;
    v93 = swift_getOpaqueTypeConformance2(&v133, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    _ConditionalContent<>.init(storage:)(v82, v125, v128, v83, v93);
    sub_10000526C(v81, &qword_1001179F0);
    return (*(uint64_t (**)(uint64_t, unint64_t))(v118 + 8))(v117, v124);
  }
}

uint64_t sub_100021B44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[6] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_100021BB0, v3, v4);
}

uint64_t sub_100021BB0()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t *)v0[5];
  v3 = *v1;
  v2 = v1[1];
  v0[2] = v3;
  v0[3] = v2;
  v4 = sub_100004F7C(&qword_1001179F8);
  State.wrappedValue.getter(v0 + 4, v4);
  v0[9] = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10011927C);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_100021C28;
  return sub_1000548C4();
}

uint64_t sub_100021C28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v2);
  return swift_task_switch(sub_100021C7C, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100021C7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100021CAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[16];
  uint64_t v44;
  char v45[16];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a1;
  v39 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v36 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004F7C(&qword_100117A40);
  v34 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100117A38);
  v38 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_100117A28);
  v10 = *(_QWORD *)(v9 - 8);
  v40 = v9;
  v41 = v10;
  __chkstk_darwin(v9);
  v33 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v1;
  v12 = sub_100004F7C(&qword_100117AA0);
  v13 = sub_10002520C();
  ContentUnavailableView.init(label:description:actions:)(sub_1000224B8, 0, sub_1000225E8, 0, sub_100025204, v45, &type metadata for Text, &type metadata for Text, v12, &protocol witness table for Text, &protocol witness table for Text, v13);
  v14 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x80000001000DA0F0);
  v15 = Text.init(_:tableName:bundle:comment:)(v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = sub_10000522C(&qword_100117A48, &qword_100117A40, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
  View.navigationTitle(_:)(v15, v17, v21, v19, v3, v22);
  sub_10000B64C(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v3);
  v24 = v36;
  v23 = v37;
  v25 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v39);
  v47 = v3;
  v48 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v27 = v33;
  View.navigationBarTitleDisplayMode(_:)(v24, v6, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v6);
  v44 = v35;
  v28 = sub_100004F7C(&qword_100117A30);
  v47 = v6;
  v48 = OpaqueTypeConformance2;
  v29 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v30 = sub_1000250BC();
  v31 = v40;
  View.toolbar<A>(content:)(sub_1000252A8, v43, v40, v28, v29, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v27, v31);
}

uint64_t sub_100022020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[16];
  uint64_t v61;
  char v62[16];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;

  v59 = a3;
  v6 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  __chkstk_darwin(v6);
  v56 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for InsetListStyle(0);
  v48 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_100117A80);
  v47 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_100117A78);
  v50 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004F7C(&qword_100117A70);
  v53 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004F7C(&qword_100117A68);
  v20 = *(_QWORD *)(v19 - 8);
  v54 = v19;
  v55 = v20;
  __chkstk_darwin(v19);
  v49 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = a2;
  v64 = v3;
  v65 = a1;
  v22 = sub_100004F7C(&qword_100117B00);
  v23 = sub_10000522C(&qword_100117B08, &qword_100117B00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v24 = List<>.init(content:)(sub_100025490, v62, v22, v23);
  InsetListStyle.init()(v24);
  v25 = sub_10000522C(&qword_100117A88, &qword_100117A80, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.listStyle<A>(_:)(v10, v11, v8, v25, &protocol witness table for InsetListStyle);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v11);
  v26 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x80000001000DA0F0);
  v27 = Text.init(_:tableName:bundle:comment:)(v26);
  v29 = v28;
  v31 = v30;
  v66 = v11;
  v67 = v8;
  v33 = v32 & 1;
  v68 = v25;
  v69 = &protocol witness table for InsetListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  View.navigationTitle(_:)(v27, v29, v33, v31, v14, OpaqueTypeConformance2);
  sub_10000B64C(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v16, v14);
  v35 = v56;
  v36 = v57;
  v37 = v58;
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v58);
  v66 = v14;
  v67 = OpaqueTypeConformance2;
  v38 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v39 = v49;
  v40 = v52;
  View.navigationBarTitleDisplayMode(_:)(v35, v52, v38);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v37);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v40);
  v61 = v51;
  v41 = sub_100004F7C(&qword_100117A30);
  v66 = v40;
  v67 = v38;
  v42 = swift_getOpaqueTypeConformance2(&v66, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v43 = sub_1000250BC();
  v44 = v54;
  View.toolbar<A>(content:)(sub_10002549C, v60, v54, v41, v42, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v39, v44);
}

uint64_t sub_1000224B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000028, 0x80000001000DA1A0);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Font.title2.getter(v3);
  v11 = Text.font(_:)(v10, v3, v5, v9, v7);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_release(v10);
  sub_10000B64C(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v18 = Text.bold()(v11, v13, v15 & 1, v17);
  v20 = v19;
  LOBYTE(v7) = v21;
  v23 = v22;
  sub_10000B64C(v11, v13, v15 & 1);
  result = swift_bridgeObjectRelease(v17);
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v7 & 1;
  *(_QWORD *)(a1 + 24) = v23;
  return result;
}

uint64_t sub_1000225E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  int v26;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002BLL, 0x80000001000DA170);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v26 = static HierarchicalShapeStyle.secondary.getter(v3);
  v10 = Text.foregroundStyle<A>(_:)(&v26, v3, v5, v9, v7, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  sub_10000B64C(v3, v5, v9);
  v17 = swift_bridgeObjectRelease(v7);
  v18 = static Font.subheadline.getter(v17);
  v19 = Text.font(_:)(v18, v10, v12, v16, v14);
  v21 = v20;
  LOBYTE(v9) = v22;
  v24 = v23;
  swift_release(v18);
  sub_10000B64C(v10, v12, v16);
  result = swift_bridgeObjectRelease(v14);
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v21;
  *(_BYTE *)(a1 + 16) = v9 & 1;
  *(_QWORD *)(a1 + 24) = v24;
  return result;
}

uint64_t sub_100022730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for AddToPlaylistView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_100004F7C(&qword_100117AB8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(a1, (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddToPlaylistView);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_1001098D0, v12 + v6, v11 | 7);
  sub_10002515C((uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12);
  v14 = sub_100004F7C(&qword_100117AC0);
  v15 = sub_1000252F0();
  v16 = Button.init(action:label:)(sub_1000252E4, v13, sub_1000229E4, 0, v14, v15);
  LODWORD(v13) = static HierarchicalShapeStyle.secondary.getter(v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(a2, v10, v7);
  *(_DWORD *)(a2 + *(int *)(sub_100004F7C(&qword_100117AA0) + 36)) = v13;
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000228A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OpenURLAction(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AddToPlaylistView(0);
  sub_100006A38(v9);
  v10 = a1[1];
  v14[1] = *a1;
  v14[2] = v10;
  v11 = sub_100004F7C(&qword_1001179F8);
  State.wrappedValue.getter(&v15, v11);
  v12 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_appleMusicBaseURL, v2);
  swift_release(v12);
  OpenURLAction.callAsFunction(_:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000229E4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[48];
  __int128 v53;
  _BYTE v54[25];

  v47 = sub_100004F7C(&qword_100117AF8);
  __chkstk_darwin(v47);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v43);
  v5 = (_OWORD *)((char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_100004F7C(&qword_1001176B0);
  __chkstk_darwin(v44);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x80000001000DA150);
  v9 = Text.init(_:tableName:bundle:comment:)(v8);
  v46 = v9;
  v11 = v10;
  v13 = v12;
  v15 = v14 & 1;
  v45 = v14 & 1;
  v16 = static Edge.Set.horizontal.getter();
  v17 = static Edge.Set.vertical.getter();
  v18 = EdgeInsets.init(_all:)(5.0);
  *(_QWORD *)&v50 = v9;
  *((_QWORD *)&v50 + 1) = v11;
  v19 = v11;
  LOBYTE(v51) = v15;
  *((_QWORD *)&v51 + 1) = v13;
  v52[0] = v16;
  memset(&v52[8], 0, 32);
  v52[40] = 1;
  LOBYTE(v53) = v17;
  *((double *)&v53 + 1) = v18;
  *(_QWORD *)v54 = v20;
  *(_QWORD *)&v54[8] = v21;
  *(_QWORD *)&v54[16] = v22;
  v54[24] = 0;
  v23 = (char *)v5 + *(int *)(v43 + 20);
  v24 = enum case for RoundedCornerStyle.continuous(_:);
  v25 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  __asm { FMOV            V0.2D, #3.0 }
  *v5 = _Q0;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v48, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
  sub_10000B340((uint64_t)v5, (uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v31 = &v7[*(int *)(v44 + 36)];
  v32 = v48[1];
  *(_OWORD *)v31 = v48[0];
  *((_OWORD *)v31 + 1) = v32;
  *((_QWORD *)v31 + 4) = v49;
  v33 = sub_10000B600((uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v34 = static Alignment.center.getter(v33);
  v36 = v35;
  sub_100007C8C((uint64_t)v7, (uint64_t)v3, &qword_1001176B0);
  v37 = (uint64_t *)&v3[*(int *)(v47 + 36)];
  *v37 = v34;
  v37[1] = v36;
  v38 = sub_100004F7C(&qword_100117AC0);
  sub_100007C8C((uint64_t)v3, (uint64_t)a1 + *(int *)(v38 + 36), &qword_100117AF8);
  v39 = v53;
  a1[4] = *(_OWORD *)&v52[32];
  a1[5] = v39;
  a1[6] = *(_OWORD *)v54;
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)&v54[9];
  v40 = v51;
  *a1 = v50;
  a1[1] = v40;
  v41 = *(_OWORD *)&v52[16];
  a1[2] = *(_OWORD *)v52;
  a1[3] = v41;
  sub_100025444((uint64_t)&v50);
  sub_10000526C((uint64_t)v3, &qword_100117AF8);
  sub_10000526C((uint64_t)v7, &qword_1001176B0);
  sub_10000B64C(v46, v19, v45);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_100022D20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;

  v123 = a3;
  v118 = sub_100004F7C(&qword_100117B10);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100004F7C(&qword_100117B18);
  v120 = *(_QWORD *)(v122 - 8);
  v6 = __chkstk_darwin(v122);
  v121 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v119 = (char *)&v106 - v8;
  v9 = sub_100004F7C(&qword_100117B20);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_100117B28);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004F7C(&qword_100117B30);
  v18 = __chkstk_darwin(v17);
  v115 = (uint64_t)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v124 = (uint64_t)&v106 - v20;
  v21 = sub_100007C8C(a1, (uint64_t)&v125, &qword_100117A08);
  if (*((_QWORD *)&v126 + 1))
  {
    v113 = &v106;
    v128 = v125;
    v129 = v126;
    v130 = v127;
    __chkstk_darwin(v21);
    v111 = &v106 - 4;
    v105 = a2;
    v22 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000026, 0x80000001000DA200);
    LOWORD(v105) = 256;
    v104 = 0;
    v23 = Text.init(_:tableName:bundle:comment:)(v22);
    v112 = v14;
    v24 = v23;
    v110 = v10;
    v26 = v25;
    v107 = v12;
    v28 = v27;
    v109 = v16;
    v30 = v29 & 1;
    v31 = static Font.Weight.semibold.getter();
    v32 = Text.fontWeight(_:)(*(_QWORD *)&v31, 0, v24, v26, v30, v28);
    v114 = a2;
    v33 = v32;
    v35 = v34;
    v37 = v36;
    v108 = v13;
    v39 = v38 & 1;
    sub_10000B64C(v24, v26, v30);
    v40 = swift_bridgeObjectRelease(v28);
    v41 = static Color.primary.getter(v40);
    v42 = Text.foregroundColor(_:)(v41, v33, v35, v39, v37);
    v44 = v43;
    LOBYTE(v30) = v45;
    v106 = v9;
    v47 = v46;
    swift_release(v41);
    sub_10000B64C(v33, v35, v39);
    swift_bridgeObjectRelease(v37);
    *(_QWORD *)&v125 = v42;
    *((_QWORD *)&v125 + 1) = v44;
    LOBYTE(v126) = v30 & 1;
    *((_QWORD *)&v126 + 1) = v47;
    v48 = sub_100004F7C(&qword_100117B50);
    v49 = sub_100025570();
    v50 = v107;
    v51 = Section<>.init(header:content:)(&v125, sub_100025638, v111, &type metadata for Text, v48, &protocol witness table for Text, v49);
    v52 = static VerticalEdge.Set.all.getter(v51);
    a2 = v114;
    v53 = sub_100025640(&qword_100117B70, &qword_100117B20, (void (*)(void))sub_100025570);
    v54 = v109;
    v55 = v106;
    View.listSectionSeparator(_:edges:)(2, v52, v106, v53);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v50, v55);
    v56 = v112;
    v57 = v124;
    v58 = v54;
    v59 = v108;
    (*(void (**)(uint64_t, char *, uint64_t))(v112 + 32))(v124, v58, v108);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v57, 0, 1, v59);
    v60 = sub_1000256B8(&v128);
  }
  else
  {
    sub_10000526C((uint64_t)&v125, &qword_100117A08);
    v60 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v124, 1, 1, v13);
  }
  v114 = &v106;
  __chkstk_darwin(v60);
  v105 = a2;
  v61 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001000DA1D0);
  LOWORD(v105) = 256;
  v104 = 0;
  v62 = Text.init(_:tableName:bundle:comment:)(v61);
  v64 = v63;
  v66 = v65;
  v68 = v67 & 1;
  v69 = static Font.Weight.semibold.getter();
  v70 = Text.fontWeight(_:)(*(_QWORD *)&v69, 0, v62, v64, v68, v66);
  v72 = v71;
  v74 = v73;
  v76 = v75 & 1;
  sub_10000B64C(v62, v64, v68);
  v77 = swift_bridgeObjectRelease(v66);
  v78 = static Color.primary.getter(v77);
  v79 = Text.foregroundColor(_:)(v78, v70, v72, v76, v74);
  v81 = v80;
  LOBYTE(v68) = v82;
  v84 = v83;
  swift_release(v78);
  sub_10000B64C(v70, v72, v76);
  swift_bridgeObjectRelease(v74);
  *(_QWORD *)&v128 = v79;
  *((_QWORD *)&v128 + 1) = v81;
  LOBYTE(v129) = v68 & 1;
  *((_QWORD *)&v129 + 1) = v84;
  v85 = sub_100004F7C(&qword_100117B38);
  v86 = sub_10002550C();
  v87 = v116;
  v88 = Section<>.init(header:content:)(&v128, sub_100025504, &v106 - 4, &type metadata for Text, v85, &protocol witness table for Text, v86);
  v89 = static VerticalEdge.Set.all.getter(v88);
  v90 = sub_100025640(&qword_100117B60, &qword_100117B10, (void (*)(void))sub_10002550C);
  v91 = v121;
  v92 = v89;
  v93 = v118;
  View.listSectionSeparator(_:edges:)(2, v92, v118, v90);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v87, v93);
  v95 = v119;
  v94 = v120;
  v96 = v122;
  (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v119, v91, v122);
  v97 = v124;
  v98 = v115;
  sub_100007C8C(v124, v115, &qword_100117B30);
  v99 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  v99(v91, v95, v96);
  v100 = v123;
  sub_100007C8C(v98, v123, &qword_100117B30);
  v101 = sub_100004F7C(&qword_100117B68);
  v99((char *)(v100 + *(int *)(v101 + 48)), v91, v96);
  v102 = *(void (**)(char *, uint64_t))(v94 + 8);
  v102(v95, v96);
  sub_10000526C(v97, &qword_100117B30);
  v102(v91, v96);
  return sub_10000526C(v98, &qword_100117B30);
}

_QWORD *sub_10002348C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  double (*v21)();
  uint64_t v22;

  v4 = type metadata accessor for AddToPlaylistView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_1000256EC(a1, (uint64_t)v17);
  sub_10000B340(a2, (uint64_t)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddToPlaylistView);
  sub_1000256EC(a1, (uint64_t)v15);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_100109920, v9 + 40, v7 | 7);
  sub_10002515C((uint64_t)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v8);
  v11 = v10 + v9;
  v12 = v15[1];
  *(_OWORD *)v11 = v15[0];
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = v16;
  v19[0] = v17[0];
  v19[1] = v17[1];
  v20 = v18;
  v21 = sub_10002572C;
  v22 = v10;
  v13 = sub_1000255F4();
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001000DA230, &type metadata for PlaylistCellView, v13);
  return sub_100025740(v19);
}

uint64_t sub_1000235E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for AddToPlaylistView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v18 = a1;
  KeyPath = swift_getKeyPath(&unk_1000D2C48, v7);
  sub_10000B340(a2, (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddToPlaylistView);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_100109970, v10 + v6, v9 | 7);
  sub_10002515C((uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  swift_bridgeObjectRetain(a1);
  v12 = sub_100004F7C(&qword_100117B88);
  v13 = sub_100004F7C(&qword_100117B50);
  v14 = sub_10000522C(&qword_100117B90, &qword_100117B88, (uint64_t)&protocol conformance descriptor for [A]);
  v15 = sub_100025570();
  return ForEach<>.init(_:id:content:)(&v18, KeyPath, sub_100025920, v11, v12, v13, v14, &protocol witness table for String, v15);
}

_QWORD *sub_100023738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  double (*v23)();
  uint64_t v24;

  v4 = type metadata accessor for AddToPlaylistView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_1000256EC(a1, (uint64_t)v19);
  sub_10000B340(a2, (uint64_t)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddToPlaylistView);
  sub_1000256EC(a1, (uint64_t)v17);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = (v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_100109998, v9 + 40, v7 | 7);
  sub_10002515C((uint64_t)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v10 + v8);
  v11 = v10 + v9;
  v12 = v17[1];
  *(_OWORD *)v11 = v17[0];
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = v18;
  v21[0] = v19[0];
  v21[1] = v19[1];
  v22 = v20;
  v23 = sub_100025A44;
  v24 = v10;
  if (qword_100116120 != -1)
    swift_once(&qword_100116120, sub_100080234);
  v13 = qword_100124650;
  v14 = *(_QWORD *)algn_100124658;
  v15 = sub_1000255F4();
  View.accessibilityIdentifier(_:)(v13, v14, &type metadata for PlaylistCellView, v15);
  return sub_100025740(v21);
}

double sub_1000238B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  double result;
  uint64_t v30;

  v8 = type metadata accessor for AddToPlaylistView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2[3];
  v16 = a2[4];
  sub_10000C9C8(a2, v15);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  v19 = v18;
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v14, 1, 1, v20);
  sub_10000B340(a1, (uint64_t)v11, type metadata accessor for AddToPlaylistView);
  type metadata accessor for MainActor(0);
  v21 = swift_bridgeObjectRetain(v19);
  v22 = static MainActor.shared.getter(v21);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(a3, v25 + 16, v23 | 7);
  *(_QWORD *)(v26 + 16) = v22;
  *(_QWORD *)(v26 + 24) = &protocol witness table for MainActor;
  sub_10002515C((uint64_t)v11, v26 + v24);
  v27 = (uint64_t *)(v26 + v25);
  *v27 = v17;
  v27[1] = v19;
  v28 = sub_1000A9F18((uint64_t)v14, a4, v26);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)&result = swift_release(v28).n128_u64[0];
  return result;
}

uint64_t sub_100023A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = a4;
  v7 = type metadata accessor for AddToPlaylistView(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_100004F7C(&qword_100117A60);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(a1, (uint64_t)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AddToPlaylistView);
  v14 = *(unsigned __int8 *)(v8 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(a2, v15 + v9, v14 | 7);
  sub_10002515C((uint64_t)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  Button.init(action:label:)(a3, v16, sub_100023C58, 0, &type metadata for Text, &protocol witness table for Text);
  v17 = sub_10000522C(&qword_100117A58, &qword_100117A60, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(0xD000000000000016, 0x80000001000DA110, v10, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

double sub_100023BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(__n128);
  __n128 v4;
  double result;
  uint64_t v6;

  v0 = sub_100004F7C(&qword_1001179F8);
  State.wrappedValue.getter(&v6, v0);
  v1 = v6;
  v3 = *(void (**)(__n128))(v6 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler);
  v2 = *(_QWORD *)(v6 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler + 8);
  swift_retain(v2);
  v4 = swift_release(v1);
  v3(v4);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100023C58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x80000001000DA130);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100023CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[11] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[12] = v8;
  v6[13] = v9;
  return swift_task_switch(sub_100023D3C, v8, v9);
}

uint64_t sub_100023D3C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(__n128);
  __n128 v8;
  _QWORD *v9;

  v1 = (uint64_t *)v0[8];
  v2 = *v1;
  v3 = v1[1];
  v0[2] = *v1;
  v0[3] = v3;
  v4 = sub_100004F7C(&qword_1001179F8);
  State.wrappedValue.getter(v0 + 6, v4);
  v5 = v0[6];
  v7 = *(void (**)(__n128))(v5 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler);
  v6 = *(_QWORD *)(v5 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler + 8);
  swift_retain(v6);
  v8 = swift_release(v5);
  v7(v8);
  swift_release(v6);
  v0[4] = v2;
  v0[5] = v3;
  State.wrappedValue.getter(v0 + 7, v4);
  v0[14] = v0[7];
  v9 = (_QWORD *)swift_task_alloc(dword_100119284);
  v0[15] = v9;
  *v9 = v0;
  v9[1] = sub_100023E2C;
  return sub_100055020(v0[9], v0[10]);
}

uint64_t sub_100023E2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_release(v2);
  return swift_task_switch(sub_100023E80, *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104));
}

uint64_t sub_100023E80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100023EB4()
{
  qword_100117918 = 0x4014000000000000;
}

void sub_100023EC4()
{
  strcpy((char *)&qword_100117920, "person.2.fill");
  *(_WORD *)&algn_100117928[6] = -4864;
}

uint64_t sub_100023EF4()
{
  id v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  result = Color.init(uiColor:)(v0);
  qword_100117930 = result;
  return result;
}

uint64_t sub_100023F30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_QWORD *)a2 = static VerticalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v4 = sub_100004F7C(&qword_100117BC0);
  return sub_100023F7C(a1, a2 + *(int *)(v4 + 44));
}

uint64_t sub_100023F7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;

  v4 = sub_100004F7C(&qword_100117BC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_100117BD0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v36 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v36 - v15;
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v14);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v17 = sub_100004F7C(&qword_100117BD8);
  v18 = sub_100024278(a1, (uint64_t)&v6[*(int *)(v17 + 44)]);
  v19 = static Alignment.leading.getter(v18);
  sub_100033DB8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v19, v20);
  sub_10000526C((uint64_t)v6, &qword_100117BC8);
  sub_100007C48((uint64_t)v13, (uint64_t)v16, &qword_100117BD0);
  v21 = a1[3];
  v22 = a1[4];
  sub_10000C9C8(a1, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
  v24 = 0;
  KeyPath = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if ((v23 & 1) != 0)
  {
    if (qword_100115E58 != -1)
      swift_once(&qword_100115E58, sub_100023EC4);
    v29 = qword_100117920;
    v30 = *(_QWORD *)algn_100117928;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100117928);
    v24 = Image.init(systemName:)(v29, v30);
    if (qword_100115E60 != -1)
      swift_once(&qword_100115E60, sub_100023EF4);
    v26 = qword_100117930;
    KeyPath = swift_getKeyPath(&unk_1000D2CD8, v31);
    v32 = swift_retain(v26);
    v28 = static Font.caption2.getter(v32);
    v27 = swift_getKeyPath(&unk_1000D2D08, v33);
  }
  sub_100007C8C((uint64_t)v16, (uint64_t)v10, &qword_100117BD0);
  sub_100007C8C((uint64_t)v10, a2, &qword_100117BD0);
  v34 = (uint64_t *)(a2 + *(int *)(sub_100004F7C(&qword_100117BE0) + 48));
  *v34 = v24;
  v34[1] = KeyPath;
  v34[2] = v26;
  v34[3] = v27;
  v34[4] = v28;
  sub_10002607C(v24, KeyPath, v26, v27, v28);
  sub_10000526C((uint64_t)v16, &qword_100117BD0);
  sub_1000260D8(v24, KeyPath, v26, v27, v28);
  return sub_10000526C((uint64_t)v10, &qword_100117BD0);
}

uint64_t sub_100024278@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;

  v47 = a2;
  v45 = sub_100004F7C(&qword_100117BE8);
  __chkstk_darwin(v45);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_100004F7C(&qword_100117BF0);
  v8 = __chkstk_darwin(v44);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v46 = (uint64_t)&v40 - v11;
  v12 = a1[3];
  v13 = a1[4];
  sub_10000C9C8(a1, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
  v15 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v49, 0x4050800000000000, 0, 0x4050800000000000, 0, v15, v16);
  v17 = v49;
  v18 = v50;
  v43 = v51;
  v42 = v52;
  v40 = v54;
  v41 = v53;
  if (qword_100115E50 != -1)
    swift_once(&qword_100115E50, sub_100023EB4);
  v19 = qword_100117918;
  v20 = (char *)v7 + *(int *)(v5 + 20);
  v21 = enum case for RoundedCornerStyle.continuous(_:);
  v22 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
  *v7 = v19;
  v7[1] = v19;
  sub_10000B340((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v4[*(int *)(v45 + 36)] = 256;
  sub_100007C8C((uint64_t)v4, (uint64_t)&v10[*(int *)(v44 + 36)], &qword_100117BE8);
  *(_QWORD *)v10 = v14;
  *((_QWORD *)v10 + 1) = v17;
  v10[16] = v18;
  *((_QWORD *)v10 + 3) = v43;
  v10[32] = v42;
  v23 = v40;
  *((_QWORD *)v10 + 5) = v41;
  *((_QWORD *)v10 + 6) = v23;
  swift_retain(v14);
  sub_10000526C((uint64_t)v4, &qword_100117BE8);
  sub_10000B600((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  swift_release(v14);
  v24 = v46;
  sub_100007C48((uint64_t)v10, v46, &qword_100117BF0);
  v25 = a1[3];
  v26 = a1[4];
  sub_10000C9C8(a1, v25);
  v48[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
  v48[1] = v27;
  v28 = sub_10000B110();
  v29 = Text.init<A>(_:)(v48, &type metadata for String, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  KeyPath = swift_getKeyPath(&unk_1000D2D38, v30);
  sub_100007C8C(v24, (uint64_t)v10, &qword_100117BF0);
  v37 = v47;
  sub_100007C8C((uint64_t)v10, v47, &qword_100117BF0);
  v38 = v37 + *(int *)(sub_100004F7C(&qword_100117BF8) + 48);
  *(_QWORD *)v38 = v29;
  *(_QWORD *)(v38 + 8) = v31;
  *(_BYTE *)(v38 + 16) = v35;
  *(_QWORD *)(v38 + 24) = v33;
  *(_QWORD *)(v38 + 32) = KeyPath;
  *(_QWORD *)(v38 + 40) = 2;
  *(_BYTE *)(v38 + 48) = 0;
  sub_100025480(v29, v31, v35);
  swift_bridgeObjectRetain(v33);
  swift_retain(KeyPath);
  sub_10000526C(v24, &qword_100117BF0);
  sub_10000B64C(v29, v31, v35);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v33);
  return sub_10000526C((uint64_t)v10, &qword_100117BF0);
}

uint64_t sub_100024630()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[3];
  uint64_t v9;

  sub_100025FD8(v0, (uint64_t)v8);
  v1 = swift_allocObject(&unk_100109A68, 72, 7);
  v2 = v8[1];
  *(_OWORD *)(v1 + 16) = v8[0];
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = v8[2];
  *(_QWORD *)(v1 + 64) = v9;
  v7 = v0;
  v3 = sub_100004F7C(&qword_100117BB0);
  v4 = sub_10000522C(&qword_100117BB8, &qword_100117BB0, (uint64_t)&protocol conformance descriptor for HStack<A>);
  return Button.init(action:label:)(sub_100026054, v1, sub_100026074, &v6, v3, v4);
}

uint64_t sub_1000246F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t *v7;
  _QWORD v9[3];

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D2C20, a2);
  v9[0] = v4;
  v6 = sub_100004864((unint64_t *)&qword_100117A00, type metadata accessor for AddToPlaylistViewModel, (uint64_t)&unk_1000D3F58);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = (uint64_t *)(v4 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state);
  swift_beginAccess(v4 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state, v9, 0, 0);
  return sub_100024E88(v7, a3);
}

unint64_t *sub_1000247A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;
  unint64_t v10[6];

  sub_100024E88(a1, (uint64_t)v10);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D2C20, v4);
  v8[2] = v3;
  v8[3] = v10;
  v9 = v3;
  v6 = sub_100004864((unint64_t *)&qword_100117A00, type metadata accessor for AddToPlaylistViewModel, (uint64_t)&unk_1000D3F58);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100025C4C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return sub_100025C64(v10);
}

uint64_t *sub_100024864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = a2[1];
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    swift_retain(v5);
    swift_retain(v6);
    v10 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
    {
      v11 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, v9, v11);
      v12 = v8;
      v13 = v10;
      v14 = 1;
    }
    else
    {
      v15 = *v9;
      *v8 = *v9;
      swift_retain(v15);
      v12 = v8;
      v13 = v10;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

double sub_100024948(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v5 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v4).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000249C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = (uint64_t *)((char *)a2 + v6);
  swift_retain(v4);
  swift_retain(v5);
  v9 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v7, v8, v10);
    v11 = 1;
  }
  else
  {
    v12 = *v8;
    *v7 = *v8;
    swift_retain(v12);
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v7, v9, v11);
  return a1;
}

uint64_t *sub_100024A78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000526C((uint64_t)a1 + v10, &qword_1001166A0);
    v13 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  return a1;
}

_OWORD *sub_100024B64(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload(v5, v7, 1);
  }
  else
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100024C0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000526C((uint64_t)a1 + v8, &qword_1001166A0);
    v11 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100024CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100024CF8);
}

uint64_t sub_100024CF8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004F7C(&qword_100116768);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100024D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100024D84);
}

char *sub_100024D84(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_100004F7C(&qword_100116768);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_100024DFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_1000D2BB8;
  sub_1000090FC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100024E70(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD8A4, 1);
}

uint64_t sub_100024E88(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for AddToPlaylistViewModel.State(a2, a1);
  return a2;
}

unint64_t sub_100024EC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  result = qword_100117A10;
  if (!qword_100117A10)
  {
    v1 = sub_1000050C8(&qword_1001179F0);
    sub_100024FF4();
    v2 = sub_1000050C8(&qword_100117A28);
    v3 = sub_1000050C8(&qword_100117A30);
    v4 = sub_1000050C8(&qword_100117A38);
    v8 = sub_1000050C8(&qword_100117A40);
    v9 = sub_10000522C(&qword_100117A48, &qword_100117A40, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v7 = sub_1000250BC();
    v8 = v2;
    v9 = v3;
    v10 = v6;
    v11 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117A10);
  }
  return result;
}

unint64_t sub_100024FF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117A18;
  if (!qword_100117A18)
  {
    v1 = sub_1000050C8(&qword_1001179D8);
    sub_100025078();
    sub_100004864(&qword_1001165D8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117A18);
  }
  return result;
}

unint64_t sub_100025078()
{
  unint64_t result;

  result = qword_100117A20;
  if (!qword_100117A20)
  {
    result = swift_getWitnessTable(&unk_1000D3BC0, &type metadata for LoadingView);
    atomic_store(result, (unint64_t *)&qword_100117A20);
  }
  return result;
}

unint64_t sub_1000250BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117A50;
  if (!qword_100117A50)
  {
    v1 = sub_1000050C8(&qword_100117A30);
    sub_10000522C(&qword_100117A58, &qword_100117A60, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117A50);
  }
  return result;
}

uint64_t sub_10002515C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AddToPlaylistView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000251A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AddToPlaylistView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100117A94);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100010C20;
  return sub_100021B44(v3);
}

uint64_t sub_100025204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100022730(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10002520C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117AA8;
  if (!qword_100117AA8)
  {
    v1 = sub_1000050C8(&qword_100117AA0);
    sub_10000522C(&qword_100117AB0, &qword_100117AB8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000522C(&qword_100116548, &qword_100116550, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117AA8);
  }
  return result;
}

uint64_t sub_1000252A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100023A58(*(_QWORD *)(v1 + 16), (uint64_t)&unk_1001098A8, (uint64_t)sub_1000252D4, a1);
}

uint64_t sub_1000252D4()
{
  return sub_1000254C8((uint64_t (*)(uint64_t))sub_100023BDC);
}

uint64_t sub_1000252E4()
{
  return sub_1000254C8((uint64_t (*)(uint64_t))sub_1000228A8);
}

unint64_t sub_1000252F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117AC8;
  if (!qword_100117AC8)
  {
    v1 = sub_1000050C8(&qword_100117AC0);
    sub_100025374();
    sub_10000522C(&qword_100117AF0, &qword_100117AF8, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117AC8);
  }
  return result;
}

unint64_t sub_100025374()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117AD0;
  if (!qword_100117AD0)
  {
    v1 = sub_1000050C8(&qword_100117AD8);
    sub_1000253E0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117AD0);
  }
  return result;
}

unint64_t sub_1000253E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117AE0;
  if (!qword_100117AE0)
  {
    v1 = sub_1000050C8(&qword_100117AE8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117AE0);
  }
  return result;
}

uint64_t sub_100025444(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_100025480(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_100025480(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100025490@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100022D20(*(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), a1);
}

uint64_t sub_10002549C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100023A58(*(_QWORD *)(v1 + 16), (uint64_t)&unk_1001098F8, (uint64_t)sub_1000252D4, a1);
}

uint64_t sub_1000254C8(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AddToPlaylistView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100025504()
{
  uint64_t v0;

  return sub_1000235E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_10002550C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117B40;
  if (!qword_100117B40)
  {
    v1 = sub_1000050C8(&qword_100117B38);
    sub_100025570();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100117B40);
  }
  return result;
}

unint64_t sub_100025570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117B48;
  if (!qword_100117B48)
  {
    v1 = sub_1000050C8(&qword_100117B50);
    sub_1000255F4();
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117B48);
  }
  return result;
}

unint64_t sub_1000255F4()
{
  unint64_t result;

  result = qword_100117B58;
  if (!qword_100117B58)
  {
    result = swift_getWitnessTable(&unk_1000D2C84, &type metadata for PlaylistCellView);
    atomic_store(result, (unint64_t *)&qword_100117B58);
  }
  return result;
}

_QWORD *sub_100025638()
{
  uint64_t v0;

  return sub_10002348C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100025640(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000050C8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_1000256B8(_QWORD *a1)
{
  destroy for AnyPlaylist(a1);
  return a1;
}

uint64_t sub_1000256EC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnyPlaylist(a2, a1);
  return a2;
}

double sub_10002572C()
{
  return sub_100025A58((uint64_t)&unk_100109948, (uint64_t)&unk_100117B80);
}

_QWORD *sub_100025740(_QWORD *a1)
{
  _s16MusicRecognition11AnyPlaylistVwxx_0(a1);
  swift_release(a1[6]);
  return a1;
}

uint64_t sub_100025770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for AddToPlaylistView(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_100117B7C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100010C20;
  return sub_100023CCC(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10002581C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000C9C8(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100025868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AddToPlaylistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

_QWORD *sub_100025920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AddToPlaylistView(0) - 8) + 80);
  return sub_100023738(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100025970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for AddToPlaylistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 40;
  _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, v10, v3 | 7);
}

double sub_100025A44()
{
  return sub_100025A58((uint64_t)&unk_1001099C0, (uint64_t)&unk_100117B98);
}

double sub_100025A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for AddToPlaylistView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1000238B0(v2 + v6, (_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8)), a1, a2);
}

uint64_t sub_100025AC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for AddToPlaylistView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 8));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 20));
  v7 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v10, v3 | 7);
}

uint64_t sub_100025BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for AddToPlaylistView(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_100117B7C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000101B8;
  return sub_100023CCC(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_100025C4C()
{
  uint64_t v0;

  return sub_1000553C8(*(_QWORD *)(v0 + 16), *(__int128 **)(v0 + 24));
}

unint64_t *sub_100025C64(unint64_t *a1)
{
  destroy for AddToPlaylistViewModel.State(a1);
  return a1;
}

double destroy for PlaylistCellView(_QWORD *a1)
{
  double result;

  _s16MusicRecognition11AnyPlaylistVwxx_0(a1);
  *(_QWORD *)&result = swift_release(a1[6]).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for PlaylistCellView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain(v5);
  return a1;
}

_QWORD *assignWithCopy for PlaylistCellView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100012EA4(a1, a2);
  v5 = a2[5];
  v4 = a2[6];
  v6 = a1[6];
  a1[5] = v5;
  a1[6] = v4;
  swift_retain(v4);
  swift_release(v6);
  return a1;
}

__n128 initializeWithTake for PlaylistCellView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PlaylistCellView(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlaylistCellView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaylistCellView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlaylistCellView()
{
  return &type metadata for PlaylistCellView;
}

unint64_t sub_100025E50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  result = qword_100117BA0;
  if (!qword_100117BA0)
  {
    v1 = sub_1000050C8(&qword_100117BA8);
    sub_100024EC4();
    v2 = sub_1000050C8(&qword_100117A68);
    v3 = sub_1000050C8(&qword_100117A30);
    v4 = sub_1000050C8(&qword_100117A70);
    v5 = sub_1000050C8(&qword_100117A78);
    v10 = sub_1000050C8(&qword_100117A80);
    v11 = type metadata accessor for InsetListStyle(255);
    v12 = sub_10000522C(&qword_100117A88, &qword_100117A80, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v13 = &protocol witness table for InsetListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v10 = v5;
    v11 = OpaqueTypeConformance2;
    v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v10 = v4;
    v11 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v9 = sub_1000250BC();
    v10 = v2;
    v11 = v3;
    v12 = v8;
    v13 = (void *)v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117BA0);
  }
  return result;
}

uint64_t sub_100025FC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DD8CC, 1);
}

uint64_t sub_100025FD8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v5;
  swift_retain(v5);
  return a2;
}

uint64_t sub_100026028()
{
  uint64_t v0;

  _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100026054()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t sub_100026074@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100023F30(*(_QWORD **)(v1 + 16), a1);
}

uint64_t sub_10002607C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  if (result)
  {
    v8 = result;
    swift_retain(a5);
    swift_retain(v8);
    swift_retain(a2);
    swift_retain(a3);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_1000260D8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_release(result);
    swift_release(a2);
    swift_release(a4);
    swift_release(a3);
    return swift_release(a5);
  }
  return result;
}

uint64_t sub_100026148()
{
  return sub_10000522C(&qword_100117C00, qword_100117C08, (uint64_t)&protocol conformance descriptor for Button<A>);
}

uint64_t sub_100026178@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a7;
  v30 = a1;
  v31 = a6;
  v29 = a2;
  v32 = a9;
  v33 = a10;
  v15 = *(_QWORD *)(a8 - 8);
  __chkstk_darwin(a1);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LibraryItemContextMenu(0, v19, a11, v18);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v28 - v22;
  type metadata accessor for LibraryItemContextMenuModel(0, a8, a11, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v29, a8);
  v25 = sub_1000C698C((uint64_t)v30, (uint64_t)v17);
  sub_100011F44(a3, a4);
  v26 = v31;
  sub_100011F44(a5, v31);
  sub_1000262F0(v25, a3, a4, a5, v26, (uint64_t)v23);
  View.modifier<A>(_:)(v23, v34, v20, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
}

uint64_t type metadata accessor for LibraryItemContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LibraryItemContextMenu);
}

uint64_t sub_1000262F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v12 = *a1;
  WitnessTable = swift_getWitnessTable(&unk_1000D87B8, *a1);
  Bindable<A>.init(wrappedValue:)(a1, v12, WitnessTable);
  v15 = (int *)type metadata accessor for LibraryItemContextMenu(0, *(_QWORD *)(v12 + 80), *(_QWORD *)(v12 + 88), v14);
  v16 = (_QWORD *)(a6 + v15[9]);
  *v16 = a2;
  v16[1] = a3;
  v17 = (_QWORD *)(a6 + v15[10]);
  *v17 = a4;
  v17[1] = a5;
  v18 = a6 + v15[11];
  result = swift_getKeyPath(&unk_1000D2D90, v19);
  *(_QWORD *)v18 = result;
  *(_BYTE *)(v18 + 8) = 0;
  return result;
}

uint64_t sub_1000263A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_1000263B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD v8[4];

  v5 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  result = type metadata accessor for Bindable(319, v5);
  if (v7 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(result - 8) + 64;
    v8[1] = &unk_1000D2DD8;
    v8[2] = &unk_1000D2DD8;
    v8[3] = &unk_1000D2DF0;
    swift_initStructMetadata(a1, 0, 4, v8, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10002643C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v6 + 16) & ~(unint64_t)v6));
  }
  else
  {
    v8 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
    v9 = type metadata accessor for Bindable(0, v8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(a3 + 36);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    if (*v12)
    {
      v13 = v12[1];
      *v11 = *v12;
      v11[1] = v13;
      swift_retain(v13);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
    }
    v15 = *(int *)(a3 + 40);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    if (*v17)
    {
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      swift_retain(v18);
    }
    else
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    v19 = *(int *)(a3 + 44);
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v14 = *(_QWORD *)v21;
    LOBYTE(v21) = v21[8];
    *(_QWORD *)v20 = v14;
    v20[8] = (char)v21;
  }
  swift_retain(v14);
  return a1;
}

double sub_10002653C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double result;

  v6 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = type metadata accessor for Bindable(0, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 36));
  if (*v8)
    swift_release(v8[1]);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 40));
  if (*v9)
    swift_release(v9[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44))).n128_u64[0];
  return result;
}

uint64_t sub_1000265C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v7 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  if (*v11)
  {
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    swift_retain(v12);
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  v13 = *(int *)(a3 + 40);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  if (*v15)
  {
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    swift_retain(v16);
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  v17 = *(int *)(a3 + 44);
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  LOBYTE(v19) = *((_BYTE *)v19 + 8);
  *(_QWORD *)v18 = v20;
  *(_BYTE *)(v18 + 8) = (_BYTE)v19;
  swift_retain(v20);
  return a1;
}

uint64_t sub_10002669C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v7 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  v13 = *(_QWORD *)(a2 + v9);
  if (v12)
  {
    if (v13)
    {
      v14 = *(_QWORD *)(v11 + 8);
      v15 = v10[1];
      *v10 = v13;
      v10[1] = v14;
      swift_retain(v14);
      swift_release(v15);
      goto LABEL_8;
    }
    swift_release(v10[1]);
  }
  else if (v13)
  {
    v16 = *(_QWORD *)(v11 + 8);
    *v10 = v13;
    v10[1] = v16;
    swift_retain(v16);
    goto LABEL_8;
  }
  *(_OWORD *)v10 = *(_OWORD *)v11;
LABEL_8:
  v17 = *(int *)(a3 + 40);
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  if (!v20)
  {
    if (v21)
    {
      v24 = *(_QWORD *)(v19 + 8);
      *v18 = v21;
      v18[1] = v24;
      swift_retain(v24);
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_15;
  }
  if (!v21)
  {
    swift_release(v18[1]);
    goto LABEL_14;
  }
  v22 = *(_QWORD *)(v19 + 8);
  v23 = v18[1];
  *v18 = v21;
  v18[1] = v22;
  swift_retain(v22);
  swift_release(v23);
LABEL_15:
  v25 = *(int *)(a3 + 44);
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = *v27;
  LOBYTE(v27) = *((_BYTE *)v27 + 8);
  v29 = *v26;
  *v26 = v28;
  *((_BYTE *)v26 + 8) = (_BYTE)v27;
  swift_retain(v28);
  swift_release(v29);
  return a1;
}

uint64_t sub_1000267E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = *v11;
  if (*v11)
  {
    v13 = v11[1];
    *v10 = v12;
    v10[1] = v13;
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  v14 = *(int *)(a3 + 40);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  if (*v16)
  {
    v18 = v16[1];
    *v15 = v17;
    v15[1] = v18;
  }
  else
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  v19 = *(int *)(a3 + 44);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  return a1;
}

uint64_t sub_1000268B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v7 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 36);
  v10 = (_QWORD *)(a1 + v9);
  v11 = a2 + v9;
  v12 = *(_QWORD *)(a1 + v9);
  v13 = *(_QWORD *)(a2 + v9);
  if (v12)
  {
    if (v13)
    {
      v14 = *(_QWORD *)(v11 + 8);
      v15 = v10[1];
      *v10 = v13;
      v10[1] = v14;
      swift_release(v15);
      goto LABEL_8;
    }
    swift_release(v10[1]);
  }
  else if (v13)
  {
    v16 = *(_QWORD *)(v11 + 8);
    *v10 = v13;
    v10[1] = v16;
    goto LABEL_8;
  }
  *(_OWORD *)v10 = *(_OWORD *)v11;
LABEL_8:
  v17 = *(int *)(a3 + 40);
  v18 = (_QWORD *)(a1 + v17);
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a2 + v17);
  if (!v20)
  {
    if (v21)
    {
      v24 = *(_QWORD *)(v19 + 8);
      *v18 = v21;
      v18[1] = v24;
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_15;
  }
  if (!v21)
  {
    swift_release(v18[1]);
    goto LABEL_14;
  }
  v22 = *(_QWORD *)(v19 + 8);
  v23 = v18[1];
  *v18 = v21;
  v18[1] = v22;
  swift_release(v23);
LABEL_15:
  v25 = *(int *)(a3 + 44);
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = *v27;
  LOBYTE(v27) = *((_BYTE *)v27 + 8);
  v29 = *v26;
  *v26 = v28;
  *((_BYTE *)v26 + 8) = (_BYTE)v27;
  swift_release(v29);
  return a1;
}

uint64_t sub_1000269E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000269EC);
}

uint64_t sub_1000269EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  int v12;

  v7 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, a2, v8);
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  v12 = v11 - 1;
  if (v12 < 0)
    v12 = -1;
  return (v12 + 1);
}

uint64_t sub_100026A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100026A90);
}

uint64_t sub_100026A90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), a4);
  result = type metadata accessor for Bindable(0, v8);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = a2;
  return result;
}

uint64_t sub_100026B18(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000DD978, 1);
}

uint64_t sub_100026B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for LibraryItemContextMenuModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_100026B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  ValueMetadata *v41;
  ValueMetadata *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v26 = a1;
  v27 = a3;
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, a2);
  v6 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v24 = sub_1000050C8(&qword_100117C90);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v6);
  v8 = sub_1000272E0();
  v40 = v6;
  v41 = &type metadata for ContextMenuContent;
  v42 = &type metadata for LibraryItemPreview;
  v43 = v24;
  v44 = v7;
  v45 = v8;
  v46 = sub_100027324();
  v47 = sub_100027368();
  v9 = v46;
  v22 = v46;
  v10 = v47;
  v23 = v47;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v40, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)>>, 0);
  v25 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v12 = __chkstk_darwin(OpaqueTypeMetadata2);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v22 - v15;
  v17 = *(_QWORD *)(a2 + 24);
  v37 = *(_QWORD *)(a2 + 16);
  v38 = v17;
  v39 = v3;
  v33 = v37;
  v34 = v17;
  v35 = v3;
  v29 = v37;
  v30 = v17;
  v31 = v3;
  v18 = swift_checkMetadataState(0, v6);
  v19 = v24;
  View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)(sub_1000273B4, v36, sub_1000273C0, v32, sub_1000273CC, v28, v18, &type metadata for ContextMenuContent, &type metadata for LibraryItemPreview, v24, v7, v8, v9, v10);
  v40 = v18;
  v41 = &type metadata for ContextMenuContent;
  v42 = &type metadata for LibraryItemPreview;
  v43 = v19;
  v44 = v7;
  v45 = v8;
  v46 = v22;
  v47 = v23;
  swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)>>, 1);
  sub_100093E10((uint64_t)v14, OpaqueTypeMetadata2, (uint64_t)v16);
  v20 = *(void (**)(char *, uint64_t))(v25 + 8);
  v20(v14, OpaqueTypeMetadata2);
  sub_100091208((uint64_t)v16, OpaqueTypeMetadata2, v27);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, OpaqueTypeMetadata2);
}

void sub_100026E10(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = type metadata accessor for LibraryItemContextMenu(0, a1, a2, a3);
  v9 = sub_100026B4C(v5, v6, v7, v8);
  v10 = sub_1000C6A00(v9);
  swift_release(v9);
  *a4 = v10;
}

uint64_t sub_100026E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for LibraryItemContextMenu(0, a2, a3, a4);
  v11 = sub_100026B4C(v7, v8, v9, v10);
  v12 = *(id *)(v11 + 16);
  swift_release(v11);
  v13 = (uint64_t *)(a1 + *(int *)(v7 + 36));
  v14 = *v13;
  v15 = v13[1];
  *a5 = v12;
  a5[1] = v14;
  a5[2] = v15;
  return sub_100011F44(v14, v15);
}

uint64_t sub_100026EC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v9 = type metadata accessor for LibraryItemContextMenu(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v18 - v12, a1, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(&unk_100109B40, v15 + v11, v14 | 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, v13, v9);
  *a5 = sub_1000274B8;
  a5[1] = (uint64_t (*)@<X0>(uint64_t@<X3>, uint64_t@<X8>))v16;
  return result;
}

uint64_t sub_100026FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(_BYTE *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[4];
  int v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  _QWORD v51[5];

  v49 = a5;
  v6 = type metadata accessor for LibraryItemContextMenu(0, a2, a3, a4);
  v10 = sub_100026B4C(v6, v7, v8, v9);
  v46 = *(id *)(v10 + 16);
  swift_release(v10);
  v47 = v6;
  v48 = a1;
  v11 = a1 + *(int *)(v6 + 44);
  v12 = sub_10000687C(*(_QWORD *)v11, *(_BYTE *)(v11 + 8));
  KeyPath = swift_getKeyPath(&unk_1000D2E68, v13);
  v51[0] = v12;
  v15 = sub_100027518();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v51, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(_QWORD *)(v12 + 48);
  v45 = *(_QWORD *)(v12 + 40);
  swift_bridgeObjectRetain(v16);
  swift_release(v12);
  v17 = sub_10000687C(*(_QWORD *)v11, *(_BYTE *)(v11 + 8));
  v19 = swift_getKeyPath(&unk_1000D2E90, v18);
  v51[0] = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v51, v19, v15);
  swift_release(v19);
  v44 = *(unsigned __int8 *)(v17 + 56);
  swift_release(v17);
  v20 = sub_10000687C(*(_QWORD *)v11, *(_BYTE *)(v11 + 8));
  v22 = swift_getKeyPath(&unk_1000D2EB8, v21);
  v51[0] = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v51, v22, v15);
  swift_release(v22);
  v23 = *(_BYTE *)(v20 + 16);
  swift_release(v20);
  if (qword_1001162F8 != -1)
    swift_once(&qword_1001162F8, sub_1000AA1F8);
  v24 = 0xB0A0Cu >> (8 * v23);
  v25 = qword_1001247E8;
  v26 = type metadata accessor for MusicSubscriptionStatusController(0);
  v51[3] = v26;
  v51[4] = &off_10010D670;
  v51[0] = v25;
  v27 = sub_1000076F4((uint64_t)v51, v26);
  v28 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64);
  __chkstk_darwin(v27);
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  v31 = *(void (**)(_BYTE *))(v30 + 16);
  v31(&v43[-v29]);
  v32 = *(_QWORD *)&v43[-v29];
  v50[3] = v26;
  v50[4] = &off_10010D670;
  v50[0] = v32;
  v33 = type metadata accessor for TrackPageViewModel(0);
  v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v35 = sub_1000076F4((uint64_t)v50, v26);
  __chkstk_darwin(v35);
  v31(&v43[-v29]);
  v36 = *(_QWORD *)&v43[-v29];
  swift_retain(v25);
  v37 = v46;
  v38 = sub_10000771C(v46, v45, v16, v44, v36, v24, v34);

  _s16MusicRecognition11AnyPlaylistVwxx_0(v50);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v51);
  v39 = (uint64_t *)(v48 + *(int *)(v47 + 40));
  v40 = *v39;
  v41 = v39[1];
  sub_100011F44(*v39, v41);
  return sub_100034C08(v38, v40, v41, v49);
}

uint64_t sub_1000272C4()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

unint64_t sub_1000272E0()
{
  unint64_t result;

  result = qword_100117C98;
  if (!qword_100117C98)
  {
    result = swift_getWitnessTable(&unk_1000D5414, &type metadata for ContextMenuContent);
    atomic_store(result, (unint64_t *)&qword_100117C98);
  }
  return result;
}

unint64_t sub_100027324()
{
  unint64_t result;

  result = qword_100117CA0;
  if (!qword_100117CA0)
  {
    result = swift_getWitnessTable(&unk_1000D4D64, &type metadata for LibraryItemPreview);
    atomic_store(result, (unint64_t *)&qword_100117CA0);
  }
  return result;
}

unint64_t sub_100027368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117CA8;
  if (!qword_100117CA8)
  {
    v1 = sub_1000050C8(&qword_100117C90);
    result = swift_getWitnessTable(&unk_1000D3EC8, v1);
    atomic_store(result, (unint64_t *)&qword_100117CA8);
  }
  return result;
}

void sub_1000273B4(uint64_t a1@<X3>, unint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_100026E10(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_1000273C0@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_100026E5C(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000273CC@<X0>(uint64_t a1@<X3>, uint64_t (**a2)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t *v2;

  return sub_100026EC8(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t sub_1000273D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for LibraryItemContextMenu(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  v14 = type metadata accessor for LibraryItemContextMenuModel(255, v5, v6, v13);
  v15 = type metadata accessor for Bindable(0, v14);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v4 + v10, v15);
  v16 = (_QWORD *)(v4 + v10 + v7[9]);
  if (*v16)
    swift_release(v16[1]);
  v17 = (_QWORD *)(v12 + v7[10]);
  if (*v17)
    swift_release(v17[1]);
  swift_release(*(_QWORD *)(v12 + v7[11]));
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

uint64_t sub_1000274B8@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryItemContextMenu(0, v4, v5, a1) - 8) + 80);
  return sub_100026FA8(v2 + ((v6 + 32) & ~v6), v4, v5, v7, a2);
}

unint64_t sub_100027518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116618;
  if (!qword_100116618)
  {
    v1 = type metadata accessor for ViewConfiguration(255);
    result = swift_getWitnessTable(&unk_1000D6CA4, v1);
    atomic_store(result, (unint64_t *)&qword_100116618);
  }
  return result;
}

uint64_t sub_100027570(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t WitnessTable;
  _QWORD v7[8];

  v4 = type metadata accessor for LibraryItemContextMenu(255, *a1, a1[1], a4);
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v4);
  v7[0] = type metadata accessor for _ViewModifier_Content(255, v4, WitnessTable);
  v7[1] = &type metadata for ContextMenuContent;
  v7[2] = &type metadata for LibraryItemPreview;
  v7[3] = sub_1000050C8(&qword_100117C90);
  v7[4] = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v7[0]);
  v7[5] = sub_1000272E0();
  v7[6] = sub_100027324();
  v7[7] = sub_100027368();
  return swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.contextMenu<A, B, C>(menuItems:preview:previewDestination:)>>, 1);
}

uint64_t sub_100027640(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin(a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin(a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_1000277F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100016EE0();
  *a1 = result & 1;
  return result;
}

double sub_100027820(char *a1)
{
  return sub_100016F38(*a1);
}

uint64_t sub_100027844@<X0>(uint64_t a1@<X8>)
{
  return sub_100016FB4(a1);
}

uint64_t sub_100027864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for NavigationPath(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return sub_10001704C((uint64_t)v4);
}

uint64_t sub_1000278E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  uint64_t v19;

  v14 = __chkstk_darwin(a1);
  v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17(v14);
  return Section<>.init(header:content:)(v16, a1, a2, a5, a6, a7, a8);
}

uint64_t sub_100027998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  Bindable.wrappedValue.getter(&v7, v5);
  return v7;
}

uint64_t sub_1000279E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v5 = type metadata accessor for Bindable(0, v4);
  return Bindable.projectedValue.getter(v5);
}

uint64_t sub_100027A28()
{
  uint64_t v0;
  int v1;
  uint64_t v3;

  v0 = sub_100004F7C(&qword_100117EA0);
  State.wrappedValue.getter(&v3, v0);
  if (BYTE1(v3))
    v1 = 256;
  else
    v1 = 0;
  return v1 | v3;
}

uint64_t sub_100027A98(__int16 a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  char v10;
  char v11;
  uint64_t v12;

  v3 = (char *)(v2 + *(int *)(a2 + 44));
  v4 = *v3;
  v5 = v3[1];
  v6 = *((_QWORD *)v3 + 1);
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v9 = a1 & 0x1FF;
  v7 = sub_100004F7C(&qword_100117EA0);
  return State.wrappedValue.setter(&v9, v7);
}

uint64_t sub_100027B00()
{
  uint64_t v1;

  sub_100004F7C(&qword_100117EA0);
  State.projectedValue.getter(&v1);
  return v1;
}

void sub_100027B74(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int16 v7;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int16 v21;
  _QWORD v22[2];

  v7 = a2;
  v10 = *a1;
  *(_QWORD *)a5 = swift_getKeyPath(&unk_1000D2F20, a2);
  *(_BYTE *)(a5 + 8) = 0;
  v12 = (int *)type metadata accessor for LibraryListView(0, *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), v11);
  v13 = (_QWORD *)(a5 + v12[9]);
  *v13 = swift_getKeyPath(&unk_1000D2F48, v14);
  v15 = sub_100004F7C(&qword_100116680);
  swift_storeEnumTagMultiPayload(v13, v15, 0);
  v16 = *a1;
  swift_retain(a1);
  WitnessTable = swift_getWitnessTable(&unk_1000D2440, v16);
  Bindable<A>.init(wrappedValue:)(a1, v16, WitnessTable);
  v18 = a5 + v12[11];
  v21 = v7 & 0x1FF;
  State.init(wrappedValue:)(v22, &v21, &type metadata for HistorySortSelection);
  LOBYTE(v7) = v22[0];
  LOBYTE(v16) = BYTE1(v22[0]);
  v19 = v22[1];
  swift_release(a1);
  *(_BYTE *)v18 = v7;
  *(_BYTE *)(v18 + 1) = v16;
  *(_QWORD *)(v18 + 8) = v19;
  v20 = (_QWORD *)(a5 + v12[12]);
  *v20 = a3;
  v20[1] = a4;
}

uint64_t type metadata accessor for LibraryListView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LibraryListView);
}

uint64_t sub_100027CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t TupleTypeMetadata3;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t KeyPath;
  _QWORD *v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  unsigned __int16 v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  __n128 v137;
  _QWORD *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  char *v145;
  void *v146;
  ValueMetadata *v147;
  void *v148;
  void *v149;
  char *v150;
  __n128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201[8];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD v205[7];
  void *v206;
  ValueMetadata *v207;
  void *v208;
  void *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;

  v190 = a2;
  v199 = type metadata accessor for ScenePhase(0);
  v189 = *(_QWORD *)(v199 - 8);
  v3 = __chkstk_darwin(v199);
  v188 = (uint64_t *)((char *)&v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v191 = *(_QWORD *)(a1 - 8);
  v193 = *(_QWORD *)(v191 + 64);
  __chkstk_darwin(v3);
  v187 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100117DA0);
  __chkstk_darwin(v6);
  v192 = (uint64_t *)((char *)&v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v184 = a1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v197 = v9;
  v200 = v8;
  v11 = type metadata accessor for LibraryListViewModel(255, v9, v8, v10);
  v185 = type metadata accessor for Bindable(0, v11);
  v186 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (char *)&v163 - v12;
  v196 = (char *)type metadata accessor for NavigationPath(255);
  v195 = (char *)sub_1000050C8(&qword_100117DA8);
  v194 = (char *)sub_1000050C8(&qword_100117DB0);
  v182 = sub_1000050C8(&qword_100117DB8);
  v181 = sub_1000050C8(&qword_100117DC0);
  v180 = sub_1000050C8(&qword_100117508);
  v13 = type metadata accessor for UUID(255);
  v15 = type metadata accessor for LibraryItemContextMenu(255, v9, v8, v14);
  v16 = type metadata accessor for ModifiedContent(255, &type metadata for LibraryItemView, v15);
  v17 = sub_100031218();
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v15);
  v222 = v17;
  v223 = WitnessTable;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v20 = type metadata accessor for Button(255, v16, v19);
  v21 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v22 = type metadata accessor for ModifiedContent(255, v20, v21);
  v23 = sub_1000050C8(&qword_100116EE8);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v20);
  v25 = sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v220 = v24;
  v221 = v25;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v27 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v206 = (void *)v22;
  v207 = (ValueMetadata *)v23;
  v208 = (void *)v26;
  v209 = (void *)v27;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v29 = sub_1000050C8(&qword_100117DD0);
  v30 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v29);
  v31 = sub_1000050C8(&qword_100117DD8);
  v206 = (void *)v22;
  v207 = (ValueMetadata *)v23;
  v208 = (void *)v26;
  v209 = (void *)v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v33 = sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v218 = OpaqueTypeConformance2;
  v219 = v33;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v35 = sub_10003125C();
  v206 = (void *)v30;
  v207 = (ValueMetadata *)v31;
  v208 = (void *)v34;
  v209 = (void *)v35;
  v36 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 0);
  v37 = sub_10000522C(&qword_100117E10, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
  v38 = sub_100004864((unint64_t *)&qword_100117E18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v206 = (void *)v180;
  v207 = (ValueMetadata *)v13;
  v208 = (void *)v36;
  v209 = (void *)v37;
  v210 = (void *)v38;
  v39 = type metadata accessor for ForEach(255, &v206);
  v40 = type metadata accessor for Section(255, v181, v39, &type metadata for EmptyView);
  v41 = sub_1000050C8(&qword_100117E20);
  v42 = sub_10003137C();
  v206 = (void *)v41;
  v207 = (ValueMetadata *)v42;
  v43 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer()>>, 1);
  v206 = (void *)v30;
  v207 = (ValueMetadata *)v31;
  v208 = (void *)v34;
  v209 = (void *)v35;
  v217 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v39);
  v214 = v43;
  v215 = v44;
  v216 = &protocol witness table for EmptyView;
  v45 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v40);
  v206 = (void *)v40;
  v207 = (ValueMetadata *)v45;
  v46 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 0);
  v47 = sub_1000050C8(&qword_100116550);
  v48 = type metadata accessor for ModifiedContent(255, v46, v47);
  v49 = sub_1000050C8(&qword_100117E40);
  v50 = type metadata accessor for ModifiedContent(255, v48, v49);
  v51 = sub_1000050C8(&qword_100117E48);
  v52 = type metadata accessor for ModifiedContent(255, v50, v51);
  v53 = sub_10000522C(&qword_100117E50, &qword_100117DB8, (uint64_t)&protocol conformance descriptor for [A]);
  v206 = (void *)v182;
  v207 = (ValueMetadata *)&type metadata for String;
  v208 = (void *)v52;
  v209 = (void *)v53;
  v210 = &protocol witness table for String;
  v54 = type metadata accessor for ForEach(255, &v206);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v195, v194, v54, 0, 0);
  v56 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v57 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v56);
  v206 = &type metadata for Never;
  v207 = (ValueMetadata *)v56;
  v208 = &protocol witness table for Never;
  v209 = (void *)v57;
  v58 = type metadata accessor for List(255, &v206);
  v59 = type metadata accessor for ShazamUpsellOverlayModifier(255);
  v60 = type metadata accessor for ModifiedContent(255, v58, v59);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v58);
  v62 = sub_100004864(&qword_100117E58, type metadata accessor for ShazamUpsellOverlayModifier, (uint64_t)&unk_1000D8008);
  v212 = v61;
  v213 = v62;
  v63 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v60);
  v206 = (void *)v60;
  v207 = (ValueMetadata *)v63;
  v64 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v206 = (void *)v60;
  v207 = (ValueMetadata *)v63;
  v65 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v206 = (void *)v64;
  v207 = (ValueMetadata *)v65;
  v66 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v206 = (void *)v64;
  v207 = (ValueMetadata *)v65;
  v67 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v68 = sub_10000B110();
  v206 = (void *)v66;
  v207 = (ValueMetadata *)&type metadata for String;
  v208 = (void *)v67;
  v209 = (void *)v68;
  v69 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 0);
  v206 = (void *)v66;
  v207 = (ValueMetadata *)&type metadata for String;
  v208 = (void *)v67;
  v209 = (void *)v68;
  v70 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
  v206 = (void *)v69;
  v207 = (ValueMetadata *)&type metadata for Bool;
  v208 = (void *)v70;
  v209 = &protocol witness table for Bool;
  v71 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.onScrollGeometryChange<A>(for:of:action:)>>, 0);
  v72 = sub_10001C11C();
  v73 = type metadata accessor for TrackPageView(255);
  v206 = (void *)v69;
  v207 = (ValueMetadata *)&type metadata for Bool;
  v208 = (void *)v70;
  v209 = &protocol witness table for Bool;
  v74 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.onScrollGeometryChange<A>(for:of:action:)>>, 1);
  v75 = sub_100004864(&qword_1001174F8, (uint64_t (*)(uint64_t))sub_10001C11C, (uint64_t)&protocol conformance descriptor for NSObject);
  v76 = sub_100004864(&qword_100116620, type metadata accessor for TrackPageView, (uint64_t)&unk_1000D3458);
  v206 = (void *)v71;
  v207 = (ValueMetadata *)v72;
  v208 = (void *)v73;
  v209 = (void *)v74;
  v210 = (void *)v75;
  v211 = v76;
  v77 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 0);
  v78 = sub_1000050C8(&qword_100117E60);
  v206 = (void *)v71;
  v207 = (ValueMetadata *)v72;
  v208 = (void *)v73;
  v209 = (void *)v74;
  v210 = (void *)v75;
  v211 = v76;
  v79 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  v80 = sub_1000050C8(&qword_100117E68);
  v81 = sub_10000522C(&qword_100117E70, &qword_100117E68, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v206 = (void *)v80;
  v207 = (ValueMetadata *)v81;
  v82 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v206 = (void *)v77;
  v207 = (ValueMetadata *)v78;
  v208 = (void *)v79;
  v209 = (void *)v82;
  v83 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v84 = sub_1000050C8(&qword_100117E78);
  v206 = (void *)v77;
  v207 = (ValueMetadata *)v78;
  v208 = (void *)v79;
  v209 = (void *)v82;
  v85 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v86 = sub_100031484();
  v206 = (void *)v83;
  v207 = (ValueMetadata *)v84;
  v208 = (void *)v85;
  v209 = (void *)v86;
  v87 = swift_getOpaqueTypeMetadata2(255, &v206, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v170 = v87;
  v206 = (void *)v83;
  v207 = (ValueMetadata *)v84;
  v208 = (void *)v85;
  v209 = (void *)v86;
  v169 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v88 = type metadata accessor for NavigationStack(0, v196, v87, v169);
  v174 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v168 = (char *)&v163 - v89;
  v90 = sub_1000050C8(&qword_100116F70);
  v91 = type metadata accessor for ModifiedContent(0, v88, v90);
  v178 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v194 = (char *)&v163 - v92;
  v93 = swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v88);
  v164 = v93;
  v94 = sub_10000522C((unint64_t *)&qword_100116F68, &qword_100116F70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v205[5] = v93;
  v205[6] = v94;
  v95 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v91);
  v96 = sub_10003154C();
  v206 = (void *)v91;
  v207 = &type metadata for HistorySortSelection;
  v165 = v91;
  v208 = (void *)v95;
  v209 = (void *)v96;
  v167 = v95;
  v97 = (void *)v96;
  v166 = v96;
  v98 = swift_getOpaqueTypeMetadata2(0, &v206, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v179 = *(_QWORD *)(v98 - 8);
  v99 = (void *)v98;
  v173 = v98;
  __chkstk_darwin(v98);
  v195 = (char *)&v163 - v100;
  v206 = (void *)v91;
  v207 = &type metadata for HistorySortSelection;
  v208 = (void *)v95;
  v209 = v97;
  v101 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v172 = v101;
  v171 = sub_100004864(&qword_100117E98, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v206 = v99;
  v207 = (ValueMetadata *)v199;
  v208 = (void *)v101;
  v209 = (void *)v171;
  v102 = swift_getOpaqueTypeMetadata2(0, &v206, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v181 = *(_QWORD *)(v102 - 8);
  v176 = v102;
  __chkstk_darwin(v102);
  v196 = (char *)&v163 - v103;
  v180 = type metadata accessor for ModifiedContent(0, v104, &type metadata for _AppearanceActionModifier);
  v182 = *(_QWORD *)(v180 - 8);
  v105 = __chkstk_darwin(v180);
  v175 = (char *)&v163 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v105);
  v177 = (uint64_t)&v163 - v107;
  v108 = v183;
  v109 = v184;
  v110 = v198;
  sub_1000279E4(v184, v111, v112, v113);
  v114 = v197;
  v205[0] = v197;
  v115 = v200;
  v205[1] = v200;
  KeyPath = swift_getKeyPath(&unk_1000D3028, v205);
  v117 = v192;
  v118 = v185;
  Bindable<A>.subscript.getter(v192, KeyPath, v185);
  v119 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v186 + 8))(v108, v118, v119);
  v202 = v114;
  v120 = v114;
  v203 = v115;
  v204 = v110;
  v121 = v168;
  v122 = NavigationStack.init<>(path:root:)(v117, sub_1000315CC, v201, v170, v169);
  v123 = static Color.primary.getter(v122);
  View.tint(_:)(v123, v88, v164);
  v124 = swift_release(v123);
  (*(void (**)(char *, uint64_t, __n128))(v174 + 8))(v121, v88, v124);
  v125 = sub_100027A28();
  LOBYTE(v206) = v125;
  BYTE1(v206) = v125 > 0xFFu;
  v126 = v191;
  v186 = *(_QWORD *)(v191 + 16);
  v127 = v187;
  v128 = v109;
  ((void (*)(char *, uint64_t, uint64_t))v186)(v187, v110, v109);
  v129 = *(unsigned __int8 *)(v126 + 80);
  v130 = v126;
  v131 = (v129 + 32) & ~v129;
  v193 += v131;
  v192 = (_QWORD *)(v129 | 7);
  v132 = swift_allocObject(&unk_100109C08, v193, v129 | 7);
  v133 = v120;
  *(_QWORD *)(v132 + 16) = v120;
  v134 = v200;
  *(_QWORD *)(v132 + 24) = v200;
  v185 = v131;
  v191 = *(_QWORD *)(v130 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v191)(v132 + v131, v127, v128);
  v135 = v165;
  v136 = v194;
  View.onChange<A>(of:initial:_:)(&v206, 0, sub_1000315DC, v132, v165, &type metadata for HistorySortSelection, v167, v166);
  v137 = swift_release(v132);
  (*(void (**)(char *, uint64_t, __n128))(v178 + 8))(v136, v135, v137);
  v138 = v188;
  sub_100006CD4(v188);
  v139 = v127;
  v140 = v127;
  v141 = v128;
  v142 = (void (*)(char *, uint64_t, uint64_t))v186;
  ((void (*)(char *, uint64_t, uint64_t))v186)(v140, v110, v128);
  v143 = swift_allocObject(&unk_100109C30, v193, v192);
  *(_QWORD *)(v143 + 16) = v133;
  *(_QWORD *)(v143 + 24) = v134;
  v144 = v143 + v131;
  v145 = v139;
  ((void (*)(uint64_t, char *, uint64_t))v191)(v144, v139, v128);
  v146 = (void *)v173;
  v147 = (ValueMetadata *)v199;
  v148 = (void *)v172;
  v149 = (void *)v171;
  v150 = v195;
  View.onChange<A>(of:initial:_:)(v138, 0, sub_100031648, v143, v173, v199, v172, v171);
  v151 = swift_release(v143);
  (*(void (**)(_QWORD *, ValueMetadata *, __n128))(v189 + 8))(v138, v147, v151);
  (*(void (**)(char *, void *))(v179 + 8))(v150, v146);
  v142(v145, v198, v141);
  v152 = swift_allocObject(&unk_100109C58, v193, v192);
  v153 = v200;
  *(_QWORD *)(v152 + 16) = v197;
  *(_QWORD *)(v152 + 24) = v153;
  ((void (*)(uint64_t, char *, uint64_t))v191)(v152 + v185, v145, v141);
  v206 = v146;
  v207 = v147;
  v208 = v148;
  v209 = v149;
  v154 = swift_getOpaqueTypeConformance2(&v206, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v155 = (uint64_t)v175;
  v156 = v176;
  v157 = v196;
  View.onAppear(perform:)(sub_1000316B4, v152, v176, v154);
  v158 = swift_release(v152);
  (*(void (**)(char *, uint64_t, __n128))(v181 + 8))(v157, v156, v158);
  v205[3] = v154;
  v205[4] = &protocol witness table for _AppearanceActionModifier;
  v159 = v180;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v180);
  v160 = v177;
  sub_100093E10(v155, v159, v177);
  v161 = *(void (**)(uint64_t, uint64_t))(v182 + 8);
  v161(v155, v159);
  sub_100091208(v160, v159, v190);
  return ((uint64_t (*)(uint64_t, uint64_t))v161)(v160, v159);
}

uint64_t sub_100028DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t TupleTypeMetadata3;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  __n128 v156;
  void *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(char *, uint64_t, uint64_t);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  void (*v167)(uint64_t, char *, uint64_t);
  char *v168;
  void *v169;
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  char *v181;
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t KeyPath;
  uint64_t v194;
  __n128 v195;
  void *v196;
  void *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  void *v201;
  void *v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  char *v207;
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  void *v222;
  char *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  char *v230;
  void *v231;
  uint64_t v232;
  void *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(char *, uint64_t, uint64_t);
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD v279[2];
  _QWORD v280[6];
  _QWORD v281[5];
  void *v282;
  void *v283;
  void *v284;
  void *v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;

  v278 = a1;
  v265 = a5;
  v7 = type metadata accessor for LibraryListViewModel(255, a2, a3, a4);
  v8 = type metadata accessor for Bindable(0, v7);
  v9 = *(_QWORD *)(v8 - 8);
  v263 = v8;
  v264 = v9;
  __chkstk_darwin(v8);
  v262 = (char *)&v213 - v10;
  v11 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v260 = *(_QWORD *)(v11 - 8);
  v261 = v11;
  __chkstk_darwin(v11);
  v259 = (char *)&v213 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ContentMarginPlacement(0);
  v257 = *(_QWORD *)(v13 - 8);
  v258 = v13;
  __chkstk_darwin(v13);
  v256 = (char *)&v213 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = a2;
  v277 = a3;
  v16 = type metadata accessor for LibraryListView(0, a2, a3, v15);
  v266 = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(v266 + 64);
  v274 = v16;
  v275 = v17;
  __chkstk_darwin(v16);
  v273 = (char *)&v213 - v18;
  v19 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v19);
  v255 = (char *)&v213 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v272 = (char *)sub_1000050C8(&qword_100117DA8);
  v271 = (char *)sub_1000050C8(&qword_100117DB0);
  v270 = (char *)sub_1000050C8(&qword_100117DB8);
  v269 = (void (*)(char *, uint64_t, uint64_t))sub_1000050C8(&qword_100117DC0);
  v268 = sub_1000050C8(&qword_100117508);
  v267 = type metadata accessor for UUID(255);
  v22 = type metadata accessor for LibraryItemContextMenu(255, a2, a3, v21);
  v23 = type metadata accessor for ModifiedContent(255, &type metadata for LibraryItemView, v22);
  v24 = sub_100031218();
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v22);
  v298 = v24;
  v299 = WitnessTable;
  v26 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  v27 = type metadata accessor for Button(255, v23, v26);
  v28 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v29 = type metadata accessor for ModifiedContent(255, v27, v28);
  v30 = sub_1000050C8(&qword_100116EE8);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v27);
  v32 = sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v296 = v31;
  v297 = v32;
  v33 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v29);
  v34 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v282 = (void *)v29;
  v283 = (void *)v30;
  v284 = (void *)v33;
  v285 = (void *)v34;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v282, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v36 = sub_1000050C8(&qword_100117DD0);
  v37 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v36);
  v38 = sub_1000050C8(&qword_100117DD8);
  v282 = (void *)v29;
  v283 = (void *)v30;
  v284 = (void *)v33;
  v285 = (void *)v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v40 = sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v294 = OpaqueTypeConformance2;
  v295 = v40;
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  v42 = sub_10003125C();
  v282 = (void *)v37;
  v283 = (void *)v38;
  v284 = (void *)v41;
  v285 = (void *)v42;
  v43 = swift_getOpaqueTypeMetadata2(255, &v282, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 0);
  v44 = sub_10000522C(&qword_100117E10, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
  v45 = sub_100004864((unint64_t *)&qword_100117E18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v282 = (void *)v268;
  v283 = (void *)v267;
  v284 = (void *)v43;
  v285 = (void *)v44;
  v286 = (void *)v45;
  v46 = type metadata accessor for ForEach(255, &v282);
  v47 = type metadata accessor for Section(255, v269, v46, &type metadata for EmptyView);
  v48 = sub_1000050C8(&qword_100117E20);
  v49 = sub_10003137C();
  v282 = (void *)v48;
  v283 = (void *)v49;
  v50 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer()>>, 1);
  v282 = (void *)v37;
  v283 = (void *)v38;
  v284 = (void *)v41;
  v285 = (void *)v42;
  v293 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v51 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v46);
  v290 = v50;
  v291 = v51;
  v292 = &protocol witness table for EmptyView;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v47);
  v282 = (void *)v47;
  v283 = (void *)v52;
  v53 = swift_getOpaqueTypeMetadata2(255, &v282, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 0);
  v54 = sub_1000050C8(&qword_100116550);
  v55 = type metadata accessor for ModifiedContent(255, v53, v54);
  v56 = sub_1000050C8(&qword_100117E40);
  v57 = type metadata accessor for ModifiedContent(255, v55, v56);
  v58 = sub_1000050C8(&qword_100117E48);
  v59 = type metadata accessor for ModifiedContent(255, v57, v58);
  v60 = sub_10000522C(&qword_100117E50, &qword_100117DB8, (uint64_t)&protocol conformance descriptor for [A]);
  v282 = v270;
  v283 = &type metadata for String;
  v284 = (void *)v59;
  v285 = (void *)v60;
  v286 = &protocol witness table for String;
  v61 = type metadata accessor for ForEach(255, &v282);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v272, v271, v61, 0, 0);
  v63 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v269 = (void (*)(char *, uint64_t, uint64_t))v63;
  v268 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v63);
  v282 = &type metadata for Never;
  v283 = (void *)v63;
  v284 = &protocol witness table for Never;
  v285 = (void *)v268;
  v64 = type metadata accessor for List(0, &v282);
  v250 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v219 = (char *)&v213 - v65;
  v66 = type metadata accessor for ShazamUpsellOverlayModifier(255);
  v240 = v64;
  v67 = type metadata accessor for ModifiedContent(0, v64, v66);
  v251 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v242 = (uint64_t)&v213 - v68;
  v69 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v64);
  v229 = v69;
  v70 = sub_100004864(&qword_100117E58, type metadata accessor for ShazamUpsellOverlayModifier, (uint64_t)&unk_1000D8008);
  v288 = v69;
  v289 = v70;
  v71 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v67);
  v282 = (void *)v67;
  v283 = (void *)v71;
  v72 = (void *)v67;
  v232 = v67;
  v73 = (void *)v71;
  v234 = v71;
  v74 = swift_getOpaqueTypeMetadata2(0, &v282, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v248 = *(_QWORD *)(v74 - 8);
  v75 = (void *)v74;
  __chkstk_darwin(v74);
  v228 = (char *)&v213 - v76;
  v282 = v72;
  v283 = v73;
  v77 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v282 = v75;
  v283 = (void *)v77;
  v78 = v75;
  v224 = v75;
  v225 = v77;
  v79 = (void *)v77;
  v80 = swift_getOpaqueTypeMetadata2(0, &v282, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v249 = *(_QWORD *)(v80 - 8);
  v81 = (void *)v80;
  __chkstk_darwin(v80);
  v223 = (char *)&v213 - v82;
  v282 = v78;
  v283 = v79;
  v83 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v84 = sub_10000B110();
  v282 = v81;
  v283 = &type metadata for String;
  v85 = v81;
  v233 = v81;
  v284 = (void *)v83;
  v285 = (void *)v84;
  v235 = v84;
  v236 = v83;
  v86 = (void *)v84;
  v87 = swift_getOpaqueTypeMetadata2(0, &v282, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 0);
  v253 = *(_QWORD *)(v87 - 8);
  v88 = (void *)v87;
  __chkstk_darwin(v87);
  v270 = (char *)&v213 - v89;
  v282 = v85;
  v283 = &type metadata for String;
  v284 = (void *)v83;
  v285 = v86;
  v90 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
  v282 = v88;
  v283 = &type metadata for Bool;
  v91 = v88;
  v231 = v88;
  v284 = (void *)v90;
  v285 = &protocol witness table for Bool;
  v92 = (void *)v90;
  v237 = v90;
  v93 = swift_getOpaqueTypeMetadata2(0, &v282, &opaque type descriptor for <<opaque return type of View.onScrollGeometryChange<A>(for:of:action:)>>, 0);
  v254 = *(_QWORD *)(v93 - 8);
  v94 = (void *)v93;
  __chkstk_darwin(v93);
  v271 = (char *)&v213 - v95;
  v96 = sub_10001C11C();
  v97 = type metadata accessor for TrackPageView(255);
  v282 = v91;
  v283 = &type metadata for Bool;
  v284 = v92;
  v285 = &protocol witness table for Bool;
  v98 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.onScrollGeometryChange<A>(for:of:action:)>>, 1);
  v99 = sub_100004864(&qword_1001174F8, (uint64_t (*)(uint64_t))sub_10001C11C, (uint64_t)&protocol conformance descriptor for NSObject);
  v100 = sub_100004864(&qword_100116620, type metadata accessor for TrackPageView, (uint64_t)&unk_1000D3458);
  v282 = v94;
  v283 = (void *)v96;
  v101 = v94;
  v222 = v94;
  v217 = v96;
  v218 = v97;
  v284 = (void *)v97;
  v285 = (void *)v98;
  v226 = v99;
  v227 = v98;
  v286 = (void *)v99;
  v287 = v100;
  v102 = v100;
  v220 = v100;
  v103 = swift_getOpaqueTypeMetadata2(0, &v282, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 0);
  v246 = *(_QWORD *)(v103 - 8);
  v104 = (void *)v103;
  __chkstk_darwin(v103);
  v230 = (char *)&v213 - v105;
  v106 = sub_1000050C8(&qword_100117E60);
  v282 = v101;
  v283 = (void *)v96;
  v284 = (void *)v97;
  v285 = (void *)v98;
  v286 = (void *)v99;
  v287 = v102;
  v107 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  v108 = sub_1000050C8(&qword_100117E68);
  v109 = sub_10000522C(&qword_100117E70, &qword_100117E68, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v282 = (void *)v108;
  v283 = (void *)v109;
  v110 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v111 = v104;
  v215 = v106;
  v216 = v104;
  v282 = v104;
  v283 = (void *)v106;
  v112 = (void *)v107;
  v213 = v110;
  v214 = v107;
  v284 = (void *)v107;
  v285 = (void *)v110;
  v113 = (void *)v110;
  v114 = swift_getOpaqueTypeMetadata2(0, &v282, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v252 = *(_QWORD *)(v114 - 8);
  v115 = (void *)v114;
  v243 = v114;
  __chkstk_darwin(v114);
  v272 = (char *)&v213 - v116;
  v117 = sub_1000050C8(&qword_100117E78);
  v241 = v117;
  v282 = v111;
  v283 = (void *)v106;
  v284 = v112;
  v285 = v113;
  v118 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v239 = v118;
  v238 = sub_100031484();
  v282 = v115;
  v283 = (void *)v117;
  v284 = (void *)v118;
  v285 = (void *)v238;
  v245 = swift_getOpaqueTypeMetadata2(0, &v282, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v247 = *(_QWORD *)(v245 - 8);
  v119 = __chkstk_darwin(v245);
  v221 = (char *)&v213 - ((v120 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v119);
  v244 = (uint64_t)&v213 - v121;
  v123 = v276;
  v122 = v277;
  v281[2] = v276;
  v281[3] = v277;
  v124 = v278;
  v281[4] = v278;
  v125 = v219;
  List<>.init(content:)(sub_100031704, v281, v269, v268);
  v126 = type metadata accessor for URL(0);
  v127 = (uint64_t)v255;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 56))(v255, 1, 1, v126);
  v128 = v266;
  v269 = *(void (**)(char *, uint64_t, uint64_t))(v266 + 16);
  v129 = v273;
  v130 = v274;
  v269(v273, v124, v274);
  v131 = *(unsigned __int8 *)(v128 + 80);
  v132 = v128;
  v267 = ((v131 + 32) & ~v131) + v275;
  v268 = (v131 + 32) & ~v131;
  v133 = v268;
  v275 = v131 | 7;
  v134 = swift_allocObject(&unk_100109C80, v267, v131 | 7);
  *(_QWORD *)(v134 + 16) = v123;
  *(_QWORD *)(v134 + 24) = v122;
  v266 = *(_QWORD *)(v132 + 32);
  v135 = v130;
  ((void (*)(uint64_t, char *, uint64_t))v266)(v134 + v133, v129, v130);
  v136 = v242;
  v137 = v240;
  sub_1000B841C(v127, (uint64_t)sub_100031714, v134, v240, v229, v242);
  swift_release(v134);
  sub_10000526C(v127, (uint64_t *)&unk_100118CE0);
  v138 = (*(uint64_t (**)(char *, uint64_t))(v250 + 8))(v125, v137);
  v139 = static Edge.Set.top.getter(v138);
  v140 = v256;
  static ContentMarginPlacement.automatic.getter();
  v141 = v228;
  v142 = v232;
  View.contentMargins(_:_:for:)(v139, 0, 0, v140, v232, v234);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v140, v258);
  (*(void (**)(uint64_t, uint64_t))(v251 + 8))(v136, v142);
  v143 = v259;
  v144 = v260;
  v145 = v261;
  (*(void (**)(char *, _QWORD, uint64_t))(v260 + 104))(v259, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v261);
  v147 = v223;
  v146 = v224;
  View.navigationBarTitleDisplayMode(_:)(v143, v224, v225);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v143, v145);
  (*(void (**)(char *, void *))(v248 + 8))(v141, v146);
  v148 = v278;
  v152 = sub_100027998(v135, v149, v150, v151);
  v153 = sub_10001A328();
  v155 = v154;
  swift_bridgeObjectRetain(v154);
  v156 = swift_release(v152);
  v282 = (void *)v153;
  v283 = v155;
  v157 = v233;
  View.navigationTitle<A>(_:)(&v282, v233, &type metadata for String, v236, v235, v156);
  swift_bridgeObjectRelease(v155);
  (*(void (**)(char *, void *))(v249 + 8))(v147, v157);
  v158 = v129;
  v159 = v135;
  v160 = v135;
  v161 = v269;
  v269(v129, v148, v160);
  v162 = v267;
  v163 = swift_allocObject(&unk_100109CA8, v267, v275);
  v164 = v277;
  *(_QWORD *)(v163 + 16) = v276;
  *(_QWORD *)(v163 + 24) = v164;
  v165 = v268;
  v166 = v129;
  v167 = (void (*)(uint64_t, char *, uint64_t))v266;
  ((void (*)(uint64_t, char *, uint64_t))v266)(v163 + v268, v166, v159);
  v168 = v270;
  v169 = v231;
  View.onScrollGeometryChange<A>(for:of:action:)(&type metadata for Bool, sub_10002CF48, 0, sub_100031834, v163, v231, &type metadata for Bool, v237, &protocol witness table for Bool);
  v170 = swift_release(v163);
  (*(void (**)(char *, void *, __n128))(v253 + 8))(v168, v169, v170);
  v171 = swift_checkMetadataState(0, v217);
  v172 = v159;
  v161(v158, v278, v159);
  v173 = swift_allocObject(&unk_100109CD0, v162, v275);
  v174 = v276;
  v175 = v277;
  *(_QWORD *)(v173 + 16) = v276;
  *(_QWORD *)(v173 + 24) = v175;
  v167(v173 + v165, v158, v172);
  v176 = swift_checkMetadataState(0, v218);
  v177 = v230;
  v178 = v171;
  v179 = v222;
  v180 = v171;
  v181 = v271;
  View.navigationDestination<A, B>(for:destination:)(v178, sub_1000318A0, v173, v222, v180, v176, v227, v226, v220);
  v182 = swift_release(v173);
  (*(void (**)(char *, void *, __n128))(v254 + 8))(v181, v179, v182);
  v280[2] = v174;
  v183 = v175;
  v280[3] = v175;
  v184 = v278;
  v280[4] = v278;
  v185 = v216;
  View.toolbar<A>(content:)(sub_1000318AC, v280, v216, v215, v214, v213);
  (*(void (**)(char *, void *))(v246 + 8))(v177, v185);
  v186 = v262;
  v187 = v274;
  sub_1000279E4(v274, v188, v189, v190);
  v279[0] = v174;
  v191 = v174;
  v279[1] = v183;
  v192 = v183;
  KeyPath = swift_getKeyPath(&unk_1000D3060, v279);
  v194 = v263;
  Bindable<A>.subscript.getter(&v282, KeyPath, v263);
  v195 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v264 + 8))(v186, v194, v195);
  v196 = v282;
  v197 = v283;
  v198 = v284;
  v199 = v273;
  v269(v273, v184, v187);
  v200 = swift_allocObject(&unk_100109CF8, v267, v275);
  *(_QWORD *)(v200 + 16) = v191;
  *(_QWORD *)(v200 + 24) = v192;
  ((void (*)(uint64_t, char *, uint64_t))v266)(v200 + v268, v199, v187);
  v201 = (void *)v238;
  v202 = (void *)v239;
  v203 = (void *)v241;
  v204 = (uint64_t)v221;
  v205 = v198;
  v206 = (void *)v243;
  v207 = v272;
  View.sheet<A>(isPresented:onDismiss:content:)(v196, v197, v205, 0, 0, sub_100031924, v200, v243, v241, v239, v238);
  swift_release(v197);
  swift_release(v200);
  v208 = swift_release(v196);
  (*(void (**)(char *, void *, __n128))(v252 + 8))(v207, v206, v208);
  v282 = v206;
  v283 = v203;
  v284 = v202;
  v285 = v201;
  swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v210 = v244;
  v209 = v245;
  sub_100093E10(v204, v245, v244);
  v211 = *(void (**)(uint64_t, uint64_t))(v247 + 8);
  v211(v204, v209);
  sub_100091208(v210, v209, v265);
  return ((uint64_t (*)(uint64_t, uint64_t))v211)(v210, v209);
}

uint64_t sub_100029EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void (*v92)(char *, char *, uint64_t);
  uint64_t v93;
  void (*v94)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t KeyPath;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD v176[8];
  _QWORD v177[14];
  uint64_t v178;
  void *v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;

  v173 = a1;
  v174 = a2;
  v166 = a5;
  v175 = a3;
  v170 = type metadata accessor for LibraryListView(0, a2, a3, a4);
  v165 = *(_QWORD *)(v170 - 8);
  v163 = *(_QWORD *)(v165 + 64);
  __chkstk_darwin(v170);
  v164 = (char *)&v138 - v7;
  v171 = sub_1000050C8(&qword_100117DB8);
  v172 = sub_1000050C8(&qword_100117DC0);
  v169 = sub_1000050C8(&qword_100117508);
  v168 = type metadata accessor for UUID(255);
  v9 = type metadata accessor for LibraryItemContextMenu(255, a2, a3, v8);
  v10 = type metadata accessor for ModifiedContent(255, &type metadata for LibraryItemView, v9);
  v11 = sub_100031218();
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v9);
  v187 = v11;
  v188 = WitnessTable;
  v13 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v14 = type metadata accessor for Button(255, v10, v13);
  v15 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v16 = type metadata accessor for ModifiedContent(255, v14, v15);
  v17 = sub_1000050C8(&qword_100116EE8);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v14);
  v19 = sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v185 = v18;
  v186 = v19;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v21 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v178 = v16;
  v179 = (void *)v17;
  v180 = v20;
  v181 = v21;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v178, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v23 = sub_1000050C8(&qword_100117DD0);
  v24 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v23);
  v25 = sub_1000050C8(&qword_100117DD8);
  v178 = v16;
  v179 = (void *)v17;
  v180 = v20;
  v181 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v27 = sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v183 = OpaqueTypeConformance2;
  v184 = v27;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v24);
  v29 = sub_10003125C();
  v178 = v24;
  v179 = (void *)v25;
  v180 = v28;
  v181 = v29;
  v30 = swift_getOpaqueTypeMetadata2(255, &v178, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 0);
  v31 = sub_10000522C(&qword_100117E10, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = sub_100004864((unint64_t *)&qword_100117E18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v178 = v169;
  v179 = (void *)v168;
  v180 = v30;
  v181 = v31;
  v182 = (void *)v32;
  v33 = type metadata accessor for ForEach(255, &v178);
  v34 = type metadata accessor for Section(255, v172, v33, &type metadata for EmptyView);
  v35 = sub_1000050C8(&qword_100117E20);
  v36 = sub_10003137C();
  v178 = v35;
  v179 = (void *)v36;
  v37 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer()>>, 1);
  v178 = v24;
  v179 = (void *)v25;
  v180 = v28;
  v181 = v29;
  v177[13] = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v33);
  v177[10] = v37;
  v177[11] = v38;
  v177[12] = &protocol witness table for EmptyView;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v34);
  v160 = v34;
  v178 = v34;
  v179 = (void *)v39;
  v154 = (void *)v39;
  v40 = swift_getOpaqueTypeMetadata2(255, &v178, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 0);
  v41 = sub_1000050C8(&qword_100116550);
  v42 = type metadata accessor for ModifiedContent(255, v40, v41);
  v43 = sub_1000050C8(&qword_100117E40);
  v155 = v42;
  v44 = type metadata accessor for ModifiedContent(255, v42, v43);
  v45 = sub_1000050C8(&qword_100117E48);
  v156 = v44;
  v146 = v45;
  v46 = type metadata accessor for ModifiedContent(255, v44, v45);
  v47 = sub_10000522C(&qword_100117E50, &qword_100117DB8, (uint64_t)&protocol conformance descriptor for [A]);
  v178 = v171;
  v179 = &type metadata for String;
  v157 = v47;
  v158 = v46;
  v180 = v46;
  v181 = v47;
  v182 = &protocol witness table for String;
  v151 = type metadata accessor for ForEach(0, &v178);
  v159 = *(_QWORD *)(v151 - 8);
  v48 = __chkstk_darwin(v151);
  v162 = (char *)&v138 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v48);
  v161 = (uint64_t)&v138 - v50;
  v51 = sub_100004F7C(&qword_100118008);
  __chkstk_darwin(v51);
  v145 = (char *)&v138 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100004F7C(&qword_100118010);
  __chkstk_darwin(v140);
  v143 = (char *)&v138 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for ListSectionSpacing(0);
  v144 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142);
  v55 = (char *)&v138 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100004F7C(&qword_100118018);
  v56 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148);
  v58 = (char *)&v138 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100004F7C(&qword_100118020);
  v147 = *(_QWORD *)(v167 - 8);
  __chkstk_darwin(v167);
  v141 = (char *)&v138 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100004F7C(&qword_100117DB0);
  v60 = __chkstk_darwin(v149);
  v153 = (uint64_t)&v138 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v60);
  v172 = (uint64_t)&v138 - v62;
  v63 = sub_100004F7C(&qword_100117DA8);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = __chkstk_darwin(v63);
  v150 = (char *)&v138 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __chkstk_darwin(v65);
  v69 = (char *)&v138 - v68;
  __chkstk_darwin(v67);
  v71 = (char *)&v138 - v70;
  v176[2] = v174;
  v176[3] = v175;
  v176[4] = v173;
  v72 = sub_100004F7C(&qword_100118028);
  v73 = sub_100031F9C();
  Section<>.init(content:)(sub_100031F90, v176, v72, v73);
  v168 = (uint64_t)v71;
  v169 = v64;
  v74 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  v152 = v63;
  v74(v71, v69, v63);
  v78 = sub_100027998(v170, v75, v76, v77);
  LOBYTE(v72) = sub_1000172E4();
  v80 = swift_release(v78);
  v81 = 1;
  if ((v72 & 1) == 0)
  {
    __chkstk_darwin(v79);
    v82 = (char *)v175;
    *(&v138 - 4) = (char *)v174;
    *(&v138 - 3) = v82;
    v137 = v173;
    v83 = sub_100004F7C(&qword_100118060);
    v84 = sub_1000320F4();
    v85 = v58;
    v138 = v58;
    v86 = Section<>.init(content:)(sub_1000320E8, &v138 - 6, v83, v84);
    static ListSectionSpacing.custom(_:)(v86, 15.0);
    v87 = *(int *)(v140 + 36);
    v88 = v56;
    v139 = v56;
    v89 = (uint64_t)v143;
    v90 = v144;
    v91 = &v143[v87];
    v92 = *(void (**)(char *, char *, uint64_t))(v144 + 16);
    v93 = v142;
    v92(&v143[v87], v55, v142);
    v94 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56);
    v94(v91, 0, 1, v93);
    (*(void (**)(uint64_t, char *, uint64_t))(v88 + 16))(v89, v85, v148);
    KeyPath = swift_getKeyPath(&unk_1000D3138, v95);
    v97 = (uint64_t)v145;
    v92(v145, v55, v93);
    v94((char *)v97, 0, 1, v93);
    v98 = (uint64_t)v141;
    v99 = (uint64_t *)&v141[*(int *)(v167 + 36)];
    sub_100007C8C(v97, (uint64_t)v99 + *(int *)(v146 + 28), &qword_100118008);
    *v99 = KeyPath;
    sub_100007C8C(v89, v98, &qword_100118010);
    sub_10000526C(v97, &qword_100118008);
    sub_10000526C(v89, &qword_100118010);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v55, v93);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v138, v148);
    sub_100007C48(v98, v172, &qword_100118020);
    v81 = 0;
  }
  v100 = v172;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v147 + 56))(v172, v81, 1, v167, v80);
  v101 = v170;
  v102 = v173;
  v106 = sub_100027998(v170, v103, v104, v105);
  v107 = sub_100027A28();
  v108 = sub_10001759C(v107 | (unsigned __int16)((v107 > 0xFFu) << 8));
  v109 = swift_release(v106);
  v177[0] = v108;
  v111 = v164;
  v110 = v165;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v165 + 16))(v164, v102, v101, v109);
  v112 = *(unsigned __int8 *)(v110 + 80);
  v113 = (v112 + 32) & ~v112;
  v114 = swift_allocObject(&unk_100109D70, v113 + v163, v112 | 7);
  v115 = v175;
  *(_QWORD *)(v114 + 16) = v174;
  *(_QWORD *)(v114 + 24) = v115;
  (*(void (**)(uint64_t, char *, uint64_t))(v110 + 32))(v114 + v113, v111, v101);
  v178 = v160;
  v179 = v154;
  v116 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 1);
  v117 = sub_10000522C(&qword_100116548, &qword_100116550, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v177[8] = v116;
  v177[9] = v117;
  v118 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v155);
  v119 = sub_10000522C(&qword_100118078, &qword_100117E40, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v177[6] = v118;
  v177[7] = v119;
  v120 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v156);
  v121 = sub_10000522C(&qword_100118080, &qword_100117E48, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v177[4] = v120;
  v177[5] = v121;
  v122 = v158;
  v123 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v158);
  v124 = sub_10003226C();
  v125 = (uint64_t)v162;
  ForEach<>.init(_:content:)(v177, sub_100032204, v114, v171, &type metadata for String, v122, v157, v123, v124);
  v177[3] = v123;
  v126 = v151;
  v127 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v151);
  v128 = v161;
  sub_100093E10(v125, v126, v161);
  v129 = v159;
  v130 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
  v130(v125, v126);
  v131 = (uint64_t)v150;
  v132 = v152;
  (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v150, v168, v152);
  v178 = v131;
  v133 = v100;
  v134 = v153;
  sub_100007C8C(v133, v153, &qword_100117DB0);
  v179 = (void *)v134;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 16))(v125, v128, v126);
  v180 = v125;
  v177[0] = v132;
  v177[1] = v149;
  v177[2] = v126;
  v176[5] = sub_100032434(&qword_100118090, &qword_100117DA8, (void (*)(void))sub_100031F9C);
  v176[6] = sub_1000322B0(&qword_100118098, &qword_100117DB0, (void (*)(void))sub_100032314, (uint64_t)&protocol conformance descriptor for <A> A?);
  v176[7] = v127;
  sub_100027640(&v178, 3uLL, (uint64_t)v177);
  v130(v128, v126);
  sub_10000526C(v172, &qword_100117DB0);
  v135 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
  v135(v168, v132);
  v130(v125, v126);
  sub_10000526C(v134, &qword_100117DB0);
  return ((uint64_t (*)(uint64_t, uint64_t))v135)(v131, v132);
}

double sub_10002AB5C@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;

  v5 = type metadata accessor for LibraryListView(0, a1, a2, a3);
  v9 = sub_100027998(v5, v6, v7, v8);
  v10 = sub_10001727C();
  swift_release(v9);
  v14 = sub_100027998(v5, v11, v12, v13);
  v15 = sub_100017568();
  swift_release(v14);
  v19 = static Color.clear.getter(v16);
  v17 = AnyView.init<A>(_:)(&v19, &type metadata for Color, &protocol witness table for Color);
  *(_QWORD *)a4 = v10;
  *(_BYTE *)(a4 + 8) = v15 & 1;
  *(_QWORD *)(a4 + 16) = v17;
  result = 0.0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_BYTE *)(a4 + 56) = 0;
  return result;
}

double sub_10002AC1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;

  v9 = type metadata accessor for LibraryListView(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v18 - v12, a1, v9);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(&unk_100109E88, v15 + v11, v14 | 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16 + v15, v13, v9);
  *(_QWORD *)a5 = sub_100032B90;
  *(_QWORD *)(a5 + 8) = v16;
  result = 0.0;
  *(_OWORD *)(a5 + 16) = xmmword_1000D2EE0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  return result;
}

double sub_10002AD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v4 = type metadata accessor for LibraryListView(0, a2, a3, a4);
  v8 = sub_100027998(v4, v5, v6, v7);
  sub_100016F38(1);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_10002AD48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[8];
  _QWORD v100[15];
  int v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;

  v90 = a3;
  v91 = a4;
  v92 = a1;
  v93 = a2;
  v97 = a5;
  v7 = type metadata accessor for Prominence(0);
  v95 = *(_QWORD *)(v7 - 8);
  v96 = v7;
  __chkstk_darwin(v7);
  v94 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1000050C8(&qword_100117DC0);
  v89 = sub_1000050C8(&qword_100117508);
  v88 = type metadata accessor for UUID(255);
  v10 = type metadata accessor for LibraryItemContextMenu(255, a3, a4, v9);
  v11 = type metadata accessor for ModifiedContent(255, &type metadata for LibraryItemView, v10);
  v12 = sub_100031218();
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v10);
  v115 = v12;
  v116 = WitnessTable;
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v15 = type metadata accessor for Button(255, v11, v14);
  v16 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_1000050C8(&qword_100116EE8);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v15);
  v20 = sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v113 = v19;
  v114 = v20;
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v22 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v106 = v17;
  v107 = v18;
  v108 = v21;
  v109 = v22;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v106, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v24 = sub_1000050C8(&qword_100117DD0);
  v25 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v24);
  v26 = sub_1000050C8(&qword_100117DD8);
  v106 = v17;
  v107 = v18;
  v108 = v21;
  v109 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v28 = sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v111 = OpaqueTypeConformance2;
  v112 = v28;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
  v30 = sub_10003125C();
  v106 = v25;
  v107 = v26;
  v108 = v29;
  v109 = v30;
  v31 = swift_getOpaqueTypeMetadata2(255, &v106, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 0);
  v32 = sub_10000522C(&qword_100117E10, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
  v33 = sub_100004864((unint64_t *)&qword_100117E18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v106 = v89;
  v107 = v88;
  v108 = v31;
  v109 = v32;
  v110 = v33;
  v34 = type metadata accessor for ForEach(255, &v106);
  v35 = type metadata accessor for Section(0, v98, v34, &type metadata for EmptyView);
  v89 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v86 = (char *)&v77 - v36;
  v37 = sub_1000050C8(&qword_100117E20);
  v38 = sub_10003137C();
  v106 = v37;
  v107 = v38;
  v39 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer()>>, 1);
  v106 = v25;
  v107 = v26;
  v108 = v29;
  v109 = v30;
  v105 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v34);
  v102 = v39;
  v103 = v40;
  v104 = &protocol witness table for EmptyView;
  v80 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v35);
  v106 = v35;
  v107 = v80;
  v41 = swift_getOpaqueTypeMetadata2(0, &v106, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 0);
  v83 = *(_QWORD *)(v41 - 8);
  v81 = v41;
  __chkstk_darwin(v41);
  v43 = (char *)&v77 - v42;
  v44 = sub_1000050C8(&qword_100116550);
  v45 = type metadata accessor for ModifiedContent(0, v41, v44);
  v46 = *(_QWORD *)(v45 - 8);
  v82 = v45;
  v87 = v46;
  __chkstk_darwin(v45);
  v79 = (char *)&v77 - v47;
  v48 = sub_1000050C8(&qword_100117E40);
  v49 = type metadata accessor for ModifiedContent(255, v45, v48);
  v84 = v49;
  v50 = sub_1000050C8(&qword_100117E48);
  v51 = type metadata accessor for ModifiedContent(0, v49, v50);
  v88 = *(_QWORD *)(v51 - 8);
  v52 = __chkstk_darwin(v51);
  v78 = (char *)&v77 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v85 = (uint64_t)&v77 - v54;
  v55 = *v92;
  v56 = v92[1];
  v57 = v92[2];
  v100[2] = v90;
  v100[3] = v91;
  v100[4] = v55;
  v100[5] = v56;
  v100[6] = v57;
  v100[7] = v93;
  v99[2] = v90;
  v99[3] = v91;
  v99[4] = v55;
  v99[5] = v56;
  v99[6] = v57;
  v58 = v86;
  sub_1000278E4((uint64_t)sub_1000324A4, (uint64_t)v100, (uint64_t)sub_1000324B4, (uint64_t)v99, v98, v34, v39, v40);
  v59 = v94;
  v60 = v95;
  v61 = v96;
  (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v94, enum case for Prominence.increased(_:), v96);
  v62 = v80;
  View.headerProminence(_:)(v59, v35, v80);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
  v63 = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v58, v35);
  v101 = static HierarchicalShapeStyle.primary.getter(v63);
  v106 = v35;
  v107 = v62;
  v64 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 1);
  v65 = v79;
  v66 = v81;
  View.foregroundStyle<A>(_:)(&v101, v81, &type metadata for HierarchicalShapeStyle, v64, &protocol witness table for HierarchicalShapeStyle);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v43, v66);
  v67 = sub_10000522C(&qword_100116548, &qword_100116550, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
  v100[13] = v64;
  v100[14] = v67;
  v68 = v82;
  v69 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v82);
  v70 = (uint64_t)v78;
  View.listSectionSpacing(_:)(v68, v69, 0.0);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v65, v68);
  v71 = sub_10000522C(&qword_100118078, &qword_100117E40, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v100[11] = v69;
  v100[12] = v71;
  v72 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v84);
  v73 = sub_10000522C(&qword_100118080, &qword_100117E48, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v100[9] = v72;
  v100[10] = v73;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v51);
  v74 = v85;
  sub_100093E10(v70, v51, v85);
  v75 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
  v75(v70, v51);
  sub_100091208(v74, v51, v97);
  return ((uint64_t (*)(uint64_t, uint64_t))v75)(v74, v51);
}

uint64_t sub_10002B4B4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;

  v67 = a1;
  v68 = a2;
  v69 = a5;
  v63 = a3;
  v64 = a4;
  v7 = type metadata accessor for LibraryListView(0, a3, a4, a2);
  v65 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  v8 = *(_QWORD *)(v65 + 64);
  __chkstk_darwin(v7);
  v62 = (char *)&v53 - v9;
  v70 = sub_1000050C8(&qword_100117508);
  v61 = type metadata accessor for UUID(255);
  v11 = type metadata accessor for LibraryItemContextMenu(255, a3, a4, v10);
  v12 = type metadata accessor for ModifiedContent(255, &type metadata for LibraryItemView, v11);
  v13 = sub_100031218();
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v11);
  v82 = v13;
  v83 = WitnessTable;
  v15 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v16 = type metadata accessor for Button(255, v12, v15);
  v17 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v18 = type metadata accessor for ModifiedContent(255, v16, v17);
  v19 = sub_1000050C8(&qword_100116EE8);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v16);
  v21 = sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v80 = v20;
  v81 = v21;
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v23 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v73 = v18;
  v74 = v19;
  v75 = v22;
  v76 = v23;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v73, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v25 = sub_1000050C8(&qword_100117DD0);
  v26 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v25);
  v27 = sub_1000050C8(&qword_100117DD8);
  v58 = v27;
  v73 = v18;
  v74 = v19;
  v75 = v22;
  v76 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v73, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v29 = sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v78 = OpaqueTypeConformance2;
  v79 = v29;
  v59 = v26;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v57 = v30;
  v56 = sub_10003125C();
  v73 = v26;
  v74 = v27;
  v75 = v30;
  v76 = v56;
  v31 = swift_getOpaqueTypeMetadata2(255, &v73, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 0);
  v55 = v31;
  v32 = sub_10000522C(&qword_100117E10, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
  v54 = v32;
  v33 = sub_100004864((unint64_t *)&qword_100117E18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v34 = v61;
  v73 = v70;
  v74 = v61;
  v75 = v31;
  v76 = v32;
  v77 = v33;
  v35 = type metadata accessor for ForEach(0, &v73);
  v60 = *(_QWORD *)(v35 - 8);
  v36 = __chkstk_darwin(v35);
  v38 = (char *)&v53 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v40 = (char *)&v53 - v39;
  v41 = v67;
  v72 = v67;
  v43 = v65;
  v42 = v66;
  v44 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v62, v68, v66);
  v45 = *(unsigned __int8 *)(v43 + 80);
  v46 = (v45 + 32) & ~v45;
  v47 = swift_allocObject(&unk_100109D98, v46 + v8, v45 | 7);
  v48 = v64;
  *(_QWORD *)(v47 + 16) = v63;
  *(_QWORD *)(v47 + 24) = v48;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v47 + v46, v44, v42);
  swift_bridgeObjectRetain(v41);
  v73 = v59;
  v74 = v58;
  v75 = v57;
  v76 = v56;
  v49 = swift_getOpaqueTypeConformance2(&v73, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v50 = sub_100004864(&qword_1001180B8, (uint64_t (*)(uint64_t))sub_10001C11C, (uint64_t)&protocol conformance descriptor for SHMediaItem);
  ForEach<>.init(_:content:)(&v72, sub_1000324C8, v47, v70, v34, v55, v54, v49, v50);
  v71 = v49;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v35);
  sub_100093E10((uint64_t)v38, v35, (uint64_t)v40);
  v51 = *(void (**)(char *, uint64_t))(v60 + 8);
  v51(v38, v35);
  sub_100091208((uint64_t)v40, v35, v69);
  return ((uint64_t (*)(char *, uint64_t))v51)(v40, v35);
}

uint64_t sub_10002B9A0@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  char *v63;
  uint64_t v64;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char v114[8];
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  _QWORD v119[10];
  __int128 v120;
  __int128 v121;
  char v122;

  v113 = a2;
  v110 = a1;
  v98 = a5;
  v7 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v7);
  v111 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = a3;
  v108 = a4;
  v106 = type metadata accessor for LibraryListView(0, a3, a4, v9);
  v10 = *(_QWORD *)(v106 - 8);
  v107 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v106);
  v103 = (char *)&v80 - v11;
  v13 = type metadata accessor for LibraryItemContextMenu(255, a3, a4, v12);
  v14 = type metadata accessor for ModifiedContent(255, &type metadata for LibraryItemView, v13);
  v15 = sub_100031218();
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v13);
  v119[8] = v15;
  v119[9] = WitnessTable;
  v105 = v14;
  v104 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v17 = type metadata accessor for Button(0, v14, v104);
  v109 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v102 = (char *)&v80 - v18;
  v19 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v101 = v17;
  v20 = type metadata accessor for ModifiedContent(0, v17, v19);
  v96 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v99 = (char *)&v80 - v21;
  v22 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v17);
  v100 = v22;
  v23 = sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v119[6] = v22;
  v119[7] = v23;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v25 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  *(_QWORD *)&v120 = v20;
  *((_QWORD *)&v120 + 1) = v7;
  *(_QWORD *)&v121 = v24;
  *((_QWORD *)&v121 + 1) = v25;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v120, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v91 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v89 = (char *)&v80 - v27;
  v28 = sub_1000050C8(&qword_100117DD0);
  v93 = OpaqueTypeMetadata2;
  v29 = type metadata accessor for ModifiedContent(0, OpaqueTypeMetadata2, v28);
  v95 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v94 = (char *)&v80 - v30;
  v31 = sub_1000050C8(&qword_100117DD8);
  v90 = v20;
  *(_QWORD *)&v120 = v20;
  *((_QWORD *)&v120 + 1) = v7;
  v97 = v7;
  v88 = v24;
  *(_QWORD *)&v121 = v24;
  *((_QWORD *)&v121 + 1) = v25;
  v86 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v120, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v33 = sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v80 = OpaqueTypeConformance2;
  v119[4] = OpaqueTypeConformance2;
  v119[5] = v33;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v29);
  v35 = sub_10003125C();
  *(_QWORD *)&v120 = v29;
  *((_QWORD *)&v120 + 1) = v31;
  v92 = v31;
  v85 = v34;
  *(_QWORD *)&v121 = v34;
  *((_QWORD *)&v121 + 1) = v35;
  v82 = v35;
  v87 = swift_getOpaqueTypeMetadata2(0, &v120, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 0);
  v84 = *(_QWORD *)(v87 - 8);
  v36 = __chkstk_darwin(v87);
  v81 = (char *)&v80 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v83 = (uint64_t)&v80 - v38;
  v39 = *v110;
  v40 = v10;
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v42 = v103;
  v43 = v113;
  v44 = v106;
  v41(v103, v113, v106);
  v45 = *(unsigned __int8 *)(v40 + 80);
  v46 = (v45 + 32) & ~v45;
  v47 = (v107 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject(&unk_100109DC0, v47 + 8, v45 | 7);
  v49 = v112;
  v50 = v108;
  *(_QWORD *)(v48 + 16) = v112;
  *(_QWORD *)(v48 + 24) = v50;
  v51 = v48 + v46;
  v52 = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v51, v42, v44);
  *(_QWORD *)(v48 + v47) = v39;
  v115 = v49;
  v116 = v52;
  v53 = v43;
  v54 = v99;
  v117 = v39;
  v118 = v53;
  v55 = v39;
  v56 = v102;
  Button.init(action:label:)(sub_100032550, v48, sub_10003255C, v114, v105, v104);
  v57 = v101;
  View.accessibilityIdentifier(_:)(0xD000000000000012, 0x80000001000DA290, v101, v100);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v56, v57);
  v58 = enum case for DynamicTypeSize.accessibility2(_:);
  v59 = type metadata accessor for DynamicTypeSize(0);
  v60 = (uint64_t)v111;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v111, v58, v59);
  v61 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v60, v60, v59, v61);
  if ((result & 1) != 0)
  {
    v63 = v89;
    v64 = v90;
    View.dynamicTypeSize<A>(_:)(v60, v90, v97, v88, v86);
    sub_10000526C(v60, &qword_100116EE8);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v54, v64);
    __asm { FMOV            V1.2D, #12.0 }
    v120 = _Q1;
    v121 = xmmword_1000D2EF0;
    v122 = 0;
    v70 = v94;
    v71 = v93;
    View.listRowInsets(_:)(&v120, v93, v80);
    v72 = (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v63, v71);
    __chkstk_darwin(v72);
    *(&v80 - 4) = v112;
    *(&v80 - 3) = v52;
    *(&v80 - 2) = v113;
    *(&v80 - 1) = (uint64_t)v55;
    v73 = (uint64_t)v81;
    v74 = v92;
    v75 = v85;
    v76 = v82;
    View.swipeActions<A>(edge:allowsFullSwipe:content:)(1, 1, sub_100032568);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v70, v29);
    v119[0] = v29;
    v119[1] = v74;
    v119[2] = v75;
    v119[3] = v76;
    swift_getOpaqueTypeConformance2(v119, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
    v77 = v83;
    v78 = v87;
    sub_100093E10(v73, v87, v83);
    v79 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v79(v73, v78);
    sub_100091208(v77, v78, v98);
    return ((uint64_t (*)(uint64_t, uint64_t))v79)(v77, v78);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_10002C1B8(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v6 = type metadata accessor for LibraryListView(0, a3, a4, a4);
  v10 = sub_100027998(v6, v7, v8, v9);
  v11 = *a1;
  LOBYTE(a1) = *((_BYTE *)a1 + 8);
  swift_retain(v11);
  v13 = sub_10000687C(v12, (char)a1);
  swift_release(v11);
  sub_100018978(a2, v13);
  swift_release(v10);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

uint64_t sub_10002C240@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t WitnessTable;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;

  v61 = a5;
  v9 = type metadata accessor for LibraryListView(0, a3, a4, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v56 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v51 - v14;
  v53 = *(_QWORD *)(a3 - 8);
  v16 = v53;
  __chkstk_darwin(v13);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v18;
  v59 = type metadata accessor for LibraryItemContextMenu(255, a3, a4, v19);
  v57 = type metadata accessor for ModifiedContent(0, &type metadata for LibraryItemView, v59);
  v60 = *(_QWORD *)(v57 - 8);
  v20 = __chkstk_darwin(v57);
  v55 = (uint64_t)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v58 = (uint64_t)&v51 - v22;
  v64 = a1;
  v54 = a1;
  v51 = a2;
  v26 = sub_100027998(v9, v23, v24, v25);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v26 + *(_QWORD *)(*(_QWORD *)v26 + 184), a3);
  v27 = swift_release(v26);
  v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v29 = a2;
  v30 = v9;
  v28(v15, v29, v9, v27);
  v31 = (void (*)(char *, uint64_t, uint64_t))v28;
  v32 = *(unsigned __int8 *)(v10 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = v33 + v11;
  v35 = v32 | 7;
  v36 = swift_allocObject(&unk_100109E38, v33 + v11, v32 | 7);
  *(_QWORD *)(v36 + 16) = a3;
  *(_QWORD *)(v36 + 24) = a4;
  v37 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v38 = v15;
  v39 = v30;
  v37(v36 + v33, v38, v30);
  v40 = v56;
  v31(v56, v51, v39);
  v41 = swift_allocObject(&unk_100109E60, v34, v35);
  *(_QWORD *)(v41 + 16) = a3;
  *(_QWORD *)(v41 + 24) = a4;
  v37(v41 + v33, v40, v39);
  v42 = sub_100031218();
  v43 = v55;
  v44 = (uint64_t)v52;
  sub_100026178(v54, (uint64_t)v52, (uint64_t)sub_1000329D8, v36, (uint64_t)sub_100032A54, v41, (uint64_t)&type metadata for LibraryItemView, a3, v55, v42, a4);
  swift_release(v36);
  v45 = swift_release(v41);
  (*(void (**)(uint64_t, uint64_t, __n128))(v53 + 8))(v44, a3, v45);

  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v59);
  v62 = v42;
  v63 = WitnessTable;
  v47 = v57;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v57);
  v48 = v58;
  sub_100093E10(v43, v47, v58);
  v49 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v49(v43, v47);
  sub_100091208(v48, v47, v61);
  return ((uint64_t (*)(uint64_t, uint64_t))v49)(v48, v47);
}

uint64_t sub_10002C588@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t *v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char v47[16];
  uint64_t v48;
  uint64_t v49;

  v42 = a4;
  v45 = a2;
  v46 = a5;
  v7 = type metadata accessor for LibraryListView(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v41 - v10;
  v12 = sub_100004F7C(&qword_1001180C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(&qword_100117E08);
  v16 = *(_QWORD *)(v15 - 8);
  v43 = v15;
  v44 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004F7C(&qword_100117DF8);
  v20 = __chkstk_darwin(v19);
  v41 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter(v20);
  v22 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v14, 0, 1, v22);
  v23 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v24 = *(unsigned __int8 *)(v8 + 80);
  v25 = (v24 + 32) & ~v24;
  v26 = (v9 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_100109DE8, v26 + 8, v24 | 7);
  v28 = v42;
  *(_QWORD *)(v27 + 16) = a3;
  *(_QWORD *)(v27 + 24) = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v27 + v25, v11, v23);
  v29 = v45;
  *(_QWORD *)(v27 + v26) = v45;
  v48 = a3;
  v49 = v28;
  v30 = v29;
  Button.init(role:action:label:)(v14, sub_1000326C0, v27, sub_100032740, v47, &type metadata for Image, &protocol witness table for Image);
  v31 = sub_10000522C(&qword_100117E00, &qword_100117E08, (uint64_t)&protocol conformance descriptor for Button<A>);
  v32 = (uint64_t)v41;
  v33 = v43;
  View.accessibilityIdentifier(_:)(0xD00000000000001ALL, 0x80000001000DA2B0, v43, v31);
  v34 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v18, v33);
  v35 = static Color.red.getter(v34);
  KeyPath = swift_getKeyPath(&unk_1000D3168, v36);
  v38 = v46;
  sub_100007C8C(v32, v46, &qword_100117DF8);
  v39 = (uint64_t *)(v38 + *(int *)(sub_100004F7C(&qword_100117DD8) + 36));
  *v39 = KeyPath;
  v39[1] = v35;
  return sub_10000526C(v32, &qword_100117DF8);
}

double sub_10002C858(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a1;
  v31 = a4;
  v7 = type metadata accessor for LibraryListView(0, a3, a4, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v11 = (char *)&v28 - v10;
  v12 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  type metadata accessor for MainActor(0);
  v29 = a2;
  v16 = static MainActor.shared.getter(v29);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 48) & ~v17;
  v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject(&unk_100109E10, v19 + 8, v17 | 7);
  *((_QWORD *)v20 + 2) = v16;
  *((_QWORD *)v20 + 3) = &protocol witness table for MainActor;
  v21 = v31;
  *((_QWORD *)v20 + 4) = a3;
  *((_QWORD *)v20 + 5) = v21;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v18], v11, v7);
  *(_QWORD *)&v20[v19] = v29;
  v22 = sub_1000A9F18((uint64_t)v14, (uint64_t)&unk_1001180D0, (uint64_t)v20);
  swift_release(v22);
  v26 = sub_100027998(v7, v23, v24, v25);
  sub_10001BD40(0x12u, 0xAu);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_10002CA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = *(_QWORD *)(a6 - 8);
  v7[6] = v8;
  v7[7] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v7[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v7[9] = v10;
  v7[10] = v11;
  return swift_task_switch(sub_10002CAA8, v10, v11);
}

uint64_t sub_10002CAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  int *v17;

  v6 = v4[6];
  v5 = v4[7];
  v8 = v4[4];
  v7 = v4[5];
  v9 = type metadata accessor for LibraryListView(0, v8, v7, a4);
  v13 = sub_100027998(v9, v10, v11, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v13 + *(_QWORD *)(*(_QWORD *)v13 + 184), v8);
  swift_release(v13);
  v14 = *(int **)(v7 + 40);
  v17 = (int *)((char *)v14 + *v14);
  v15 = (_QWORD *)swift_task_alloc(v14[1]);
  v4[11] = v15;
  *v15 = v4;
  v15[1] = sub_10002CB64;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v17)(v4[3], v4[4], v4[5]);
}

uint64_t sub_10002CB64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 48);
  v2 = *(_QWORD *)(*v0 + 56);
  v4 = *(_QWORD *)(*v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10002CBD0, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_10002CBD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  char v55;

  v48 = a3;
  v5 = type metadata accessor for AccessibilityTraits(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100004F7C(&qword_100117E20);
  v7 = __chkstk_darwin(v47);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v42 = (char *)&v41 - v11;
  __chkstk_darwin(v10);
  v43 = (char *)&v41 - v12;
  v49 = a1;
  v50 = a2;
  v13 = sub_10000B110();
  swift_bridgeObjectRetain(a2);
  v14 = Text.init<A>(_:)(&v49, &type metadata for String, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  v21 = static Font.title3.getter();
  static Font.Weight.semibold.getter();
  v22 = Font.weight(_:)(v21);
  swift_release(v21);
  v23 = Text.font(_:)(v22, v14, v16, v20, v18);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  swift_release(v22);
  sub_10000B64C(v14, v16, v20);
  swift_bridgeObjectRelease(v18);
  v49 = v23;
  v50 = v25;
  v51 = v27 & 1;
  v52 = v29;
  v53 = xmmword_1000D2F00;
  v54 = xmmword_1000D2F10;
  v55 = 0;
  if (qword_100116180 != -1)
    swift_once(&qword_100116180, sub_100080434);
  v30 = qword_100124710;
  v31 = *(_QWORD *)algn_100124718;
  v32 = sub_100004F7C(&qword_100117E38);
  v33 = sub_100031400();
  View.accessibilityIdentifier(_:)(v30, v31, v32, v33);
  sub_10000B64C(v23, v25, v27 & 1);
  v34 = swift_bridgeObjectRelease(v29);
  v35 = v44;
  static AccessibilityTraits.isHeader.getter(v34);
  v36 = (uint64_t)v42;
  v37 = v47;
  ModifiedContent<>.accessibilityAddTraits(_:)(v35, v47);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v46);
  sub_10000526C((uint64_t)v9, &qword_100117E20);
  v38 = (uint64_t)v43;
  ModifiedContent<>.accessibilityHeading(_:)(2, v37);
  sub_10000526C(v36, &qword_100117E20);
  v39 = sub_10003137C();
  View.accessibilityShowsLargeContentViewer()(v37, v39);
  return sub_10000526C(v38, &qword_100117E20);
}

double sub_10002CEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v6 = a4;
  v7 = type metadata accessor for LibraryListView(0, a2, a3, a4);
  v11 = sub_100027998(v7, v8, v9, v10);
  sub_10001BD40(v6, a5);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

uint64_t sub_10002CF48@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;
  double v3;

  result = ScrollGeometry.contentOffset.getter();
  *a1 = v3 <= 0.0;
  return result;
}

double sub_10002CF78(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v5 = *a2;
  v6 = type metadata accessor for LibraryListView(0, a4, a5, a4);
  v10 = sub_100027998(v6, v7, v8, v9);
  sub_1000188E4((v5 & 1) == 0);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

uint64_t sub_10002CFC0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for LibraryListView(0, a1, a2, a2);
  v8 = sub_100027998(v4, v5, v6, v7);
  v9 = sub_10001A384();
  swift_retain(v9);
  swift_release(v8);
  return sub_100034C08(v9, 0, 0, a3);
}

uint64_t sub_10002D024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  _BYTE v22[16];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v6 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100004F7C(&qword_100117E68);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.topBarTrailing.getter(v11);
  v23 = a2;
  v24 = a3;
  v25 = a1;
  v14 = sub_100004F7C(&qword_100117EB8);
  v15 = sub_1000050C8(&qword_100117EC0);
  v16 = sub_1000050C8(&qword_100117EC8);
  v17 = sub_100031A8C();
  v18 = sub_10000522C(&qword_100117EE8, &qword_100117EC8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v26[0] = v15;
  v26[1] = v16;
  v26[2] = v17;
  v26[3] = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v26, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer<A>(_:)>>, 1);
  ToolbarItem<>.init(placement:content:)(v8, sub_100031A80, v22, v14, OpaqueTypeConformance2);
  v20 = sub_10000522C(&qword_100117E70, &qword_100117E68, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v13, v9, v20);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_10002D1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v40 = a5;
  v8 = type metadata accessor for LibraryListView(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v13 = sub_100004F7C(&qword_100117EE0);
  v36 = *(_QWORD *)(v13 - 8);
  v37 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100004F7C(&qword_100117EC0);
  __chkstk_darwin(v38);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = swift_allocObject(&unk_100109D48, v19 + v10, v18 | 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v19, v12, v8);
  v45 = a2;
  v46 = a3;
  v39 = a1;
  v47 = a1;
  v42 = a2;
  v43 = a3;
  v21 = sub_100004F7C(&qword_100117EF0);
  v22 = sub_100004F7C(&qword_100117EF8);
  v23 = sub_100031B98();
  v24 = sub_10000522C(&qword_100117F48, &qword_100117EF8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Menu.init(onPresentationChanged:content:label:)(sub_100031B2C, v20, sub_100031B84, v44, sub_100031B90, v41, v21, v22, v23, v24);
  if (qword_100116160 != -1)
    swift_once(&qword_100116160, sub_100080388);
  v25 = qword_1001246D0;
  v26 = *(_QWORD *)algn_1001246D8;
  v27 = sub_10000522C(&qword_100117ED8, &qword_100117EE0, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v28 = v25;
  v29 = v37;
  View.accessibilityIdentifier(_:)(v28, v26, v37, v27);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v15, v29);
  __chkstk_darwin(v30);
  *(&v35 - 4) = a2;
  *(&v35 - 3) = a3;
  v31 = sub_100004F7C(&qword_100117EC8);
  v32 = sub_100031A8C();
  v33 = sub_10000522C(&qword_100117EE8, &qword_100117EC8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  View.accessibilityShowsLargeContentViewer<A>(_:)(sub_100031D48, &v35 - 6, v38, v31, v32, v33);
  return sub_10000526C((uint64_t)v17, &qword_100117EC0);
}

double sub_10002D4C4(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  if ((a1 & 1) != 0)
  {
    v4 = type metadata accessor for LibraryListView(0, a3, a4, a4);
    v8 = sub_100027998(v4, v5, v6, v7);
    sub_10001BD40(0x11u, 0xAu);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_10002D528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t, __n128);
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v49 = a2;
  v50 = a3;
  v5 = a2;
  v47 = a1;
  v57 = a4;
  v51 = sub_100004F7C(&qword_100117F58);
  v56 = *(_QWORD *)(v51 - 8);
  v6 = __chkstk_darwin(v51);
  v55 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v53 = (char *)&v46 - v8;
  v48 = sub_100004F7C(&qword_100117F60);
  v54 = *(_QWORD *)(v48 - 8);
  v9 = __chkstk_darwin(v48);
  v52 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - v11;
  type metadata accessor for LibraryListView(0, v5, a3, v13);
  v14 = sub_100027B00();
  v16 = v15;
  LOWORD(v5) = v17;
  KeyPath = swift_getKeyPath(&unk_1000D30F8, v15);
  v61 = v14;
  v62 = v16;
  v63 = v5 & 0x1FF;
  v19 = sub_100004F7C(&qword_100117F68);
  Binding.subscript.getter(&v64, KeyPath, v19);
  swift_release(v16);
  swift_release(KeyPath);
  swift_release(v14);
  v20 = v64;
  v21 = v65;
  v61 = v64;
  v62 = v65;
  LOBYTE(v63) = v66;
  swift_retain(v64);
  swift_retain(v21);
  sub_100004F7C(&qword_100117F70);
  sub_10001C370();
  sub_1000322B0(&qword_100117F78, &qword_100117F70, (void (*)(void))sub_100031DB4, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  v22 = v12;
  v46 = v12;
  Picker.init(selection:label:content:)(&v61);
  swift_release(v21);
  swift_release(v20);
  v23 = v47;
  v24 = sub_100027B00();
  v26 = v25;
  LOWORD(v20) = v27;
  v28 = swift_getKeyPath(&unk_1000D3118, v25);
  v61 = v24;
  v62 = v26;
  v63 = v20 & 0x1FF;
  Binding.subscript.getter(&v64, v28, v19);
  swift_release(v26);
  swift_release(v28);
  swift_release(v24);
  v29 = v64;
  v30 = v65;
  v58 = v49;
  v59 = v50;
  v60 = v23;
  v61 = v64;
  v62 = v65;
  LOBYTE(v63) = v66;
  swift_retain(v64);
  swift_retain(v30);
  sub_100004F7C(&qword_100117F90);
  sub_10000522C(&qword_100117F98, &qword_100117F90, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v31 = v53;
  Picker.init(selection:label:content:)(&v61);
  swift_release(v30);
  v32 = swift_release(v29);
  v33 = v54;
  v34 = *(void (**)(char *, char *, uint64_t, __n128))(v54 + 16);
  v35 = v52;
  v36 = v48;
  v34(v52, v22, v48, v32);
  v37 = v55;
  v38 = v56;
  v39 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  v40 = v51;
  v39(v55, v31, v51);
  v41 = v57;
  ((void (*)(uint64_t, char *, uint64_t))v34)(v57, v35, v36);
  v42 = sub_100004F7C(&qword_100117FA0);
  v39((char *)(v41 + *(int *)(v42 + 48)), v37, v40);
  v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v31, v40);
  v44 = *(void (**)(char *, uint64_t))(v33 + 8);
  v44(v46, v36);
  v43(v37, v40);
  return ((uint64_t (*)(char *, uint64_t))v44)(v35, v36);
}

uint64_t sub_10002D948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _UNKNOWN **v6;

  v6 = &off_100107BC0;
  v0 = sub_100004F7C(&qword_100117540);
  v1 = sub_100004F7C(&qword_100117F88);
  v2 = sub_10000522C(&qword_100117FF8, &qword_100117540, (uint64_t)&protocol conformance descriptor for [A]);
  v3 = sub_100031DB4();
  v4 = sub_100031F4C();
  return ForEach<>.init(_:content:)(&v6, sub_10002DA08, 0, v0, &type metadata for HistorySortSelection.SortType, v1, v2, v3, v4);
}

uint64_t sub_10002DA08@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = sub_100004F7C(&qword_100117F88);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v21 = sub_100016AEC(v7);
  v22 = v8;
  v9 = sub_10000B110();
  v10 = Text.init<A>(_:)(&v21, &type metadata for String, v9);
  v12 = v11;
  v14 = v13;
  v21 = v10;
  v22 = v11;
  v16 = v15 & 1;
  v23 = v15 & 1;
  v24 = v13;
  if (v7)
  {
    if (v7 == 1)
    {
      if (qword_100116140 != -1)
        swift_once(&qword_100116140, sub_1000802D8);
      v17 = &qword_100124690;
    }
    else
    {
      if (qword_100116148 != -1)
        swift_once(&qword_100116148, sub_100080304);
      v17 = &qword_1001246A0;
    }
    v19 = *v17;
    v18 = v17[1];
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v18 = 0x80000001000DA270;
    v19 = 0xD000000000000010;
  }
  View.accessibilityIdentifier(_:)(v19, v18, &type metadata for Text, &protocol witness table for Text);
  swift_bridgeObjectRelease(v18);
  sub_10000B64C(v10, v12, v16);
  swift_bridgeObjectRelease(v14);
  return sub_100007C48((uint64_t)v6, a2, &qword_100117F88);
}

uint64_t sub_10002DBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  __int16 v64;

  v56 = a4;
  v7 = sub_100004F7C(&qword_100117FA8);
  v8 = __chkstk_darwin(v7);
  v58 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v57 = (uint64_t)&v54 - v11;
  v12 = __chkstk_darwin(v10);
  v55 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  v59 = (uint64_t)&v54 - v14;
  v16 = type metadata accessor for LibraryListView(0, a2, a3, v15);
  v54 = a1;
  v20 = sub_100027998(v16, v17, v18, v19);
  v21 = *(_QWORD *)(v20 + qword_1001244D8);
  v22 = *(_QWORD *)(v20 + qword_1001244D8 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v20 + qword_1001244D8 + 8));
  swift_bridgeObjectRetain(v22);
  swift_release(v20);
  v23 = Text.init(_:tableName:bundle:comment:)(v21);
  v25 = v24;
  v27 = v26;
  v60 = v23;
  v61 = v24;
  v29 = v28 & 1;
  v62 = v28 & 1;
  v63 = v26;
  v64 = 257;
  if (qword_100116168 != -1)
    swift_once(&qword_100116168, sub_1000803B8);
  v30 = qword_1001246E0;
  v31 = *(_QWORD *)algn_1001246E8;
  v32 = sub_100004F7C(&qword_100117FB0);
  v33 = sub_100031E44();
  View.accessibilityIdentifier(_:)(v30, v31, v32, v33);
  sub_10000B64C(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  v37 = sub_100027998(v16, v34, v35, v36);
  v38 = *(_QWORD *)(v37 + qword_1001244E0);
  v39 = *(_QWORD *)(v37 + qword_1001244E0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v37 + qword_1001244E0 + 8));
  swift_bridgeObjectRetain(v39);
  swift_release(v37);
  v40 = Text.init(_:tableName:bundle:comment:)(v38);
  v42 = v41;
  v44 = v43;
  v60 = v40;
  v61 = v41;
  v46 = v45 & 1;
  v62 = v45 & 1;
  v63 = v43;
  v64 = 0;
  if (qword_100116170 != -1)
    swift_once(&qword_100116170, sub_1000803E0);
  v47 = (uint64_t)v55;
  View.accessibilityIdentifier(_:)(qword_1001246F0, *(_QWORD *)algn_1001246F8, v32, v33);
  sub_10000B64C(v40, v42, v46);
  swift_bridgeObjectRelease(v44);
  v48 = v59;
  v49 = v57;
  sub_100007C8C(v59, v57, &qword_100117FA8);
  v50 = v58;
  sub_100007C8C(v47, v58, &qword_100117FA8);
  v51 = v56;
  sub_100007C8C(v49, v56, &qword_100117FA8);
  v52 = sub_100004F7C(&qword_100117FF0);
  sub_100007C8C(v50, v51 + *(int *)(v52 + 48), &qword_100117FA8);
  sub_10000526C(v47, &qword_100117FA8);
  sub_10000526C(v48, &qword_100117FA8);
  sub_10000526C(v50, &qword_100117FA8);
  return sub_10000526C(v49, &qword_100117FA8);
}

uint64_t sub_10002DF74@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a1;
  v1 = sub_100004F7C(&qword_100117F50);
  __chkstk_darwin(v1);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SymbolVariants(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v40 - v9;
  v40 = sub_100004F7C(&qword_100116838);
  v11 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_100117F20);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100004F7C(&qword_100117F10);
  __chkstk_darwin(v41);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = Image.init(systemName:)(0xD000000000000013, 0x80000001000DA250);
  v19 = static SymbolVariants.circle.getter(v43);
  SymbolVariants.fill.getter(v19);
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v10, v4);
  View.symbolVariant(_:)(v8, &type metadata for Image, &protocol witness table for Image);
  v20(v8, v4);
  v21 = swift_release(v43);
  static SymbolRenderingMode.palette.getter(v21);
  v22 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v3, 0, 1, v22);
  KeyPath = swift_getKeyPath(&unk_1000D3098, v23);
  v25 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  v26 = sub_100004F7C(&qword_100117F30);
  sub_100007C8C((uint64_t)v3, (uint64_t)v25 + *(int *)(v26 + 28), &qword_100117F50);
  *v25 = KeyPath;
  v27 = v40;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v40);
  sub_10000526C((uint64_t)v3, &qword_100117F50);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v27);
  LODWORD(v27) = static HierarchicalShapeStyle.primary.getter(v28);
  v29 = objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
  v30 = Color.init(uiColor:)(v29);
  sub_100007C8C((uint64_t)v16, (uint64_t)v18, &qword_100117F20);
  v31 = &v18[*(int *)(v41 + 36)];
  *(_DWORD *)v31 = v27;
  *((_QWORD *)v31 + 1) = v30;
  v32 = sub_10000526C((uint64_t)v16, &qword_100117F20);
  v33 = static Font.title2.getter(v32);
  static Font.Weight.semibold.getter();
  v34 = Font.weight(_:)(v33);
  swift_release(v33);
  v36 = swift_getKeyPath(&unk_1000D30C8, v35);
  v37 = v42;
  sub_100007C8C((uint64_t)v18, v42, &qword_100117F10);
  v38 = (uint64_t *)(v37 + *(int *)(sub_100004F7C(&qword_100117EF0) + 36));
  *v38 = v36;
  v38[1] = v34;
  return sub_10000526C((uint64_t)v18, &qword_100117F10);
}

uint64_t sub_10002E2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  _QWORD v6[4];
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v8 = a2;
  v9 = a3;
  v10 = a1;
  v6[2] = a2;
  v6[3] = a3;
  v3 = sub_100004F7C(&qword_100116838);
  v11[0] = &type metadata for Image;
  v11[1] = &protocol witness table for Image;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v11, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  return Label.init(title:icon:)(sub_100031D54, v7, sub_100031D60, v6, &type metadata for Text, v3, &protocol witness table for Text, OpaqueTypeConformance2);
}

uint64_t sub_10002E388@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v5 = type metadata accessor for LibraryListView(0, a1, a2, a3);
  v9 = sub_100027998(v5, v6, v7, v8);
  v10 = *(_QWORD *)(v9 + qword_1001244D0);
  v11 = *(_QWORD *)(v9 + qword_1001244D0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v9 + qword_1001244D0 + 8));
  swift_bridgeObjectRetain(v11);
  swift_release(v9);
  result = Text.init(_:tableName:bundle:comment:)(v10);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v14 & 1;
  *(_QWORD *)(a4 + 24) = v15;
  return result;
}

uint64_t sub_10002E444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v0 = type metadata accessor for SymbolVariants(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v10 - v5;
  v11 = Image.init(systemName:)(0xD000000000000013, 0x80000001000DA250);
  v7 = static SymbolVariants.circle.getter();
  SymbolVariants.fill.getter(v7);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v6, v0);
  View.symbolVariant(_:)(v4, &type metadata for Image, &protocol witness table for Image);
  v8(v4, v0);
  return swift_release(v11);
}

void sub_10002E540(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v34 = a2;
  v35 = a3;
  v39 = a4;
  v38 = type metadata accessor for _TaskModifier(0);
  __chkstk_darwin(v38);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LibraryListView(0, a2, a3, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v34 - v17;
  v22 = sub_100027998(v16, v19, v20, v21);
  v23 = (void *)sub_10001A398();
  v36 = v23;
  v24 = swift_release(v22);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v18, a1, v13, v24);
  v25 = *(unsigned __int8 *)(v14 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(&unk_100109D20, v26 + v15, v25 | 7);
  v28 = v35;
  *(_QWORD *)(v27 + 16) = v34;
  *(_QWORD *)(v27 + 24) = v28;
  v29 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v27 + v26, v18, v13);
  static TaskPriority.userInitiated.getter(v29);
  v30 = v37;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v8[*(int *)(v38 + 20)], v11, v37);
  *(_QWORD *)v8 = &unk_100117EB0;
  *((_QWORD *)v8 + 1) = v27;
  v31 = sub_100004F7C(&qword_100117E78);
  v32 = v39;
  sub_100031A00((uint64_t)v8, (uint64_t)v39 + *(int *)(v31 + 36));
  *v32 = v23;
  v33 = v36;
  sub_100031A44((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v30);

}

uint64_t sub_10002E73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002E7AC, v5, v6);
}

uint64_t sub_10002E7AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  v4 = type metadata accessor for LibraryListView(0, v2, v1, v3);
  v8 = sub_100027998(v4, v5, v6, v7);
  sub_100018074(v8);
  v9 = swift_release(v8);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v9);
}

double sub_10002E80C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  BOOL v6;
  char *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  _BYTE v13[10];
  uint64_t v14;
  uint64_t v15;

  v5 = *a2;
  if (*a1 != v5)
  {
    v6 = v5 != 0;
    v7 = (char *)(a3 + *(int *)(type metadata accessor for LibraryListView(0, a4, a5, a4) + 44));
    v8 = *v7;
    v9 = v7[1];
    v10 = *((_QWORD *)v7 + 1);
    swift_retain(v10);
    v11 = sub_100004F7C(&qword_100117EA0);
    State.wrappedValue.getter(&v15, v11);
    v13[2] = v8;
    v13[3] = v9;
    v14 = v10;
    v13[0] = v15;
    v13[1] = v6;
    State.wrappedValue.setter(v13, v11);
    *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  }
  return result;
}

uint64_t sub_10002E8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = type metadata accessor for ScenePhase(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for ScenePhase.background(_:), v8);
  LOBYTE(a2) = static ScenePhase.== infix(_:_:)(a2, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((a2 & 1) != 0)
  {
    v14 = type metadata accessor for LibraryListView(0, a4, a5, v13);
    v18 = sub_100027998(v14, v15, v16, v17);
    sub_100018884();
    swift_release(v18);
    return sub_100027A98(0, v14);
  }
  return result;
}

uint64_t sub_10002E9D8()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x4D415A414853, 0xE600000000000000);
  qword_100117CB0 = result;
  *(_QWORD *)algn_100117CB8 = v1;
  byte_100117CC0 = v2 & 1;
  qword_100117CC8 = v3;
  return result;
}

uint64_t sub_10002EA14()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0x485F4D415A414853, 0xEE0059524F545349);
  qword_100117CD0 = result;
  *(_QWORD *)algn_100117CD8 = v1;
  byte_100117CE0 = v2 & 1;
  qword_100117CE8 = v3;
  return result;
}

uint64_t sub_10002EA60@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v35[4];
  int v36;
  uint64_t v37;

  v36 = a2;
  v37 = a3;
  v4 = type metadata accessor for Divider(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100004F7C(&qword_1001180E0);
  v9 = __chkstk_darwin(v8);
  v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v35[-v12];
  v14 = sub_100004F7C(&qword_1001180E8);
  v15 = __chkstk_darwin(v14);
  v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __chkstk_darwin(v15);
  v20 = &v35[-v19];
  *(_QWORD *)v20 = static VerticalAlignment.lastTextBaseline.getter(v18);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v21 = sub_100004F7C(&qword_1001180F0);
  v22 = sub_10002ECD4(a1, v36, &v20[*(int *)(v21 + 44)]);
  v23 = Divider.init()(v22);
  LOBYTE(a1) = static Edge.Set.bottom.getter(v23);
  v24 = EdgeInsets.init(_all:)(10.0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v11, v7, v4);
  v31 = (double *)&v11[*(int *)(v8 + 36)];
  *(_BYTE *)v31 = a1;
  v31[1] = v24;
  *((_QWORD *)v31 + 2) = v26;
  *((_QWORD *)v31 + 3) = v28;
  *((_QWORD *)v31 + 4) = v30;
  *((_BYTE *)v31 + 40) = 0;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  sub_100007C48((uint64_t)v11, (uint64_t)v13, &qword_1001180E0);
  sub_100007C8C((uint64_t)v20, (uint64_t)v17, &qword_1001180E8);
  sub_100007C8C((uint64_t)v13, (uint64_t)v11, &qword_1001180E0);
  v32 = v37;
  sub_100007C8C((uint64_t)v17, v37, &qword_1001180E8);
  v33 = sub_100004F7C(&qword_1001180F8);
  sub_100007C8C((uint64_t)v11, v32 + *(int *)(v33 + 48), &qword_1001180E0);
  sub_10000526C((uint64_t)v13, &qword_1001180E0);
  sub_10000526C((uint64_t)v20, &qword_1001180E8);
  sub_10000526C((uint64_t)v11, &qword_1001180E0);
  return sub_10000526C((uint64_t)v17, &qword_1001180E8);
}

uint64_t sub_10002ECD4@<X0>(uint64_t a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  char v95;
  _BYTE v96[24];
  uint64_t v97;
  __int128 v98;
  char v99;
  uint64_t v100;

  v81 = a2;
  v82 = a1;
  v84 = a3;
  v3 = sub_100004F7C(&qword_100118100);
  v4 = __chkstk_darwin(v3);
  v85 = (uint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v83 = (uint64_t *)((char *)&v76 - v6);
  v79 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v79);
  v91 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessibilityTraits(0);
  v92 = *(_QWORD *)(v8 - 8);
  v93 = v8;
  __chkstk_darwin(v8);
  v90 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessibilityChildBehavior(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100004F7C(&qword_100118108);
  v89 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004F7C(&qword_100118110);
  v16 = __chkstk_darwin(v88);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v76 - v20;
  __chkstk_darwin(v19);
  v86 = (char *)&v76 - v22;
  v80 = sub_100004F7C(&qword_100118118);
  v77 = *(_QWORD *)(v80 - 8);
  v23 = __chkstk_darwin(v80);
  v78 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v76 = (char *)&v76 - v26;
  v34 = static HorizontalAlignment.leading.getter(v25, v27, v28, v29, v30, v31, v32, v33);
  v35 = sub_10002F318((uint64_t)&v94);
  v36 = v95;
  v37 = *(_QWORD *)v96;
  v38 = v97;
  v39 = v98;
  v40 = v94;
  v41 = *(_OWORD *)&v96[8];
  v94 = (unint64_t)v34;
  v95 = 0;
  *(_OWORD *)v96 = v40;
  v96[16] = v36;
  v97 = v37;
  v98 = v41;
  v99 = v38;
  v100 = v39;
  static AccessibilityChildBehavior.combine.getter(v35);
  v42 = sub_100004F7C(&qword_100118120);
  v43 = sub_10000522C(&qword_100118128, &qword_100118120, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v13, v42, v43);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v44 = v97;
  v45 = v98;
  v46 = v99;
  v47 = v100;
  sub_10000B64C(*(uint64_t *)v96, *(uint64_t *)&v96[8], v96[16]);
  swift_bridgeObjectRelease(v44);
  v48 = (uint64_t)v86;
  sub_10000B64C(v45, *((uint64_t *)&v45 + 1), v46);
  swift_bridgeObjectRelease(v47);
  *(_QWORD *)&v94 = v42;
  *((_QWORD *)&v94 + 1) = v43;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v94, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v50 = v87;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001000DA2D0, v87, OpaqueTypeConformance2);
  v51 = v15;
  v52 = (uint64_t)v91;
  v53 = (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v51, v50);
  v54 = v90;
  static AccessibilityTraits.isHeader.getter(v53);
  v55 = v88;
  ModifiedContent<>.accessibilityAddTraits(_:)(v54, v88);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v54, v93);
  sub_10000526C((uint64_t)v18, &qword_100118110);
  ModifiedContent<>.accessibilityHeading(_:)(1, v55);
  sub_10000526C((uint64_t)v21, &qword_100118110);
  v56 = enum case for DynamicTypeSize.accessibility2(_:);
  v57 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(v52, v56, v57);
  v58 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v52, v52, v57, v58);
  if ((result & 1) != 0)
  {
    v60 = sub_1000336A0();
    v61 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v62 = v78;
    View.dynamicTypeSize<A>(_:)(v52, v55, v79, v60, v61);
    sub_10000526C(v52, &qword_100116EE8);
    sub_10000526C(v48, &qword_100118110);
    v63 = v77;
    v64 = v76;
    v65 = v80;
    v66 = (*(uint64_t (**)(char *, char *, uint64_t))(v77 + 32))(v76, v62, v80);
    v67 = static VerticalAlignment.lastTextBaseline.getter(v66);
    v68 = (uint64_t)v83;
    *v83 = v67;
    *(_QWORD *)(v68 + 8) = 0x4020000000000000;
    *(_BYTE *)(v68 + 16) = 0;
    v69 = sub_100004F7C(&qword_100118138);
    sub_10002F630(v82, v81 & 1, v68 + *(int *)(v69 + 44));
    v70 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    v70(v62, v64, v65);
    v71 = v85;
    sub_100007C8C(v68, v85, &qword_100118100);
    v72 = v84;
    v70(v84, v62, v65);
    v73 = sub_100004F7C(&qword_100118140);
    v74 = &v72[*(int *)(v73 + 48)];
    *(_QWORD *)v74 = 0;
    v74[8] = 1;
    sub_100007C8C(v71, (uint64_t)&v72[*(int *)(v73 + 64)], &qword_100118100);
    sub_10000526C(v68, &qword_100118100);
    v75 = *(void (**)(char *, uint64_t))(v63 + 8);
    v75(v64, v65);
    sub_10000526C(v71, &qword_100118100);
    return ((uint64_t (*)(char *, uint64_t))v75)(v62, v65);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002F318@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;

  if (qword_100115E68 != -1)
    swift_once(&qword_100115E68, sub_10002E9D8);
  v1 = qword_100117CB0;
  v2 = qword_100117CC8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100117CB8);
  swift_bridgeObjectRetain(v2);
  v3 = Text.init(_:tableName:bundle:comment:)(v1);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Font.largeTitle.getter(v3, v4);
  static Font.Weight.heavy.getter(v10, v11);
  v12 = Font.weight(_:)(v10);
  swift_release(v10);
  v13 = Text.font(_:)(v12, v3, v5, v9, v7);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_release(v12);
  v20 = v17 & 1;
  sub_10000B64C(v3, v5, v9);
  v21 = swift_bridgeObjectRelease(v7);
  v22 = static Color.blue.getter(v21);
  v52 = v22;
  v23 = Text.foregroundStyle<A>(_:)(&v52, v13, v15, v20, v19, &type metadata for Color, &protocol witness table for Color);
  v48 = v24;
  v49 = v23;
  v26 = v25;
  v50 = v27;
  sub_10000B64C(v13, v15, v20);
  swift_release(v22);
  swift_bridgeObjectRelease(v19);
  if (qword_100115E70 != -1)
    swift_once(&qword_100115E70, sub_10002EA14);
  v28 = qword_100117CD0;
  v29 = qword_100117CE8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100117CD8);
  swift_bridgeObjectRetain(v29);
  v30 = Text.init(_:tableName:bundle:comment:)(v28);
  v32 = v31;
  v34 = v33;
  v36 = v35 & 1;
  v37 = static Font.largeTitle.getter(v30, v31);
  static Font.Weight.heavy.getter(v37, v38);
  v39 = Font.weight(_:)(v37);
  swift_release(v37);
  v40 = Text.font(_:)(v39, v30, v32, v36, v34);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  swift_release(v39);
  sub_10000B64C(v30, v32, v36);
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)a1 = v49;
  *(_QWORD *)(a1 + 8) = v48;
  *(_BYTE *)(a1 + 16) = v26 & 1;
  *(_QWORD *)(a1 + 24) = v50;
  *(_QWORD *)(a1 + 32) = v40;
  *(_QWORD *)(a1 + 40) = v42;
  *(_BYTE *)(a1 + 48) = v44 & 1;
  *(_QWORD *)(a1 + 56) = v46;
  sub_100025480(v49, v48, v26 & 1);
  swift_bridgeObjectRetain(v50);
  sub_100025480(v40, v42, v44 & 1);
  swift_bridgeObjectRetain(v46);
  sub_10000B64C(v40, v42, v44 & 1);
  swift_bridgeObjectRelease(v46);
  sub_10000B64C(v49, v48, v26 & 1);
  return swift_bridgeObjectRelease(v50);
}

uint64_t sub_10002F630@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t OpaqueTypeConformance2;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;

  LODWORD(v110) = a2;
  v105 = a1;
  v102 = a3;
  v108 = sub_100004F7C(&qword_100118148);
  __chkstk_darwin(v108);
  v106 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100004F7C(&qword_100118150);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v109 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100004F7C(&qword_100118158);
  v99 = *(_QWORD *)(v101 - 8);
  v5 = __chkstk_darwin(v101);
  v100 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v98 = (char *)&v91 - v7;
  v112 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v112);
  v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CircularProgressViewStyle(0);
  v93 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_100118160);
  v92 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004F7C(&qword_100118168);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100004F7C(&qword_100118170);
  __chkstk_darwin(v94);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004F7C(&qword_100118178);
  v103 = *(_QWORD *)(v22 - 8);
  v104 = v22;
  __chkstk_darwin(v22);
  v91 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100004F7C(&qword_100118180);
  v25 = __chkstk_darwin(v24);
  v95 = (uint64_t)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v91 - v28;
  v107 = v9;
  v111 = (char *)&v91 - v28;
  if ((v110 & 1) != 0)
  {
    v30 = ProgressView<>.init<>()(v27);
    CircularProgressViewStyle.init()(v30);
    v31 = sub_10000522C(&qword_1001181E0, &qword_100118160, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v32 = sub_100004864(&qword_1001181E8, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
    View.progressViewStyle<A>(_:)(v12, v13, v10, v31, v32);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v15, v13);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v19, v16);
    v33 = v94;
    *(_QWORD *)&v21[*(int *)(v94 + 36)] = 0x3FE0000000000000;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v34 = enum case for DynamicTypeSize.xxxLarge(_:);
    v35 = type metadata accessor for DynamicTypeSize(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v9, v34, v35);
    v36 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    result = dispatch thunk of static Equatable.== infix(_:_:)(v9, v9, v35, v36);
    if ((result & 1) == 0)
      goto LABEL_10;
    v38 = sub_100033984();
    v39 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v40 = v91;
    View.dynamicTypeSize<A>(_:)(v9, v33, v112, v38, v39);
    sub_10000526C((uint64_t)v9, &qword_100116EE8);
    sub_10000526C((uint64_t)v21, &qword_100118170);
    v42 = v103;
    v41 = v104;
    v29 = v111;
    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v111, v40, v104);
    v43 = 0;
  }
  else
  {
    v43 = 1;
    v42 = v103;
    v41 = v104;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v29, v43, 1, v41);
  v44 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v45._countAndFlagsBits = 0xD000000000000019;
  v122._object = (void *)0xE000000000000000;
  v45._object = (void *)0x80000001000DA2F0;
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  v122._countAndFlagsBits = 0;
  v47 = NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)v44, v46, v122);

  v48 = sub_100004F7C(&qword_100118188);
  v49 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_1000D1CC0;
  *(_QWORD *)(v49 + 56) = &type metadata for Int;
  *(_QWORD *)(v49 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v49 + 32) = v105;
  v50 = static String.localizedStringWithFormat(_:_:)(v47._countAndFlagsBits, v47._object, v49);
  v52 = v51;
  swift_bridgeObjectRelease(v47._object);
  swift_bridgeObjectRelease(v49);
  v113 = v50;
  v114 = v52;
  v53 = sub_10000B110();
  v54 = Text.init<A>(_:)(&v113, &type metadata for String, v53);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  KeyPath = swift_getKeyPath(&unk_1000D3268, v55);
  v62 = static Font.subheadline.getter(KeyPath);
  v64 = swift_getKeyPath(&unk_1000D30C8, v63);
  v65 = Color.init(_:bundle:)(0xD000000000000016, 0x80000001000DA310, 0);
  v104 = v54;
  v105 = KeyPath;
  v113 = v54;
  v114 = v56;
  v115 = v58 & 1;
  v110 = v60;
  v116 = v60;
  v117 = KeyPath;
  v118 = 2;
  v119 = v64;
  v120 = v62;
  v121 = v65;
  if (qword_100116178 != -1)
    swift_once(&qword_100116178, sub_100080408);
  v67 = qword_100124700;
  v66 = *(_QWORD *)algn_100124708;
  v68 = sub_100004F7C(&qword_100118190);
  v69 = sub_100033774();
  v70 = (uint64_t)v106;
  View.accessibilityIdentifier(_:)(v67, v66, v68, v69);
  sub_10000B64C(v104, v56, v58 & 1);
  swift_release(v65);
  swift_release(v62);
  swift_release(v64);
  swift_release(v105);
  swift_bridgeObjectRelease(v110);
  v71 = sub_100033900();
  v72 = v108;
  v73 = v109;
  View.accessibilityShowsLargeContentViewer()(v108, v71);
  sub_10000526C(v70, &qword_100118148);
  v74 = enum case for DynamicTypeSize.accessibility1(_:);
  v75 = type metadata accessor for DynamicTypeSize(0);
  v76 = (uint64_t)v107;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 104))(v107, v74, v75);
  v77 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v76, v76, v75, v77);
  if ((result & 1) != 0)
  {
    v113 = v72;
    v114 = v71;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v113, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer()>>, 1);
    v79 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v80 = v100;
    v81 = v97;
    View.dynamicTypeSize<A>(_:)(v76, v97, v112, OpaqueTypeConformance2, v79);
    sub_10000526C(v76, &qword_100116EE8);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v73, v81);
    v82 = v99;
    v83 = v98;
    v84 = v101;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v98, v80, v101);
    v85 = (uint64_t)v111;
    v86 = v95;
    sub_100007C8C((uint64_t)v111, v95, &qword_100118180);
    v87 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
    v87(v80, v83, v84);
    v88 = v102;
    sub_100007C8C(v86, v102, &qword_100118180);
    v89 = sub_100004F7C(&qword_1001181D8);
    v87((char *)(v88 + *(int *)(v89 + 48)), v80, v84);
    v90 = *(void (**)(char *, uint64_t))(v82 + 8);
    v90(v83, v84);
    sub_10000526C(v85, &qword_100118180);
    v90(v80, v84);
    return sub_10000526C(v86, &qword_100118180);
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10002FF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v11 = *(_QWORD *)v9;
  v12 = *(unsigned __int8 *)(v9 + 8);
  *(_QWORD *)a9 = static HorizontalAlignment.leading.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a9 + 8) = 0x4030000000000000;
  *(_BYTE *)(a9 + 16) = 0;
  v13 = sub_100004F7C(&qword_1001180D8);
  return sub_10002EA60(v11, v12, a9 + *(int *)(v13 + 44));
}

uint64_t sub_10002FFC4()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x80000001000DA380);
  qword_100117CF0 = result;
  *(_QWORD *)algn_100117CF8 = v1;
  byte_100117D00 = v2 & 1;
  qword_100117D08 = v3;
  return result;
}

uint64_t sub_100030008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;

  v63 = a1;
  v64 = a2;
  v62 = a3;
  v54 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v54);
  v65 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004F7C(&qword_1001181F8);
  __chkstk_darwin(v52);
  v66 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100004F7C(&qword_100118200);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100004F7C(&qword_100118208);
  __chkstk_darwin(v53);
  v59 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_100118210);
  __chkstk_darwin(v7);
  v58 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100004F7C(&qword_100118218);
  v9 = __chkstk_darwin(v61);
  v60 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static VerticalAlignment.center.getter(v9);
  sub_100030504((uint64_t)&v67);
  v12 = v67;
  v13 = v68;
  v14 = v69;
  v15 = v70;
  v16 = v71;
  v17 = v72;
  v18 = v73;
  v19 = v74;
  v67 = v11;
  v68 = 0x4028000000000000;
  LOBYTE(v69) = 0;
  v70 = v12;
  v71 = v13;
  v72 = v14;
  v73 = v15;
  v74 = v16;
  v75 = v17;
  v76 = v18;
  v77 = v19;
  v20 = sub_100004F7C(&qword_100118220);
  v21 = sub_10000522C(&qword_100118228, &qword_100118220, (uint64_t)&protocol conformance descriptor for HStack<A>);
  View.accessibilityIdentifier(_:)(0xD000000000000010, 0x80000001000DA330, v20, v21);
  swift_release(v14);
  swift_release(v13);
  v22 = v12;
  v23 = (uint64_t)v65;
  swift_release(v22);
  swift_release(v15);
  sub_10000B64C(v16, v17, v18);
  swift_bridgeObjectRelease(v19);
  v24 = enum case for DynamicTypeSize.accessibility3(_:);
  v25 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v23, v24, v25);
  v26 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v23, v23, v25, v26);
  if ((result & 1) != 0)
  {
    v28 = sub_100033A74();
    v29 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v30 = v55;
    v31 = (uint64_t)v66;
    View.dynamicTypeSize<A>(_:)(v23, v52, v54, v28, v29);
    sub_10000526C(v23, &qword_100116EE8);
    v32 = sub_10000526C(v31, &qword_1001181F8);
    LOBYTE(v28) = static Edge.Set.vertical.getter(v32);
    v33 = EdgeInsets.init(_all:)(11.0);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    v40 = v56;
    v41 = (uint64_t)v59;
    v42 = v57;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v59, v30, v57);
    v43 = v41 + *(int *)(v53 + 36);
    *(_BYTE *)v43 = v28;
    *(double *)(v43 + 8) = v33;
    *(_QWORD *)(v43 + 16) = v35;
    *(_QWORD *)(v43 + 24) = v37;
    *(_QWORD *)(v43 + 32) = v39;
    *(_BYTE *)(v43 + 40) = 0;
    v44 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v30, v42);
    v45 = static Alignment.leading.getter(v44);
    v46 = v58;
    sub_100033FF8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v58, 0.0, 1, 0.0, 1, v45, v47);
    sub_10000526C(v41, &qword_100118208);
    v48 = v60;
    sub_100007C8C(v46, v60, &qword_100118210);
    v49 = v61;
    *(_BYTE *)(v48 + *(int *)(v61 + 36)) = 0;
    sub_10000526C(v46, &qword_100118210);
    v50 = sub_100033B10();
    View.onTapGesture(count:perform:)(1, v63, v64, v49, v50);
    return sub_10000526C(v48, &qword_100118218);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100030504@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = Image.init(systemName:)(0xD00000000000002BLL, 0x80000001000DA350);
  v24 = Color.init(_:bundle:)(0xD000000000000016, 0x80000001000DA310, 0);
  v2 = static Font.title2.getter(v24);
  static Font.Weight.semibold.getter();
  v23 = Font.weight(_:)(v2);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000D30C8, v3);
  if (qword_100115E78 != -1)
    swift_once(&qword_100115E78, sub_10002FFC4);
  v4 = qword_100117CF0;
  v5 = qword_100117D08;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100117CF8);
  swift_bridgeObjectRetain(v5);
  v6 = Text.init(_:tableName:bundle:comment:)(v4);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.callout.getter(v6, v7);
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  sub_10000B64C(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v24;
  *(_QWORD *)(a1 + 16) = KeyPath;
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v16;
  *(_BYTE *)(a1 + 48) = v18 & 1;
  *(_QWORD *)(a1 + 56) = v20;
  swift_retain(v25);
  swift_retain(v24);
  swift_retain(KeyPath);
  swift_retain(v23);
  sub_100025480(v14, v16, v18 & 1);
  swift_bridgeObjectRetain(v20);
  sub_10000B64C(v14, v16, v18 & 1);
  swift_release(v23);
  swift_release(KeyPath);
  swift_release(v24);
  swift_release(v25);
  return swift_bridgeObjectRelease(v20);
}

uint64_t sub_100030724@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100030008(*v1, v1[1], a1);
}

uint64_t sub_100030734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_10003073C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = "\t";
  sub_100031190(319);
  if (v4 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v5 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v3);
    v6 = type metadata accessor for Bindable(319, v5);
    if (v7 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v6 - 8) + 64;
      v8[3] = &unk_1000D2FB0;
      v8[4] = &unk_1000D2FB0;
      swift_initStructMetadata(a1, 0, 5, v8, a1 + 32);
    }
  }
}

uint64_t sub_1000307E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 36);
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v7);
    v12 = sub_100004F7C(&qword_100116680);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = *(int *)(a3 + 40);
    v18 = a1 + v17;
    v19 = (uint64_t)a2 + v17;
    v21 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v20);
    v22 = type metadata accessor for Bindable(0, v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
    v23 = *(int *)(a3 + 44);
    v24 = *(int *)(a3 + 48);
    v25 = a1 + v23;
    v26 = (uint64_t)a2 + v23;
    *(_WORD *)v25 = *(_WORD *)v26;
    v27 = *(_QWORD *)(v26 + 8);
    *(_QWORD *)(v25 + 8) = v27;
    v28 = (_QWORD *)(a1 + v24);
    v29 = (uint64_t *)((char *)a2 + v24);
    v30 = *v29;
    swift_retain(v27);
    if (v30)
    {
      v31 = v29[1];
      *v28 = v30;
      v28[1] = v31;
      swift_retain(v31);
    }
    else
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
    }
  }
  return a1;
}

double sub_100030958(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _QWORD *v12;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 36));
  v5 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (char *)a1 + *(int *)(a2 + 40);
  v9 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), v7);
  v10 = type metadata accessor for Bindable(0, v9);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 44) + 8)).n128_u64[0];
  v12 = (_QWORD *)((char *)a1 + *(int *)(a2 + 48));
  if (*v12)
    *(_QWORD *)&result = swift_release(v12[1]).n128_u64[0];
  return result;
}

uint64_t sub_100030A40(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(int *)(a3 + 36);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v6);
  v11 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ScenePhase(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = *(int *)(a3 + 40);
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v19 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v18);
  v20 = type metadata accessor for Bindable(0, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v16, v17, v20);
  v21 = *(int *)(a3 + 44);
  v22 = *(int *)(a3 + 48);
  v23 = a1 + v21;
  v24 = (uint64_t)a2 + v21;
  *(_WORD *)v23 = *(_WORD *)v24;
  v25 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 8) = v25;
  v26 = (_QWORD *)(a1 + v22);
  v27 = (uint64_t *)((char *)a2 + v22);
  v28 = *v27;
  swift_retain(v25);
  if (v28)
  {
    v29 = v27[1];
    *v26 = v28;
    v26[1] = v29;
    swift_retain(v29);
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  return a1;
}

uint64_t *sub_100030B84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 36);
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    sub_10000526C((uint64_t)a1 + v10, &qword_100116680);
    v13 = sub_100004F7C(&qword_100116680);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v17 = *(int *)(a3 + 40);
  v18 = (uint64_t)a1 + v17;
  v19 = (uint64_t)a2 + v17;
  v20 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v9);
  v21 = type metadata accessor for Bindable(0, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v18, v19, v21);
  v22 = *(int *)(a3 + 44);
  v23 = (uint64_t)a1 + v22;
  v24 = (uint64_t)a2 + v22;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  *(_BYTE *)(v23 + 1) = *(_BYTE *)(v24 + 1);
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(_QWORD *)(v24 + 8);
  *(_QWORD *)(v23 + 8) = v26;
  swift_retain(v26);
  swift_release(v25);
  v27 = *(int *)(a3 + 48);
  v28 = (uint64_t *)((char *)a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  v30 = *(uint64_t *)((char *)a1 + v27);
  v31 = *v29;
  if (!v30)
  {
    if (v31)
    {
      v34 = v29[1];
      *v28 = v31;
      v28[1] = v34;
      swift_retain(v34);
      return a1;
    }
LABEL_12:
    *(_OWORD *)v28 = *(_OWORD *)v29;
    return a1;
  }
  if (!v31)
  {
    swift_release(v28[1]);
    goto LABEL_12;
  }
  v32 = v29[1];
  v33 = v28[1];
  *v28 = v31;
  v28[1] = v32;
  swift_retain(v32);
  swift_release(v33);
  return a1;
}

uint64_t sub_100030D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 36);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ScenePhase(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v11);
  v16 = type metadata accessor for Bindable(0, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
  v17 = *(int *)(a3 + 48);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  if (*v19)
  {
    v21 = v19[1];
    *v18 = v20;
    v18[1] = v21;
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  return a1;
}

uint64_t *sub_100030E60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v9 = *(int *)(a3 + 36);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    sub_10000526C((uint64_t)a1 + v9, &qword_100116680);
    v12 = sub_100004F7C(&qword_100116680);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  v14 = *(int *)(a3 + 40);
  v15 = (uint64_t)a1 + v14;
  v16 = (uint64_t)a2 + v14;
  v17 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v8);
  v18 = type metadata accessor for Bindable(0, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v15, v16, v18);
  v19 = *(int *)(a3 + 44);
  v20 = (uint64_t)a1 + v19;
  v21 = (uint64_t)a2 + v19;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  *(_BYTE *)(v20 + 1) = *(_BYTE *)(v21 + 1);
  v22 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 8);
  swift_release(v22);
  v23 = *(int *)(a3 + 48);
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  v26 = *(uint64_t *)((char *)a1 + v23);
  v27 = *v25;
  if (!v26)
  {
    if (v27)
    {
      v30 = v25[1];
      *v24 = v27;
      v24[1] = v30;
      return a1;
    }
LABEL_11:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    return a1;
  }
  if (!v27)
  {
    swift_release(v24[1]);
    goto LABEL_11;
  }
  v28 = v25[1];
  v29 = v24[1];
  *v24 = v27;
  v24[1] = v28;
  swift_release(v29);
  return a1;
}

uint64_t sub_100030FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100031004);
}

uint64_t sub_100031004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = sub_100004F7C(qword_100117D10);
  v8 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v6;
    v10 = *(int *)(a3 + 36);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1 + v10, a2, v9);
  }
  v11 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), v7);
  v12 = type metadata accessor for Bindable(0, v11);
  v8 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v12;
    v10 = *(int *)(a3 + 40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1 + v10, a2, v9);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 44) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_1000310CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000310D8);
}

uint64_t sub_1000310D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = sub_100004F7C(qword_100117D10);
  v10 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v8;
    v12 = *(int *)(a4 + 36);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1 + v12, a2, a2, v11);
  }
  v13 = type metadata accessor for LibraryListViewModel(255, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), v9);
  result = type metadata accessor for Bindable(0, v13);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = result;
    v12 = *(int *)(a4 + 40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1 + v12, a2, a2, v11);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 44) + 8) = a2;
  return result;
}

void sub_100031190(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100117D98)
  {
    v2 = type metadata accessor for ScenePhase(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100117D98);
  }
}

uint64_t sub_1000311E4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000DDA28, 1);
}

unint64_t sub_100031218()
{
  unint64_t result;

  result = qword_100117DC8;
  if (!qword_100117DC8)
  {
    result = swift_getWitnessTable(&unk_1000D88B4, &type metadata for LibraryItemView);
    atomic_store(result, (unint64_t *)&qword_100117DC8);
  }
  return result;
}

unint64_t sub_10003125C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117DE8;
  if (!qword_100117DE8)
  {
    v1 = sub_1000050C8(&qword_100117DD8);
    sub_1000312E0();
    sub_10000522C((unint64_t *)&qword_100116F68, &qword_100116F70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117DE8);
  }
  return result;
}

unint64_t sub_1000312E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117DF0;
  if (!qword_100117DF0)
  {
    v1 = sub_1000050C8(&qword_100117DF8);
    sub_10000522C(&qword_100117E00, &qword_100117E08, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117DF0);
  }
  return result;
}

unint64_t sub_10003137C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117E28;
  if (!qword_100117E28)
  {
    v1 = sub_1000050C8(&qword_100117E20);
    sub_100031400();
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117E28);
  }
  return result;
}

unint64_t sub_100031400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117E30;
  if (!qword_100117E30)
  {
    v1 = sub_1000050C8(&qword_100117E38);
    sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117E30);
  }
  return result;
}

unint64_t sub_100031484()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117E80;
  if (!qword_100117E80)
  {
    v1 = sub_1000050C8(&qword_100117E78);
    sub_100031508();
    sub_100004864(&qword_1001165D8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117E80);
  }
  return result;
}

unint64_t sub_100031508()
{
  unint64_t result;

  result = qword_100117E88;
  if (!qword_100117E88)
  {
    result = swift_getWitnessTable(&unk_1000D7F18, &type metadata for DeviceToDeviceEncryptionView);
    atomic_store(result, (unint64_t *)&qword_100117E88);
  }
  return result;
}

unint64_t sub_10003154C()
{
  unint64_t result;

  result = qword_100117E90;
  if (!qword_100117E90)
  {
    result = swift_getWitnessTable(&unk_1000D2478, &type metadata for HistorySortSelection);
    atomic_store(result, (unint64_t *)&qword_100117E90);
  }
  return result;
}

uint64_t sub_100031590@<X0>(uint64_t a1@<X8>)
{
  return sub_100016FB4(a1);
}

uint64_t sub_1000315B4()
{
  return 16;
}

__n128 sub_1000315C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000315CC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100028DC4(v2[4], v2[2], v2[3], a1, a2);
}

double sub_1000315DC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v7, v8, a4) - 8) + 80);
  return sub_10002E80C(a1, a2, v4 + ((v9 + 32) & ~v9), v7, v8);
}

uint64_t sub_100031648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v7, v8, a4) - 8) + 80);
  return sub_10002E8DC(a1, a2, v4 + ((v9 + 32) & ~v9), v7, v8);
}

uint64_t sub_1000316B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (**v7)(void);

  result = type metadata accessor for LibraryListView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  v7 = (uint64_t (**)(void))(v4 + *(int *)(result + 48) + ((v6 + 32) & ~v6));
  if (*v7)
    return (*v7)();
  return result;
}

uint64_t sub_100031704@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100029EF8(v2[4], v2[2], v2[3], a1, a2);
}

double sub_100031714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000329E4(6, 0xAu, a3, a4);
}

uint64_t sub_100031720@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100031748(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_100031770()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100031790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000317A4(a1, a2, a3, a4, &qword_100117F50, (uint64_t (*)(char *))&EnvironmentValues.symbolRenderingMode.setter);
}

uint64_t sub_1000317A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(char *))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = sub_100004F7C(a5);
  __chkstk_darwin(v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007C8C(a1, (uint64_t)v11, a5);
  return a6(v11);
}

double sub_100031834(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v7, v8, a4) - 8) + 80);
  return sub_10002CF78(a1, a2, v4 + ((v9 + 32) & ~v9), v7, v8);
}

uint64_t sub_1000318A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324D4(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002CFC0, a3, a4);
}

uint64_t sub_1000318AC()
{
  uint64_t *v0;

  return sub_10002D024(v0[4], v0[2], v0[3]);
}

uint64_t sub_1000318B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_100016EE0();
  *a1 = result & 1;
  return result;
}

double sub_1000318E4(char *a1)
{
  return sub_100016F38(*a1);
}

uint64_t sub_100031908()
{
  return 16;
}

__n128 sub_100031914(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_100031924(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v4, v5, a1) - 8) + 80);
  sub_10002E540(v2 + ((v6 + 32) & ~v6), v4, v5, a2);
}

uint64_t sub_100031980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_100117EAC);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100010C20;
  return sub_10002E73C(v9, v6, v7);
}

uint64_t sub_100031A00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031A44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031A80@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10002D1C4(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_100031A8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117ED0;
  if (!qword_100117ED0)
  {
    v1 = sub_1000050C8(&qword_100117EC0);
    sub_10000522C(&qword_100117ED8, &qword_100117EE0, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117ED0);
  }
  return result;
}

double sub_100031B2C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v6, v7, a4) - 8) + 80);
  return sub_10002D4C4(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_100031B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10002D528(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_100031B90@<X0>(uint64_t a1@<X8>)
{
  return sub_10002DF74(a1);
}

unint64_t sub_100031B98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117F00;
  if (!qword_100117F00)
  {
    v1 = sub_1000050C8(&qword_100117EF0);
    sub_100031C1C();
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117F00);
  }
  return result;
}

unint64_t sub_100031C1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117F08;
  if (!qword_100117F08)
  {
    v1 = sub_1000050C8(&qword_100117F10);
    sub_100031CA0();
    sub_10000522C(&qword_100117F38, &qword_100117F40, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117F08);
  }
  return result;
}

unint64_t sub_100031CA0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100117F18;
  if (!qword_100117F18)
  {
    v1 = sub_1000050C8(&qword_100117F20);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    sub_10000522C(&qword_100117F28, &qword_100117F30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117F18);
  }
  return result;
}

uint64_t sub_100031D48()
{
  uint64_t *v0;

  return sub_10002E2E8(v0[4], v0[2], v0[3]);
}

uint64_t sub_100031D54@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10002E388(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_100031D60()
{
  return sub_10002E444();
}

uint64_t sub_100031D68()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_100031D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000317A4(a1, a2, a3, a4, &qword_100117F50, (uint64_t (*)(char *))&EnvironmentValues.symbolRenderingMode.setter);
}

unint64_t sub_100031DB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117F80;
  if (!qword_100117F80)
  {
    v1 = sub_1000050C8(&qword_100117F88);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117F80);
  }
  return result;
}

uint64_t sub_100031E38@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10002DBBC(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_100031E44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117FB8;
  if (!qword_100117FB8)
  {
    v1 = sub_1000050C8(&qword_100117FB0);
    sub_100031EC8();
    sub_10000522C(&qword_100117FE0, &qword_100117FE8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117FB8);
  }
  return result;
}

unint64_t sub_100031EC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117FC0;
  if (!qword_100117FC0)
  {
    v1 = sub_1000050C8(&qword_100117FC8);
    sub_10000522C(&qword_100117FD0, &qword_100117FD8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117FC0);
  }
  return result;
}

unint64_t sub_100031F4C()
{
  unint64_t result;

  result = qword_100118000;
  if (!qword_100118000)
  {
    result = swift_getWitnessTable(&unk_1000D2748, &type metadata for HistorySortSelection.SortType);
    atomic_store(result, (unint64_t *)&qword_100118000);
  }
  return result;
}

double sub_100031F90@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10002AB5C(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

unint64_t sub_100031F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118030;
  if (!qword_100118030)
  {
    v1 = sub_1000050C8(&qword_100118028);
    sub_100032020();
    sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118030);
  }
  return result;
}

unint64_t sub_100032020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118038;
  if (!qword_100118038)
  {
    v1 = sub_1000050C8(&qword_100118040);
    sub_1000320A4();
    sub_10000522C(&qword_100118050, &qword_100118058, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118038);
  }
  return result;
}

unint64_t sub_1000320A4()
{
  unint64_t result;

  result = qword_100118048;
  if (!qword_100118048)
  {
    result = swift_getWitnessTable(&unk_1000D3214, &type metadata for LibraryHeader);
    atomic_store(result, (unint64_t *)&qword_100118048);
  }
  return result;
}

double sub_1000320E8@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10002AC1C(v2[4], v2[2], v2[3], a1, a2);
}

unint64_t sub_1000320F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118068;
  if (!qword_100118068)
  {
    v1 = sub_1000050C8(&qword_100118060);
    sub_100032178();
    sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118068);
  }
  return result;
}

unint64_t sub_100032178()
{
  unint64_t result;

  result = qword_100118070;
  if (!qword_100118070)
  {
    result = swift_getWitnessTable(&unk_1000D31C4, &type metadata for LibrarySyncErrorView);
    atomic_store(result, (unint64_t *)&qword_100118070);
  }
  return result;
}

uint64_t sub_1000321BC()
{
  return EnvironmentValues.listSectionSpacing.getter();
}

uint64_t sub_1000321DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000317A4(a1, a2, a3, a4, &qword_100118008, (uint64_t (*)(char *))&EnvironmentValues.listSectionSpacing.setter);
}

uint64_t sub_100032204@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v6, v7, a2) - 8) + 80);
  return sub_10002AD48(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_10003226C()
{
  unint64_t result;

  result = qword_100118088;
  if (!qword_100118088)
  {
    result = swift_getWitnessTable(&unk_1000D5304, &type metadata for HistoryListGroup);
    atomic_store(result, (unint64_t *)&qword_100118088);
  }
  return result;
}

uint64_t sub_1000322B0(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000050C8(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100032314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001180A0;
  if (!qword_1001180A0)
  {
    v1 = sub_1000050C8(&qword_100118020);
    sub_100032398();
    sub_10000522C(&qword_100118080, &qword_100117E48, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001180A0);
  }
  return result;
}

unint64_t sub_100032398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001180A8;
  if (!qword_1001180A8)
  {
    v1 = sub_1000050C8(&qword_100118010);
    sub_100032434(&qword_1001180B0, &qword_100118018, (void (*)(void))sub_1000320F4);
    sub_10000522C(&qword_100118078, &qword_100117E40, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001180A8);
  }
  return result;
}

uint64_t sub_100032434(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000050C8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000324A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10002B4B4(v1[6], v1[7], v1[2], v1[3], a1);
}

uint64_t sub_1000324B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002CC08(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1000324C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000324D4(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002B9A0, a3, a4);
}

uint64_t sub_1000324D4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v6, v7, a4) - 8) + 80);
  return a2(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_100032550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000326CC((uint64_t (*)(unint64_t, _QWORD, uint64_t, uint64_t))sub_10002C1B8, a2, a3, a4);
}

uint64_t sub_10003255C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002C240(*(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100032568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002C588(*(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100032578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for LibraryListView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  swift_release(*(_QWORD *)(v4 + v10));
  v13 = (_QWORD *)(v4 + v10 + v7[9]);
  v14 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v17 = v12 + v7[10];
  v18 = type metadata accessor for LibraryListViewModel(255, v5, v6, v16);
  v19 = type metadata accessor for Bindable(0, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  swift_release(*(_QWORD *)(v12 + v7[11] + 8));
  v20 = (_QWORD *)(v12 + v7[12]);
  if (*v20)
    swift_release(v20[1]);
  v21 = (v11 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 8;

  return swift_deallocObject(v4, v22, v9 | 7);
}

uint64_t sub_1000326C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000326CC((uint64_t (*)(unint64_t, _QWORD, uint64_t, uint64_t))sub_10002C858, a2, a3, a4);
}

uint64_t sub_1000326CC(uint64_t (*a1)(unint64_t, _QWORD, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for LibraryListView(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return a1(v4 + v8, *(_QWORD *)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)), v5, v6);
}

uint64_t sub_100032740@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0x6873617274, 0xE500000000000000);
  *a1 = result;
  return result;
}

uint64_t sub_100032774@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003279C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000327C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;

  v5 = v4[4];
  v6 = v4[5];
  v7 = (int *)type metadata accessor for LibraryListView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 48) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  swift_unknownObjectRelease(v4[2]);
  v12 = (char *)v4 + v10;
  swift_release(*(_QWORD *)((char *)v4 + v10));
  v13 = (_QWORD *)((char *)v4 + v10 + v7[9]);
  v14 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v17 = &v12[v7[10]];
  v18 = type metadata accessor for LibraryListViewModel(255, v5, v6, v16);
  v19 = type metadata accessor for Bindable(0, v18);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  swift_release(*(_QWORD *)&v12[v7[11] + 8]);
  v20 = &v12[v7[12]];
  if (*(_QWORD *)v20)
    swift_release(*((_QWORD *)v20 + 1));
  v21 = (v11 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = v21 + 8;

  return swift_deallocObject(v4, v22, v9 | 7);
}

uint64_t sub_100032914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = v4[4];
  v8 = v4[5];
  v9 = *(_QWORD *)(type metadata accessor for LibraryListView(0, v7, v8, a4) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v4[2];
  v12 = v4[3];
  v13 = (uint64_t)v4 + v10;
  v14 = *(_QWORD *)((char *)v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_1001180CC);
  *(_QWORD *)(v5 + 16) = v15;
  *v15 = v5;
  v15[1] = sub_1000101B8;
  return sub_10002CA1C(a1, v11, v12, v13, v14, v7, v8);
}

double sub_1000329D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000329E4(3, 0xAu, a3, a4);
}

double sub_1000329E4(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v4 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v7, v8, a4) - 8) + 80);
  return sub_10002CEE4(v4 + ((v9 + 32) & ~v9), v7, v8, a1, a2);
}

double sub_100032A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000329E4(11, 9u, a3, a4);
}

uint64_t sub_100032A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = (int *)type metadata accessor for LibraryListView(0, v5, v6, a4);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = v4 + v10;
  swift_release(*(_QWORD *)(v4 + v10));
  v13 = (_QWORD *)(v4 + v10 + v7[9]);
  v14 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  v17 = v12 + v7[10];
  v18 = type metadata accessor for LibraryListViewModel(255, v5, v6, v16);
  v19 = type metadata accessor for Bindable(0, v18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  swift_release(*(_QWORD *)(v12 + v7[11] + 8));
  v20 = (_QWORD *)(v12 + v7[12]);
  if (*v20)
    swift_release(v20[1]);
  return swift_deallocObject(v4, v10 + v11, v9 | 7);
}

double sub_100032B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LibraryListView(0, v5, v6, a4) - 8) + 80);
  return sub_10002AD10(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

_QWORD *initializeBufferWithCopyOfBuffer for LibrarySyncErrorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for LibrarySyncErrorView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for LibrarySyncErrorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for LibrarySyncErrorView(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for LibrarySyncErrorView()
{
  return &type metadata for LibrarySyncErrorView;
}

uint64_t getEnumTagSinglePayload for LibraryHeader(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryHeader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryHeader()
{
  return &type metadata for LibraryHeader;
}

uint64_t sub_100032D34(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t TupleTypeMetadata3;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  ValueMetadata *v94;
  void *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t WitnessTable;

  v1 = *a1;
  v2 = a1[1];
  v92 = type metadata accessor for NavigationPath(255);
  v91 = sub_1000050C8(&qword_100117DA8);
  v90 = sub_1000050C8(&qword_100117DB0);
  v89 = sub_1000050C8(&qword_100117DB8);
  v88 = sub_1000050C8(&qword_100117DC0);
  v87 = sub_1000050C8(&qword_100117508);
  v3 = type metadata accessor for UUID(255);
  v5 = type metadata accessor for LibraryItemContextMenu(255, v1, v2, v4);
  v6 = type metadata accessor for ModifiedContent(255, &type metadata for LibraryItemView, v5);
  v109 = sub_100031218();
  WitnessTable = swift_getWitnessTable(&unk_1000D2E18, v5);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v8 = type metadata accessor for Button(255, v6, v7);
  v9 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  v11 = sub_1000050C8(&qword_100116EE8);
  v107 = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v8);
  v108 = sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v13 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v93 = (void *)v10;
  v94 = (ValueMetadata *)v11;
  v95 = (void *)v12;
  v96 = (void *)v13;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 0);
  v15 = sub_1000050C8(&qword_100117DD0);
  v16 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, v15);
  v17 = sub_1000050C8(&qword_100117DD8);
  v93 = (void *)v10;
  v94 = (ValueMetadata *)v11;
  v95 = (void *)v12;
  v96 = (void *)v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
  v19 = sub_10000522C(&qword_100117DE0, &qword_100117DD0, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v105 = OpaqueTypeConformance2;
  v106 = v19;
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v21 = sub_10003125C();
  v93 = (void *)v16;
  v94 = (ValueMetadata *)v17;
  v95 = (void *)v20;
  v96 = (void *)v21;
  v22 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 0);
  v23 = sub_10000522C(&qword_100117E10, &qword_100117508, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = sub_100004864((unint64_t *)&qword_100117E18, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v93 = (void *)v87;
  v94 = (ValueMetadata *)v3;
  v95 = (void *)v22;
  v96 = (void *)v23;
  v97 = (void *)v24;
  v25 = type metadata accessor for ForEach(255, &v93);
  v26 = type metadata accessor for Section(255, v88, v25, &type metadata for EmptyView);
  v27 = sub_1000050C8(&qword_100117E20);
  v28 = sub_10003137C();
  v93 = (void *)v27;
  v94 = (ValueMetadata *)v28;
  v29 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.accessibilityShowsLargeContentViewer()>>, 1);
  v93 = (void *)v16;
  v94 = (ValueMetadata *)v17;
  v95 = (void *)v20;
  v96 = (void *)v21;
  v104 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v25);
  v101 = v29;
  v102 = v30;
  v103 = &protocol witness table for EmptyView;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v26);
  v93 = (void *)v26;
  v94 = (ValueMetadata *)v31;
  v32 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.headerProminence(_:)>>, 0);
  v33 = sub_1000050C8(&qword_100116550);
  v34 = type metadata accessor for ModifiedContent(255, v32, v33);
  v35 = sub_1000050C8(&qword_100117E40);
  v36 = type metadata accessor for ModifiedContent(255, v34, v35);
  v37 = sub_1000050C8(&qword_100117E48);
  v38 = type metadata accessor for ModifiedContent(255, v36, v37);
  v39 = sub_10000522C(&qword_100117E50, &qword_100117DB8, (uint64_t)&protocol conformance descriptor for [A]);
  v93 = (void *)v89;
  v94 = (ValueMetadata *)&type metadata for String;
  v95 = (void *)v38;
  v96 = (void *)v39;
  v97 = &protocol witness table for String;
  v40 = type metadata accessor for ForEach(255, &v93);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v91, v90, v40, 0, 0);
  v42 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v42);
  v93 = &type metadata for Never;
  v94 = (ValueMetadata *)v42;
  v95 = &protocol witness table for Never;
  v96 = (void *)v43;
  v44 = type metadata accessor for List(255, &v93);
  v45 = type metadata accessor for ShazamUpsellOverlayModifier(255);
  v46 = type metadata accessor for ModifiedContent(255, v44, v45);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for List<A, B>, v44);
  v48 = sub_100004864(&qword_100117E58, type metadata accessor for ShazamUpsellOverlayModifier, (uint64_t)&unk_1000D8008);
  v99 = v47;
  v100 = v48;
  v49 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v93 = (void *)v46;
  v94 = (ValueMetadata *)v49;
  v50 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 0);
  v93 = (void *)v46;
  v94 = (ValueMetadata *)v49;
  v51 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.contentMargins(_:_:for:)>>, 1);
  v93 = (void *)v50;
  v94 = (ValueMetadata *)v51;
  v52 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
  v93 = (void *)v50;
  v94 = (ValueMetadata *)v51;
  v53 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v54 = sub_10000B110();
  v93 = (void *)v52;
  v94 = (ValueMetadata *)&type metadata for String;
  v95 = (void *)v53;
  v96 = (void *)v54;
  v55 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 0);
  v93 = (void *)v52;
  v94 = (ValueMetadata *)&type metadata for String;
  v95 = (void *)v53;
  v96 = (void *)v54;
  v56 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.navigationTitle<A>(_:)>>, 1);
  v93 = (void *)v55;
  v94 = (ValueMetadata *)&type metadata for Bool;
  v95 = (void *)v56;
  v96 = &protocol witness table for Bool;
  v57 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.onScrollGeometryChange<A>(for:of:action:)>>, 0);
  v58 = sub_10001C11C();
  v59 = type metadata accessor for TrackPageView(255);
  v93 = (void *)v55;
  v94 = (ValueMetadata *)&type metadata for Bool;
  v95 = (void *)v56;
  v96 = &protocol witness table for Bool;
  v60 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.onScrollGeometryChange<A>(for:of:action:)>>, 1);
  v61 = sub_100004864(&qword_1001174F8, (uint64_t (*)(uint64_t))sub_10001C11C, (uint64_t)&protocol conformance descriptor for NSObject);
  v62 = sub_100004864(&qword_100116620, type metadata accessor for TrackPageView, (uint64_t)&unk_1000D3458);
  v93 = (void *)v57;
  v94 = (ValueMetadata *)v58;
  v95 = (void *)v59;
  v96 = (void *)v60;
  v97 = (void *)v61;
  v98 = v62;
  v63 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 0);
  v64 = sub_1000050C8(&qword_100117E60);
  v93 = (void *)v57;
  v94 = (ValueMetadata *)v58;
  v95 = (void *)v59;
  v96 = (void *)v60;
  v97 = (void *)v61;
  v98 = v62;
  v65 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  v66 = sub_1000050C8(&qword_100117E68);
  v67 = sub_10000522C(&qword_100117E70, &qword_100117E68, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v93 = (void *)v66;
  v94 = (ValueMetadata *)v67;
  v68 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v93 = (void *)v63;
  v94 = (ValueMetadata *)v64;
  v95 = (void *)v65;
  v96 = (void *)v68;
  v69 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 0);
  v70 = sub_1000050C8(&qword_100117E78);
  v93 = (void *)v63;
  v94 = (ValueMetadata *)v64;
  v95 = (void *)v65;
  v96 = (void *)v68;
  v71 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v72 = sub_100031484();
  v93 = (void *)v69;
  v94 = (ValueMetadata *)v70;
  v95 = (void *)v71;
  v96 = (void *)v72;
  v73 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 0);
  v93 = (void *)v69;
  v94 = (ValueMetadata *)v70;
  v95 = (void *)v71;
  v96 = (void *)v72;
  v74 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v75 = type metadata accessor for NavigationStack(255, v92, v73, v74);
  v76 = sub_1000050C8(&qword_100116F70);
  v77 = type metadata accessor for ModifiedContent(255, v75, v76);
  swift_getWitnessTable(&protocol conformance descriptor for NavigationStack<A, B>, v75);
  sub_10000522C((unint64_t *)&qword_100116F68, &qword_100116F70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v78 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v77);
  v79 = sub_10003154C();
  v93 = (void *)v77;
  v94 = &type metadata for HistorySortSelection;
  v95 = (void *)v78;
  v96 = (void *)v79;
  v80 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v81 = type metadata accessor for ScenePhase(255);
  v93 = (void *)v77;
  v94 = &type metadata for HistorySortSelection;
  v95 = (void *)v78;
  v96 = (void *)v79;
  v82 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v83 = sub_100004864(&qword_100117E98, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v93 = (void *)v80;
  v94 = (ValueMetadata *)v81;
  v95 = (void *)v82;
  v96 = (void *)v83;
  v84 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v85 = type metadata accessor for ModifiedContent(255, v84, &type metadata for _AppearanceActionModifier);
  v93 = (void *)v80;
  v94 = (ValueMetadata *)v81;
  v95 = (void *)v82;
  v96 = (void *)v83;
  swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v85);
}

uint64_t sub_100033680(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DDA84, 1);
}

uint64_t sub_100033690(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DDA5C, 1);
}

unint64_t sub_1000336A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100118130;
  if (!qword_100118130)
  {
    v1 = sub_1000050C8(&qword_100118110);
    v2[0] = sub_1000050C8(&qword_100118120);
    v2[1] = sub_10000522C(&qword_100118128, &qword_100118120, (uint64_t)&protocol conformance descriptor for VStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118130);
  }
  return result;
}

unint64_t sub_100033774()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118198;
  if (!qword_100118198)
  {
    v1 = sub_1000050C8(&qword_100118190);
    sub_1000337F8();
    sub_10000522C(&qword_100117008, (uint64_t *)&unk_100117010, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118198);
  }
  return result;
}

unint64_t sub_1000337F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001181A0;
  if (!qword_1001181A0)
  {
    v1 = sub_1000050C8(&qword_1001181A8);
    sub_10003387C();
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001181A0);
  }
  return result;
}

unint64_t sub_10003387C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001181B0;
  if (!qword_1001181B0)
  {
    v1 = sub_1000050C8(&qword_1001181B8);
    sub_10000522C(&qword_1001181C0, &qword_1001181C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001181B0);
  }
  return result;
}

unint64_t sub_100033900()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001181D0;
  if (!qword_1001181D0)
  {
    v1 = sub_1000050C8(&qword_100118148);
    sub_100033774();
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001181D0);
  }
  return result;
}

unint64_t sub_100033984()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1001181F0;
  if (!qword_1001181F0)
  {
    v1 = sub_1000050C8(&qword_100118170);
    v2[0] = sub_1000050C8(&qword_100118160);
    v2[1] = type metadata accessor for CircularProgressViewStyle(255);
    v2[2] = sub_10000522C(&qword_1001181E0, &qword_100118160, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v2[3] = sub_100004864(&qword_1001181E8, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001181F0);
  }
  return result;
}

unint64_t sub_100033A74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118230;
  if (!qword_100118230)
  {
    v1 = sub_1000050C8(&qword_1001181F8);
    sub_10000522C(&qword_100118228, &qword_100118220, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118230);
  }
  return result;
}

unint64_t sub_100033B10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118238;
  if (!qword_100118238)
  {
    v1 = sub_1000050C8(&qword_100118218);
    sub_100033B94();
    sub_10000522C(&qword_100118250, &qword_100118258, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118238);
  }
  return result;
}

unint64_t sub_100033B94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118240;
  if (!qword_100118240)
  {
    v1 = sub_1000050C8(&qword_100118210);
    sub_100033C00();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118240);
  }
  return result;
}

unint64_t sub_100033C00()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100118248;
  if (!qword_100118248)
  {
    v1 = sub_1000050C8(&qword_100118208);
    v2[0] = sub_1000050C8(&qword_1001181F8);
    v2[1] = sub_1000050C8(&qword_100116EE8);
    v2[2] = sub_100033A74();
    v2[3] = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118248);
  }
  return result;
}

uint64_t sub_100033CD8()
{
  return sub_10000522C(&qword_100118260, &qword_100118268, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_100033D04()
{
  _QWORD v1[2];

  v1[0] = sub_1000050C8(&qword_100118218);
  v1[1] = sub_100033B10();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
}

double sub_100033D54@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&qword_100116508, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_100116510).n128_u64[0];
  return result;
}

double sub_100033DB8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_100117BC8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_100117BD0).n128_u64[0];
  return result;
}

__n128 sub_100033E1C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(uint64_t, uint64_t, uint64_t), uint64_t *a18)
{
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v34;
  double v35;
  double v36;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  _OWORD v53[7];

  v19 = a9;
  v20 = a17;
  v21 = a18;
  v22 = a15;
  v23 = a14;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a5;
  if ((a6 & 1) != 0)
    v32 = v29;
  if (v27 > v29 || v29 > v32)
    goto LABEL_22;
  v34 = a7;
  if ((_DWORD)v31)
    v34 = -INFINITY;
  v35 = a10;
  if ((a11 & 1) != 0)
    v35 = v34;
  v36 = a12;
  if ((a13 & 1) != 0)
    v36 = v35;
  if (v34 > v35 || v35 > v36)
  {
LABEL_22:
    v51 = a5;
    v52 = a7;
    v49 = a1;
    v50 = a3;
    v47 = v28;
    v48 = v26;
    v46 = v31;
    v39 = static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    v41 = v39;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v31 = v46;
    v28 = v47;
    v26 = v48;
    v23 = a14;
    v22 = a15;
    v24 = a12;
    v25 = a10;
    a1 = v49;
    a3 = v50;
    a5 = v51;
    a7 = v52;
    v21 = a18;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v53, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, a11 & 1, *(_QWORD *)&v24, a13 & 1, v23, v22);
  v20(v18, v19, a16);
  v42 = v19 + *(int *)(sub_100004F7C(v21) + 36);
  v43 = v53[5];
  *(_OWORD *)(v42 + 64) = v53[4];
  *(_OWORD *)(v42 + 80) = v43;
  *(_OWORD *)(v42 + 96) = v53[6];
  v44 = v53[1];
  *(_OWORD *)v42 = v53[0];
  *(_OWORD *)(v42 + 16) = v44;
  result = (__n128)v53[3];
  *(_OWORD *)(v42 + 32) = v53[2];
  *(__n128 *)(v42 + 48) = result;
  return result;
}

double sub_100033FF8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&qword_100118208, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_100118210).n128_u64[0];
  return result;
}

double sub_10003405C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1001189C8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_1001189D0).n128_u64[0];
  return result;
}

_QWORD *sub_1000340C0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v40;
    v19 = a10;
    a1 = v41;
    a3 = v42;
    v18 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 16);
  *a9 = *(_OWORD *)v15;
  a9[1] = v34;
  v35 = *(_OWORD *)(v15 + 48);
  a9[2] = *(_OWORD *)(v15 + 32);
  a9[3] = v35;
  v36 = v45[5];
  a9[8] = v45[4];
  a9[9] = v36;
  a9[10] = v45[6];
  v37 = v45[1];
  a9[4] = v45[0];
  a9[5] = v37;
  v38 = v45[3];
  a9[6] = v45[2];
  a9[7] = v38;
  return sub_100011EE4((_QWORD *)v15);
}

double sub_100034264@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)_s17ArtistDetailsViewVMa, (void (*)(uint64_t, uint64_t, uint64_t))sub_10000B340, &qword_1001189A0).n128_u64[0];
  return result;
}

id sub_1000342C8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, void *a16, char a17)
{
  double v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v30;
  double v31;
  double v32;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a1;
  v19 = a15;
  v20 = a12;
  v21 = a10;
  v22 = a2 & 1;
  v23 = a1;
  if ((_DWORD)v22)
    v23 = -INFINITY;
  v24 = a4 & 1;
  v25 = a3;
  if ((a4 & 1) != 0)
    v25 = v23;
  v26 = a6 & 1;
  v27 = a8 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v25;
  if (v23 > v25 || v25 > v28)
    goto LABEL_22;
  v30 = a7;
  if ((a8 & 1) != 0)
    v30 = -INFINITY;
  v31 = a10;
  if ((a11 & 1) != 0)
    v31 = v30;
  v32 = a12;
  if ((a13 & 1) != 0)
    v32 = v31;
  if (v30 > v31 || v31 > v32)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v40 = v22;
    v34 = static os_log_type_t.fault.getter();
    v35 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v19 = a15;
    v22 = v40;
    v17 = a1;
    v21 = a10;
    a3 = v42;
    v20 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&v17, v22, *(_QWORD *)&a3, v24, *(_QWORD *)&a5, v26, *(_QWORD *)&a7, v27, *(_QWORD *)&v21, a11 & 1, *(_QWORD *)&v20, a13 & 1, a14, v19);
  *(_QWORD *)a9 = a16;
  *(_BYTE *)(a9 + 8) = a17 & 1;
  v36 = v45[5];
  *(_OWORD *)(a9 + 80) = v45[4];
  *(_OWORD *)(a9 + 96) = v36;
  *(_OWORD *)(a9 + 112) = v45[6];
  v37 = v45[1];
  *(_OWORD *)(a9 + 16) = v45[0];
  *(_OWORD *)(a9 + 32) = v37;
  v38 = v45[3];
  *(_OWORD *)(a9 + 48) = v45[2];
  *(_OWORD *)(a9 + 64) = v38;
  return a16;
}

double sub_10003447C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1001189D8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_1001189E0).n128_u64[0];
  return result;
}

uint64_t sub_1000344E0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_100025480(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

uint64_t sub_1000346C0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  double v35;
  double v36;
  double v37;
  uint64_t v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v20 = a16;
  v21 = a17;
  v23 = a14;
  v22 = a15;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a11 & 1;
  v33 = a5;
  if ((a6 & 1) != 0)
    v33 = v29;
  if (v27 > v29 || v29 > v33)
    goto LABEL_22;
  v35 = a7;
  if ((a8 & 1) != 0)
    v35 = -INFINITY;
  v36 = a10;
  if ((a11 & 1) != 0)
    v36 = v35;
  v37 = a12;
  if ((a13 & 1) != 0)
    v37 = v36;
  if (v35 > v36 || v36 > v37)
  {
LABEL_22:
    v50 = a7;
    v48 = a3;
    v49 = a5;
    v47 = a1;
    v46 = v26;
    v45 = v28;
    v39 = static os_log_type_t.fault.getter();
    v40 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v32 = a11 & 1;
    v28 = v45;
    v23 = a14;
    v22 = a15;
    v26 = v46;
    v25 = a10;
    v24 = a12;
    a1 = v47;
    a3 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a16;
    v21 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, v32, *(_QWORD *)&v24, a13 & 1, v23, v22);
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v21;
  *(_BYTE *)(a9 + 16) = a18 & 1;
  *(_QWORD *)(a9 + 24) = a19;
  v41 = v51[5];
  *(_OWORD *)(a9 + 96) = v51[4];
  *(_OWORD *)(a9 + 112) = v41;
  *(_OWORD *)(a9 + 128) = v51[6];
  v42 = v51[1];
  *(_OWORD *)(a9 + 32) = v51[0];
  *(_OWORD *)(a9 + 48) = v42;
  v43 = v51[3];
  *(_OWORD *)(a9 + 64) = v51[2];
  *(_OWORD *)(a9 + 80) = v43;
  swift_bridgeObjectRetain(v21);
  return swift_bridgeObjectRetain(a19);
}

_QWORD *sub_100034894@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  __int128 *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[32];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    a1 = v42;
    a3 = v43;
    v18 = a12;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[1];
  v49 = *v15;
  v50 = v34;
  sub_100045464((uint64_t)&v49, (uint64_t)v52);
  v36 = v15[1];
  v47 = v15[2];
  v35 = v47;
  *(_OWORD *)a9 = *v15;
  *(_OWORD *)(a9 + 16) = v36;
  *(_OWORD *)(a9 + 32) = v35;
  *(_OWORD *)(a9 + 152) = v46[6];
  v37 = v46[4];
  *(_OWORD *)(a9 + 136) = v46[5];
  *(_OWORD *)(a9 + 120) = v37;
  v38 = v46[2];
  *(_OWORD *)(a9 + 104) = v46[3];
  v39 = v46[1];
  *(_OWORD *)(a9 + 56) = v46[0];
  v51 = *((_QWORD *)&v50 + 1);
  v48 = *((_BYTE *)v15 + 48);
  *(_BYTE *)(a9 + 48) = v48;
  *(_OWORD *)(a9 + 72) = v39;
  *(_OWORD *)(a9 + 88) = v38;
  sub_1000454A0((uint64_t)v52);
  sub_1000454D0(&v51);
  return sub_1000454F8(&v47);
}

double sub_100034A78@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1001189E8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_1001189F0).n128_u64[0];
  return result;
}

double sub_100034ADC@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1001189A8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_1001189B0).n128_u64[0];
  return result;
}

double sub_100034B40@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1001189B8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_1001189C0).n128_u64[0];
  return result;
}

double sub_100034BA4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100033E1C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)&unk_1001189F8, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_100118A00).n128_u64[0];
  return result;
}

uint64_t sub_100034C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD *v31;

  *(_QWORD *)a4 = swift_getKeyPath(&unk_1000D32B0, a2);
  *(_BYTE *)(a4 + 8) = 0;
  v8 = (int *)type metadata accessor for TrackPageView(0);
  v9 = (_QWORD *)(a4 + v8[5]);
  *v9 = swift_getKeyPath(&unk_1000D32D8, v10);
  v11 = sub_100004F7C(&qword_100116688);
  swift_storeEnumTagMultiPayload(v9, v11, 0);
  v12 = (_QWORD *)(a4 + v8[6]);
  *v12 = swift_getKeyPath(&unk_1000D3308, v13);
  v14 = sub_100004F7C(&qword_100116698);
  swift_storeEnumTagMultiPayload(v12, v14, 0);
  v15 = a4 + v8[7];
  *(_QWORD *)v15 = swift_getKeyPath(&unk_1000D3338, v16);
  *(_BYTE *)(v15 + 8) = 0;
  v17 = a4 + v8[8];
  *(_QWORD *)v17 = swift_getKeyPath(&unk_1000D3368, v18);
  *(_BYTE *)(v17 + 8) = 0;
  v19 = (_QWORD *)(a4 + v8[9]);
  *v19 = swift_getKeyPath(&unk_1000D3398, v20);
  v21 = sub_100004F7C(&qword_100116678);
  swift_storeEnumTagMultiPayload(v19, v21, 0);
  v22 = (_QWORD *)(a4 + v8[10]);
  *v22 = swift_getKeyPath(&unk_1000D33C8, v23);
  v24 = sub_100004F7C(&qword_100116680);
  swift_storeEnumTagMultiPayload(v22, v24, 0);
  v25 = (uint64_t *)(a4 + v8[12]);
  v26 = sub_100004F7C(&qword_1001182D8);
  v27 = swift_allocObject(v26, 17, 7);
  *(_BYTE *)(v27 + 16) = 0;
  v28 = sub_10000522C(&qword_1001182E0, &qword_1001182D8, (uint64_t)&unk_1000D67A4);
  result = ObservedObject.init(wrappedValue:)(v27, v26, v28);
  *v25 = result;
  v25[1] = v30;
  *(_QWORD *)(a4 + v8[11]) = a1;
  v31 = (_QWORD *)(a4 + v8[13]);
  *v31 = a2;
  v31[1] = a3;
  return result;
}

uint64_t type metadata accessor for TrackPageView(uint64_t a1)
{
  uint64_t result;

  result = qword_100118350;
  if (!qword_100118350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrackPageView);
  return result;
}

void sub_100034E2C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double sub_100034E3C@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100034E48(uint64_t a1)
{
  return sub_100034F88(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_100118270);
}

uint64_t sub_100034E5C(uint64_t a1)
{
  return sub_100034F88(a1, (SEL *)&selRef_clearColor, &qword_100118278);
}

void sub_100034E70()
{
  qword_100118280 = 0;
}

uint64_t sub_100034E7C(uint64_t a1)
{
  return sub_100034EB0(0.25, a1, (uint64_t (*)(void))&static Color.black.getter, &qword_100118288);
}

uint64_t sub_100034E94(uint64_t a1)
{
  return sub_100034EB0(0.2, a1, (uint64_t (*)(void))&static Color.white.getter, &qword_100118290);
}

uint64_t sub_100034EB0(double a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = a3();
  v7 = Color.opacity(_:)(a1);
  result = swift_release(v6);
  *a4 = v7;
  return result;
}

uint64_t sub_100034F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v0 = static AnyTransition.opacity.getter();
  v1 = static Animation.easeIn(duration:)(0.25);
  v2 = AnyTransition.animation(_:)(v1, v0);
  swift_release(v0);
  result = swift_release(v1);
  qword_100118298 = v2;
  return result;
}

uint64_t sub_100034F58()
{
  uint64_t result;

  result = static Font.body.getter();
  qword_1001182A0 = result;
  return result;
}

uint64_t sub_100034F74(uint64_t a1)
{
  return sub_100034F88(a1, (SEL *)&selRef_systemBackgroundColor, &qword_1001182A8);
}

uint64_t sub_100034F88(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  result = Color.init(uiColor:)(v4);
  *a3 = result;
  return result;
}

uint64_t sub_100034FCC(uint64_t a1)
{
  return sub_100034FEC(0.5, a1, &qword_1001182B0);
}

uint64_t sub_100034FDC(uint64_t a1)
{
  return sub_100034FEC(0.0, a1, &qword_1001182B8);
}

uint64_t sub_100034FEC(double a1, uint64_t a2, uint64_t *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
  v6 = Color.init(uiColor:)(v5);
  v7 = Color.opacity(_:)(a1);
  result = swift_release(v6);
  *a3 = v7;
  return result;
}

uint64_t sub_10003505C()
{
  uint64_t v0;

  v0 = type metadata accessor for Material(0);
  sub_10000C484(v0, qword_1001182C0);
  sub_10000B5E8(v0, (uint64_t)qword_1001182C0);
  return static Material.thin.getter();
}

uint64_t sub_1000350A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t OpaqueTypeConformance2;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[16];
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v39 = a1;
  v2 = type metadata accessor for TrackPageView(0);
  v32 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v32 + 64);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ScenePhase(0);
  v36 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100004F7C(&qword_1001183B8);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_1001183C0);
  v35 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_1001183C8);
  v15 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  v38 = v15;
  __chkstk_darwin(v14);
  v33 = v1;
  v34 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100035400(v1, (uint64_t)v10);
  sub_100006CD4(v7);
  sub_10000B340(v1, (uint64_t)v4, type metadata accessor for TrackPageView);
  v17 = *(unsigned __int8 *)(v32 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_10010A020, v18 + v3, v17 | 7);
  sub_10000B4D4((uint64_t)v4, v19 + v18, type metadata accessor for TrackPageView);
  v20 = sub_1000436B8();
  v21 = sub_100004864(&qword_100117E98, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  View.onChange<A>(of:initial:_:)(v7, 0, sub_10004366C, v19, v8, v5, v20, v21);
  v22 = swift_release(v19);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v36 + 8))(v7, v5, v22);
  sub_10000526C((uint64_t)v10, &qword_1001183B8);
  v42 = v8;
  v43 = v5;
  v44 = v20;
  v45 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v24 = v34;
  View.navigationBarBackButtonHidden(_:)(1, v11, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v11);
  v41 = v33;
  v25 = sub_100004F7C(&qword_1001184E0);
  v42 = v11;
  v43 = OpaqueTypeConformance2;
  v26 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
  v27 = sub_1000050C8(&qword_1001184E8);
  v28 = sub_100043C4C();
  v42 = v27;
  v43 = v28;
  v29 = swift_getOpaqueTypeConformance2(&v42, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v30 = v37;
  View.toolbar<A>(content:)(sub_100043C44, v40, v37, v25, v26, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v24, v30);
}

uint64_t sub_100035400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[12];
  char v101[8];
  __int128 v102;
  char v103;

  v99 = a2;
  v88 = sub_100004F7C(&qword_1001184D8);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100004F7C(&qword_1001184C8);
  v4 = __chkstk_darwin(v98);
  v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v89 = (uint64_t)&v80 - v6;
  v93 = sub_100004F7C(&qword_100118400);
  __chkstk_darwin(v93);
  v84 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100004F7C(&qword_100118528);
  __chkstk_darwin(v95);
  v97 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100004F7C(&qword_100118530);
  __chkstk_darwin(v91);
  v92 = (uint64_t)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004F7C(&qword_1001183F0);
  __chkstk_darwin(v96);
  v94 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for _TaskModifier(0);
  __chkstk_darwin(v80);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for TaskPriority(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TrackPageView(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100004F7C(&qword_1001179D8);
  v19 = __chkstk_darwin(v90);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v83 = (uint64_t)&v80 - v22;
  v23 = a1;
  v24 = *(_QWORD *)(a1 + *(int *)(v15 + 44));
  KeyPath = swift_getKeyPath(&unk_1000D34D0, v25);
  *(_QWORD *)&v102 = v24;
  v27 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v102, KeyPath, v27);
  swift_release(KeyPath);
  swift_beginAccess(v24 + 32, v101, 0, 0);
  sub_100043E28(v24 + 32, (uint64_t)&v102);
  if (v103)
  {
    if (v103 == 1)
    {
      v28 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000018, 0x80000001000DA3C0);
      v30 = v29;
      v32 = v31;
      v34 = v33;
      v35 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001000DA3E0);
      v36 = Text.init(_:tableName:bundle:comment:)(v35);
      v79 = v37 & 1;
      v38 = v32 & 1;
      v39 = v86;
      ContentUnavailableView<>.init(_:systemImage:description:)(v28, v30, v38, v34, 0xD000000000000010, 0x80000001000D8DA0, v36, v40, v79, v41);
      v42 = sub_10000522C(&qword_1001184D0, &qword_1001184D8, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
      v43 = v85;
      v44 = v88;
      View.accessibilityIdentifier(_:)(0xD000000000000010, 0x80000001000DA400, v88, v42);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v39, v44);
      v45 = &qword_1001184C8;
      v46 = (uint64_t)v43;
      v47 = v89;
      sub_100007C48(v46, v89, &qword_1001184C8);
      v48 = v97;
      sub_100007C8C(v47, v97, &qword_1001184C8);
      swift_storeEnumTagMultiPayload(v48, v95, 1);
      v49 = sub_10004373C();
      v50 = sub_100043BA8();
      _ConditionalContent<>.init(storage:)(v48, v96, v98, v49, v50);
      v51 = v47;
    }
    else
    {
      v89 = *(_QWORD *)(v24 + 528);
      v61 = *(_QWORD *)(v24 + 536);
      LODWORD(v88) = *(unsigned __int8 *)(v24 + 544);
      v62 = *(_QWORD *)(v24 + 552);
      sub_10000B340(v23, (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TrackPageView);
      v63 = *(unsigned __int8 *)(v16 + 80);
      v64 = (v63 + 16) & ~v63;
      v65 = swift_allocObject(&unk_10010A070, v64 + v17, v63 | 7);
      sub_10000B4D4((uint64_t)v18, v65 + v64, type metadata accessor for TrackPageView);
      swift_bridgeObjectRetain(v61);
      v66 = swift_bridgeObjectRetain(v62);
      static TaskPriority.userInitiated.getter(v66);
      v67 = v81;
      v68 = v82;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(&v12[*(int *)(v80 + 20)], v14, v82);
      *(_QWORD *)v12 = &unk_100118548;
      *((_QWORD *)v12 + 1) = v65;
      v69 = v90;
      sub_10000B340((uint64_t)v12, (uint64_t)&v21[*(int *)(v90 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
      *(_QWORD *)v21 = v89;
      *((_QWORD *)v21 + 1) = v61;
      v21[16] = v88;
      *((_QWORD *)v21 + 3) = v62;
      swift_bridgeObjectRetain(v61);
      swift_bridgeObjectRetain(v62);
      sub_10000B600((uint64_t)v12, (uint64_t (*)(_QWORD))&type metadata accessor for _TaskModifier);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v14, v68);
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v61);
      v45 = &qword_1001179D8;
      v70 = (uint64_t)v21;
      v71 = v83;
      sub_100007C48(v70, v83, &qword_1001179D8);
      v72 = v92;
      sub_100007C8C(v71, v92, &qword_1001179D8);
      swift_storeEnumTagMultiPayload(v72, v91, 0);
      v73 = sub_100024FF4();
      v74 = sub_1000437D0();
      v75 = (uint64_t)v94;
      _ConditionalContent<>.init(storage:)(v72, v69, v93, v73, v74);
      v76 = v97;
      sub_100007C8C(v75, v97, &qword_1001183F0);
      swift_storeEnumTagMultiPayload(v76, v95, 0);
      v77 = sub_10004373C();
      v78 = sub_100043BA8();
      _ConditionalContent<>.init(storage:)(v76, v96, v98, v77, v78);
      sub_10000526C(v75, &qword_1001183F0);
      v51 = v71;
    }
    return sub_10000526C(v51, v45);
  }
  else
  {
    sub_100043E64(&v102, (uint64_t)v100);
    v52 = v84;
    sub_100035ED4(v100, v84);
    v53 = v92;
    sub_100007C8C(v52, v92, &qword_100118400);
    swift_storeEnumTagMultiPayload(v53, v91, 1);
    v54 = sub_100024FF4();
    v55 = sub_1000437D0();
    v56 = (uint64_t)v94;
    _ConditionalContent<>.init(storage:)(v53, v90, v93, v54, v55);
    v57 = v97;
    sub_100007C8C(v56, v97, &qword_1001183F0);
    swift_storeEnumTagMultiPayload(v57, v95, 0);
    v58 = sub_10004373C();
    v59 = sub_100043BA8();
    _ConditionalContent<>.init(storage:)(v57, v96, v98, v58, v59);
    sub_10000526C(v56, &qword_1001183F0);
    sub_10000526C(v52, &qword_100118400);
    return _s16MusicRecognition11AnyPlaylistVwxx_0(v100);
  }
}

uint64_t sub_100035CF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = a1;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_100035D5C, v3, v4);
}

uint64_t sub_100035D5C()
{
  uint64_t v0;
  id v1;
  id v2;
  _QWORD *v3;
  __n128 v4;
  _QWORD *v6;

  v1 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v2 = objc_msgSend(v1, "arguments");

  v3 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String);
  LOBYTE(v2) = sub_100041098(0xD000000000000036, 0x80000001000DA420, v3);
  swift_bridgeObjectRelease(v3);
  if ((v2 & 1) != 0)
  {
    v4 = swift_release(*(_QWORD *)(v0 + 24));
    return (*(uint64_t (**)(__n128))(v0 + 8))(v4);
  }
  else
  {
    type metadata accessor for TrackPageView(0);
    v6 = (_QWORD *)swift_task_alloc(dword_10011B0C4);
    *(_QWORD *)(v0 + 48) = v6;
    *v6 = v0;
    v6[1] = sub_100035E58;
    return sub_100084890();
  }
}

uint64_t sub_100035E58()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  return swift_task_switch(sub_100035EA4, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100035EA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100035ED4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)();
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t OpaqueTypeConformance2;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (**v67)(uint64_t *);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (**v74)(double *@<X8>, double@<D2>, double@<D3>);
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)(uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  char v115[8];
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;

  v112 = a2;
  v113 = a1;
  v3 = type metadata accessor for CoordinateSpace(0);
  v110 = *(_QWORD *)(v3 - 8);
  v111 = v3;
  __chkstk_darwin(v3);
  v109 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ToolbarRole(0);
  v107 = *(_QWORD *)(v5 - 8);
  v108 = v5;
  __chkstk_darwin(v5);
  v106 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v99 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v95 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TrackPageView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004F7C(&qword_100118460);
  v79 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004F7C(&qword_100118550);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v83 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100004F7C(&qword_100118450);
  __chkstk_darwin(v85);
  v84 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100004F7C(&qword_100118448);
  v93 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v86 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100004F7C(&qword_100118438);
  v103 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v89 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100004F7C(&qword_100118558);
  v96 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v92 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100004F7C(&qword_100118430);
  __chkstk_darwin(v94);
  v91 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100004F7C(&qword_100118420);
  __chkstk_darwin(v104);
  v97 = (uint64_t)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100004F7C(&qword_100118410);
  __chkstk_darwin(v105);
  v101 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(v2, (uint64_t)v11, type metadata accessor for TrackPageView);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = ((v23 + 16) & ~v23) + v10;
  v25 = (v23 + 16) & ~v23;
  v26 = v23 | 7;
  v27 = swift_allocObject(&unk_10010A098, v24, v23 | 7);
  v28 = v25;
  v114 = v25;
  v29 = sub_10000B4D4((uint64_t)v11, v27 + v25, type metadata accessor for TrackPageView);
  v30 = static Axis.Set.vertical.getter(v29);
  *(_WORD *)v14 = v30;
  *((_QWORD *)v14 + 1) = sub_100043F00;
  *((_QWORD *)v14 + 2) = v27;
  v31 = &v14[*(int *)(v12 + 44)];
  *(_QWORD *)v31 = static HorizontalAlignment.center.getter(v30);
  *((_QWORD *)v31 + 1) = 0;
  v31[16] = 0;
  v32 = sub_100004F7C(&qword_100118560);
  v33 = v2;
  sub_10003CA2C(v2, v113, (uint64_t)&v31[*(int *)(v32 + 44)]);
  sub_10000B340(v2, (uint64_t)v11, type metadata accessor for TrackPageView);
  v81 = v24;
  v82 = v26;
  v34 = swift_allocObject(&unk_10010A0C0, v24, v26);
  sub_10000B4D4((uint64_t)v11, v34 + v28, type metadata accessor for TrackPageView);
  v35 = sub_10000522C(&qword_100118468, &qword_100118460, (uint64_t)&unk_1000D6380);
  v36 = sub_100043B64();
  v37 = v83;
  View.onScrollGeometryChange<A>(for:of:action:)(&type metadata for CGFloat, sub_10003E870, 0, sub_100043F40, v34, v79, &type metadata for CGFloat, v35, v36);
  swift_release(v34);
  sub_10000526C((uint64_t)v14, &qword_100118460);
  sub_10000B340(v2, (uint64_t)v11, type metadata accessor for TrackPageView);
  v38 = swift_allocObject(&unk_10010A0E8, v24, v26);
  sub_10000B4D4((uint64_t)v11, v38 + v114, type metadata accessor for TrackPageView);
  v39 = v87;
  v40 = (uint64_t)v84;
  v41 = v88;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v84, v37, v88);
  v42 = v85;
  v43 = (uint64_t (**)())(v40 + *(int *)(v85 + 36));
  *v43 = sub_100043F90;
  v43[1] = (uint64_t (*)())v38;
  v43[2] = 0;
  v43[3] = 0;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v41);
  v44 = v99;
  v45 = v95;
  v46 = v102;
  (*(void (**)(char *, _QWORD, uint64_t))(v99 + 104))(v95, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v102);
  v47 = sub_100043A9C();
  v48 = v86;
  View.navigationBarTitleDisplayMode(_:)(v45, v42, v47);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  v49 = sub_10000526C(v40, &qword_100118450);
  v50 = v106;
  static ToolbarRole.automatic.getter(v49);
  v118 = v42;
  v119 = v47;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v52 = v89;
  v53 = v90;
  View.toolbarRole(_:)(v50, v90, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v50, v108);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v48, v53);
  v116 = v113;
  v117 = v33;
  v80 = v33;
  v54 = sub_100004F7C(&qword_100118440);
  v118 = v53;
  v119 = OpaqueTypeConformance2;
  v55 = swift_getOpaqueTypeConformance2(&v118, &opaque type descriptor for <<opaque return type of View.toolbarRole(_:)>>, 1);
  v56 = sub_10000522C(&qword_100118478, &qword_100118440, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v57 = v92;
  v58 = v100;
  View.toolbar<A>(content:)(sub_100043F9C, v115, v100, v54, v55, v56);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v52, v58);
  v59 = v96;
  v60 = (uint64_t)v91;
  v61 = v98;
  (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v91, v57, v98);
  v62 = (_QWORD *)(v60 + *(int *)(v94 + 36));
  *v62 = &type metadata for TrackPageViewSafeAreaPreferenceKey;
  v62[1] = sub_100040DE4;
  v62[2] = 0;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v61);
  sub_10000B340(v33, (uint64_t)v11, type metadata accessor for TrackPageView);
  v63 = v81;
  v64 = v82;
  v65 = swift_allocObject(&unk_10010A110, v81, v82);
  sub_10000B4D4((uint64_t)v11, v65 + v114, type metadata accessor for TrackPageView);
  v66 = v97;
  sub_100007C8C(v60, v97, &qword_100118430);
  v67 = (void (**)(uint64_t *))(v66 + *(int *)(v104 + 36));
  *v67 = sub_100043FA8;
  v67[1] = (void (*)(uint64_t *))v65;
  sub_10000526C(v60, &qword_100118430);
  v69 = v109;
  v68 = v110;
  v70 = v111;
  (*(void (**)(char *, _QWORD, uint64_t))(v110 + 104))(v109, enum case for CoordinateSpace.local(_:), v111);
  v71 = (uint64_t)v101;
  v72 = &v101[*(int *)(v105 + 36)];
  v73 = sub_100004F7C(&qword_1001184A8);
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(&v72[*(int *)(v73 + 36)], v69, v70);
  *(_QWORD *)v72 = &type metadata for ScreenWidthPreferenceKey;
  v74 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v72[*(int *)(v73 + 40)];
  *v74 = sub_100045584;
  v74[1] = 0;
  sub_100007C8C(v66, v71, &qword_100118420);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
  sub_10000526C(v66, &qword_100118420);
  sub_10000B340(v80, (uint64_t)v11, type metadata accessor for TrackPageView);
  v75 = swift_allocObject(&unk_10010A138, v63, v64);
  sub_10000B4D4((uint64_t)v11, v75 + v114, type metadata accessor for TrackPageView);
  v76 = v112;
  sub_100007C8C(v71, v112, &qword_100118410);
  v77 = (uint64_t (**)(uint64_t))(v76 + *(int *)(sub_100004F7C(&qword_100118400) + 36));
  *v77 = sub_100043FE8;
  v77[1] = (uint64_t (*)(uint64_t))v75;
  return sub_10000526C(v71, &qword_100118410);
}

void sub_10003689C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for ScenePhase(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == enum case for ScenePhase.background(_:))
  {
    v7 = type metadata accessor for TrackPageView(0);
    sub_100086C00(v7, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_100036968@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v34[1] = a2;
  v3 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v3);
  v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_1001184F8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[0] = sub_100004F7C(&qword_1001184E8);
  v10 = __chkstk_darwin(v34[0]);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v34 - v13;
  v15 = *a1;
  v16 = *((_BYTE *)a1 + 8);
  swift_retain(*a1);
  v18 = sub_10000687C(v17, v16);
  swift_release(v15);
  KeyPath = swift_getKeyPath(&unk_1000D34A8, v19);
  v35 = v18;
  v21 = sub_100004864((unint64_t *)&qword_100116618, type metadata accessor for ViewConfiguration, (uint64_t)&unk_1000D6CA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v35, KeyPath, v21);
  swift_release(KeyPath);
  LODWORD(KeyPath) = *(unsigned __int8 *)(v18 + 16);
  v22 = swift_release(v18);
  if ((_DWORD)KeyPath == 1)
  {
    v23 = static ToolbarItemPlacement.topBarLeading.getter(v22);
    __chkstk_darwin(v23);
    v34[-2] = a1;
    v24 = sub_100004F7C(&qword_100118510);
    v25 = sub_100043D08();
    ToolbarItem<>.init(placement:content:)(v5, sub_100043D00, &v34[-4], v24, v25);
    v26 = sub_10000522C(&qword_100118500, &qword_1001184F8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v6, v26);
    v27 = sub_100004F7C(&qword_100118508);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 0, 1, v27);
    v35 = v6;
    v36 = v26;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v35, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v12, v27, OpaqueTypeConformance2);
    sub_10000526C((uint64_t)v12, &qword_1001184E8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v29 = sub_100004F7C(&qword_100118508);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 1, 1, v29);
    v30 = sub_10000522C(&qword_100118500, &qword_1001184F8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v35 = v6;
    v36 = v30;
    v31 = swift_getOpaqueTypeConformance2(&v35, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v12, v29, v31);
    sub_10000526C((uint64_t)v12, &qword_1001184E8);
  }
  v32 = sub_100043C4C();
  static ToolbarContentBuilder.buildBlock<A>(_:)(v14, v34[0], v32);
  return sub_10000526C((uint64_t)v14, &qword_1001184E8);
}

uint64_t sub_100036CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];

  v30 = a1;
  v34 = a2;
  v2 = type metadata accessor for NavigationBarButtonStyle(0);
  v3 = __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v7 = (char *)&v29 - v6;
  v8 = type metadata accessor for TrackPageView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_100004F7C(&qword_100117E08);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_100118520);
  v32 = *(_QWORD *)(v14 - 8);
  v33 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(v30, (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TrackPageView);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_10010A048, v18 + v10, v17 | 7);
  sub_10000B4D4((uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for TrackPageView);
  Button.init(action:label:)(sub_100043E14, v19, sub_100037068, 0, &type metadata for Image, &protocol witness table for Image);
  *v5 = swift_getKeyPath(&unk_1000D3308, v20);
  v21 = sub_100004F7C(&qword_100116698);
  swift_storeEnumTagMultiPayload(v5, v21, 0);
  sub_10000B4D4((uint64_t)v5, (uint64_t)v7, type metadata accessor for NavigationBarButtonStyle);
  v22 = sub_10000522C(&qword_100117E00, &qword_100117E08, (uint64_t)&protocol conformance descriptor for Button<A>);
  v23 = sub_100004864(&qword_100116870, type metadata accessor for NavigationBarButtonStyle, (uint64_t)&unk_1000D2ACC);
  View.buttonStyle<A>(_:)(v7, v11);
  sub_10000B600((uint64_t)v7, type metadata accessor for NavigationBarButtonStyle);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  if (qword_100116108 != -1)
    swift_once(&qword_100116108, sub_1000801AC);
  v24 = qword_100124620;
  v25 = *(_QWORD *)algn_100124628;
  v35[0] = v11;
  v35[1] = v2;
  v35[2] = v22;
  v35[3] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v35, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v27 = v33;
  View.accessibilityIdentifier(_:)(v24, v25, v33, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v27);
}

uint64_t sub_100036FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v0 = type metadata accessor for DismissAction(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (uint64_t *)((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TrackPageView(0);
  sub_100006D00(v3);
  DismissAction.callAsFunction()();
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_100037068@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Image.init(systemName:)(0xD00000000000001CLL, 0x80000001000DA3A0);
  *a1 = result;
  return result;
}

uint64_t sub_1000370A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double (**v71)();
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[3];

  v83 = a2;
  v3 = type metadata accessor for TrackPageView(0);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64);
  v81 = *(_QWORD *)(v3 - 8);
  v82 = v4;
  __chkstk_darwin(v3);
  v80 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for SongArtworkView(0);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100004F7C(&qword_100118958);
  __chkstk_darwin(v9);
  v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100004F7C(&qword_100118960);
  __chkstk_darwin(v74);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100004F7C(&qword_100118968);
  __chkstk_darwin(v75);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100004F7C(&qword_100118970);
  __chkstk_darwin(v77);
  v76 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_100004F7C(&qword_100118978);
  __chkstk_darwin(v79);
  v78 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v8 = swift_getKeyPath(&unk_1000D3308, v18);
  v19 = sub_100004F7C(&qword_100116698);
  swift_storeEnumTagMultiPayload(v8, v19, 0);
  v20 = (_QWORD *)((char *)v8 + v6[5]);
  v85 = 0;
  swift_retain(a1);
  State.init(wrappedValue:)(v86, &v85, &type metadata for Double);
  v21 = *((_QWORD *)&v86[0] + 1);
  *v20 = *(_QWORD *)&v86[0];
  v20[1] = v21;
  v22 = (_QWORD *)((char *)v8 + v6[6]);
  v85 = 0x3FF0000000000000;
  State.init(wrappedValue:)(v86, &v85, &type metadata for Double);
  v23 = *((_QWORD *)&v86[0] + 1);
  *v22 = *(_QWORD *)&v86[0];
  v22[1] = v23;
  *(_QWORD *)((char *)v8 + v6[7]) = a1;
  *((_BYTE *)v8 + v6[8]) = 0;
  v73 = *(int *)(v3 + 44);
  v24 = *(_QWORD *)(v84 + v73);
  KeyPath = swift_getKeyPath(&unk_1000D36C8, v25);
  *(_QWORD *)&v86[0] = v24;
  v27 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, KeyPath, v27);
  swift_release(KeyPath);
  v28 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)v11 = swift_getKeyPath(&unk_1000D3368, v29);
  v11[8] = 0;
  sub_10000B4D4((uint64_t)v8, (uint64_t)&v11[*(int *)(v9 + 36)], type metadata accessor for SongArtworkView);
  *(_QWORD *)&v11[*(int *)(v9 + 40)] = v28;
  v31 = swift_getKeyPath(&unk_1000D36C8, v30);
  *(_QWORD *)&v86[0] = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v31, v27);
  swift_release(v31);
  v32 = *(_QWORD *)(v24 + 16);
  v34 = swift_getKeyPath(&unk_1000D36C8, v33);
  *(_QWORD *)&v86[0] = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v34, v27);
  swift_release(v34);
  v35 = *(_QWORD *)(v24 + 16);
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(v86, v32, 0, v35, 0, v37, v38);
  sub_100007C8C((uint64_t)v11, (uint64_t)v13, &qword_100118958);
  v39 = &v13[*(int *)(v74 + 36)];
  v40 = v86[1];
  *(_OWORD *)v39 = v86[0];
  *((_OWORD *)v39 + 1) = v40;
  *((_OWORD *)v39 + 2) = v86[2];
  v41 = sub_10000526C((uint64_t)v11, &qword_100118958);
  LOBYTE(v32) = static Edge.Set.top.getter(v41);
  v42 = EdgeInsets.init(_all:)(22.0);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_100007C8C((uint64_t)v13, (uint64_t)v15, &qword_100118960);
  v49 = &v15[*(int *)(v75 + 36)];
  *v49 = v32;
  *((double *)v49 + 1) = v42;
  *((_QWORD *)v49 + 2) = v44;
  *((_QWORD *)v49 + 3) = v46;
  *((_QWORD *)v49 + 4) = v48;
  v49[40] = 0;
  sub_10000526C((uint64_t)v13, &qword_100118960);
  v51 = swift_getKeyPath(&unk_1000D3810, v50);
  v85 = v24;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v51, v27);
  v52 = swift_release(v51);
  v53 = *(_QWORD *)(v24 + 144);
  v54 = static UnitPoint.center.getter(v52);
  v56 = v55;
  v57 = v76;
  sub_100007C8C((uint64_t)v15, v76, &qword_100118968);
  v58 = (double *)(v57 + *(int *)(v77 + 36));
  *(_QWORD *)v58 = v53;
  *((_QWORD *)v58 + 1) = v53;
  v58[2] = v54;
  *((_QWORD *)v58 + 3) = v56;
  sub_10000526C((uint64_t)v15, &qword_100118968);
  v59 = v84;
  v60 = *(_QWORD *)(v84 + v73);
  v62 = swift_getKeyPath(&unk_1000D3838, v61);
  v85 = v60;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v85, v62, v27);
  swift_release(v62);
  v63 = *(_QWORD *)(v60 + 152);
  v64 = v78;
  sub_100007C8C(v57, v78, &qword_100118970);
  *(_QWORD *)(v64 + *(int *)(v79 + 36)) = v63;
  sub_10000526C(v57, &qword_100118970);
  v65 = v59;
  v66 = v80;
  sub_10000B340(v65, v80, type metadata accessor for TrackPageView);
  v67 = *(unsigned __int8 *)(v81 + 80);
  v68 = (v67 + 16) & ~v67;
  v69 = swift_allocObject(&unk_10010A2F0, v68 + v82, v67 | 7);
  sub_10000B4D4(v66, v69 + v68, type metadata accessor for TrackPageView);
  v70 = v83;
  sub_100007C8C(v64, v83, &qword_100118978);
  v71 = (double (**)())(v70 + *(int *)(sub_100004F7C(&qword_100118858) + 36));
  *v71 = sub_100045094;
  v71[1] = (double (*)())v69;
  v71[2] = 0;
  v71[3] = 0;
  return sub_10000526C(v64, &qword_100118978);
}

uint64_t sub_1000376D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;

  v109 = a2;
  v100 = type metadata accessor for ColorScheme(0);
  v98 = *(_QWORD *)(v100 - 8);
  v3 = __chkstk_darwin(v100);
  v97 = (char *)&v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v96 = (char *)&v91 - v5;
  v6 = (int *)type metadata accessor for SongArtworkView(0);
  __chkstk_darwin(v6);
  v8 = (char **)((char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94 = sub_100004F7C(&qword_100118760);
  __chkstk_darwin(v94);
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100004F7C(&qword_100118768);
  __chkstk_darwin(v93);
  v95 = (uint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100004F7C(&qword_100118770);
  __chkstk_darwin(v99);
  v103 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100004F7C(&qword_100118778);
  __chkstk_darwin(v101);
  v104 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100004F7C(&qword_100118780);
  __chkstk_darwin(v102);
  *(_QWORD *)&v106 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(&qword_100118788);
  v107 = *(_QWORD *)(v15 - 8);
  v108 = v15;
  __chkstk_darwin(v15);
  v105 = (uint64_t)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v91 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v91 - v24;
  v26 = type metadata accessor for URL(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  v31 = v30;
  sub_100007C8C(v29, (uint64_t)v25, (uint64_t *)&unk_100118CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v25, 1, v26) == 1)
  {
    sub_10000526C((uint64_t)v25, (uint64_t *)&unk_100118CE0);
    v32 = 1;
    v34 = v108;
    v33 = v109;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v25, v26);
    v35 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v91 = v28;
    v35(v23, v28, v26);
    v92 = v31;
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
    v36(v23, 0, 1, v26);
    v36(v20, 1, 1, v26);
    v37 = type metadata accessor for SongArtworkViewModel(0);
    v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v36((char *)(v38 + OBJC_IVAR____TtC16MusicRecognition20SongArtworkViewModel__artworkURL), 1, 1, v26);
    v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v36)(v38 + OBJC_IVAR____TtC16MusicRecognition20SongArtworkViewModel___animatedArtworkURL, 1, 1, v26);
    ObservationRegistrar.init()(v39);
    sub_1000B793C((uint64_t)v23, (uint64_t)v20);
    sub_10000526C((uint64_t)v20, (uint64_t *)&unk_100118CE0);
    sub_10000526C((uint64_t)v23, (uint64_t *)&unk_100118CE0);
    *v8 = swift_getKeyPath(&unk_1000D3308, v40);
    v41 = sub_100004F7C(&qword_100116698);
    swift_storeEnumTagMultiPayload(v8, v41, 0);
    v42 = (_QWORD *)((char *)v8 + v6[5]);
    v110 = 0;
    State.init(wrappedValue:)(&v111, &v110, &type metadata for Double);
    v43 = v112;
    *v42 = v111;
    v42[1] = v43;
    v44 = (_QWORD *)((char *)v8 + v6[6]);
    v110 = 0x3FF0000000000000;
    State.init(wrappedValue:)(&v111, &v110, &type metadata for Double);
    v45 = v112;
    *v44 = v111;
    v44[1] = v45;
    *(_QWORD *)((char *)v8 + v6[7]) = v38;
    *((_BYTE *)v8 + v6[8]) = 1;
    sub_10000B340((uint64_t)v8, (uint64_t)v10, type metadata accessor for SongArtworkView);
    *(_QWORD *)&v10[*(int *)(v94 + 36)] = 0x3FF8000000000000;
    sub_10000B600((uint64_t)v8, type metadata accessor for SongArtworkView);
    v46 = v95;
    sub_100007C8C((uint64_t)v10, v95, &qword_100118760);
    *(_QWORD *)(v46 + *(int *)(v93 + 36)) = 0x3FF0000000000000;
    v47 = sub_10000526C((uint64_t)v10, &qword_100118760);
    v48 = static Alignment.center.getter(v47);
    v50 = v49;
    type metadata accessor for TrackPageView(0);
    v51 = v96;
    sub_100006A6C(v96);
    v52 = v98;
    v53 = v97;
    v54 = v100;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v97, enum case for ColorScheme.light(_:), v100);
    LOBYTE(v38) = static ColorScheme.== infix(_:_:)(v51, v53);
    v55 = *(void (**)(char *, uint64_t))(v52 + 8);
    v55(v53, v54);
    v55(v51, v54);
    v56 = v46;
    if ((v38 & 1) != 0)
    {
      v57 = v106;
      v58 = (uint64_t)v103;
      if (qword_100115EA0 != -1)
        swift_once(&qword_100115EA0, sub_100034E94);
      v59 = &qword_100118290;
    }
    else
    {
      v57 = v106;
      v58 = (uint64_t)v103;
      if (qword_100115E98 != -1)
        swift_once(&qword_100115E98, sub_100034E7C);
      v59 = &qword_100118288;
    }
    v60 = v91;
    v61 = *v59;
    swift_retain(*v59);
    sub_100007C8C(v56, v58, &qword_100118768);
    v62 = (uint64_t *)(v58 + *(int *)(v99 + 36));
    *v62 = v61;
    v62[1] = v48;
    v62[2] = v50;
    sub_10000526C(v56, &qword_100118768);
    if (qword_100115ED0 != -1)
      swift_once(&qword_100115ED0, sub_10003505C);
    v63 = type metadata accessor for Material(0);
    v64 = sub_10000B5E8(v63, (uint64_t)qword_1001182C0);
    v65 = static Edge.Set.all.getter(v64);
    v66 = (uint64_t)v104;
    v67 = &v104[*(int *)(v101 + 36)];
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v67, v64, v63);
    v67[*(int *)(sub_100004F7C(&qword_100118790) + 36)] = v65;
    sub_100007C48(v58, v66, &qword_100118770);
    sub_100007C8C(v66, v57, &qword_100118778);
    v68 = v57 + *(int *)(v102 + 36);
    *(_QWORD *)v68 = 0x4049000000000000;
    *(_BYTE *)(v68 + 8) = 0;
    v69 = sub_10000526C(v66, &qword_100118778);
    v70 = static Alignment.center.getter(v69);
    v72 = v71;
    v73 = sub_100004F7C(&qword_100118708);
    v74 = swift_allocObject(v73, 80, 7);
    *(_OWORD *)(v74 + 16) = xmmword_1000D2320;
    if (qword_100115EB8 != -1)
      swift_once(&qword_100115EB8, sub_100034F74);
    v75 = qword_100115E90;
    swift_retain(qword_1001182A8);
    if (v75 != -1)
      swift_once(&qword_100115E90, sub_100034E70);
    *(_QWORD *)(v74 + 32) = Gradient.Stop.init(color:location:)(*(double *)&qword_100118280);
    *(_QWORD *)(v74 + 40) = v76;
    v34 = v108;
    if (qword_100115EC0 != -1)
      swift_once(&qword_100115EC0, sub_100034FCC);
    swift_retain(qword_1001182B0);
    *(_QWORD *)(v74 + 48) = Gradient.Stop.init(color:location:)(0.6);
    *(_QWORD *)(v74 + 56) = v77;
    if (qword_100115EC8 != -1)
      swift_once(&qword_100115EC8, sub_100034FDC);
    swift_retain(qword_1001182B8);
    *(_QWORD *)(v74 + 64) = Gradient.Stop.init(color:location:)(1.0);
    *(_QWORD *)(v74 + 72) = v78;
    v79 = static UnitPoint.top.getter();
    v81 = v80;
    v82 = static UnitPoint.bottom.getter();
    v84 = v83;
    Gradient.init(stops:)(v74);
    LinearGradient.init(gradient:startPoint:endPoint:)(&v111, v79, v81, v82, v84);
    v85 = v111;
    v106 = v112;
    v86 = v113;
    v87 = v114;
    v88 = v105;
    sub_100007C8C(v57, v105, &qword_100118780);
    v89 = v88 + *(int *)(v34 + 36);
    *(_QWORD *)v89 = v70;
    *(_QWORD *)(v89 + 8) = v72;
    *(_QWORD *)(v89 + 16) = v85;
    *(_OWORD *)(v89 + 24) = v106;
    *(_QWORD *)(v89 + 40) = v86;
    *(_QWORD *)(v89 + 48) = v87;
    sub_10000526C(v57, &qword_100118780);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v60, v26);
    v33 = v109;
    sub_100007C48(v88, v109, &qword_100118788);
    v32 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v33, v32, 1, v34);
}

void sub_1000380B0(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  _BYTE v32[24];
  _QWORD v33[3];
  uint64_t v34;

  if ((a1 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
    KeyPath = swift_getKeyPath(&unk_1000D3790, v6);
    v33[0] = v5;
    v8 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v33, KeyPath, v8);
    swift_release(KeyPath);
    swift_beginAccess(v5 + 320, v32, 0, 0);
    sub_100007C8C(v5 + 320, (uint64_t)v33, &qword_100118860);
    v9 = v34;
    if (v34)
    {
      v10 = sub_10000C9C8(v33, v34);
      v11 = *(_QWORD *)(v9 - 8);
      __chkstk_darwin(v10);
      v13 = &v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(_BYTE *))(v11 + 16))(v13);
      sub_10000526C((uint64_t)v33, &qword_100118860);
      v14 = objc_msgSend(*(id *)&v13[*(int *)(type metadata accessor for TrackPageMetadata(0) + 20)], "shazamCount");
      v15 = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v9);
    }
    else
    {
      v15 = sub_10000526C((uint64_t)v33, &qword_100118860);
      v14 = 0;
    }
    v26 = static Edge.Set.top.getter(v15);
    v18 = EdgeInsets.init(_all:)(8.0);
    v19 = v27;
    v20 = v28;
    v21 = v29;
    v31 = static Edge.Set.bottom.getter(v30);
    v22 = EdgeInsets.init(_all:)(36.0);
    v16 = v26;
    v17 = v31;
  }
  else
  {
    v14 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0.0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0.0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
  }
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(double *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v17;
  *(double *)(a2 + 64) = v22;
  *(_QWORD *)(a2 + 72) = v23;
  *(_QWORD *)(a2 + 80) = v24;
  *(_QWORD *)(a2 + 88) = v25;
  *(_BYTE *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 97) = (a1 & 1) == 0;
}

uint64_t sub_1000382DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  double v28;
  char *v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;

  v46 = a2;
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v43 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_1001186E8);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100116690);
  v11 = __chkstk_darwin(v10);
  v47 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v42 - v14;
  __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v42 - v16);
  v18 = sub_100004F7C(&qword_100118870);
  __chkstk_darwin(v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100004F7C(&qword_100118850);
  v21 = __chkstk_darwin(v45);
  v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v20 = static VerticalAlignment.top.getter(v21);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v24 = sub_100004F7C(&qword_100118878);
  v25 = sub_100038734(a1, v2, (uint64_t)&v20[*(int *)(v24 + 44)]);
  v44 = static Edge.Set.top.getter(v25);
  type metadata accessor for TrackPageView(0);
  sub_100006D34(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v15, enum case for UserInterfaceSizeClass.compact(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
  v26 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100007C8C((uint64_t)v17, (uint64_t)v9, &qword_100116690);
  sub_100007C8C((uint64_t)v15, v26, &qword_100116690);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v27((uint64_t)v9, 1, v4) != 1)
  {
    sub_100007C8C((uint64_t)v9, (uint64_t)v47, &qword_100116690);
    if (v27(v26, 1, v4) != 1)
    {
      v29 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v43, v26, v4);
      v30 = sub_100004864(&qword_1001186F0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)(v47, v29, v4, v30);
      v32 = *(void (**)(char *, uint64_t))(v5 + 8);
      v32(v29, v4);
      sub_10000526C((uint64_t)v15, &qword_100116690);
      sub_10000526C((uint64_t)v17, &qword_100116690);
      v32(v47, v4);
      sub_10000526C((uint64_t)v9, &qword_100116690);
      if ((v31 & 1) != 0)
      {
        v28 = 32.0;
        goto LABEL_10;
      }
LABEL_9:
      v28 = 48.0;
      goto LABEL_10;
    }
    sub_10000526C((uint64_t)v15, &qword_100116690);
    sub_10000526C((uint64_t)v17, &qword_100116690);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v47, v4);
LABEL_6:
    sub_10000526C((uint64_t)v9, &qword_1001186E8);
    goto LABEL_9;
  }
  sub_10000526C((uint64_t)v15, &qword_100116690);
  sub_10000526C((uint64_t)v17, &qword_100116690);
  if (v27(v26, 1, v4) != 1)
    goto LABEL_6;
  sub_10000526C((uint64_t)v9, &qword_100116690);
  v28 = 32.0;
LABEL_10:
  v33 = EdgeInsets.init(_all:)(v28);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_100007C8C((uint64_t)v20, (uint64_t)v23, &qword_100118870);
  v40 = &v23[*(int *)(v45 + 36)];
  *v40 = v44;
  *((double *)v40 + 1) = v33;
  *((_QWORD *)v40 + 2) = v35;
  *((_QWORD *)v40 + 3) = v37;
  *((_QWORD *)v40 + 4) = v39;
  v40[40] = 0;
  sub_10000526C((uint64_t)v20, &qword_100118870);
  return sub_100007C48((uint64_t)v23, v46, &qword_100118850);
}

uint64_t sub_100038734@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[3];

  v43 = a3;
  v5 = sub_100004F7C(&qword_100118880);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100004F7C(&qword_100118888);
  v8 = __chkstk_darwin(v42);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v41 = (uint64_t)&v40 - v11;
  v12 = sub_100004F7C(&qword_100118890);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(&qword_100118898);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v40 - v19;
  v21 = a2;
  v22 = sub_100038A50(a1, a2, (uint64_t)v14);
  LOBYTE(a2) = static Edge.Set.trailing.getter(v22);
  v23 = EdgeInsets.init(_all:)(4.0);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_100007C8C((uint64_t)v14, (uint64_t)v18, &qword_100118890);
  v30 = &v18[*(int *)(v15 + 36)];
  *v30 = a2;
  *((double *)v30 + 1) = v23;
  *((_QWORD *)v30 + 2) = v25;
  *((_QWORD *)v30 + 3) = v27;
  *((_QWORD *)v30 + 4) = v29;
  v30[40] = 0;
  sub_10000526C((uint64_t)v14, &qword_100118890);
  sub_100007C48((uint64_t)v18, (uint64_t)v20, &qword_100118898);
  v31 = sub_100038F20(v21, a1, (uint64_t)v7);
  v32 = static Alignment.center.getter(v31);
  _FrameLayout.init(width:height:alignment:)(v44, 0x4049000000000000, 0, 0x4049000000000000, 0, v32, v33);
  sub_100007C8C((uint64_t)v7, (uint64_t)v10, &qword_100118880);
  v34 = &v10[*(int *)(v42 + 36)];
  v35 = v44[1];
  *(_OWORD *)v34 = v44[0];
  *((_OWORD *)v34 + 1) = v35;
  *((_OWORD *)v34 + 2) = v44[2];
  sub_10000526C((uint64_t)v7, &qword_100118880);
  v36 = v41;
  sub_100007C48((uint64_t)v10, v41, &qword_100118888);
  sub_100007C8C((uint64_t)v20, (uint64_t)v18, &qword_100118898);
  sub_100007C8C(v36, (uint64_t)v10, &qword_100118888);
  v37 = v43;
  sub_100007C8C((uint64_t)v18, v43, &qword_100118898);
  v38 = sub_100004F7C(&qword_1001188A0);
  sub_100007C8C((uint64_t)v10, v37 + *(int *)(v38 + 48), &qword_100118888);
  sub_10000526C(v36, &qword_100118888);
  sub_10000526C((uint64_t)v20, &qword_100118898);
  sub_10000526C((uint64_t)v10, &qword_100118888);
  return sub_10000526C((uint64_t)v18, &qword_100118898);
}

uint64_t sub_100038A50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, __n128);
  __n128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;

  v60 = a2;
  v5 = sub_100004F7C(&qword_100118910);
  __chkstk_darwin(v5);
  v59 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RedactionReasons(0);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100118918);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100004F7C(&qword_100118920);
  v13 = __chkstk_darwin(v62);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v54 - v16;
  v61 = sub_100004F7C(&qword_100118928);
  __chkstk_darwin(v61);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C9C8(a1, a1[3]);
  v20 = sub_100098380();
  if (v21)
  {
    v22 = v20;
    v23 = v21;
    v54 = a3;
    sub_10000C9C8(a1, a1[3]);
    v24 = sub_10009A3F8();
    if (v25)
    {
      v26 = v24;
      v27 = v25;
      v28 = sub_10000C9C8(a1, a1[3]);
      v29 = objc_msgSend(*(id *)((char *)v28 + *(int *)(type metadata accessor for TrackPageMetadata(0) + 20)), "explicitContent");
      if (qword_100115EA8 != -1)
        swift_once(&qword_100115EA8, sub_100034F00);
      v30 = qword_100118298;
      *(_QWORD *)v19 = v26;
      *((_QWORD *)v19 + 1) = v27;
      *((_QWORD *)v19 + 2) = v22;
      *((_QWORD *)v19 + 3) = v23;
      v19[32] = v29;
      *((_QWORD *)v19 + 5) = v30;
      swift_storeEnumTagMultiPayload(v19, v61, 0);
      swift_retain(v30);
      v31 = sub_100004F7C(&qword_100118940);
      v32 = sub_100044D30();
      v33 = sub_100044DB4();
      v34 = v54;
      _ConditionalContent<>.init(storage:)(v19, v31, v62, v32, v33);
      v35 = sub_100004F7C(&qword_100118930);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
    }
    swift_bridgeObjectRelease(v23);
    a3 = v54;
  }
  v37 = type metadata accessor for TrackPageView(0);
  v39 = sub_10008708C(v37, v38);
  if ((v39 & 1) != 0)
  {
    v40 = a3;
    v63 = 0x747369747241;
    v64 = 0xE600000000000000;
    v65 = 1735290707;
    v66 = 0xE400000000000000;
    v67 = 1;
    static RedactionReasons.placeholder.getter(v39);
    v41 = sub_100044CEC();
    View.redacted(reason:)(v9, &type metadata for SongPlaybackView, v41);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v9, v56);
    swift_bridgeObjectRelease(v64);
    swift_bridgeObjectRelease(v66);
    if (qword_100115EA8 != -1)
      swift_once(&qword_100115EA8, sub_100034F00);
    v42 = qword_100118298;
    v43 = v57;
    v44 = v58;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v15, v12, v58);
    v45 = v62;
    *(_QWORD *)&v15[*(int *)(v62 + 36)] = v42;
    v46 = *(void (**)(char *, uint64_t, __n128))(v43 + 8);
    v47 = swift_retain(v42);
    v46(v12, v44, v47);
    sub_100007C48((uint64_t)v15, (uint64_t)v17, &qword_100118920);
    sub_100007C8C((uint64_t)v17, (uint64_t)v19, &qword_100118920);
    swift_storeEnumTagMultiPayload(v19, v61, 1);
    v48 = sub_100004F7C(&qword_100118940);
    v49 = sub_100044D30();
    v50 = sub_100044DB4();
    v51 = (uint64_t)v59;
    _ConditionalContent<>.init(storage:)(v19, v48, v45, v49, v50);
    sub_10000526C((uint64_t)v17, &qword_100118920);
    v52 = sub_100004F7C(&qword_100118930);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 0, 1, v52);
    return sub_100007C48(v51, v40, &qword_100118910);
  }
  else
  {
    v53 = sub_100004F7C(&qword_100118930);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(a3, 1, 1, v53);
  }
}

uint64_t sub_100038F20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t (**v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  __int128 v84;
  uint64_t v85;
  _QWORD v86[6];

  v73 = a2;
  v5 = sub_100004F7C(&qword_1001188A8);
  __chkstk_darwin(v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_1001188B0);
  __chkstk_darwin(v8);
  v81 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TrackPageView(0);
  v74 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v75 = v11;
  v76 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ColorScheme(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for SongPreviewPlaybackView(0);
  __chkstk_darwin(v77);
  v17 = (uint64_t *)((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = sub_100004F7C(&qword_1001188B8);
  v18 = __chkstk_darwin(v82);
  v79 = (uint64_t)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v80 = (uint64_t)&v69 - v20;
  v21 = *(int *)(v10 + 44);
  v78 = a1;
  v22 = *(_QWORD *)(a1 + v21);
  KeyPath = swift_getKeyPath(&unk_1000D37B8, v23);
  v83[0] = v22;
  v25 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v83, KeyPath, v25);
  swift_release(KeyPath);
  swift_beginAccess(v22 + 280, v83, 0, 0);
  sub_100007C8C(v22 + 280, (uint64_t)&v84, &qword_1001188C0);
  if (v85)
  {
    v70 = v5;
    v71 = v7;
    v72 = a3;
    sub_1000447DC(&v84, (uint64_t)v86);
    v26 = v73;
    sub_10000C9C8(v73, v73[3]);
    v27 = enum case for ColorScheme.light(_:);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
    v28(v15, enum case for ColorScheme.light(_:), v12);
    v29 = sub_100097D38((uint64_t)v15);
    v30 = *(void (**)(char *, uint64_t))(v13 + 8);
    v30(v15, v12);
    v31 = enum case for ColorScheme.dark(_:);
    v28(v15, enum case for ColorScheme.dark(_:), v12);
    v32 = sub_100097D38((uint64_t)v15);
    v30(v15, v12);
    v69 = sub_1000A99D8(v29, v32);
    swift_release(v29);
    swift_release(v32);
    sub_10000C9C8(v26, v26[3]);
    v28(v15, v27, v12);
    v33 = sub_100097948((uint64_t)v15);
    v30(v15, v12);
    v28(v15, v31, v12);
    v34 = sub_100097948((uint64_t)v15);
    v30(v15, v12);
    v35 = sub_1000A99D8(v33, v34);
    swift_release(v33);
    swift_release(v34);
    sub_100007AE0((uint64_t)v86, (uint64_t)&v84);
    v36 = type metadata accessor for SongPreviewPlaybackViewModel(0);
    swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    v37 = v69;
    swift_retain(v69);
    swift_retain(v35);
    v38 = sub_100096CE0(&v84, v37, v35);
    v39 = v76;
    sub_10000B340(v78, v76, type metadata accessor for TrackPageView);
    v40 = *(unsigned __int8 *)(v74 + 80);
    v41 = (v40 + 16) & ~v40;
    v42 = swift_allocObject(&unk_10010A2C8, v41 + v75, v40 | 7);
    sub_10000B4D4(v39, v42 + v41, type metadata accessor for TrackPageView);
    *v17 = swift_getKeyPath(&unk_1000D37E0, v43);
    v44 = sub_100004F7C(&qword_1001166A8);
    swift_storeEnumTagMultiPayload(v17, v44, 0);
    swift_release(v37);
    swift_release(v35);
    v45 = v77;
    v46 = (char *)v17 + *(int *)(v77 + 20);
    *(_QWORD *)v46 = sub_100044CE4;
    *((_QWORD *)v46 + 1) = v38;
    v46[16] = 0;
    v47 = (uint64_t (**)())((char *)v17 + *(int *)(v45 + 24));
    *v47 = sub_100044C58;
    v47[1] = (uint64_t (*)())v42;
    if (qword_100115EA8 != -1)
      swift_once(&qword_100115EA8, sub_100034F00);
    v48 = qword_100118298;
    v49 = v79;
    sub_10000B340((uint64_t)v17, v79, type metadata accessor for SongPreviewPlaybackView);
    v50 = v82;
    *(_QWORD *)(v49 + *(int *)(v82 + 36)) = v48;
    swift_retain(v48);
    sub_10000B600((uint64_t)v17, type metadata accessor for SongPreviewPlaybackView);
    v51 = v80;
    sub_100007C48(v49, v80, &qword_1001188B8);
    v52 = (uint64_t)v71;
    sub_100007C8C(v51, (uint64_t)v71, &qword_1001188B8);
    swift_storeEnumTagMultiPayload(v52, v70, 0);
    v53 = sub_100004F7C(&qword_1001188D0);
    v54 = sub_100044AB0();
    v55 = sub_100044B4C();
    v56 = (uint64_t)v81;
    _ConditionalContent<>.init(storage:)(v52, v50, v53, v54, v55);
    sub_10000526C(v51, &qword_1001188B8);
    _s16MusicRecognition11AnyPlaylistVwxx_0(v86);
    v57 = sub_100004F7C(&qword_1001188C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
    return sub_100007C48(v56, v72, &qword_1001188B0);
  }
  else
  {
    v59 = sub_10000526C((uint64_t)&v84, &qword_1001188C0);
    if ((sub_10008708C(v59, v60) & 1) != 0)
    {
      v61 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
      v62 = Color.init(uiColor:)(v61);
      if (qword_100115EA8 != -1)
        swift_once(&qword_100115EA8, sub_100034F00);
      v63 = qword_100118298;
      *(_QWORD *)v7 = v62;
      *((_WORD *)v7 + 4) = 256;
      *((_QWORD *)v7 + 2) = v63;
      swift_storeEnumTagMultiPayload(v7, v5, 1);
      swift_retain(v63);
      v64 = sub_100004F7C(&qword_1001188D0);
      v65 = sub_100044AB0();
      v66 = sub_100044B4C();
      _ConditionalContent<>.init(storage:)(v7, v82, v64, v65, v66);
      v67 = sub_100004F7C(&qword_1001188C8);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(a3, 0, 1, v67);
    }
    else
    {
      v68 = sub_100004F7C(&qword_1001188C8);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(a3, 1, 1, v68);
    }
  }
}

uint64_t sub_100039660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v7 = v1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 24))
    v5 = 68610;
  else
    v5 = 3074;
  return sub_1000A6994(v5, 0xD000000000000028, 0x80000001000D90E0);
}

uint64_t sub_100039724@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (**v58)();
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)();
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, __n128);
  __n128 v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)();
  uint64_t KeyPath;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  void *v127;
  id v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (**v142)();
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)();
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  int *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t (**v208)();
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)();
  uint64_t (*v218)();

  v182 = a3;
  v214 = a4;
  v215 = a2;
  v195 = type metadata accessor for RedactionReasons(0);
  v193 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v192 = (char *)&v176 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100004F7C(&qword_1001187D8);
  v197 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v196 = (uint64_t)&v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100004F7C(&qword_1001187E0);
  __chkstk_darwin(v194);
  v200 = (char *)&v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v212 = sub_100004F7C(&qword_1001187E8);
  v8 = __chkstk_darwin(v212);
  v198 = (uint64_t)&v176 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v201 = (uint64_t)&v176 - v10;
  v210 = sub_100004F7C(&qword_1001187F0);
  __chkstk_darwin(v210);
  v211 = (uint64_t)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004F7C(&qword_1001187F8);
  __chkstk_darwin(v12);
  v213 = (char *)&v176 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TrackPageView(0);
  v183 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v184 = v15;
  v185 = (uint64_t)&v176 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = type metadata accessor for ColorScheme(0);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v17 = (char *)&v176 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004F7C(&qword_100118670);
  __chkstk_darwin(v18);
  v179 = (uint64_t)&v176 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for PlayInAppleMusicView(0);
  v20 = __chkstk_darwin(v207);
  v191 = (uint64_t)&v176 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v208 = (uint64_t (**)())((char *)&v176 - v23);
  __chkstk_darwin(v22);
  v187 = (uint64_t)&v176 - v24;
  v186 = sub_100004F7C(&qword_100118800);
  __chkstk_darwin(v186);
  v189 = (uint64_t)&v176 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = sub_100004F7C(&qword_100118808);
  v26 = __chkstk_darwin(v209);
  v188 = (uint64_t)&v176 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v190 = (uint64_t)&v176 - v28;
  v29 = sub_100004F7C(&qword_100118580);
  __chkstk_darwin(v29);
  v31 = (char *)&v176 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v33 = __chkstk_darwin(v32);
  v35 = (char *)&v176 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v176 - v37;
  v39 = __chkstk_darwin(v36);
  v204 = (uint64_t)&v176 - v40;
  __chkstk_darwin(v39);
  v42 = (char *)&v176 - v41;
  v43 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = __chkstk_darwin(v43);
  v203 = (uint64_t)&v176 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v205 = a1;
  v206 = (char *)&v176 - v47;
  v48 = sub_10000C9C8(a1, a1[3]);
  v202 = (int *)type metadata accessor for TrackPageMetadata(0);
  sub_100007C8C((uint64_t)v48 + v202[6], (uint64_t)v31, &qword_100118580);
  v49 = type metadata accessor for AnySong(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v31, 1, v49) == 1)
  {
    sub_10000526C((uint64_t)v31, &qword_100118580);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v42, 1, 1, v43);
    v50 = v43;
  }
  else
  {
    sub_100007C8C((uint64_t)v31, (uint64_t)v42, (uint64_t *)&unk_100118CE0);
    sub_10000B600((uint64_t)v31, type metadata accessor for AnySong);
    v50 = v43;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) != 1)
    {
      v96 = v206;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v206, v42, v43);
      v97 = (char *)*(int *)(v14 + 44);
      v98 = v215;
      v99 = sub_100087224();
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v203, v96, v43);
      v100 = sub_10000C9C8(v205, v205[3]);
      v101 = v179;
      sub_100007C8C((uint64_t)v100 + v202[8], v179, &qword_100118670);
      v102 = type metadata accessor for AnyAlbum(0);
      v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 48))(v101, 1, v102);
      v178 = v50;
      v177 = v44;
      LODWORD(v201) = v99;
      v200 = v97;
      if (v103 == 1)
      {
        sub_10000526C(v101, &qword_100118670);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v204, 1, 1, v50);
      }
      else
      {
        v104 = (_QWORD *)(v101 + *(int *)(v102 + 20));
        v105 = v104[3];
        v106 = v104[4];
        sub_10000C9C8(v104, v105);
        (*(void (**)(uint64_t, uint64_t))(v106 + 56))(v105, v106);
        sub_10000B600(v101, type metadata accessor for AnyAlbum);
      }
      v107 = v180;
      v108 = v205;
      sub_10000C9C8(v205, v205[3]);
      v109 = enum case for ColorScheme.light(_:);
      v110 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 104);
      v111 = v181;
      v110(v17, enum case for ColorScheme.light(_:), v181);
      v112 = sub_100097948((uint64_t)v17);
      v113 = *(void (**)(char *, uint64_t))(v107 + 8);
      v113(v17, v111);
      v114 = enum case for ColorScheme.dark(_:);
      v110(v17, enum case for ColorScheme.dark(_:), v111);
      v115 = sub_100097948((uint64_t)v17);
      v113(v17, v111);
      v199 = sub_1000A99D8(v112, v115);
      swift_release(v112);
      swift_release(v115);
      sub_10000C9C8(v108, v108[3]);
      v110(v17, v109, v111);
      v116 = sub_100097D38((uint64_t)v17);
      v113(v17, v111);
      v110(v17, v114, v111);
      v117 = sub_100097D38((uint64_t)v17);
      v113(v17, v111);
      v198 = sub_1000A99D8(v116, v117);
      swift_release(v116);
      swift_release(v117);
      v118 = v182[3];
      v197 = v182[2];
      v119 = v182[1];
      v196 = *v182;
      sub_10000C9C8(v108, v108[3]);
      swift_bridgeObjectRetain(v119);
      swift_bridgeObjectRetain(v118);
      v195 = sub_10009854C();
      v194 = v120;
      v121 = *(uint64_t (**)())&v200[v98];
      KeyPath = swift_getKeyPath(&unk_1000D36F0, v120);
      v217 = v121;
      v123 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v217, KeyPath, v123);
      swift_release(KeyPath);
      v124 = *((_QWORD *)v121 + 71);
      v125 = *((_QWORD *)v121 + 72);
      v126 = sub_10000C9C8(v108, v108[3]);
      v127 = *(void **)((char *)v126 + v202[5]);
      swift_bridgeObjectRetain(v125);
      v128 = objc_msgSend(v127, "shazamID");
      if (v128)
      {
        v130 = v128;
        v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
        v133 = v132;

      }
      else
      {
        v131 = 0;
        v133 = 0;
      }
      v134 = swift_getKeyPath(&unk_1000D3718, v129);
      v217 = v121;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v217, v134, v123);
      swift_release(v134);
      v135 = (void *)*((_QWORD *)v121 + 34);
      v136 = v135;
      *(_QWORD *)&v175 = v125;
      *((_QWORD *)&v175 + 1) = v131;
      *((_QWORD *)&v173 + 1) = v124;
      *(_QWORD *)&v173 = v194;
      *(_QWORD *)&v172 = v119;
      *((_QWORD *)&v172 + 1) = v195;
      v137 = sub_10008197C(v201 & 1, v203, v204, v199, v198, v197, v118, v196, v172, v173, v175, v133, v135);
      v138 = v185;
      sub_10000B340(v215, v185, type metadata accessor for TrackPageView);
      v139 = *(unsigned __int8 *)(v183 + 80);
      v140 = (v139 + 16) & ~v139;
      v141 = swift_allocObject(&unk_10010A2A0, v140 + v184, v139 | 7);
      sub_10000B4D4(v138, v141 + v140, type metadata accessor for TrackPageView);
      v143 = v207;
      v142 = v208;
      v144 = (char *)v208 + *(int *)(v207 + 24);
      *(_QWORD *)v144 = swift_getKeyPath(&unk_1000D3620, v145);
      v146 = sub_100004F7C(&qword_1001166A0);
      swift_storeEnumTagMultiPayload(v144, v146, 0);
      v147 = (uint64_t (**)())((char *)v142 + *(int *)(v143 + 28));
      *v147 = swift_getKeyPath(&unk_1000D3308, v148);
      v149 = sub_100004F7C(&qword_100116698);
      swift_storeEnumTagMultiPayload(v147, v149, 0);
      v216 = v137;
      v150 = type metadata accessor for PlayInAppleMusicViewModel(0);
      State.init(wrappedValue:)(&v217, &v216, v150);
      v151 = v218;
      v142[2] = v217;
      v142[3] = v151;
      *v142 = sub_100044A68;
      v142[1] = (uint64_t (*)())v141;
      v152 = (uint64_t)v142;
      v153 = v187;
      sub_10000B4D4(v152, v187, type metadata accessor for PlayInAppleMusicView);
      if (qword_100115EA8 != -1)
        swift_once(&qword_100115EA8, sub_100034F00);
      v154 = qword_100118298;
      v155 = v189;
      sub_10000B340(v153, v189, type metadata accessor for PlayInAppleMusicView);
      *(_QWORD *)(v155 + *(int *)(v186 + 36)) = v154;
      swift_retain(v154);
      v156 = sub_10000B600(v153, type metadata accessor for PlayInAppleMusicView);
      LOBYTE(v154) = static Edge.Set.bottom.getter(v156);
      v157 = EdgeInsets.init(_all:)(36.0);
      v159 = v158;
      v161 = v160;
      v163 = v162;
      v164 = v188;
      sub_100007C8C(v155, v188, &qword_100118800);
      v165 = v209;
      v166 = v164 + *(int *)(v209 + 36);
      *(_BYTE *)v166 = v154;
      *(double *)(v166 + 8) = v157;
      *(_QWORD *)(v166 + 16) = v159;
      *(_QWORD *)(v166 + 24) = v161;
      *(_QWORD *)(v166 + 32) = v163;
      *(_BYTE *)(v166 + 40) = 0;
      sub_10000526C(v155, &qword_100118800);
      v167 = v190;
      sub_100007C48(v164, v190, &qword_100118808);
      v168 = v211;
      sub_100007C8C(v167, v211, &qword_100118808);
      swift_storeEnumTagMultiPayload(v168, v210, 0);
      v169 = sub_100044928(&qword_100118820, &qword_100118808, (void (*)(void))sub_10004488C);
      v170 = sub_100044928(&qword_100118840, &qword_1001187E8, (void (*)(void))sub_100044994);
      v94 = (uint64_t)v213;
      _ConditionalContent<>.init(storage:)(v168, v165, v212, v169, v170);
      sub_10000526C(v167, &qword_100118808);
      (*(void (**)(char *, uint64_t))(v177 + 8))(v206, v178);
      goto LABEL_19;
    }
  }
  v51 = sub_10000526C((uint64_t)v42, (uint64_t *)&unk_100118CE0);
  if ((sub_10008708C(v51, v52) & 1) == 0)
  {
    v95 = sub_100004F7C(&qword_100118810);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v214, 1, 1, v95);
  }
  URL.init(string:)(0x632E6D617A616873, 0xEA00000000006D6FLL);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v38, 1, v50);
  if ((_DWORD)result != 1)
  {
    v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v35, 1, 1, v50);
    v55 = static Color.primary.getter(v54);
    v56 = static Color.primary.getter(v55);
    *(_QWORD *)&v174 = 0;
    *((_QWORD *)&v174 + 1) = 0x495F4D415A414853;
    v57 = sub_10008197C(0, (uint64_t)v38, (uint64_t)v35, v55, v56, 0, 0, 0, 0, 0, v174, 0xE900000000000044, 0);
    v59 = v207;
    v58 = v208;
    v60 = (char *)v208 + *(int *)(v207 + 24);
    *(_QWORD *)v60 = swift_getKeyPath(&unk_1000D3620, v61);
    v62 = sub_100004F7C(&qword_1001166A0);
    swift_storeEnumTagMultiPayload(v60, v62, 0);
    v63 = (uint64_t (**)())((char *)v58 + *(int *)(v59 + 28));
    *v63 = swift_getKeyPath(&unk_1000D3308, v64);
    v65 = sub_100004F7C(&qword_100116698);
    swift_storeEnumTagMultiPayload(v63, v65, 0);
    v216 = v57;
    v66 = type metadata accessor for PlayInAppleMusicViewModel(0);
    State.init(wrappedValue:)(&v217, &v216, v66);
    v67 = v218;
    v58[2] = v217;
    v58[3] = v67;
    *v58 = 0;
    v58[1] = 0;
    v68 = v191;
    v69 = sub_10000B4D4((uint64_t)v58, v191, type metadata accessor for PlayInAppleMusicView);
    v70 = v192;
    static RedactionReasons.placeholder.getter(v69);
    v71 = sub_100004864(&qword_100118818, type metadata accessor for PlayInAppleMusicView, (uint64_t)&unk_1000D5698);
    v72 = v196;
    View.redacted(reason:)(v70, v59, v71);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v70, v195);
    sub_10000B600(v68, type metadata accessor for PlayInAppleMusicView);
    if (qword_100115EA8 != -1)
      swift_once(&qword_100115EA8, sub_100034F00);
    v73 = qword_100118298;
    v74 = v197;
    v75 = (uint64_t)v200;
    v76 = v199;
    (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v200, v72, v199);
    *(_QWORD *)(v75 + *(int *)(v194 + 36)) = v73;
    v77 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v74 + 8);
    v78 = swift_retain(v73);
    v79 = v77(v72, v76, v78);
    LOBYTE(v73) = static Edge.Set.bottom.getter(v79);
    v80 = EdgeInsets.init(_all:)(36.0);
    v82 = v81;
    v84 = v83;
    v86 = v85;
    v87 = v198;
    sub_100007C8C(v75, v198, &qword_1001187E0);
    v88 = v212;
    v89 = v87 + *(int *)(v212 + 36);
    *(_BYTE *)v89 = v73;
    *(double *)(v89 + 8) = v80;
    *(_QWORD *)(v89 + 16) = v82;
    *(_QWORD *)(v89 + 24) = v84;
    *(_QWORD *)(v89 + 32) = v86;
    *(_BYTE *)(v89 + 40) = 0;
    sub_10000526C(v75, &qword_1001187E0);
    v90 = v201;
    sub_100007C48(v87, v201, &qword_1001187E8);
    v91 = v211;
    sub_100007C8C(v90, v211, &qword_1001187E8);
    swift_storeEnumTagMultiPayload(v91, v210, 1);
    v92 = sub_100044928(&qword_100118820, &qword_100118808, (void (*)(void))sub_10004488C);
    v93 = sub_100044928(&qword_100118840, &qword_1001187E8, (void (*)(void))sub_100044994);
    v94 = (uint64_t)v213;
    _ConditionalContent<>.init(storage:)(v91, v209, v88, v92, v93);
    sub_10000526C(v90, &qword_1001187E8);
LABEL_19:
    v171 = sub_100004F7C(&qword_100118810);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 56))(v94, 0, 1, v171);
    return sub_100007C48(v94, v214, &qword_1001187F8);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003A82C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v7 = v1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 24))
    v5 = 68353;
  else
    v5 = 2817;
  return sub_1000A6994(v5, 0xD000000000000028, 0x80000001000D90E0);
}

uint64_t sub_10003A8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = a2;
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v55 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v53 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100004F7C(&qword_1001186E8);
  __chkstk_darwin(v57);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100116690);
  v9 = __chkstk_darwin(v8);
  v54 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v53 - v12;
  __chkstk_darwin(v11);
  v15 = (char **)((char *)&v53 - v14);
  v16 = sub_100004F7C(&qword_100118718);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004F7C(&qword_100118720);
  __chkstk_darwin(v34);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100004F7C(&qword_100118680);
  __chkstk_darwin(v58);
  v59 = (uint64_t)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10003ADE4(a1, v2, (uint64_t)v18);
  LOBYTE(a1) = static Edge.Set.bottom.getter(v22);
  v23 = EdgeInsets.init(_all:)(36.0);
  v25 = v24;
  v27 = v26;
  v29 = v28;
  sub_100007C8C((uint64_t)v18, (uint64_t)v20, &qword_100118718);
  v30 = *(int *)(v34 + 36);
  v56 = v20;
  v31 = &v20[v30];
  *v31 = a1;
  *((double *)v31 + 1) = v23;
  *((_QWORD *)v31 + 2) = v25;
  *((_QWORD *)v31 + 3) = v27;
  *((_QWORD *)v31 + 4) = v29;
  v31[40] = 0;
  v32 = v55;
  v33 = sub_10000526C((uint64_t)v18, &qword_100118718);
  LODWORD(v34) = static Edge.Set.horizontal.getter(v33);
  type metadata accessor for TrackPageView(0);
  sub_100006D34(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v13, enum case for UserInterfaceSizeClass.regular(_:), v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v13, 0, 1, v4);
  v35 = (uint64_t)&v7[*(int *)(v57 + 48)];
  sub_100007C8C((uint64_t)v15, (uint64_t)v7, &qword_100116690);
  sub_100007C8C((uint64_t)v13, v35, &qword_100116690);
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v36((uint64_t)v7, 1, v4) != 1)
  {
    LODWORD(v57) = v34;
    v34 = v54;
    sub_100007C8C((uint64_t)v7, v54, &qword_100116690);
    if (v36(v35, 1, v4) != 1)
    {
      v37 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v53, v35, v4);
      v38 = sub_100004864(&qword_1001186F0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v34, v37, v4, v38);
      v40 = *(void (**)(char *, uint64_t))(v32 + 8);
      v40(v37, v4);
      sub_10000526C((uint64_t)v13, &qword_100116690);
      sub_10000526C((uint64_t)v15, &qword_100116690);
      v40((char *)v34, v4);
      sub_10000526C((uint64_t)v7, &qword_100116690);
      LOBYTE(v34) = v57;
      if ((v39 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v41 = 20.0;
      goto LABEL_10;
    }
    sub_10000526C((uint64_t)v13, &qword_100116690);
    sub_10000526C((uint64_t)v15, &qword_100116690);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v4);
    LOBYTE(v34) = v57;
LABEL_6:
    sub_10000526C((uint64_t)v7, &qword_1001186E8);
    goto LABEL_9;
  }
  sub_10000526C((uint64_t)v13, &qword_100116690);
  sub_10000526C((uint64_t)v15, &qword_100116690);
  if (v36(v35, 1, v4) != 1)
    goto LABEL_6;
  sub_10000526C((uint64_t)v7, &qword_100116690);
LABEL_8:
  v41 = 80.0;
LABEL_10:
  v42 = EdgeInsets.init(_all:)(v41);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v49 = (uint64_t)v56;
  v50 = v59;
  sub_100007C8C((uint64_t)v56, v59, &qword_100118720);
  v51 = v50 + *(int *)(v58 + 36);
  *(_BYTE *)v51 = v34;
  *(double *)(v51 + 8) = v42;
  *(_QWORD *)(v51 + 16) = v44;
  *(_QWORD *)(v51 + 24) = v46;
  *(_QWORD *)(v51 + 32) = v48;
  *(_BYTE *)(v51 + 40) = 0;
  sub_10000526C(v49, &qword_100118720);
  return sub_100007C48(v50, v60, &qword_100118680);
}

uint64_t sub_10003ADE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD v74[5];
  __int128 v75;
  uint64_t v76;
  _QWORD v77[6];

  v70 = a2;
  v72 = (char *)a1;
  v73 = a3;
  v65 = type metadata accessor for RedactionReasons(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v67 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100004F7C(&qword_100118728);
  v66 = *(_QWORD *)(v71 - 8);
  v4 = __chkstk_darwin(v71);
  v63 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v62 - v6;
  v69 = sub_100004F7C(&qword_100118730);
  __chkstk_darwin(v69);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100118738);
  __chkstk_darwin(v10);
  v68 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ArtistProfileViewModel(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TrackPageView(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ArtistProfileView(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v62 - v23;
  sub_100007C8C((uint64_t)v72, (uint64_t)&v75, &qword_1001186C8);
  if (v76)
  {
    sub_1000447DC(&v75, (uint64_t)v77);
    sub_100007AE0((uint64_t)v77, (uint64_t)&v75);
    sub_10000B340(v70, (uint64_t)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TrackPageView);
    v25 = *(unsigned __int8 *)(v16 + 80);
    v26 = (v25 + 16) & ~v25;
    v27 = swift_allocObject(&unk_10010A250, v26 + v17, v25 | 7);
    sub_10000B4D4((uint64_t)v18, v27 + v26, type metadata accessor for TrackPageView);
    v28 = &v22[*(int *)(v19 + 24)];
    *(_QWORD *)v28 = swift_getKeyPath(&unk_1000D3620, v29);
    v30 = sub_100004F7C(&qword_1001166A0);
    swift_storeEnumTagMultiPayload(v28, v30, 0);
    sub_100007AE0((uint64_t)&v75, (uint64_t)v74);
    sub_1000AEB1C(v74, (uint64_t)v14);
    _s16MusicRecognition11AnyPlaylistVwxx_0(&v75);
    sub_10000B4D4((uint64_t)v14, (uint64_t)v22, type metadata accessor for ArtistProfileViewModel);
    v31 = (uint64_t (**)())&v22[*(int *)(v19 + 20)];
    *v31 = sub_1000447F8;
    v31[1] = (uint64_t (*)())v27;
    sub_10000B4D4((uint64_t)v22, (uint64_t)v24, type metadata accessor for ArtistProfileView);
    sub_10000B340((uint64_t)v24, (uint64_t)v9, type metadata accessor for ArtistProfileView);
    swift_storeEnumTagMultiPayload(v9, v69, 0);
    v32 = sub_100004864(&qword_100118748, type metadata accessor for ArtistProfileView, (uint64_t)&unk_1000D4D00);
    *(_QWORD *)&v75 = v19;
    *((_QWORD *)&v75 + 1) = v32;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v75, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v34 = v68;
    _ConditionalContent<>.init(storage:)(v9, v19, v71, v32, OpaqueTypeConformance2);
    sub_10000B600((uint64_t)v24, type metadata accessor for ArtistProfileView);
    _s16MusicRecognition11AnyPlaylistVwxx_0(v77);
    v35 = sub_100004F7C(&qword_100118740);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
    v36 = (uint64_t)v34;
    return sub_100007C48(v36, v73, &qword_100118738);
  }
  v37 = v67;
  v62 = v7;
  v72 = v9;
  v38 = v71;
  v39 = sub_10000526C((uint64_t)&v75, &qword_1001186C8);
  v41 = sub_10008708C(v39, v40);
  v42 = v73;
  if ((v41 & 1) != 0)
  {
    v77[3] = type metadata accessor for DesignTimeArtistMetadata(0);
    v77[4] = &off_100108890;
    v43 = sub_1000446F4(v77);
    sub_100007CE0((uint64_t)v43);
    v44 = v19;
    v45 = &v22[*(int *)(v19 + 24)];
    *(_QWORD *)v45 = swift_getKeyPath(&unk_1000D3620, v46);
    v47 = sub_100004F7C(&qword_1001166A0);
    swift_storeEnumTagMultiPayload(v45, v47, 0);
    sub_100007AE0((uint64_t)v77, (uint64_t)&v75);
    sub_1000AEB1C(&v75, (uint64_t)v14);
    _s16MusicRecognition11AnyPlaylistVwxx_0(v77);
    sub_10000B4D4((uint64_t)v14, (uint64_t)v22, type metadata accessor for ArtistProfileViewModel);
    v48 = &v22[*(int *)(v19 + 20)];
    *(_QWORD *)v48 = 0;
    *((_QWORD *)v48 + 1) = 0;
    v49 = (uint64_t)v24;
    v50 = sub_10000B4D4((uint64_t)v22, (uint64_t)v24, type metadata accessor for ArtistProfileView);
    v51 = v37;
    static RedactionReasons.placeholder.getter(v50);
    v52 = sub_100004864(&qword_100118748, type metadata accessor for ArtistProfileView, (uint64_t)&unk_1000D4D00);
    v53 = v63;
    View.redacted(reason:)(v51, v19, v52);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v51, v65);
    sub_10000B600(v49, type metadata accessor for ArtistProfileView);
    v54 = v66;
    v55 = v62;
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v62, v53, v38);
    v56 = (uint64_t)v72;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v72, v55, v38);
    swift_storeEnumTagMultiPayload(v56, v69, 1);
    v77[0] = v44;
    v77[1] = v52;
    v57 = swift_getOpaqueTypeConformance2(v77, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v58 = v68;
    _ConditionalContent<>.init(storage:)(v56, v44, v38, v52, v57);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v38);
    v59 = sub_100004F7C(&qword_100118740);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 0, 1, v59);
    v36 = (uint64_t)v58;
    return sub_100007C48(v36, v73, &qword_100118738);
  }
  v61 = sub_100004F7C(&qword_100118740);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v42, 1, 1, v61);
}

uint64_t sub_10003B450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v7 = v1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 24))
    v5 = 67585;
  else
    v5 = 2049;
  return sub_1000A6994(v5, 0xD000000000000028, 0x80000001000D90E0);
}

uint64_t sub_10003B514@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41)();
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  char *v54;
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t);
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v92 = a2;
  *(_QWORD *)&v102 = a3;
  v99 = type metadata accessor for UserInterfaceSizeClass(0);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v90 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100004F7C(&qword_1001186E8);
  __chkstk_darwin(v94);
  v96 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100116690);
  v7 = __chkstk_darwin(v6);
  v91 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v86 - v10;
  __chkstk_darwin(v9);
  v101 = (uint64_t *)((char *)&v86 - v12);
  v93 = type metadata accessor for TrackPageView(0);
  v13 = *(_QWORD *)(v93 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v93);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v16);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ShazamUpsellViewModel(0);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for ShazamUpsellView(0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v86 - v26;
  v98 = sub_100004F7C(&qword_1001186F8);
  __chkstk_darwin(v98);
  v100 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004F7C(&qword_100118700);
  v30 = __chkstk_darwin(v29);
  __chkstk_darwin(v30);
  if ((a1 & 1) == 0)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v33 + 56))(v102, 1, 1);
  v86 = (uint64_t)&v86 - v32;
  v87 = v34;
  v88 = v33;
  v89 = v31;
  sub_100007C8C(v92, (uint64_t)v18, (uint64_t *)&unk_100118CE0);
  sub_10007416C((uint64_t)v18, v21);
  sub_10000B340(v95, (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TrackPageView);
  v35 = *(unsigned __int8 *)(v13 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = swift_allocObject(&unk_10010A200, v36 + v14, v35 | 7);
  sub_10000B4D4((uint64_t)v15, v37 + v36, type metadata accessor for TrackPageView);
  v38 = &v25[*(int *)(v22 + 24)];
  *(_QWORD *)v38 = swift_getKeyPath(&unk_1000D3620, v39);
  v40 = sub_100004F7C(&qword_1001166A0);
  swift_storeEnumTagMultiPayload(v38, v40, 0);
  sub_10000B4D4((uint64_t)v21, (uint64_t)v25, type metadata accessor for ShazamUpsellViewModel);
  v41 = (uint64_t (**)())&v25[*(int *)(v22 + 20)];
  *v41 = sub_100044734;
  v41[1] = (uint64_t (*)())v37;
  v42 = sub_10000B4D4((uint64_t)v25, (uint64_t)v27, type metadata accessor for ShazamUpsellView);
  LODWORD(v25) = static Edge.Set.horizontal.getter(v42);
  v43 = v101;
  sub_100006D34(v101);
  v44 = v97;
  v45 = v99;
  (*(void (**)(char *, _QWORD, uint64_t))(v97 + 104))(v11, enum case for UserInterfaceSizeClass.regular(_:), v99);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v11, 0, 1, v45);
  v46 = v96;
  v47 = v96 + *(int *)(v94 + 48);
  sub_100007C8C((uint64_t)v43, v96, &qword_100116690);
  sub_100007C8C((uint64_t)v11, v47, &qword_100116690);
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  if (v48(v46, 1, v45) != 1)
  {
    LODWORD(v95) = (_DWORD)v25;
    v25 = v91;
    sub_100007C8C(v46, (uint64_t)v91, &qword_100116690);
    v53 = v48(v47, 1, v45);
    v51 = (uint64_t)v100;
    if (v53 != 1)
    {
      v54 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v90, v47, v45);
      v55 = sub_100004864(&qword_1001186F0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v56 = dispatch thunk of static Equatable.== infix(_:_:)(v25, v54, v45, v55);
      v57 = *(void (**)(char *, uint64_t))(v44 + 8);
      v57(v54, v45);
      sub_10000526C((uint64_t)v11, &qword_100116690);
      sub_10000526C((uint64_t)v101, &qword_100116690);
      v57(v25, v45);
      sub_10000526C(v46, &qword_100116690);
      v50 = v102;
      LOBYTE(v25) = v95;
      if ((v56 & 1) != 0)
        goto LABEL_10;
LABEL_11:
      v58 = 20.0;
      goto LABEL_12;
    }
    sub_10000526C((uint64_t)v11, &qword_100116690);
    sub_10000526C((uint64_t)v43, &qword_100116690);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v45);
    v50 = v102;
    LOBYTE(v25) = v95;
LABEL_8:
    sub_10000526C(v46, &qword_1001186E8);
    goto LABEL_11;
  }
  sub_10000526C((uint64_t)v11, &qword_100116690);
  sub_10000526C((uint64_t)v43, &qword_100116690);
  v49 = v48(v47, 1, v45);
  v50 = v102;
  v51 = (uint64_t)v100;
  if (v49 != 1)
    goto LABEL_8;
  sub_10000526C(v46, &qword_100116690);
LABEL_10:
  v58 = 80.0;
LABEL_12:
  v59 = EdgeInsets.init(_all:)(v58);
  v61 = v60;
  v63 = v62;
  v65 = v64;
  sub_10000B340((uint64_t)v27, v51, type metadata accessor for ShazamUpsellView);
  v66 = v51 + *(int *)(v98 + 36);
  *(_BYTE *)v66 = (_BYTE)v25;
  *(double *)(v66 + 8) = v59;
  *(_QWORD *)(v66 + 16) = v61;
  *(_QWORD *)(v66 + 24) = v63;
  *(_QWORD *)(v66 + 32) = v65;
  *(_BYTE *)(v66 + 40) = 0;
  sub_10000B600((uint64_t)v27, type metadata accessor for ShazamUpsellView);
  v67 = sub_100004F7C(&qword_100118708);
  v68 = swift_allocObject(v67, 64, 7);
  *(_OWORD *)(v68 + 16) = xmmword_1000D32A0;
  if (qword_100115E80 != -1)
    swift_once(&qword_100115E80, sub_100034E48);
  swift_retain(qword_100118270);
  *(_QWORD *)(v68 + 32) = Gradient.Stop.init(color:location:)(0.0);
  *(_QWORD *)(v68 + 40) = v69;
  if (qword_100115E88 != -1)
    swift_once(&qword_100115E88, sub_100034E5C);
  swift_retain(qword_100118278);
  *(_QWORD *)(v68 + 48) = Gradient.Stop.init(color:location:)(1.0);
  *(_QWORD *)(v68 + 56) = v70;
  v71 = static UnitPoint.top.getter();
  v73 = v72;
  v74 = static UnitPoint.bottom.getter();
  v76 = v75;
  Gradient.init(stops:)(v68);
  v77 = LinearGradient.init(gradient:startPoint:endPoint:)(&v103, v71, v73, v74, v76);
  v78 = v103;
  v102 = v104;
  v79 = v105;
  v80 = v106;
  v81 = static Edge.Set.all.getter(v77);
  v82 = v87;
  sub_100007C8C(v51, v87, &qword_1001186F8);
  v83 = v89;
  v84 = v82 + *(int *)(v89 + 36);
  *(_QWORD *)v84 = v78;
  *(_OWORD *)(v84 + 8) = v102;
  *(_QWORD *)(v84 + 24) = v79;
  *(_QWORD *)(v84 + 32) = v80;
  *(_BYTE *)(v84 + 40) = v81;
  sub_10000526C(v51, &qword_1001186F8);
  v85 = v86;
  sub_100007C48(v82, v86, &qword_100118700);
  sub_100007C48(v85, v50, &qword_100118700);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v50, 0, 1, v83);
}

uint64_t sub_10003BD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v7 = v1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 24))
    v5 = 68358;
  else
    v5 = 2822;
  return sub_1000A6994(v5, 0xD000000000000028, 0x80000001000D90E0);
}

uint64_t sub_10003BE34@<X0>(int a1@<W0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  unsigned int v59;
  char v60;
  double v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[5];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _OWORD v106[2];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[3];

  v92 = a2;
  LODWORD(v94) = a1;
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_1001186E8);
  __chkstk_darwin(v8);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_100116690);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v82 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v82 - v18;
  v20 = type metadata accessor for TrackPageView(0);
  result = __chkstk_darwin(v20);
  if ((v94 & 1) == 0)
  {
    *(_OWORD *)((char *)a3 + 169) = 0u;
    a3[9] = 0u;
    a3[10] = 0u;
    a3[7] = 0u;
    a3[8] = 0u;
    a3[5] = 0u;
    a3[6] = 0u;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
    return result;
  }
  v84 = v23;
  v85 = v22;
  v86 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = v4;
  v91 = v17;
  v94 = (uint64_t)v19;
  v82 = v7;
  v83 = v14;
  v89 = v10;
  v24 = v92[3];
  v25 = v92[10];
  v26 = (_QWORD *)result;
  v27 = sub_10000C9C8(v92, v24);
  v95[3] = v24;
  v95[4] = v25;
  v28 = sub_1000446F4(v95);
  v29 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v28, v27, v24);
  v92 = v26;
  v30 = v93;
  v32 = sub_100089858(v29, v31);
  v87 = v5;
  v88 = v8;
  if ((v32 & 1) != 0)
    v33 = (void *)sub_10005BE20((uint64_t)&off_100107BE8);
  else
    v33 = &_swiftEmptySetSingleton;
  v34 = (_QWORD *)v94;
  v35 = (uint64_t)v91;
  *(_QWORD *)&v96 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000DA480);
  *((_QWORD *)&v96 + 1) = v36;
  LOBYTE(v97) = v37 & 1;
  *((_QWORD *)&v97 + 1) = v38;
  *((_QWORD *)&v100 + 1) = _swiftEmptyArrayStorage;
  sub_100007AE0((uint64_t)v95, (uint64_t)&v98);
  v39 = sub_1000B2294((uint64_t)v33);
  swift_bridgeObjectRelease(v33);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v95);
  swift_bridgeObjectRelease(*((_QWORD *)&v100 + 1));
  *((_QWORD *)&v100 + 1) = v39;
  v109 = v98;
  v110 = v99;
  v107 = v96;
  v108 = v97;
  v111 = v100;
  v40 = v86;
  sub_10000B340(v30, v86, type metadata accessor for TrackPageView);
  v41 = *(unsigned __int8 *)(v84 + 80);
  v42 = (v41 + 16) & ~v41;
  v43 = swift_allocObject(&unk_10010A228, v42 + v85, v41 | 7);
  v44 = sub_10000B4D4(v40, v43 + v42, type metadata accessor for TrackPageView);
  v98 = v109;
  v99 = v110;
  v100 = v111;
  v96 = v107;
  v97 = v108;
  *(_QWORD *)&v101 = sub_100044760;
  *((_QWORD *)&v101 + 1) = v43;
  LOBYTE(v39) = static Edge.Set.bottom.getter(v44);
  v45 = EdgeInsets.init(_all:)(36.0);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  sub_10004476C((uint64_t)&v96, (uint64_t)&v107);
  LOBYTE(v113) = (_BYTE)v39;
  *((double *)&v113 + 1) = v45;
  *(_QWORD *)&v114 = v47;
  *((_QWORD *)&v114 + 1) = v49;
  *(_QWORD *)&v115 = v51;
  BYTE8(v115) = 0;
  v52 = sub_1000447A8(&v96);
  LODWORD(v86) = static Edge.Set.horizontal.getter(v52);
  sub_100006D34(v34);
  v53 = v87;
  v54 = (uint64_t)v34;
  v55 = v90;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v87 + 104))(v35, enum case for UserInterfaceSizeClass.regular(_:), v90);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v35, 0, 1, v55);
  v56 = (uint64_t)v89;
  v57 = (uint64_t)&v89[*(int *)(v88 + 48)];
  sub_100007C8C(v54, (uint64_t)v89, &qword_100116690);
  sub_100007C8C(v35, v57, &qword_100116690);
  v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  if (v58(v56, 1, v55) != 1)
  {
    v62 = (uint64_t)v83;
    sub_100007C8C(v56, (uint64_t)v83, &qword_100116690);
    if (v58(v57, 1, v55) != 1)
    {
      v75 = v53;
      v76 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
      v77 = v62;
      v78 = v82;
      v76(v82, v57, v55);
      v79 = sub_100004864(&qword_1001186F0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v80 = dispatch thunk of static Equatable.== infix(_:_:)(v77, v78, v55, v79);
      v81 = *(void (**)(char *, uint64_t))(v75 + 8);
      v81(v78, v55);
      sub_10000526C((uint64_t)v91, &qword_100116690);
      sub_10000526C(v94, &qword_100116690);
      v81((char *)v77, v55);
      sub_10000526C(v56, &qword_100116690);
      v60 = v86;
      if ((v80 & 1) != 0)
      {
        v61 = 80.0;
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    sub_10000526C((uint64_t)v91, &qword_100116690);
    sub_10000526C(v94, &qword_100116690);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v62, v55);
    v60 = v86;
LABEL_11:
    sub_10000526C(v56, &qword_1001186E8);
LABEL_12:
    v61 = 20.0;
    goto LABEL_13;
  }
  sub_10000526C(v35, &qword_100116690);
  sub_10000526C(v54, &qword_100116690);
  v59 = v58(v57, 1, v55);
  v60 = v86;
  if (v59 != 1)
    goto LABEL_11;
  sub_10000526C(v56, &qword_100116690);
  v61 = 80.0;
LABEL_13:
  v63 = EdgeInsets.init(_all:)(v61);
  v65 = v64;
  v67 = v66;
  v69 = v68;
  sub_100007C8C((uint64_t)&v107, (uint64_t)&v96, &qword_100118710);
  LOBYTE(v105) = v60;
  *((double *)&v105 + 1) = v63;
  *(_QWORD *)&v106[0] = v65;
  *((_QWORD *)&v106[0] + 1) = v67;
  *(_QWORD *)&v106[1] = v69;
  BYTE8(v106[1]) = 0;
  result = sub_10000526C((uint64_t)&v107, &qword_100118710);
  v115 = v104;
  v116 = v105;
  v117[0] = v106[0];
  *(_OWORD *)((char *)v117 + 9) = *(_OWORD *)((char *)v106 + 9);
  v111 = v100;
  v112 = v101;
  v113 = v102;
  v114 = v103;
  v107 = v96;
  v108 = v97;
  v109 = v98;
  v110 = v99;
  v70 = v105;
  a3[8] = v104;
  a3[9] = v70;
  a3[10] = v117[0];
  *(_OWORD *)((char *)a3 + 169) = *(_OWORD *)((char *)v117 + 9);
  v71 = v112;
  a3[4] = v111;
  a3[5] = v71;
  v72 = v114;
  a3[6] = v113;
  a3[7] = v72;
  v73 = v108;
  *a3 = v107;
  a3[1] = v73;
  v74 = v110;
  a3[2] = v109;
  a3[3] = v74;
  return result;
}

uint64_t sub_10003C4BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v7 = v1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 24))
    v5 = 67329;
  else
    v5 = 1793;
  return sub_1000A6994(v5, 0xD000000000000028, 0x80000001000D90E0);
}

void sub_10003C580(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  char v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;

  v10 = type metadata accessor for UserInterfaceSizeClass(0);
  v64 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v62 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100004F7C(&qword_1001186E8);
  __chkstk_darwin(v65);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_100116690);
  v15 = __chkstk_darwin(v14);
  v63 = (uint64_t)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v62 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v62 - v20;
  v22 = type metadata accessor for Date(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, a4);
  v26 = type metadata accessor for LocationModuleModel(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  swift_retain(a2);
  v27 = a1;
  swift_retain(a3);
  v28 = v24;
  v29 = v21;
  v30 = (uint64_t *)sub_1000965EC(a2, v28, v27, a3);
  swift_release(a2);

  v31 = a3;
  v32 = v64;
  swift_release(v31);
  v33 = sub_100061358(v30);
  v35 = v34;
  v69 = v37;
  v70 = v36;
  swift_release(v30);
  v68 = static Edge.Set.bottom.getter(v38);
  v39 = EdgeInsets.init(_all:)(36.0);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v67 = static Edge.Set.horizontal.getter(v46);
  type metadata accessor for TrackPageView(0);
  sub_100006D34(v29);
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v19, enum case for UserInterfaceSizeClass.regular(_:), v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v10);
  v47 = (uint64_t)&v13[*(int *)(v65 + 48)];
  sub_100007C8C((uint64_t)v29, (uint64_t)v13, &qword_100116690);
  sub_100007C8C((uint64_t)v19, v47, &qword_100116690);
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v48((uint64_t)v13, 1, v10) != 1)
  {
    v66 = v35;
    v49 = v63;
    sub_100007C8C((uint64_t)v13, v63, &qword_100116690);
    if (v48(v47, 1, v10) != 1)
    {
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
      v65 = v33;
      v51 = v62;
      v50(v62, v47, v10);
      v52 = sub_100004864(&qword_1001186F0, (uint64_t (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass, (uint64_t)&protocol conformance descriptor for UserInterfaceSizeClass);
      v53 = dispatch thunk of static Equatable.== infix(_:_:)(v49, v51, v10, v52);
      v54 = *(void (**)(char *, uint64_t))(v32 + 8);
      v55 = v51;
      v33 = v65;
      v54(v55, v10);
      sub_10000526C((uint64_t)v19, &qword_100116690);
      sub_10000526C((uint64_t)v29, &qword_100116690);
      v54((char *)v49, v10);
      sub_10000526C((uint64_t)v13, &qword_100116690);
      v35 = v66;
      if ((v53 & 1) != 0)
        goto LABEL_8;
LABEL_9:
      v56 = 20.0;
      goto LABEL_10;
    }
    sub_10000526C((uint64_t)v19, &qword_100116690);
    sub_10000526C((uint64_t)v29, &qword_100116690);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v49, v10);
    v35 = v66;
LABEL_6:
    sub_10000526C((uint64_t)v13, &qword_1001186E8);
    goto LABEL_9;
  }
  sub_10000526C((uint64_t)v19, &qword_100116690);
  sub_10000526C((uint64_t)v29, &qword_100116690);
  if (v48(v47, 1, v10) != 1)
    goto LABEL_6;
  sub_10000526C((uint64_t)v13, &qword_100116690);
LABEL_8:
  v56 = 80.0;
LABEL_10:
  v57 = EdgeInsets.init(_all:)(v56);
  *(_QWORD *)a5 = v33;
  *(_QWORD *)(a5 + 8) = v35;
  v58 = v69;
  *(_QWORD *)(a5 + 16) = v70;
  *(_QWORD *)(a5 + 24) = v58;
  *(_BYTE *)(a5 + 32) = v68;
  *(double *)(a5 + 40) = v39;
  *(_QWORD *)(a5 + 48) = v41;
  *(_QWORD *)(a5 + 56) = v43;
  *(_QWORD *)(a5 + 64) = v45;
  *(_BYTE *)(a5 + 72) = 0;
  *(_BYTE *)(a5 + 80) = v67;
  *(double *)(a5 + 88) = v57;
  *(_QWORD *)(a5 + 96) = v59;
  *(_QWORD *)(a5 + 104) = v60;
  *(_QWORD *)(a5 + 112) = v61;
  *(_BYTE *)(a5 + 120) = 0;
}

uint64_t sub_10003CA2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (**v69)(double *@<X8>, double@<D2>, double@<D3>);
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (**v76)(uint64_t);
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  int *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  void *v107;
  double v108;
  double v109;
  BOOL v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t KeyPath;
  uint64_t v115;
  char v116;
  id v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _OWORD v169[6];
  _OWORD v170[6];
  _BYTE v171[128];
  _BYTE v172[128];
  _BYTE v173[128];
  _OWORD v174[6];
  _OWORD v175[6];
  _BYTE v176[128];
  __int128 v177;
  __int128 v178;
  _UNKNOWN **v179;
  CLLocationCoordinate2D v180;

  v164 = a3;
  v5 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v6 = __chkstk_darwin(v5);
  v146 = (char *)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v147 = (char *)&v141 - v8;
  v9 = sub_100004F7C(&qword_100118668);
  v10 = __chkstk_darwin(v9);
  v149 = (char *)&v141 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v165 = (char *)&v141 - v13;
  __chkstk_darwin(v12);
  v163 = (uint64_t)&v141 - v14;
  v15 = sub_100004F7C(&qword_100117528);
  __chkstk_darwin(v15);
  v143 = (char *)&v141 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v144 = *(_QWORD *)(v17 - 8);
  v145 = v17;
  __chkstk_darwin(v17);
  v142 = (char *)&v141 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100004F7C(&qword_100118670);
  v20 = __chkstk_darwin(v19);
  v141 = (uint64_t)&v141 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v151 = (char *)&v141 - v22;
  v23 = sub_100004F7C(&qword_100118678);
  __chkstk_darwin(v23);
  v160 = (uint64_t *)((char *)&v141 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = sub_100004F7C(&qword_100118680);
  v26 = __chkstk_darwin(v25);
  v162 = (uint64_t)&v141 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v150 = (uint64_t)&v141 - v29;
  __chkstk_darwin(v28);
  v166 = (uint64_t)&v141 - v30;
  v148 = type metadata accessor for TrackPageView(0);
  v31 = *(int **)(*(_QWORD *)(v148 - 8) + 64);
  v158 = *(_QWORD *)(v148 - 8);
  v159 = v31;
  __chkstk_darwin(v148);
  v157 = (uint64_t)&v141 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for CoordinateSpace(0);
  v153 = *(_QWORD *)(v168 - 8);
  __chkstk_darwin(v168);
  v155 = (char *)&v141 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004F7C(&qword_100118688);
  __chkstk_darwin(v34);
  v36 = (char *)&v141 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004F7C(&qword_100118690);
  __chkstk_darwin(v37);
  v39 = (char *)&v141 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100004F7C(&qword_100118698);
  __chkstk_darwin(v40);
  v42 = (char *)&v141 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_100004F7C(&qword_1001186A0);
  __chkstk_darwin(v152);
  v44 = (char *)&v141 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100004F7C(&qword_1001186A8);
  v45 = __chkstk_darwin(v156);
  v161 = (uint64_t)&v141 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v154 = (uint64_t)&v141 - v48;
  v49 = __chkstk_darwin(v47);
  v167 = (uint64_t)&v141 - v50;
  *(_QWORD *)v36 = static HorizontalAlignment.center.getter(v49);
  *((_QWORD *)v36 + 1) = 0;
  v36[16] = 0;
  v51 = sub_100004F7C(&qword_1001186B0);
  v52 = sub_10003D88C(a1, a2, (uint64_t)&v36[*(int *)(v51 + 44)]);
  v53 = static Alignment.center.getter(v52);
  sub_100033E1C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v39, 0.0, 1, 0.0, 1, v53, v54, (uint64_t)&qword_100118688, (void (*)(uint64_t, uint64_t, uint64_t))sub_100007C8C, &qword_100118690);
  v55 = sub_10000526C((uint64_t)v36, &qword_100118688);
  v56 = static Alignment.center.getter(v55);
  v58 = v57;
  v59 = (uint64_t)&v42[*(int *)(v40 + 36)];
  v60 = a1;
  v61 = a1;
  v62 = a2;
  sub_10003E450(v61, a2, v59);
  v63 = (uint64_t *)(v59 + *(int *)(sub_100004F7C(&qword_1001186B8) + 36));
  *v63 = v56;
  v63[1] = v58;
  sub_100007C48((uint64_t)v39, (uint64_t)v42, &qword_100118690);
  v64 = v153;
  v65 = v155;
  v66 = v168;
  (*(void (**)(char *, _QWORD, uint64_t))(v153 + 104))(v155, enum case for CoordinateSpace.local(_:), v168);
  v67 = &v44[*(int *)(v152 + 36)];
  v68 = sub_100004F7C(&qword_1001186C0);
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(&v67[*(int *)(v68 + 36)], v65, v66);
  *(_QWORD *)v67 = &type metadata for BackgroundBlurHeightPreferenceKey;
  v69 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v67[*(int *)(v68 + 40)];
  v70 = v62;
  *v69 = sub_10003E680;
  v69[1] = 0;
  sub_100007C8C((uint64_t)v42, (uint64_t)v44, &qword_100118698);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
  sub_10000526C((uint64_t)v42, &qword_100118698);
  v168 = v60;
  v71 = v157;
  sub_10000B340(v60, v157, type metadata accessor for TrackPageView);
  v72 = *(unsigned __int8 *)(v158 + 80);
  v73 = (v72 + 16) & ~v72;
  v74 = swift_allocObject(&unk_10010A1D8, (char *)v159 + v73, v72 | 7);
  sub_10000B4D4(v71, v74 + v73, type metadata accessor for TrackPageView);
  v75 = v154;
  sub_100007C8C((uint64_t)v44, v154, &qword_1001186A0);
  v76 = (uint64_t (**)(uint64_t))(v75 + *(int *)(v156 + 36));
  *v76 = sub_1000445C4;
  v76[1] = (uint64_t (*)(uint64_t))v74;
  v77 = (uint64_t)v44;
  v78 = v160;
  sub_10000526C(v77, &qword_1001186A0);
  sub_100007C48(v75, v167, &qword_1001186A8);
  v79 = sub_10000C9C8(v70, v70[3]);
  v80 = (int *)type metadata accessor for TrackPageMetadata(0);
  sub_100007C8C((uint64_t)v79 + v80[7], (uint64_t)v78, &qword_100118678);
  v81 = type metadata accessor for AnyArtist(0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 48))(v78, 1, v81) == 1)
  {
    sub_10000526C((uint64_t)v78, &qword_100118678);
    v177 = 0u;
    v178 = 0u;
    v179 = 0;
  }
  else
  {
    *((_QWORD *)&v178 + 1) = v81;
    v179 = &off_10010B1D0;
    v82 = sub_1000446F4(&v177);
    sub_10000B4D4((uint64_t)v78, (uint64_t)v82, type metadata accessor for AnyArtist);
  }
  v83 = (uint64_t)v165;
  v84 = v150;
  v85 = (uint64_t)v151;
  sub_10003A8F0((uint64_t)&v177, v150);
  sub_10000526C((uint64_t)&v177, &qword_1001186C8);
  sub_100007C48(v84, v166, &qword_100118680);
  v86 = sub_10000C9C8(v70, v70[3]);
  sub_100007C8C((uint64_t)v86 + v80[8], v85, &qword_100118670);
  v87 = type metadata accessor for AnyAlbum(0);
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 48);
  if (v88(v85, 1, v87) == 1)
  {
    sub_10000526C(v85, &qword_100118670);
    v90 = (uint64_t)v146;
    v89 = (uint64_t)v147;
LABEL_6:
    v91 = v148;
LABEL_14:
    sub_1000445D0(v174);
    sub_100007C48((uint64_t)v174, (uint64_t)v176, &qword_1001186D0);
    goto LABEL_15;
  }
  v92 = (_QWORD *)(v85 + *(int *)(v87 + 20));
  v93 = v70;
  v94 = v92[3];
  v95 = v92[4];
  sub_10000C9C8(v92, v94);
  v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 64))(v94, v95);
  sub_10000B600(v85, type metadata accessor for AnyAlbum);
  v97 = v93[3];
  v98 = v93[10];
  sub_10000C9C8(v93, v97);
  v99 = (uint64_t)v143;
  (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v98);
  v101 = v144;
  v100 = v145;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v99, 1, v145) == 1)
  {
    swift_release(v96);
    sub_10000526C(v99, &qword_100117528);
    v90 = (uint64_t)v146;
    v89 = (uint64_t)v147;
    v70 = v93;
LABEL_13:
    v91 = v148;
    v83 = (uint64_t)v165;
    goto LABEL_14;
  }
  v158 = v96;
  v159 = v80;
  v102 = v142;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v142, v99, v100);
  v103 = v101;
  v104 = v93[3];
  v105 = v93[10];
  v160 = v93;
  sub_10000C9C8(v93, v104);
  v106 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v105 + 72))(v104, v105);
  if (!v106)
  {
    (*(void (**)(char *, uint64_t))(v103 + 8))(v102, v100);
    swift_release(v158);
    v90 = (uint64_t)v146;
    v89 = (uint64_t)v147;
    v80 = v159;
    v70 = v160;
    goto LABEL_13;
  }
  v107 = v106;
  objc_msgSend(v106, "coordinate");
  if (v108 == 0.0)
  {
    objc_msgSend(v107, "coordinate");
    v110 = v109 == 0.0;
  }
  else
  {
    v110 = 0;
  }
  v131 = (uint64_t)v142;
  v83 = (uint64_t)v165;
  v80 = v159;
  objc_msgSend(v107, "coordinate");
  if (!CLLocationCoordinate2DIsValid(v180) || v110)
  {
    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v131, v145);

    swift_release(v158);
    v90 = (uint64_t)v146;
    v89 = (uint64_t)v147;
    v70 = v160;
    goto LABEL_6;
  }
  v132 = sub_10000C9C8(v160, v160[3]);
  v133 = v141;
  sub_100007C8C((uint64_t)v132 + v80[8], v141, &qword_100118670);
  if (v88(v133, 1, v87) == 1)
  {
    v134 = sub_10000526C(v133, &qword_100118670);
    v90 = (uint64_t)v146;
    v89 = (uint64_t)v147;
LABEL_26:
    v138 = static Color.primary.getter(v134);
    goto LABEL_27;
  }
  v135 = (_QWORD *)(v133 + *(int *)(v87 + 20));
  v136 = v135[3];
  v137 = v135[4];
  sub_10000C9C8(v135, v136);
  v138 = (*(uint64_t (**)(uint64_t, uint64_t))(v137 + 16))(v136, v137);
  v134 = sub_10000B600(v133, type metadata accessor for AnyAlbum);
  v90 = (uint64_t)v146;
  v89 = (uint64_t)v147;
  if (!v138)
    goto LABEL_26;
LABEL_27:
  v139 = v158;
  sub_10003C580(v107, v158, v138, v131, (uint64_t)v174);
  swift_release(v138);

  v140 = swift_release(v139);
  (*(void (**)(uint64_t, uint64_t, __n128))(v144 + 8))(v131, v145, v140);
  v169[4] = v174[4];
  v169[5] = v174[5];
  v170[0] = v175[0];
  *(_OWORD *)((char *)v170 + 9) = *(_OWORD *)((char *)v175 + 9);
  v169[0] = v174[0];
  v169[1] = v174[1];
  v169[2] = v174[2];
  v169[3] = v174[3];
  nullsub_1(v169);
  sub_100007C48((uint64_t)v169, (uint64_t)v176, &qword_1001186D0);
  v70 = v160;
  v91 = v148;
LABEL_15:
  v111 = *(_QWORD *)(v168 + *(int *)(v91 + 44));
  v112 = sub_1000877E8();
  sub_10003BE34(v112 & 1, v70, v174);
  KeyPath = swift_getKeyPath(&unk_1000D3678, v113);
  *(_QWORD *)&v169[0] = v111;
  v115 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v169, KeyPath, v115);
  swift_release(KeyPath);
  v116 = *(_BYTE *)(v111 + 584);
  v117 = objc_msgSend(*(id *)((char *)sub_10000C9C8(v70, v70[3]) + v80[5]), "webURL");
  if (v117)
  {
    v118 = v117;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v119 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v90, 0, 1, v119);
  }
  else
  {
    v120 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v90, 1, 1, v120);
  }
  v121 = (uint64_t)v149;
  sub_100007C48(v90, v89, (uint64_t *)&unk_100118CE0);
  sub_10003B514(v116, v89, v83);
  sub_10000526C(v89, (uint64_t *)&unk_100118CE0);
  v122 = v83;
  v123 = v163;
  sub_100007C48(v122, v163, &qword_100118668);
  v124 = v161;
  sub_100007C8C(v167, v161, &qword_1001186A8);
  v125 = v166;
  v126 = v162;
  sub_100007C8C(v166, v162, &qword_100118680);
  sub_100007C48((uint64_t)v176, (uint64_t)v171, &qword_1001186D0);
  sub_100007C8C((uint64_t)v174, (uint64_t)v169, &qword_1001186D8);
  sub_100007C8C(v123, v121, &qword_100118668);
  v127 = v164;
  sub_100007C8C(v124, v164, &qword_1001186A8);
  v128 = (int *)sub_100004F7C(&qword_1001186E0);
  sub_100007C8C(v126, v127 + v128[12], &qword_100118680);
  v129 = v127 + v128[16];
  sub_100007C48((uint64_t)v171, (uint64_t)v172, &qword_1001186D0);
  sub_100007C48((uint64_t)v172, v129, &qword_1001186D0);
  sub_100007C8C((uint64_t)v169, v127 + v128[20], &qword_1001186D8);
  sub_100007C8C(v121, v127 + v128[24], &qword_100118668);
  sub_100044644((uint64_t)v172, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000445F4);
  sub_10000526C(v123, &qword_100118668);
  sub_10000526C((uint64_t)v174, &qword_1001186D8);
  sub_10000526C(v125, &qword_100118680);
  sub_10000526C(v167, &qword_1001186A8);
  sub_10000526C(v121, &qword_100118668);
  sub_10000526C((uint64_t)v169, &qword_1001186D8);
  sub_100007C48((uint64_t)v171, (uint64_t)v173, &qword_1001186D0);
  sub_100044644((uint64_t)v173, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000446A8);
  sub_10000526C(v126, &qword_100118680);
  return sub_10000526C(v124, &qword_1001186A8);
}

uint64_t sub_10003D88C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (**v30)(double *@<X8>, double@<D2>, double@<D3>);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[3];
  uint64_t v64[9];

  v56 = a2;
  v62 = a3;
  v5 = sub_100004F7C(&qword_100118798);
  v6 = __chkstk_darwin(v5);
  v61 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v60 = (uint64_t)&v52 - v8;
  v59 = type metadata accessor for TrackPageView(0);
  v54 = *(_QWORD *)(v59 - 8);
  v55 = *(_QWORD *)(v54 + 64);
  __chkstk_darwin(v59);
  v53 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CoordinateSpace(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_1001187A0);
  __chkstk_darwin(v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004F7C(&qword_1001187A8);
  __chkstk_darwin(v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004F7C(&qword_1001187B0);
  __chkstk_darwin(v52);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100004F7C(&qword_1001187B8);
  v22 = __chkstk_darwin(v58);
  v24 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v57 = (uint64_t)&v52 - v26;
  *(_QWORD *)v16 = static HorizontalAlignment.center.getter(v25);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 0;
  v27 = sub_100004F7C(&qword_1001187C0);
  sub_10003DDE8(a1, a2, (uint64_t)&v16[*(int *)(v27 + 44)]);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for CoordinateSpace.local(_:), v10);
  v28 = &v19[*(int *)(v17 + 36)];
  v29 = sub_100004F7C(&qword_1001187C8);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&v28[*(int *)(v29 + 36)], v13, v10);
  *(_QWORD *)v28 = &type metadata for NavigationBarTitleOffsetPreferenceKey;
  v30 = (void (**)(double *@<X8>, double@<D2>, double@<D3>))&v28[*(int *)(v29 + 40)];
  *v30 = sub_100045584;
  v30[1] = 0;
  sub_100007C8C((uint64_t)v16, (uint64_t)v19, &qword_1001187A0);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_10000526C((uint64_t)v16, &qword_1001187A0);
  v31 = v53;
  sub_10000B340(a1, v53, type metadata accessor for TrackPageView);
  v32 = *(unsigned __int8 *)(v54 + 80);
  v33 = (v32 + 16) & ~v32;
  v34 = swift_allocObject(&unk_10010A278, v33 + v55, v32 | 7);
  sub_10000B4D4(v31, v34 + v33, type metadata accessor for TrackPageView);
  sub_100007C8C((uint64_t)v19, (uint64_t)v21, &qword_1001187A8);
  v35 = (uint64_t (**)(uint64_t))&v21[*(int *)(v52 + 36)];
  *v35 = sub_10004482C;
  v35[1] = (uint64_t (*)(uint64_t))v34;
  sub_10000526C((uint64_t)v19, &qword_1001187A8);
  v36 = *(_QWORD *)(a1 + *(int *)(v59 + 44));
  KeyPath = swift_getKeyPath(&unk_1000D36C8, v37);
  v64[0] = v36;
  v39 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v64, KeyPath, v39);
  swift_release(KeyPath);
  v40 = *(_QWORD *)(v36 + 16);
  v42 = static Alignment.center.getter(v41);
  _FrameLayout.init(width:height:alignment:)(v63, v40, 0, 0, 1, v42, v43);
  sub_100007C8C((uint64_t)v21, (uint64_t)v24, &qword_1001187B0);
  v44 = &v24[*(int *)(v58 + 36)];
  v45 = v63[1];
  *(_OWORD *)v44 = v63[0];
  *((_OWORD *)v44 + 1) = v45;
  *((_OWORD *)v44 + 2) = v63[2];
  sub_10000526C((uint64_t)v21, &qword_1001187B0);
  v46 = v57;
  sub_100007C48((uint64_t)v24, v57, &qword_1001187B8);
  sub_100087604(v64);
  v47 = v60;
  sub_100039724(v56, a1, v64, v60);
  sub_1000444C8(v64);
  sub_100007C8C(v46, (uint64_t)v24, &qword_1001187B8);
  v48 = v61;
  sub_100007C8C(v47, v61, &qword_100118798);
  v49 = v62;
  sub_100007C8C((uint64_t)v24, v62, &qword_1001187B8);
  v50 = sub_100004F7C(&qword_1001187D0);
  sub_100007C8C(v48, v49 + *(int *)(v50 + 48), &qword_100118798);
  sub_10000526C(v47, &qword_100118798);
  sub_10000526C(v46, &qword_1001187B8);
  sub_10000526C(v48, &qword_100118798);
  return sub_10000526C((uint64_t)v24, &qword_1001187B8);
}

uint64_t sub_10003DDE8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _BYTE v69[24];
  _BYTE v70[24];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;

  v68 = a3;
  v5 = sub_100004F7C(&qword_100118850);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v57 - v9;
  v11 = sub_100004F7C(&qword_100118858);
  v12 = __chkstk_darwin(v11);
  v66 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v57 - v14;
  v16 = *(int *)(type metadata accessor for TrackPageView(0) + 44);
  v17 = *(_QWORD *)(a1 + v16);
  KeyPath = swift_getKeyPath(&unk_1000D3768, v18);
  *(_QWORD *)&v71 = v17;
  v20 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, KeyPath, v20);
  swift_release(KeyPath);
  v21 = *(_QWORD *)(v17 + 208);
  swift_retain(v21);
  v65 = v15;
  sub_1000370A4(v22, (uint64_t)v15);
  swift_release(v21);
  v23 = a2[3];
  v24 = a2[11];
  v25 = sub_10000C9C8(a2, v23);
  *((_QWORD *)&v72 + 1) = v23;
  *(_QWORD *)&v73 = v24;
  v26 = sub_1000446F4(&v71);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v26, v25, v23);
  sub_1000382DC(&v71, (uint64_t)v8);
  _s16MusicRecognition11AnyPlaylistVwxx_0(&v71);
  v67 = v8;
  v64 = v10;
  sub_100007C48((uint64_t)v8, (uint64_t)v10, &qword_100118850);
  v27 = *(_QWORD *)(a1 + v16);
  v29 = swift_getKeyPath(&unk_1000D3790, v28);
  *(_QWORD *)&v71 = v27;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v29, v20);
  swift_release(v29);
  swift_beginAccess(v27 + 320, v70, 0, 0);
  sub_100007C8C(v27 + 320, (uint64_t)&v71, &qword_100118860);
  v30 = *((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v31 = sub_10000C9C8(&v71, *((uint64_t *)&v72 + 1));
    v32 = *(_QWORD *)(v30 - 8);
    __chkstk_darwin(v31);
    v34 = (char *)&v57 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v32 + 16))(v34);
    sub_10000526C((uint64_t)&v71, &qword_100118860);
    v35 = objc_msgSend(*(id *)&v34[*(int *)(type metadata accessor for TrackPageMetadata(0) + 20)], "shazamCount");
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v30);
  }
  else
  {
    sub_10000526C((uint64_t)&v71, &qword_100118860);
    v35 = 0;
  }
  v37 = *(_QWORD *)(a1 + v16);
  v38 = swift_getKeyPath(&unk_1000D3790, v36);
  *(_QWORD *)&v71 = v37;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, v38, v20);
  swift_release(v38);
  swift_beginAccess(v37 + 320, v69, 0, 0);
  sub_100007C8C(v37 + 320, (uint64_t)&v71, &qword_100118860);
  v39 = *((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v40 = sub_10000C9C8(&v71, *((uint64_t *)&v72 + 1));
    v41 = *(_QWORD *)(v39 - 8);
    __chkstk_darwin(v40);
    v43 = (char *)&v57 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v41 + 16))(v43);
    sub_10000526C((uint64_t)&v71, &qword_100118860);
    objc_msgSend(*(id *)&v43[*(int *)(type metadata accessor for TrackPageMetadata(0) + 20)], "shazamCount");
    (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v39);
  }
  else
  {
    sub_10000526C((uint64_t)&v71, &qword_100118860);
  }
  sub_1000380B0((uint64_t)v35 > 0, (uint64_t)&v71);
  v63 = v71;
  v62 = v72;
  v61 = v73;
  v60 = v74;
  v59 = v75;
  v58 = v76;
  v57 = v77;
  v44 = v78;
  v45 = v79;
  v46 = (uint64_t)v65;
  v47 = v66;
  sub_100007C8C((uint64_t)v65, v66, &qword_100118858);
  v48 = (uint64_t)v64;
  v49 = (uint64_t)v67;
  sub_100007C8C((uint64_t)v64, (uint64_t)v67, &qword_100118850);
  v50 = v68;
  sub_100007C8C(v47, v68, &qword_100118858);
  v51 = sub_100004F7C(&qword_100118868);
  sub_100007C8C(v49, v50 + *(int *)(v51 + 48), &qword_100118850);
  v52 = v50 + *(int *)(v51 + 64);
  v53 = v62;
  *(_OWORD *)v52 = v63;
  *(_OWORD *)(v52 + 16) = v53;
  v54 = v60;
  *(_OWORD *)(v52 + 32) = v61;
  *(_OWORD *)(v52 + 48) = v54;
  *(_OWORD *)(v52 + 64) = v59;
  v55 = v57;
  *(_QWORD *)(v52 + 80) = v58;
  *(_QWORD *)(v52 + 88) = v55;
  *(_BYTE *)(v52 + 96) = v44;
  *(_BYTE *)(v52 + 97) = v45;
  sub_10000526C(v48, &qword_100118850);
  sub_10000526C(v46, &qword_100118858);
  sub_10000526C(v49, &qword_100118850);
  return sub_10000526C(v47, &qword_100118858);
}

void sub_10003E390(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3740, v4);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100044A7C, v7, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
}

uint64_t sub_10003E450@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;

  v6 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v27 - v10;
  v12 = sub_100004F7C(&qword_100118750);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000C9C8(a2, a2[3]);
  v16 = objc_msgSend(*(id *)((char *)v15 + *(int *)(type metadata accessor for TrackPageMetadata(0) + 20)), "artworkURL");
  if (v16)
  {
    v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 0, 1, v18);
  }
  else
  {
    v19 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
  }
  sub_100007C48((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_100118CE0);
  sub_1000376D4((uint64_t)v11, (uint64_t)v14);
  sub_10000526C((uint64_t)v11, (uint64_t *)&unk_100118CE0);
  v20 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3650, v21);
  v28 = v20;
  v23 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v23);
  swift_release(KeyPath);
  v24 = *(_QWORD *)(v20 + 200);
  sub_100007C8C((uint64_t)v14, a3, &qword_100118750);
  v25 = (_QWORD *)(a3 + *(int *)(sub_100004F7C(&qword_100118758) + 36));
  *v25 = 0;
  v25[1] = v24;
  return sub_10000526C((uint64_t)v14, &qword_100118750);
}

void sub_10003E680(double *a1@<X8>, double a2@<D2>, double a3@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
}

void sub_10003E688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D36A0, v4);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10004480C, v7, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
}

void sub_10003E748(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for TrackPageView(0);
  v5 = *(_QWORD *)(a1 + *(int *)(v4 + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3740, v6);
  v13 = v5;
  v8 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, KeyPath, v8);
  swift_release(KeyPath);
  v9 = -*(double *)(v5 + 160);
  v10 = *(_QWORD *)(a1 + *(int *)(v4 + 48) + 8);
  if (v9 > a2 != *(_BYTE *)(v10 + 16))
  {
    v11 = sub_100004F7C(&qword_1001182D8);
    sub_10000522C(&qword_1001182E0, &qword_1001182D8, (uint64_t)&unk_1000D67A4);
    v12 = ObservableObject<>.objectWillChange.getter(v11);
    ObservableObjectPublisher.send()();
    swift_release(v12);
  }
  *(_BYTE *)(v10 + 16) = v9 > a2;
}

uint64_t sub_10003E870@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ScrollGeometry.contentOffset.getter();
  *a1 = v3;
  return result;
}

void sub_10003E898(uint64_t a1, double *a2, uint64_t a3)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  v3 = *a2;
  v5 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  if (v3 > 0.0)
    v3 = 0.0;
  KeyPath = swift_getKeyPath(&unk_1000D3520, v4);
  v12 = v5;
  v7 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v7);
  swift_release(KeyPath);
  v8 = v3 - *(double *)(v5 + 184);
  v10 = swift_getKeyPath(&unk_1000D3650, v9);
  v11[2] = v5;
  *(double *)&v11[3] = v8;
  v12 = v5;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, v10, sub_1000445A4, v11, (char *)&type metadata for () + 8, v7);
  swift_release(v10);
}

uint64_t sub_10003E99C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(void);
  uint64_t v5;
  int v6;
  uint64_t KeyPath;
  uint64_t v8;
  int v9;
  uint64_t v11;

  v3 = type metadata accessor for TrackPageView(0);
  v4 = (void (**)(void))(a1 + *(int *)(v3 + 52));
  if (*v4)
    (*v4)();
  v5 = *(_QWORD *)(a1 + *(int *)(v3 + 44));
  v6 = *(unsigned __int8 *)(v5 + 256);
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v11 = v5;
  v8 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v8);
  swift_release(KeyPath);
  if (*(_BYTE *)(v5 + 24))
    v9 = 0x10000;
  else
    v9 = 0;
  return sub_1000A6994(v9 | (v6 << 8) | 0x10u, 0xD000000000000028, 0x80000001000D90E0);
}

uint64_t sub_10003EA80@<X0>(char **a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  id v75;
  void *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t KeyPath;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  _QWORD *v116;
  id v117;
  void *v118;
  void (*v119)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  _QWORD *v125;
  id v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t, uint64_t);
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  char *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  __n128 v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void (*v192)(char *, uint64_t);
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char **v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;

  v223 = a3;
  v5 = sub_100004F7C(&qword_100118568);
  __chkstk_darwin(v5);
  v221 = (char *)&v193 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_100004F7C(&qword_100118570);
  v194 = *(_QWORD *)(v204 - 8);
  __chkstk_darwin(v204);
  v193 = (char *)&v193 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_100004F7C(&qword_100118578);
  v195 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v201 = (char *)&v193 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_100118580);
  __chkstk_darwin(v9);
  v210 = (uint64_t)&v193 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100004F7C(&qword_100118588);
  v198 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203);
  v197 = (char *)&v193 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v202 = sub_100004F7C(&qword_100118590);
  v200 = *(_QWORD *)(v202 - 8);
  __chkstk_darwin(v202);
  v199 = (char *)&v193 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_100118598);
  v14 = __chkstk_darwin(v13);
  v219 = (char *)&v193 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v220 = (char *)&v193 - v16;
  v225 = sub_100004F7C(&qword_1001185A0);
  v213 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225);
  v212 = (char *)&v193 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v19 = __chkstk_darwin(v18);
  v209 = (char *)&v193 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v217 = (char *)&v193 - v22;
  v23 = __chkstk_darwin(v21);
  v218 = (char *)&v193 - v24;
  v25 = __chkstk_darwin(v23);
  v206 = (char *)&v193 - v26;
  v27 = __chkstk_darwin(v25);
  v207 = (char *)&v193 - v28;
  v29 = __chkstk_darwin(v27);
  v227 = (char *)&v193 - v30;
  __chkstk_darwin(v29);
  v228 = (char *)&v193 - v31;
  v229 = type metadata accessor for URL(0);
  v232 = *(_QWORD *)(v229 - 8);
  v32 = __chkstk_darwin(v229);
  v208 = (char *)&v193 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v216 = (char *)&v193 - v35;
  v36 = __chkstk_darwin(v34);
  v196 = (char *)&v193 - v37;
  __chkstk_darwin(v36);
  v211 = (char *)&v193 - v38;
  v39 = sub_100004F7C(&qword_1001185A8);
  v40 = __chkstk_darwin(v39);
  v224 = (char *)&v193 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v231 = (char *)&v193 - v42;
  v43 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v43);
  v45 = (char *)&v193 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100004F7C(&qword_1001185B0);
  v214 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v48 = (char *)&v193 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100004F7C(&qword_1001185B8);
  v50 = __chkstk_darwin(v49);
  v52 = (char *)&v193 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v54 = (char *)&v193 - v53;
  v55 = (uint64_t)a1[3];
  v230 = a1;
  sub_10000C9C8(a1, v55);
  v56 = sub_100098380();
  v233 = (uint64_t)a2;
  v222 = v5;
  v215 = v45;
  if (v57)
  {
    v58 = (char *)v56;
    v59 = v57;
    v60 = static ToolbarItemPlacement.principal.getter();
    __chkstk_darwin(v60);
    *(&v193 - 4) = v58;
    *(&v193 - 3) = v59;
    *(&v193 - 2) = a2;
    v61 = sub_100004F7C(&qword_100118620);
    v62 = sub_100044178();
    ToolbarItemGroup.init(placement:content:)(v45, sub_10004416C, &v193 - 6, v61, v62);
    swift_bridgeObjectRelease(v59);
    v63 = sub_10000522C(&qword_1001185C8, &qword_1001185B0, (uint64_t)&protocol conformance descriptor for ToolbarItemGroup<A>);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v48, v46, v63);
    v64 = sub_100004F7C(&qword_1001185C0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v52, 0, 1, v64);
    v235 = v46;
    v236 = v63;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v52, v64, OpaqueTypeConformance2);
    sub_10000526C((uint64_t)v52, &qword_1001185B8);
    (*(void (**)(char *, uint64_t))(v214 + 8))(v48, v46);
  }
  else
  {
    v66 = sub_100004F7C(&qword_1001185C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v52, 1, 1, v66);
    v67 = sub_10000522C(&qword_1001185C8, &qword_1001185B0, (uint64_t)&protocol conformance descriptor for ToolbarItemGroup<A>);
    v235 = v46;
    v236 = v67;
    v68 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v52, v66, v68);
    sub_10000526C((uint64_t)v52, &qword_1001185B8);
  }
  v69 = v232;
  v70 = (uint64_t)v54;
  v72 = v229;
  v71 = v230;
  v73 = (uint64_t)v228;
  v74 = sub_10000C9C8(v230, (uint64_t)v230[3]);
  v228 = (char *)type metadata accessor for TrackPageMetadata(0);
  v75 = objc_msgSend(*(id *)((char *)v74 + *((int *)v228 + 5)), "webURL");
  if (v75)
  {
    v76 = v75;
    v77 = v227;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v78 = (uint64_t)v77;
    v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56);
    v79((uint64_t)v77, 0, 1, v72);
  }
  else
  {
    v79 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56);
    v78 = (uint64_t)v227;
    v79((uint64_t)v227, 1, 1, v72);
  }
  v80 = (char *)v233;
  sub_100007C48(v78, v73, (uint64_t *)&unk_100118CE0);
  v227 = *(char **)(v69 + 48);
  v81 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v227)(v73, 1, v72);
  v226 = v70;
  if (v81 == 1)
  {
    sub_10000526C(v73, (uint64_t *)&unk_100118CE0);
    v82 = sub_100004F7C(&qword_1001185D0);
    v83 = (uint64_t)v224;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v224, 1, 1, v82);
    v84 = sub_10000522C(&qword_1001185D8, &qword_1001185A0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v235 = v225;
    v236 = v84;
    v85 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v83, v82, v85);
    sub_10000526C(v83, &qword_1001185A8);
  }
  else
  {
    v86 = v211;
    v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 32))(v211, v73, v72);
    v88 = v215;
    v89 = static ToolbarItemPlacement.topBarTrailing.getter(v87);
    __chkstk_darwin(v89);
    *(&v193 - 2) = v86;
    *(&v193 - 1) = v80;
    v90 = type metadata accessor for ToolbarShareButton(0);
    v91 = sub_100004864(&qword_100118618, type metadata accessor for ToolbarShareButton, (uint64_t)&unk_1000D6E40);
    v92 = v212;
    ToolbarItem<>.init(placement:content:)(v88, sub_100044164, &v193 - 4, v90, v91);
    v93 = sub_10000522C(&qword_1001185D8, &qword_1001185A0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v95 = (uint64_t)v224;
    v94 = v225;
    static ToolbarContentBuilder.buildBlock<A>(_:)(v92, v225, v93);
    v96 = sub_100004F7C(&qword_1001185D0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v95, 0, 1, v96);
    v235 = v94;
    v236 = v93;
    v97 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v70 = v226;
    v98 = v232;
    static ToolbarContentBuilder.buildIf<A>(_:)(v95, v96, v97);
    sub_10000526C(v95, &qword_1001185A8);
    (*(void (**)(char *, uint64_t))(v213 + 8))(v92, v94);
    v69 = v98;
    v99 = v86;
    v71 = v230;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v72);
  }
  v225 = *(int *)(type metadata accessor for TrackPageView(0) + 44);
  v100 = *(_QWORD *)&v80[v225];
  KeyPath = swift_getKeyPath(&unk_1000D3548, v101);
  v235 = v100;
  v103 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v235, KeyPath, v103);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v100 + 24) & 1) == 0)
  {
    v105 = *(_QWORD *)(v233 + v225);
    v106 = swift_getKeyPath(&unk_1000D3570, v104);
    v234 = v105;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v234, v106, v103);
    swift_release(v106);
    swift_beginAccess(v105 + 216, &v234, 0, 0);
    sub_100007C8C(v105 + 216, (uint64_t)&v235, &qword_1001185E0);
    v107 = v237;
    if (v237)
    {
      v108 = sub_10000C9C8(&v235, v237);
      v109 = v70;
      v110 = *(_QWORD *)(v107 - 8);
      __chkstk_darwin(v108);
      v112 = (char *)&v193 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v110 + 16))(v112);
      sub_10000526C((uint64_t)&v235, &qword_1001185E0);
      v113 = *(_QWORD *)&v112[*(int *)(type metadata accessor for StreamingServicesProvider(0) + 20)];
      v114 = *(void (**)(char *, uint64_t))(v110 + 8);
      swift_bridgeObjectRetain(v113);
      v114(v112, v107);
      v70 = v109;
      v69 = v232;
      v72 = v229;
      v115 = *(_QWORD *)(v113 + 16);
      swift_bridgeObjectRelease(v113);
      if (v115)
      {
        v116 = sub_10000C9C8(v71, (uint64_t)v71[3]);
        v117 = objc_msgSend(*(id *)((char *)v116 + *((int *)v228 + 5)), "webURL");
        if (v117)
        {
          v118 = v117;
          v119 = v79;
          v120 = (uint64_t)v206;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v121 = 0;
          v122 = (char *)v233;
          v123 = v215;
          v124 = (uint64_t)v207;
        }
        else
        {
          v119 = v79;
          v121 = 1;
          v122 = (char *)v233;
          v123 = v215;
          v124 = (uint64_t)v207;
          v120 = (uint64_t)v206;
        }
        v119(v120, v121, 1, v72);
        sub_100007C48(v120, v124, (uint64_t *)&unk_100118CE0);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v227)(v124, 1, v72) != 1)
        {
          v160 = v196;
          v161 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 32))(v196, v124, v72);
          v162 = static ToolbarItemPlacement.topBarTrailing.getter(v161);
          __chkstk_darwin(v162);
          *(&v193 - 2) = v122;
          *(&v193 - 1) = v160;
          v163 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
          v164 = sub_100004864(&qword_100118610, type metadata accessor for ContextMenuForUnsubscribedUserView, (uint64_t)&unk_1000D1948);
          v165 = v199;
          ToolbarItem<>.init(placement:content:)(v123, sub_10004415C, &v193 - 4, v163, v164);
          v166 = sub_10000522C(&qword_1001185F8, &qword_100118590, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
          v167 = v197;
          v168 = v202;
          static ToolbarContentBuilder.buildBlock<A>(_:)(v165, v202, v166);
          v235 = v168;
          v236 = v166;
          v169 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
          v170 = sub_10000522C(&qword_100118600, &qword_100118578, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
          v235 = v205;
          v236 = v170;
          v171 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
          v172 = (uint64_t)v219;
          v173 = v203;
          static ToolbarContentBuilder.buildEither<A, B>(first:)(v167, v203, v204, v169, v171);
          (*(void (**)(char *, uint64_t))(v198 + 8))(v167, v173);
          v174 = sub_100004F7C(&qword_1001185E8);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v174 - 8) + 56))(v172, 0, 1, v174);
          v175 = sub_10004404C();
          v176 = v72;
          v133 = (uint64_t)v220;
          static ToolbarContentBuilder.buildIf<A>(_:)(v172, v174, v175);
          sub_10000526C(v172, &qword_100118598);
          (*(void (**)(char *, uint64_t))(v200 + 8))(v165, v168);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v160, v176);
          v131 = v222;
          v132 = (uint64_t)v221;
          v156 = (uint64_t)v231;
          v70 = v226;
          goto LABEL_32;
        }
        sub_10000526C(v124, (uint64_t *)&unk_100118CE0);
        v79 = v119;
        v70 = v226;
      }
    }
    else
    {
      sub_10000526C((uint64_t)&v235, &qword_1001185E0);
    }
  }
  v125 = sub_10000C9C8(v71, (uint64_t)v71[3]);
  v126 = objc_msgSend(*(id *)((char *)v125 + *((int *)v228 + 5)), "webURL");
  if (v126)
  {
    v127 = v126;
    v128 = (uint64_t)v217;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v129 = 0;
    v130 = (uint64_t)v218;
  }
  else
  {
    v129 = 1;
    v130 = (uint64_t)v218;
    v128 = (uint64_t)v217;
  }
  v79(v128, v129, 1, v72);
  sub_100007C48(v128, v130, (uint64_t *)&unk_100118CE0);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v227)(v130, 1, v72) == 1)
  {
    sub_10000526C(v130, (uint64_t *)&unk_100118CE0);
    v131 = v222;
    v132 = (uint64_t)v221;
    v133 = (uint64_t)v220;
    v134 = (uint64_t)v219;
  }
  else
  {
    v135 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
    v136 = v216;
    v135(v216, v130, v72);
    v137 = v72;
    v138 = *(_QWORD *)(v233 + v225);
    v140 = swift_getKeyPath(&unk_1000D3598, v139);
    v235 = v138;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v235, v140, v103);
    v141 = swift_release(v140);
    v142 = *(char **)(v138 + 264);
    if (v142)
    {
      v143 = sub_10000C9C8(v230, (uint64_t)v230[3]);
      v144 = v210;
      sub_100007C8C((uint64_t)v143 + *((int *)v228 + 6), v210, &qword_100118580);
      v145 = type metadata accessor for AnySong(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 48))(v144, 1, v145) == 1)
      {
        swift_retain(v142);
        sub_10000526C(v144, &qword_100118580);
        v146 = (uint64_t)v209;
        v147 = v229;
        v79((uint64_t)v209, 1, 1, v229);
        v131 = v222;
        v132 = (uint64_t)v221;
        v133 = (uint64_t)v220;
        v134 = (uint64_t)v219;
        v148 = v216;
      }
      else
      {
        v149 = (uint64_t)v209;
        sub_100007C8C(v144, (uint64_t)v209, (uint64_t *)&unk_100118CE0);
        swift_retain(v142);
        v150 = v144;
        v146 = v149;
        sub_10000B600(v150, type metadata accessor for AnySong);
        v151 = v149;
        v147 = v229;
        v152 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v227)(v151, 1, v229);
        v131 = v222;
        v132 = (uint64_t)v221;
        v133 = (uint64_t)v220;
        v134 = (uint64_t)v219;
        v148 = v216;
        if (v152 != 1)
        {
          v177 = ((uint64_t (*)(char *, uint64_t, uint64_t))v135)(v208, v146, v147);
          v178 = v215;
          v179 = static ToolbarItemPlacement.topBarTrailing.getter(v177);
          v230 = &v193;
          __chkstk_darwin(v179);
          *(&v193 - 4) = v142;
          *(&v193 - 3) = v148;
          v180 = v208;
          *(&v193 - 2) = (char *)v233;
          *(&v193 - 1) = v180;
          v233 = type metadata accessor for ContextMenuForSubscribedUserView(0);
          v181 = sub_100004864(&qword_100118608, type metadata accessor for ContextMenuForSubscribedUserView, (uint64_t)&unk_1000D4998);
          v182 = v201;
          ToolbarItem<>.init(placement:content:)(v178, sub_100044150, &v193 - 6, v233, v181);
          v183 = sub_10000522C(&qword_100118600, &qword_100118578, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
          v184 = v193;
          v185 = v182;
          v186 = v205;
          static ToolbarContentBuilder.buildBlock<A>(_:)(v185, v205, v183);
          v187 = sub_10000522C(&qword_1001185F8, &qword_100118590, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
          v235 = v202;
          v236 = v187;
          v233 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
          v235 = v186;
          v236 = v183;
          v188 = swift_getOpaqueTypeConformance2(&v235, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
          v189 = v204;
          static ToolbarContentBuilder.buildEither<A, B>(second:)(v184, v203, v204, v233, v188);
          (*(void (**)(char *, uint64_t))(v194 + 8))(v184, v189);
          v190 = sub_100004F7C(&qword_1001185E8);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v190 - 8) + 56))(v134, 0, 1, v190);
          v191 = sub_10004404C();
          static ToolbarContentBuilder.buildIf<A>(_:)(v134, v190, v191);
          swift_release(v142);
          sub_10000526C(v134, &qword_100118598);
          v156 = (uint64_t)v231;
          (*(void (**)(char *, uint64_t))(v195 + 8))(v201, v186);
          v192 = *(void (**)(char *, uint64_t))(v232 + 8);
          v192(v208, v147);
          v192(v216, v147);
          v70 = v226;
          goto LABEL_32;
        }
      }
      v153 = swift_release(v142);
      (*(void (**)(char *, uint64_t, __n128))(v232 + 8))(v148, v147, v153);
      sub_10000526C(v146, (uint64_t *)&unk_100118CE0);
    }
    else
    {
      (*(void (**)(char *, uint64_t, __n128))(v69 + 8))(v136, v137, v141);
      v131 = v222;
      v132 = (uint64_t)v221;
      v133 = (uint64_t)v220;
      v134 = (uint64_t)v219;
    }
    v70 = v226;
  }
  v154 = sub_100004F7C(&qword_1001185E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 56))(v134, 1, 1, v154);
  v155 = sub_10004404C();
  static ToolbarContentBuilder.buildIf<A>(_:)(v134, v154, v155);
  sub_10000526C(v134, &qword_100118598);
  v156 = (uint64_t)v231;
LABEL_32:
  v157 = v132 + *(int *)(v131 + 48);
  v158 = v132 + *(int *)(v131 + 64);
  sub_100007C8C(v70, v132, &qword_1001185B8);
  sub_100007C8C(v156, v157, &qword_1001185A8);
  sub_100007C8C(v133, v158, &qword_100118598);
  TupleToolbarContent.init(_:)(v132, v131);
  sub_10000526C(v133, &qword_100118598);
  sub_10000526C(v156, &qword_1001185A8);
  return sub_10000526C(v70, &qword_1001185B8);
}

uint64_t sub_10003FF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  double v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v43 = a4;
  v7 = sub_100004F7C(&qword_100118620);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a1;
  v45 = a2;
  v10 = sub_10000B110();
  swift_bridgeObjectRetain(a2);
  v11 = Text.init<A>(_:)(&v44, &type metadata for String, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.Weight.bold.getter(v11);
  v19 = Text.fontWeight(_:)(*(_QWORD *)&v18, 0, v11, v13, v17, v15);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  sub_10000B64C(v11, v13, v17);
  swift_bridgeObjectRelease(v15);
  if (qword_100115EB0 != -1)
    swift_once(&qword_100115EB0, sub_100034F58);
  v26 = v23 & 1;
  v27 = Text.font(_:)(qword_1001182A0, v19, v21, v23 & 1, v25);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  sub_10000B64C(v19, v21, v26);
  swift_bridgeObjectRelease(v25);
  if (*(_BYTE *)(*(_QWORD *)(a3 + *(int *)(type metadata accessor for TrackPageView(0) + 48) + 8) + 16))
    v35 = 1.0;
  else
    v35 = 0.0;
  KeyPath = swift_getKeyPath(&unk_1000D35C0, v34);
  v38 = swift_getKeyPath(&unk_1000D35F0, v37);
  v44 = v27;
  v45 = v29;
  v46 = v33;
  v47 = v31;
  v48 = v35;
  v49 = KeyPath;
  v50 = 1;
  v51 = v38;
  v52 = 1;
  v53 = 0;
  v39 = sub_100004F7C(&qword_100118638);
  v40 = sub_1000441FC();
  View.accessibilityIdentifier(_:)(0xD000000000000019, 0x80000001000DA460, v39, v40);
  sub_10000B64C(v27, v29, v33);
  swift_release(v38);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v31);
  return sub_100007C48((uint64_t)v9, v43, &qword_100118620);
}

uint64_t sub_100040200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t result;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD v34[2];

  v6 = type metadata accessor for TrackPageView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = type metadata accessor for URL(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v12;
  v13 = *(void (**)(char *, uint64_t))(v12 + 16);
  v32 = v14;
  v13(v11, a1);
  if (qword_1001160C0 != -1)
    swift_once(&qword_1001160C0, sub_100080044);
  v15 = *(_QWORD *)(a2 + *(int *)(v6 + 44));
  v16 = *(_QWORD *)algn_100124598;
  v28 = qword_100124590;
  v17 = *(_QWORD *)(v15 + 504);
  v31 = *(_QWORD *)(v15 + 496);
  v30 = *(unsigned __int8 *)(v15 + 512);
  v18 = *(_QWORD *)(v15 + 520);
  sub_10000B340(a2, (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for TrackPageView);
  v19 = *(unsigned __int8 *)(v7 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_10010A160, v20 + v8, v19 | 7);
  sub_10000B4D4((uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for TrackPageView);
  v33 = 0;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  State.init(wrappedValue:)(v34, &v33, &type metadata for Bool);
  v22 = v34[1];
  *(_BYTE *)a3 = v34[0];
  *(_QWORD *)(a3 + 8) = v22;
  v23 = (int *)type metadata accessor for ToolbarShareButton(0);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(a3 + v23[5], v11, v32);
  v25 = (uint64_t *)(a3 + v23[6]);
  *v25 = v28;
  v25[1] = v16;
  v26 = a3 + v23[7];
  *(_QWORD *)v26 = v31;
  *(_QWORD *)(v26 + 8) = v17;
  *(_BYTE *)(v26 + 16) = v30;
  *(_QWORD *)(v26 + 24) = v18;
  v27 = (uint64_t (**)())(a3 + v23[8]);
  *v27 = sub_1000444BC;
  v27[1] = (uint64_t (*)())v21;
  return result;
}

uint64_t sub_100040420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v7 = v1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 24))
    v5 = 68352;
  else
    v5 = 2816;
  return sub_1000A6994(v5, 0xD000000000000028, 0x80000001000D90E0);
}

uint64_t sub_1000404E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  void (*v46)(char *, uint64_t, __n128);
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63[9];

  v58 = a3;
  v5 = type metadata accessor for TrackPageView(0);
  v52 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v53 = v6;
  v51 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v55 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v54 = (char *)&v49 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v49 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v49 - v16;
  v50 = type metadata accessor for ContextMenuForUnsubscribedUserView(0);
  __chkstk_darwin(v50);
  v19 = (char **)((char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = a1;
  v21 = *(_QWORD *)(a1 + *(int *)(v5 + 44));
  sub_100087604(v63);
  v57 = v17;
  sub_100071EE0((uint64_t)v17);
  sub_1000444C8(v63);
  v56 = v8;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v22(v15, a2, v7);
  KeyPath = swift_getKeyPath(&unk_1000D3570, v23);
  v60[0] = v21;
  v25 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v60, KeyPath, v25);
  swift_release(KeyPath);
  swift_beginAccess(v21 + 216, v60, 0, 0);
  sub_100007C8C(v21 + 216, (uint64_t)v61, &qword_1001185E0);
  v26 = v62;
  if (v62)
  {
    v27 = sub_10000C9C8(v61, v62);
    v49 = v15;
    v28 = *(_QWORD *)(v26 - 8);
    __chkstk_darwin(v27);
    v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v28 + 16))(v30);
    sub_10000526C((uint64_t)v61, &qword_1001185E0);
    v31 = *(_QWORD **)&v30[*(int *)(type metadata accessor for StreamingServicesProvider(0) + 20)];
    v32 = *(void (**)(char *, uint64_t))(v28 + 8);
    swift_bridgeObjectRetain(v31);
    v32(v30, v26);
    v15 = v49;
  }
  else
  {
    sub_10000526C((uint64_t)v61, &qword_1001185E0);
    v31 = _swiftEmptyArrayStorage;
  }
  v33 = v51;
  sub_10000B340(v20, v51, type metadata accessor for TrackPageView);
  v34 = *(unsigned __int8 *)(v52 + 80);
  v35 = (v34 + 16) & ~v34;
  v36 = swift_allocObject(&unk_10010A188, v35 + v53, v34 | 7);
  sub_10000B4D4(v33, v36 + v35, type metadata accessor for TrackPageView);
  v37 = (_QWORD *)((char *)v19 + *(int *)(v50 + 24));
  *v37 = swift_getKeyPath(&unk_1000D3620, v38);
  v39 = sub_100004F7C(&qword_1001166A0);
  swift_storeEnumTagMultiPayload(v37, v39, 0);
  *v19 = sub_100044520;
  v19[1] = v36;
  v40 = (uint64_t)v54;
  v41 = v57;
  v42 = (void (*)(char *, char *, uint64_t))v22;
  v22(v54, (uint64_t)v57, v7);
  v43 = (uint64_t)v55;
  v42(v55, v15, v7);
  v44 = type metadata accessor for ContextMenuForUnsubscribedUserViewModel(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  swift_retain(v36);
  v59 = sub_10000C9F0(v40, v43, (uint64_t)v31);
  State.init(wrappedValue:)(v61, &v59, v44);
  v45 = swift_release(v36);
  v46 = *(void (**)(char *, uint64_t, __n128))(v56 + 8);
  v46(v15, v7, v45);
  ((void (*)(char *, uint64_t))v46)(v41, v7);
  v47 = v61[1];
  v19[2] = v61[0];
  v19[3] = v47;
  return sub_10000B4D4((uint64_t)v19, v58, type metadata accessor for ContextMenuForUnsubscribedUserView);
}

uint64_t sub_100040950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55[9];

  v44 = a4;
  v51 = a5;
  v8 = type metadata accessor for TrackPageView(0);
  v45 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v47 = v9;
  v49 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100118660);
  __chkstk_darwin(v10);
  v46 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v43 - v20;
  v22 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v25(v21, a2, v12);
  v26 = *(int *)(v8 + 44);
  v48 = a3;
  v27 = *(_QWORD *)(a3 + v26);
  v50 = a1;
  swift_retain(a1);
  sub_100087604(v55);
  sub_100071EE0((uint64_t)v19);
  sub_1000444C8(v55);
  v25(v16, v44, v12);
  KeyPath = swift_getKeyPath(&unk_1000D3570, v28);
  v52[0] = v27;
  v30 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v52, KeyPath, v30);
  swift_release(KeyPath);
  swift_beginAccess(v27 + 216, v52, 0, 0);
  sub_100007C8C(v27 + 216, (uint64_t)v53, &qword_1001185E0);
  v31 = v54;
  if (v54)
  {
    v32 = sub_10000C9C8(v53, v54);
    v33 = *(_QWORD *)(v31 - 8);
    __chkstk_darwin(v32);
    v35 = (char *)&v43 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v33 + 16))(v35);
    sub_10000526C((uint64_t)v53, &qword_1001185E0);
    v36 = v46;
    sub_100007C8C((uint64_t)v35, v46, &qword_100118660);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v31);
  }
  else
  {
    sub_10000526C((uint64_t)v53, &qword_1001185E0);
    v37 = type metadata accessor for StreamingService(0);
    v36 = v46;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v46, 1, 1, v37);
  }
  v38 = v49;
  sub_10000B340(v48, v49, type metadata accessor for TrackPageView);
  v39 = *(unsigned __int8 *)(v45 + 80);
  v40 = (v39 + 16) & ~v39;
  v41 = swift_allocObject(&unk_10010A1B0, v40 + v47, v39 | 7);
  sub_10000B4D4(v38, v41 + v40, type metadata accessor for TrackPageView);
  sub_100062154(v50, (uint64_t)v21, (uint64_t)v19, (uint64_t)v16, v36, (uint64_t)sub_100044520, v41, v24);
  return sub_10000B4D4((uint64_t)v24, v51, type metadata accessor for ContextMenuForSubscribedUserView);
}

uint64_t sub_100040D20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  int v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3548, v2);
  v7 = v1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  if (*(_BYTE *)(v1 + 24))
    v5 = 68355;
  else
    v5 = 2819;
  return sub_1000A6994(v5, 0xD000000000000028, 0x80000001000D90E0);
}

void sub_100040DE4(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

void sub_100040DF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D3520, v4);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100044020, v7, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
}

uint64_t sub_100040EB0(double *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  double v17;
  _BYTE v19[16];
  uint64_t v20;
  double v21;
  uint64_t v22;

  v4 = sub_100004F7C(&qword_100116690);
  __chkstk_darwin(v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UserInterfaceSizeClass(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *a1;
  v12 = a1[1];
  v13 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for TrackPageView(0) + 44));
  KeyPath = swift_getKeyPath(&unk_1000D34F8, v14);
  v20 = v13;
  v21 = v11;
  v22 = v13;
  v16 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v22, KeyPath, sub_100043FFC, v19, (char *)&type metadata for () + 8, v16);
  swift_release(KeyPath);
  sub_100006D34(v6);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UserInterfaceSizeClass.regular(_:), v7);
    sub_10000526C((uint64_t)v6, &qword_100116690);
  }
  else
  {
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v8 + 32))(v10, v6, v7);
  }
  if (v11 >= v12)
    v17 = v12;
  else
    v17 = v11;
  sub_100088114((uint64_t)v10, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100041098(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004115C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[3];

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D34D0, a2);
  v8[0] = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v6);
  swift_release(KeyPath);
  swift_beginAccess(v4 + 32, v8, 0, 0);
  return sub_100043E28(v4 + 32, a3);
}

uint64_t sub_100041204(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;
  _BYTE v10[112];

  sub_100043E28(a1, (uint64_t)v10);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D34D0, v4);
  v8[2] = v3;
  v8[3] = v10;
  v9 = v3;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10004510C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return sub_100045124((uint64_t)v10);
}

double sub_1000412BC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3810, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 144);
  *a3 = result;
  return result;
}

void sub_100041348(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3810, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000450F0, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_1000413F8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3838, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 152);
  *a3 = result;
  return result;
}

void sub_100041484(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3838, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_1000450D4, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_100041534@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3740, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 160);
  *a3 = result;
  return result;
}

void sub_1000415C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3740, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100045570, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_100041670@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D36A0, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 168);
  *a3 = result;
  return result;
}

void sub_1000416FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D36A0, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_10004555C, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_1000417AC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D34F8, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 176);
  *a3 = result;
  return result;
}

void sub_100041838(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D34F8, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100045520, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_1000418E8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3520, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 184);
  *a3 = result;
  return result;
}

void sub_100041974(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3520, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100045534, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

double sub_100041A24@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3650, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 200);
  *a3 = result;
  return result;
}

void sub_100041AB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3650, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_100045548, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

void sub_100041B60(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3678, a2);
  v7 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v6);
  swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + 584);
}

double sub_100041BEC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D3678, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100044740, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100041C94()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100041CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041E38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100041CC8()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100041CE8()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_100041D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100004F7C(&qword_100116690);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007C8C(a1, (uint64_t)v4, &qword_100116690);
  return EnvironmentValues.horizontalSizeClass.setter(v4);
}

uint64_t sub_100041D8C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100041DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041E38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t sub_100041DD0()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_100041DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041E38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for OpenURLAction, (uint64_t (*)(char *))&EnvironmentValues.openURL.setter);
}

uint64_t sub_100041E04()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100041E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041E38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, (uint64_t (*)(char *))&EnvironmentValues.scenePhase.setter);
}

uint64_t sub_100041E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_100041EB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityReduceMotion.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100041EE0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.accessibilityReduceTransparency.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100041F0C()
{
  return EnvironmentValues.dismiss.getter();
}

uint64_t sub_100041F2C()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100041F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041E38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, (uint64_t (*)(char *))&EnvironmentValues.scenePhase.setter);
}

uint64_t sub_100041F70(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v17);
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    swift_retain(v7);
    v12 = sub_100004F7C(&qword_100116688);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_100004F7C(&qword_100116690);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
        v16 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    else
    {
      v18 = *v11;
      *v10 = *v11;
      swift_retain(v18);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v16);
    v19 = a3[6];
    v20 = (uint64_t *)(a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
    v26 = a3[7];
    v27 = a1 + v26;
    v28 = (uint64_t)a2 + v26;
    v29 = *(_QWORD *)v28;
    v30 = *(_BYTE *)(v28 + 8);
    sub_1000422C4(*(_QWORD *)v28, v30);
    *(_QWORD *)v27 = v29;
    *(_BYTE *)(v27 + 8) = v30;
    v31 = a3[8];
    v32 = a1 + v31;
    v33 = (uint64_t)a2 + v31;
    v34 = *(_QWORD *)v33;
    v35 = *(_BYTE *)(v33 + 8);
    sub_1000422C4(*(_QWORD *)v33, v35);
    *(_QWORD *)v32 = v34;
    *(_BYTE *)(v32 + 8) = v35;
    v36 = a3[9];
    v37 = (uint64_t *)(a1 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = sub_100004F7C(&qword_100116678);
    if (swift_getEnumCaseMultiPayload(v38, v39) == 1)
    {
      v40 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v37, v38, v40);
      v41 = 1;
    }
    else
    {
      v42 = *v38;
      *v37 = *v38;
      swift_retain(v42);
      v41 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v39, v41);
    v43 = a3[10];
    v44 = (uint64_t *)(a1 + v43);
    v45 = (uint64_t *)((char *)a2 + v43);
    v46 = sub_100004F7C(&qword_100116680);
    if (swift_getEnumCaseMultiPayload(v45, v46) == 1)
    {
      v47 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v44, v45, v47);
      v48 = 1;
    }
    else
    {
      v49 = *v45;
      *v44 = *v45;
      swift_retain(v49);
      v48 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v46, v48);
    v50 = a3[11];
    v51 = a3[12];
    v52 = *(uint64_t *)((char *)a2 + v50);
    *(_QWORD *)(a1 + v50) = v52;
    v53 = (_QWORD *)(a1 + v51);
    v54 = (uint64_t *)((char *)a2 + v51);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = a3[13];
    v57 = (_QWORD *)(a1 + v56);
    v58 = (uint64_t *)((char *)a2 + v56);
    v59 = *v58;
    swift_retain(v52);
    swift_retain(v55);
    if (v59)
    {
      v60 = v58[1];
      *v57 = v59;
      v57[1] = v60;
      swift_retain(v60);
    }
    else
    {
      *(_OWORD *)v57 = *(_OWORD *)v58;
    }
  }
  return a1;
}

uint64_t sub_1000422C4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

double sub_1000422D0(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  _QWORD *v18;

  swift_release(*a1);
  v4 = (_QWORD *)((char *)a1 + a2[5]);
  v5 = sub_100004F7C(&qword_100116688);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for UserInterfaceSizeClass(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6))
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v8 = (_QWORD *)((char *)a1 + a2[6]);
  v9 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  else
  {
    swift_release(*v8);
  }
  sub_100007CD0(*(_QWORD *)((char *)a1 + a2[7]), *((_BYTE *)a1 + a2[7] + 8));
  sub_100007CD0(*(_QWORD *)((char *)a1 + a2[8]), *((_BYTE *)a1 + a2[8] + 8));
  v11 = (_QWORD *)((char *)a1 + a2[9]);
  v12 = sub_100004F7C(&qword_100116678);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = (_QWORD *)((char *)a1 + a2[10]);
  v15 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[11]));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8)).n128_u64[0];
  v18 = (_QWORD *)((char *)a1 + a2[13]);
  if (*v18)
    *(_QWORD *)&result = swift_release(v18[1]).n128_u64[0];
  return result;
}

uint64_t sub_1000424D0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)((char *)a2 + v8);
  swift_retain(v6);
  v11 = sub_100004F7C(&qword_100116688);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for UserInterfaceSizeClass(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      v14 = sub_100004F7C(&qword_100116690);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      v15 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(v9, v10, v12);
      v15 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  else
  {
    v16 = *v10;
    *v9 = *v10;
    swift_retain(v16);
    v15 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v15);
  v17 = a3[6];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  v24 = a3[7];
  v25 = a1 + v24;
  v26 = (uint64_t)a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_1000422C4(*(_QWORD *)v26, v28);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = (uint64_t)a2 + v29;
  v32 = *(_QWORD *)v31;
  v33 = *(_BYTE *)(v31 + 8);
  sub_1000422C4(*(_QWORD *)v31, v33);
  *(_QWORD *)v30 = v32;
  *(_BYTE *)(v30 + 8) = v33;
  v34 = a3[9];
  v35 = (uint64_t *)(a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = sub_100004F7C(&qword_100116678);
  if (swift_getEnumCaseMultiPayload(v36, v37) == 1)
  {
    v38 = type metadata accessor for DismissAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v35, v36, v38);
    v39 = 1;
  }
  else
  {
    v40 = *v36;
    *v35 = *v36;
    swift_retain(v40);
    v39 = 0;
  }
  swift_storeEnumTagMultiPayload(v35, v37, v39);
  v41 = a3[10];
  v42 = (uint64_t *)(a1 + v41);
  v43 = (uint64_t *)((char *)a2 + v41);
  v44 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v43, v44) == 1)
  {
    v45 = type metadata accessor for ScenePhase(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v42, v43, v45);
    v46 = 1;
  }
  else
  {
    v47 = *v43;
    *v42 = *v43;
    swift_retain(v47);
    v46 = 0;
  }
  swift_storeEnumTagMultiPayload(v42, v44, v46);
  v48 = a3[11];
  v49 = a3[12];
  v50 = *(uint64_t *)((char *)a2 + v48);
  *(_QWORD *)(a1 + v48) = v50;
  v51 = (_QWORD *)(a1 + v49);
  v52 = (uint64_t *)((char *)a2 + v49);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  v54 = a3[13];
  v55 = (_QWORD *)(a1 + v54);
  v56 = (uint64_t *)((char *)a2 + v54);
  v57 = *v56;
  swift_retain(v50);
  swift_retain(v53);
  if (v57)
  {
    v58 = v56[1];
    *v55 = v57;
    v55[1] = v58;
    swift_retain(v58);
  }
  else
  {
    *(_OWORD *)v55 = *(_OWORD *)v56;
  }
  return a1;
}

uint64_t *sub_1000427F8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  if (a1 != a2)
  {
    v9 = a3[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    sub_10000526C((uint64_t)a1 + v9, &qword_100116688);
    v12 = sub_100004F7C(&qword_100116688);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for UserInterfaceSizeClass(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        v15 = sub_100004F7C(&qword_100116690);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        v16 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v14 + 16))(v10, v11, v13);
        v16 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v16);
    v18 = a3[6];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    sub_10000526C((uint64_t)a1 + v18, &qword_100116698);
    v21 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = 1;
    }
    else
    {
      v24 = *v20;
      *v19 = *v20;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v23);
  }
  v25 = a3[7];
  v26 = (uint64_t)a1 + v25;
  v27 = (uint64_t)a2 + v25;
  v28 = *(_QWORD *)v27;
  v29 = *(_BYTE *)(v27 + 8);
  sub_1000422C4(*(_QWORD *)v27, v29);
  v30 = *(_QWORD *)v26;
  v31 = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v29;
  sub_100007CD0(v30, v31);
  v32 = a3[8];
  v33 = (uint64_t)a1 + v32;
  v34 = (uint64_t)a2 + v32;
  v35 = *(_QWORD *)v34;
  v36 = *(_BYTE *)(v34 + 8);
  sub_1000422C4(*(_QWORD *)v34, v36);
  v37 = *(_QWORD *)v33;
  v38 = *(_BYTE *)(v33 + 8);
  *(_QWORD *)v33 = v35;
  *(_BYTE *)(v33 + 8) = v36;
  sub_100007CD0(v37, v38);
  if (a1 != a2)
  {
    v39 = a3[9];
    v40 = (uint64_t *)((char *)a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    sub_10000526C((uint64_t)a1 + v39, &qword_100116678);
    v42 = sub_100004F7C(&qword_100116678);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for DismissAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v44 = 1;
    }
    else
    {
      v45 = *v41;
      *v40 = *v41;
      swift_retain(v45);
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v42, v44);
    v46 = a3[10];
    v47 = (uint64_t *)((char *)a1 + v46);
    v48 = (uint64_t *)((char *)a2 + v46);
    sub_10000526C((uint64_t)a1 + v46, &qword_100116680);
    v49 = sub_100004F7C(&qword_100116680);
    if (swift_getEnumCaseMultiPayload(v48, v49) == 1)
    {
      v50 = type metadata accessor for ScenePhase(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v47, v48, v50);
      v51 = 1;
    }
    else
    {
      v52 = *v48;
      *v47 = *v48;
      swift_retain(v52);
      v51 = 0;
    }
    swift_storeEnumTagMultiPayload(v47, v49, v51);
  }
  v53 = a3[11];
  v54 = *(uint64_t *)((char *)a2 + v53);
  v55 = *(uint64_t *)((char *)a1 + v53);
  *(uint64_t *)((char *)a1 + v53) = v54;
  swift_retain(v54);
  swift_release(v55);
  v56 = a3[12];
  v57 = (uint64_t *)((char *)a1 + v56);
  v58 = (uint64_t *)((char *)a2 + v56);
  *v57 = *v58;
  v59 = v58[1];
  v60 = v57[1];
  v57[1] = v59;
  swift_retain(v59);
  swift_release(v60);
  v61 = a3[13];
  v62 = (uint64_t *)((char *)a1 + v61);
  v63 = (uint64_t *)((char *)a2 + v61);
  v64 = *(uint64_t *)((char *)a1 + v61);
  v65 = *v63;
  if (!v64)
  {
    if (v65)
    {
      v68 = v63[1];
      *v62 = v65;
      v62[1] = v68;
      swift_retain(v68);
      return a1;
    }
LABEL_25:
    *(_OWORD *)v62 = *(_OWORD *)v63;
    return a1;
  }
  if (!v65)
  {
    swift_release(v62[1]);
    goto LABEL_25;
  }
  v66 = v63[1];
  v67 = v62[1];
  *v62 = v65;
  v62[1] = v66;
  swift_retain(v66);
  swift_release(v67);
  return a1;
}

uint64_t sub_100042BE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_100004F7C(&qword_100116688);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for UserInterfaceSizeClass(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      v12 = sub_100004F7C(&qword_100116690);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v13 = a3[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a3[9];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_100004F7C(&qword_100116678);
  if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
  {
    v28 = type metadata accessor for DismissAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v25, v26, v28);
    swift_storeEnumTagMultiPayload(v25, v27, 1);
  }
  else
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  v29 = a3[10];
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v31, v32) == 1)
  {
    v33 = type metadata accessor for ScenePhase(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v30, v31, v33);
    swift_storeEnumTagMultiPayload(v30, v32, 1);
  }
  else
  {
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  v34 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
  v35 = a3[13];
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  if (*v37)
  {
    v39 = v37[1];
    *v36 = v38;
    v36[1] = v39;
  }
  else
  {
    *(_OWORD *)v36 = *(_OWORD *)v37;
  }
  return a1;
}

uint64_t *sub_100042EDC(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  if (a1 != a2)
  {
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_10000526C((uint64_t)a1 + v8, &qword_100116688);
    v11 = sub_100004F7C(&qword_100116688);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for UserInterfaceSizeClass(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
      {
        v14 = sub_100004F7C(&qword_100116690);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v9, v10, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    v15 = a3[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    sub_10000526C((uint64_t)a1 + v15, &qword_100116698);
    v18 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v20 = a3[7];
  v21 = (uint64_t)a1 + v20;
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = *v22;
  LOBYTE(v22) = *((_BYTE *)v22 + 8);
  v24 = *(_QWORD *)v21;
  v25 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = (_BYTE)v22;
  sub_100007CD0(v24, v25);
  v26 = a3[8];
  v27 = (uint64_t)a1 + v26;
  v28 = (uint64_t *)((char *)a2 + v26);
  v29 = *v28;
  LOBYTE(v28) = *((_BYTE *)v28 + 8);
  v30 = *(_QWORD *)v27;
  v31 = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v27 = v29;
  *(_BYTE *)(v27 + 8) = (_BYTE)v28;
  sub_100007CD0(v30, v31);
  if (a1 != a2)
  {
    v32 = a3[9];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    sub_10000526C((uint64_t)a1 + v32, &qword_100116678);
    v35 = sub_100004F7C(&qword_100116678);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for DismissAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
      swift_storeEnumTagMultiPayload(v33, v35, 1);
    }
    else
    {
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    v37 = a3[10];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    sub_10000526C((uint64_t)a1 + v37, &qword_100116680);
    v40 = sub_100004F7C(&qword_100116680);
    if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
    {
      v41 = type metadata accessor for ScenePhase(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v38, v39, v41);
      swift_storeEnumTagMultiPayload(v38, v40, 1);
    }
    else
    {
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
  }
  v42 = a3[11];
  v43 = *(uint64_t *)((char *)a1 + v42);
  *(uint64_t *)((char *)a1 + v42) = *(uint64_t *)((char *)a2 + v42);
  swift_release(v43);
  v44 = a3[12];
  v45 = (uint64_t *)((char *)a1 + v44);
  v46 = (uint64_t *)((char *)a2 + v44);
  v48 = *v46;
  v47 = v46[1];
  v49 = v45[1];
  *v45 = v48;
  v45[1] = v47;
  swift_release(v49);
  v50 = a3[13];
  v51 = (uint64_t *)((char *)a1 + v50);
  v52 = (uint64_t *)((char *)a2 + v50);
  v53 = *(uint64_t *)((char *)a1 + v50);
  v54 = *v52;
  if (!v53)
  {
    if (v54)
    {
      v57 = v52[1];
      *v51 = v54;
      v51[1] = v57;
      return a1;
    }
LABEL_24:
    *(_OWORD *)v51 = *(_OWORD *)v52;
    return a1;
  }
  if (!v54)
  {
    swift_release(v51[1]);
    goto LABEL_24;
  }
  v55 = v52[1];
  v56 = v51[1];
  *v51 = v54;
  v51[1] = v55;
  swift_release(v56);
  return a1;
}

uint64_t sub_10004328C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043298);
}

uint64_t sub_100043298(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_100004F7C(&qword_1001182E8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100004F7C(&qword_100117800);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_100004F7C(&qword_1001182F0);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = sub_100004F7C(qword_100117D10);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + a3[11]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100043394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000433A0);
}

uint64_t sub_1000433A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = sub_100004F7C(&qword_1001182E8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = sub_100004F7C(&qword_100117800);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v13 = sub_100004F7C(&qword_1001182F0);
  v9 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v13;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_100004F7C(qword_100117D10);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[11]) = (a2 - 1);
  return result;
}

void sub_100043498(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[10];

  v10[0] = "\t";
  sub_1000435B4(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10004360C(319, (unint64_t *)&qword_100117870, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      v10[3] = "\t";
      v10[4] = "\t";
      sub_10004360C(319, (unint64_t *)&unk_100118368, (uint64_t (*)(uint64_t))&type metadata accessor for DismissAction);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_10004360C(319, (unint64_t *)&qword_100117D98, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase);
        if (v9 <= 0x3F)
        {
          v10[6] = *(_QWORD *)(v8 - 8) + 64;
          v10[7] = (char *)&value witness table for Builtin.NativeObject + 64;
          v10[8] = &unk_1000D3428;
          v10[9] = &unk_1000D3440;
          swift_initStructMetadata(a1, 256, 10, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_1000435B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118360)
  {
    v2 = sub_1000050C8(&qword_100116690);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118360);
  }
}

void sub_10004360C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100043658(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DDB64, 1);
}

void sub_10004366C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TrackPageView(0);
  sub_10003689C(a1, a2);
}

unint64_t sub_1000436B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001183D0;
  if (!qword_1001183D0)
  {
    v1 = sub_1000050C8(&qword_1001183B8);
    sub_100043760(&qword_1001183D8, &qword_1001183E0, (void (*)(void))sub_10004373C, (void (*)(void))sub_100043BA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001183D0);
  }
  return result;
}

uint64_t sub_10004373C()
{
  return sub_100043760(&qword_1001183E8, &qword_1001183F0, (void (*)(void))sub_100024FF4, (void (*)(void))sub_1000437D0);
}

uint64_t sub_100043760(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000050C8(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000437D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001183F8;
  if (!qword_1001183F8)
  {
    v1 = sub_1000050C8(&qword_100118400);
    sub_100043854();
    sub_10000522C(&qword_1001184B0, &qword_1001184B8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001183F8);
  }
  return result;
}

unint64_t sub_100043854()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118408;
  if (!qword_100118408)
  {
    v1 = sub_1000050C8(&qword_100118410);
    sub_1000438D8();
    sub_10000522C(&qword_1001184A0, &qword_1001184A8, (uint64_t)&unk_1000D4F10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118408);
  }
  return result;
}

unint64_t sub_1000438D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118418;
  if (!qword_100118418)
  {
    v1 = sub_1000050C8(&qword_100118420);
    sub_10004395C();
    sub_10000522C(&qword_100118490, &qword_100118498, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118418);
  }
  return result;
}

unint64_t sub_10004395C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_100118428;
  if (!qword_100118428)
  {
    v1 = sub_1000050C8(&qword_100118430);
    v2 = sub_1000050C8(&qword_100118438);
    v3 = sub_1000050C8(&qword_100118440);
    v4 = sub_1000050C8(&qword_100118448);
    v8 = sub_1000050C8(&qword_100118450);
    v9 = sub_100043A9C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbarRole(_:)>>, 1);
    v7 = sub_10000522C(&qword_100118478, &qword_100118440, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v8 = v2;
    v9 = v3;
    v10 = v6;
    v11 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_10000522C(&qword_100118480, &qword_100118488, (uint64_t)&unk_1000D82C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118428);
  }
  return result;
}

unint64_t sub_100043A9C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100118458;
  if (!qword_100118458)
  {
    v1 = sub_1000050C8(&qword_100118450);
    v2[0] = sub_1000050C8(&qword_100118460);
    v2[1] = &type metadata for CGFloat;
    v2[2] = sub_10000522C(&qword_100118468, &qword_100118460, (uint64_t)&unk_1000D6380);
    v2[3] = sub_100043B64();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onScrollGeometryChange<A>(for:of:action:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118458);
  }
  return result;
}

unint64_t sub_100043B64()
{
  unint64_t result;

  result = qword_100118470;
  if (!qword_100118470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100118470);
  }
  return result;
}

unint64_t sub_100043BA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001184C0;
  if (!qword_1001184C0)
  {
    v1 = sub_1000050C8(&qword_1001184C8);
    sub_10000522C(&qword_1001184D0, &qword_1001184D8, (uint64_t)&protocol conformance descriptor for ContentUnavailableView<A, B, C>);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001184C0);
  }
  return result;
}

uint64_t sub_100043C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100036968(*(uint64_t **)(v1 + 16), a1);
}

unint64_t sub_100043C4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001184F0;
  if (!qword_1001184F0)
  {
    v1 = sub_1000050C8(&qword_1001184E8);
    v2[0] = sub_1000050C8(&qword_1001184F8);
    v2[1] = sub_10000522C(&qword_100118500, &qword_1001184F8, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001184F0);
  }
  return result;
}

uint64_t sub_100043D00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100036CC0(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100043D08()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100118518;
  if (!qword_100118518)
  {
    v1 = sub_1000050C8(&qword_100118510);
    v2[0] = sub_1000050C8(&qword_100117E08);
    v2[1] = type metadata accessor for NavigationBarButtonStyle(255);
    v2[2] = sub_10000522C(&qword_100117E00, &qword_100117E08, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100004864(&qword_100116870, type metadata accessor for NavigationBarButtonStyle, (uint64_t)&unk_1000D2ACC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118518);
  }
  return result;
}

uint64_t sub_100043E14()
{
  return sub_100044C64((uint64_t (*)(uint64_t))sub_100036FD0);
}

uint64_t sub_100043E28(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for TrackPageViewModel.LoadingState(a2, a1);
  return a2;
}

uint64_t sub_100043E64(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *a1;
  v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  *(_QWORD *)(a2 + 96) = *((_QWORD *)a1 + 12);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

uint64_t sub_100043E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackPageView(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_100118544);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000101B8;
  return sub_100035CF0(v3);
}

void sub_100043F00(double a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackPageView(0) - 8) + 80);
  sub_10003E748(v1 + ((v3 + 16) & ~v3), a1);
}

void sub_100043F40(uint64_t a1, double *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackPageView(0) - 8) + 80);
  sub_10003E898(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_100043F90()
{
  return sub_100044C64(sub_10003E99C);
}

uint64_t sub_100043F9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003EA80(*(char ***)(v1 + 16), *(char **)(v1 + 24), a1);
}

void sub_100043FA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackPageView(0) - 8) + 80);
  sub_100040DF0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100043FE8(uint64_t a1)
{
  return sub_100044838(a1, (uint64_t (*)(uint64_t, uint64_t))sub_100040EB0);
}

uint64_t sub_100043FFC()
{
  uint64_t v0;

  return sub_1000890E4(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_100044020()
{
  uint64_t v0;

  return sub_100089170(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

unint64_t sub_10004404C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = qword_1001185F0;
  if (!qword_1001185F0)
  {
    v1 = sub_1000050C8(&qword_1001185E8);
    v4 = sub_1000050C8(&qword_100118590);
    v5 = sub_10000522C(&qword_1001185F8, &qword_100118590, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v2 = sub_1000050C8(&qword_100118578);
    v3 = sub_10000522C(&qword_100118600, &qword_100118578, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v4 = v2;
    v5 = v3;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001185F0);
  }
  return result;
}

uint64_t sub_100044150@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100040950(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10004415C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000404E4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100044164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100040200(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10004416C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10003FF98(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_100044178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118628;
  if (!qword_100118628)
  {
    v1 = sub_1000050C8(&qword_100118620);
    sub_1000441FC();
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118628);
  }
  return result;
}

unint64_t sub_1000441FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118630;
  if (!qword_100118630)
  {
    v1 = sub_1000050C8(&qword_100118638);
    sub_100044280();
    sub_10000522C(&qword_100116F38, &qword_100116F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118630);
  }
  return result;
}

unint64_t sub_100044280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118640;
  if (!qword_100118640)
  {
    v1 = sub_1000050C8(&qword_100118648);
    sub_100044304();
    sub_10000522C(&qword_1001181C0, &qword_1001181C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118640);
  }
  return result;
}

unint64_t sub_100044304()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118650;
  if (!qword_100118650)
  {
    v1 = sub_1000050C8(&qword_100118658);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118650);
  }
  return result;
}

uint64_t sub_100044368@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100044398(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000443C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000443EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100044414(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100044438(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_10004445C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10004448C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000444BC()
{
  return sub_100044C64(sub_100040420);
}

_QWORD *sub_1000444C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100044524()
{
  return EnvironmentValues.openURL.getter();
}

uint64_t sub_100044544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041E38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for OpenURLAction, (uint64_t (*)(char *))&EnvironmentValues.openURL.setter);
}

uint64_t sub_10004456C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackPageView(0) - 8) + 80);
  return sub_100040D20(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1000445A4()
{
  uint64_t v0;

  return sub_100089330(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1000445C4(uint64_t a1)
{
  return sub_100044838(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10003E688);
}

double sub_1000445D0(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 105) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1000445F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (result)
  {
    v6 = result;
    swift_retain(a4);
    swift_retain(v6);
    swift_retain(a2);
    return swift_retain(a3);
  }
  return result;
}

uint64_t sub_100044644(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 120);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), v4);
  return a1;
}

uint64_t sub_1000446A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_release(result);
    swift_release(a3);
    swift_release(a2);
    return swift_release(a4);
  }
  return result;
}

_QWORD *sub_1000446F4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100044734()
{
  return sub_100044C64(sub_10003BD70);
}

uint64_t sub_100044740()
{
  uint64_t v0;

  return sub_10008A1A8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100044760()
{
  return sub_100044C64(sub_10003C4BC);
}

uint64_t sub_10004476C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SongMetadataView(a2, a1);
  return a2;
}

_QWORD *sub_1000447A8(_QWORD *a1)
{
  destroy for SongMetadataView(a1);
  return a1;
}

uint64_t sub_1000447DC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000447F8()
{
  return sub_100044C64(sub_10003B450);
}

uint64_t sub_10004480C()
{
  uint64_t v0;

  return sub_100089058(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_10004482C(uint64_t a1)
{
  return sub_100044838(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10003E390);
}

uint64_t sub_100044838(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackPageView(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_10004488C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118828;
  if (!qword_100118828)
  {
    v1 = sub_1000050C8(&qword_100118800);
    sub_100004864(&qword_100118818, type metadata accessor for PlayInAppleMusicView, (uint64_t)&unk_1000D5698);
    sub_10000522C(&qword_100118830, &qword_100118838, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118828);
  }
  return result;
}

uint64_t sub_100044928(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000050C8(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100044994()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100118848;
  if (!qword_100118848)
  {
    v1 = sub_1000050C8(&qword_1001187E0);
    v2[0] = type metadata accessor for PlayInAppleMusicView(255);
    v2[1] = sub_100004864(&qword_100118818, type metadata accessor for PlayInAppleMusicView, (uint64_t)&unk_1000D5698);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_10000522C(&qword_100118830, &qword_100118838, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118848);
  }
  return result;
}

uint64_t sub_100044A68()
{
  return sub_100044C64(sub_10003A82C);
}

uint64_t sub_100044A7C()
{
  uint64_t v0;

  return sub_100088FCC(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

unint64_t sub_100044AB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001188D8;
  if (!qword_1001188D8)
  {
    v1 = sub_1000050C8(&qword_1001188B8);
    sub_100004864(&qword_1001188E0, type metadata accessor for SongPreviewPlaybackView, (uint64_t)&unk_1000D7488);
    sub_10000522C(&qword_100118830, &qword_100118838, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001188D8);
  }
  return result;
}

unint64_t sub_100044B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001188E8;
  if (!qword_1001188E8)
  {
    v1 = sub_1000050C8(&qword_1001188D0);
    sub_100044BD0();
    sub_10000522C(&qword_100118830, &qword_100118838, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001188E8);
  }
  return result;
}

unint64_t sub_100044BD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001188F0;
  if (!qword_1001188F0)
  {
    v1 = sub_1000050C8(&qword_1001188F8);
    sub_10000522C(&qword_100118900, &qword_100118908, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001188F0);
  }
  return result;
}

uint64_t sub_100044C58()
{
  return sub_100044C64(sub_100039660);
}

uint64_t sub_100044C64(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackPageView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100044CA0()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_100044CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100041E38(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, (uint64_t (*)(char *))&EnvironmentValues.layoutDirection.setter);
}

uint64_t sub_100044CE4()
{
  uint64_t v0;

  return j__swift_retain(v0);
}

unint64_t sub_100044CEC()
{
  unint64_t result;

  result = qword_100118938;
  if (!qword_100118938)
  {
    result = swift_getWitnessTable(&unk_1000D78A4, &type metadata for SongPlaybackView);
    atomic_store(result, (unint64_t *)&qword_100118938);
  }
  return result;
}

unint64_t sub_100044D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118948;
  if (!qword_100118948)
  {
    v1 = sub_1000050C8(&qword_100118940);
    sub_100044CEC();
    sub_10000522C(&qword_100118830, &qword_100118838, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118948);
  }
  return result;
}

unint64_t sub_100044DB4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100118950;
  if (!qword_100118950)
  {
    v1 = sub_1000050C8(&qword_100118920);
    v2[0] = &type metadata for SongPlaybackView;
    v2[1] = sub_100044CEC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    sub_10000522C(&qword_100118830, &qword_100118838, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118950);
  }
  return result;
}

uint64_t sub_100044E6C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = (int *)type metadata accessor for TrackPageView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_100004F7C(&qword_100116688);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for UserInterfaceSizeClass(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v11 = (_QWORD *)(v6 + v1[6]);
  v12 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  sub_100007CD0(*(_QWORD *)(v6 + v1[7]), *(_BYTE *)(v6 + v1[7] + 8));
  sub_100007CD0(*(_QWORD *)(v6 + v1[8]), *(_BYTE *)(v6 + v1[8] + 8));
  v14 = (_QWORD *)(v6 + v1[9]);
  v15 = sub_100004F7C(&qword_100116678);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for DismissAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v14, v16);
  }
  else
  {
    swift_release(*v14);
  }
  v17 = (_QWORD *)(v6 + v1[10]);
  v18 = sub_100004F7C(&qword_100116680);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
  }
  else
  {
    swift_release(*v17);
  }
  swift_release(*(_QWORD *)(v6 + v1[11]));
  swift_release(*(_QWORD *)(v6 + v1[12] + 8));
  v20 = (_QWORD *)(v6 + v1[13]);
  if (*v20)
    swift_release(v20[1]);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_100045094()
{
  type metadata accessor for TrackPageView(0);
  return sub_100086F90();
}

uint64_t sub_1000450D4()
{
  uint64_t v0;

  return sub_100088FC4(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1000450F0()
{
  uint64_t v0;

  return sub_100088FBC(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_10004510C()
{
  uint64_t v0;

  return sub_100088F40(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100045124(uint64_t a1)
{
  destroy for TrackPageViewModel.LoadingState(a1);
  return a1;
}

ValueMetadata *type metadata accessor for ScreenWidthPreferenceKey()
{
  return &type metadata for ScreenWidthPreferenceKey;
}

ValueMetadata *type metadata accessor for TrackPageViewSafeAreaPreferenceKey()
{
  return &type metadata for TrackPageViewSafeAreaPreferenceKey;
}

ValueMetadata *type metadata accessor for BackgroundBlurHeightPreferenceKey()
{
  return &type metadata for BackgroundBlurHeightPreferenceKey;
}

ValueMetadata *type metadata accessor for NavigationBarTitleOffsetPreferenceKey()
{
  return &type metadata for NavigationBarTitleOffsetPreferenceKey;
}

uint64_t sub_100045198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v0 = sub_1000050C8(&qword_1001183C8);
  v1 = sub_1000050C8(&qword_1001184E0);
  v2 = sub_1000050C8(&qword_1001183C0);
  v9 = sub_1000050C8(&qword_1001183B8);
  v10 = type metadata accessor for ScenePhase(255);
  v11 = sub_1000436B8();
  v12 = sub_100004864(&qword_100117E98, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v9 = v2;
  v10 = OpaqueTypeConformance2;
  v4 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
  v5 = sub_1000050C8(&qword_1001184E8);
  v6 = sub_100043C4C();
  v9 = v5;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v9 = v0;
  v10 = v1;
  v11 = v4;
  v12 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
}

unint64_t sub_1000452C4(uint64_t a1)
{
  unint64_t result;

  result = sub_1000452E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000452E8()
{
  unint64_t result;

  result = qword_100118980;
  if (!qword_100118980)
  {
    result = swift_getWitnessTable(&unk_1000D3908, &type metadata for NavigationBarTitleOffsetPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100118980);
  }
  return result;
}

unint64_t sub_10004532C(uint64_t a1)
{
  unint64_t result;

  result = sub_100045350();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100045350()
{
  unint64_t result;

  result = qword_100118988;
  if (!qword_100118988)
  {
    result = swift_getWitnessTable(&unk_1000D396C, &type metadata for BackgroundBlurHeightPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100118988);
  }
  return result;
}

unint64_t sub_100045394(uint64_t a1)
{
  unint64_t result;

  result = sub_1000453B8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000453B8()
{
  unint64_t result;

  result = qword_100118990;
  if (!qword_100118990)
  {
    result = swift_getWitnessTable(&unk_1000D39D0, &type metadata for TrackPageViewSafeAreaPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100118990);
  }
  return result;
}

unint64_t sub_1000453FC(uint64_t a1)
{
  unint64_t result;

  result = sub_100045420();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100045420()
{
  unint64_t result;

  result = qword_100118998;
  if (!qword_100118998)
  {
    result = swift_getWitnessTable(&unk_1000D3A34, &type metadata for ScreenWidthPreferenceKey);
    atomic_store(result, (unint64_t *)&qword_100118998);
  }
  return result;
}

uint64_t sub_100045464(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000454A0(uint64_t a1)
{
  sub_100025480(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_1000454D0(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_1000454F8(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_100045520()
{
  return sub_100043FFC();
}

uint64_t sub_100045534()
{
  return sub_100044020();
}

uint64_t sub_100045548()
{
  return sub_1000445A4();
}

uint64_t sub_10004555C()
{
  return sub_10004480C();
}

uint64_t sub_100045570()
{
  return sub_100044A7C();
}

uint64_t sub_100045588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D3B68, a2);
  v5 = swift_getKeyPath(&unk_1000D3B90, v4);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_1000455FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[5] = v0;
  v2 = sub_100004F7C(&qword_100116E28);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v1[7] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v1[8] = v4;
  v1[9] = v5;
  return swift_task_switch(sub_10004568C, v4, v5);
}

uint64_t sub_10004568C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000B5E8(v1, (uint64_t)qword_100124478);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping recognition", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[5];
  v6 = v0[6];

  v8 = type metadata accessor for IntentSystemContext.Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  v9 = v7 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
  swift_beginAccess(v7 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin, v0 + 2, 33, 0);
  sub_100049B20(v6, v9, &qword_100116E28);
  swift_endAccess(v0 + 2);
  SHManagedSession.cancel()();
  v10 = (_QWORD *)swift_task_alloc(dword_10011938C);
  v0[10] = v10;
  *v10 = v0;
  v10[1] = sub_100045800;
  return sub_100055B08();
}

uint64_t sub_100045800()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  return swift_task_switch(sub_10004584C, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_10004584C()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(v0 + 56));
  if (qword_100116378 != -1)
    swift_once(&qword_100116378, sub_1000BE1F0);
  v1 = (void *)qword_10011CE10;
  if (qword_10011CE10)
  {
    v2 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setBool:forKey:", 0, v2);

  }
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  type metadata accessor for ControlCenter(0);
  v5 = static ControlCenter.shared.getter();
  dispatch thunk of ControlCenter.reloadControls(ofKind:)(*(_QWORD *)(v4 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind), *(_QWORD *)(v4 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind + 8));
  swift_release(v5);
  sub_100047C98();
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100045938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = type metadata accessor for AnyCancellable(0);
    v5 = sub_100004864(&qword_100118C38, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v6 = Set.Iterator.init(_cocoa:)(v26, v3, v4, v5);
    v1 = v26[0];
    v24 = v26[1];
    v7 = v26[2];
    v8 = v26[3];
    v9 = v26[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v24 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v9)
    {
      v14 = (v9 - 1) & v9;
      v15 = __clz(__rbit64(v9)) | (v8 << 6);
      v16 = v8;
      goto LABEL_32;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v21 >= v13)
      goto LABEL_35;
    v22 = *(_QWORD *)(v24 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_35;
      v22 = *(_QWORD *)(v24 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_35;
        v22 = *(_QWORD *)(v24 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_35;
          v22 = *(_QWORD *)(v24 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_35;
            v22 = *(_QWORD *)(v24 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v24 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_100049CD8(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
    v20 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    swift_retain(v20);
    if (!v20)
      goto LABEL_35;
    while (1)
    {
      AnyCancellable.cancel()();
      swift_release(v20);
      v8 = v16;
      v9 = v14;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v17 = __CocoaSet.Iterator.next()(v6);
      if (v17)
      {
        v18 = v17;
        v25 = v17;
        v19 = type metadata accessor for AnyCancellable(0);
        swift_unknownObjectRetain(v18);
        swift_dynamicCast(&v27, &v25, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
        v20 = v27;
        swift_unknownObjectRelease(v18);
        v16 = v8;
        v14 = v9;
        if (v20)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

NSString sub_100045BD8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100124508 = (uint64_t)result;
  return result;
}

uint64_t sub_100045C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for MusicRecognizer(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100046744();
  qword_100124510 = v1;
  return result;
}

double sub_100045C48@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  char v8;
  double result;
  __int128 v10;
  char v11;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D3B68, a2);
  v7 = swift_getKeyPath(&unk_1000D3B90, v6);
  static Published.subscript.getter(&v10, v4, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v8 = v11;
  result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_100045CCC(uint64_t a1, uint64_t *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  unsigned __int8 v11;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *a2;
  v5 = *(_BYTE *)(a1 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D3B68, a2);
  v8 = swift_getKeyPath(&unk_1000D3B90, v7);
  v10[0] = v2;
  v10[1] = v3;
  v11 = v5;
  sub_100049CC4(v2, v3, v5);
  swift_retain(v4);
  return static Published.subscript.setter(v10, v4, KeyPath, v8);
}

BOOL sub_100045D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  double v51;
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t);
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67[24];
  char v68[32];

  v1 = type metadata accessor for IntentSystemContext.Source(0);
  v65 = *(_QWORD *)(v1 - 8);
  v66 = v1;
  __chkstk_darwin(v1);
  v60 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100004F7C(&qword_100118C28);
  v3 = __chkstk_darwin(v64);
  v62 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v54 - v5;
  v7 = sub_100004F7C(&qword_100116E28);
  v8 = __chkstk_darwin(v7);
  v59 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v63 = (char *)&v54 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v54 - v15;
  v17 = sub_100004F7C(&qword_100117528);
  __chkstk_darwin(v17);
  v19 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v61 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v54 - v24;
  v26 = v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_activityStartDate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_activityStartDate, v68, 0, 0);
  sub_100007C8C(v26, (uint64_t)v19, &qword_100117528);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
  {
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(v25, v19, v20);
    if ((SBUIIsSystemApertureEnabled(v27) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
      return 0;
    }
    v58 = v25;
    v28 = v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
    swift_beginAccess(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin, v67, 0, 0);
    v30 = v65;
    v29 = v66;
    v55 = *(void (**)(char *, _QWORD, uint64_t))(v65 + 104);
    v55(v16, enum case for IntentSystemContext.Source.shortcuts(_:), v66);
    v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56);
    v56(v16, 0, 1, v29);
    v31 = (uint64_t)&v6[*(int *)(v64 + 48)];
    v57 = v28;
    sub_100007C8C(v28, (uint64_t)v6, &qword_100116E28);
    sub_100007C8C((uint64_t)v16, v31, &qword_100116E28);
    v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    if (v32((uint64_t)v6, 1, v29) == 1)
    {
      sub_10000526C((uint64_t)v16, &qword_100116E28);
      if (v32(v31, 1, v29) == 1)
      {
        v33 = v58;
LABEL_13:
        v36 = sub_10000526C((uint64_t)v6, &qword_100116E28);
LABEL_20:
        v50 = v61;
        Date.init()(v36);
        v51 = Date.timeIntervalSince(_:)(v33);
        v52 = *(void (**)(char *, uint64_t))(v21 + 8);
        v52(v50, v20);
        v52(v33, v20);
        return v51 < 4.0;
      }
    }
    else
    {
      sub_100007C8C((uint64_t)v6, (uint64_t)v14, &qword_100116E28);
      if (v32(v31, 1, v29) != 1)
      {
        v38 = v65;
        v39 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v60, v31, v66);
        v40 = sub_100004864(&qword_100118C30, (uint64_t (*)(uint64_t))&type metadata accessor for IntentSystemContext.Source, (uint64_t)&protocol conformance descriptor for IntentSystemContext.Source);
        v41 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v39, v66, v40);
        v42 = *(void (**)(char *, uint64_t))(v38 + 8);
        v43 = v39;
        v33 = v58;
        v29 = v66;
        v42(v43, v66);
        sub_10000526C((uint64_t)v16, &qword_100116E28);
        v42(v14, v29);
        v36 = sub_10000526C((uint64_t)v6, &qword_100116E28);
        if ((v41 & 1) != 0)
          goto LABEL_20;
LABEL_11:
        v34 = (uint64_t)v63;
        v55(v63, enum case for IntentSystemContext.Source.spotlight(_:), v29);
        v56((char *)v34, 0, 1, v29);
        v6 = v62;
        v35 = (uint64_t)&v62[*(int *)(v64 + 48)];
        sub_100007C8C(v57, (uint64_t)v62, &qword_100116E28);
        sub_100007C8C(v34, v35, &qword_100116E28);
        if (v32((uint64_t)v6, 1, v29) == 1)
        {
          sub_10000526C(v34, &qword_100116E28);
          if (v32(v35, 1, v29) == 1)
            goto LABEL_13;
        }
        else
        {
          v37 = v59;
          sub_100007C8C((uint64_t)v6, v59, &qword_100116E28);
          if (v32(v35, 1, v29) != 1)
          {
            v44 = v65;
            v45 = v60;
            (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v60, v35, v29);
            v46 = sub_100004864(&qword_100118C30, (uint64_t (*)(uint64_t))&type metadata accessor for IntentSystemContext.Source, (uint64_t)&protocol conformance descriptor for IntentSystemContext.Source);
            v47 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v45, v29, v46);
            v48 = v37;
            v49 = *(void (**)(char *, uint64_t))(v44 + 8);
            v49(v45, v29);
            sub_10000526C((uint64_t)v63, &qword_100116E28);
            v49((char *)v48, v29);
            v36 = sub_10000526C((uint64_t)v6, &qword_100116E28);
            if ((v47 & 1) != 0)
              goto LABEL_20;
LABEL_21:
            (*(void (**)(char *, uint64_t))(v21 + 8))(v33, v20);
            return 0;
          }
          sub_10000526C(v34, &qword_100116E28);
          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v37, v29);
        }
        sub_10000526C((uint64_t)v6, &qword_100118C28);
        goto LABEL_21;
      }
      sub_10000526C((uint64_t)v16, &qword_100116E28);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v14, v29);
    }
    sub_10000526C((uint64_t)v6, &qword_100118C28);
    v33 = v58;
    goto LABEL_11;
  }
  sub_10000526C((uint64_t)v19, &qword_100117528);
  return 0;
}

uint64_t sub_1000463F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_subscriptions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_subscriptions, v8, 1, 0);
  v2 = *v1;
  v3 = swift_bridgeObjectRetain(*v1);
  sub_100045938(v3);
  swift_bridgeObjectRelease(v2);
  v4 = *v1;
  *v1 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v4);
  swift_release(*(_QWORD *)(v0 + 16));
  sub_10000526C(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin, &qword_100116E28);
  v5 = v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer__result;
  v6 = sub_100004F7C(&qword_100116DD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_activity));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_spectralOutputObservers));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind
                                      + 8));
  swift_bridgeObjectRelease(*v1);

  sub_10000526C(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_activityStartDate, &qword_100117528);
  return v0;
}

uint64_t sub_10004651C()
{
  uint64_t v0;

  sub_1000463F0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100046540()
{
  return type metadata accessor for MusicRecognizer(0);
}

uint64_t type metadata accessor for MusicRecognizer(uint64_t a1)
{
  uint64_t result;

  result = qword_100118A68;
  if (!qword_100118A68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MusicRecognizer);
  return result;
}

void sub_100046584(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[11];

  v8[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[1] = &unk_1000D3AE8;
  sub_1000466EC(319, &qword_100118A78, (uint64_t (*)(uint64_t))&type metadata accessor for IntentSystemContext.Source);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100046694(319);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = &unk_1000D3AE8;
      v8[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v8[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[7] = &unk_1000D3B00;
      v8[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
      sub_1000466EC(319, (unint64_t *)&unk_100118A90, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
      if (v7 <= 0x3F)
      {
        v8[10] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 11, v8, a1 + 80);
      }
    }
  }
}

void sub_100046694(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118A80)
  {
    v2 = sub_1000050C8(&qword_100118A88);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118A80);
  }
}

void sub_1000466EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void *sub_100046738()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_100046744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD v29[2];
  char v30;

  v1 = v0;
  v2 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v2);
  v4 = (char *)&v29[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004F7C(&qword_100116DD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v1 + 24) = 0;
  v9 = v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
  v10 = type metadata accessor for IntentSystemContext.Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer__result;
  v29[0] = 0;
  v29[1] = 0;
  v30 = -1;
  v12 = sub_100004F7C(&qword_100118A88);
  Published.init(initialValue:)(v29, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11, v8, v5);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_isRetryAttempt) = 0;
  v13 = OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_activity;
  v14 = type metadata accessor for MusicRecognitionActivity();
  v15 = (_QWORD *)swift_allocObject(v14, 40, 7);
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = 0;
  *(_QWORD *)(v1 + v13) = v15;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_spectralOutputObservers) = &_swiftEmptyArrayStorage;
  v16 = (_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind);
  *v16 = 0xD00000000000003ALL;
  v16[1] = 0x80000001000DA5D0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_subscriptions) = &_swiftEmptySetSingleton;
  v17 = OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_runningBoardAssertion;
  *(_QWORD *)(v1 + v17) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RunningBoardAssertion()), "init");
  v18 = v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_activityStartDate;
  v19 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = type metadata accessor for SHManagedSession(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)(v1 + 16) = SHManagedSession.init()();
  v21 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v4, 1, 1, v21);
  v22 = swift_allocObject(&unk_10010A4B8, 24, 7);
  swift_weakInit(v22 + 16, v1);
  type metadata accessor for MainActor(0);
  v23 = swift_retain(v22);
  v24 = static MainActor.shared.getter(v23);
  v25 = (_QWORD *)swift_allocObject(&unk_10010A4E0, 40, 7);
  v25[2] = v24;
  v25[3] = &protocol witness table for MainActor;
  v25[4] = v22;
  swift_release(v22);
  v26 = sub_1000A9F18((uint64_t)v4, (uint64_t)&unk_100118B68, (uint64_t)v25);
  swift_release(v26);
  sub_100046A18();
  return v1;
}

uint64_t sub_100046A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v24[3];

  v1 = v0;
  v2 = sub_100004F7C(&qword_100118B70);
  __chkstk_darwin(v2);
  v4 = (char *)&v24[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_100118B78);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100010498(0, &qword_100118B80, NSDistributedNotificationCenter_ptr);
  v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(v13), "defaultCenter");
  if (qword_100115ED8 != -1)
    swift_once(&qword_100115ED8, sub_100045BD8);
  NSNotificationCenter.publisher(for:object:)(qword_100124508, 0);

  v15 = sub_100010498(0, (unint64_t *)&qword_100118B88, OS_dispatch_queue_ptr);
  v24[0] = (id)static OS_dispatch_queue.main.getter();
  v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
  v17 = sub_100004864(&qword_100118B90, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v18 = sub_100048EE8();
  Publisher.receive<A>(on:options:)(v24, v4, v5, v15, v17, v18);
  sub_10000526C((uint64_t)v4, &qword_100118B70);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = sub_100048F48();
  swift_retain(v1);
  v20 = Publisher<>.sink(receiveValue:)(sub_100048F40, v1, v9, v19);
  swift_release(v1);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v21 = v1 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_subscriptions;
  swift_beginAccess(v21, v24, 33, 0);
  AnyCancellable.store(in:)(v21);
  swift_endAccess(v24);
  return swift_release(v20);
}

uint64_t sub_100046CB4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 264) = a2;
  *(_QWORD *)(v3 + 272) = v2;
  *(_BYTE *)(v3 + 161) = a1;
  v4 = sub_100004F7C(&qword_100116D98);
  *(_QWORD *)(v3 + 280) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004F7C(&qword_100117528);
  *(_QWORD *)(v3 + 288) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100116E28);
  *(_QWORD *)(v3 + 296) = v6;
  *(_QWORD *)(v3 + 304) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 312) = v7;
  *(_QWORD *)(v3 + 320) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  *(_QWORD *)(v3 + 328) = v8;
  *(_QWORD *)(v3 + 336) = v9;
  return swift_task_switch(sub_100046D98, v8, v9);
}

uint64_t sub_100046D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  NSString v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 272);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_isRetryAttempt) = *(_BYTE *)(v0 + 161);
  v3 = OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
  *(_QWORD *)(v0 + 344) = OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
  v4 = v2 + v3;
  swift_beginAccess(v2 + v3, v0 + 96, 33, 0);
  sub_100049AD0(v1, v4);
  v5 = swift_endAccess(v0 + 96);
  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v2 + 16);
  v6 = SHManagedSession.state.getter(v5);
  if ((static SHManagedSession.State.== infix(_:_:)(v6, 2) & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 320));
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000B5E8(v7, (uint64_t)qword_100124478);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Attempting to start recognition when already running", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    type metadata accessor for SHError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 248) = 202;
    v14 = sub_100004F7C(&qword_100118BF8);
    inited = swift_initStackObject(v14, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1000D1CC0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSDebugDescriptionErrorKey);
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000054;
    *(_QWORD *)(inited + 56) = 0x80000001000DA6A0;
    v17 = sub_1000B3F60(inited);
    v18 = sub_100004864(&qword_1001164C0, (uint64_t (*)(uint64_t))type metadata accessor for SHError, (uint64_t)&unk_1000D1484);
    _BridgedStoredNSError.init(_:userInfo:)(v0 + 248, v17, v13, v18);
    v19 = *(_QWORD *)(v0 + 240);
    v20 = objc_msgSend(objc_allocWithZone((Class)SHSignature), "init");
    v22 = *(_QWORD *)(v0 + 280);
    v21 = *(_QWORD *)(v0 + 288);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(uint64_t, id, uint64_t))(v0 + 8))(v19, v20, 2);
  }
  else
  {
    v24 = *(_BYTE *)(v0 + 161);
    *(_QWORD *)(v0 + 360) = *(_QWORD *)(*(_QWORD *)(v0 + 272)
                                      + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_runningBoardAssertion);
    sub_1000ADDAC();
    if ((v24 & 1) != 0)
    {
      if (qword_100115DD8 != -1)
        swift_once(&qword_100115DD8, sub_10000C418);
      v25 = *(_QWORD *)(v0 + 272);
      v26 = type metadata accessor for Logger(0);
      sub_10000B5E8(v26, (uint64_t)qword_100124478);
      v27 = swift_retain_n(v25, 2);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = *(_QWORD *)(v0 + 304);
        v51 = *(_QWORD *)(v0 + 296);
        v52 = *(_QWORD *)(v0 + 272);
        v31 = v52 + *(_QWORD *)(v0 + 344);
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        v53 = v33;
        *(_DWORD *)v32 = 136315138;
        sub_100007C8C(v31, v30, &qword_100116E28);
        v34 = Optional.debugDescription.getter(v51);
        v36 = v35;
        sub_10000526C(v30, &qword_100116E28);
        *(_QWORD *)(v0 + 256) = sub_1000529F4(v34, v36, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v32 + 4, v32 + 12);
        swift_bridgeObjectRelease(v36);
        swift_release_n(v52, 2);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Starting recognition from source %s", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);
      }
      else
      {
        swift_release_n(*(_QWORD *)(v0 + 272), 2);
      }

      if (qword_100116378 != -1)
        swift_once(&qword_100116378, sub_1000BE1F0);
      v38 = (void *)qword_10011CE10;
      if (qword_10011CE10)
      {
        v39 = String._bridgeToObjectiveC()();
        objc_msgSend(v38, "setBool:forKey:", 1, v39);

      }
      v40 = *(_QWORD *)(v0 + 272);
      *(_QWORD *)(v0 + 376) = type metadata accessor for ControlCenter(0);
      v42 = static ControlCenter.shared.getter(v41);
      v43 = v40 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind;
      v44 = *(_QWORD *)(v40 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind);
      *(_QWORD *)(v0 + 384) = v44;
      v45 = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v0 + 392) = v45;
      dispatch thunk of ControlCenter.reloadControls(ofKind:)(v44, v45);
      swift_release(v42);
      sub_100047C98();
      KeyPath = swift_getKeyPath(&unk_1000D3B68, v46);
      v49 = swift_getKeyPath(&unk_1000D3B90, v48);
      *(_QWORD *)(v0 + 200) = 0;
      *(_QWORD *)(v0 + 192) = 0;
      *(_BYTE *)(v0 + 208) = -1;
      swift_retain(v40);
      static Published.subscript.setter(v0 + 192, v40, KeyPath, v49);
      v50 = (_QWORD *)swift_task_alloc(dword_1001193CC);
      *(_QWORD *)(v0 + 400) = v50;
      *v50 = v0;
      v50[1] = sub_100047704;
      return sub_100055F40();
    }
    else
    {
      v37 = (_QWORD *)swift_task_alloc(dword_10011938C);
      *(_QWORD *)(v0 + 368) = v37;
      *v37 = v0;
      v37[1] = sub_10004738C;
      return sub_100055B08();
    }
  }
}

uint64_t sub_10004738C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 368));
  return swift_task_switch(sub_1000473D8, *(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 336));
}

uint64_t sub_1000473D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  NSString v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = type metadata accessor for Logger(0);
  sub_10000B5E8(v2, (uint64_t)qword_100124478);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 304);
    v27 = *(_QWORD *)(v0 + 296);
    v28 = *(_QWORD *)(v0 + 272);
    v7 = v28 + *(_QWORD *)(v0 + 344);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v29 = v9;
    *(_DWORD *)v8 = 136315138;
    sub_100007C8C(v7, v6, &qword_100116E28);
    v10 = Optional.debugDescription.getter(v27);
    v12 = v11;
    sub_10000526C(v6, &qword_100116E28);
    *(_QWORD *)(v0 + 256) = sub_1000529F4(v10, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    swift_release_n(v28, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting recognition from source %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 272), 2);
  }

  if (qword_100116378 != -1)
    swift_once(&qword_100116378, sub_1000BE1F0);
  v13 = (void *)qword_10011CE10;
  if (qword_10011CE10)
  {
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setBool:forKey:", 1, v14);

  }
  v15 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 376) = type metadata accessor for ControlCenter(0);
  v17 = static ControlCenter.shared.getter(v16);
  v18 = v15 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind;
  v19 = *(_QWORD *)(v15 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_musicRecognitionControlToggleKind);
  *(_QWORD *)(v0 + 384) = v19;
  v20 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v0 + 392) = v20;
  dispatch thunk of ControlCenter.reloadControls(ofKind:)(v19, v20);
  swift_release(v17);
  sub_100047C98();
  KeyPath = swift_getKeyPath(&unk_1000D3B68, v21);
  v24 = swift_getKeyPath(&unk_1000D3B90, v23);
  *(_QWORD *)(v0 + 200) = 0;
  *(_QWORD *)(v0 + 192) = 0;
  *(_BYTE *)(v0 + 208) = -1;
  swift_retain(v15);
  static Published.subscript.setter(v0 + 192, v15, KeyPath, v24);
  v25 = (_QWORD *)swift_task_alloc(dword_1001193CC);
  *(_QWORD *)(v0 + 400) = v25;
  *v25 = v0;
  v25[1] = sub_100047704;
  return sub_100055F40();
}

uint64_t sub_100047704()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 400));
  return swift_task_switch(sub_100047750, *(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 336));
}

uint64_t sub_100047750(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v1[36];
  v3 = v1[34];
  Date.init()(a1);
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 0, 1, v4);
  v5 = v3 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_activityStartDate;
  swift_beginAccess(v5, v1 + 15, 33, 0);
  sub_100049B20(v2, v5, &qword_100117528);
  swift_endAccess(v1 + 15);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to SHManagedSession.result()[1]);
  v1[51] = v6;
  *v6 = v1;
  v6[1] = sub_100047818;
  return SHManagedSession.result()();
}

uint64_t sub_100047818(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 408);
  *(_QWORD *)(v4 + 416) = a1;
  *(_QWORD *)(v4 + 424) = a2;
  *(_BYTE *)(v4 + 162) = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100047874, *(_QWORD *)(v4 + 328), *(_QWORD *)(v4 + 336));
}

uint64_t sub_100047874(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = *(_BYTE *)(v2 + 162);
  v5 = *(_QWORD *)(v2 + 416);
  v4 = *(_QWORD *)(v2 + 424);
  v6 = *(_QWORD *)(v2 + 272);
  KeyPath = swift_getKeyPath(&unk_1000D3B68, a2);
  v9 = swift_getKeyPath(&unk_1000D3B90, v8);
  *(_QWORD *)(v2 + 144) = v5;
  *(_QWORD *)(v2 + 152) = v4;
  *(_BYTE *)(v2 + 160) = v3;
  swift_retain(v6);
  static Published.subscript.setter(v2 + 144, v6, KeyPath, v9);
  v10 = (_QWORD *)swift_task_alloc(dword_100118BE4);
  *(_QWORD *)(v2 + 432) = v10;
  *v10 = v2;
  v10[1] = sub_10004792C;
  return sub_100047EF4();
}

uint64_t sub_10004792C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 432));
  return swift_task_switch(sub_100047978, *(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 336));
}

void sub_100047978()
{
  uint64_t v0;
  __n128 v1;
  void *v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = swift_release(*(_QWORD *)(v0 + 320));
  v2 = (void *)qword_10011CE10;
  if (qword_10011CE10)
  {
    v3 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setBool:forKey:", 0, v3);

  }
  v5 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 392);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = static ControlCenter.shared.getter(v1);
  dispatch thunk of ControlCenter.reloadControls(ofKind:)(v5, v4);
  swift_release(v7);
  if (*(_BYTE *)(v6 + 24) != 1)
    goto LABEL_19;
  v9 = *(_QWORD *)(v0 + 272);
  KeyPath = swift_getKeyPath(&unk_1000D3B68, v8);
  v12 = swift_getKeyPath(&unk_1000D3B90, v11);
  static Published.subscript.getter((_QWORD *)(v0 + 216), v9, KeyPath, v12);
  swift_release(v12);
  *(_QWORD *)&v13 = swift_release(KeyPath).n128_u64[0];
  v14 = *(unsigned __int8 *)(v0 + 232);
  if (v14 == 255)
    goto LABEL_19;
  v16 = *(void **)(v0 + 216);
  v15 = *(void **)(v0 + 224);
  if (*(_BYTE *)(v0 + 232))
  {
    v28 = *(void **)(v0 + 216);
    v29 = *(void **)(v0 + 224);
LABEL_18:
    sub_1000100FC(v28, v29, v14);
    goto LABEL_19;
  }
  v17 = objc_msgSend(*(id *)(v0 + 216), "mediaItems", v13);
  v18 = sub_100010498(0, (unint64_t *)&qword_1001175E0, SHMatchedMediaItem_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if (!((unint64_t)v19 >> 62))
  {
    if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_8;
    goto LABEL_17;
  }
  if (v19 < 0)
    v30 = v19;
  else
    v30 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v19);
  if (!v31)
  {
LABEL_17:
    swift_bridgeObjectRelease(v19);
    v28 = v16;
    v29 = v15;
    LOBYTE(v14) = 0;
    goto LABEL_18;
  }
LABEL_8:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v19 + 32);
LABEL_11:
    v21 = v20;
    v22 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease(v19);
    v23 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
    v24 = v21;
    v25 = static MainActor.shared.getter(v24);
    v26 = (_QWORD *)swift_allocObject(&unk_10010A530, 40, 7);
    v26[2] = v25;
    v26[3] = &protocol witness table for MainActor;
    v26[4] = v24;
    v27 = sub_1000A9F18(v22, (uint64_t)&unk_100118BF0, (uint64_t)v26);
    sub_1000100FC(v16, v15, 0);

    swift_release(v27);
LABEL_19:
    v32 = *(_QWORD *)(v0 + 272);
    sub_1000AE2AC();
    v34 = swift_getKeyPath(&unk_1000D3B68, v33);
    v36 = swift_getKeyPath(&unk_1000D3B90, v35);
    static Published.subscript.getter((_QWORD *)(v0 + 168), v32, v34, v36);
    swift_release(v36);
    swift_release(v34);
    v38 = *(_QWORD *)(v0 + 168);
    v37 = *(_QWORD *)(v0 + 176);
    v40 = *(_QWORD *)(v0 + 280);
    v39 = *(_QWORD *)(v0 + 288);
    v41 = *(unsigned __int8 *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v38, v37, v41);
    return;
  }
  __break(1u);
}

uint64_t sub_100047C98()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v16[8];
  char v17[8];
  _BYTE v18[24];

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_spectralOutputObservers);
  swift_beginAccess(v1, v18, 33, 0);
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(*v1);
    v4 = 0;
    v5 = 40;
    while (1)
    {
      sub_100007C8C(v2 + v5 - 8, (uint64_t)v17, &qword_100116DB8);
      Strong = swift_unknownObjectWeakLoadStrong(v17);
      swift_unknownObjectRelease(Strong);
      sub_10000526C((uint64_t)v17, &qword_100116DB8);
      if (!Strong)
        break;
      ++v4;
      v5 += 8;
      if (v3 == v4)
      {
        result = swift_bridgeObjectRelease(v2);
        v8 = *(_QWORD *)(*v1 + 16);
        goto LABEL_10;
      }
    }
    result = swift_bridgeObjectRelease(v2);
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_37;
    v9 = *v1;
    v10 = *(_QWORD *)(*v1 + 16);
    if (v8 != v10)
    {
      v11 = v4 + 1;
      while (v11 < v10)
      {
        sub_100007C8C(v9 + v5, (uint64_t)v17, &qword_100116DB8);
        v12 = swift_unknownObjectWeakLoadStrong(v17);
        swift_unknownObjectRelease(v12);
        result = sub_10000526C((uint64_t)v17, &qword_100116DB8);
        if (v12)
        {
          if (v11 != v4)
          {
            if ((v4 & 0x8000000000000000) != 0)
              goto LABEL_31;
            v13 = *v1;
            v14 = *(_QWORD *)(*v1 + 16);
            if (v4 >= v14)
              goto LABEL_32;
            result = sub_100007C8C(v13 + 8 * v4 + 32, (uint64_t)v17, &qword_100116DB8);
            if (v11 >= v14)
              goto LABEL_33;
            sub_100007C8C(v13 + v5, (uint64_t)v16, &qword_100116DB8);
            result = swift_isUniquelyReferenced_nonNull_native(v13);
            *v1 = v13;
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_100049820(v13);
              v13 = result;
              *v1 = result;
            }
            if (v4 >= *(_QWORD *)(v13 + 16))
              goto LABEL_34;
            result = sub_100049B20((uint64_t)v16, v13 + 8 * v4 + 32, &qword_100116DB8);
            if (v11 >= *(_QWORD *)(*v1 + 16))
              goto LABEL_35;
            result = sub_100049B20((uint64_t)v17, *v1 + v5, &qword_100116DB8);
          }
          if (__OFADD__(v4++, 1))
            goto LABEL_30;
        }
        v8 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_29;
        v9 = *v1;
        v10 = *(_QWORD *)(*v1 + 16);
        ++v11;
        v5 += 8;
        if (v8 == v10)
          goto LABEL_9;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_9:
    v3 = v4;
LABEL_10:
    if (v8 >= v3)
      goto LABEL_11;
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    v8 = 0;
LABEL_11:
    sub_10004993C(v3, v8);
    return swift_endAccess(v18);
  }
  return result;
}

uint64_t sub_100047EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) = v0;
  v2 = sub_100004F7C(&qword_100116D98);
  *(_QWORD *)(v1 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100047F50, 0, 0);
}

uint64_t sub_100047F50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;

  v3 = *(_QWORD *)(v2 + 40);
  KeyPath = swift_getKeyPath(&unk_1000D3B68, a2);
  v6 = swift_getKeyPath(&unk_1000D3B90, v5);
  static Published.subscript.getter((_QWORD *)(v2 + 16), v3, KeyPath, v6);
  swift_release(v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 56) = v7;
  *(_QWORD *)(v2 + 64) = v8;
  v9 = *(unsigned __int8 *)(v2 + 32);
  *(_BYTE *)(v2 + 33) = v9;
  if (v9 == 255)
    goto LABEL_4;
  if (sub_100045D5C())
  {
    v11 = *(_QWORD *)(v2 + 40);
    v10 = *(_QWORD *)(v2 + 48);
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
    v13 = swift_allocObject(&unk_10010A558, 57, 7);
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = v11;
    *(_QWORD *)(v13 + 40) = v7;
    *(_QWORD *)(v13 + 48) = v8;
    *(_BYTE *)(v13 + 56) = v9;
    swift_retain(v11);
    v14 = sub_1000A9F18(v10, (uint64_t)&unk_100118C08, v13);
    swift_release(v14);
LABEL_4:
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  v16 = (_QWORD *)swift_task_alloc(dword_1001193AC);
  *(_QWORD *)(v2 + 72) = v16;
  *v16 = v2;
  v16[1] = sub_1000480C4;
  return sub_100056730(v7, v8, v9);
}

uint64_t sub_1000480C4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_100048118, 0, 0);
}

uint64_t sub_100048118()
{
  uint64_t v0;

  sub_1000100FC(*(void **)(v0 + 56), *(void **)(v0 + 64), *(_BYTE *)(v0 + 33));
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[3] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[4] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[5] = v6;
  v4[6] = v7;
  return swift_task_switch(sub_1000481C0, v6, v7);
}

uint64_t sub_1000481C0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = (void *)v0[3];
  type metadata accessor for SHLibrary(0);
  v0[7] = static SHLibrary.default.getter();
  v2 = sub_100004F7C(&qword_100116D90);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000D3AA0;
  *(_QWORD *)(v3 + 32) = v1;
  v8 = v3;
  specialized Array._endMutation()(v3);
  v0[8] = v8;
  v4 = async function pointer to SHLibrary.addItems(_:)[1];
  v5 = v1;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[9] = v6;
  *v6 = v0;
  v6[1] = sub_100048280;
  return SHLibrary.addItems(_:)(v8);
}

uint64_t sub_100048280()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_100048324;
  }
  else
  {
    v7 = v2[7];
    swift_bridgeObjectRelease(v2[8]);
    swift_release(v7);
    v4 = v2[5];
    v5 = v2[6];
    v6 = sub_1000482F4;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1000482F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(v2);
  swift_release(v1);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = type metadata accessor for Logger(0);
  sub_10000B5E8(v4, (uint64_t)qword_100124478);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 80);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to add track to library %@", v10, 0xCu);
    v13 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004850C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v7 + 80) = a7;
  *(_QWORD *)(v7 + 24) = a5;
  *(_QWORD *)(v7 + 32) = a6;
  *(_QWORD *)(v7 + 16) = a4;
  v8 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v7 + 40) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 48) = v9;
  *(_QWORD *)(v7 + 56) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100048574, 0, 0);
}

uint64_t sub_100048574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.seconds(_:)(0.5);
  v3 = v2;
  ContinuousClock.init()();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100118C10 + dword_100118C10);
  v4 = (_QWORD *)swift_task_alloc(unk_100118C14);
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = sub_100048608;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_100048608()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 64));
  v4 = v2[6];
  v3 = v2[7];
  v5 = v2[5];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_100049FD0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = sub_1000486A0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000486A0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1001193AC);
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_100048700;
  return sub_100056730(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 80));
}

uint64_t sub_100048700()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 56);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100048754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[10] = a4;
  v5 = sub_100004F7C(&qword_100118BC8);
  v4[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[12] = v6;
  v4[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_100118BD0);
  v4[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[15] = v8;
  v4[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v4[17] = v9;
  v4[18] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v4[19] = v10;
  v4[20] = v11;
  return swift_task_switch(sub_10004881C, v10, v11);
}

uint64_t sub_10004881C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 80) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 168) = Strong;
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    SHManagedSession.spectralOutput.getter();
    AsyncStream.makeAsyncIterator()(v6);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
    v8 = OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_spectralOutputObservers;
    *(_QWORD *)(v0 + 176) = OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_spectralOutputObservers;
    v9 = swift_beginAccess(v5 + v8, v0 + 40, 0, 0);
    v10 = static MainActor.shared.getter(v9);
    *(_QWORD *)(v0 + 184) = v10;
    v11 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 192) = v11;
    *v11 = v0;
    v11[1] = sub_100048970;
    return AsyncStream.Iterator.next(isolation:)(v0 + 64, v10, &protocol witness table for MainActor, *(_QWORD *)(v0 + 112));
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100048970()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*v0 + 192));
  swift_release(v2);
  return swift_task_switch(sub_1000489C4, *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
}

uint64_t sub_1000489C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *Strong;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = v0 + 64;
  v2 = *(_QWORD *)(v0 + 64);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 168);
    v3 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v4 + v3);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v18 = *(_QWORD *)(v4 + v3);
      v7 = v0 + 72;
      v8 = v5 + 32;
      swift_bridgeObjectRetain(v5);
      do
      {
        sub_100007C8C(v8, v7, &qword_100116DB8);
        Strong = (void *)swift_unknownObjectWeakLoadStrong(v7);
        sub_10000526C(v7, &qword_100116DB8);
        if (Strong)
        {
          isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(Strong, "receivedWithSpectralOutput:", isa);
          swift_unknownObjectRelease(Strong);

        }
        v8 += 8;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease(v18);
      v1 = v0 + 64;
    }
    v15 = swift_bridgeObjectRelease(v2);
    v16 = static MainActor.shared.getter(v15);
    *(_QWORD *)(v0 + 184) = v16;
    v17 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 192) = v17;
    *v17 = v0;
    v17[1] = sub_100048970;
    return AsyncStream.Iterator.next(isolation:)(v1, v16, &protocol witness table for MainActor, *(_QWORD *)(v0 + 112));
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 168);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    swift_release(v11);
    v12 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 104);
    swift_release(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100048B78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject(&unk_10010A4B8, 24, 7);
  swift_weakInit(v7 + 16, a2);
  type metadata accessor for MainActor(0);
  v8 = swift_retain(v7);
  v9 = static MainActor.shared.getter(v8);
  v10 = (_QWORD *)swift_allocObject(&unk_10010A508, 40, 7);
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v7;
  swift_release(v7);
  v11 = sub_1000AA064((uint64_t)v5, (uint64_t)&unk_100118BB0, (uint64_t)v10);
  return swift_release(v11);
}

uint64_t sub_100048C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a1;
  v4[6] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[8] = v6;
  v4[9] = v7;
  return swift_task_switch(sub_100048CF0, v6, v7);
}

uint64_t sub_100048CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  __n128 v5;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 80) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_100118BBC);
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = sub_100048D94;
    return sub_1000455FC();
  }
  else
  {
    v5 = swift_release(*(_QWORD *)(v0 + 56));
    **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 80) == 0;
    return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
  }
}

uint64_t sub_100048D94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v2);
  return swift_task_switch(sub_100048DE8, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100048DE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 80) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048E2C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100048E54()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100048E7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100118B64);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100010C20;
  return sub_100048754(a1, v4, v5, v6);
}

unint64_t sub_100048EE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118B98;
  if (!qword_100118B98)
  {
    v1 = sub_100010498(255, (unint64_t *)&qword_100118B88, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_100118B98);
  }
  return result;
}

uint64_t sub_100048F40(uint64_t a1)
{
  uint64_t v1;

  return sub_100048B78(a1, v1);
}

unint64_t sub_100048F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118BA0;
  if (!qword_100118BA0)
  {
    v1 = sub_1000050C8(&qword_100118B78);
    result = swift_getWitnessTable(&protocol conformance descriptor for Publishers.ReceiveOn<A, B>, v1);
    atomic_store(result, &qword_100118BA0);
  }
  return result;
}

uint64_t sub_100048F98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100118BAC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100010C20;
  return sub_100048C84(a1, v4, v5, v6);
}

uint64_t sub_100049004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1000490A8, 0, 0);
}

uint64_t sub_1000490A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100004864(&qword_100118C18, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100004864(&qword_100118C20, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1000491C0;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1000491C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_10004926C, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10004926C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char *sub_1000492A8(char *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004F7C(&qword_100118BC0);
      v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v11 < a4 || (unint64_t)v14 >= a4 + 32 + 8 * v8)
        {
          v16 = sub_100004F7C(&qword_100116DB8);
          swift_arrayInitWithTakeFrontToBack(v14, a4 + 32, v8, v16);
        }
        else if (v11 != (char *)a4)
        {
          v17 = sub_100004F7C(&qword_100116DB8);
          swift_arrayInitWithTakeBackToFront(v14, a4 + 32, v8, v17);
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    sub_100049834(0, v8, (unint64_t)v14, a4);
LABEL_26:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000493FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004F7C(&qword_100118C48);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100049CE0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100049520(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100004F7C(&qword_100118C50);
  v11 = *(_QWORD *)(type metadata accessor for ContextMenuItemSection(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for ContextMenuItemSection(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20, v22, v8, v18);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100049DD4(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_100049728(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100004F7C(&qword_100118C40);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100049EEC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100049820(unint64_t a1)
{
  return sub_1000492A8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100049834(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100004F7C(&qword_100116DB8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10004993C(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > *((_QWORD *)v4 + 3) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1000492A8(isUniquelyReferenced_nonNull_native, v11, 1, (unint64_t)v4);
  }
  v12 = sub_100004F7C(&qword_100116DB8);
  result = swift_arrayDestroy(&v4[8 * a1 + 32], v7, v12);
  if (!v7)
    goto LABEL_22;
  v14 = *((_QWORD *)v4 + 2);
  v15 = v14 - a2;
  if (__OFSUB__(v14, a2))
    goto LABEL_28;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (uint64_t)&v4[8 * a2 + 32];
    if (a1 < a2 || (unint64_t)&v4[8 * a1 + 32] >= v16 + 8 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(&v4[8 * a1 + 32], v16, v15, v12);
    }
    else if (a1 != a2)
    {
      result = swift_arrayInitWithTakeBackToFront(&v4[8 * a1 + 32], v16, v15, v12);
    }
    v17 = *((_QWORD *)v4 + 2);
    v18 = __OFADD__(v17, v8);
    v19 = v17 - v7;
    if (!v18)
    {
      *((_QWORD *)v4 + 2) = v19;
LABEL_22:
      *v2 = v4;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  v20 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100049AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100116E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100049B20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004F7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100049B64()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100049B90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100118BEC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000101B8;
  return sub_100048154(a1, v4, v5, v6);
}

uint64_t sub_100049BFC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100010110(*(void **)(v0 + 40), *(void **)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100049C34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc(dword_100118C04);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100010C20;
  return sub_10004850C(a1, v4, v5, v6, v7, v8, v9);
}

id sub_100049CC4(id result, void *a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return sub_10001DDD4(result, a2, a3);
  return result;
}

uint64_t sub_100049CD8(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100049CE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100049DD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for ContextMenuItemSection(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100049EEC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t destroy for LoadingView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for LoadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for LoadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for LoadingView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadingView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LoadingView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LoadingView()
{
  return &type metadata for LoadingView;
}

uint64_t sub_10004A190(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DDC18, 1);
}

uint64_t sub_10004A1A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = sub_100004F7C(&qword_100118C58);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = v0[1];
  v7 = *((unsigned __int8 *)v0 + 16);
  v8 = v0[3];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  ProgressView<>.init<>(_:)(v5, v6, v7, v8);
  if (qword_1001160F0 != -1)
    swift_once(&qword_1001160F0, sub_10008014C);
  v9 = qword_1001245F0;
  v10 = *(_QWORD *)algn_1001245F8;
  v11 = sub_10004A2AC();
  View.accessibilityIdentifier(_:)(v9, v10, v1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

unint64_t sub_10004A2AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118C60;
  if (!qword_100118C60)
  {
    v1 = sub_1000050C8(&qword_100118C58);
    result = swift_getWitnessTable(&protocol conformance descriptor for ProgressView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118C60);
  }
  return result;
}

unint64_t sub_10004A2FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118C68;
  if (!qword_100118C68)
  {
    v1 = sub_1000050C8((uint64_t *)&unk_100118C70);
    sub_10004A2AC();
    sub_10004A368();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100118C68);
  }
  return result;
}

unint64_t sub_10004A368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116570;
  if (!qword_100116570)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_100116570);
  }
  return result;
}

void sub_10004A3B0()
{
  qword_100118C80 = 0x636974617473;
  *(_QWORD *)algn_100118C88 = 0xE600000000000000;
}

void sub_10004A3D0()
{
  qword_100118C90 = 0x6E696E657473696CLL;
  *(_QWORD *)algn_100118C98 = 0xE900000000000067;
}

void sub_10004A3F8(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  objc_class *ObjectType;
  void *v12;
  char *v13;
  id v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  id v19;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v12 = (void *)objc_opt_self(NSBundle);
  v13 = v6;
  v14 = objc_msgSend(v12, "mainBundle");
  v15 = objc_allocWithZone((Class)BSUICAPackageView);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "initWithPackageName:inBundle:", v16, v14);

  if (v17)
  {
    *(_QWORD *)&v13[OBJC_IVAR____TtC16MusicRecognition22ListeningAccessoryView_listeningView] = v17;
    v18 = OBJC_IVAR____TtC16MusicRecognition22ListeningAccessoryView_imageView;
    *(_QWORD *)&v13[v18] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

    v20.receiver = v13;
    v20.super_class = ObjectType;
    v19 = objc_msgSendSuper2(&v20, "initWithFrame:", a1, a2, a3, a4);
    sub_10004A55C();

  }
  else
  {
    __break(1u);
  }
}

void sub_10004A55C()
{
  char *v0;
  void *v1;
  NSString v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  Class isa;

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition22ListeningAccessoryView_listeningView];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  if (qword_1001161C8 != -1)
    swift_once(&qword_1001161C8, sub_1000805C0);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setAccessibilityIdentifier:", v2);

  objc_msgSend(v1, "setClipsToBounds:", 1);
  objc_msgSend(v0, "addSubview:", v1);
  v3 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition22ListeningAccessoryView_imageView];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v3, "_setContinuousCornerRadius:", 4.0);
  objc_msgSend(v3, "setClipsToBounds:", 1);
  objc_msgSend(v0, "addSubview:", v3);
  v27 = (void *)objc_opt_self(NSLayoutConstraint);
  v4 = sub_100004F7C(&qword_100116D90);
  v5 = swift_allocObject(v4, 96, 7);
  *(_OWORD *)(v5 + 16) = xmmword_1000D2A70;
  v6 = objc_msgSend(v1, "centerXAnchor");
  v7 = objc_msgSend(v0, "centerXAnchor");
  v8 = objc_msgSend(v6, "constraintEqualToAnchor:", v7);

  *(_QWORD *)(v5 + 32) = v8;
  v9 = objc_msgSend(v1, "centerYAnchor");
  v10 = objc_msgSend(v0, "centerYAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:", v10);

  *(_QWORD *)(v5 + 40) = v11;
  v12 = objc_msgSend(v1, "heightAnchor");
  v13 = objc_msgSend(v12, "constraintEqualToConstant:", 24.0);

  *(_QWORD *)(v5 + 48) = v13;
  v14 = objc_msgSend(v1, "widthAnchor");
  v15 = objc_msgSend(v14, "constraintEqualToConstant:", 24.0);

  *(_QWORD *)(v5 + 56) = v15;
  v16 = objc_msgSend(v3, "centerXAnchor");
  v17 = objc_msgSend(v0, "centerXAnchor");
  v18 = objc_msgSend(v16, "constraintEqualToAnchor:", v17);

  *(_QWORD *)(v5 + 64) = v18;
  v19 = objc_msgSend(v3, "centerYAnchor");
  v20 = objc_msgSend(v0, "centerYAnchor");
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v20, 0.5);

  *(_QWORD *)(v5 + 72) = v21;
  v22 = objc_msgSend(v3, "heightAnchor");
  v23 = objc_msgSend(v22, "constraintEqualToConstant:", 20.5);

  *(_QWORD *)(v5 + 80) = v23;
  v24 = objc_msgSend(v3, "widthAnchor");
  v25 = objc_msgSend(v24, "constraintEqualToConstant:", 20.5);

  *(_QWORD *)(v5 + 88) = v25;
  specialized Array._endMutation()(v26);
  sub_10001FC14();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v27, "activateConstraints:", isa);

}

void sub_10004A9B0(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  objc_class *ObjectType;
  void *v6;
  char *v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  objc_super v15;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v6 = (void *)objc_opt_self(NSBundle);
  v7 = v3;
  v8 = objc_msgSend(v6, "mainBundle");
  v9 = objc_allocWithZone((Class)BSUICAPackageView);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "initWithPackageName:inBundle:", v10, v8);

  if (v11)
  {
    *(_QWORD *)&v7[OBJC_IVAR____TtC16MusicRecognition22ListeningAccessoryView_listeningView] = v11;
    v12 = OBJC_IVAR____TtC16MusicRecognition22ListeningAccessoryView_imageView;
    *(_QWORD *)&v7[v12] = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

    v15.receiver = v7;
    v15.super_class = ObjectType;
    v13 = objc_msgSendSuper2(&v15, "initWithCoder:", a1);
    if (v13)
    {
      v14 = v13;
      sub_10004A55C();

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for ListeningAccessoryView()
{
  return objc_opt_self(_TtC16MusicRecognition22ListeningAccessoryView);
}

uint64_t sub_10004AB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for URL(0);
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v5[6] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v5[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v5[9] = v10;
  v5[10] = v11;
  return swift_task_switch(sub_10004AC40, v10, v11);
}

uint64_t sub_10004AC40()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  NSString v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;

  v1 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____TtC16MusicRecognition22ListeningAccessoryView_imageView);
  v2 = objc_msgSend(v1, "artworkURL");
  v3 = *(_QWORD *)(v0 + 56);
  if (v2)
  {
    v4 = v2;
    v6 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 32);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v2);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v5, v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v3, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v7) != 1)
    {
      sub_100007B24(*(_QWORD *)(v0 + 56));
      v8 = (_QWORD *)swift_task_alloc(dword_10011D844);
      *(_QWORD *)(v0 + 96) = v8;
      *v8 = v0;
      v8[1] = sub_10004AE44;
      return sub_1000C96A4();
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 56))(*(_QWORD *)(v0 + 56), 1, 1, *(_QWORD *)(v0 + 32));
  }
  v10 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_100007B24(v10);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v11);

  objc_msgSend(*(id *)(v0 + 88), "setImage:", v12);
  if (qword_1001161B0 != -1)
    swift_once(&qword_1001161B0, sub_100080534);
  v13 = *(void **)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setAccessibilityIdentifier:", v16);

  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AE44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_10004AE9C, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_10004AE9C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  v1 = *(void **)(v0 + 104);
  objc_msgSend(*(id *)(v0 + 88), "setImage:", v1, swift_release(*(_QWORD *)(v0 + 64)).n128_f64[0]);

  if (qword_1001161B0 != -1)
    swift_once(&qword_1001161B0, sub_100080534);
  v2 = *(void **)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setAccessibilityIdentifier:", v5);

  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004AF5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[2] = a1;
  v2 = type metadata accessor for URL(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URLRequest(0);
  v1[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[7] = v5;
  v1[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004AFE4, 0, 0);
}

uint64_t sub_10004AFE4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[5];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[4] + 16))(v1, v0[2], v0[3]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v1, 0, 60.0);
  v0[9] = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v2 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  v0[10] = v2;
  *v2 = v0;
  v2[1] = sub_10004B090;
  return NSURLSession.data(for:delegate:)(v0[8], 0);
}

uint64_t sub_10004B090(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)();

  v8 = *v4;
  v10 = *(void **)(*v4 + 72);
  v9 = *(_QWORD *)(*v4 + 80);
  *(_QWORD *)(*v4 + 88) = v3;
  swift_task_dealloc(v9);

  if (v3)
  {
    v11 = sub_10004B1D8;
  }
  else
  {

    *(_QWORD *)(v8 + 96) = a2;
    *(_QWORD *)(v8 + 104) = a1;
    v11 = sub_10004B11C;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_10004B11C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  id v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = objc_allocWithZone((Class)UIImage);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v7, "initWithData:", isa);
  sub_10004B228(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc(v3);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(id))(v0 + 8))(v9);
}

uint64_t sub_10004B1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B228(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_10004B26C()
{
  qword_100118CF8 = 0x6C632E656C707061;
  unk_100118D00 = 0xEF6C616369737361;
}

void sub_10004B29C()
{
  strcpy((char *)&qword_100118D08, "arrow.up.right");
  unk_100118D17 = -18;
}

void sub_10004B2CC()
{
  qword_100118D18 = 0x6C4320656C707041;
  unk_100118D20 = 0xEF6C616369737361;
}

uint64_t sub_10004B2FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 176) = a7;
  *(_QWORD *)(v8 + 184) = a8;
  *(_QWORD *)(v8 + 160) = a5;
  *(_QWORD *)(v8 + 168) = a6;
  *(_QWORD *)(v8 + 144) = a2;
  *(_QWORD *)(v8 + 152) = a4;
  *(_BYTE *)(v8 + 256) = a3;
  *(_QWORD *)(v8 + 136) = a1;
  v9 = type metadata accessor for URL(0);
  *(_QWORD *)(v8 + 192) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 200) = v10;
  *(_QWORD *)(v8 + 208) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100004F7C((uint64_t *)&unk_100118CE0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 216) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 224) = swift_task_alloc(v11);
  v12 = sub_100004F7C(&qword_100118670);
  *(_QWORD *)(v8 + 232) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_100118660);
  *(_QWORD *)(v8 + 240) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004B3E8, 0, 0);
}

uint64_t sub_10004B3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*(_BYTE *)(v0 + 256) == 1)
  {
    v1 = *(_QWORD *)(v0 + 160);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
    swift_bridgeObjectRelease(v1);
    v2 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v4 + *(int *)(type metadata accessor for StreamingServicesProvider(0) + 20)) = _swiftEmptyArrayStorage;
    sub_100007C8C(v3, v2, &qword_100118670);
    v5 = type metadata accessor for AnyAlbum(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v2, 1, v5) == 1)
    {
      v6 = *(_QWORD *)(v0 + 232);
      v7 = *(_QWORD *)(v0 + 240);
      v8 = *(_QWORD *)(v0 + 184);

      sub_10000526C(v8, &qword_100118670);
      sub_10000526C(v6, &qword_100118670);
      v9 = type metadata accessor for StreamingService(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
    }
    else
    {
      v16 = *(_QWORD *)(v0 + 224);
      v15 = *(_QWORD *)(v0 + 232);
      v17 = *(_QWORD *)(v0 + 216);
      v18 = *(_QWORD *)(v0 + 192);
      v19 = *(_QWORD *)(v0 + 200);
      v20 = (_QWORD *)(v15 + *(int *)(v5 + 20));
      v21 = v20[3];
      v22 = v20[4];
      sub_10000C9C8(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v22 + 56))(v21, v22);
      sub_10000B600(v15, type metadata accessor for AnyAlbum);
      sub_100007C8C(v16, v17, (uint64_t *)&unk_100118CE0);
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
      v24 = *(_QWORD **)(v0 + 240);
      if (v23 == 1)
      {
        v25 = type metadata accessor for StreamingService(0);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
      }
      else
      {
        v26 = *(_QWORD *)(v0 + 208);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 32))(v26, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
        sub_10004BB7C(v26, v24);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
      }
      v27 = *(_QWORD *)(v0 + 224);
      v28 = *(_QWORD *)(v0 + 184);

      sub_10000526C(v28, &qword_100118670);
      sub_10000526C(v27, (uint64_t *)&unk_100118CE0);
    }
    v29 = *(_QWORD *)(v0 + 232);
    v30 = *(_QWORD *)(v0 + 240);
    v32 = *(_QWORD *)(v0 + 216);
    v31 = *(_QWORD *)(v0 + 224);
    v33 = *(_QWORD *)(v0 + 208);
    sub_10004DB64(v30, *(_QWORD *)(v0 + 136));
    swift_task_dealloc(v30);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = v0 + 16;
    v11 = *(void **)(v0 + 144);
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10004B70C;
    v12 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v13 = (_QWORD *)(v0 + 80);
    v13[1] = 0x40000000;
    v13[2] = sub_10004BE5C;
    v13[3] = &unk_10010A688;
    v13[4] = v12;
    objc_msgSend(v11, "streamingProviderValuesWithCompletion:", v13);
    return swift_continuation_await(v10);
  }
}

uint64_t sub_10004B70C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 248) = v1;
  if (v1)
    v2 = sub_10004BAC4;
  else
    v2 = sub_10004B76C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004B76C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(void **)(v0 + 120);
  v6 = objc_msgSend(v5, "availableBundleIdentifiers");
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = v5;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v3);
  v9 = sub_10004D8FC(v7, v8, v2, v1, v4, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v1);

  swift_bridgeObjectRelease(v7);
  v41 = v9;
  swift_bridgeObjectRetain(v9);
  sub_10004C204(&v41);
  v10 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 160);

  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v11);
  v12 = v41;
  v13 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v15 + *(int *)(type metadata accessor for StreamingServicesProvider(0) + 20)) = v12;
  sub_100007C8C(v14, v13, &qword_100118670);
  v16 = type metadata accessor for AnyAlbum(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v13, 1, v16) == 1)
  {
    v17 = *(_QWORD *)(v0 + 232);
    v18 = *(_QWORD *)(v0 + 240);
    v19 = *(_QWORD *)(v0 + 184);

    sub_10000526C(v19, &qword_100118670);
    sub_10000526C(v17, &qword_100118670);
    v20 = type metadata accessor for StreamingService(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 232);
    v23 = *(_QWORD *)(v0 + 216);
    v24 = *(_QWORD *)(v0 + 192);
    v25 = *(_QWORD *)(v0 + 200);
    v26 = (_QWORD *)(v21 + *(int *)(v16 + 20));
    v27 = v26[3];
    v28 = v26[4];
    sub_10000C9C8(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 56))(v27, v28);
    sub_10000B600(v21, type metadata accessor for AnyAlbum);
    sub_100007C8C(v22, v23, (uint64_t *)&unk_100118CE0);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24);
    v30 = *(_QWORD **)(v0 + 240);
    if (v29 == 1)
    {
      v31 = type metadata accessor for StreamingService(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 208);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 32))(v32, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
      sub_10004BB7C(v32, v30);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
    }
    v33 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 184);

    sub_10000526C(v34, &qword_100118670);
    sub_10000526C(v33, (uint64_t *)&unk_100118CE0);
  }
  v35 = *(_QWORD *)(v0 + 232);
  v36 = *(_QWORD *)(v0 + 240);
  v38 = *(_QWORD *)(v0 + 216);
  v37 = *(_QWORD *)(v0 + 224);
  v39 = *(_QWORD *)(v0 + 208);
  sub_10004DB64(v36, *(_QWORD *)(v0 + 136));
  swift_task_dealloc(v36);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BAC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 240);
  v4 = *(_QWORD *)(v1 + 224);
  v3 = *(_QWORD *)(v1 + 232);
  v5 = *(_QWORD *)(v1 + 216);
  v11 = *(_QWORD *)(v1 + 208);
  v7 = *(_QWORD *)(v1 + 176);
  v6 = *(_QWORD *)(v1 + 184);
  v8 = *(_QWORD *)(v1 + 160);
  v9 = *(void **)(v1 + 144);
  swift_willThrow(a1);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);

  sub_10000526C(v6, &qword_100118670);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10004BB7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  NSString v5;
  id v6;
  NSString v7;
  unsigned int v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  id v14;
  NSString v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;

  v3 = objc_msgSend(objc_allocWithZone((Class)LSApplicationWorkspace), "init");
  v4 = (void *)objc_opt_self(APApplication);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "applicationWithBundleIdentifier:", v5);

  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v3, "applicationIsInstalled:", v7);

  if (v8
    && (v9 = objc_msgSend(objc_allocWithZone((Class)LSApplicationWorkspace), "init"),
        v10 = String._bridgeToObjectiveC()(),
        v11 = objc_msgSend(v4, "applicationWithBundleIdentifier:", v10),
        v10,
        LOBYTE(v10) = objc_msgSend(v11, "isHidden"),
        v11,
        v9,
        (v10 & 1) == 0))
  {
    v14 = objc_msgSend(objc_allocWithZone((Class)LSApplicationWorkspace), "init");
    v15 = String._bridgeToObjectiveC()();

    v16 = (int *)type metadata accessor for StreamingService(0);
    v17 = (char *)a2 + v16[5];
    v18 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, a1, v18);
    if (qword_100115F08 != -1)
      swift_once(&qword_100115F08, sub_10004B2CC);
    v20 = qword_100118D18;
    v19 = unk_100118D20;
    v21 = qword_100115EF8;
    swift_bridgeObjectRetain(unk_100118D20);
    if (v21 != -1)
      swift_once(&qword_100115EF8, sub_10004B26C);
    v22 = qword_100118CF8;
    v23 = unk_100118D00;
    *a2 = 0xD000000000000019;
    a2[1] = 0x80000001000DA800;
    v24 = (_QWORD *)((char *)a2 + v16[6]);
    *v24 = v20;
    v24[1] = v19;
    v25 = (_QWORD *)((char *)a2 + v16[7]);
    *v25 = v22;
    v25[1] = v23;
    *((_BYTE *)a2 + v16[8]) = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v16 - 1) + 56))(a2, 0, 1, v16);
    return swift_bridgeObjectRetain(v23);
  }
  else
  {
    v12 = type metadata accessor for StreamingService(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
}

uint64_t sub_10004BE5C(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100004F7C(&qword_1001174D8);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004BEE8@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  NSString v20;
  NSString v21;
  NSString v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  NSString v27;
  id v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t result;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v45 = a4;
  v46 = a5;
  v42 = a3;
  v7 = type metadata accessor for URL(0);
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v41 - v11;
  v13 = *a1;
  v14 = a1[1];
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(a2, "providerNameForBundleID:", v15);

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v43 = v18;
  v44 = v17;

  v19 = v12;
  v20 = String._bridgeToObjectiveC()();
  v21 = String._bridgeToObjectiveC()();
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(a2, "searchURLForBundleID:title:artist:", v20, v21, v22);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v24 = objc_allocWithZone((Class)LSApplicationWorkspace);
  swift_bridgeObjectRetain(v14);
  v25 = objc_msgSend(v24, "init");
  v26 = (void *)objc_opt_self(APApplication);
  swift_bridgeObjectRetain(v14);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v28 = objc_msgSend(v26, "applicationWithBundleIdentifier:", v27);

  v45 = v13;
  v29 = String._bridgeToObjectiveC()();
  LODWORD(v27) = objc_msgSend(v25, "applicationIsInstalled:", v29);

  if ((_DWORD)v27)
    LODWORD(v42) = objc_msgSend(v28, "isHidden") ^ 1;
  else
    LODWORD(v42) = 0;
  v31 = v47;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v10, v19, v48);
  v32 = qword_100115F00;
  swift_bridgeObjectRetain(v14);
  if (v32 != -1)
    swift_once(&qword_100115F00, sub_10004B29C);
  v34 = qword_100118D08;
  v33 = unk_100118D10;
  swift_bridgeObjectRetain(unk_100118D10);

  swift_bridgeObjectRelease(v14);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v30);
  v35 = v46;
  *(_QWORD *)v46 = v45;
  *((_QWORD *)v35 + 1) = v14;
  v36 = (int *)type metadata accessor for StreamingService(0);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 32))(&v35[v36[5]], v10, v30);
  v38 = (uint64_t *)&v35[v36[6]];
  v39 = v43;
  *v38 = v44;
  v38[1] = v39;
  v40 = (uint64_t *)&v35[v36[7]];
  *v40 = v34;
  v40[1] = v33;
  v35[v36[8]] = v42;
  return result;
}

Swift::Int sub_10004C204(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  Swift::Int v4;
  Swift::Int result;
  Swift::Int v6[2];

  v2 = *(_QWORD *)(type metadata accessor for StreamingService(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10004D764(v3);
  v4 = v3[2];
  v6[0] = (Swift::Int)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10004C284(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_10004C284(Swift::Int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::Int v26;
  unint64_t v27;
  Swift::Int v28;
  Swift::Int v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  Swift::Int v43;
  Swift::Int v44;
  Swift::Int v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  Swift::Int v65;
  Swift::Int v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  Swift::Int v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  Swift::Int v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  Swift::Int v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  Swift::Int v147;
  uint64_t v148;
  Swift::Int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  Swift::Int v157;
  Swift::Int v158;
  uint64_t v159;
  uint64_t v160;
  Swift::Int v161;
  Swift::Int *v162;

  v159 = type metadata accessor for StreamingService(0);
  v153 = *(_QWORD *)(v159 - 8);
  v2 = __chkstk_darwin(v159);
  v148 = (uint64_t)&v141 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v160 = (uint64_t)&v141 - v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v141 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v141 - v10;
  v12 = __chkstk_darwin(v9);
  v151 = (uint64_t)&v141 - v13;
  v14 = __chkstk_darwin(v12);
  v150 = (uint64_t)&v141 - v15;
  v16 = __chkstk_darwin(v14);
  v146 = (uint64_t)&v141 - v17;
  __chkstk_darwin(v16);
  v145 = (uint64_t)&v141 - v18;
  v162 = a1;
  v19 = a1[1];
  result = _minimumMergeRunLength(_:)(v19);
  if (result >= v19)
  {
    if (v19 < 0)
      goto LABEL_156;
    if (v19)
      return sub_10004CD04(0, v19, 1, v162);
    return result;
  }
  if (v19 >= 0)
    v21 = v19;
  else
    v21 = v19 + 1;
  if (v19 < -1)
    goto LABEL_164;
  v155 = v11;
  v156 = v8;
  v143 = result;
  if (v19 < 2)
  {
    v25 = (char *)_swiftEmptyArrayStorage;
    v152 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    v142 = _swiftEmptyArrayStorage;
    if (v19 != 1)
    {
      v27 = _swiftEmptyArrayStorage[2];
LABEL_122:
      v126 = v25;
      if (v27 >= 2)
      {
        v133 = *v162;
        do
        {
          v134 = v27 - 2;
          if (v27 < 2)
            goto LABEL_151;
          if (!v133)
            goto LABEL_163;
          v135 = *(_QWORD *)&v126[16 * v134 + 32];
          v136 = *(_QWORD *)&v126[16 * v27 + 24];
          v137 = v154;
          sub_10004CF60(v133 + *(_QWORD *)(v153 + 72) * v135, v133 + *(_QWORD *)(v153 + 72) * *(_QWORD *)&v126[16 * v27 + 16], v133 + *(_QWORD *)(v153 + 72) * v136, v152);
          v154 = v137;
          if (v137)
            break;
          if (v136 < v135)
            goto LABEL_152;
          if ((swift_isUniquelyReferenced_nonNull_native(v126) & 1) == 0)
            v126 = sub_10004D728((uint64_t)v126);
          if (v134 >= *((_QWORD *)v126 + 2))
            goto LABEL_153;
          v138 = &v126[16 * v134 + 32];
          *(_QWORD *)v138 = v135;
          *((_QWORD *)v138 + 1) = v136;
          v139 = *((_QWORD *)v126 + 2);
          if (v27 > v139)
            goto LABEL_154;
          memmove(&v126[16 * v27 + 16], &v126[16 * v27 + 32], 16 * (v139 - v27));
          *((_QWORD *)v126 + 2) = v139 - 1;
          v27 = v139 - 1;
        }
        while (v139 > 2);
      }
LABEL_133:
      swift_bridgeObjectRelease(v126);
      v140 = v142;
      v142[2] = 0;
      return swift_bridgeObjectRelease(v140);
    }
  }
  else
  {
    v22 = v21 >> 1;
    v23 = static Array._allocateBufferUninitialized(minimumCapacity:)(v21 >> 1, v159);
    *(_QWORD *)(v23 + 16) = v22;
    v24 = *(unsigned __int8 *)(v153 + 80);
    v142 = (_QWORD *)v23;
    v152 = v23 + ((v24 + 32) & ~v24);
  }
  v26 = 0;
  v25 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v28 = v26;
    v29 = v26 + 1;
    v149 = v26;
    if (v26 + 1 >= v19)
      break;
    v30 = *v162;
    v31 = *(_QWORD *)(v153 + 72);
    v32 = v145;
    sub_10004DBAC(*v162 + v31 * v29, v145);
    v158 = v30;
    v161 = v31;
    v33 = v30 + v31 * v28;
    v34 = v146;
    sub_10004DBAC(v33, v146);
    v35 = *(int *)(v159 + 24);
    v36 = *(_QWORD *)(v32 + v35);
    v37 = *(_QWORD *)(v32 + v35 + 8);
    v38 = (_QWORD *)(v34 + v35);
    v39 = v38[1];
    if (v36 == *v38 && v37 == v39)
      v41 = 0;
    else
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, *v38, v39, 1);
    sub_10000B600(v146, type metadata accessor for StreamingService);
    sub_10000B600(v145, type metadata accessor for StreamingService);
    v26 = v28 + 2;
    if (v28 + 2 >= v19)
    {
LABEL_34:
      v56 = v158;
      if ((v41 & 1) == 0)
        goto LABEL_49;
    }
    else
    {
      v144 = v25;
      v42 = v161 * v29;
      v43 = v158;
      v44 = v161 * v26;
      while (1)
      {
        v45 = v19;
        v46 = v26;
        v47 = v150;
        sub_10004DBAC(v43 + v44, v150);
        v48 = v151;
        sub_10004DBAC(v43 + v42, v151);
        v49 = *(int *)(v159 + 24);
        v50 = *(_QWORD *)(v47 + v49);
        v51 = *(_QWORD *)(v47 + v49 + 8);
        v52 = (_QWORD *)(v48 + v49);
        v53 = v52[1];
        v54 = v50 == *v52 && v51 == v53;
        v55 = v54 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *v52, v53, 1);
        sub_10000B600(v151, type metadata accessor for StreamingService);
        sub_10000B600(v150, type metadata accessor for StreamingService);
        if (((v41 ^ v55) & 1) != 0)
          break;
        v26 = v46 + 1;
        v43 += v161;
        v19 = v45;
        if (v45 == v26)
        {
          v26 = v45;
          v25 = v144;
          goto LABEL_34;
        }
      }
      v25 = v144;
      v26 = v46;
      v19 = v45;
      v56 = v158;
      if ((v41 & 1) == 0)
        goto LABEL_49;
    }
    if (v26 < v28)
      goto LABEL_157;
    if (v28 >= v26)
      goto LABEL_49;
    v157 = v19;
    v144 = v25;
    v57 = 0;
    v58 = v161 * (v26 - 1);
    v59 = v26 * v161;
    v60 = v28 * v161;
    v61 = (uint64_t)v156;
    do
    {
      if (v28 != v26 + v57 - 1)
      {
        if (!v56)
          goto LABEL_162;
        sub_10004DBF0(v56 + v60, v148);
        if (v60 < v58 || v56 + v60 >= (unint64_t)(v56 + v59))
        {
          swift_arrayInitWithTakeFrontToBack(v56 + v60, v56 + v58, 1, v159);
        }
        else if (v60 != v58)
        {
          swift_arrayInitWithTakeBackToFront(v56 + v60, v56 + v58, 1, v159);
        }
        sub_10004DBF0(v148, v56 + v58);
        v61 = (uint64_t)v156;
        v56 = v158;
      }
      ++v28;
      --v57;
      v58 -= v161;
      v59 -= v161;
      v60 += v161;
    }
    while (v28 < v26 + v57);
    v25 = v144;
    v28 = v149;
    v19 = v157;
    if (v26 < v157)
      goto LABEL_50;
LABEL_74:
    if (v26 < v28)
      goto LABEL_150;
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
      v25 = sub_10004D47C(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
    v82 = *((_QWORD *)v25 + 2);
    v81 = *((_QWORD *)v25 + 3);
    v27 = v82 + 1;
    if (v82 >= v81 >> 1)
      v25 = sub_10004D47C((char *)(v81 > 1), v82 + 1, 1, v25);
    *((_QWORD *)v25 + 2) = v27;
    v83 = v25 + 32;
    v84 = &v25[16 * v82 + 32];
    *(_QWORD *)v84 = v28;
    *((_QWORD *)v84 + 1) = v26;
    if (v82)
    {
      while (1)
      {
        v85 = v27 - 1;
        if (v27 >= 4)
        {
          v90 = &v83[16 * v27];
          v91 = *((_QWORD *)v90 - 8);
          v92 = *((_QWORD *)v90 - 7);
          v96 = __OFSUB__(v92, v91);
          v93 = v92 - v91;
          if (v96)
            goto LABEL_139;
          v95 = *((_QWORD *)v90 - 6);
          v94 = *((_QWORD *)v90 - 5);
          v96 = __OFSUB__(v94, v95);
          v88 = v94 - v95;
          v89 = v96;
          if (v96)
            goto LABEL_140;
          v97 = v27 - 2;
          v98 = &v83[16 * v27 - 32];
          v100 = *(_QWORD *)v98;
          v99 = *((_QWORD *)v98 + 1);
          v96 = __OFSUB__(v99, v100);
          v101 = v99 - v100;
          if (v96)
            goto LABEL_142;
          v96 = __OFADD__(v88, v101);
          v102 = v88 + v101;
          if (v96)
            goto LABEL_145;
          if (v102 >= v93)
          {
            v120 = &v83[16 * v85];
            v122 = *(_QWORD *)v120;
            v121 = *((_QWORD *)v120 + 1);
            v96 = __OFSUB__(v121, v122);
            v123 = v121 - v122;
            if (v96)
              goto LABEL_149;
            v113 = v88 < v123;
            goto LABEL_111;
          }
        }
        else
        {
          if (v27 != 3)
          {
            v114 = *((_QWORD *)v25 + 4);
            v115 = *((_QWORD *)v25 + 5);
            v96 = __OFSUB__(v115, v114);
            v107 = v115 - v114;
            v108 = v96;
            goto LABEL_105;
          }
          v87 = *((_QWORD *)v25 + 4);
          v86 = *((_QWORD *)v25 + 5);
          v96 = __OFSUB__(v86, v87);
          v88 = v86 - v87;
          v89 = v96;
        }
        if ((v89 & 1) != 0)
          goto LABEL_141;
        v97 = v27 - 2;
        v103 = &v83[16 * v27 - 32];
        v105 = *(_QWORD *)v103;
        v104 = *((_QWORD *)v103 + 1);
        v106 = __OFSUB__(v104, v105);
        v107 = v104 - v105;
        v108 = v106;
        if (v106)
          goto LABEL_144;
        v109 = &v83[16 * v85];
        v111 = *(_QWORD *)v109;
        v110 = *((_QWORD *)v109 + 1);
        v96 = __OFSUB__(v110, v111);
        v112 = v110 - v111;
        if (v96)
          goto LABEL_147;
        if (__OFADD__(v107, v112))
          goto LABEL_148;
        if (v107 + v112 >= v88)
        {
          v113 = v88 < v112;
LABEL_111:
          if (v113)
            v85 = v97;
          goto LABEL_113;
        }
LABEL_105:
        if ((v108 & 1) != 0)
          goto LABEL_143;
        v116 = &v83[16 * v85];
        v118 = *(_QWORD *)v116;
        v117 = *((_QWORD *)v116 + 1);
        v96 = __OFSUB__(v117, v118);
        v119 = v117 - v118;
        if (v96)
          goto LABEL_146;
        if (v119 < v107)
          goto LABEL_14;
LABEL_113:
        v124 = v85 - 1;
        if (v85 - 1 >= v27)
        {
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        if (!*v162)
          goto LABEL_161;
        v125 = v26;
        v126 = v25;
        v127 = &v83[16 * v124];
        v128 = *(_QWORD *)v127;
        v129 = &v83[16 * v85];
        v130 = *((_QWORD *)v129 + 1);
        v131 = v154;
        sub_10004CF60(*v162 + *(_QWORD *)(v153 + 72) * *(_QWORD *)v127, *v162 + *(_QWORD *)(v153 + 72) * *(_QWORD *)v129, *v162 + *(_QWORD *)(v153 + 72) * v130, v152);
        v154 = v131;
        if (v131)
          goto LABEL_133;
        if (v130 < v128)
          goto LABEL_136;
        if (v85 > *((_QWORD *)v126 + 2))
          goto LABEL_137;
        *(_QWORD *)v127 = v128;
        *(_QWORD *)&v83[16 * v124 + 8] = v130;
        v132 = *((_QWORD *)v126 + 2);
        if (v85 >= v132)
          goto LABEL_138;
        v25 = v126;
        v27 = v132 - 1;
        memmove(&v83[16 * v85], v129 + 16, 16 * (v132 - 1 - v85));
        *((_QWORD *)v126 + 2) = v132 - 1;
        v26 = v125;
        if (v132 <= 2)
          goto LABEL_14;
      }
    }
    v27 = 1;
LABEL_14:
    v19 = v162[1];
    if (v26 >= v19)
      goto LABEL_122;
  }
  ++v26;
LABEL_49:
  v61 = (uint64_t)v156;
  if (v26 >= v19)
    goto LABEL_74;
LABEL_50:
  if (__OFSUB__(v26, v28))
    goto LABEL_155;
  if (v26 - v28 >= v143)
    goto LABEL_74;
  if (__OFADD__(v28, v143))
    goto LABEL_158;
  if (v28 + v143 >= v19)
    v62 = v19;
  else
    v62 = v28 + v143;
  if (v62 >= v28)
  {
    if (v26 != v62)
    {
      v144 = v25;
      v63 = *(_QWORD *)(v153 + 72);
      v64 = v63 * (v26 - 1);
      v157 = v63;
      v65 = v26 * v63;
      v147 = v62;
      do
      {
        v67 = 0;
        v158 = v26;
        while (1)
        {
          v68 = *v162;
          v69 = (uint64_t)v155;
          sub_10004DBAC(v65 + v67 + *v162, (uint64_t)v155);
          sub_10004DBAC(v64 + v67 + v68, v61);
          v70 = *(int *)(v159 + 24);
          v71 = *(_QWORD *)(v69 + v70);
          v72 = *(_QWORD *)(v69 + v70 + 8);
          v73 = (uint64_t *)(v61 + v70);
          v74 = *v73;
          v75 = v73[1];
          if (v71 == *v73 && v72 == v75)
          {
            sub_10000B600(v61, type metadata accessor for StreamingService);
            sub_10000B600(v69, type metadata accessor for StreamingService);
            v66 = v158;
            goto LABEL_60;
          }
          v161 = v28;
          v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v72, v74, v75, 1);
          sub_10000B600(v61, type metadata accessor for StreamingService);
          sub_10000B600(v69, type metadata accessor for StreamingService);
          if ((v77 & 1) == 0)
            break;
          v78 = *v162;
          if (!*v162)
            goto LABEL_160;
          v79 = v78 + v65 + v67;
          v80 = v78 + v64 + v67;
          sub_10004DBF0(v79, v160);
          swift_arrayInitWithTakeFrontToBack(v79, v80, 1, v159);
          sub_10004DBF0(v160, v80);
          v66 = v158;
          v67 -= v157;
          v28 = v161 + 1;
          v61 = (uint64_t)v156;
          if (v158 == v161 + 1)
            goto LABEL_60;
        }
        v66 = v158;
LABEL_60:
        v26 = v66 + 1;
        v64 += v157;
        v65 += v157;
        v28 = v149;
      }
      while (v26 != v147);
      v26 = v147;
      v25 = v144;
    }
    goto LABEL_74;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004CD04(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v33 = a1;
  v36 = type metadata accessor for StreamingService(0);
  v7 = __chkstk_darwin(v36);
  v37 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v31 - v10;
  result = __chkstk_darwin(v9);
  v15 = (char *)&v31 - v14;
  v35 = a3;
  v32 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v39 = v16 * (v35 - 1);
    v34 = v16;
    v38 = v16 * v35;
LABEL_6:
    v17 = 0;
    v18 = v33;
    while (1)
    {
      v19 = *a4;
      sub_10004DBAC(v38 + v17 + *a4, (uint64_t)v15);
      sub_10004DBAC(v39 + v17 + v19, (uint64_t)v11);
      v20 = *(int *)(v36 + 24);
      v21 = *(_QWORD *)&v15[v20];
      v22 = *(_QWORD *)&v15[v20 + 8];
      v23 = &v11[v20];
      v24 = *((_QWORD *)v23 + 1);
      if (v21 == *(_QWORD *)v23 && v22 == v24)
      {
        sub_10000B600((uint64_t)v11, type metadata accessor for StreamingService);
        result = sub_10000B600((uint64_t)v15, type metadata accessor for StreamingService);
LABEL_5:
        v39 += v34;
        v38 += v34;
        if (++v35 == v32)
          return result;
        goto LABEL_6;
      }
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, *(_QWORD *)v23, v24, 1);
      sub_10000B600((uint64_t)v11, type metadata accessor for StreamingService);
      result = sub_10000B600((uint64_t)v15, type metadata accessor for StreamingService);
      if ((v26 & 1) == 0)
        goto LABEL_5;
      v27 = *a4;
      if (!*a4)
        break;
      v28 = a4;
      v29 = v27 + v38 + v17;
      v30 = v27 + v39 + v17;
      sub_10004DBF0(v29, v37);
      swift_arrayInitWithTakeFrontToBack(v29, v30, 1, v36);
      result = sub_10004DBF0(v37, v30);
      v17 -= v34;
      ++v18;
      a4 = v28;
      if (v35 == v18)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10004CF60(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v57 = type metadata accessor for StreamingService(0);
  v8 = __chkstk_darwin(v57);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v56 = (uint64_t)&v54 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v54 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v54 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v20 = a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_72;
  v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1)
    goto LABEL_73;
  v22 = (uint64_t)(a2 - a1) / v19;
  v60 = a1;
  v59 = a4;
  v23 = v21 / v19;
  if (v22 >= v21 / v19)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      v55 = a1;
      v25 = v23 * v19;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v23, v57);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2, v23, v57);
      }
      v38 = a4 + v25;
      v58 = a4 + v25;
      v60 = a2;
      if (v25 >= 1 && v55 < a2)
      {
        v40 = -v19;
        do
        {
          v41 = v56;
          sub_10004DBAC(v38 + v40, v56);
          v42 = a2 + v40;
          sub_10004DBAC(a2 + v40, (uint64_t)v10);
          v43 = *(int *)(v57 + 24);
          v44 = *(_QWORD *)(v41 + v43);
          v45 = *(_QWORD *)(v41 + v43 + 8);
          v46 = &v10[v43];
          v47 = *((_QWORD *)v46 + 1);
          if (v44 == *(_QWORD *)v46 && v45 == v47)
            v49 = 0;
          else
            v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, *(_QWORD *)v46, v47, 1);
          v50 = a3 + v40;
          sub_10000B600((uint64_t)v10, type metadata accessor for StreamingService);
          sub_10000B600(v56, type metadata accessor for StreamingService);
          if ((v49 & 1) != 0)
          {
            if (a3 < a2 || v50 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v40, a2 + v40, 1, v57);
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v40, a2 + v40, 1, v57);
            }
            v60 += v40;
          }
          else
          {
            v51 = v58;
            v52 = v58 + v40;
            v58 += v40;
            if (a3 < v51 || v50 >= v51)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v40, v52, 1, v57);
              v42 = a2;
            }
            else
            {
              if (a3 != v51)
                swift_arrayInitWithTakeBackToFront(a3 + v40, v52, 1, v57);
              v42 = a2;
            }
          }
          v38 = v58;
          if (v58 <= a4)
            break;
          a2 = v42;
          a3 += v40;
        }
        while (v42 > v55);
      }
LABEL_70:
      sub_10004D61C(&v60, &v59, (uint64_t *)&v58);
      return 1;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = v22 * v19;
    if (a4 < v20 || v20 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v20, v22, v57);
    }
    else if (a4 != v20)
    {
      swift_arrayInitWithTakeBackToFront(a4, v20, v22, v57);
    }
    v26 = a4 + v24;
    v58 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_10004DBAC(a2, (uint64_t)v17);
        sub_10004DBAC(a4, (uint64_t)v15);
        v28 = *(int *)(v57 + 24);
        v29 = *(_QWORD *)&v17[v28];
        v30 = *(_QWORD *)&v17[v28 + 8];
        v31 = &v15[v28];
        v32 = *((_QWORD *)v31 + 1);
        if (v29 == *(_QWORD *)v31 && v30 == v32)
          break;
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, *(_QWORD *)v31, v32, 1);
        sub_10000B600((uint64_t)v15, type metadata accessor for StreamingService);
        sub_10000B600((uint64_t)v17, type metadata accessor for StreamingService);
        if ((v34 & 1) == 0)
          goto LABEL_32;
        v35 = v60;
        v36 = a2 + v19;
        if (v60 < a2 || v60 >= v36)
        {
          swift_arrayInitWithTakeFrontToBack(v60, a2, 1, v57);
        }
        else if (v60 == a2)
        {
          v35 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v60, a2, 1, v57);
        }
LABEL_38:
        v60 = v35 + v19;
        a4 = v59;
        if (v59 < v26)
        {
          a2 = v36;
          if (v36 < a3)
            continue;
        }
        goto LABEL_70;
      }
      sub_10000B600((uint64_t)v15, type metadata accessor for StreamingService);
      sub_10000B600((uint64_t)v17, type metadata accessor for StreamingService);
LABEL_32:
      v35 = v60;
      v37 = v59 + v19;
      if (v60 < v59 || v60 >= v37)
      {
        swift_arrayInitWithTakeFrontToBack(v60, v59, 1, v57);
      }
      else if (v60 != v59)
      {
        swift_arrayInitWithTakeBackToFront(v60, v59, 1, v57);
      }
      v59 = v37;
      v36 = a2;
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_74:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_10004D47C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004F7C(&qword_100118D30);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10004D574(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

uint64_t sub_10004D61C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for StreamingService(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4, v10, result);
  return result;
}

char *sub_10004D728(uint64_t a1)
{
  return sub_10004D47C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10004D73C(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10004D750(_QWORD *a1)
{
  return sub_100053738(0, a1[2], 0, a1);
}

uint64_t sub_10004D764(_QWORD *a1)
{
  return sub_100053A28(0, a1[2], 0, a1);
}

uint64_t sub_10004D778(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_10004D818(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004D8FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t result;
  int64_t v15;
  int v16;
  int v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  _QWORD *v38;

  v7 = v6;
  v34 = a5;
  v35 = a6;
  v32 = a3;
  v33 = a4;
  v31 = a2;
  v9 = type metadata accessor for StreamingService(0);
  v30 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v38 = _swiftEmptyArrayStorage;
  sub_100053210(0, v12, 0);
  v13 = v38;
  result = sub_10004D778(a1);
  v15 = result;
  v17 = v16;
  v19 = v18 & 1;
  v29 = a1 + 56;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v29 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != v17)
      goto LABEL_16;
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
    v21 = v20[1];
    v37[0] = *v20;
    v37[1] = v21;
    swift_bridgeObjectRetain(v21);
    sub_10004BEE8(v37, v31, v34, v35, v11);
    if (v7)
    {
      swift_release(v13);
      swift_bridgeObjectRelease(v21);
      return (uint64_t)v13;
    }
    v36 = 0;
    v22 = a1;
    v23 = (uint64_t)v11;
    swift_bridgeObjectRelease(v21);
    v38 = v13;
    v25 = v13[2];
    v24 = v13[3];
    if (v25 >= v24 >> 1)
    {
      sub_100053210(v24 > 1, v25 + 1, 1);
      v13 = v38;
    }
    v13[2] = v25 + 1;
    v26 = (uint64_t)v13
        + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
        + *(_QWORD *)(v30 + 72) * v25;
    v11 = (char *)v23;
    sub_10004DBF0(v23, v26);
    a1 = v22;
    result = sub_10004D818(v15, v17, v19 & 1, v22);
    v15 = result;
    v17 = v27;
    v19 = v28 & 1;
    --v12;
    v7 = v36;
    if (!v12)
    {
      sub_10004DC34(result, v27, v28 & 1);
      return (uint64_t)v13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for StreamingServicesProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100118D90;
  if (!qword_100118D90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StreamingServicesProvider);
  return result;
}

uint64_t sub_10004DB64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100118660);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DBAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StreamingService(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StreamingService(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004DC34(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t *sub_10004DC40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(uint64_t *, _QWORD, uint64_t, int *);
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = (int *)type metadata accessor for StreamingService(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100004F7C(&qword_100118660);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = v7[5];
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for URL(0);
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      swift_bridgeObjectRetain(v11);
      v16(v13, v14, v15);
      v17 = v7[6];
      v18 = (uint64_t *)((char *)a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      v21 = v7[7];
      v22 = (uint64_t *)((char *)a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      v24 = v23[1];
      *v22 = *v23;
      v22[1] = v24;
      *((_BYTE *)a1 + v7[8]) = *((_BYTE *)a2 + v7[8]);
      v25 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v24);
      v25(a1, 0, 1, v7);
    }
    v26 = *(int *)(a3 + 20);
    v27 = *(uint64_t *)((char *)a2 + v26);
    *(uint64_t *)((char *)a1 + v26) = v27;
    swift_bridgeObjectRetain(v27);
  }
  return a1;
}

uint64_t sub_10004DDA8(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (int *)type metadata accessor for StreamingService(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v5 = a1 + v4[5];
    v6 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[6] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[7] + 8));
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

_QWORD *sub_10004DE4C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v24;
  uint64_t v25;

  v6 = (int *)type metadata accessor for StreamingService(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004F7C(&qword_100118660);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = v6[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for URL(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
    v15 = v6[6];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v6[7];
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    v23 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    v23(a1, 0, 1, v6);
  }
  v24 = *(int *)(a3 + 20);
  v25 = *(_QWORD *)((char *)a2 + v24);
  *(_QWORD *)((char *)a1 + v24) = v25;
  swift_bridgeObjectRetain(v25);
  return a1;
}

_QWORD *sub_10004DF88(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD, uint64_t, int *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = (int *)type metadata accessor for StreamingService(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      v31 = a2[1];
      v32 = a1[1];
      a1[1] = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease(v32);
      v33 = v6[5];
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v36 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 24))(v34, v35, v36);
      v37 = v6[6];
      v38 = (_QWORD *)((char *)a1 + v37);
      v39 = (_QWORD *)((char *)a2 + v37);
      *v38 = *v39;
      v40 = v39[1];
      v41 = v38[1];
      v38[1] = v40;
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease(v41);
      v42 = v6[7];
      v43 = (_QWORD *)((char *)a1 + v42);
      v44 = (_QWORD *)((char *)a2 + v42);
      *v43 = *v44;
      v45 = v44[1];
      v46 = v43[1];
      v43[1] = v45;
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRelease(v46);
      *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
      goto LABEL_7;
    }
    sub_10000B600((uint64_t)a1, type metadata accessor for StreamingService);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v26 = sub_100004F7C(&qword_100118660);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  v11 = a2[1];
  a1[1] = v11;
  v12 = v6[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  v16(v13, v14, v15);
  v17 = v6[6];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v18[1] = v20;
  v21 = v6[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v22[1] = v24;
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v25 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  v25(a1, 0, 1, v6);
LABEL_7:
  v27 = *(int *)(a3 + 20);
  v28 = *(_QWORD *)((char *)a2 + v27);
  v29 = *(_QWORD *)((char *)a1 + v27);
  *(_QWORD *)((char *)a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  return a1;
}

_OWORD *sub_10004E1C8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = (int *)type metadata accessor for StreamingService(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100004F7C(&qword_100118660);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = v6[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_10004E2D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = (int *)type metadata accessor for StreamingService(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v19 = a2[1];
      v20 = a1[1];
      *a1 = *a2;
      a1[1] = v19;
      swift_bridgeObjectRelease(v20);
      v21 = v6[5];
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
      v25 = v6[6];
      v26 = (_QWORD *)((char *)a1 + v25);
      v27 = (_QWORD *)((char *)a2 + v25);
      v29 = *v27;
      v28 = v27[1];
      v30 = v26[1];
      *v26 = v29;
      v26[1] = v28;
      swift_bridgeObjectRelease(v30);
      v31 = v6[7];
      v32 = (_QWORD *)((char *)a1 + v31);
      v33 = (_QWORD *)((char *)a2 + v31);
      v35 = *v33;
      v34 = v33[1];
      v36 = v32[1];
      *v32 = v35;
      v32[1] = v34;
      swift_bridgeObjectRelease(v36);
      *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
      goto LABEL_7;
    }
    sub_10000B600((uint64_t)a1, type metadata accessor for StreamingService);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v15 = sub_100004F7C(&qword_100118660);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v11 = v6[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v16 = *(int *)(a3 + 20);
  v17 = *(_QWORD *)((char *)a1 + v16);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_10004E490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004E49C);
}

uint64_t sub_10004E49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004F7C(&qword_100118660);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10004E51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004E528);
}

uint64_t sub_10004E528(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004F7C(&qword_100118660);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_10004E5A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10004E618(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10004E618(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118DA0)
  {
    v2 = type metadata accessor for StreamingService(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118DA0);
  }
}

_QWORD *sub_10004E66C(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)v4 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (_QWORD *)((char *)v4 + v14);
    v19 = (_QWORD *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
  }
  return v4;
}

uint64_t sub_10004E754(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
}

_QWORD *sub_10004E7C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  return a1;
}

_QWORD *sub_10004E880(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_10004E968(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_10004E9F4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_10004EAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004EAB8);
}

uint64_t sub_10004EAB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10004EB34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004EB40);
}

uint64_t sub_10004EB40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for StreamingService(uint64_t a1)
{
  uint64_t result;

  result = qword_100118E28;
  if (!qword_100118E28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StreamingService);
  return result;
}

uint64_t sub_10004EBF0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000D3CA8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1000D3CA8;
    v4[3] = &unk_1000D3CA8;
    v4[4] = &unk_1000D3CC0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10004EC70@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10004EC80(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  char v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), v9 = 0, (v8 & 1) != 0))
  {
    v10 = (int *)type metadata accessor for StreamingService(0);
    if ((static URL.== infix(_:_:)((char *)a1 + v10[5], (char *)a2 + v10[5]) & 1) != 0)
    {
      v11 = v10[6];
      v12 = *(_QWORD *)((char *)a1 + v11);
      v13 = *(_QWORD *)((char *)a1 + v11 + 8);
      v14 = (_QWORD *)((char *)a2 + v11);
      v15 = v14[1];
      v16 = v12 == *v14 && v13 == v15;
      if (v16 || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *v14, v15, 0), v9 = 0, (v17 & 1) != 0))
      {
        v18 = v10[7];
        v19 = *(_QWORD *)((char *)a1 + v18);
        v20 = *(_QWORD *)((char *)a1 + v18 + 8);
        v21 = (_QWORD *)((char *)a2 + v18);
        v22 = v21[1];
        v23 = v19 == *v21 && v20 == v22;
        if (v23
          || (v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, *v21, v22, 0), v9 = 0, (v24 & 1) != 0))
        {
          v9 = *((_BYTE *)a1 + v10[8]) ^ *((_BYTE *)a2 + v10[8]) ^ 1;
        }
      }
    }
    else
    {
      v9 = 0;
    }
  }
  return v9 & 1;
}

char *sub_10004ED78()
{
  char *v0;
  void *v1;
  char *v2;
  id v3;

  v1 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView____lazy_storage___ambientSceneAnimator];
  if (v1)
  {
    v2 = *(char **)&v0[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView____lazy_storage___ambientSceneAnimator];
  }
  else
  {
    *(_QWORD *)&v0[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView____lazy_storage___ambientSceneAnimator] = v0;
    v2 = v0;
    v1 = 0;
  }
  v3 = v1;
  return v2;
}

id sub_10004EDC4(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  objc_class *ObjectType;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  id v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  objc_super v24;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v13 = &v6[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_retryHandler];
  *(_QWORD *)v13 = nullsub_1;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v6[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_cancellationHandler];
  *(_QWORD *)v14 = nullsub_1;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v6[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_appleMusicURLHandler];
  *(_QWORD *)v15 = nullsub_1;
  *((_QWORD *)v15 + 1) = 0;
  v16 = &v6[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_displayMatchedMediaItemHandler];
  *(_QWORD *)v16 = nullsub_1;
  *((_QWORD *)v16 + 1) = 0;
  v17 = OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_listeningView;
  v18 = objc_allocWithZone((Class)type metadata accessor for AmbientListeningView());
  v19 = v6;
  *(_QWORD *)&v7[v17] = objc_msgSend(v18, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v20 = OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchView;
  *(_QWORD *)&v19[v20] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AmbientMatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v21 = OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_noMatchView;
  *(_QWORD *)&v19[v21] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AmbientNoMatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v19[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView____lazy_storage___ambientSceneAnimator] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchedMediaItem] = 0;

  v24.receiver = v19;
  v24.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v24, "initWithFrame:", a1, a2, a3, a4);
  sub_10004EF78();

  return v22;
}

void sub_10004EF78()
{
  char *v0;
  char *v1;
  void *v2;
  char *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  void *v56;
  Class isa;

  objc_msgSend(v0, "setLayoutMargins:", -26.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = *(char **)&v0[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_listeningView];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v1);
  v2 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchView];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v2);
  v3 = *(char **)&v0[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_noMatchView];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v3);
  objc_msgSend(v1, "setHidden:", 1);
  objc_msgSend(v2, "setHidden:", 1);
  objc_msgSend(v3, "setHidden:", 1);
  v4 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "displayMatchedMediaItemAction");
  objc_msgSend(v2, "addGestureRecognizer:", v4);

  objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC16MusicRecognition18AmbientNoMatchView_retryButton], "addTarget:action:forControlEvents:", v0, "retryAction", 64);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC16MusicRecognition20AmbientListeningView_cancelButton], "addTarget:action:forControlEvents:", v0, "cancelAction", 64);
  v56 = (void *)objc_opt_self(NSLayoutConstraint);
  v5 = sub_100004F7C(&qword_100116D90);
  v6 = swift_allocObject(v5, 128, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000D3D40;
  v7 = objc_msgSend(v1, "topAnchor");
  v8 = objc_msgSend(v0, "layoutMarginsGuide");
  v9 = objc_msgSend(v8, "topAnchor");

  v10 = objc_msgSend(v7, "constraintEqualToAnchor:", v9);
  *(_QWORD *)(v6 + 32) = v10;
  v11 = objc_msgSend(v1, "bottomAnchor");
  v12 = objc_msgSend(v0, "layoutMarginsGuide");
  v13 = objc_msgSend(v12, "bottomAnchor");

  v14 = objc_msgSend(v11, "constraintEqualToAnchor:", v13);
  *(_QWORD *)(v6 + 40) = v14;
  v15 = objc_msgSend(v1, "leadingAnchor");
  v16 = objc_msgSend(v0, "layoutMarginsGuide");
  v17 = objc_msgSend(v16, "leadingAnchor");

  v18 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v17, 54.0);
  *(_QWORD *)(v6 + 48) = v18;
  v19 = objc_msgSend(v1, "trailingAnchor");
  v20 = objc_msgSend(v0, "layoutMarginsGuide");
  v21 = objc_msgSend(v20, "trailingAnchor");

  v22 = objc_msgSend(v19, "constraintEqualToAnchor:", v21);
  *(_QWORD *)(v6 + 56) = v22;
  v23 = objc_msgSend(v2, "topAnchor");
  v24 = objc_msgSend(v0, "layoutMarginsGuide");
  v25 = objc_msgSend(v24, "topAnchor");

  v26 = objc_msgSend(v23, "constraintEqualToAnchor:", v25);
  *(_QWORD *)(v6 + 64) = v26;
  v27 = objc_msgSend(v2, "bottomAnchor");
  v28 = objc_msgSend(v0, "layoutMarginsGuide");
  v29 = objc_msgSend(v28, "bottomAnchor");

  v30 = objc_msgSend(v27, "constraintEqualToAnchor:", v29);
  *(_QWORD *)(v6 + 72) = v30;
  v31 = objc_msgSend(v2, "leadingAnchor");
  v32 = objc_msgSend(v0, "layoutMarginsGuide");
  v33 = objc_msgSend(v32, "leadingAnchor");

  v34 = objc_msgSend(v31, "constraintEqualToAnchor:", v33);
  *(_QWORD *)(v6 + 80) = v34;
  v35 = objc_msgSend(v2, "trailingAnchor");
  v36 = objc_msgSend(v0, "layoutMarginsGuide");
  v37 = objc_msgSend(v36, "trailingAnchor");

  v38 = objc_msgSend(v35, "constraintEqualToAnchor:", v37);
  *(_QWORD *)(v6 + 88) = v38;
  v39 = objc_msgSend(v3, "topAnchor");
  v40 = objc_msgSend(v0, "layoutMarginsGuide");
  v41 = objc_msgSend(v40, "topAnchor");

  v42 = objc_msgSend(v39, "constraintEqualToAnchor:", v41);
  *(_QWORD *)(v6 + 96) = v42;
  v43 = objc_msgSend(v3, "bottomAnchor");
  v44 = objc_msgSend(v0, "layoutMarginsGuide");
  v45 = objc_msgSend(v44, "bottomAnchor");

  v46 = objc_msgSend(v43, "constraintEqualToAnchor:", v45);
  *(_QWORD *)(v6 + 104) = v46;
  v47 = objc_msgSend(v3, "leadingAnchor");
  v48 = objc_msgSend(v0, "layoutMarginsGuide");
  v49 = objc_msgSend(v48, "leadingAnchor");

  v50 = objc_msgSend(v47, "constraintEqualToAnchor:", v49);
  *(_QWORD *)(v6 + 112) = v50;
  v51 = objc_msgSend(v3, "trailingAnchor");
  v52 = objc_msgSend(v0, "layoutMarginsGuide");
  v53 = objc_msgSend(v52, "trailingAnchor");

  v54 = objc_msgSend(v51, "constraintEqualToAnchor:", v53);
  *(_QWORD *)(v6 + 120) = v54;
  specialized Array._endMutation()(v55);
  sub_10001FC14();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v56, "activateConstraints:", isa);

}

id sub_10004F764(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  objc_super v19;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v6 = &v3[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_retryHandler];
  *(_QWORD *)v6 = nullsub_1;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &v3[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_cancellationHandler];
  *(_QWORD *)v7 = nullsub_1;
  *((_QWORD *)v7 + 1) = 0;
  v8 = &v3[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_appleMusicURLHandler];
  *(_QWORD *)v8 = nullsub_1;
  *((_QWORD *)v8 + 1) = 0;
  v9 = &v3[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_displayMatchedMediaItemHandler];
  *(_QWORD *)v9 = nullsub_1;
  *((_QWORD *)v9 + 1) = 0;
  v10 = OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_listeningView;
  v11 = objc_allocWithZone((Class)type metadata accessor for AmbientListeningView());
  v12 = v3;
  *(_QWORD *)&v3[v10] = objc_msgSend(v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchView;
  *(_QWORD *)&v12[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AmbientMatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_noMatchView;
  *(_QWORD *)&v12[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AmbientNoMatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v12[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView____lazy_storage___ambientSceneAnimator] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchedMediaItem] = 0;

  v19.receiver = v12;
  v19.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v19, "initWithCoder:", a1);
  v16 = v15;
  if (v15)
  {
    v17 = v15;
    sub_10004EF78();

  }
  return v16;
}

id sub_10004F92C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  id v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  NSString v27;
  id v28;
  NSString v29;
  unsigned int v30;
  id v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  NSString v53;
  id v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;

  v57 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v56 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchedMediaItem];
  *(_QWORD *)&v1[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchedMediaItem] = a1;

  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  type metadata accessor for MainActor(0);
  v13 = a1;
  v14 = v1;
  v15 = static MainActor.shared.getter(v14);
  v16 = (_QWORD *)swift_allocObject(&unk_10010A730, 48, 7);
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v14;
  v16[5] = v13;
  v17 = sub_1000A9F18((uint64_t)v10, (uint64_t)&unk_100118EE8, (uint64_t)v16);
  swift_release(v17);
  v18 = *(char **)&v14[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchView];
  v59 = OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_titleLabel;
  v19 = *(id *)&v18[OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_titleLabel];
  v20 = objc_msgSend(v13, "title");
  objc_msgSend(v19, "setText:", v20);

  v58 = OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_artistLabel;
  v21 = *(id *)&v18[OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_artistLabel];
  v22 = objc_msgSend(v13, "artist");
  objc_msgSend(v21, "setText:", v22);

  if (qword_100116038 != -1)
    swift_once(&qword_100116038, sub_100073F7C);
  v23 = *(_QWORD *)algn_10011A5D8;
  v24 = objc_allocWithZone((Class)LSApplicationWorkspace);
  swift_bridgeObjectRetain(v23);
  v25 = objc_msgSend(v24, "init");
  v26 = (void *)objc_opt_self(APApplication);
  swift_bridgeObjectRetain(v23);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  v28 = objc_msgSend(v26, "applicationWithBundleIdentifier:", v27);

  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v25, "applicationIsInstalled:", v29);

  swift_bridgeObjectRelease(v23);
  if (v30)
  {
    v31 = objc_msgSend(v13, "appleMusicURL");
    if (v31)
    {
      v32 = v31;
      v33 = v56;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v34 = v33;
      v35 = v57;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v34, v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v7, 0, 1, v35);
      v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v35);
      v37 = 0;
      if (v36 != 1)
        goto LABEL_10;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v7, 1, 1, v57);
    }
    v37 = 1;
LABEL_10:
    sub_100007B24((uint64_t)v7);
    goto LABEL_11;
  }
  v37 = 1;
LABEL_11:
  v38 = OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_appleMusicButton;
  v39 = *(void **)&v18[OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_appleMusicButton];
  objc_msgSend(v39, "setHidden:", v37);
  objc_msgSend(v39, "addTarget:action:forControlEvents:", v14, "appleMusicButtonAction", 64);
  v57 = (uint64_t)v14;
  v40 = OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_shazamCountLabel;
  v41 = *(void **)&v18[OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_shazamCountLabel];
  v42 = (void *)objc_opt_self(NSBundle);
  v43 = v41;
  v44 = objc_msgSend(v42, "mainBundle");
  v60._object = (void *)0xE000000000000000;
  v45._object = (void *)0x80000001000DA960;
  v45._countAndFlagsBits = 0xD000000000000011;
  v46._countAndFlagsBits = 0;
  v46._object = (void *)0xE000000000000000;
  v60._countAndFlagsBits = 0;
  v47 = NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)v44, v46, v60);

  v48 = sub_100004F7C(&qword_100118188);
  v49 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_1000D1CC0;
  v50 = objc_msgSend(v13, "shazamCount");
  *(_QWORD *)(v49 + 56) = &type metadata for Int;
  *(_QWORD *)(v49 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v49 + 32) = v50;
  static String.localizedStringWithFormat(_:_:)(v47._countAndFlagsBits, v47._object, v49);
  v52 = v51;
  swift_bridgeObjectRelease(v47._object);
  swift_bridgeObjectRelease(v49);
  v53 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52);
  objc_msgSend(v43, "setText:", v53);

  v54 = *(id *)&v18[v40];
  objc_msgSend(v54, "setHidden:", objc_msgSend(v13, "shazamCount") == 0);

  objc_msgSend(*(id *)&v18[v38], "setAlpha:", 0.0);
  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC16MusicRecognition16AmbientMatchView_shazamCountStackView], "setAlpha:", 0.0);
  objc_msgSend(*(id *)&v18[v59], "setAlpha:", 0.0);
  objc_msgSend(*(id *)&v18[v58], "setAlpha:", 0.0);
  objc_msgSend(*(id *)(v57 + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_noMatchView), "setHidden:", 1);
  return objc_msgSend(v18, "setHidden:", 0);
}

uint64_t sub_10004FF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[5] = v7;
  v5[6] = v8;
  return swift_task_switch(sub_10004FFB8, v7, v8);
}

uint64_t sub_10004FFB8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10011D9F4);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_100050014;
  return sub_1000CB240(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100050014()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return swift_task_switch(sub_100050060, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100050060()
{
  uint64_t v0;
  char *v1;

  swift_release(*(_QWORD *)(v0 + 32));
  v1 = sub_10004ED78();
  sub_10008D8EC(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000500A4(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  CGFloat v8;
  void *v9;
  CGFloat ty;
  char *v11;
  void *v12;
  CGFloat v13;
  void *v14;
  CGFloat v15;
  char *v16;
  CGAffineTransform v18;
  CGAffineTransform aBlock;

  v3 = sub_10004ED78();
  v4 = *(char **)&v3[OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_noMatchView];
  objc_msgSend(v4, "setAlpha:", 1.0);
  v5 = *(void **)&v4[OBJC_IVAR____TtC16MusicRecognition18AmbientNoMatchView_titleLabel];
  objc_msgSend(v5, "setAlpha:", 0.0);
  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC16MusicRecognition18AmbientNoMatchView_retryButton], "setAlpha:", 0.0);
  v6 = v5;
  objc_msgSend(v6, "transform");
  CGAffineTransformTranslate(&v18, &aBlock, 0.0, 80.0);
  aBlock = v18;
  objc_msgSend(v6, "setTransform:", &aBlock);

  if (qword_100116238 != -1)
    swift_once(&qword_100116238, sub_10008DB04);
  v7 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:timingParameters:", qword_10011B1A8, 0.0);
  v8 = COERCE_DOUBLE(swift_allocObject(&unk_10010A758, 24, 7));
  *(_QWORD *)(*(_QWORD *)&v8 + 16) = v3;
  *(_QWORD *)&aBlock.tx = sub_100050BDC;
  aBlock.ty = v8;
  *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
  *(_QWORD *)&aBlock.b = 1107296256;
  *(_QWORD *)&aBlock.c = sub_1000A5684;
  *(_QWORD *)&aBlock.d = &unk_10010A770;
  v9 = _Block_copy(&aBlock);
  ty = aBlock.ty;
  v11 = v3;
  objc_msgSend(v7, "addAnimations:", v9, swift_release(*(_QWORD *)&ty).n128_f64[0]);
  _Block_release(v9);
  objc_msgSend(v7, "startAnimationAfterDelay:", 0.3);
  v12 = (void *)objc_opt_self(UIView);
  v13 = COERCE_DOUBLE(swift_allocObject(&unk_10010A7A8, 24, 7));
  *(_QWORD *)(*(_QWORD *)&v13 + 16) = v11;
  *(_QWORD *)&aBlock.tx = sub_100050BFC;
  aBlock.ty = v13;
  *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
  *(_QWORD *)&aBlock.b = 1107296256;
  *(_QWORD *)&aBlock.c = sub_1000A5684;
  *(_QWORD *)&aBlock.d = &unk_10010A7C0;
  v14 = _Block_copy(&aBlock);
  v15 = aBlock.ty;
  v16 = v11;
  swift_release(*(_QWORD *)&v15);
  objc_msgSend(v12, "animateKeyframesWithDuration:delay:options:animations:completion:", 0, v14, 0, 1.2, 0.0);

  _Block_release(v14);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchView), "setHidden:", 1);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_noMatchView), "setHidden:", 0);
  return sub_1000B4478(a1);
}

uint64_t sub_100050398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(char *, __n128);
  __n128 v18;
  __n128 v19;
  uint64_t v20;

  v1 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v20 - v5;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_matchedMediaItem);
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_100007B24((uint64_t)v6);
  }
  v12 = objc_msgSend(v11, "appleMusicURL");
  if (v12)
  {
    v13 = v12;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, v14, 1, v7);
  sub_100007EE4((uint64_t)v4, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_100007B24((uint64_t)v6);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v17 = *(void (**)(char *, __n128))(v0
                                              + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_appleMusicURLHandler);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_appleMusicURLHandler + 8);
  v18 = swift_retain(v16);
  v17(v10, v18);
  v19 = swift_release(v16);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v19);
}

void sub_1000505CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v1 = (void *)objc_opt_self(UIView);
  v2 = swift_allocObject(&unk_10010A7F8, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  v10 = sub_100050C28;
  v11 = v2;
  v6 = _NSConcreteStackBlock;
  v7 = 1107296256;
  v8 = sub_1000A5684;
  v9 = &unk_10010A810;
  v3 = _Block_copy(&v6);
  swift_release(v11);
  v4 = swift_allocObject(&unk_10010A7F8, 24, 7);
  swift_unknownObjectWeakInit(v4 + 16, v0);
  v10 = sub_100050C30;
  v11 = v4;
  v6 = _NSConcreteStackBlock;
  v7 = 1107296256;
  v8 = sub_10008DA38;
  v9 = &unk_10010A838;
  v5 = _Block_copy(&v6);
  swift_release(v11);
  objc_msgSend(v1, "animateWithDuration:animations:completion:", v3, v5, 0.3);
  _Block_release(v5);
  _Block_release(v3);
}

void sub_100050718(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(id *)(Strong + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_noMatchView);

    objc_msgSend(v4, "setAlpha:", 0.0);
  }
  swift_beginAccess(v1, &v8, 0, 0);
  v5 = swift_unknownObjectWeakLoadStrong(v1);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = *(id *)(v5 + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_listeningView);

    objc_msgSend(v7, "setAlpha:", 1.0);
  }
}

uint64_t sub_1000507E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  void (*v6)(void);
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v4 = (void *)result;
    v6 = *(void (**)(void))(result + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_retryHandler);
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC16MusicRecognition23AmbientMatchingFlowView_retryHandler + 8);
    swift_retain(v5);

    v6();
    return swift_release(v5);
  }
  return result;
}

uint64_t type metadata accessor for AmbientMatchingFlowView()
{
  return objc_opt_self(_TtC16MusicRecognition23AmbientMatchingFlowView);
}

uint64_t sub_100050B0C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100050B40(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_100118EE4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000101B8;
  return sub_10004FF4C(a1, v4, v5, v7, v6);
}

uint64_t sub_100050BB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100050BDC()
{
  uint64_t v0;

  return sub_10008E51C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100050BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100050BF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_100050BFC()
{
  uint64_t v0;

  sub_10008E574(*(void **)(v0 + 16));
}

uint64_t sub_100050C04()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100050C28()
{
  uint64_t v0;

  sub_100050718(v0);
}

uint64_t sub_100050C30(uint64_t a1)
{
  uint64_t v1;

  return sub_1000507E8(a1, v1);
}

uint64_t sub_100050C54@<X0>(uint64_t a1@<X8>)
{
  return sub_100050C70(&qword_100117328, &qword_1001190F8, (uint64_t (*)(_QWORD))&type metadata accessor for Genre, a1);
}

uint64_t sub_100050C70@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;

  v8 = sub_100004F7C(a1);
  v9 = sub_10000522C(a2, a1, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  dispatch thunk of Collection.startIndex.getter(&v18, v8, v9);
  dispatch thunk of Collection.endIndex.getter(v17, v8, v9);
  if (v18 == v17[0])
  {
    v10 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
  }
  else
  {
    v12 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v17, &v18, v8, v9);
    v14 = v13;
    v15 = a3(0);
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a4, v14, v15);
    v12(v17, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a4, 0, 1, v15);
  }
}

uint64_t sub_100050D88@<X0>(uint64_t a1@<X8>)
{
  return sub_100050C70(&qword_1001190E8, &qword_1001190F0, (uint64_t (*)(_QWORD))&type metadata accessor for Song, a1);
}

uint64_t sub_100050DA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100050C70(&qword_1001190C8, &qword_1001190D0, (uint64_t (*)(_QWORD))&type metadata accessor for Album, a1);
}

uint64_t sub_100050DC0@<X0>(uint64_t a1@<X8>)
{
  return sub_100050C70(&qword_1001190D8, &qword_1001190E0, (uint64_t (*)(_QWORD))&type metadata accessor for Artist, a1);
}

uint64_t sub_100050DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;
  char v22;

  v2 = v1;
  type metadata accessor for MusicLibrary(0);
  *(_QWORD *)(v1 + 24) = static MusicLibrary.shared.getter();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_songAddStatusCancellable) = 0;
  v4 = OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_playlistsByID;
  *(_QWORD *)(v2 + v4) = sub_1000B4094((uint64_t)_swiftEmptyArrayStorage);
  v5 = v2 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_mostRecentEditedPlaylist;
  v6 = type metadata accessor for Playlist(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = v2 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_song;
  v8 = type metadata accessor for Song(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  v22 = 0;
  v10 = sub_100004F7C(&qword_1001190B0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)(v2 + 16) = CurrentValueSubject.init(_:)(&v22);
  v11 = static MusicLibrary.shared.getter();
  v12 = MusicLibrary.state<A>(for:)(v7, v8, &protocol witness table for Song);
  swift_release(v11);
  *(_QWORD *)(v2 + 32) = v12;
  v13 = sub_100004F7C(&qword_1001190B8);
  sub_10000522C(&qword_1001190C0, &qword_1001190B8, (uint64_t)&protocol conformance descriptor for MusicLibrary.ItemState<A>);
  v21 = ObservableObject<>.objectWillChange.getter(v13);
  v14 = swift_allocObject(&unk_10010A8B0, 24, 7);
  swift_weakInit(v14 + 16, v2);
  v15 = swift_allocObject(&unk_10010A8D8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000546DC;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = type metadata accessor for ObservableObjectPublisher(0);
  v17 = Publisher<>.sink(receiveValue:)(sub_100054708, v15, v16, &protocol witness table for ObservableObjectPublisher);
  swift_release(v15);
  swift_release(v21);
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_songAddStatusCancellable);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_songAddStatusCancellable) = v17;
  v19 = swift_release(v18);
  (*(void (**)(uint64_t, uint64_t, __n128))(v9 + 8))(a1, v8, v19);
  return v2;
}

uint64_t sub_100050FFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  void (*v12)(_BYTE *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[7];
  _QWORD v18[3];

  v2 = type metadata accessor for MusicLibrary.AddStatus(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v17[-v7];
  a1 += 16;
  swift_beginAccess(a1, (char *)v18 + 1, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v10 = result;
    dispatch thunk of MusicLibrary.ItemState.addStatus.getter();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for MusicLibrary.AddStatus.added(_:), v2);
    v11 = static MusicLibrary.AddStatus.== infix(_:_:)(v8, v6) & 1;
    v12 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
    v12(v6, v2);
    v12(v8, v2);
    v13 = *(_QWORD *)(v10 + 16);
    v14 = swift_retain(v13);
    CurrentValueSubject.value.getter(v18, v14);
    swift_release(v13);
    if (v11 == LOBYTE(v18[0]))
    {
      v16 = v10;
    }
    else
    {
      v15 = *(_QWORD *)(v10 + 16);
      LOBYTE(v18[0]) = v11;
      swift_retain(v15);
      CurrentValueSubject.send(_:)(v18);
      swift_release(v10);
      v16 = v15;
    }
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_100051160(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100051180(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[5] = a1;
  v2[6] = v1;
  v3 = sub_100004F7C(&qword_100119040);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_100004F7C(&qword_100119028) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v4);
  v2[9] = swift_task_alloc(v4);
  v5 = type metadata accessor for Playlist(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_100119048);
  v2[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[14] = v8;
  v2[15] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100051264, 0, 0);
}

uint64_t sub_100051264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(v2 + 104);
  v4 = *(_QWORD *)(v2 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D3DE0, a2);
  MusicLibraryRequest.init()(v4, &protocol witness table for Playlist);
  MusicLibraryRequest<>.sort<A>(by:ascending:)(KeyPath, 0, v3, &protocol witness table for Playlist);
  v7 = swift_getKeyPath(&unk_1000D3E08, v6);
  *(_BYTE *)(v2 + 136) = 1;
  MusicLibraryRequest<>.filter<A>(matching:equalTo:)(v7, v2 + 136, v3, &protocol witness table for Playlist, &protocol witness table for Bool);
  v8 = swift_release(v7);
  MusicLibraryRequest.limit.setter(1, v3, v8);
  swift_release(KeyPath);
  v9 = (_QWORD *)swift_task_alloc(dword_100119054);
  *(_QWORD *)(v2 + 128) = v9;
  *v9 = v2;
  v9[1] = sub_10005135C;
  return sub_1000515D8(*(_QWORD *)(v2 + 56));
}

uint64_t sub_10005135C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_1000513B0, 0, 0);
}

uint64_t sub_1000513B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = sub_100004F7C(&qword_100119058);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 72);
  if (v4 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    sub_10000526C(v1, &qword_100119040);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
  }
  else
  {
    sub_100050C70(&qword_100119058, &qword_100119060, (uint64_t (*)(_QWORD))&type metadata accessor for Playlist, *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) != 1)
    {
      v13 = *(_QWORD *)(v0 + 88);
      v12 = *(_QWORD **)(v0 + 96);
      v14 = *(_QWORD *)(v0 + 80);
      v15 = *(_QWORD *)(v0 + 64);
      v16 = *(_QWORD **)(v0 + 40);
      v17 = *(_QWORD *)(v0 + 48);
      v18 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 32);
      v18(v12, *(_QWORD **)(v0 + 72), v14);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v13 + 16))(v15, v12, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v14);
      v19 = v17 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_mostRecentEditedPlaylist;
      swift_beginAccess(v17 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_mostRecentEditedPlaylist, v0 + 16, 33, 0);
      sub_1000530F8(v15, v19);
      swift_endAccess(v0 + 16);
      v16[3] = type metadata accessor for MusicKitPlaylist(0);
      v16[4] = &off_100109708;
      v20 = sub_1000446F4(v16);
      v18(v20, v12, v14);
      goto LABEL_6;
    }
  }
  v11 = *(_QWORD *)(v0 + 40);
  sub_10000526C(*(_QWORD *)(v0 + 72), &qword_100119028);
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)(v11 + 32) = 0;
LABEL_6:
  v21 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 64);
  v22 = *(_QWORD *)(v0 + 72);
  v24 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000515D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1[3] = a1;
  v2 = sub_100004F7C(&qword_100119068);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v4 = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[6] = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibraryRequest.response()[1]);
  v1[7] = v5;
  v6 = sub_100004F7C(&qword_100119048);
  *v5 = v1;
  v5[1] = sub_100051678;
  return MusicLibraryRequest.response()(v4, v6);
}

uint64_t sub_100051678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100051760;
  else
    v3 = sub_1000516DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000516DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  MusicLibraryResponse.items.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_100004F7C(&qword_100119058);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = type metadata accessor for Logger(0);
  sub_10000B5E8(v2, (uint64_t)qword_100124478);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 64);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error retrieving playlists from user's music library: %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 64));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v12 = *(_QWORD *)(v0 + 24);
  v13 = sub_100004F7C(&qword_100119058);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051960()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[12] = v0;
  v2 = sub_100004F7C(&qword_100119040);
  v1[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004F7C(&qword_100119058);
  v1[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[15] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[16] = swift_task_alloc(v5);
  v1[17] = swift_task_alloc(v5);
  v6 = sub_100004F7C(&qword_100119048);
  v1[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[19] = v7;
  v1[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100051A24, 0, 0);
}

uint64_t sub_100051A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD *v8;

  v3 = *(_QWORD *)(v2 + 144);
  KeyPath = swift_getKeyPath(&unk_1000D3E30, a2);
  *(_QWORD *)(v2 + 168) = type metadata accessor for Playlist(0);
  MusicLibraryRequest.init()();
  MusicLibraryRequest.sort<A>(by:ascending:)(KeyPath, 1, v3);
  v6 = swift_getKeyPath(&unk_1000D3E08, v5);
  *(_BYTE *)(v2 + 184) = 1;
  MusicLibraryRequest<>.filter<A>(matching:equalTo:)(v6, v2 + 184, v3, &protocol witness table for Playlist, &protocol witness table for Bool);
  v7 = swift_release(v6);
  MusicLibraryRequest.limit.setter(0, v3, v7);
  swift_release(KeyPath);
  v8 = (_QWORD *)swift_task_alloc(dword_100119054);
  *(_QWORD *)(v2 + 176) = v8;
  *v8 = v2;
  v8[1] = sub_100051B18;
  return sub_1000515D8(*(_QWORD *)(v2 + 104));
}

uint64_t sub_100051B18()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  return swift_task_switch(sub_100051B6C, 0, 0);
}

_QWORD *sub_100051B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    sub_10000526C(v3, &qword_100119040);
    v4 = 0;
LABEL_10:
    v29 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 136);
    v30 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(v0 + 8))(v4);
  }
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v5, v6, v1);
  v7 = sub_10000522C(&qword_100119078, &qword_100119058, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v8 = dispatch thunk of Sequence._copyToContiguousArray()(v1, v7);
  sub_100051E2C(v8);
  swift_release(v8);
  v9 = sub_10000522C(&qword_100119060, &qword_100119058, (uint64_t)&protocol conformance descriptor for MusicItemCollection<A>);
  v10 = dispatch thunk of Collection.count.getter(v1, v9);
  v4 = _swiftEmptyArrayStorage;
  if (!v10)
  {
LABEL_9:
    v26 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    goto LABEL_10;
  }
  v11 = v10;
  v12 = *(_QWORD *)(v0 + 112);
  sub_1000531A0(0, v10 & ~(v10 >> 63), 0);
  v4 = _swiftEmptyArrayStorage;
  result = dispatch thunk of Collection.startIndex.getter((_QWORD *)(v0 + 88), v12, v9);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v31 = *(_QWORD *)(v0 + 168);
    do
    {
      v14 = *(_QWORD *)(v0 + 168);
      v15 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v0 + 56, v0 + 88, *(_QWORD *)(v0 + 112), v9);
      v17 = v16;
      *(_QWORD *)(v0 + 40) = type metadata accessor for MusicKitPlaylist(0);
      *(_QWORD *)(v0 + 48) = &off_100109708;
      v18 = sub_1000446F4((_QWORD *)(v0 + 16));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v18, v17, v14);
      v15(v0 + 56, 0);
      v20 = _swiftEmptyArrayStorage[2];
      v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1)
        sub_1000531A0(v19 > 1, v20 + 1, 1);
      v21 = *(_QWORD *)(v0 + 112);
      _swiftEmptyArrayStorage[2] = v20 + 1;
      v22 = &_swiftEmptyArrayStorage[5 * v20];
      v23 = *(_OWORD *)(v0 + 16);
      v24 = *(_OWORD *)(v0 + 32);
      v22[8] = *(_QWORD *)(v0 + 48);
      *((_OWORD *)v22 + 2) = v23;
      *((_OWORD *)v22 + 3) = v24;
      dispatch thunk of Collection.formIndex(after:)(v0 + 88, v21, v9);
      --v11;
    }
    while (v11);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100051E2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];

  v2 = v1;
  v27 = sub_100004F7C(&qword_100119088);
  v4 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v25 = v1;
    v28[0] = _swiftEmptyArrayStorage;
    sub_100053184(0, v7, 0);
    v8 = (_QWORD *)v28[0];
    v26 = type metadata accessor for Playlist(0);
    v9 = *(_QWORD *)(v26 - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    do
    {
      v13 = v12(&v6[*(int *)(v27 + 48)], v10, v26);
      *(_QWORD *)v6 = Playlist.id.getter(v13);
      *((_QWORD *)v6 + 1) = v14;
      v28[0] = v8;
      v16 = v8[2];
      v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        sub_100053184(v15 > 1, v16 + 1, 1);
        v8 = (_QWORD *)v28[0];
      }
      v8[2] = v16 + 1;
      sub_100053594((uint64_t)v6, (uint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v16);
      v10 += v11;
      --v7;
    }
    while (v7);
    v2 = v25;
  }
  v17 = v8[2];
  if (v17)
  {
    sub_100004F7C(&qword_100119090);
    v18 = (void *)static _DictionaryStorage.allocate(capacity:)(v17);
  }
  else
  {
    v18 = &_swiftEmptyDictionarySingleton;
  }
  v28[0] = v18;
  v19 = swift_bridgeObjectRetain(v8);
  sub_100053C08(v19, 1, v28);
  swift_bridgeObjectRelease(v8);
  v20 = v28[0];
  v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_playlistsByID);
  swift_beginAccess(v21, v28, 1, 0);
  v22 = *v21;
  *v21 = v20;
  return swift_bridgeObjectRelease(v22);
}

uint64_t sub_10005203C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_100004F7C(&qword_100119028);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Playlist(0);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000520D4, 0, 0);
}

uint64_t sub_1000520D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_playlistsByID);
  swift_beginAccess(v1, v0 + 16, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRetain(v3);
    v5 = sub_10009D490(v4, v3);
    if ((v6 & 1) != 0)
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v2 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 88) + 72) * v5, *(_QWORD *)(v0 + 80));
      v7 = 0;
    }
    else
    {
      v7 = 1;
    }
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, v7, 1, v8);
    swift_bridgeObjectRelease(v11);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) != 1)
    {
      v25 = *(_QWORD *)(v0 + 64);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
      swift_endAccess(v0 + 16);
      v26 = v25 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_song;
      v29 = (char *)&async function pointer to dispatch thunk of MusicLibrary.add<A>(_:to:)
          + async function pointer to dispatch thunk of MusicLibrary.add<A>(_:to:);
      v27 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MusicLibrary.add<A>(_:to:)
                                       + 1));
      *(_QWORD *)(v0 + 112) = v27;
      v28 = type metadata accessor for Song(0);
      *v27 = v0;
      v27[1] = sub_100052440;
      return ((uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, void *))v29)(*(_QWORD *)(v0 + 96), v26, *(_QWORD *)(v0 + 104), v28, &protocol witness table for Song);
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(*(_QWORD *)(v0 + 72), 1, 1, *(_QWORD *)(v0 + 80));
  }
  sub_10000526C(*(_QWORD *)(v0 + 72), &qword_100119028);
  swift_endAccess(v0 + 16);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v12 = *(_QWORD *)(v0 + 56);
  v13 = type metadata accessor for Logger(0);
  sub_10000B5E8(v13, (uint64_t)qword_100124478);
  v14 = swift_bridgeObjectRetain_n(v12, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 56);
  if (v17)
  {
    v19 = *(_QWORD *)(v0 + 48);
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v30 = v21;
    *(_DWORD *)v20 = 136315138;
    swift_bridgeObjectRetain(v18);
    *(_QWORD *)(v0 + 40) = sub_1000529F4(v19, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(v18, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "No playlist found with identifier %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 56), 2);
  }

  v22 = *(_QWORD *)(v0 + 96);
  v23 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052440()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100052510;
  }
  else
  {
    v5 = v2[12];
    v6 = v2[10];
    v7 = *(void (**)(uint64_t, uint64_t))(v2[11] + 8);
    v2[16] = v7;
    v7(v5, v6);
    v4 = sub_1000524B8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000524B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(v2, *(_QWORD *)(v0 + 80));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100052574()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_song;
  v2 = type metadata accessor for Song(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)((char *)v0
                          + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_songAddStatusCancellable));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_playlistsByID));
  sub_10000526C((uint64_t)v0 + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_mostRecentEditedPlaylist, &qword_100119028);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100052614()
{
  return type metadata accessor for MusicKitMusicLibrary(0);
}

uint64_t type metadata accessor for MusicKitMusicLibrary(uint64_t a1)
{
  uint64_t result;

  result = qword_100118F38;
  if (!qword_100118F38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MusicKitMusicLibrary);
  return result;
}

void sub_100052658(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = type metadata accessor for Song(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v6[4] = "\b";
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_10005270C(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

void sub_10005270C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100118F48)
  {
    v2 = type metadata accessor for Playlist(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100118F48);
  }
}

uint64_t sub_100052760()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10005277C, 0, 0);
}

uint64_t sub_10005277C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, void *);

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_song;
  v5 = (uint64_t (*)(uint64_t, uint64_t, void *))((char *)&async function pointer to dispatch thunk of MusicLibrary.add<A>(_:)
                                                        + async function pointer to dispatch thunk of MusicLibrary.add<A>(_:));
  v2 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of MusicLibrary.add<A>(_:)
                                  + 1));
  *(_QWORD *)(v0 + 24) = v2;
  v3 = type metadata accessor for Song(0);
  *v2 = v0;
  v2[1] = sub_10000C9EC;
  return v5(v1, v3, &protocol witness table for Song);
}

uint64_t sub_10005280C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_100052828, 0, 0);
}

uint64_t sub_100052828()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC16MusicRecognition20MusicKitMusicLibrary_song;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to MusicLibrary.remove<A>(_:)[1]);
  *(_QWORD *)(v0 + 24) = v2;
  v3 = type metadata accessor for Song(0);
  *v2 = v0;
  v2[1] = sub_10000C6C4;
  return MusicLibrary.remove<A>(_:)(v1, v3, &protocol witness table for Song);
}

uint64_t sub_1000528A8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100119074);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000528F0;
  return sub_100051960();
}

uint64_t sub_1000528F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100052940(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10011903C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000101B8;
  return sub_100051180(a1);
}

uint64_t sub_100052994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_100119024);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000101B8;
  return sub_10005203C(a1, a2);
}

uint64_t sub_1000529F4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  void *ObjectType;

  v6 = sub_100052AC4(v13, 0, 0, 1, a1, a2);
  v8 = v13[0];
  if (v6)
  {
    v9 = v6;
    ObjectType = (void *)swift_getObjectType(v6, v7);
    v13[0] = v9;
    v10 = *a3;
    if (*a3)
    {
      sub_100053034((uint64_t)v13, *a3);
      *a3 = v10 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    v11 = *a3;
    if (*a3)
    {
      sub_100053034((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s16MusicRecognition11AnyPlaylistVwxx_0(v13);
  return v8;
}

uint64_t sub_100052AC4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100052C7C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100052C7C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100052D10(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100052EE8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100052EE8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100052D10(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100052E84(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100052E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100004F7C(&qword_100119030);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100052EE8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004F7C(&qword_100119030);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100053034(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100053070(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10000C9C8(a1, v1);
  return dispatch thunk of LibraryPlaylistInternalSortProperties.lastModifiedDate.getter(v1, v2);
}

uint64_t sub_1000530B4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000C9C8(a1, v3);
  result = dispatch thunk of LibraryPlaylistInternalFilter.isEditable.getter(v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1000530F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100119028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100053140@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000C9C8(a1, v3);
  result = dispatch thunk of LibraryPlaylistSortProperties.name.getter(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100053184(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10005322C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000531A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100053414(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000531BC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000535DC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000531D8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100053738(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000531F4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000538C0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100053210(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100053A28(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10005322C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100004F7C(&qword_100119098);
  v11 = *(_QWORD *)(sub_100004F7C(&qword_100119088) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100004F7C(&qword_100119088);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21, v22, v8, v18);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100053414(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004F7C(&qword_100119080);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100053594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100119088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000535DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004F7C(&qword_1001190A0);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100053738(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004F7C(&qword_100119100);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100004F7C(&qword_100117508);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000538C0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004F7C(qword_100119108);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100053A28(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100004F7C(&qword_1001190A8);
  v11 = *(_QWORD *)(type metadata accessor for StreamingService(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for StreamingService(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21, v22, v8, v18);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100053C08(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  char v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;
  _QWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v7 = type metadata accessor for Playlist(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_100119088);
  v12 = __chkstk_darwin(v11);
  v15 = (_QWORD *)((char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease(a1);
  LODWORD(v65) = a2;
  v61[1] = v3;
  v62 = v16;
  v17 = (char *)v15 + *(int *)(v12 + 48);
  v61[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v61[0];
  v67 = *(_QWORD *)(v13 + 72);
  v64 = a1;
  swift_bridgeObjectRetain(a1);
  sub_1000540AC(v18, (uint64_t)v15);
  v20 = v15[1];
  v72 = *v15;
  v19 = v72;
  v73 = v20;
  v63 = v8;
  v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v68 = v7;
  v69 = v10;
  v66 = v17;
  v21(v10, v17, v7);
  v22 = (_QWORD *)*a3;
  v24 = sub_10009D490(v19, v20);
  v25 = v22[2];
  v26 = (v23 & 1) == 0;
  v27 = v25 + v26;
  if (__OFADD__(v25, v26))
    goto LABEL_23;
  v28 = v23;
  if (v22[3] >= v27)
  {
    if ((v65 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1000540F4();
      if ((v28 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v36 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v37 = (uint64_t *)(v36[6] + 16 * v24);
    *v37 = v19;
    v37[1] = v20;
    v38 = v36[7];
    v65 = *(_QWORD *)(v63 + 72);
    v39 = v68;
    v21((char *)(v38 + v65 * v24), v69, v68);
    v40 = v36[2];
    v41 = __OFADD__(v40, 1);
    v42 = v40 + 1;
    if (v41)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v36[2] = v42;
    v43 = v62 - 1;
    if (v62 == 1)
      return swift_bridgeObjectRelease_n(v64, 2);
    v44 = v64 + v67 + v61[0];
    while (1)
    {
      sub_1000540AC(v44, (uint64_t)v15);
      v46 = v15[1];
      v72 = *v15;
      v45 = v72;
      v73 = v46;
      v21(v69, v66, v39);
      v47 = (_QWORD *)*a3;
      v48 = sub_10009D490(v45, v46);
      v50 = v47[2];
      v51 = (v49 & 1) == 0;
      v41 = __OFADD__(v50, v51);
      v52 = v50 + v51;
      if (v41)
        break;
      v53 = v49;
      if (v47[3] < v52)
      {
        sub_100054350(v52, 1);
        v48 = sub_10009D490(v45, v46);
        if ((v53 & 1) != (v54 & 1))
          goto LABEL_25;
      }
      if ((v53 & 1) != 0)
        goto LABEL_10;
      v55 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v48 >> 6) + 64) |= 1 << v48;
      v56 = (uint64_t *)(v55[6] + 16 * v48);
      *v56 = v45;
      v56[1] = v46;
      v39 = v68;
      v21((char *)(v55[7] + v65 * v48), v69, v68);
      v57 = v55[2];
      v41 = __OFADD__(v57, 1);
      v58 = v57 + 1;
      if (v41)
        goto LABEL_24;
      v55[2] = v58;
      v44 += v67;
      if (!--v43)
        return swift_bridgeObjectRelease_n(v64, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100054350(v27, v65 & 1);
  v29 = sub_10009D490(v19, v20);
  if ((v28 & 1) == (v30 & 1))
  {
    v24 = v29;
    if ((v28 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v32 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v32);
    v74 = v32;
    swift_errorRetain(v32);
    v33 = sub_100004F7C(&qword_1001174D8);
    if ((swift_dynamicCast(v33, &v74, v33, &type metadata for _MergeError, 0) & 1) == 0)
    {
      v34 = v64;
      swift_bridgeObjectRelease(v64);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v69, v68);
      v35 = v73;
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v35);
      return swift_errorRelease(v74);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v70 = 0;
  v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v59._object = (void *)0x80000001000DAC20;
  v59._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v59);
  _print_unlocked<A, B>(_:_:)(&v72, &v70, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v60._countAndFlagsBits = 39;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v70, v71, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000540AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100119088);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000540F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for Playlist(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004F7C(&qword_100119090);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (_QWORD *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    swift_bridgeObjectRetain(v20);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    swift_release(v4);
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_100054350(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[9];

  v3 = v2;
  v47 = type metadata accessor for Playlist(0);
  v6 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100004F7C(&qword_100119090);
  v45 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v42 = v3;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v44 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v43 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  v16 = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return;
    }
    if (v22 >= v43)
      goto LABEL_36;
    v23 = v44[v22];
    ++v17;
    if (!v23)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v43)
        goto LABEL_36;
      v23 = v44[v17];
      if (!v23)
        break;
    }
LABEL_23:
    v14 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v8 + 56);
    v26 = v8;
    v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v6 + 72);
    v31 = v25 + v30 * v21;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 32))(v46, v31, v47, v16);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v46, v31, v47, v16);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v48);
    String.hash(into:)(v48, v29, v28);
    v32 = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v10 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v46, v47);
    ++*(_QWORD *)(v10 + 16);
    v8 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v43)
  {
    v23 = v44[v24];
    if (!v23)
    {
      while (1)
      {
        v17 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v17 >= v43)
          goto LABEL_36;
        v23 = v44[v17];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v17 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v8);
  v3 = v42;
  if ((v45 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v8 + 32);
    if (v40 >= 64)
      bzero(v44, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v44 = -1 << v40;
    *(_QWORD *)(v8 + 16) = 0;
  }
LABEL_41:
  swift_release(v8);
  *v3 = v10;
}

uint64_t sub_1000546B8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000546DC()
{
  uint64_t v0;

  return sub_100050FFC(v0);
}

uint64_t sub_1000546E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100054708()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100054728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for LazyView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyView);
}

uint64_t sub_10005473C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_100054744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(void);
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void (*)(void))__chkstk_darwin(v6);
  v11 = (char *)&v14 - v10;
  v9();
  sub_100093E10((uint64_t)v8, a2, (uint64_t)v11);
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, a2);
  sub_100091208((uint64_t)v11, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, a2);
}

uint64_t sub_10005481C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_100054744(*v2, *(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_10005482C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t *v6;
  _QWORD v8[3];

  KeyPath = swift_getKeyPath(&unk_1000D3F78, a1);
  v8[0] = v2;
  v5 = sub_1000559F0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state);
  swift_beginAccess(v2 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state, v8, 0, 0);
  return sub_100024E88(v6, a2);
}

uint64_t sub_1000548C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[28] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[29] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[30] = v3;
  v1[31] = v4;
  return swift_task_switch(sub_100054930, v3, v4);
}

uint64_t sub_100054930()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  void *v3;
  NSString v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  if (qword_100116038 != -1)
    swift_once(&qword_100116038, sub_100073F7C);
  v1 = *(_QWORD *)algn_10011A5D8;
  v0[32] = *(_QWORD *)algn_10011A5D8;
  v2 = objc_allocWithZone((Class)LSApplicationWorkspace);
  swift_bridgeObjectRetain(v1);
  v0[33] = objc_msgSend(v2, "init");
  v3 = (void *)objc_opt_self(APApplication);
  swift_bridgeObjectRetain(v1);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v5 = objc_msgSend(v3, "applicationWithBundleIdentifier:", v4);
  v0[34] = v5;

  v8 = (uint64_t (*)(uint64_t))((char *)&dword_10011A5E0 + dword_10011A5E0);
  v6 = (_QWORD *)swift_task_alloc(unk_10011A5E4);
  v0[35] = v6;
  *v6 = v0;
  v6[1] = sub_100054A50;
  return v8((uint64_t)v5);
}

uint64_t sub_100054A50(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 280);
  *(_QWORD *)(*v2 + 288) = v1;
  swift_task_dealloc(v5);
  v7 = *(void **)(v4 + 264);
  v6 = *(void **)(v4 + 272);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 256));

  if (v1)
  {
    swift_errorRelease(v1);
    v8 = *(_QWORD *)(v4 + 240);
    v9 = *(_QWORD *)(v4 + 248);
    v10 = sub_100054C3C;
  }
  else
  {
    *(_BYTE *)(v4 + 352) = a1 & 1;
    v8 = *(_QWORD *)(v4 + 240);
    v9 = *(_QWORD *)(v4 + 248);
    v10 = sub_100054AEC;
  }
  return swift_task_switch(v10, v8, v9);
}

uint64_t sub_100054AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  unint64_t v7;
  __n128 v9;

  if (*(_BYTE *)(v2 + 352) == 1)
  {
    v3 = *(_QWORD *)(v2 + 288);
    v4 = *(_QWORD *)(v2 + 224);
    *(_QWORD *)(v2 + 16) = 1;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_QWORD *)(v2 + 56) = 0;
    KeyPath = swift_getKeyPath(&unk_1000D3F78, a2);
    v6 = swift_task_alloc(32);
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v2 + 16;
    *(_QWORD *)(v2 + 296) = OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel___observationRegistrar;
    *(_QWORD *)(v2 + 208) = v4;
    v7 = sub_1000559F0();
    *(_QWORD *)(v2 + 304) = v7;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 208, KeyPath, sub_100025C4C, v6, (char *)&type metadata for () + 8, v7);
    *(_QWORD *)(v2 + 312) = v3;
    swift_release(KeyPath);
    swift_task_dealloc(v6);
    sub_100025C64((unint64_t *)(v2 + 16));
    *(_QWORD *)(v2 + 320) = *(_QWORD *)(v4 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_libraryController);
    return swift_task_switch(sub_100054C84, 0, 0);
  }
  else
  {
    v9 = swift_release(*(_QWORD *)(v2 + 232));
    (*(void (**)(__n128))(*(_QWORD *)(v2 + 224)
                                   + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler))(v9);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_100054C3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 232));
  (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 224)
                                  + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler))(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054C84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 320);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 32);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 328) = v5;
  *v5 = v0;
  v5[1] = sub_100054D00;
  return v7(v2, v3);
}

uint64_t sub_100054D00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100054D58, *(_QWORD *)(v2 + 240), *(_QWORD *)(v2 + 248));
}

uint64_t sub_100054D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 336);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 16))
      return swift_task_switch(sub_100054E60, 0, 0);
    swift_bridgeObjectRelease(v1);
  }
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 232));
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  KeyPath = swift_getKeyPath(&unk_1000D3F78, v5);
  v7 = swift_task_alloc(32);
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = v0 + 112;
  *(_QWORD *)(v0 + 200) = v4;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 200, KeyPath, sub_100055AF4, v7, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  swift_task_dealloc(v7);
  sub_100025C64((unint64_t *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100054E60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 320);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 40);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 344) = v5;
  *v5 = v0;
  v5[1] = sub_100054EF0;
  return v7(v0 + 160, v2, v3);
}

uint64_t sub_100054EF0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 344));
  return swift_task_switch(sub_100054F3C, *(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 248));
}

uint64_t sub_100054F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 232));
  *(_QWORD *)(v0 + 64) = v1;
  sub_100055A38(v0 + 160, v0 + 72);
  KeyPath = swift_getKeyPath(&unk_1000D3F78, v4);
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v0 + 64;
  *(_QWORD *)(v0 + 216) = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 216, KeyPath, sub_100055AF4, v6, (char *)&type metadata for () + 8, v2);
  swift_release(KeyPath);
  swift_task_dealloc(v6);
  sub_100025C64((unint64_t *)(v0 + 64));
  sub_100055A80(v0 + 160);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100055020(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return swift_task_switch(sub_10005503C, 0, 0);
}

uint64_t sub_10005503C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = *(_QWORD **)(v0[5] + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_libraryController);
  v2 = v1[6];
  v3 = v1[7];
  sub_10000C9C8(v1 + 3, v2);
  v4 = *(int **)(v3 + 48);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[6] = v5;
  *v5 = v0;
  v5[1] = sub_1000550CC;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[3], v0[4], v2, v3);
}

uint64_t sub_1000550CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000551FC;
  else
    v3 = sub_100055130;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100055130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 64) = objc_msgSend(objc_allocWithZone((Class)UINotificationFeedbackGenerator), "init");
  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 72) = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000551B4, v2, v3);
}

uint64_t sub_1000551B4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 72));
  objc_msgSend(v1, "notificationOccurred:", 0);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000551FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for Logger(0);
  sub_10000B5E8(v2, (uint64_t)qword_100124478);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Adding song to playlist failed: %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000553C8(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state, v5, 33, 0);
  sub_100055AC0(a2, v3);
  return swift_endAccess(v5);
}

uint64_t sub_100055430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_appleMusicBaseURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_onDismissHandler + 8));
  sub_100025C64((unint64_t *)(v0 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel__state));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel_libraryController));
  v3 = v0 + OBJC_IVAR____TtC16MusicRecognition22AddToPlaylistViewModel___observationRegistrar;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000554DC()
{
  return type metadata accessor for AddToPlaylistViewModel(0);
}

uint64_t type metadata accessor for AddToPlaylistViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1001191D0;
  if (!qword_1001191D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AddToPlaylistViewModel);
  return result;
}

uint64_t sub_100055520(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for () + 64;
    v5[2] = "0";
    v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      result = swift_updateClassMetadata2(a1, 256, 5, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

unint64_t destroy for AddToPlaylistViewModel.State(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    result = swift_bridgeObjectRelease(result);
    if (a1[4])
      return _s16MusicRecognition11AnyPlaylistVwxx_0(a1 + 1);
  }
  return result;
}

uint64_t initializeWithCopy for AddToPlaylistViewModel.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  }
  else
  {
    *(_QWORD *)a1 = v4;
    v5 = a2 + 1;
    v6 = a2[4];
    swift_bridgeObjectRetain(v4);
    if (v6)
    {
      v7 = a2[5];
      *(_QWORD *)(a1 + 32) = v6;
      *(_QWORD *)(a1 + 40) = v7;
      (**(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1 + 8, (uint64_t)(a2 + 1), v6);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 8) = *v5;
      *(_OWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 40) = a2[5];
    }
  }
  return a1;
}

uint64_t assignWithCopy for AddToPlaylistViewModel.State(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(_QWORD *)a1 = v5;
      v6 = a1 + 8;
      v7 = (__int128 *)((char *)a2 + 8);
      v9 = *((_QWORD *)a2 + 4);
      swift_bridgeObjectRetain(v5);
      if (v9)
      {
        *(_QWORD *)(a1 + 32) = v9;
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 8, (uint64_t)a2 + 8, v9);
        return a1;
      }
LABEL_14:
      v12 = *v7;
      v13 = v7[1];
      *(_QWORD *)(v6 + 32) = *((_QWORD *)v7 + 4);
      *(_OWORD *)v6 = v12;
      *(_OWORD *)(v6 + 16) = v13;
      return a1;
    }
LABEL_11:
    v10 = *a2;
    v11 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)a1 = v10;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    if (*(_QWORD *)(a1 + 32))
      _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  *(_QWORD *)a1 = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = a1 + 8;
  v7 = (__int128 *)((char *)a2 + 8);
  v8 = *((_QWORD *)a2 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 8, (uint64_t)a2 + 8);
      return a1;
    }
    goto LABEL_14;
  }
  if (v8)
  {
    sub_100012EA4((_QWORD *)(a1 + 8), (_QWORD *)a2 + 1);
  }
  else
  {
    sub_1000256B8((_QWORD *)(a1 + 8));
    v14 = *((_QWORD *)a2 + 5);
    v15 = *(__int128 *)((char *)a2 + 24);
    *(_OWORD *)v6 = *v7;
    *(_OWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 40) = v14;
  }
  return a1;
}

__n128 initializeWithTake for AddToPlaylistViewModel.State(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AddToPlaylistViewModel.State(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_QWORD *)a1;
  if (v4 < 0xFFFFFFFF)
  {
LABEL_8:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease(v4);
    if (*(_QWORD *)(a1 + 32))
      _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(a1 + 8));
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(v4);
  if (*(_QWORD *)(a1 + 32))
  {
    if (*(_QWORD *)(a2 + 32))
      _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(a1 + 8));
    else
      sub_1000256B8((_QWORD *)(a1 + 8));
  }
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AddToPlaylistViewModel.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AddToPlaylistViewModel.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_100055994(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1000559AC(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AddToPlaylistViewModel.State()
{
  return &type metadata for AddToPlaylistViewModel.State;
}

unint64_t sub_1000559F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117A00;
  if (!qword_100117A00)
  {
    v1 = type metadata accessor for AddToPlaylistViewModel(255);
    result = swift_getWitnessTable(&unk_1000D3F58, v1);
    atomic_store(result, (unint64_t *)&qword_100117A00);
  }
  return result;
}

uint64_t sub_100055A38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100117A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055A80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004F7C(&qword_100117A08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100055AC0(__int128 *a1, uint64_t a2)
{
  assignWithCopy for AddToPlaylistViewModel.State(a2, a1);
  return a2;
}

uint64_t sub_100055AF4()
{
  return sub_100025C4C();
}

uint64_t sub_100055B08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[4] = v0;
  v2 = type metadata accessor for ActivityUIDismissalPolicy(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004F7C(&qword_100119390);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100055B8C, 0, 0);
}

uint64_t sub_100055B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000B5E8(v1, (uint64_t)qword_100124478);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Calling end activity", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 32);

  v7 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v0 + 72) = v7;
  if (v7)
  {
    v8 = swift_retain_n(v7, 3);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      *(_DWORD *)v11 = 136315138;
      v24 = v12;
      *(_QWORD *)(v0 + 16) = v7;
      swift_retain(v7);
      v13 = sub_100004F7C(&qword_1001193A0);
      v14 = String.init<A>(describing:)(v0 + 16, v13);
      v16 = v15;
      *(_QWORD *)(v0 + 24) = sub_1000529F4(v14, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v16);
      swift_release_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Ending activity %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_release_n(v7, 2);
    }

    v19 = *(_QWORD *)(v0 + 64);
    dispatch thunk of Activity.content.getter();
    v20 = sub_100004F7C(&qword_100119398);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
    static ActivityUIDismissalPolicy.immediate.getter(v21);
    v23 = (char *)&async function pointer to dispatch thunk of Activity.end(_:dismissalPolicy:)
        + async function pointer to dispatch thunk of Activity.end(_:dismissalPolicy:);
    v22 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Activity.end(_:dismissalPolicy:)
                                     + 1));
    *(_QWORD *)(v0 + 80) = v22;
    *v22 = v0;
    v22[1] = sub_100055E7C;
    return ((uint64_t (*)(_QWORD, _QWORD))v23)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 56));
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100055E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_10000526C(v2, &qword_100119390);
  return swift_task_switch(sub_100055F00, 0, 0);
}

uint64_t sub_100055F00()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100055F40()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[4] = v0;
  v2 = type metadata accessor for ActivityPresentationOptions(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004F7C(&qword_100117528);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004F7C(&qword_100119398);
  v1[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[10] = v6;
  v1[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100055FF0, 0, 0);
}

void sub_100055FF0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = *(void **)(*(_QWORD *)(v0 + 32) + 24);
  if (v1)
    objc_msgSend(v1, "invalidate");
  sub_100004F7C(&qword_1001193A0);
  v2 = static Activity.activities.getter();
  v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(v2);
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v3);
  if (v4)
    goto LABEL_17;
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v5 = type metadata accessor for Logger(0);
  v69 = sub_10000B5E8(v5, (uint64_t)qword_100124478);
  v6 = Logger.logObject.getter(v69);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Requesting MusicRecognitionActivity", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10 = objc_msgSend(v9, "bundleIdentifier");

  if (v10)
  {
    v11 = *(_QWORD *)(v0 + 64);
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v67 = v12;

    v13 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
    v14 = sub_1000576EC();
    v15 = sub_100057734();
    v16 = sub_10005777C();
    v17 = ActivityContent.init(state:staleDate:relevanceScore:)(v16, v11, &type metadata for MusicRecognitionActivityAttributes.ContentState, v14, v15, v16, 0.0);
    LODWORD(v15) = SBSIsSystemApertureAvailable(v17);
    v18 = sub_100004F7C(&qword_1001193D0);
    v19 = type metadata accessor for ActivityPresentationOptions.ActivityPresentationDestination(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = (v22 + 32) & ~v22;
    v24 = v22 | 7;
    v64 = (uint64_t *)(v0 + 24);
    if ((_DWORD)v15)
    {
      v25 = swift_allocObject(v18, v23 + 2 * v21, v24);
      *(_OWORD *)(v25 + 16) = xmmword_1000D32A0;
      v26 = *(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104);
      v26(v25 + v23, enum case for ActivityPresentationOptions.ActivityPresentationDestination.systemAperture(_:), v19);
      v27 = v25 + v23 + v21;
    }
    else
    {
      v25 = swift_allocObject(v18, v23 + 3 * v21, v24);
      *(_OWORD *)(v25 + 16) = xmmword_1000D2320;
      v26 = *(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104);
      v26(v25 + v23, enum case for ActivityPresentationOptions.ActivityPresentationDestination.banner(_:), v19);
      v26(v25 + v23 + v21, enum case for ActivityPresentationOptions.ActivityPresentationDestination.lockscreen(_:), v19);
      v27 = v25 + v23 + 2 * v21;
    }
    v26(v27, enum case for ActivityPresentationOptions.ActivityPresentationDestination.ambient(_:), v19);
    v28 = *(_QWORD *)(v0 + 88);
    v29 = *(_QWORD *)(v0 + 56);
    ActivityPresentationOptions.init(destinations:)(v25);
    v30 = ActivityPresentationOptions.shouldSuppressAlertContentOnLockScreen.setter(0);
    v31 = static Activity.request(attributes:content:presentationOptions:platterTarget:contentSourceRequests:isEphemeral:isUnbounded:)(v30, v28, v29, v65, v67, 1, _swiftEmptyArrayStorage, 1, 0);
    v32 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRelease(v67);
    v33 = *(_QWORD *)(v32 + 16);
    *(_QWORD *)(v32 + 16) = v31;
    swift_release(v33);
    v35 = *(_QWORD *)(v32 + 16);
    if (v35)
    {
      v36 = swift_retain_n(v35, 3);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.debug.getter();
      v39 = os_log_type_enabled(v37, v38);
      v41 = *(_QWORD *)(v0 + 80);
      v40 = *(_QWORD *)(v0 + 88);
      v42 = *(_QWORD *)(v0 + 72);
      v43 = *(_QWORD *)(v0 + 56);
      v70 = *(_QWORD *)(v0 + 48);
      v44 = *(_QWORD *)(v0 + 40);
      if (v39)
      {
        v68 = *(_QWORD *)(v0 + 88);
        v66 = *(_QWORD *)(v0 + 80);
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v63 = v43;
        v46 = swift_slowAlloc(32, -1);
        v71 = v46;
        *(_DWORD *)v45 = 136315138;
        v47 = Activity.id.getter(v46);
        v49 = v48;
        *v64 = sub_1000529F4(v47, v48, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v0 + 32, v45 + 4, v45 + 12);
        swift_bridgeObjectRelease(v49);
        swift_release_n(v35, 2);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Successfully requested activity with id %s", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);

        v50 = swift_release(v35);
        (*(void (**)(uint64_t, uint64_t, __n128))(v70 + 8))(v63, v44, v50);
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v42);
      }
      else
      {

        swift_release_n(v35, 3);
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v43, v44);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      }
    }
    else
    {
      v53 = Logger.logObject.getter(v34);
      v54 = static os_log_type_t.error.getter();
      v55 = os_log_type_enabled(v53, v54);
      v57 = *(_QWORD *)(v0 + 80);
      v56 = *(_QWORD *)(v0 + 88);
      v58 = *(_QWORD *)(v0 + 72);
      v60 = *(_QWORD *)(v0 + 48);
      v59 = *(_QWORD *)(v0 + 56);
      v61 = *(_QWORD *)(v0 + 40);
      if (v55)
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "No activity was returned", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    }
LABEL_17:
    v51 = *(_QWORD *)(v0 + 56);
    v52 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v52);
    swift_task_dealloc(v51);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  __break(1u);
}

uint64_t sub_100056730(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 + 72) = a2;
  *(_QWORD *)(v4 + 80) = v3;
  *(_BYTE *)(v4 + 168) = a3;
  *(_QWORD *)(v4 + 64) = a1;
  v5 = sub_100004F7C(&qword_1001193B0);
  *(_QWORD *)(v4 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100117528);
  *(_QWORD *)(v4 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_100119398);
  *(_QWORD *)(v4 + 104) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 112) = v8;
  *(_QWORD *)(v4 + 120) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 128) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  *(_QWORD *)(v4 + 136) = v10;
  *(_QWORD *)(v4 + 144) = v11;
  return swift_task_switch(sub_100056818, v10, v11);
}

uint64_t sub_100056818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  double v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000B5E8(v1, (uint64_t)qword_100124478);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Calling update activity", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 80);

  v7 = *(void **)(v6 + 24);
  if (v7)
    objc_msgSend(v7, "invalidate");
  if (*(_BYTE *)(v0 + 168))
    goto LABEL_8;
  v9 = objc_msgSend(*(id *)(v0 + 64), "mediaItems");
  v10 = sub_10001DE0C();
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  if ((unint64_t)v11 >> 62)
  {
    v43 = v11 < 0 ? v11 : v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  sub_100010110(*(void **)(v0 + 64), *(void **)(v0 + 72), 0);
  swift_bridgeObjectRelease(v11);
  if (!v12)
LABEL_8:
    v8 = 5.0;
  else
    v8 = 180.0;
  v13 = *(_QWORD *)(v0 + 72);
  v14 = *(_QWORD *)(v0 + 80);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(unsigned __int8 *)(v0 + 168);
  v17 = (void *)objc_opt_self(NSTimer);
  *(_QWORD *)(v0 + 48) = sub_100057890;
  *(_QWORD *)(v0 + 56) = v14;
  *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_100057368;
  *(_QWORD *)(v0 + 40) = &unk_10010AA40;
  v18 = _Block_copy((const void *)(v0 + 16));
  v19 = *(_QWORD *)(v0 + 56);
  swift_retain(v14);
  swift_release(v19);
  v20 = objc_msgSend(v17, "scheduledTimerWithTimeInterval:repeats:block:", 0, v18, v8);
  _Block_release(v18);
  v21 = *(void **)(v6 + 24);
  *(_QWORD *)(v6 + 24) = v20;

  if ((SHSession.Result.wasCancelled.getter(v15, v13, v16) & 1) != 0)
  {
    swift_release(*(_QWORD *)(v0 + 128));
LABEL_22:
    v35 = *(_QWORD *)(v0 + 88);
    v36 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v36);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
    swift_release(*(_QWORD *)(v0 + 128));
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No activity identifier found, unable to assert", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    goto LABEL_22;
  }
  v24 = *(unsigned __int8 *)(v0 + 168);
  v25 = swift_retain(*(_QWORD *)(v22 + 16));
  v26 = Activity.id.getter(v25);
  v28 = v27;
  swift_release(v23);
  if (!v24)
  {
    v30 = 1;
    goto LABEL_24;
  }
  if (v24 == 1)
  {
    v30 = 0;
LABEL_24:
    v29 = sub_1000578DC(v30);
  }
  if (SBUIIsSystemApertureEnabled(v29))
  {
    v38 = *(_QWORD *)(v0 + 80);
    v39 = swift_allocObject(&unk_10010AA78, 24, 7);
    swift_weakInit(v39 + 16, v38);
    v40 = objc_allocWithZone((Class)type metadata accessor for ProminentPresentationAssertion(0));
    v41 = ProminentPresentationAssertion.init(explanation:activityIdentifier:duration:invalidationHandler:)(0xD000000000000016, 0x80000001000DAD80, v26, v28, sub_1000578D4, v39, 5.0);
    v42 = *(void **)(v38 + 32);
    *(_QWORD *)(v38 + 32) = v41;

  }
  else
  {
    swift_bridgeObjectRelease(v28);
  }
  return swift_task_switch(sub_100056C40, 0, 0);
}

uint64_t sub_100056C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v14;
  char *v15;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
  *(_QWORD *)(v0 + 152) = v1;
  if (!v1)
    return swift_task_switch(sub_100056E74, *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(void **)(v0 + 64);
  v14 = *(void **)(v0 + 72);
  v5 = *(_BYTE *)(v0 + 168);
  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
  v7 = sub_1000576EC();
  v8 = sub_100057734();
  v9 = sub_10005777C();
  v10 = swift_retain(v1);
  ActivityContent.init(state:staleDate:relevanceScore:)(v10, v3, &type metadata for MusicRecognitionActivityAttributes.ContentState, v7, v8, v9, 0.0);
  sub_10005B3A0(v4, v14, v5, v2);
  v11 = type metadata accessor for AlertConfiguration(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 0, 1, v11);
  v15 = (char *)&async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:)
      + async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:);
  v12 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Activity.update(_:alertConfiguration:)
                                   + 1));
  *(_QWORD *)(v0 + 160) = v12;
  *v12 = v0;
  v12[1] = sub_100056DB4;
  return ((uint64_t (*)(_QWORD, _QWORD))v15)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
}

uint64_t sub_100056DB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  sub_10000526C(v1, &qword_1001193B0);
  return swift_task_switch(sub_100056E1C, 0, 0);
}

uint64_t sub_100056E1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;

  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[13];
  v4 = swift_release(v0[19]);
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v1, v3, v4);
  return swift_task_switch(sub_100056E74, v0[17], v0[18]);
}

uint64_t sub_100056E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 128));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100056EC0()
{
  return 0;
}

uint64_t sub_100056ECC()
{
  return 0;
}

void sub_100056ED8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100056EE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100057808();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100056F0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100057808();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100056F34(_QWORD *a1)
{
  return _s16MusicRecognition11AnyPlaylistVwxx_0(a1);
}

uint64_t sub_100056F58(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100057098(a1, a2, a3, &qword_100119368, (uint64_t (*)(void))sub_100057808, (uint64_t)&type metadata for MusicRecognitionActivityAttributes.ContentState.CodingKeys);
}

Swift::Int sub_100056F84()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100056FB8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100056FE8()
{
  return 1;
}

uint64_t sub_100056FF0@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_10005701C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005784C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100057044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005784C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005706C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100057098(a1, a2, a3, &qword_100119378, (uint64_t (*)(void))sub_10005784C, (uint64_t)&type metadata for MusicRecognitionActivityAttributes.CodingKeys);
}

uint64_t sub_100057098(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = sub_100004F7C(a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000C9C8(a1, v13);
  v15 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v15, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

double sub_100057168(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject(&unk_10010AA78, 24, 7);
  swift_weakInit(v7 + 16, a2);
  v8 = (_QWORD *)swift_allocObject(&unk_10010AAA0, 40, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v7;
  v9 = sub_1000AA064((uint64_t)v5, (uint64_t)&unk_1001193C0, (uint64_t)v8);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

uint64_t sub_100057244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a4;
  return swift_task_switch(sub_10005725C, 0, 0);
}

uint64_t sub_10005725C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_10011938C);
    *(_QWORD *)(v0 + 64) = v3;
    *v3 = v0;
    v3[1] = sub_1000572F0;
    return sub_100055B08();
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000572F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release(v1);
  return swift_task_switch(sub_10005734C, 0, 0);
}

uint64_t sub_10005734C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100057368(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_1000573B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t Strong;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];

  v5 = a3 + 16;
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v6 = type metadata accessor for Logger(0);
  sub_10000B5E8(v6, (uint64_t)qword_100124478);
  v7 = a1;
  swift_errorRetain(a2);
  v8 = v7;
  v9 = swift_errorRetain(a2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = (_QWORD *)swift_slowAlloc(16, -1);
    *(_DWORD *)v12 = 138412546;
    v20 = (uint64_t)v8;
    v19 = v5;
    v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v12 + 4, v12 + 12);
    *v13 = v8;

    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(a2);
    v15 = _swift_stdlib_bridgeErrorToNSError(a2);
    v20 = v15;
    v5 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v12 + 14, v12 + 22);
    v13[1] = v15;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Presented prominent assertion %@ error %@", (uint8_t *)v12, 0x16u);
    v16 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v13, 2, v16);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  swift_beginAccess(v5, &v20, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v18 = *(void **)(Strong + 32);
    *(_QWORD *)(Strong + 32) = 0;
    swift_release(Strong);

  }
}

uint64_t sub_1000575F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for MusicRecognitionActivity()
{
  return objc_opt_self(_TtC16MusicRecognition24MusicRecognitionActivity);
}

ValueMetadata *type metadata accessor for MusicRecognitionActivityAttributes()
{
  return &type metadata for MusicRecognitionActivityAttributes;
}

unint64_t sub_10005765C()
{
  unint64_t result;

  result = qword_100119338;
  if (!qword_100119338)
  {
    result = swift_getWitnessTable(&unk_1000D403C, &type metadata for MusicRecognitionActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_100119338);
  }
  return result;
}

unint64_t sub_1000576A4()
{
  unint64_t result;

  result = qword_100119340;
  if (!qword_100119340)
  {
    result = swift_getWitnessTable(&unk_1000D4014, &type metadata for MusicRecognitionActivityAttributes);
    atomic_store(result, (unint64_t *)&qword_100119340);
  }
  return result;
}

unint64_t sub_1000576EC()
{
  unint64_t result;

  result = qword_100119348;
  if (!qword_100119348)
  {
    result = swift_getWitnessTable(&unk_1000D4144, &type metadata for MusicRecognitionActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_100119348);
  }
  return result;
}

unint64_t sub_100057734()
{
  unint64_t result;

  result = qword_100119350;
  if (!qword_100119350)
  {
    result = swift_getWitnessTable(&unk_1000D411C, &type metadata for MusicRecognitionActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_100119350);
  }
  return result;
}

unint64_t sub_10005777C()
{
  unint64_t result;

  result = qword_100119358;
  if (!qword_100119358)
  {
    result = swift_getWitnessTable(&unk_1000D40B4, &type metadata for MusicRecognitionActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_100119358);
  }
  return result;
}

unint64_t sub_1000577C4()
{
  unint64_t result;

  result = qword_100119360;
  if (!qword_100119360)
  {
    result = swift_getWitnessTable(&unk_1000D40F4, &type metadata for MusicRecognitionActivityAttributes.ContentState);
    atomic_store(result, (unint64_t *)&qword_100119360);
  }
  return result;
}

unint64_t sub_100057808()
{
  unint64_t result;

  result = qword_100119370;
  if (!qword_100119370)
  {
    result = swift_getWitnessTable(&unk_1000D4274, &type metadata for MusicRecognitionActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100119370);
  }
  return result;
}

unint64_t sub_10005784C()
{
  unint64_t result;

  result = qword_100119380;
  if (!qword_100119380)
  {
    result = swift_getWitnessTable(&unk_1000D4224, &type metadata for MusicRecognitionActivityAttributes.CodingKeys);
    atomic_store(result, &qword_100119380);
  }
  return result;
}

double sub_100057890(uint64_t a1)
{
  uint64_t v1;

  return sub_100057168(a1, v1);
}

uint64_t sub_100057898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000578A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000578B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000578D4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000573B8(a1, a2, v2);
}

uint64_t sub_1000578DC(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  __int16 v13;
  void (*v14)(char *, uint64_t);
  _BYTE v16[24];

  v2 = type metadata accessor for IntentSystemContext.Source(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100004F7C(&qword_100116E28);
  __chkstk_darwin(v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_100115EE0 != -1)
    swift_once(&qword_100115EE0, sub_100045C0C);
  v9 = qword_100124510 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin;
  swift_beginAccess(qword_100124510 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer_origin, v16, 0, 0);
  sub_100010AE8(v9, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    return sub_10000526C((uint64_t)v8, &qword_100116E28);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v11 == enum case for IntentSystemContext.Source.app(_:)
    || v11 == enum case for IntentSystemContext.Source.CLI(_:))
  {
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  if (v11 == enum case for IntentSystemContext.Source.siri(_:))
  {
LABEL_12:
    v13 = 3;
LABEL_15:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return sub_1000A6CBC(a1 & 1u | (v13 << 8), 0xD000000000000028, 0x80000001000DADA0);
  }
  if (v11 == enum case for IntentSystemContext.Source.shortcuts(_:))
  {
    v13 = 5;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.testing(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (v11 == enum case for IntentSystemContext.Source.actionButton(_:))
  {
    v13 = 1;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.spotlight(_:))
  {
    v13 = 4;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.controlCenter(_:))
  {
    v13 = 0;
    goto LABEL_15;
  }
  if (v11 == enum case for IntentSystemContext.Source.widget(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (v11 == enum case for IntentSystemContext.Source.assistant(_:))
    goto LABEL_12;
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v14)(v8, v2);
}

uint64_t sub_100057B84()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100057BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1001193BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000101B8;
  v5[5] = a1;
  v5[6] = v4;
  return swift_task_switch(sub_10005725C, 0, 0);
}

ValueMetadata *type metadata accessor for MusicRecognitionActivityAttributes.CodingKeys()
{
  return &type metadata for MusicRecognitionActivityAttributes.CodingKeys;
}

ValueMetadata *type metadata accessor for MusicRecognitionActivityAttributes.ContentState.CodingKeys()
{
  return &type metadata for MusicRecognitionActivityAttributes.ContentState.CodingKeys;
}

ValueMetadata *type metadata accessor for MusicRecognitionActivityAttributes.ContentState()
{
  return &type metadata for MusicRecognitionActivityAttributes.ContentState;
}

unint64_t sub_100057C48()
{
  unint64_t result;

  result = qword_1001193D8;
  if (!qword_1001193D8)
  {
    result = swift_getWitnessTable(&unk_1000D41D4, &type metadata for MusicRecognitionActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001193D8);
  }
  return result;
}

unint64_t sub_100057C90()
{
  unint64_t result;

  result = qword_1001193E0;
  if (!qword_1001193E0)
  {
    result = swift_getWitnessTable(&unk_1000D41FC, &type metadata for MusicRecognitionActivityAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001193E0);
  }
  return result;
}

unint64_t sub_100057CD8()
{
  unint64_t result;

  result = qword_1001193E8;
  if (!qword_1001193E8)
  {
    result = swift_getWitnessTable(&unk_1000D4184, &type metadata for MusicRecognitionActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001193E8);
  }
  return result;
}

unint64_t sub_100057D20()
{
  unint64_t result;

  result = qword_1001193F0;
  if (!qword_1001193F0)
  {
    result = swift_getWitnessTable(&unk_1000D41AC, &type metadata for MusicRecognitionActivityAttributes.ContentState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001193F0);
  }
  return result;
}

uint64_t *sub_100057D68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = sub_100004F7C(&qword_100119448);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = v16;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = v4;
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for ArtistProfileViewModel(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[6];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = v8[7];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v8[8];
    v26 = *(uint64_t *)((char *)a2 + v25);
    *(uint64_t *)((char *)a1 + v25) = v26;
    v27 = *(int *)(v6 + 28);
    v16 = *(uint64_t *)((char *)a2 + v27);
    *(uint64_t *)((char *)a1 + v27) = v16;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_retain(v26);
  }
  swift_retain(v16);
  return a1;
}

double sub_100057EE0(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v2 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v3 = a1 + v2[5];
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v2[7] + 8));
  swift_release(*(_QWORD *)(a1 + v2[8]));
  v6 = *(_QWORD *)(a1 + *(int *)(sub_100004F7C(&qword_100119448) + 28));
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

_QWORD *sub_100057FA0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v6 = v5[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = v5[6];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v5[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = v5[8];
  v22 = *(_QWORD *)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + v21) = v22;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  swift_retain(v22);
  v23 = *(int *)(sub_100004F7C(&qword_100119448) + 28);
  v24 = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  swift_retain(v24);
  return a1;
}

_QWORD *sub_1000580E8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = v6[6];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = v6[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = v6[8];
  v27 = *(_QWORD *)((char *)a2 + v26);
  v28 = *(_QWORD *)((char *)a1 + v26);
  *(_QWORD *)((char *)a1 + v26) = v27;
  swift_retain(v27);
  swift_release(v28);
  v29 = *(int *)(sub_100004F7C(&qword_100119448) + 28);
  v30 = *(_QWORD *)((char *)a1 + v29);
  v31 = *(_QWORD *)((char *)a2 + v29);
  *(_QWORD *)((char *)a1 + v29) = v31;
  swift_retain(v31);
  swift_release(v30);
  return a1;
}

_OWORD *sub_1000582BC(_OWORD *a1, _OWORD *a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v5 = v4[5];
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(_OWORD *)((char *)a1 + v4[6]) = *(_OWORD *)((char *)a2 + v4[6]);
  *(_OWORD *)((char *)a1 + v4[7]) = *(_OWORD *)((char *)a2 + v4[7]);
  *(_QWORD *)((char *)a1 + v4[8]) = *(_QWORD *)((char *)a2 + v4[8]);
  v11 = sub_100004F7C(&qword_100119448);
  *(_QWORD *)((char *)a1 + *(int *)(v11 + 28)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 28));
  return a1;
}

_QWORD *sub_1000583CC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = v6[6];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = v6[7];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  v28 = v6[8];
  v29 = *(_QWORD *)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = *(_QWORD *)((char *)a2 + v28);
  swift_release(v29);
  v30 = *(int *)(sub_100004F7C(&qword_100119448) + 28);
  v31 = *(_QWORD *)((char *)a1 + v30);
  *(_QWORD *)((char *)a1 + v30) = *(_QWORD *)((char *)a2 + v30);
  swift_release(v31);
  return a1;
}

uint64_t sub_100058560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005856C);
}

uint64_t sub_10005856C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100119448);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000585AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000585B8);
}

uint64_t sub_1000585B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100119448);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t _s22ArtistProfileImageViewVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1001194A8;
  if (!qword_1001194A8)
    return swift_getSingletonMetadata(a1, &_s22ArtistProfileImageViewVMn);
  return result;
}

void sub_100058638(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000586A0(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_1000586A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001194B8)
  {
    v2 = type metadata accessor for ArtistProfileViewModel(255);
    v3 = type metadata accessor for State(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001194B8);
  }
}

uint64_t sub_1000586F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DDF8C, 1);
}

uint64_t sub_100058704()
{
  id v0;
  id v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v12[5];

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v1 = objc_msgSend(v0, "colorWithAlphaComponent:", 0.15);

  v2 = Color.init(uiColor:)(v1);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v12, 0, 0, &_swiftEmptyArrayStorage, 0.5, 10.0, 0.0);
  v3 = v12[0];
  v4 = v12[2];
  v5 = v12[3];
  v6 = v12[4];
  v7 = v12[0] * 0.5;
  v8 = swift_retain(v2);
  v9 = static Alignment.center.getter(v8);
  qword_1001193F8 = *(_QWORD *)&v7;
  unk_100119400 = *(_QWORD *)&v3;
  qword_100119408 = *(_QWORD *)&v12[1];
  qword_100119410 = *(_QWORD *)&v4;
  qword_100119418 = *(_QWORD *)&v5;
  qword_100119420 = *(_QWORD *)&v6;
  qword_100119428 = v2;
  word_100119430 = 256;
  qword_100119438 = v9;
  unk_100119440 = v10;
  return swift_release(v2);
}

uint64_t sub_100058804@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v2 = type metadata accessor for ArtistProfileViewModel(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100004F7C(&qword_100119448);
  State.wrappedValue.getter(v4, v5);
  v31 = *(_QWORD *)((char *)v4 + *(int *)(v2 + 32));
  swift_retain(v31);
  v6 = sub_1000589CC((uint64_t)v4);
  v7 = static Alignment.center.getter(v6);
  _FrameLayout.init(width:height:alignment:)(&v32, 0x4050000000000000, 0, 0x4050000000000000, 0, v7, v8);
  v9 = v33;
  v29 = v34;
  v30 = v32;
  v10 = v35;
  v27 = v37;
  v28 = v36;
  if (qword_100115F10 != -1)
    swift_once(&qword_100115F10, sub_100058704);
  v11 = qword_1001193F8;
  v12 = unk_100119400;
  v13 = qword_100119410;
  v14 = qword_100119418;
  v15 = qword_100119420;
  v16 = qword_100119428;
  v17 = word_100119430;
  v18 = HIBYTE(word_100119430);
  v20 = qword_100119438;
  v19 = unk_100119440;
  swift_bridgeObjectRetain(qword_100119418);
  swift_retain(v16);
  v21 = qword_100119408;
  result = static Alignment.center.getter(v22);
  v24 = v30;
  *(_QWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v29;
  *(_BYTE *)(a1 + 32) = v10;
  v25 = v27;
  *(_QWORD *)(a1 + 40) = v28;
  *(_QWORD *)(a1 + 48) = v25;
  *(_WORD *)(a1 + 56) = 256;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  *(_BYTE *)(a1 + 120) = v17;
  *(_BYTE *)(a1 + 121) = v18;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = result;
  *(_QWORD *)(a1 + 152) = v26;
  return result;
}

uint64_t sub_1000589CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ArtistProfileViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100058A0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001194E8;
  if (!qword_1001194E8)
  {
    v1 = sub_1000050C8(&qword_1001194F0);
    sub_100058A90();
    sub_10000522C(&qword_100119518, &qword_100119520, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001194E8);
  }
  return result;
}

unint64_t sub_100058A90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001194F8;
  if (!qword_1001194F8)
  {
    v1 = sub_1000050C8(&qword_100119500);
    sub_100058B14();
    sub_10000522C(&qword_100118900, &qword_100118908, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001194F8);
  }
  return result;
}

unint64_t sub_100058B14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119508;
  if (!qword_100119508)
  {
    v1 = sub_1000050C8(&qword_100119510);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119508);
  }
  return result;
}

unint64_t *initializeBufferWithCopyOfBuffer for CachedAsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_100058BA8(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_100058BA8(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_errorRetain(result & 0x3FFFFFFFFFFFFFFFLL);
  if (!(result >> 62))
    return swift_retain(result);
  return result;
}

unint64_t destroy for CachedAsyncImagePhase(unint64_t *a1)
{
  return sub_100058BD0(*a1);
}

unint64_t sub_100058BD0(unint64_t result)
{
  if (result >> 62 == 1)
    return swift_errorRelease(result & 0x3FFFFFFFFFFFFFFFLL);
  if (!(result >> 62))
    return swift_release(result);
  return result;
}

unint64_t *assignWithCopy for CachedAsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_100058BA8(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_100058BD0(v4);
  return a1;
}

_QWORD *initializeWithTake for CachedAsyncImagePhase(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for CachedAsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_100058BD0(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedAsyncImagePhase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CachedAsyncImagePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100058D10(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_100058D2C(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_100058D3C(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for CachedAsyncImagePhase()
{
  return &type metadata for CachedAsyncImagePhase;
}

void sub_100058D78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_1000D4378;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = &unk_1000D4390;
  sub_100059604(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 0, 5, v4, a1 + 32);
  }
}

unint64_t sub_100058E10(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  __int128 v23;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v18);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    sub_100058BA8(*(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    v23 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    v10 = *(int *)(a3 + 44);
    v11 = (void *)(a1 + v10);
    v12 = (const void *)(a2 + v10);
    v13 = type metadata accessor for URLRequest(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v14 + 48);
    swift_retain(v23);
    swift_retain(v8);
    v16 = swift_retain(v9);
    if (v15(v12, 1, v13, v16))
    {
      v17 = sub_100004F7C(qword_100119528);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v19 = *(int *)(a3 + 48);
    v20 = *(void **)(a2 + v19);
    *(_QWORD *)(a1 + v19) = v20;
    v21 = v20;
  }
  return a1;
}

void sub_100058F60(unint64_t *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  sub_100058BD0(*a1);
  swift_release(a1[1]);
  swift_release(a1[3]);
  swift_release(a1[4]);
  v4 = (char *)a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for URLRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);

}

uint64_t sub_100058FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  __int128 v21;

  v6 = *(_QWORD *)a2;
  sub_100058BA8(*(_QWORD *)a2);
  *(_QWORD *)a1 = v6;
  v21 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v21;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(int *)(a3 + 44);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = type metadata accessor for URLRequest(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v13 + 48);
  swift_retain(v21);
  swift_retain(v7);
  v15 = swift_retain(v8);
  if (v14(v11, 1, v12, v15))
  {
    v16 = sub_100004F7C(qword_100119528);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v17 = *(int *)(a3 + 48);
  v18 = *(void **)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  v19 = v18;
  return a1;
}

unint64_t *sub_10005911C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;

  v6 = *a2;
  sub_100058BA8(*a2);
  v7 = *a1;
  *a1 = v6;
  sub_100058BD0(v7);
  v8 = a1[1];
  v9 = a2[1];
  a1[1] = v9;
  swift_retain(v9);
  swift_release(v8);
  v10 = a2[3];
  v11 = a1[3];
  a1[2] = a2[2];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a1[4];
  v13 = a2[4];
  a1[4] = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = *(int *)(a3 + 44);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for URLRequest(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_100004F7C(qword_100119528);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = *(int *)(a3 + 48);
  v24 = *(void **)((char *)a2 + v23);
  v25 = *(void **)((char *)a1 + v23);
  *(unint64_t *)((char *)a1 + v23) = (unint64_t)v24;
  v26 = v24;

  return a1;
}

uint64_t sub_1000592A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 44);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URLRequest(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100004F7C(qword_100119528);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 48)) = *(_QWORD *)(a2 + *(int *)(a3 + 48));
  return a1;
}

uint64_t sub_100059384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_100058BD0(v6);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_release(v9);
  v10 = *(int *)(a3 + 44);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URLRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_100004F7C(qword_100119528);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = *(int *)(a3 + 48);
  v20 = *(void **)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);

  return a1;
}

uint64_t sub_1000594E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000594F4);
}

uint64_t sub_1000594F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004F7C(qword_100119528);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_100059574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059580);
}

uint64_t sub_100059580(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004F7C(qword_100119528);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CachedAsyncImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CachedAsyncImage);
}

void sub_100059604(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001195B0)
  {
    v2 = type metadata accessor for URLRequest(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001195B0);
  }
}

uint64_t sub_100059658(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000DE00C, 1);
}

uint64_t sub_10005968C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  void (*v25)(unint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t WitnessTable;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, __int128 *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;

  v65 = a1;
  v82 = a2;
  v4 = sub_100004F7C(qword_100119528);
  __chkstk_darwin(v4);
  v72 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v81);
  v85 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for TaskPriority(0);
  v71 = *(_QWORD *)(v84 - 8);
  v7 = __chkstk_darwin(v84);
  v83 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v75 = *(char **)(v9 + 64);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v70 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for _TaskModifier(255);
  v17 = type metadata accessor for ModifiedContent(0, v13, v16);
  v78 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v64 - v18;
  v20 = sub_1000050C8(&qword_1001195B8);
  v79 = v17;
  v80 = type metadata accessor for ModifiedContent(0, v17, v20);
  v77 = *(_QWORD *)(v80 - 8);
  v21 = __chkstk_darwin(v80);
  v74 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v76 = (uint64_t)&v64 - v23;
  v24 = v2;
  v25 = (void (*)(unint64_t))*((_QWORD *)v2 + 2);
  v90 = *v2;
  v26 = sub_100004F7C(&qword_1001195C0);
  State.wrappedValue.getter(&v91, v26);
  v27 = v91;
  v25(v91);
  sub_100058BD0(v27);
  v28 = v9;
  v29 = v65;
  v68 = *(void (**)(char *, __int128 *, uint64_t))(v9 + 16);
  v68(v12, v24, v65);
  v30 = *(unsigned __int8 *)(v9 + 80);
  v31 = (v30 + 32) & ~v30;
  v67 = &v75[v31];
  v66 = v30 | 7;
  v32 = swift_allocObject(&unk_10010AD38, &v75[v31], v30 | 7);
  v33 = *(_QWORD *)(v29 + 24);
  *(_QWORD *)(v32 + 16) = v13;
  *(_QWORD *)(v32 + 24) = v33;
  v69 = v31;
  v34 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32);
  v73 = v12;
  v35 = v12;
  v36 = v29;
  v37 = v34(v32 + v31, v35, v29);
  v38 = v83;
  static TaskPriority.userInitiated.getter(v37);
  v75 = v19;
  v39 = v38;
  View.task(priority:_:)(v38, &unk_1001195D0, v32, v13, v33);
  v40 = swift_release(v32);
  v41 = v13;
  v42 = (uint64_t)v72;
  v43 = v36;
  v71 = *(_QWORD *)(v71 + 8);
  ((void (*)(char *, uint64_t, __n128))v71)(v39, v84, v40);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v15, v41);
  sub_10005A690((uint64_t)v24 + *(int *)(v36 + 44), v42);
  v44 = type metadata accessor for URLRequest(0);
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v42, 1, v44) == 1)
  {
    sub_10000526C(v42, qword_100119528);
    v46 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v85, 1, 1, v46);
  }
  else
  {
    URLRequest.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v42, v44);
  }
  v47 = v73;
  v68(v73, v24, v43);
  v48 = swift_allocObject(&unk_10010AD60, v67, v66);
  *(_QWORD *)(v48 + 16) = v41;
  *(_QWORD *)(v48 + 24) = v33;
  v34(v48 + v69, v47, v43);
  v49 = sub_100004864(&qword_1001165D8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  v88 = v33;
  v89 = v49;
  v50 = v79;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v79);
  v52 = sub_10005A83C();
  v53 = v83;
  static TaskPriority.userInitiated.getter(v52);
  v54 = (uint64_t)v74;
  v55 = (uint64_t)v85;
  v56 = v52;
  v57 = v75;
  View.task<A>(id:priority:_:)(v85, v53, &unk_1001195E0, v48, v50, v81, WitnessTable, v56);
  v58 = swift_release(v48);
  ((void (*)(char *, uint64_t, __n128))v71)(v53, v84, v58);
  sub_10000526C(v55, (uint64_t *)&unk_100118CE0);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v57, v50);
  v59 = sub_10005A8B8();
  v86 = WitnessTable;
  v87 = v59;
  v60 = v80;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v80);
  v61 = v76;
  sub_100093E10(v54, v60, v76);
  v62 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v62(v54, v60);
  sub_100091208(v61, v60, v82);
  return ((uint64_t (*)(uint64_t, uint64_t))v62)(v61, v60);
}

uint64_t sub_100059C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  v4 = sub_100004F7C(qword_100119528);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLRequest(0);
  v3[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v3[15] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_100059CF4, v8, v9);
}

uint64_t sub_100059CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 120));
  v8 = type metadata accessor for CachedAsyncImage(0, v5, v3, v7);
  sub_10005A690(v6 + *(int *)(v8 + 44), v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1) == 1)
  {
    v9 = *(__int128 **)(v0 + 64);
    sub_10000526C(*(_QWORD *)(v0 + 88), qword_100119528);
    v10 = *v9;
    *(_QWORD *)(v0 + 48) = 0x8000000000000008;
    *(_OWORD *)(v0 + 16) = v10;
    v11 = sub_100004F7C(&qword_1001195C0);
    State.wrappedValue.setter(v0 + 48, v11);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(v12, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    v13 = sub_100059E50(v12, v8);
    v15 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 96);
    if (v13)
    {
      *(_OWORD *)(v0 + 32) = *(_OWORD *)*(_QWORD *)(v0 + 64);
      *(_QWORD *)(v0 + 56) = v13;
      v17 = sub_100004F7C(&qword_1001195C0);
      State.wrappedValue.setter(v0 + 56, v17);
    }
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  v18 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100059E50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  id v4;
  Class isa;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  Class v12;
  id v13;

  v3 = objc_msgSend(*(id *)(v2 + *(int *)(a2 + 48)), "configuration");
  v4 = objc_msgSend(v3, "URLCache");

  if (!v4)
    return 0;
  isa = URLRequest._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v4, "cachedResponseForRequest:", isa);

  if (!v6)
    return 0;
  v7 = objc_msgSend(v6, "data");
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11 = objc_allocWithZone((Class)UIImage);
  sub_10005A904(v8, v10);
  v12 = Data._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v11, "initWithData:", v12);
  sub_10004B228(v8, v10);

  if (v13)
    v13 = (id)Image.init(uiImage:)(v13);
  sub_10004B228(v8, v10);

  return v13;
}

uint64_t sub_100059FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  v4 = sub_100004F7C(qword_100119528);
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLRequest(0);
  v3[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[16] = v6;
  v3[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v3[18] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v3[19] = v8;
  v3[20] = v9;
  return swift_task_switch(sub_10005A05C, v8, v9);
}

uint64_t sub_10005A05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;

  v5 = *(_QWORD *)(v4 + 120);
  v6 = *(_QWORD *)(v4 + 128);
  v7 = *(_QWORD *)(v4 + 112);
  v8 = *(_QWORD *)(v4 + 88);
  v9 = type metadata accessor for CachedAsyncImage(0, *(_QWORD *)(v4 + 96), *(_QWORD *)(v4 + 104), a4);
  sub_10005A690(v8 + *(int *)(v9 + 44), v7);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  v11 = *(_QWORD *)(v4 + 112);
  v12 = *(_OWORD **)(v4 + 88);
  if (v10 == 1)
  {
    swift_release(*(_QWORD *)(v4 + 144));
    sub_10000526C(v11, qword_100119528);
    *(_OWORD *)(v4 + 16) = *v12;
    *(_QWORD *)(v4 + 64) = 0x8000000000000008;
    v13 = sub_100004F7C(&qword_1001195C0);
    State.wrappedValue.setter(v4 + 64, v13);
    v14 = *(_QWORD *)(v4 + 112);
    swift_task_dealloc(*(_QWORD *)(v4 + 136));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v4 + 128) + 32))(*(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 112), *(_QWORD *)(v4 + 120));
    *(_DWORD *)(v4 + 208) = *(_DWORD *)(v9 + 48);
    v16 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
    *(_QWORD *)(v4 + 168) = v16;
    *v16 = v4;
    v16[1] = sub_10005A1A8;
    return NSURLSession.data(for:delegate:)(*(_QWORD *)(v4 + 136), 0);
  }
}

uint64_t sub_10005A1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 168);
  v5[22] = a1;
  v5[23] = a2;
  v5[24] = a3;
  v5[25] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_10005A510;
  else
    v7 = sub_10005A214;
  return swift_task_switch(v7, v5[19], v5[20]);
}

uint64_t sub_10005A214()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  Class v21;
  id v22;
  Class v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 144));
  v3 = objc_allocWithZone((Class)UIImage);
  sub_10005A904(v2, v1);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, "initWithData:", isa);
  sub_10004B228(v2, v1);

  if (v5)
  {
    v6 = *(int *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 88);
    v36 = *(__n128 *)(v0 + 96);
    v8 = Image.init(uiImage:)(v5);
    v9 = Transaction.animation.getter(*(_QWORD *)(v7 + 32));
    v10 = swift_task_alloc(48);
    *(__n128 *)(v10 + 16) = v36;
    *(_QWORD *)(v10 + 32) = v7;
    *(_QWORD *)(v10 + 40) = v8;
    withAnimation<A>(_:_:)(v36);
    swift_release(v9);
    swift_task_dealloc(v10);
    v11 = objc_msgSend(*(id *)(v7 + v6), "configuration");
    v12 = objc_msgSend(v11, "URLCache");

    v13 = *(_QWORD *)(v0 + 184);
    v14 = *(void **)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 120);
    if (v12)
    {
      v37 = v8;
      v19 = objc_allocWithZone((Class)NSCachedURLResponse);
      sub_10005A904(v15, v13);
      v20 = v14;
      v21 = Data._bridgeToObjectiveC()().super.isa;
      v22 = objc_msgSend(v19, "initWithResponse:data:", v20, v21);
      sub_10004B228(v15, v13);

      v23 = URLRequest._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v12, "storeCachedResponse:forRequest:", v22, v23);
      swift_release(v37);

      sub_10004B228(v15, v13);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v16 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));

      sub_10004B228(v15, v13);
      swift_release(v8);
    }
  }
  else
  {
    v24 = *(unint64_t **)(v0 + 88);
    v25 = *v24;
    v26 = v24[1];
    *(_QWORD *)(v0 + 48) = *v24;
    v27 = *(_QWORD *)(v0 + 184);
    v28 = *(void **)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 176);
    v30 = *(_QWORD *)(v0 + 128);
    v38 = *(_QWORD *)(v0 + 136);
    v31 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 56) = v26;
    *(_QWORD *)(v0 + 80) = 0x8000000000000008;
    sub_100058BA8(v25);
    swift_retain(v26);
    v32 = sub_100004F7C(&qword_1001195C0);
    State.wrappedValue.setter(v0 + 80, v32);
    sub_10004B228(v29, v27);

    sub_100058BD0(v25);
    v33 = swift_release(v26);
    (*(void (**)(uint64_t, uint64_t, __n128))(v30 + 8))(v38, v31, v33);
  }
  v34 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_OWORD **)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 144));
  *(_OWORD *)(v0 + 32) = *v5;
  *(_QWORD *)(v0 + 72) = v1 | 0x4000000000000000;
  v6 = sub_100004F7C(&qword_1001195C0);
  State.wrappedValue.setter(v0 + 72, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v7 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A5B0(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v5 = *a1;
  v4 = a2;
  swift_retain(a2);
  v2 = sub_100004F7C(&qword_1001195C0);
  return State.wrappedValue.setter(&v4, v2);
}

uint64_t sub_10005A610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CachedAsyncImage(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_1001195CC);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100010C20;
  return sub_100059C38(v9, v6, v7);
}

uint64_t sub_10005A690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(qword_100119528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005A6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for CachedAsyncImage(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  sub_100058BD0(*(_QWORD *)(v4 + v8));
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  swift_release(*(_QWORD *)(v4 + v8 + 24));
  swift_release(*(_QWORD *)(v4 + v8 + 32));
  v10 = v4 + v8 + *(int *)(v5 + 44);
  v11 = type metadata accessor for URLRequest(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);

  return swift_deallocObject(v4, v8 + v9, v7 | 7);
}

uint64_t sub_10005A7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CachedAsyncImage(0, v6, v7, a4) - 8) + 80);
  v9 = v4 + ((v8 + 32) & ~v8);
  v10 = (_QWORD *)swift_task_alloc(dword_1001195DC);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_1000101B8;
  return sub_100059FA0(v9, v6, v7);
}

unint64_t sub_10005A83C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001195E8;
  if (!qword_1001195E8)
  {
    v1 = sub_1000050C8((uint64_t *)&unk_100118CE0);
    sub_100004864(&qword_1001195F0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001195E8);
  }
  return result;
}

unint64_t sub_10005A8B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001195F8;
  if (!qword_1001195F8)
  {
    v1 = sub_1000050C8(&qword_1001195B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for _TaskValueModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001195F8);
  }
  return result;
}

uint64_t sub_10005A904(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10005A948()
{
  uint64_t v0;

  return sub_10005A5B0(*(__int128 **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10005A964(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  v2 = type metadata accessor for _TaskModifier(255);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  v4 = sub_1000050C8(&qword_1001195B8);
  v5 = type metadata accessor for ModifiedContent(255, v3, v4);
  sub_100004864(&qword_1001165D8, (uint64_t (*)(uint64_t))&type metadata accessor for _TaskModifier, (uint64_t)&protocol conformance descriptor for _TaskModifier);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  sub_10005A8B8();
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
}

uint64_t value<A>(iOS:iPadOS:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void))
{
  id v5;
  id v6;

  v5 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v6 = objc_msgSend(v5, "userInterfaceIdiom");

  if (v6 == (id)1)
    return a3();
  else
    return a1();
}

uint64_t sub_10005AAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Album(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10005AAFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Album(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_10005AB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Album(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10005AB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Album(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10005ABB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Album(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10005ABFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Album(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10005AC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005AC4C);
}

uint64_t sub_10005AC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Album(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10005AC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005AC94);
}

uint64_t sub_10005AC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Album(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MusicKitAlbum(uint64_t a1)
{
  uint64_t result;

  result = qword_100119668;
  if (!qword_100119668)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MusicKitAlbum);
  return result;
}

uint64_t sub_10005AD10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Album(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10005AD78()
{
  qword_100119600 = 0x636973756DLL;
  *(_QWORD *)algn_100119608 = 0xE500000000000000;
}

uint64_t sub_10005AD98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for EditorialVideoArtworkFlavor(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_1001196A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Album(0);
  v10 = EditorialVideoArtworkVending.editorialVideoArtworks.getter(v9, &protocol witness table for Album);
  if (!v10)
    goto LABEL_8;
  v11 = v10;
  static EditorialVideoArtworkFlavor.motionDetailSquare.getter();
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_10009D4F4((uint64_t)v5), (v13 & 1) != 0))
  {
    v14 = v12;
    v15 = *(_QWORD *)(v11 + 56);
    v16 = type metadata accessor for VideoArtwork(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v8, v15 + *(_QWORD *)(v17 + 72) * v14, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v8, 0, 1, v16);
  }
  else
  {
    v16 = type metadata accessor for VideoArtwork(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  }
  swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for VideoArtwork(0);
  v18 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v16) == 1)
  {
    sub_10000526C((uint64_t)v8, &qword_1001196A0);
LABEL_8:
    v19 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
  }
  VideoArtwork.url.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v16);
  v21 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 0, 1, v21);
}

uint64_t sub_10005AF98(uint64_t (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_100004F7C(&qword_1001172E8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6.n128_f64[0] = Album.artwork.getter(v3);
  v7 = type metadata accessor for Artwork(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    sub_10000526C((uint64_t)v5, &qword_1001172E8);
    return 0;
  }
  v9 = (void *)a1();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  if (!v9)
    return 0;
  v10 = Color.init(uiColor:)(objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithCGColor:", v9));

  return v10;
}

uint64_t sub_10005B09C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for ArtworkUnavailableView(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100115F18 != -1)
    swift_once(&qword_100115F18, sub_10005AD78);
  v4 = qword_100119600;
  v5 = *(_QWORD *)algn_100119608;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119608);
  ArtworkUnavailableView.init(placeholderImage:widthRatio:heightRatio:)(v4, v5, 0x3FD999999999999ALL, 0, 0x3FD999999999999ALL, 0);
  if (qword_1001160D8 != -1)
    swift_once(&qword_1001160D8, sub_1000800BC);
  v6 = qword_1001245C0;
  v7 = *(_QWORD *)algn_1001245C8;
  v8 = sub_100004864((unint64_t *)&qword_100117310, (uint64_t (*)(uint64_t))&type metadata accessor for ArtworkUnavailableView, (uint64_t)&protocol conformance descriptor for ArtworkUnavailableView);
  View.accessibilityIdentifier(_:)(v6, v7, v0, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_10005B1F0()
{
  return sub_10005AF98((uint64_t (*)(void))&Artwork.backgroundColor.getter);
}

uint64_t sub_10005B20C()
{
  return sub_10005AF98((uint64_t (*)(void))&Artwork.primaryTextColor.getter);
}

uint64_t sub_10005B238()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t OpaqueTypeConformance2;
  _QWORD v16[2];

  v0 = sub_100004F7C(&qword_1001172E8);
  __chkstk_darwin(v0);
  v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ArtworkImage(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_1001172F8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = Album.artwork.getter(v8);
  ArtworkImage.init(_:)(v2, v11);
  v12 = sub_100004F7C(&qword_100117300);
  v13 = sub_10001524C();
  ArtworkImage.artworkPlaceholder<A>(_:)(sub_10005B09C, 0, v12, v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v16[0] = v12;
  v16[1] = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v16, &opaque type descriptor for <<opaque return type of ArtworkImage.artworkPlaceholder<A>(_:)>>, 1);
  return AnyView.init<A>(_:)(v10, v7, OpaqueTypeConformance2);
}

void sub_10005B3A0(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void *v80;
  void *v81;

  v8 = type metadata accessor for AlertConfiguration.AlertSound(0);
  __chkstk_darwin(v8);
  v79 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100117238);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v72 - v14;
  v16 = type metadata accessor for LocalizedStringResource(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v72 - v22;
  v24 = __chkstk_darwin(v21);
  __chkstk_darwin(v24);
  if (a3)
  {
    if (a3 != 1)
    {
      v81 = a1;
      swift_errorRetain(a1);
      v27 = sub_100004F7C(&qword_1001174D8);
      v28 = sub_100010498(0, (unint64_t *)&qword_1001196A8, NSError_ptr);
      if ((swift_dynamicCast(&v80, &v81, v27, v28, 0) & 1) != 0)
      {
        v29 = v80;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
        v32 = v31;
        v33 = sub_10005BA60((uint64_t)&off_100107B38);
        v34 = (void *)sub_1000AC948(v30, v32, v33);
        swift_bridgeObjectRelease(v32);
        swift_bridgeObjectRelease(v33);
        if (v34)
        {

          LocalizedStringResource.init(stringLiteral:)(0xD000000000000028, 0x80000001000DAE30);
          v35 = LocalizedStringResource.init(stringLiteral:)(0xD00000000000002BLL, 0x80000001000DAE60);
          v36 = v79;
          static AlertConfiguration.AlertSound.default.getter(v35);
          AlertConfiguration.init(title:body:sound:)(v23, v20, v36);

          swift_errorRelease(v81);
          return;
        }

      }
      swift_errorRelease(v81);
    }
    goto LABEL_29;
  }
  v73 = v13;
  v74 = v26;
  v77 = a4;
  v78 = (char *)&v72 - v25;
  v75 = a2;
  v76 = a1;
  v37 = a1;
  v38 = objc_msgSend(v37, "mediaItems");
  v39 = sub_100010498(0, (unint64_t *)&qword_1001175E0, SHMatchedMediaItem_ptr);
  v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

  if ((unint64_t)v40 >> 62)
  {
    if (v40 < 0)
      v69 = v40;
    else
      v69 = v40 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v40);
    v41 = _CocoaArrayWrapper.endIndex.getter(v69);
    swift_bridgeObjectRelease(v40);
  }
  else
  {
    v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v40);
  if (!v41)
  {
    sub_100010110(v76, v75, 0);
LABEL_29:
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000023, 0x80000001000DADD0);
    v67 = LocalizedStringResource.init(stringLiteral:)(0xD000000000000026, 0x80000001000DAE00);
    v68 = v79;
    static AlertConfiguration.AlertSound.default.getter(v67);
    AlertConfiguration.init(title:body:sound:)(v23, v20, v68);
    return;
  }
  v42 = objc_msgSend(v37, "mediaItems");
  v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v39);

  if (!((unint64_t)v43 >> 62))
  {
    if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_11;
LABEL_38:
    swift_bridgeObjectRelease(v43);
    __break(1u);
    goto LABEL_39;
  }
  if (v43 < 0)
    v70 = v43;
  else
    v70 = v43 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v43);
  v71 = _CocoaArrayWrapper.endIndex.getter(v70);
  swift_bridgeObjectRelease(v43);
  if (!v71)
    goto LABEL_38;
LABEL_11:
  if ((v43 & 0xC000000000000001) != 0)
  {
LABEL_39:
    v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0);
LABEL_14:
    v45 = v44;
    swift_bridgeObjectRelease(v43);
    v46 = objc_msgSend(v45, "title");
    if (v46)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

      swift_bridgeObjectRetain(v50);
      LocalizedStringResource.init(stringLiteral:)(v48, v50);
      v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v51(v15, 0, 1, v16);
      swift_bridgeObjectRelease(v50);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v78, v15, v16);
LABEL_21:
        v52 = objc_msgSend(v45, "artist");
        if (v52)
        {
          v53 = v52;
          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
          v56 = v55;

          swift_bridgeObjectRetain(v56);
          v57 = (uint64_t)v73;
          LocalizedStringResource.init(stringLiteral:)(v54, v56);
          v51((char *)v57, 0, 1, v16);
          swift_bridgeObjectRelease(v56);
          v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v57, 1, v16);
          v59 = v76;
          if (v58 != 1)
          {
            v60 = v74;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v74, v57, v16);
LABEL_26:
            v61 = v75;
            v62 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
            v63 = v78;
            v62(v23, v78, v16);
            v64 = ((uint64_t (*)(char *, uint64_t, uint64_t))v62)(v20, v60, v16);
            v65 = v79;
            static AlertConfiguration.AlertSound.default.getter(v64);
            AlertConfiguration.init(title:body:sound:)(v23, v20, v65);
            sub_100010110(v59, v61, 0);

            v66 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
            v66(v60, v16);
            v66((uint64_t)v63, v16);
            return;
          }
        }
        else
        {
          v57 = (uint64_t)v73;
          v51(v73, 1, 1, v16);
          v59 = v76;
        }
        v60 = v74;
        LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000D9940);
        sub_10005BB6C(v57);
        goto LABEL_26;
      }
    }
    else
    {
      v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
      v51(v15, 1, 1, v16);
    }
    LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000D9940);
    sub_10005BB6C((uint64_t)v15);
    goto LABEL_21;
  }
  if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v44 = *(id *)(v43 + 32);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_10005BA60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004F7C(&qword_1001196B0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = ~(-1 << *(_BYTE *)(v3 + 32));
    while (1)
    {
      v8 = *(_QWORD *)(v6 + 8 * v4);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), v8);
      v10 = result & v7;
      v11 = (result & (unint64_t)v7) >> 6;
      v12 = *(_QWORD *)(v5 + 8 * v11);
      v13 = 1 << (result & v7);
      v14 = *(_QWORD *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(_QWORD *)(v14 + 8 * v10) != v8)
        {
          v10 = (v10 + 1) & v7;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
        *(_QWORD *)(v14 + 8 * v10) = v8;
        v15 = *(_QWORD *)(v3 + 16);
        v16 = __OFADD__(v15, 1);
        v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v17;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_10005BB6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004F7C(&qword_100117238);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10005BBAC(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(a1);
    if (v3)
    {
LABEL_3:
      sub_100004F7C(&qword_1001196C0);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(a1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v27 = a1 & 0xC000000000000001;
  v25 = a1 + 32;
  v26 = a1 & 0xFFFFFFFFFFFFFF8;
  while (v27)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8);
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_31;
LABEL_24:
    v29 = v10;
    v12 = v4[5];
    v13 = type metadata accessor for AnyCancellable(0);
    v14 = sub_10005BF60(&qword_100118C38, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
    v16 = -1 << *((_BYTE *)v4 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
    v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      v21 = ~v16;
      v22 = sub_10005BF60(&qword_1001196C8, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      while (1)
      {
        v28 = *(_QWORD *)(v4[6] + 8 * v17);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v22) & 1) != 0)
          break;
        v17 = (v17 + 1) & v21;
        v18 = v17 >> 6;
        v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
        v20 = 1 << v17;
        if ((v19 & (1 << v17)) == 0)
          goto LABEL_28;
      }
      swift_release(v10);
    }
    else
    {
LABEL_28:
      *(_QWORD *)&v9[8 * v18] = v20 | v19;
      *(_QWORD *)(v4[6] + 8 * v17) = v10;
      v23 = v4[2];
      v11 = __OFADD__(v23, 1);
      v24 = v23 + 1;
      if (v11)
        goto LABEL_32;
      v4[2] = v24;
    }
    if (v8 == v5)
      return;
  }
  if (v8 >= *(_QWORD *)(v26 + 16))
    goto LABEL_33;
  v10 = *(_QWORD *)(v25 + 8 * v8);
  swift_retain(v10);
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_24;
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
}

Swift::Int sub_10005BE20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100004F7C(&qword_1001196B8);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10005BF60(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AnyCancellable(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id sub_10005BFA0()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSString v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = objc_allocWithZone((Class)ASCAdamID);
  swift_bridgeObjectRetain(v1);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v4 = objc_msgSend(v2, "initWithStringValue:", v3);

  v5 = (void *)ASCLockupContextStandard;
  v6 = *(_QWORD *)(v0 + 24);
  v7 = ASCLockupKindApp;
  v8 = v5;
  swift_bridgeObjectRetain(v6);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v10 = objc_msgSend((id)objc_opt_self(ASCLockupRequest), "_requestWithID:kind:context:productVariantID:", v4, v7, v8, v9);

  return v10;
}

id sub_10005C0AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  id v11;
  objc_super v13;
  _BYTE v14[16];

  sub_10005D0FC((uint64_t)(v0 + 4), (uint64_t)v14);
  v1 = v0[6];
  v2 = v0[7];
  v3 = v0[8];
  v4 = v0[9];
  v5 = (objc_class *)type metadata accessor for AppStoreComponent.AppStoreCoordinator();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = &v6[OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  sub_10005D0FC((uint64_t)v14, (uint64_t)v7);
  sub_10005D144((uint64_t)v14);
  sub_100011F44(v1, v2);
  sub_100011F44(v3, v4);
  v8 = v6;
  swift_bridgeObjectRelease(0);
  v9 = (uint64_t *)&v8[OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_onOpen];
  *v9 = v1;
  v9[1] = v2;
  v10 = (uint64_t *)&v8[OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_onStateChange];
  *v10 = v3;
  v10[1] = v4;
  sub_100011F44(v1, v2);
  sub_100011F44(v3, v4);

  v13.receiver = v8;
  v13.super_class = v5;
  v11 = objc_msgSendSuper2(&v13, "init");
  sub_10005CCBC(v3, v4);
  sub_10005CCBC(v1, v2);
  return v11;
}

id sub_10005C1B8()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v8;

  v0 = objc_msgSend(objc_allocWithZone((Class)ASCLockupView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v1 = (void *)objc_opt_self(UIColor);
  v2 = v0;
  v3 = objc_msgSend(v1, "clearColor");
  objc_msgSend(v2, "setBackgroundColor:", v3);

  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = sub_100004F7C(&qword_1001197A8);
  UIViewRepresentableContext.coordinator.getter(&v8, v4);
  v5 = v8;
  objc_msgSend(v2, "setDelegate:", v8);

  v6 = sub_10005BFA0();
  objc_msgSend(v2, "setRequest:", v6);

  return v2;
}

void sub_10005C304(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSString v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  Swift::String aBlock;
  uint64_t (*v53)(uint64_t);
  void *v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;

  v3 = v2;
  v6 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v6);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(uint64_t))(v2
                                      + OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_onStateChange);
  if (v9)
    v9(a2);
  v10 = ASCAppStateOpenable;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  if (v11 != v14 || v13 != v15)
  {
    v17 = v15;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v17);
    if ((v18 & 1) != 0)
      goto LABEL_15;
    v19 = ASCAppStatePurchased;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v13 = v21;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    if (v20 != v22 || v13 != v23)
    {
      v25 = v23;
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v13, v22, v23, 0);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v25);
      if ((v26 & 1) == 0)
        return;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease_n(v13, 2);
LABEL_15:
  v27 = v3 + OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_onOpen;
  v28 = *(_QWORD *)(v3 + OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_onOpen);
  if (v28)
  {
    v29 = *(_QWORD *)(v27 + 8);
    v30 = (void *)objc_opt_self(NSBundle);
    v31 = objc_msgSend(v30, "mainBundle", swift_retain(v29).n128_f64[0]);
    v57._object = (void *)0xE000000000000000;
    v32._object = (void *)0x80000001000DAF50;
    v32._countAndFlagsBits = 0xD000000000000026;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v57._countAndFlagsBits = 0;
    v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v57);

    aBlock = v34;
    v35 = sub_10000B110();
    StringProtocol.localizedUppercase.getter(&type metadata for String, v35);
    v37 = v36;
    swift_bridgeObjectRelease(v34._object);
    v38 = (void *)objc_opt_self(ASCOfferMetadata);
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
    v40 = objc_msgSend(v38, "textMetadataWithTitle:subtitle:", v39, 0);

    v41 = objc_allocWithZone((Class)ASCLocalOffer);
    v55 = v28;
    v56 = v29;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v53 = sub_1000A5684;
    v54 = &unk_10010AE00;
    v42 = _Block_copy(&aBlock);
    v43 = v56;
    sub_100011F44(v28, v29);
    v44 = v40;
    v45 = objc_msgSend(v41, "initWithMetadata:action:", v44, v42, swift_release(v43).n128_f64[0]);

    _Block_release(v42);
    v46 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v8, 1, 1, v46);
    type metadata accessor for MainActor(0);
    v47 = a1;
    v48 = v45;
    v49 = static MainActor.shared.getter(v48);
    v50 = (_QWORD *)swift_allocObject(&unk_10010AE38, 48, 7);
    v50[2] = v49;
    v50[3] = &protocol witness table for MainActor;
    v50[4] = v47;
    v50[5] = v48;
    v51 = sub_1000A9F18((uint64_t)v8, (uint64_t)&unk_100119790, (uint64_t)v50);

    sub_10005CCBC(v28, v29);
    swift_release(v51);

  }
}

uint64_t sub_10005C6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_10005C730, v7, v8);
}

uint64_t sub_10005C730()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  v2 = objc_msgSend(v1, "lockup");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "lockupWithOffer:", *(_QWORD *)(v0 + 24));

  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(*(id *)(v0 + 16), "setLockup:", v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AppStoreComponent.AppStoreCoordinator()
{
  return objc_opt_self(_TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator);
}

id sub_10005C928()
{
  return sub_10005C1B8();
}

uint64_t sub_10005C968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v8;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = sub_100004F7C(&qword_1001197A8);
  UIViewRepresentableContext.coordinator.getter(&v8, v3);
  v4 = v8;
  v5 = &v8[OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_metricsQuery];
  v6 = *(_QWORD *)&v8[OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_metricsQuery + 8];
  *(_QWORD *)v5 = v2;
  *((_QWORD *)v5 + 1) = v1;
  swift_bridgeObjectRetain(v1);

  return swift_bridgeObjectRelease(v6);
}

id sub_10005C9DC@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_10005C0AC();
  *a1 = result;
  return result;
}

uint64_t sub_10005CA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10005D16C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10005CA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10005D16C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10005CAC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005D16C();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_10005CAE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  unint64_t v6;
  id v7;
  Class isa;
  id v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_metricsQuery + 8);
  if (!v1)
    return objc_msgSend(objc_allocWithZone((Class)ASCMetricsActivity), "init");
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCV16MusicRecognition17AppStoreComponent19AppStoreCoordinator_metricsQuery);
  v3 = sub_100004F7C((uint64_t *)&unk_100119770);
  inited = swift_initStackObject(v3, &v11);
  *(_OWORD *)(inited + 16) = xmmword_1000D1CC0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ASCMetricsActivityKeyRedirectURLParameters);
  *(_QWORD *)(inited + 40) = v5;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v1;
  swift_bridgeObjectRetain(v1);
  v6 = sub_1000B3E40(inited);
  v7 = objc_allocWithZone((Class)ASCMetricsActivity);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v9 = objc_msgSend(v7, "initWithFields:", isa);

  return v9;
}

uint64_t sub_10005CBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10005CC08(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10005CC10()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005CC44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10011978C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000101B8;
  return sub_10005C6C4(a1, v4, v5, v7, v6);
}

uint64_t sub_10005CCBC(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t destroy for AppStoreComponent(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = swift_bridgeObjectRelease(a1[5]);
  if (a1[6])
    result = swift_release(a1[7]);
  if (a1[8])
    return swift_release(a1[9]);
  return result;
}

_QWORD *initializeWithCopy for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v8 = a2 + 6;
  v7 = a2[6];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7)
  {
    v9 = a2[7];
    a1[6] = v7;
    a1[7] = v9;
    swift_retain(v9);
  }
  else
  {
    *((_OWORD *)a1 + 3) = *v8;
  }
  v10 = a2[8];
  if (v10)
  {
    v11 = a2[9];
    a1[8] = v10;
    a1[9] = v11;
    swift_retain(v11);
  }
  else
  {
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  }
  return a1;
}

_QWORD *assignWithCopy for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (a1[6])
  {
    if (v10)
    {
      v11 = a2[7];
      v12 = a1[7];
      a1[6] = v10;
      a1[7] = v11;
      swift_retain(v11);
      swift_release(v12);
      goto LABEL_8;
    }
    swift_release(a1[7]);
  }
  else if (v10)
  {
    v13 = a2[7];
    a1[6] = v10;
    a1[7] = v13;
    swift_retain(v13);
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  v14 = a2[8];
  if (!a1[8])
  {
    if (v14)
    {
      v17 = a2[9];
      a1[8] = v14;
      a1[9] = v17;
      swift_retain(v17);
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v14)
  {
    swift_release(a1[9]);
    goto LABEL_14;
  }
  v15 = a2[9];
  v16 = a1[9];
  a1[8] = v14;
  a1[9] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

_QWORD *assignWithTake for AppStoreComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  if (a1[6])
  {
    if (v10)
    {
      v11 = a2[7];
      v12 = a1[7];
      a1[6] = v10;
      a1[7] = v11;
      swift_release(v12);
      goto LABEL_8;
    }
    swift_release(a1[7]);
  }
  else if (v10)
  {
    v13 = a2[7];
    a1[6] = v10;
    a1[7] = v13;
    goto LABEL_8;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_8:
  v14 = a2[8];
  if (!a1[8])
  {
    if (v14)
    {
      v17 = a2[9];
      a1[8] = v14;
      a1[9] = v17;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    return a1;
  }
  if (!v14)
  {
    swift_release(a1[9]);
    goto LABEL_14;
  }
  v15 = a2[9];
  v16 = a1[9];
  a1[8] = v14;
  a1[9] = v15;
  swift_release(v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStoreComponent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppStoreComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreComponent()
{
  return &type metadata for AppStoreComponent;
}

unint64_t sub_10005D0B8()
{
  unint64_t result;

  result = qword_100119798;
  if (!qword_100119798)
  {
    result = swift_getWitnessTable(&unk_1000D4474, &type metadata for AppStoreComponent);
    atomic_store(result, (unint64_t *)&qword_100119798);
  }
  return result;
}

uint64_t sub_10005D0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_1001197A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005D144(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_10005D16C()
{
  unint64_t result;

  result = qword_1001197B0;
  if (!qword_1001197B0)
  {
    result = swift_getWitnessTable(&unk_1000D44C4, &type metadata for AppStoreComponent);
    atomic_store(result, (unint64_t *)&qword_1001197B0);
  }
  return result;
}

uint64_t *sub_10005D1B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
    v9 = v8[6];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v49 = v13;
    if (v14(v11, 1, v12))
    {
      v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[7];
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = v8[8];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v22[16] = v23[16];
    v25 = *((_QWORD *)v23 + 3);
    *((_QWORD *)v22 + 3) = v25;
    v26 = v8[9];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v27[16] = v28[16];
    v30 = *((_QWORD *)v28 + 3);
    *((_QWORD *)v27 + 3) = v30;
    v31 = v8[10];
    v32 = (char *)v4 + v31;
    v33 = (char *)a2 + v31;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    if (v14(v33, 1, v12))
    {
      v34 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v32, 0, 1, v12);
    }
    v35 = *(int *)(a3 + 20);
    v36 = (uint64_t *)((char *)v4 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    if (*v37)
    {
      v38 = v37[1];
      *v36 = *v37;
      v36[1] = v38;
      swift_retain(v38);
    }
    else
    {
      *(_OWORD *)v36 = *(_OWORD *)v37;
    }
    v39 = *(int *)(a3 + 24);
    v40 = (uint64_t *)((char *)v4 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v44 = v40;
      v45 = v42;
      v46 = 1;
    }
    else
    {
      v47 = *v41;
      *v40 = *v41;
      swift_retain(v47);
      v44 = v40;
      v45 = v42;
      v46 = 0;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
  }
  return v4;
}

double sub_10005D488(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  v5 = a1 + v4[6];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[7] + 8));
  v9 = a1 + v4[8];
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  v10 = a1 + v4[9];
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + 24));
  v11 = a1 + v4[10];
  if (!v8(v11, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  v12 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  if (*v12)
    swift_release(v12[1]);
  v13 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v14 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v13).n128_u64[0];
  }
  return result;
}

_QWORD *sub_10005D5FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v45)(char *, uint64_t, uint64_t);

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v45 = v13;
  if (v13(v10, 1, v11))
  {
    v14 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v7[8];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v20[16] = v21[16];
  v23 = *((_QWORD *)v21 + 3);
  *((_QWORD *)v20 + 3) = v23;
  v24 = v7[9];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *((_QWORD *)v25 + 1) = v27;
  v25[16] = v26[16];
  v28 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v25 + 3) = v28;
  v29 = v7[10];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  if (v45(v31, 1, v11))
  {
    v32 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v30, v31, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v11);
  }
  v33 = *(int *)(a3 + 20);
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  if (*v35)
  {
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    swift_retain(v36);
  }
  else
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  v37 = *(int *)(a3 + 24);
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  v40 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v39, v40) == 1)
  {
    v41 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v38, v39, v41);
    v42 = 1;
  }
  else
  {
    v43 = *v39;
    *v38 = *v39;
    swift_retain(v43);
    v42 = 0;
  }
  swift_storeEnumTagMultiPayload(v38, v40, v42);
  return a1;
}

char *sub_10005D898(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  v20 = v10[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = *((_QWORD *)v22 + 1);
  v24 = *((_QWORD *)v21 + 1);
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = v10[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_QWORD *)v26 = *(_QWORD *)&a2[v25];
  v28 = *(_QWORD *)&a2[v25 + 8];
  v29 = *(_QWORD *)&a1[v25 + 8];
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v26[16] = v27[16];
  v30 = *((_QWORD *)v27 + 3);
  v31 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v26 + 3) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = v10[9];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)&a2[v32];
  v35 = *(_QWORD *)&a2[v32 + 8];
  v36 = *(_QWORD *)&a1[v32 + 8];
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v33[16] = v34[16];
  v37 = *((_QWORD *)v34 + 3);
  v38 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v33 + 3) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = v10[10];
  v40 = &a1[v39];
  v41 = &a2[v39];
  LODWORD(v33) = v16(&a1[v39], 1, v14);
  v42 = v16(v41, 1, v14);
  if ((_DWORD)v33)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v40, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v40, v14);
LABEL_12:
    v43 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v40, v41, v14);
LABEL_13:
  v44 = *(int *)(a3 + 20);
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)&a1[v44];
  v48 = *(_QWORD *)&a2[v44];
  if (v47)
  {
    if (v48)
    {
      v49 = *((_QWORD *)v46 + 1);
      v50 = *((_QWORD *)v45 + 1);
      *(_QWORD *)v45 = v48;
      *((_QWORD *)v45 + 1) = v49;
      swift_retain(v49);
      swift_release(v50);
      goto LABEL_20;
    }
    swift_release(*((_QWORD *)v45 + 1));
  }
  else if (v48)
  {
    v51 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = v48;
    *((_QWORD *)v45 + 1) = v51;
    swift_retain(v51);
    goto LABEL_20;
  }
  *(_OWORD *)v45 = *(_OWORD *)v46;
LABEL_20:
  if (a1 != a2)
  {
    v52 = *(int *)(a3 + 24);
    v53 = (uint64_t *)&a1[v52];
    v54 = (uint64_t *)&a2[v52];
    sub_10000526C((uint64_t)&a1[v52], &qword_1001166A0);
    v55 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v54, v55) == 1)
    {
      v56 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v53, v54, v56);
      v57 = 1;
    }
    else
    {
      v58 = *v54;
      *v53 = *v54;
      swift_retain(v58);
      v57 = 0;
    }
    swift_storeEnumTagMultiPayload(v53, v55, v57);
  }
  return a1;
}

_OWORD *sub_10005DC54(_OWORD *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *((_OWORD *)a2 + 1);
  *a1 = *(_OWORD *)a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  v8 = v7[6];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)&a2[v7[7]];
  v15 = v7[8];
  v16 = (_OWORD *)((char *)a1 + v15);
  v17 = &a2[v15];
  v18 = *((_OWORD *)v17 + 1);
  *v16 = *(_OWORD *)v17;
  v16[1] = v18;
  v19 = v7[9];
  v20 = (_OWORD *)((char *)a1 + v19);
  v21 = &a2[v19];
  v22 = *((_OWORD *)v21 + 1);
  *v20 = *(_OWORD *)v21;
  v20[1] = v22;
  v23 = v7[10];
  v24 = (char *)a1 + v23;
  v25 = &a2[v23];
  if (v13(&a2[v23], 1, v11))
  {
    v26 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v24, v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
  }
  v27 = *(int *)(a3 + 20);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (uint64_t *)&a2[v27];
  v30 = *v29;
  if (*v29)
  {
    v31 = v29[1];
    *v28 = v30;
    v28[1] = v31;
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  v32 = *(int *)(a3 + 24);
  v33 = (char *)a1 + v32;
  v34 = &a2[v32];
  v35 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
  {
    v36 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v33, v34, v36);
    swift_storeEnumTagMultiPayload(v33, v35, 1);
  }
  else
  {
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  return a1;
}

char *sub_10005DE78(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  v11 = v10[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_7:
  v20 = v10[7];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  v25 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease(v25);
  v26 = v10[8];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = *(_QWORD *)&a2[v26 + 8];
  v30 = *(_QWORD *)&a1[v26 + 8];
  *(_QWORD *)v27 = *(_QWORD *)&a2[v26];
  *((_QWORD *)v27 + 1) = v29;
  swift_bridgeObjectRelease(v30);
  v27[16] = v28[16];
  v31 = *((_QWORD *)v27 + 3);
  *((_QWORD *)v27 + 3) = *((_QWORD *)v28 + 3);
  swift_bridgeObjectRelease(v31);
  v32 = v10[9];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)&a2[v32 + 8];
  v36 = *(_QWORD *)&a1[v32 + 8];
  *(_QWORD *)v33 = *(_QWORD *)&a2[v32];
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease(v36);
  v33[16] = v34[16];
  v37 = *((_QWORD *)v33 + 3);
  *((_QWORD *)v33 + 3) = *((_QWORD *)v34 + 3);
  swift_bridgeObjectRelease(v37);
  v38 = v10[10];
  v39 = &a1[v38];
  v40 = &a2[v38];
  LODWORD(v34) = v16(&a1[v38], 1, v14);
  v41 = v16(v40, 1, v14);
  if ((_DWORD)v34)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v39, v40, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v39, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v39, v14);
LABEL_12:
    v42 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v39, v40, v14);
LABEL_13:
  v43 = *(int *)(a3 + 20);
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = *(_QWORD *)&a1[v43];
  v47 = *(_QWORD *)&a2[v43];
  if (v46)
  {
    if (v47)
    {
      v48 = *((_QWORD *)v45 + 1);
      v49 = *((_QWORD *)v44 + 1);
      *(_QWORD *)v44 = v47;
      *((_QWORD *)v44 + 1) = v48;
      swift_release(v49);
      goto LABEL_20;
    }
    swift_release(*((_QWORD *)v44 + 1));
  }
  else if (v47)
  {
    v50 = *((_QWORD *)v45 + 1);
    *(_QWORD *)v44 = v47;
    *((_QWORD *)v44 + 1) = v50;
    goto LABEL_20;
  }
  *(_OWORD *)v44 = *(_OWORD *)v45;
LABEL_20:
  if (a1 != a2)
  {
    v51 = *(int *)(a3 + 24);
    v52 = &a1[v51];
    v53 = &a2[v51];
    sub_10000526C((uint64_t)&a1[v51], &qword_1001166A0);
    v54 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v53, v54) == 1)
    {
      v55 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v52, v53, v55);
      swift_storeEnumTagMultiPayload(v52, v54, 1);
    }
    else
    {
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10005E1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E1D8);
}

uint64_t sub_10005E1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for ShazamUpsellViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_100004F7C(&qword_100116768);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t sub_10005E290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E29C);
}

uint64_t sub_10005E29C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for ShazamUpsellViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = sub_100004F7C(&qword_100116768);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ShazamUpsellView(uint64_t a1)
{
  uint64_t result;

  result = qword_1001198A8;
  if (!qword_1001198A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShazamUpsellView);
  return result;
}

void sub_10005E380(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for ShazamUpsellViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1000D4578;
    sub_1000090FC(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_10005E40C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE140, 1);
}

uint64_t sub_10005E41C()
{
  uint64_t result;

  result = static Font.footnote.getter();
  qword_100119820 = result;
  return result;
}

void sub_10005E438()
{
  qword_100119828 = static Font.Weight.bold.getter();
}

uint64_t sub_10005E454()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_100119830 = result;
  return result;
}

uint64_t sub_10005E470()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_100119838 = result;
  return result;
}

uint64_t sub_10005E48C()
{
  uint64_t result;

  result = static Font.subheadline.getter();
  qword_100119840 = result;
  return result;
}

void sub_10005E4A8()
{
  qword_100119848 = static Font.Weight.regular.getter();
}

uint64_t sub_10005E4C4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v2 = v1;
  v4 = sub_100004F7C(&qword_1001198E8);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_1001198F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_1001198F8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v11, v14, v15, v16, v17, v18, v19, v20);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v21 = sub_100004F7C(&qword_100119900);
  sub_10005E714(v2, (uint64_t)&v6[*(int *)(v21 + 44)]);
  if (qword_1001160B0 != -1)
    swift_once(&qword_1001160B0, sub_10007FFE4);
  v22 = qword_100124570;
  v23 = *(_QWORD *)algn_100124578;
  v24 = sub_10005F654();
  View.accessibilityIdentifier(_:)(v22, v23, v4, v24);
  v25 = sub_10000526C((uint64_t)v6, &qword_1001198E8);
  v26 = static Edge.Set.top.getter(v25);
  v27 = EdgeInsets.init(_all:)(24.0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_100007C8C((uint64_t)v9, (uint64_t)v13, &qword_1001198F0);
  v34 = &v13[*(int *)(v10 + 36)];
  *v34 = v26;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  v35 = sub_10000526C((uint64_t)v9, &qword_1001198F0);
  v36 = static Edge.Set.bottom.getter(v35);
  v37 = EdgeInsets.init(_all:)(38.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_100007C8C((uint64_t)v13, a1, &qword_1001198F8);
  v44 = a1 + *(int *)(sub_100004F7C(&qword_100119910) + 36);
  *(_BYTE *)v44 = v36;
  *(double *)(v44 + 8) = v37;
  *(_QWORD *)(v44 + 16) = v39;
  *(_QWORD *)(v44 + 24) = v41;
  *(_QWORD *)(v44 + 32) = v43;
  *(_BYTE *)(v44 + 40) = 0;
  return sub_10000526C((uint64_t)v13, &qword_1001198F8);
}

uint64_t sub_10005E714@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  char v112;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  double *v135;
  uint64_t v136;
  _BYTE *v137;
  _QWORD *v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE v168[4];
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  int v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  uint64_t v187;
  _BYTE *v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  char v203;
  _QWORD v204[2];

  v4 = type metadata accessor for ShazamUpsellView(0);
  v185 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v188 = &v168[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v187 = v6;
  __chkstk_darwin(v5);
  v186 = &v168[-v7];
  v184 = type metadata accessor for Divider(0);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v182 = &v168[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v181 = sub_100004F7C(&qword_1001180E0);
  v9 = __chkstk_darwin(v181);
  v199 = &v168[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v198 = &v168[-v11];
  v193 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  v12 = v193[7];
  v202 = a1;
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = v13[1];
  v204[0] = *v13;
  v204[1] = v14;
  v15 = sub_10000B110();
  swift_bridgeObjectRetain(v14);
  v16 = Text.init<A>(_:)(v204, &type metadata for String, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  if (qword_100115F20 != -1)
    swift_once(&qword_100115F20, sub_10005E41C);
  v23 = v20 & 1;
  v24 = Text.font(_:)(qword_100119820, v16, v18, v20 & 1, v22);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  sub_10000B64C(v16, v18, v23);
  swift_bridgeObjectRelease(v22);
  if (qword_100115F30 != -1)
    swift_once(&qword_100115F30, sub_10005E454);
  v31 = qword_100119830;
  v204[0] = qword_100119830;
  swift_retain(qword_100119830);
  v32 = v28 & 1;
  v33 = Text.foregroundStyle<A>(_:)(v204, v24, v26, v28 & 1, v30, &type metadata for Color, &protocol witness table for Color);
  v35 = v34;
  v37 = v36;
  v39 = v38;
  sub_10000B64C(v24, v26, v32);
  swift_release(v31);
  swift_bridgeObjectRelease(v30);
  if (qword_100115F28 != -1)
    swift_once(&qword_100115F28, sub_10005E438);
  v197 = Text.fontWeight(_:)(qword_100119828, 0, v33, v35, v37 & 1, v39);
  v196 = v40;
  LODWORD(v192) = v41;
  v201 = v42;
  sub_10000B64C(v33, v35, v37 & 1);
  v43 = swift_bridgeObjectRelease(v39);
  v180 = static Edge.Set.bottom.getter(v43);
  v179 = EdgeInsets.init(_all:)(3.0);
  v178 = v44;
  v177 = v45;
  v176 = v46;
  v47 = (_QWORD *)((char *)v202 + v193[8]);
  v48 = *v47;
  v49 = v47[3];
  swift_bridgeObjectRetain(v47[1]);
  swift_bridgeObjectRetain(v49);
  v50 = Text.init(_:tableName:bundle:comment:)(v48);
  v52 = v51;
  v54 = v53;
  v56 = v55 & 1;
  v57 = static Font.title2.getter(v50);
  v58 = Text.font(_:)(v57, v50, v52, v56, v54);
  v60 = v59;
  v62 = v61;
  v64 = v63;
  swift_release(v57);
  LOBYTE(v57) = v62 & 1;
  sub_10000B64C(v50, v52, v56);
  v65 = swift_bridgeObjectRelease(v54);
  v66 = static Color.primary.getter(v65);
  v204[0] = v66;
  v67 = Text.foregroundStyle<A>(_:)(v204, v58, v60, v62 & 1, v64, &type metadata for Color, &protocol witness table for Color);
  v69 = v68;
  v71 = v70;
  v73 = v72 & 1;
  sub_10000B64C(v58, v60, v57);
  swift_release(v66);
  v74 = swift_bridgeObjectRelease(v64);
  v75 = static Font.Weight.bold.getter(v74);
  v195 = Text.fontWeight(_:)(*(_QWORD *)&v75, 0, v67, v69, v73, v71);
  v194 = v76;
  v191 = v77;
  v200 = v78;
  sub_10000B64C(v67, v69, v73);
  v79 = swift_bridgeObjectRelease(v71);
  v175 = static Edge.Set.bottom.getter(v79);
  v174 = EdgeInsets.init(_all:)(7.0);
  v173 = v80;
  v172 = v81;
  v171 = v82;
  v83 = (_QWORD *)((char *)v202 + v193[9]);
  v84 = *v83;
  v85 = v83[3];
  swift_bridgeObjectRetain(v83[1]);
  swift_bridgeObjectRetain(v85);
  v86 = Text.init(_:tableName:bundle:comment:)(v84);
  v88 = v87;
  v90 = v89;
  v92 = v91;
  if (qword_100115F40 != -1)
    swift_once(&qword_100115F40, sub_10005E48C);
  v93 = v90 & 1;
  v94 = Text.font(_:)(qword_100119840, v86, v88, v90 & 1, v92);
  v96 = v95;
  v98 = v97;
  v100 = v99;
  sub_10000B64C(v86, v88, v93);
  swift_bridgeObjectRelease(v92);
  if (qword_100115F48 != -1)
    swift_once(&qword_100115F48, sub_10005E4A8);
  v101 = v98 & 1;
  v102 = Text.fontWeight(_:)(qword_100119848, 0, v94, v96, v98 & 1, v100);
  v104 = v103;
  v106 = v105;
  v108 = v107;
  sub_10000B64C(v94, v96, v101);
  swift_bridgeObjectRelease(v100);
  if (qword_100115F38 != -1)
    swift_once(&qword_100115F38, sub_10005E470);
  v190 = v191 & 1;
  v189 = v192 & 1;
  v109 = qword_100119838;
  v204[0] = qword_100119838;
  swift_retain(qword_100119838);
  v192 = Text.foregroundStyle<A>(_:)(v204, v102, v104, v106 & 1, v108, &type metadata for Color, &protocol witness table for Color);
  v170 = v110;
  v193 = v111;
  v191 = v112 & 1;
  sub_10000B64C(v102, v104, v106 & 1);
  swift_release(v109);
  v113 = swift_bridgeObjectRelease(v108);
  v169 = static Edge.Set.bottom.getter(v113);
  v114 = EdgeInsets.init(_all:)(16.5);
  v116 = v115;
  v118 = v117;
  v120 = v119;
  v121 = v182;
  v123 = Divider.init()(v122);
  v124 = static Edge.Set.bottom.getter(v123);
  v125 = EdgeInsets.init(_all:)(16.5);
  v127 = v126;
  v129 = v128;
  v131 = v130;
  v132 = v183;
  v133 = v199;
  v134 = v184;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v183 + 16))(v199, v121, v184);
  v135 = (double *)&v133[*(int *)(v181 + 36)];
  *(_BYTE *)v135 = v124;
  v135[1] = v125;
  *((_QWORD *)v135 + 2) = v127;
  *((_QWORD *)v135 + 3) = v129;
  *((_QWORD *)v135 + 4) = v131;
  *((_BYTE *)v135 + 40) = 0;
  (*(void (**)(_BYTE *, uint64_t))(v132 + 8))(v121, v134);
  v136 = (uint64_t)v133;
  v137 = v198;
  sub_10005F6A0((uint64_t)v133, (uint64_t)v198);
  v138 = v202;
  v184 = *v202;
  v181 = v202[1];
  v183 = v202[2];
  v182 = (_BYTE *)v202[3];
  v139 = v186;
  sub_10005F6E8((uint64_t)v202, (uint64_t)v186);
  v140 = *(unsigned __int8 *)(v185 + 80);
  v141 = (v140 + 16) & ~v140;
  v142 = v141 + v187;
  v143 = v140 | 7;
  v187 = swift_allocObject(&unk_10010AFA0, v141 + v187, v140 | 7);
  sub_10005F730((uint64_t)v139, v187 + v141);
  v144 = (uint64_t)v138;
  v145 = v188;
  sub_10005F6E8(v144, (uint64_t)v188);
  v146 = swift_allocObject(&unk_10010AFC8, v142, v143);
  sub_10005F730((uint64_t)v145, v146 + v141);
  LOBYTE(v141) = v189;
  LOBYTE(v204[0]) = v189;
  LOBYTE(v142) = v190;
  v203 = v190;
  sub_100007C8C((uint64_t)v137, v136, &qword_1001180E0);
  v147 = v197;
  v148 = v196;
  *(_QWORD *)a2 = v197;
  *(_QWORD *)(a2 + 8) = v148;
  *(_BYTE *)(a2 + 16) = v141;
  *(_QWORD *)(a2 + 24) = v201;
  *(_BYTE *)(a2 + 32) = v180;
  v149 = v178;
  *(double *)(a2 + 40) = v179;
  *(_QWORD *)(a2 + 48) = v149;
  v150 = v176;
  *(_QWORD *)(a2 + 56) = v177;
  *(_QWORD *)(a2 + 64) = v150;
  *(_BYTE *)(a2 + 72) = 0;
  v151 = v195;
  v152 = v194;
  *(_QWORD *)(a2 + 80) = v195;
  *(_QWORD *)(a2 + 88) = v152;
  *(_BYTE *)(a2 + 96) = v142;
  *(_QWORD *)(a2 + 104) = v200;
  *(_BYTE *)(a2 + 112) = v175;
  v153 = v173;
  *(double *)(a2 + 120) = v174;
  *(_QWORD *)(a2 + 128) = v153;
  v154 = v171;
  *(_QWORD *)(a2 + 136) = v172;
  *(_QWORD *)(a2 + 144) = v154;
  *(_BYTE *)(a2 + 152) = 0;
  v155 = v192;
  v156 = v170;
  *(_QWORD *)(a2 + 160) = v192;
  *(_QWORD *)(a2 + 168) = v156;
  LOBYTE(v145) = v191;
  *(_BYTE *)(a2 + 176) = v191;
  v157 = v193;
  *(_QWORD *)(a2 + 184) = v193;
  *(_BYTE *)(a2 + 192) = v169;
  *(double *)(a2 + 200) = v114;
  *(_QWORD *)(a2 + 208) = v116;
  *(_QWORD *)(a2 + 216) = v118;
  *(_QWORD *)(a2 + 224) = v120;
  *(_BYTE *)(a2 + 232) = 0;
  v158 = sub_100004F7C(&qword_100119918);
  sub_100007C8C(v136, a2 + *(int *)(v158 + 80), &qword_1001180E0);
  v159 = (uint64_t *)(a2 + *(int *)(v158 + 96));
  v160 = v181;
  *v159 = v184;
  v159[1] = v160;
  v161 = v182;
  v159[2] = v183;
  v159[3] = (uint64_t)v161;
  v159[4] = 0;
  v159[5] = 0;
  v162 = v187;
  v159[6] = (uint64_t)sub_10005F774;
  v159[7] = v162;
  v159[8] = (uint64_t)sub_10005F94C;
  v159[9] = v146;
  v163 = v147;
  v164 = v196;
  sub_100025480(v163, v196, v189);
  swift_bridgeObjectRetain(v201);
  v165 = v151;
  v166 = v194;
  sub_100025480(v165, v194, v190);
  swift_bridgeObjectRetain(v200);
  sub_100025480(v155, v156, (char)v145);
  swift_bridgeObjectRetain(v157);
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRetain(v161);
  sub_100011F44((uint64_t)sub_10005F774, v162);
  sub_100011F44((uint64_t)sub_10005F94C, v146);
  swift_bridgeObjectRetain(v160);
  swift_bridgeObjectRetain(v161);
  sub_10000526C((uint64_t)v198, &qword_1001180E0);
  swift_bridgeObjectRelease(0);
  swift_bridgeObjectRelease(v161);
  swift_bridgeObjectRelease(v160);
  sub_10005CCBC((uint64_t)sub_10005F774, v162);
  sub_10005CCBC((uint64_t)sub_10005F94C, v146);
  sub_10000526C((uint64_t)v199, &qword_1001180E0);
  sub_10000B64C(v192, v156, v191);
  swift_bridgeObjectRelease(v193);
  sub_10000B64C(v195, v166, v203);
  swift_bridgeObjectRelease(v200);
  sub_10000B64C(v197, v164, v204[0]);
  return swift_bridgeObjectRelease(v201);
}

void sub_10005F360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;

  v2 = type metadata accessor for OpenURLAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ShazamUpsellViewModel(0);
  sub_100007C8C(a1 + *(int *)(v13 + 40), (uint64_t)v8, (uint64_t *)&unk_100118CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000526C((uint64_t)v8, (uint64_t *)&unk_100118CE0);
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10000B5E8(v14, (uint64_t)qword_100124478);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Could not open shazam app from appstore component", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    type metadata accessor for ShazamUpsellView(0);
    sub_100006A38(v5);
    OpenURLAction.callAsFunction(_:)(v12);
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t sub_10005F59C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t result;
  uint64_t (**v13)(void);

  v3 = ASCAppStateInstalling;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    result = swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
      return result;
  }
  result = type metadata accessor for ShazamUpsellView(0);
  v13 = (uint64_t (**)(void))(a2 + *(int *)(result + 20));
  if (*v13)
    return (*v13)();
  return result;
}

unint64_t sub_10005F654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119908;
  if (!qword_100119908)
  {
    v1 = sub_1000050C8(&qword_1001198E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100119908);
  }
  return result;
}

uint64_t sub_10005F6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_1001180E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShazamUpsellView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ShazamUpsellView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10005F774()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShazamUpsellView(0) - 8) + 80);
  sub_10005F360(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_10005F7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = type metadata accessor for ShazamUpsellView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v19 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  v6 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  v7 = v0 + v4 + v6[6];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[7] + 8));
  v11 = v5 + v6[8];
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v11 + 24));
  v12 = v5 + v6[9];
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
  v13 = v5 + v6[10];
  if (!v10(v13, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
  v14 = (_QWORD *)(v5 + *(int *)(v1 + 20));
  if (*v14)
    swift_release(v14[1]);
  v15 = (_QWORD *)(v5 + *(int *)(v1 + 24));
  v16 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
  }
  else
  {
    swift_release(*v15);
  }
  return swift_deallocObject(v0, v4 + v19, v3 | 7);
}

uint64_t sub_10005F94C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ShazamUpsellView(0) - 8) + 80);
  return sub_10005F59C(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10005F988()
{
  return sub_100044928(&qword_100119920, &qword_100119910, (void (*)(void))sub_10005F9B4);
}

uint64_t sub_10005F9B4()
{
  return sub_100044928(&qword_100119928, &qword_1001198F8, (void (*)(void))sub_10005F9D0);
}

unint64_t sub_10005F9D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119930[0];
  if (!qword_100119930[0])
  {
    v1 = sub_1000050C8(&qword_1001198F0);
    sub_10005F654();
    sub_10004A368();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, qword_100119930);
  }
  return result;
}

uint64_t sub_10005FA3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for ObservationRegistrar(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 3, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10005FAD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  _BYTE v8[24];

  v7 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  v6 = v7;
  KeyPath = swift_getKeyPath(&unk_1000D4668, &v7);
  sub_10005FB68(KeyPath);
  swift_release(KeyPath);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess(v4, v8, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v4);
}

uint64_t sub_10005FB68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t WitnessTable;
  uint64_t v5;

  WitnessTable = swift_getWitnessTable(&unk_1000D4620, *v1);
  return ObservationRegistrar.access<A, B>(_:keyPath:)(&v5, a1, WitnessTable);
}

uint64_t sub_10005FBC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 + 96);
  swift_beginAccess(v4, v6, 33, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 24))(v4, a2);
  return swift_endAccess(v6);
}

uint64_t sub_10005FC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t WitnessTable;
  uint64_t v11;

  WitnessTable = swift_getWitnessTable(&unk_1000D4620, *v4);
  return ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, a1, a2, a3, a4, WitnessTable);
}

double sub_10005FCCC()
{
  uint64_t v0;
  double result;

  v0 = sub_10005FFC0();
  *(_QWORD *)&result = swift_retain(v0).n128_u64[0];
  return result;
}

double sub_10005FCE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D46A0, &v8);
  v6 = v1;
  v7 = a1;
  sub_10005FC38(KeyPath, (uint64_t)sub_100060364, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

uint64_t sub_10005FD60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FAD4((uint64_t)v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 88) + 16))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

BOOL sub_10005FDF4(uint64_t a1)
{
  return sub_10005FD60(a1) == 1;
}

uint64_t sub_10005FE14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005FAD4((uint64_t)v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 88) + 32))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_10005FEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104)));
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10005FF18()
{
  uint64_t v0;

  sub_10005FEA8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for HistoryViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HistoryViewModel);
}

double sub_10005FF48(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v8 = *(_OWORD *)(*(_QWORD *)v1 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D4668, &v8);
  v6 = v1;
  v7 = a1;
  sub_10005FC38(KeyPath, (uint64_t)sub_1000602E4, (uint64_t)&v5, (uint64_t)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10005FFC0()
{
  uint64_t v0;
  uint64_t KeyPath;
  __int128 v3;

  v3 = *(_OWORD *)(*(_QWORD *)v0 + 80);
  KeyPath = swift_getKeyPath(&unk_1000D46A0, &v3);
  sub_10005FB68(KeyPath);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
}

uint64_t sub_100060018(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t KeyPath;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  _QWORD v21[3];

  v4 = type metadata accessor for MusicSubscription(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_1001174E0);
  __chkstk_darwin(v8);
  v11 = (char *)&v21[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001162F8 != -1)
    swift_once(&qword_1001162F8, sub_1000AA1F8);
  v12 = qword_1001247E8;
  KeyPath = swift_getKeyPath(&unk_1000D4640, v9);
  v21[0] = v12;
  v14 = sub_100060204();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v21, KeyPath, v14);
  swift_release(KeyPath);
  v15 = v12 + OBJC_IVAR____TtC16MusicRecognition33MusicSubscriptionStatusController__musicSubscription;
  swift_beginAccess(v12 + OBJC_IVAR____TtC16MusicRecognition33MusicSubscriptionStatusController__musicSubscription, v21, 0, 0);
  sub_10001BF54(v15, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4))
  {
    sub_10006024C((uint64_t)v11);
    v16 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v11, v4);
    v17 = sub_10006024C((uint64_t)v11);
    v18 = MusicSubscription.canBecomeSubscriber.getter(v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v18 & 1) != 0)
      v16 = 0;
    else
      v16 = 0x10000;
  }
  return sub_1000A6994(v16 | a1 | (a2 << 8), 0xD000000000000028, 0x80000001000D90E0);
}

unint64_t sub_100060204()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001174E8;
  if (!qword_1001174E8)
  {
    v1 = type metadata accessor for MusicSubscriptionStatusController(255);
    result = swift_getWitnessTable(&unk_1000D7214, v1);
    atomic_store(result, (unint64_t *)&qword_1001174E8);
  }
  return result;
}

uint64_t sub_10006024C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004F7C(&qword_1001174E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006028C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005FAD4(a1);
}

double sub_1000602AC(uint64_t a1)
{
  return sub_10005FF48(a1);
}

uint64_t sub_1000602CC()
{
  return 16;
}

__n128 sub_1000602D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1000602E4()
{
  uint64_t v0;

  return sub_10005FBC4(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

double sub_1000602FC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = sub_10005FFC0();
  *a1 = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

double sub_100060324(_QWORD *a1)
{
  uint64_t v1;

  swift_retain(*a1);
  return sub_10005FCE0(v1);
}

uint64_t sub_10006034C()
{
  return 16;
}

__n128 sub_100060358(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_100060364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v4 = *(_QWORD *)(v2 + v3);
  *(_QWORD *)(v2 + v3) = v1;
  swift_retain(v1);
  return swift_release(v4);
}

uint64_t sub_1000603A4()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000020, 0x80000001000DAFF0);
  qword_1001199B8 = result;
  unk_1001199C0 = v1;
  byte_1001199C8 = v2 & 1;
  qword_1001199D0 = v3;
  return result;
}

void sub_1000603E8()
{
  qword_1001199D8 = 0x4024000000000000;
}

void sub_1000603F8()
{
  qword_1001199E0 = 0x4030000000000000;
}

void sub_100060408()
{
  qword_1001199E8 = 0x4062000000000000;
}

uint64_t sub_100060418()
{
  id v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  result = Color.init(uiColor:)(v0);
  qword_1001199F0 = result;
  return result;
}

uint64_t sub_100060454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a4;
  v56 = a5;
  v55 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v55);
  v9 = (uint64_t *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100004F7C(&qword_1001189C8);
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_1001189D0);
  __chkstk_darwin(v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100004F7C(&qword_100119A00);
  __chkstk_darwin(v53);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100004F7C(&qword_100119A08);
  v18 = __chkstk_darwin(v54);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v52 = (uint64_t)&v49 - v21;
  v22 = sub_100004F7C(&qword_100117F88);
  v23 = __chkstk_darwin(v22);
  v51 = (uint64_t)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v49 - v25;
  v27 = a2;
  v28 = a3;
  v29 = v50;
  v30 = sub_1000608E4((uint64_t)&v49 - v25);
  *(_QWORD *)v12 = static HorizontalAlignment.center.getter(v30);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 0;
  v31 = sub_100004F7C(&qword_100119A10);
  v32 = sub_100060B60(a1, v27, v28, v29, (uint64_t)&v12[*(int *)(v31 + 44)]);
  v33 = static Alignment.leading.getter(v32);
  sub_10003405C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v33, v34);
  sub_10000526C((uint64_t)v12, &qword_1001189C8);
  if (qword_100115F70 != -1)
    swift_once(&qword_100115F70, sub_100060418);
  v35 = qword_1001199F0;
  swift_retain(qword_1001199F0);
  v37 = static Edge.Set.all.getter(v36);
  sub_100007C8C((uint64_t)v15, (uint64_t)v17, &qword_1001189D0);
  v38 = &v17[*(int *)(v53 + 36)];
  *(_QWORD *)v38 = v35;
  v38[8] = v37;
  sub_10000526C((uint64_t)v15, &qword_1001189D0);
  if (qword_100115F58 != -1)
    swift_once(&qword_100115F58, sub_1000603E8);
  v39 = qword_1001199D8;
  v40 = (char *)v9 + *(int *)(v55 + 20);
  v41 = enum case for RoundedCornerStyle.continuous(_:);
  v42 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v40, v41, v42);
  *v9 = v39;
  v9[1] = v39;
  v43 = (uint64_t)&v20[*(int *)(v54 + 36)];
  sub_10001E658((uint64_t)v9, v43);
  *(_WORD *)(v43 + *(int *)(sub_100004F7C(&qword_100117BE8) + 36)) = 256;
  sub_100007C8C((uint64_t)v17, (uint64_t)v20, &qword_100119A00);
  sub_10001E69C((uint64_t)v9);
  sub_10000526C((uint64_t)v17, &qword_100119A00);
  v44 = v52;
  sub_100061610((uint64_t)v20, v52);
  v45 = v51;
  sub_100007C8C((uint64_t)v26, v51, &qword_100117F88);
  sub_100007C8C(v44, (uint64_t)v20, &qword_100119A08);
  v46 = v56;
  sub_100007C8C(v45, v56, &qword_100117F88);
  v47 = sub_100004F7C(&qword_100119A18);
  sub_100007C8C((uint64_t)v20, v46 + *(int *)(v47 + 48), &qword_100119A08);
  sub_10000526C(v44, &qword_100119A08);
  sub_10000526C((uint64_t)v26, &qword_100117F88);
  sub_10000526C((uint64_t)v20, &qword_100119A08);
  return sub_10000526C(v45, &qword_100117F88);
}

uint64_t sub_1000608E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v39 = a1;
  v1 = type metadata accessor for AccessibilityTraits(0);
  v35 = *(_QWORD *)(v1 - 8);
  v36 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100004F7C(&qword_100117F88);
  __chkstk_darwin(v38);
  v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100115F50 != -1)
    swift_once(&qword_100115F50, sub_1000603A4);
  v5 = qword_1001199B8;
  v6 = qword_1001199D0;
  swift_bridgeObjectRetain(unk_1001199C0);
  swift_bridgeObjectRetain(v6);
  v7 = Text.init(_:tableName:bundle:comment:)(v5);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.title2.getter(v7);
  v15 = Text.font(_:)(v14, v7, v9, v13, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v14);
  v22 = v19 & 1;
  sub_10000B64C(v7, v9, v13);
  v23 = swift_bridgeObjectRelease(v11);
  v24 = static Font.Weight.bold.getter(v23);
  v25 = Text.fontWeight(_:)(*(_QWORD *)&v24, 0, v15, v17, v22, v21);
  v27 = v26;
  LOBYTE(v11) = v28;
  v30 = v29;
  sub_10000B64C(v15, v17, v22);
  v31 = swift_bridgeObjectRelease(v21);
  v40 = v25;
  v41 = v27;
  v42 = v11 & 1;
  v43 = v30;
  static AccessibilityTraits.isHeader.getter(v31);
  v32 = (uint64_t)v37;
  View.accessibilityAddTraits(_:)(v3, &type metadata for Text, &protocol witness table for Text);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v3, v36);
  sub_10000B64C(v40, v41, v42);
  swift_bridgeObjectRelease(v43);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000020, 0x80000001000DAFC0, v38);
  return sub_10000526C(v32, &qword_100117F88);
}

uint64_t sub_100060B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double (*v66)();
  _QWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79;
  _BYTE v80[7];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[2];
  _OWORD v94[11];
  char v95;
  _BYTE v96[7];
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;

  v56 = a3;
  v57 = a5;
  v9 = sub_100004F7C(&qword_100119A20);
  v10 = __chkstk_darwin(v9);
  v59 = (uint64_t)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v58 = (uint64_t)&v53 - v12;
  sub_100060FCC(a1, a2, a3, a4, (uint64_t)&v53 - v12);
  *(_QWORD *)&v94[0] = a3;
  *((_QWORD *)&v94[0] + 1) = a4;
  v13 = sub_100004F7C(&qword_100119A28);
  v14 = State.wrappedValue.getter(&v81, v13);
  v15 = v81;
  v16 = LocationViewModel.address.getter(v14);
  v54 = v17;
  v55 = v16;
  swift_release(v15);
  *(_QWORD *)&v94[0] = a1;
  *((_QWORD *)&v94[0] + 1) = a2;
  v18 = sub_100004F7C(&qword_100119A30);
  State.wrappedValue.getter(&v81, v18);
  v19 = v81;
  v20 = *(_QWORD *)(v81 + 64);
  v53 = *(_QWORD *)(v81 + 56);
  swift_bridgeObjectRetain(v20);
  swift_release(v19);
  *(_QWORD *)&v94[0] = a1;
  *((_QWORD *)&v94[0] + 1) = a2;
  State.wrappedValue.getter(&v81, v18);
  v21 = v81;
  v23 = *(_QWORD *)(v81 + 24);
  v22 = *(_QWORD *)(v81 + 32);
  swift_bridgeObjectRetain(v22);
  swift_release(v21);
  v24 = (_QWORD *)swift_allocObject(&unk_10010B170, 48, 7);
  v24[2] = a1;
  v24[3] = a2;
  v25 = v56;
  v24[4] = v56;
  v24[5] = a4;
  v60 = v53;
  v61 = v20;
  v62 = v23;
  v63 = v22;
  v26 = v54;
  v64 = v55;
  v65 = v54;
  v66 = sub_100061694;
  v67 = v24;
  swift_retain(a4);
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(v25);
  v28 = static Alignment.leading.getter(v27);
  sub_1000340C0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v68, 0.0, 1, 0.0, 1, v28, v29);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v26);
  v30 = sub_10005CCBC((uint64_t)sub_100061694, (uint64_t)v24);
  v31 = static Edge.Set.all.getter(v30);
  if (qword_100115F60 != -1)
    swift_once(&qword_100115F60, sub_1000603F8);
  v32 = EdgeInsets.init(_all:)(*(double *)&qword_1001199E0);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v79 = 0;
  v40 = v58;
  v39 = v59;
  sub_100007C8C(v58, v59, &qword_100119A20);
  v41 = v79;
  v42 = v57;
  sub_100007C8C(v39, v57, &qword_100119A20);
  v43 = *(int *)(sub_100004F7C(&qword_100119A38) + 48);
  v88 = v75;
  v89 = v76;
  v90 = v77;
  v91 = v78;
  v84 = v71;
  v85 = v72;
  v44 = (_OWORD *)(v42 + v43);
  v86 = v73;
  v87 = v74;
  v81 = v68;
  v82 = v69;
  v83 = v70;
  LOBYTE(v92) = v31;
  *(_DWORD *)((char *)&v92 + 1) = *(_DWORD *)v80;
  DWORD1(v92) = *(_DWORD *)&v80[3];
  *((double *)&v92 + 1) = v32;
  *(_QWORD *)&v93[0] = v34;
  *((_QWORD *)&v93[0] + 1) = v36;
  *(_QWORD *)&v93[1] = v38;
  BYTE8(v93[1]) = v41;
  v45 = v78;
  v46 = v75;
  v44[6] = v74;
  v44[7] = v46;
  v47 = v90;
  v44[8] = v89;
  v44[9] = v47;
  v48 = v84;
  v44[2] = v83;
  v44[3] = v48;
  v49 = v86;
  v44[4] = v85;
  v44[5] = v49;
  v50 = v82;
  *v44 = v81;
  v44[1] = v50;
  v44[12] = v93[0];
  *(_OWORD *)((char *)v44 + 201) = *(_OWORD *)((char *)v93 + 9);
  v51 = v92;
  v44[10] = v45;
  v44[11] = v51;
  sub_100011EE4(&v81);
  sub_10000526C(v40, &qword_100119A20);
  v94[8] = v76;
  v94[9] = v77;
  v94[10] = v78;
  v94[4] = v72;
  v94[5] = v73;
  v94[6] = v74;
  v94[7] = v75;
  v94[0] = v68;
  v94[1] = v69;
  v94[2] = v70;
  v94[3] = v71;
  v95 = v31;
  *(_DWORD *)v96 = *(_DWORD *)v80;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v80[3];
  v97 = v32;
  v98 = v34;
  v99 = v36;
  v100 = v38;
  v101 = v41;
  sub_1000616A0(v94);
  return sub_10000526C(v39, &qword_100119A20);
}

uint64_t sub_100060FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  _OWORD v45[3];

  v38 = a2;
  v43 = a5;
  v8 = type metadata accessor for AccessibilityChildBehavior(0);
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationView(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(&qword_100119A40);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004F7C(&qword_100119A48);
  v39 = *(_QWORD *)(v18 - 8);
  v40 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v45[0] = a3;
  *((_QWORD *)&v45[0] + 1) = a4;
  v21 = sub_100004F7C(&qword_100119A28);
  State.wrappedValue.getter(v44, v21);
  v22 = v44[0];
  *(_QWORD *)&v45[0] = a1;
  *((_QWORD *)&v45[0] + 1) = v38;
  v23 = sub_100004F7C(&qword_100119A30);
  State.wrappedValue.getter(v44, v23);
  v24 = v44[0];
  v25 = *(_QWORD *)(v44[0] + 48);
  swift_retain(v25);
  v26 = swift_release(v24);
  v27 = LocationView.init(viewModel:strokeColor:)(v22, v25, v26);
  if (qword_100115F68 != -1)
    v27 = swift_once(&qword_100115F68, sub_100060408);
  v28 = qword_1001199E8;
  v29 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(v45, 0, 1, v28, 0, v29, v30);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v14, v11);
  v31 = &v17[*(int *)(v15 + 36)];
  v32 = v45[1];
  *(_OWORD *)v31 = v45[0];
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v45[2];
  v33 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static AccessibilityChildBehavior.combine.getter(v33);
  v34 = sub_100061700();
  View.accessibilityElement(children:)(v10, v15, v34);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
  sub_10000526C((uint64_t)v17, &qword_100119A40);
  v44[0] = v15;
  v44[1] = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v44, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v36 = v40;
  View.accessibilityIdentifier(_:)(0xD00000000000001ALL, 0x80000001000DAFA0, v40, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v20, v36);
}

double sub_1000612A0()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  v0 = sub_100004F7C(&qword_100119A30);
  State.wrappedValue.getter(&v3, v0);
  v1 = v3;
  sub_100095F34();
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_1000612EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v11 = *v9;
  v12 = v9[1];
  v14 = v9[2];
  v13 = v9[3];
  *(_QWORD *)a9 = static HorizontalAlignment.leading.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  v15 = sub_100004F7C(&qword_1001199F8);
  return sub_100060454(v11, v12, v14, v13, a9 + *(int *)(v15 + 44));
}

uint64_t sub_100061358(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  v9 = (uint64_t)a1;
  swift_retain(a1);
  State.init(wrappedValue:)(&v10, &v9, v2);
  v3 = v10;
  v4 = type metadata accessor for LocationViewModel(0);
  v5 = (void *)a1[5];
  v6 = a1[2];
  v7 = v5;
  swift_retain(v6);
  v9 = LocationViewModel.__allocating_init(location:artworkView:)(v7, v6);
  State.init(wrappedValue:)(&v10, &v9, v4);
  return v3;
}

uint64_t destroy for LocationModuleView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for LocationModuleView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for LocationModuleView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a1[3];
  v11 = a2[3];
  a1[3] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

_QWORD *assignWithTake for LocationModuleView(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationModuleView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationModuleView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationModuleView()
{
  return &type metadata for LocationModuleView;
}

uint64_t sub_100061600(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE1E0, 1);
}

uint64_t sub_100061610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100119A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100061658()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

double sub_100061694()
{
  return sub_1000612A0();
}

_QWORD *sub_1000616A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10005CCBC(v4, v5);
  return a1;
}

unint64_t sub_100061700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119A50;
  if (!qword_100119A50)
  {
    v1 = sub_1000050C8(&qword_100119A40);
    sub_10006176C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100119A50);
  }
  return result;
}

unint64_t sub_10006176C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119A58;
  if (!qword_100119A58)
  {
    v1 = type metadata accessor for LocationView(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for LocationView, v1);
    atomic_store(result, (unint64_t *)&qword_100119A58);
  }
  return result;
}

unint64_t sub_1000617B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100119A60;
  if (!qword_100119A60)
  {
    v1 = sub_1000050C8(&qword_100119A68);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100119A60);
  }
  return result;
}

uint64_t sub_100061804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100061810);
}

uint64_t sub_100061810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100061894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000618A0);
}

uint64_t sub_1000618A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AnyArtist(uint64_t a1)
{
  uint64_t result;

  result = qword_100119AC8;
  if (!qword_100119AC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnyArtist);
  return result;
}

void sub_10006195C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_10000880C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1000619CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
}

uint64_t sub_100061A1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  v3 = v2[3];
  v4 = v2[4];
  sub_10000C9C8(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
}

uint64_t sub_100061A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 20));
  v7 = v6[3];
  v8 = v6[4];
  sub_10000C9C8(v6, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, a2, v7, v8);
}

void sub_100061ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  KeyPath = swift_getKeyPath(&unk_1000D48C8, a2);
  v5 = swift_getKeyPath(&unk_1000D48F0, v4);
  static Published.subscript.getter(&v17, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  if (v17 < 0.0 || v17 > 1.0)
  {
    v9 = sub_100061C6C(v6, v7);
    v11 = swift_getKeyPath(&unk_1000D48C8, v10);
    v13 = swift_getKeyPath(&unk_1000D48F0, v12);
    if (v9)
    {
      static Published.subscript.getter(&v17, v2, v11, v13);
      swift_release(v11);
      swift_release(v13);
      if (v17 <= 1.0)
        return;
      v11 = swift_getKeyPath(&unk_1000D48C8, v14);
      v13 = swift_getKeyPath(&unk_1000D48F0, v15);
      v17 = 1.0;
    }
    else
    {
      v17 = 0.0;
    }
    swift_retain(v2);
    v16 = static Published.subscript.setter(&v17, v2, v11, v13);
    sub_100061ACC(v16);
  }
}

double sub_100061BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  double v7;

  KeyPath = swift_getKeyPath(&unk_1000D48C8, a2);
  v5 = swift_getKeyPath(&unk_1000D48F0, v4);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

BOOL sub_100061C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  KeyPath = swift_getKeyPath(&unk_1000D48C8, a2);
  v5 = swift_getKeyPath(&unk_1000D48F0, v4);
  static Published.subscript.getter(&v11, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  if (v11 < 0.0)
    return 0;
  v8 = swift_getKeyPath(&unk_1000D48C8, v6);
  v10 = swift_getKeyPath(&unk_1000D48F0, v9);
  static Published.subscript.getter(&v11, v2, v8, v10);
  swift_release(v8);
  swift_release(v10);
  return (~*(_QWORD *)&v11 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&v11 & 0xFFFFFFFFFFFFFLL) == 0;
}

uint64_t sub_100061D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D4880, a2);
  v5 = swift_getKeyPath(&unk_1000D48A8, v4);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

void sub_100061DBC(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v7;
  double v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;

  v5 = (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0;
  if (a2 <= 0.0 || !v5)
  {
    KeyPath = swift_getKeyPath(&unk_1000D48C8, a4);
    v11 = swift_getKeyPath(&unk_1000D48F0, v7);
    v14 = 0.0;
  }
  else
  {
    v8 = a1 / a2;
    KeyPath = swift_getKeyPath(&unk_1000D48C8, a4);
    v11 = swift_getKeyPath(&unk_1000D48F0, v10);
    v14 = v8;
  }
  swift_retain(v4);
  v12 = static Published.subscript.setter(&v14, v4, KeyPath, v11);
  sub_100061ACC(v12, v13);
}

uint64_t sub_100061E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC16MusicRecognition27SongPreviewStatusController__progress;
  v2 = sub_100004F7C(&qword_100119BE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC16MusicRecognition27SongPreviewStatusController__playbackStatus;
  v4 = sub_100004F7C(&qword_100119BE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100061F00()
{
  return type metadata accessor for SongPreviewStatusController(0);
}

uint64_t type metadata accessor for SongPreviewStatusController(uint64_t a1)
{
  uint64_t result;

  result = qword_100119B38;
  if (!qword_100119B38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SongPreviewStatusController);
  return result;
}

void sub_100061F44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_100061FEC(319, &qword_100119B48, (uint64_t)&type metadata for Double);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100061FEC(319, (unint64_t *)&unk_100119B50, (uint64_t)&type metadata for SongPreviewStatusController.PlaybackStatus);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_100061FEC(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t storeEnumTagSinglePayload for SongPreviewStatusController.PlaybackStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10006207C + 4 * byte_1000D47A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000620B0 + 4 * byte_1000D47A0[v4]))();
}

uint64_t sub_1000620B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000620B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000620C0);
  return result;
}

uint64_t sub_1000620CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000620D4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000620D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000620E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SongPreviewStatusController.PlaybackStatus()
{
  return &type metadata for SongPreviewStatusController.PlaybackStatus;
}

unint64_t sub_100062100()
{
  unint64_t result;

  result = qword_100119BD8;
  if (!qword_100119BD8)
  {
    result = swift_getWitnessTable(&unk_1000D481C, &type metadata for SongPreviewStatusController.PlaybackStatus);
    atomic_store(result, (unint64_t *)&qword_100119BD8);
  }
  return result;
}

uint64_t sub_100062154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v41 = a5;
  v42 = a1;
  v43 = a4;
  v44 = a2;
  v45 = a3;
  v11 = sub_100004F7C(&qword_100118660);
  __chkstk_darwin(v11);
  v39 = (uint64_t)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v13 - 8);
  v14 = v38;
  v15 = __chkstk_darwin(v13);
  v37 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v35 - v18;
  v36 = (uint64_t)&v35 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v35 - v20;
  v22 = (uint64_t *)((char *)a8 + *(int *)(type metadata accessor for ContextMenuForSubscribedUserView(0) + 24));
  *v22 = swift_getKeyPath(&unk_1000D4910, v23);
  v24 = sub_100004F7C(&qword_1001166A0);
  swift_storeEnumTagMultiPayload(v22, v24, 0);
  v40 = a8;
  *a8 = a6;
  a8[1] = a7;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25(v21, v44, v13);
  v25(v19, v45, v13);
  v26 = (uint64_t)v37;
  v25(v37, v43, v13);
  v27 = v41;
  v28 = v39;
  sub_100007C8C(v41, v39, &qword_100118660);
  v29 = type metadata accessor for ContextMenuForSubscribedUserViewModel(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  sub_100011F44(a6, a7);
  v30 = v42;
  v46 = sub_1000AC51C(v42, (uint64_t)v21, v36, v26, v28);
  State.init(wrappedValue:)(v47, &v46, v29);
  sub_10005CCBC(a6, a7);
  swift_release(v30);
  sub_10000526C(v27, &qword_100118660);
  v31 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v31(v43, v13);
  v31(v45, v13);
  result = ((uint64_t (*)(uint64_t, uint64_t))v31)(v44, v13);
  v33 = v47[1];
  v34 = v40;
  v40[2] = v47[0];
  v34[3] = v33;
  return result;
}

uint64_t type metadata accessor for ContextMenuForSubscribedUserView(uint64_t a1)
{
  uint64_t result;

  result = qword_100119D68;
  if (!qword_100119D68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContextMenuForSubscribedUserView);
  return result;
}

void sub_1000623EC()
{
  qword_100119BF0 = 0x73697370696C6C65;
  *(_QWORD *)algn_100119BF8 = 0xE800000000000000;
}

void sub_100062410()
{
  qword_100119C00 = 0x6461622E74786574;
  *(_QWORD *)algn_100119C08 = 0xEF73756C702E6567;
}

uint64_t sub_100062440()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000D8E80);
  qword_100119C10 = result;
  *(_QWORD *)algn_100119C18 = v1;
  byte_100119C20 = v2 & 1;
  qword_100119C28 = v3;
  return result;
}

uint64_t sub_100062484()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000027, 0x80000001000DB070);
  qword_100119C30 = result;
  *(_QWORD *)algn_100119C38 = v1;
  byte_100119C40 = v2 & 1;
  qword_100119C48 = v3;
  return result;
}

uint64_t sub_1000624C8()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x80000001000DB0A0);
  qword_100119C50 = result;
  *(_QWORD *)algn_100119C58 = v1;
  byte_100119C60 = v2 & 1;
  qword_100119C68 = v3;
  return result;
}

uint64_t sub_10006250C()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x80000001000DB1F0);
  qword_100119C70 = result;
  *(_QWORD *)algn_100119C78 = v1;
  byte_100119C80 = v2 & 1;
  qword_100119C88 = v3;
  return result;
}

uint64_t sub_100062550()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000029, 0x80000001000DB0D0);
  qword_100119C90 = result;
  qword_100119C98 = v1;
  byte_100119CA0 = v2 & 1;
  qword_100119CA8 = v3;
  return result;
}

uint64_t sub_100062594()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x80000001000DA0F0);
  qword_100119CB0 = result;
  *(_QWORD *)algn_100119CB8 = v1;
  byte_100119CC0 = v2 & 1;
  qword_100119CC8 = v3;
  return result;
}

uint64_t sub_1000625D8()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x80000001000D9130);
  qword_100119CD0 = result;
  *(_QWORD *)algn_100119CD8 = v1;
  byte_100119CE0 = v2 & 1;
  qword_100119CE8 = v3;
  return result;
}

uint64_t sub_10006261C()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  uint64_t v3;

  result = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x80000001000DB210);
  qword_100119CF0 = result;
  *(_QWORD *)algn_100119CF8 = v1;
  byte_100119D00 = v2 & 1;
  qword_100119D08 = v3;
  return result;
}

uint64_t sub_100062660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  __n128 v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  char *v81;
  __n128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v107;
  _QWORD v108[4];
  void *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void (**v121)(_QWORD, _QWORD, __n128);
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char v151[8];
  uint64_t v152;
  uint64_t v153;
  void *v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 v162;

  v2 = v1;
  v148 = a1;
  v147 = type metadata accessor for NavigationBarButtonStyle(0);
  v3 = __chkstk_darwin(v147);
  v145 = (uint64_t *)((char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v146 = (uint64_t)&v109 - v5;
  v6 = type metadata accessor for ButtonMenuStyle(0);
  v143 = *(_QWORD *)(v6 - 8);
  v144 = v6;
  __chkstk_darwin(v6);
  v142 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for URL(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v132 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100004F7C(&qword_100119DA8);
  v121 = *(void (***)(_QWORD, _QWORD, __n128))(v115 - 8);
  __chkstk_darwin(v115);
  v14 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100004F7C(&qword_100119DB0);
  v124 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125);
  v123 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100004F7C(&qword_100119DB8);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v150 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100004F7C(&qword_100119DC0);
  v129 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin(v131);
  v128 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100004F7C(&qword_100119DC8);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v133 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100004F7C(&qword_100119DD0);
  v138 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v130 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100004F7C(&qword_100119DD8);
  __chkstk_darwin(v140);
  v139 = (char *)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(v2, (uint64_t)v12, type metadata accessor for ContextMenuForSubscribedUserView);
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + 16) & ~v21;
  v118 = v22 + v11;
  v117 = v21 | 7;
  v23 = swift_allocObject(&unk_10010B318, v22 + v11, v21 | 7);
  v119 = v22;
  v122 = v12;
  sub_10000B4D4((uint64_t)v12, v23 + v22, type metadata accessor for ContextMenuForSubscribedUserView);
  v152 = v2;
  v24 = sub_100004F7C(&qword_100116838);
  v25 = sub_100004F7C(&qword_100119DE0);
  v154 = &type metadata for Image;
  v155 = &protocol witness table for Image;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  v27 = sub_10000522C(&qword_100119DE8, &qword_100119DE0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v120 = v14;
  Menu.init(onPresentationChanged:content:label:)(sub_100066944, v23, sub_100066990, v151, sub_1000648C0, 0, v24, v25, OpaqueTypeConformance2, v27);
  if (qword_100115FA8 != -1)
    swift_once(&qword_100115FA8, sub_100062550);
  v114 = qword_100119C90;
  v113 = qword_100119C98;
  v112 = byte_100119CA0;
  v111 = qword_100119CA8;
  v28 = *(_QWORD *)(v2 + 24);
  v160 = *(_QWORD *)(v2 + 16);
  v161 = v28;
  v149 = sub_100004F7C(&qword_100119DF0);
  State.projectedValue.getter(&v154);
  v29 = v154;
  v30 = v155;
  v31 = v156;
  KeyPath = swift_getKeyPath(&unk_1000D49E8, v32);
  v154 = v29;
  v155 = v30;
  v156 = v31;
  v34 = sub_100004F7C(&qword_100119DF8);
  v116 = v34;
  Binding.subscript.getter(&v160, KeyPath, v34);
  swift_release(v31);
  swift_release(v30);
  swift_release(KeyPath);
  swift_release(v29);
  v35 = v160;
  v36 = v161;
  v37 = v162;
  __chkstk_darwin(v38);
  v39 = sub_100004F7C(&qword_100117A30);
  v109 = (void *)v39;
  v40 = sub_10000522C(&qword_100119E00, &qword_100119DA8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
  v110 = v40;
  v41 = sub_100066B40((unint64_t *)&qword_100117A50, &qword_100117A30, &qword_100117A58, &qword_100117A60);
  v108[2] = v41;
  v108[3] = &protocol witness table for Text;
  v108[0] = &type metadata for Text;
  v108[1] = v40;
  v107 = v39;
  v42 = (void *)v115;
  v43 = v123;
  v44 = v37;
  v45 = v120;
  ((void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD, uint64_t, uint64_t))View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:))(v114, v113, v112, v111, v35, v36, v44, 0, sub_1000669C0, v108, sub_100064F88, 0, v115, v107);
  swift_release(v36);
  v46 = swift_release(v35);
  ((void (**)(char *, void *, __n128))v121)[1](v45, v42, v46);
  v47 = *(_QWORD *)(v2 + 24);
  v160 = *(_QWORD *)(v2 + 16);
  v161 = v47;
  State.projectedValue.getter(&v154);
  v48 = v154;
  v49 = v155;
  v50 = v156;
  v52 = swift_getKeyPath(&unk_1000D4A10, v51);
  v154 = v48;
  v155 = v49;
  v156 = v50;
  Binding.subscript.getter(&v160, v52, v34);
  swift_release(v50);
  swift_release(v49);
  swift_release(v52);
  swift_release(v48);
  v54 = v160;
  v53 = v161;
  v55 = v162;
  v56 = (uint64_t)v122;
  sub_10000B340(v2, (uint64_t)v122, type metadata accessor for ContextMenuForSubscribedUserView);
  v57 = swift_allocObject(&unk_10010B340, v118, v117);
  sub_10000B4D4(v56, v57 + v119, type metadata accessor for ContextMenuForSubscribedUserView);
  v58 = sub_100004F7C(&qword_100119E08);
  v121 = (void (**)(_QWORD, _QWORD, __n128))v58;
  v154 = v42;
  v155 = v109;
  v156 = &type metadata for Text;
  v157 = v110;
  v158 = v41;
  v159 = &protocol witness table for Text;
  v59 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)>>, 1);
  v122 = (char *)v59;
  v60 = sub_10000522C(&qword_100119E10, &qword_100119E08, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
  v108[0] = v58;
  v61 = (void *)v125;
  View.sheet<A>(isPresented:onDismiss:content:)(v54, v53, v55, 0, 0, sub_1000669F4, v57, v125, v108[0], v59, v60);
  swift_release(v53);
  swift_release(v57);
  v62 = swift_release(v54);
  (*(void (**)(char *, void *, __n128))(v124 + 8))(v43, v61, v62);
  v63 = *(_QWORD *)(v2 + 24);
  v160 = *(_QWORD *)(v2 + 16);
  v161 = v63;
  v64 = v149;
  State.projectedValue.getter(&v154);
  v65 = v154;
  v66 = v155;
  v67 = v156;
  v69 = swift_getKeyPath(&unk_1000D4A38, v68);
  v154 = v65;
  v155 = v66;
  v156 = v67;
  Binding.subscript.getter(&v160, v69, v116);
  swift_release(v67);
  swift_release(v66);
  swift_release(v69);
  swift_release(v65);
  v70 = v160;
  v71 = v161;
  v72 = v162;
  v73 = *(void **)(v2 + 24);
  v154 = *(void **)(v2 + 16);
  v155 = v73;
  State.wrappedValue.getter(&v153, v64);
  v74 = v153;
  v75 = v134;
  v76 = v132;
  v77 = v135;
  (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v132, v153 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamURL, v135);
  swift_release(v74);
  v154 = v61;
  v155 = v121;
  v156 = v122;
  v157 = v60;
  v78 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v79 = (void *)v127;
  v80 = v128;
  v81 = v150;
  View.sharingPicker(isPresented:item:subject:message:)(v70, v71, v72, v76, 0, 0, 0, 0, 0, 0, 0, 0, v127, v78);
  swift_release(v71);
  v82 = swift_release(v70);
  (*(void (**)(char *, uint64_t, __n128))(v75 + 8))(v76, v77, v82);
  v83 = (*(uint64_t (**)(char *, void *))(v126 + 8))(v81, v79);
  v84 = v142;
  ButtonMenuStyle.init()(v83);
  v154 = v79;
  v155 = (void *)v78;
  v85 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.sharingPicker(isPresented:item:subject:message:)>>, 1);
  v86 = sub_100004864(&qword_100116868, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
  v87 = v133;
  v88 = (void *)v131;
  v89 = (void *)v144;
  View.menuStyle<A>(_:)(v84, v131, v144, v85, v86);
  (*(void (**)(char *, void *))(v143 + 8))(v84, v89);
  (*(void (**)(char *, void *))(v129 + 8))(v80, v88);
  v91 = swift_getKeyPath(&unk_1000D4A60, v90);
  v92 = (uint64_t)v145;
  *v145 = v91;
  v93 = sub_100004F7C(&qword_100116698);
  swift_storeEnumTagMultiPayload(v92, v93, 0);
  v94 = v146;
  sub_10000B4D4(v92, v146, type metadata accessor for NavigationBarButtonStyle);
  v154 = v88;
  v155 = v89;
  v156 = (void *)v85;
  v157 = v86;
  v95 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
  v96 = sub_100004864(&qword_100116870, type metadata accessor for NavigationBarButtonStyle, (uint64_t)&unk_1000D2ACC);
  v97 = v130;
  v98 = (void *)v137;
  v99 = (void *)v147;
  View.buttonStyle<A>(_:)(v94, v137);
  sub_10000B600(v94, type metadata accessor for NavigationBarButtonStyle);
  (*(void (**)(char *, void *))(v136 + 8))(v87, v98);
  if (qword_100116110 != -1)
    swift_once(&qword_100116110, sub_1000801D8);
  v100 = qword_100124630;
  v101 = *(_QWORD *)algn_100124638;
  v154 = v98;
  v155 = v99;
  v156 = (void *)v95;
  v157 = v96;
  v102 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v103 = (uint64_t)v139;
  v104 = v141;
  View.accessibilityIdentifier(_:)(v100, v101, v141, v102);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v97, v104);
  v154 = (void *)qword_100124630;
  v155 = *(void **)algn_100124638;
  v105 = sub_10000B110();
  ModifiedContent<>.accessibilityLabel<A>(_:)(&v154, v140, &type metadata for String, v105);
  return sub_10000526C(v103, &qword_100119DD8);
}

uint64_t sub_1000632F4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v48 = a2;
  v44 = sub_100004F7C(&qword_100116888);
  v47 = *(_QWORD *)(v44 - 8);
  v3 = __chkstk_darwin(v44);
  v50 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v49 = (char *)&v41 - v6;
  v7 = __chkstk_darwin(v5);
  v46 = (char *)&v41 - v8;
  __chkstk_darwin(v7);
  v51 = (char *)&v41 - v9;
  v43 = sub_100004F7C(&qword_100119E38);
  v52 = *(_QWORD *)(v43 - 8);
  v10 = __chkstk_darwin(v43);
  v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  if (qword_100115FC0 != -1)
    v12 = swift_once(&qword_100115FC0, sub_10006261C);
  v16 = qword_100119CF0;
  v15 = *(_QWORD *)algn_100119CF8;
  v17 = byte_100119D00;
  v18 = qword_100119D08;
  __chkstk_darwin(v12);
  *(&v41 - 2) = a1;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  v19 = sub_100004F7C(&qword_100119E40);
  v20 = sub_10000522C(&qword_100119E48, &qword_100119E40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v42 = v14;
  v21 = Section<>.init(_:content:)(v16, v15, v17, v18, sub_100066B30, &v41 - 4, v19, v20);
  __chkstk_darwin(v21);
  *(&v41 - 2) = a1;
  v22 = sub_100004F7C(&qword_100116890);
  v23 = sub_100066B40((unint64_t *)&qword_100116898, &qword_100116890, &qword_1001168A0, &qword_1001168A8);
  v24 = v51;
  v25 = Section<>.init(content:)(sub_100066B38, &v41 - 4, v22, v23);
  __chkstk_darwin(v25);
  *(&v41 - 2) = a1;
  v26 = v46;
  Section<>.init(content:)(sub_100066BD8, &v41 - 4, v22, v23);
  v27 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v28 = v45;
  v29 = v14;
  v30 = v43;
  v27(v45, v29, v43);
  v31 = v47;
  v32 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v33 = v49;
  v34 = v44;
  v32(v49, v24, v44);
  v35 = v50;
  v32(v50, v26, v34);
  v36 = v48;
  v27(v48, v28, v30);
  v37 = sub_100004F7C(&qword_100119E50);
  v32(&v36[*(int *)(v37 + 48)], v33, v34);
  v32(&v36[*(int *)(v37 + 64)], v35, v34);
  v38 = *(void (**)(char *, uint64_t))(v31 + 8);
  v38(v26, v34);
  v38(v51, v34);
  v39 = *(void (**)(char *, uint64_t))(v52 + 8);
  v39(v42, v30);
  v38(v35, v34);
  v38(v33, v34);
  return ((uint64_t (*)(char *, uint64_t))v39)(v28, v30);
}

uint64_t sub_1000636CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v94 = a2;
  v3 = sub_100004F7C(&qword_100119E58);
  v89 = *(_QWORD *)(v3 - 8);
  v90 = v3;
  __chkstk_darwin(v3);
  v88 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004F7C(&qword_100119E60);
  v6 = __chkstk_darwin(v5);
  v95 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v102 = (uint64_t)&v84 - v8;
  v9 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v100 = *(char **)(v9 - 8);
  __chkstk_darwin(v9);
  v96 = v10;
  v87 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_1001168A8);
  v98 = *(_QWORD *)(v11 - 8);
  v99 = v11;
  __chkstk_darwin(v11);
  v97 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100004F7C(&qword_100116890);
  v85 = *(_QWORD *)(v86 - 8);
  v13 = __chkstk_darwin(v86);
  v93 = (uint64_t)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v92 = (char *)&v84 - v16;
  v17 = __chkstk_darwin(v15);
  v91 = (uint64_t)&v84 - v18;
  __chkstk_darwin(v17);
  v103 = (uint64_t)&v84 - v19;
  v20 = sub_100004F7C(&qword_100118660);
  __chkstk_darwin(v20);
  v22 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for StreamingService(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  v26 = __chkstk_darwin(v23);
  v27 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v84 - v28;
  v30 = sub_100004F7C(&qword_100119E68);
  v31 = __chkstk_darwin(v30);
  v101 = (uint64_t)&v84 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v34 = (char *)&v84 - v33;
  v35 = *(_QWORD *)(a1 + 24);
  v104 = *(_QWORD *)(a1 + 16);
  v105 = v35;
  v36 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v106, v36);
  v37 = v106;
  sub_100007C8C(v106 + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel_classicalProvider, (uint64_t)v22, &qword_100118660);
  v38 = swift_release(v37);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v24 + 48))(v22, 1, v23, v38) == 1)
  {
    sub_10000526C((uint64_t)v22, &qword_100118660);
    v39 = 1;
    v40 = v87;
  }
  else
  {
    sub_10000B4D4((uint64_t)v22, (uint64_t)v29, type metadata accessor for StreamingService);
    v41 = v87;
    sub_10000B340(a1, v87, type metadata accessor for ContextMenuForSubscribedUserView);
    sub_10000B340((uint64_t)v29, (uint64_t)v27, type metadata accessor for StreamingService);
    v42 = v100[80];
    v43 = (v42 + 16) & ~v42;
    v44 = *(unsigned __int8 *)(v24 + 80);
    v45 = (v96 + v44 + v43) & ~v44;
    v46 = swift_allocObject(&unk_10010B480, v45 + v25, v42 | v44 | 7);
    sub_10000B4D4(v41, v46 + v43, type metadata accessor for ContextMenuForSubscribedUserView);
    v47 = sub_10000B4D4((uint64_t)v27, v46 + v45, type metadata accessor for StreamingService);
    __chkstk_darwin(v47);
    *(&v84 - 2) = a1;
    *(&v84 - 1) = (uint64_t)v29;
    v48 = sub_100004F7C(&qword_1001164F8);
    v49 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    v50 = v97;
    Button.init(action:label:)(sub_100066EB4, v46, sub_100066F3C, &v84 - 4, v48, v49);
    v51 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v52 = v103;
    v53 = v99;
    View.accessibilityIdentifier(_:)(0xD000000000000020, 0x80000001000DB140, v99, v51);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v50, v53);
    sub_10000B600((uint64_t)v29, type metadata accessor for StreamingService);
    sub_100007C48(v52, (uint64_t)v34, &qword_100116890);
    v39 = 0;
    v40 = v41;
  }
  v54 = v96;
  v55 = (uint64_t)v100;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v34, v39, 1, v86);
  sub_10000B340(a1, v40, type metadata accessor for ContextMenuForSubscribedUserView);
  v56 = *(unsigned __int8 *)(v55 + 80);
  v57 = (v56 + 16) & ~v56;
  v58 = v57 + v54;
  v59 = v56 | 7;
  v60 = swift_allocObject(&unk_10010B430, v57 + v54, v56 | 7);
  v100 = v34;
  v61 = a1;
  v62 = v60;
  sub_10000B4D4(v40, v60 + v57, type metadata accessor for ContextMenuForSubscribedUserView);
  v63 = sub_100004F7C(&qword_100117EC8);
  v64 = sub_10000522C(&qword_100117EE8, &qword_100117EC8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v65 = v88;
  Button.init(action:label:)(sub_100066D40, v62, sub_1000656D0, 0, v63, v64);
  v66 = sub_10000522C(&qword_100119E70, &qword_100119E58, (uint64_t)&protocol conformance descriptor for Button<A>);
  v67 = (uint64_t)v95;
  v68 = v90;
  View.accessibilityIdentifier(_:)(0xD00000000000001CLL, 0x80000001000DB100, v90, v66);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v65, v68);
  sub_100007C48(v67, v102, &qword_100119E60);
  sub_100063F94(v103);
  sub_10000B340(v61, v40, type metadata accessor for ContextMenuForSubscribedUserView);
  v69 = swift_allocObject(&unk_10010B458, v58, v59);
  sub_10000B4D4(v40, v69 + v57, type metadata accessor for ContextMenuForSubscribedUserView);
  v70 = sub_100004F7C(&qword_1001164F8);
  v71 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v72 = v97;
  Button.init(action:label:)(sub_100066D50, v69, sub_100066234, 0, v70, v71);
  v73 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v74 = (uint64_t)v92;
  v75 = v99;
  View.accessibilityIdentifier(_:)(0xD000000000000011, 0x80000001000DB120, v99, v73);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v72, v75);
  v76 = v91;
  sub_100007C48(v74, v91, &qword_100116890);
  v77 = v101;
  sub_100007C8C((uint64_t)v100, v101, &qword_100119E68);
  v78 = v102;
  sub_100007C8C(v102, v67, &qword_100119E60);
  v79 = v103;
  sub_100007C8C(v103, v74, &qword_100116890);
  v80 = v93;
  sub_100007C8C(v76, v93, &qword_100116890);
  v81 = v94;
  sub_100007C8C(v77, v94, &qword_100119E68);
  v82 = (int *)sub_100004F7C(&qword_100119E78);
  sub_100007C8C(v67, v81 + v82[12], &qword_100119E60);
  sub_100007C8C(v74, v81 + v82[16], &qword_100116890);
  sub_100007C8C(v80, v81 + v82[20], &qword_100116890);
  sub_10000526C(v76, &qword_100116890);
  sub_10000526C(v79, &qword_100116890);
  sub_10000526C(v78, &qword_100119E60);
  sub_10000526C((uint64_t)v100, &qword_100119E68);
  sub_10000526C(v80, &qword_100116890);
  sub_10000526C(v74, &qword_100116890);
  sub_10000526C(v67, &qword_100119E60);
  return sub_10000526C(v101, &qword_100119E68);
}

uint64_t sub_100063F94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v42 = a1;
  v3 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100004F7C(&qword_1001180C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_1001168A8);
  v40 = *(_QWORD *)(v9 - 8);
  v41 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 24);
  v43 = *(_QWORD *)(v1 + 16);
  v44 = v12;
  v39 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v45, v39);
  v13 = v45;
  KeyPath = swift_getKeyPath(&unk_1000D4AB8, v14);
  v43 = v13;
  v16 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v43, KeyPath, v16);
  swift_release(KeyPath);
  v17 = *(unsigned __int8 *)(v13
                           + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__isSongInLibrary);
  v19 = swift_release(v13);
  if (v17 == 1)
    static ButtonRole.destructive.getter(v18);
  else
    static ButtonRole.cancel.getter(v19);
  v20 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 0, 1, v20);
  sub_10000B340(v2, (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForSubscribedUserView);
  v21 = *(unsigned __int8 *)(v4 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_10010B4A8, v22 + v5, v21 | 7);
  v24 = sub_10000B4D4((uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for ContextMenuForSubscribedUserView);
  __chkstk_darwin(v24);
  *(&v38 - 2) = v2;
  v25 = sub_100004F7C(&qword_1001164F8);
  v26 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(role:action:label:)(v8, sub_100067078, v23, sub_1000670C0, &v38 - 4, v25, v26);
  v27 = *(_QWORD *)(v2 + 24);
  v43 = *(_QWORD *)(v2 + 16);
  v44 = v27;
  State.wrappedValue.getter(&v45, v39);
  v28 = v45;
  v30 = swift_getKeyPath(&unk_1000D4AB8, v29);
  v43 = v28;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v43, v30, v16);
  swift_release(v30);
  v31 = *(unsigned __int8 *)(v28
                           + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__isSongInLibrary);
  swift_release(v28);
  if (v31)
    v32 = 0xD000000000000019;
  else
    v32 = 0xD000000000000014;
  if (v31)
    v33 = 0x80000001000DB190;
  else
    v33 = 0x80000001000DB170;
  v34 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v35 = v32;
  v36 = v41;
  View.accessibilityIdentifier(_:)(v35, v33, v41, v34);
  swift_bridgeObjectRelease(v33);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v11, v36);
}

uint64_t sub_100064314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a2;
  v3 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v35 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v35 + 64);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_1001168A8);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  __chkstk_darwin(v6);
  v34 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - v13;
  v15 = *(_QWORD *)(a1 + 24);
  v39 = *(_QWORD *)(a1 + 16);
  v40 = v15;
  v16 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v41, v16);
  v17 = v41;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v18(v14, v41 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_shazamAppStoreURL, v8);
  swift_release(v17);
  sub_10000B340(a1, (uint64_t)v5, type metadata accessor for ContextMenuForSubscribedUserView);
  v18(v12, (uint64_t)v14, v8);
  v19 = *(unsigned __int8 *)(v35 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v4 + v21 + v20) & ~v21;
  v23 = swift_allocObject(&unk_10010B408, v22 + v10, v19 | v21 | 7);
  v24 = v23 + v20;
  v25 = v34;
  sub_10000B4D4((uint64_t)v5, v24, type metadata accessor for ContextMenuForSubscribedUserView);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v23 + v22, v12, v8);
  v26 = sub_100004F7C(&qword_1001164F8);
  v27 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_100066D20, v23, sub_1000664B0, 0, v26, v27);
  if (qword_100116118 != -1)
    swift_once(&qword_100116118, sub_100080208);
  v28 = qword_100124640;
  v29 = *(_QWORD *)algn_100124648;
  v30 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v31 = v28;
  v32 = v37;
  View.accessibilityIdentifier(_:)(v31, v29, v37, v30);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
}

uint64_t sub_1000645E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  _QWORD v31[2];

  v2 = v1;
  v31[0] = a1;
  v3 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_100004F7C(&qword_1001168A8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100116890);
  __chkstk_darwin(v10);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(v2, (uint64_t)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForSubscribedUserView);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = swift_allocObject(&unk_10010B3E0, v14 + v5, v13 | 7);
  sub_10000B4D4((uint64_t)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for ContextMenuForSubscribedUserView);
  v16 = sub_100004F7C(&qword_1001164F8);
  v17 = sub_10000522C(&qword_100116530, &qword_1001164F8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  Button.init(action:label:)(sub_100066BFC, v15, sub_10006602C, 0, v16, v17);
  if (qword_1001160C0 != -1)
    swift_once(&qword_1001160C0, sub_100080044);
  v18 = qword_100124590;
  v19 = *(_QWORD *)algn_100124598;
  v20 = sub_10000522C(&qword_1001168A0, &qword_1001168A8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(v18, v19, v6, v20);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (qword_100115F88 != -1)
    swift_once(&qword_100115F88, sub_100062440);
  v21 = qword_100119C10;
  v22 = qword_100119C28;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119C18);
  swift_bridgeObjectRetain(v22);
  v23 = Text.init(_:tableName:bundle:comment:)(v21);
  v25 = v24;
  v27 = v26;
  v29 = v28 & 1;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_10000B64C(v23, v25, v29);
  swift_bridgeObjectRelease(v27);
  return sub_10000526C((uint64_t)v12, &qword_100116890);
}

double sub_1000648C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  double result;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for SymbolVariants(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v12 - v5;
  if (qword_100115F78 != -1)
    swift_once(&qword_100115F78, sub_1000623EC);
  v7 = qword_100119BF0;
  v8 = *(_QWORD *)algn_100119BF8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119BF8);
  v13 = Image.init(systemName:)(v7, v8);
  v9 = static SymbolVariants.circle.getter(v13);
  SymbolVariants.fill.getter(v9);
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  View.symbolVariant(_:)(v4, &type metadata for Image, &protocol witness table for Image);
  v10(v4, v0);
  *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  return result;
}

void sub_1000649F0(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  sub_10006505C(a1, a2, (uint64_t)&unk_1000D49E8, &OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__confirmationDialogPresented, a3);
}

double sub_100064A04(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D49E8, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100066B14, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100064AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a1;
  v27 = a2;
  v2 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_1001180C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_100117A60);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100115F98 != -1)
    swift_once(&qword_100115F98, sub_1000624C8);
  v12 = *(_QWORD *)algn_100119C58;
  v24 = qword_100119C50;
  v13 = byte_100119C60;
  v14 = qword_100119C68;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119C58);
  v15 = swift_bridgeObjectRetain(v14);
  static ButtonRole.destructive.getter(v15);
  v16 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_10000B340(v25, (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForSubscribedUserView);
  v17 = *(unsigned __int8 *)(v3 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_10010B390, v18 + v4, v17 | 7);
  sub_10000B4D4((uint64_t)v5, v19 + v18, type metadata accessor for ContextMenuForSubscribedUserView);
  Button<>.init(_:role:action:)(v24, v12, v13, v14, v8, sub_100066A80, v19);
  if (qword_100116128 != -1)
    swift_once(&qword_100116128, sub_100080258);
  v20 = qword_100124660;
  v21 = *(_QWORD *)algn_100124668;
  v22 = sub_10000522C(&qword_100117A58, &qword_100117A60, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibilityIdentifier(_:)(v20, v21, v9, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, v9);
}

double sub_100064D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v2 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  sub_10000B340(a1, (uint64_t)v5, type metadata accessor for ContextMenuForSubscribedUserView);
  v10 = type metadata accessor for MainActor(0);
  v11 = static MainActor.shared.getter(v10);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(&unk_10010B3B8, v13 + v4, v12 | 7);
  *(_QWORD *)(v14 + 16) = v11;
  *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
  sub_10000B4D4((uint64_t)v5, v14 + v13, type metadata accessor for ContextMenuForSubscribedUserView);
  v15 = sub_1000A9F18((uint64_t)v8, (uint64_t)&unk_100119E30, v14);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

uint64_t sub_100064E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_100064EBC, v6, v7);
}

uint64_t sub_100064EBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[5];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v0[2] = v3;
  v0[3] = v2;
  v4 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(v0 + 4, v4);
  v0[9] = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10011C494);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_100064F34;
  return sub_1000AB420();
}

uint64_t sub_100064F34()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v2);
  return swift_task_switch(sub_100067494, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100064F88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (qword_100115F90 != -1)
    swift_once(&qword_100115F90, sub_100062484);
  v2 = qword_100119C30;
  v3 = qword_100119C48;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119C38);
  swift_bridgeObjectRetain(v3);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

void sub_100065048(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  sub_10006505C(a1, a2, (uint64_t)&unk_1000D4A10, &OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__addToPlaylistSheetPresented, a3);
}

void sub_10006505C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;

  v7 = *a1;
  KeyPath = swift_getKeyPath(a3, a2);
  v10 = v7;
  v9 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v9);
  swift_release(KeyPath);
  *a5 = *(_BYTE *)(v7 + *a4);
}

double sub_1000650F4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D4A10, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100067498, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10006519C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v4[2] = a1;
  v1 = type metadata accessor for AddToPlaylistView(0);
  v2 = sub_100004864(&qword_100119E18, type metadata accessor for AddToPlaylistView, (uint64_t)&unk_1000D2BD0);
  return NavigationView.init(content:)(sub_100066A48, v4, v1, v2);
}

void sub_100065208(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;

  v4 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(_QWORD *)(a1 + 24);
  v14[1] = *(_QWORD *)(a1 + 16);
  v14[2] = v7;
  v8 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v15, v8);
  v9 = v15;
  v10 = *(_QWORD *)(v15
                  + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel_musicLibraryController);
  swift_retain(v10);
  swift_release(v9);
  sub_10000B340(a1, (uint64_t)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContextMenuForSubscribedUserView);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = swift_allocObject(&unk_10010B368, v12 + v6, v11 | 7);
  sub_10000B4D4((uint64_t)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, type metadata accessor for ContextMenuForSubscribedUserView);
  sub_100020D70(v10, (uint64_t)sub_100066A54, v13, a2);
}

double sub_100065324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  _QWORD v9[2];
  uint64_t v10;

  v9[1] = *(_QWORD *)(a1 + 24);
  v1 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v10, v1);
  v2 = v10;
  KeyPath = swift_getKeyPath(&unk_1000D4A10, v3);
  v7[2] = v2;
  v8 = 0;
  v9[0] = v2;
  v5 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v9, KeyPath, sub_100066A60, v7, (char *)&type metadata for () + 8, v5);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_1000653F0(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D4A90, a2);
  v7 = v4;
  v6 = sub_100004864(&qword_100116878, type metadata accessor for ContextMenuViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v6);
  swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel__shareSheetFromOverflow);
}

double sub_100065484(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D4A90, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864(&qword_100116878, type metadata accessor for ContextMenuViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10000B15C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10006552C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OpenURLAction(0);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 16);
  v9 = v19;
  v20 = v10;
  v11 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v21, v11);
  v12 = v21;
  type metadata accessor for ContextMenuForSubscribedUserView(0);
  sub_100006A38(v8);
  v19 = v9;
  v20 = v10;
  State.wrappedValue.getter(&v21, v11);
  v13 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21 + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel_songCampaignURL, v2);
  swift_release(v13);
  OpenURLAction.callAsFunction(_:)(v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v8, v18);
  if (*(_BYTE *)(v12 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member))
    v14 = 67841;
  else
    v14 = 2305;
  sub_1000A6994(v14, 0xD000000000000028, 0x80000001000D90E0);
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_1000656D0()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  _QWORD v3[2];

  v0 = sub_100004F7C(&qword_100116838);
  v3[0] = &type metadata for Image;
  v3[1] = &protocol witness table for Image;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  return Label.init(title:icon:)(sub_100065764, 0, sub_100065824, 0, &type metadata for Text, v0, &protocol witness table for Text, OpaqueTypeConformance2);
}

uint64_t sub_100065764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (qword_100115FA0 != -1)
    swift_once(&qword_100115FA0, sub_10006250C);
  v2 = qword_100119C70;
  v3 = qword_100119C88;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119C78);
  swift_bridgeObjectRetain(v3);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_100065824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v0 = type metadata accessor for SymbolVariants(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v10 - v5;
  v11 = Image.init(_internalSystemName:)(0x636973756DLL, 0xE500000000000000);
  v7 = static SymbolVariants.square.getter();
  SymbolVariants.fill.getter(v7);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v6, v0);
  View.symbolVariant(_:)(v4, &type metadata for Image, &protocol witness table for Image);
  v8(v4, v0);
  return swift_release(v11);
}

double sub_100065918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v28 = *(_QWORD *)(v2 - 8);
  v3 = *(_QWORD *)(v28 + 64);
  __chkstk_darwin(v2);
  v29 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v30 = v8;
  v31 = v7;
  v9 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v32, v9);
  v10 = v32;
  KeyPath = swift_getKeyPath(&unk_1000D4AB8, v11);
  v30 = v10;
  v13 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v30, KeyPath, v13);
  swift_release(KeyPath);
  v14 = *(unsigned __int8 *)(v10
                           + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__isSongInLibrary);
  swift_release(v10);
  if (v14 == 1)
  {
    v30 = v8;
    v31 = v7;
    State.wrappedValue.getter(&v32, v9);
    v15 = v32;
    v17 = swift_getKeyPath(&unk_1000D49E8, v16);
    __chkstk_darwin(v17);
    *(&v28 - 2) = v15;
    *((_BYTE *)&v28 - 8) = 1;
    v30 = v15;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v30, v17, sub_1000674AC, &v28 - 4, (char *)&type metadata for () + 8, v13);
    swift_release(v15);
    *(_QWORD *)&result = swift_release(v17).n128_u64[0];
  }
  else
  {
    v19 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
    v20 = a1;
    v21 = v29;
    sub_10000B340(v20, v29, type metadata accessor for ContextMenuForSubscribedUserView);
    v22 = type metadata accessor for MainActor(0);
    v23 = static MainActor.shared.getter(v22);
    v24 = *(unsigned __int8 *)(v28 + 80);
    v25 = (v24 + 32) & ~v24;
    v26 = swift_allocObject(&unk_10010B4D0, v25 + v3, v24 | 7);
    *(_QWORD *)(v26 + 16) = v23;
    *(_QWORD *)(v26 + 24) = &protocol witness table for MainActor;
    sub_10000B4D4(v21, v26 + v25, type metadata accessor for ContextMenuForSubscribedUserView);
    v27 = sub_1000A9F18((uint64_t)v6, (uint64_t)&unk_100119E88, v26);
    *(_QWORD *)&result = swift_release(v27).n128_u64[0];
  }
  return result;
}

uint64_t sub_100065BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_100065C2C, v6, v7);
}

uint64_t sub_100065C2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[5];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v0[2] = v3;
  v0[3] = v2;
  v4 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(v0 + 4, v4);
  v0[9] = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10011C49C);
  v0[10] = v5;
  *v5 = v0;
  v5[1] = sub_100021C28;
  return sub_1000AB9A8();
}

uint64_t sub_100065CA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v33 = a2;
  v3 = sub_100004F7C(&qword_1001164F8);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v34 = v6;
  v35 = v7;
  v8 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v36, v8);
  v9 = v36;
  KeyPath = swift_getKeyPath(&unk_1000D4AB8, v10);
  v34 = v9;
  v12 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, KeyPath, v12);
  swift_release(KeyPath);
  if (*(_BYTE *)(v9 + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__isSongInLibrary) == 1)
  {
    v13 = 0xD00000000000001FLL;
    v14 = 0x80000001000DB1D0;
  }
  else
  {
    v14 = 0x80000001000DB1B0;
    v13 = 0xD000000000000015;
  }
  v30 = LocalizedStringKey.init(stringLiteral:)(v13, v14);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v9);
  v34 = v6;
  v35 = v7;
  State.wrappedValue.getter(&v36, v8);
  v21 = v36;
  v23 = swift_getKeyPath(&unk_1000D4AB8, v22);
  v34 = v21;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v23, v12);
  swift_release(v23);
  if (*(_BYTE *)(v21 + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__isSongInLibrary) == 1)
  {
    if (qword_100116308 != -1)
      swift_once(&qword_100116308, sub_1000ABF9C);
    v24 = &qword_10011C2E0;
  }
  else
  {
    if (qword_100116300 != -1)
      swift_once(&qword_100116300, sub_1000ABF80);
    v24 = &qword_10011C2D0;
  }
  v26 = *v24;
  v25 = v24[1];
  swift_bridgeObjectRetain(v25);
  v27 = swift_release(v21);
  Label<>.init(_:systemImage:)(v30, v16, v18 & 1, v20, v26, v25, v27);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v5, v32);
}

double sub_100065F20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  double result;
  _QWORD v8[3];
  char v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[1] = *(_QWORD *)(a1 + 24);
  v1 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v11, v1);
  v2 = v11;
  KeyPath = swift_getKeyPath(&unk_1000D4A90, v3);
  v8[2] = v2;
  v9 = 1;
  v10[0] = v2;
  v5 = sub_100004864(&qword_100116878, type metadata accessor for ContextMenuViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v10, KeyPath, sub_10000B918, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member))
    v6 = 67840;
  else
    v6 = 2304;
  sub_1000A6994(v6, 0xD000000000000028, 0x80000001000D90E0);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_10006602C()
{
  return Label.init(title:icon:)(sub_100066068, 0, sub_10000A940, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100066068@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (qword_100115F88 != -1)
    swift_once(&qword_100115F88, sub_100062440);
  v2 = qword_100119C10;
  v3 = qword_100119C28;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119C18);
  swift_bridgeObjectRetain(v3);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

double sub_100066128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  double result;
  _QWORD v8[3];
  char v9;
  _QWORD v10[2];
  uint64_t v11;

  v10[1] = *(_QWORD *)(a1 + 24);
  v1 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v11, v1);
  v2 = v11;
  KeyPath = swift_getKeyPath(&unk_1000D4A10, v3);
  v8[2] = v2;
  v9 = 1;
  v10[0] = v2;
  v5 = sub_100004864(&qword_100119E20, type metadata accessor for ContextMenuForSubscribedUserViewModel, (uint64_t)&unk_1000D8850);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v10, KeyPath, sub_100067498, v8, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member))
    v6 = 67850;
  else
    v6 = 2314;
  sub_1000A6994(v6, 0xD000000000000028, 0x80000001000D90E0);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100066234()
{
  return Label.init(title:icon:)(sub_100066270, 0, sub_100066330, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100066270@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (qword_100115FB0 != -1)
    swift_once(&qword_100115FB0, sub_100062594);
  v2 = qword_100119CB0;
  v3 = qword_100119CC8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119CB8);
  swift_bridgeObjectRetain(v3);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

uint64_t sub_100066330@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (qword_100115F80 != -1)
    swift_once(&qword_100115F80, sub_100062410);
  v2 = qword_100119C00;
  v3 = *(_QWORD *)algn_100119C08;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119C08);
  result = Image.init(systemName:)(v2, v3);
  *a1 = result;
  return result;
}

double sub_1000663A0()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;

  v0 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v3, v0);
  v1 = v3;
  sub_1000C77FC((uint64_t (*)(_QWORD))sub_100066D34);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_100066410(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v3 = type metadata accessor for OpenURLAction(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ContextMenuForSubscribedUserView(0);
  sub_100006A38(v6);
  OpenURLAction.callAsFunction(_:)(a2);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000664B0()
{
  return Label.init(title:icon:)(sub_1000664EC, 0, sub_100004274, 0, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_1000664EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (qword_100115FB8 != -1)
    swift_once(&qword_100115FB8, sub_1000625D8);
  v2 = qword_100119CD0;
  v3 = qword_100119CE8;
  swift_bridgeObjectRetain(*(_QWORD *)algn_100119CD8);
  swift_bridgeObjectRetain(v3);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6 & 1;
  *(_QWORD *)(a1 + 24) = v7;
  return result;
}

double sub_1000665AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double result;
  _QWORD v14[3];
  uint64_t v15;

  v4 = type metadata accessor for OpenURLAction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 24);
  v14[1] = *(_QWORD *)(a1 + 16);
  v14[2] = v8;
  v9 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v15, v9);
  v10 = v15;
  type metadata accessor for ContextMenuForSubscribedUserView(0);
  sub_100006A38(v7);
  v11 = type metadata accessor for StreamingService(0);
  OpenURLAction.callAsFunction(_:)(a2 + *(int *)(v11 + 20));
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if (*(_BYTE *)(v10 + OBJC_IVAR____TtC16MusicRecognition20ContextMenuViewModel_member))
    v12 = 67849;
  else
    v12 = 2313;
  sub_1000A6994(v12, 0xD000000000000028, 0x80000001000D90E0);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  return result;
}

uint64_t sub_1000666CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_100004F7C(&qword_100119DF0);
  State.wrappedValue.getter(&v10, v2);
  v3 = v10;
  v4 = *(_QWORD *)(v10 + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel_openInClassicalTitle);
  v5 = *(_QWORD *)(v10
                 + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel_openInClassicalTitle
                 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v10
                                     + OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel_openInClassicalTitle
                                     + 8));
  swift_bridgeObjectRetain(v5);
  swift_release(v3);
  result = Text.init(_:tableName:bundle:comment:)(v4);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8 & 1;
  *(_QWORD *)(a1 + 24) = v9;
  return result;
}

uint64_t sub_1000667A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000667B0);
}

uint64_t sub_1000667B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004F7C(&qword_100116768);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100066830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006683C);
}

uint64_t sub_10006683C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004F7C(&qword_100116768);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_1000668B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000D4968;
  v4[1] = &unk_1000D4980;
  sub_1000090FC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_100066930(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE2BC, 1);
}

uint64_t sub_100066944(char a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t (**v5)(void);

  result = type metadata accessor for ContextMenuForSubscribedUserView(0);
  if ((a1 & 1) != 0)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
    v5 = (uint64_t (**)(void))(v1 + ((v4 + 16) & ~v4));
    if (*v5)
      return (*v5)();
  }
  return result;
}

uint64_t sub_100066990@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000632F4(*(_QWORD *)(v1 + 16), a1);
}

void sub_100066998(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  sub_10006505C(a1, a2, (uint64_t)&unk_1000D49E8, &OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__confirmationDialogPresented, a3);
}

uint64_t sub_1000669C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100064AAC(*(_QWORD *)(v1 + 16), a1);
}

void sub_1000669C8(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  sub_10006505C(a1, a2, (uint64_t)&unk_1000D4A10, &OBJC_IVAR____TtC16MusicRecognition37ContextMenuForSubscribedUserViewModel__addToPlaylistSheetPresented, a3);
}

uint64_t sub_1000669F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContextMenuForSubscribedUserView(0) - 8) + 80);
  return sub_10006519C(v0 + ((v1 + 16) & ~v1));
}

void sub_100066A48(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100065208(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100066A54()
{
  return sub_100067084((uint64_t (*)(uint64_t))sub_100065324);
}

uint64_t sub_100066A60()
{
  uint64_t v0;

  return sub_1000ABFD4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100066A80()
{
  return sub_100067084((uint64_t (*)(uint64_t))sub_100064D0C);
}

uint64_t sub_100066A90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContextMenuForSubscribedUserView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_100119E2C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100010C20;
  return sub_100064E50(a1, v5, v6, v7);
}

uint64_t sub_100066B14()
{
  uint64_t v0;

  return sub_1000ABFC4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100066B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000636CC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100066B38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100064314(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100066B40(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000050C8(a2);
    sub_10000522C(a3, a4, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100066BD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000645E4(a1);
}

uint64_t sub_100066BFC()
{
  return sub_100067084((uint64_t (*)(uint64_t))sub_100065F20);
}

uint64_t sub_100066C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release(v10[1]);
  swift_release(v10[2]);
  swift_release(v10[3]);
  v11 = (_QWORD *)((char *)v10 + *(int *)(v1 + 24));
  v12 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    v14 = swift_release(*v11);
  }
  v15 = v3 | v8 | 7;
  v16 = (v4 + v5 + v8) & ~v8;
  v17 = v16 + v9;
  (*(void (**)(uint64_t, uint64_t, __n128))(v7 + 8))(v0 + v16, v6, v14);
  return swift_deallocObject(v0, v17, v15);
}

uint64_t sub_100066D20()
{
  return sub_100066EC8((uint64_t (*)(_QWORD))&type metadata accessor for URL, (uint64_t (*)(unint64_t, unint64_t))sub_1000663A0);
}

uint64_t sub_100066D34()
{
  uint64_t v0;

  return sub_100066410(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100066D40()
{
  return sub_100067084((uint64_t (*)(uint64_t))sub_10006552C);
}

uint64_t sub_100066D50()
{
  return sub_100067084((uint64_t (*)(uint64_t))sub_100066128);
}

uint64_t sub_100066D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for StreamingService(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release(v10[1]);
  swift_release(v10[2]);
  swift_release(v10[3]);
  v11 = (_QWORD *)((char *)v10 + *(int *)(v1 + 24));
  v12 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  else
  {
    swift_release(*v11);
  }
  v14 = v3 | v8 | 7;
  v15 = (v4 + v5 + v8) & ~v8;
  v16 = v15 + v9;
  v17 = v0 + v15;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + 8));
  v18 = v17 + v6[5];
  v19 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v6[7] + 8));
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_100066EB4()
{
  return sub_100066EC8(type metadata accessor for StreamingService, (uint64_t (*)(unint64_t, unint64_t))sub_1000665AC);
}

uint64_t sub_100066EC8(uint64_t (*a1)(_QWORD), uint64_t (*a2)(unint64_t, unint64_t))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(type metadata accessor for ContextMenuForSubscribedUserView(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + v5, v2 + ((v5 + v6 + v7) & ~v7));
}

uint64_t sub_100066F3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[4];
  _BYTE v4[16];
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 16);
  v3[2] = v1;
  return Label.init(title:icon:)(sub_100066F9C, v4, sub_10000B5E0, v3, &type metadata for Text, &type metadata for Image, &protocol witness table for Text, &protocol witness table for Image);
}

uint64_t sub_100066F9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000666CC(a1);
}

uint64_t sub_100066FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release(v6[1]);
  swift_release(v6[2]);
  swift_release(v6[3]);
  v7 = (_QWORD *)((char *)v6 + *(int *)(v1 + 24));
  v8 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100067078()
{
  return sub_100067084((uint64_t (*)(uint64_t))sub_100065918);
}

uint64_t sub_100067084(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContextMenuForSubscribedUserView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_1000670C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100065CA4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000670CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for ContextMenuForSubscribedUserView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release(v6[1]);
  swift_release(v6[2]);
  swift_release(v6[3]);
  v7 = (_QWORD *)((char *)v6 + *(int *)(v1 + 24));
  v8 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006719C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ContextMenuForSubscribedUserView(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_100119E84);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000101B8;
  return sub_100065BC0(a1, v5, v6, v7);
}

unint64_t sub_100067224()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  result = qword_100119E90;
  if (!qword_100119E90)
  {
    v15 = sub_1000050C8(&qword_100119DD8);
    v14 = sub_1000050C8(&qword_100119DC8);
    v13 = type metadata accessor for NavigationBarButtonStyle(255);
    v1 = sub_1000050C8(&qword_100119DC0);
    v2 = type metadata accessor for ButtonMenuStyle(255);
    v3 = sub_1000050C8(&qword_100119DB8);
    v4 = sub_1000050C8(&qword_100119DB0);
    v5 = sub_1000050C8(&qword_100119E08);
    v16 = sub_1000050C8(&qword_100119DA8);
    v17 = sub_1000050C8(&qword_100117A30);
    v18 = &type metadata for Text;
    v19 = sub_10000522C(&qword_100119E00, &qword_100119DA8, (uint64_t)&protocol conformance descriptor for Menu<A, B>);
    v20 = sub_100066B40((unint64_t *)&qword_100117A50, &qword_100117A30, &qword_100117A58, &qword_100117A60);
    v21 = &protocol witness table for Text;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)>>, 1);
    v7 = sub_10000522C(&qword_100119E10, &qword_100119E08, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    v16 = v4;
    v17 = v5;
    v18 = (void *)OpaqueTypeConformance2;
    v19 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
    v16 = v3;
    v17 = v8;
    v9 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.sharingPicker(isPresented:item:subject:message:)>>, 1);
    v10 = sub_100004864(&qword_100116868, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonMenuStyle, (uint64_t)&protocol conformance descriptor for ButtonMenuStyle);
    v16 = v1;
    v17 = v2;
    v18 = (void *)v9;
    v19 = v10;
    v11 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.menuStyle<A>(_:)>>, 1);
    v12 = sub_100004864(&qword_100116870, type metadata accessor for NavigationBarButtonStyle, (uint64_t)&unk_1000D2ACC);
    v16 = v14;
    v17 = v13;
    v18 = (void *)v11;
    v19 = v12;
    swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
    atomic_store(result, (unint64_t *)&qword_100119E90);
  }
  return result;
}

uint64_t sub_100067498()
{
  return sub_100066A60();
}

uint64_t sub_1000674AC()
{
  return sub_100066B14();
}

uint64_t type metadata accessor for MusicRecognitionAmbientCompactSceneDelegate()
{
  return objc_opt_self(_TtC16MusicRecognition43MusicRecognitionAmbientCompactSceneDelegate);
}

void sub_1000675F8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;

  v2 = v1;
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v4 = type metadata accessor for Logger(0);
  sub_10000B5E8(v4, (uint64_t)qword_100124478);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v30 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Ambient compact scene will connect %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    v12 = v8;
    v2 = v1;
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v13 = type metadata accessor for ActivityScene(0);
  v14 = swift_dynamicCastClass(v5, v13);
  if (v14)
  {
    v15 = v14;
    v16 = objc_allocWithZone((Class)UIWindow);
    v17 = v5;
    v18 = objc_msgSend(v16, "initWithWindowScene:", v15);
    v19 = OBJC_IVAR____TtC16MusicRecognition43MusicRecognitionAmbientCompactSceneDelegate_window;
    v20 = *(void **)(v2 + OBJC_IVAR____TtC16MusicRecognition43MusicRecognitionAmbientCompactSceneDelegate_window);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition43MusicRecognitionAmbientCompactSceneDelegate_window) = v18;

    v21 = *(void **)(v2 + v19);
    if (v21)
    {
      v22 = type metadata accessor for MusicRecognitionAmbientCompactViewController();
      v23 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v22));
      v24 = v21;
      v25 = objc_msgSend(v23, "init");
      objc_msgSend(v24, "setRootViewController:", v25);

      v26 = *(void **)(v2 + v19);
      if (v26)
      {
        v27 = v26;
        objc_msgSend(v27, "makeKeyAndVisible");

      }
    }
  }
  else
  {
    v17 = Logger.logObject.getter(0);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v28, "Unable to connect to ActivityScene", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
  }

}

uint64_t sub_1000678D4(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_100117528);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100068E78(v1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
    return 0;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  a1(&v12, v7);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

uint64_t sub_100067A1C@<X0>(int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  _BYTE *v99;
  uint64_t (*v100)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _BYTE *v123;
  void (*v124)(char *, uint64_t);
  int v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;

  v127 = a3;
  v128 = a4;
  v126 = a2;
  v125 = a1;
  v134 = a5;
  v5 = type metadata accessor for Date.FormatStyle.Symbol.Weekday(0);
  v123 = *(_BYTE **)(v5 - 8);
  v124 = (void (*)(char *, uint64_t))v5;
  __chkstk_darwin(v5);
  v122 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date.FormatStyle.Symbol.Minute(0);
  v120 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  __chkstk_darwin(v7);
  v119 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date.FormatStyle.Symbol.Hour.AMPMStyle(0);
  v117 = *(_QWORD *)(v9 - 8);
  v118 = v9;
  __chkstk_darwin(v9);
  v114 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date.FormatStyle.Symbol.Hour(0);
  v115 = *(_QWORD *)(v11 - 8);
  v116 = v11;
  __chkstk_darwin(v11);
  v113 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for Date.FormatStyle.Symbol.Day(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v109 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Date.FormatStyle.Symbol.Month(0);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v106 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Date.FormatStyle.Symbol.Year(0);
  v105 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FormatStyleCapitalizationContext(0);
  __chkstk_darwin(v16);
  v130 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TimeZone(0);
  __chkstk_darwin(v18);
  v129 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Calendar(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for Locale(0);
  v110 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v24 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100004F7C(&qword_100119F80);
  __chkstk_darwin(v25);
  v27 = (char *)&v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004F7C(&qword_100119F88);
  __chkstk_darwin(v28);
  v30 = (char *)&v90 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Date.FormatStyle(0);
  v91 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v34 = (char *)&v90 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v90 - v36;
  v38 = __chkstk_darwin(v35);
  v40 = (char *)&v90 - v39;
  v41 = __chkstk_darwin(v38);
  v92 = (char *)&v90 - v42;
  v43 = __chkstk_darwin(v41);
  v93 = (char *)&v90 - v44;
  v45 = __chkstk_darwin(v43);
  v95 = (char *)&v90 - v46;
  __chkstk_darwin(v45);
  v98 = (char *)&v90 - v47;
  v104 = type metadata accessor for SongMetadataRowViewModel(0);
  v99 = &v134[*(int *)(v104 + 28)];
  v103 = type metadata accessor for Date.FormatStyle.DateStyle(0);
  v102 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56);
  v94 = v30;
  v102(v30, 1, 1, v103);
  v101 = type metadata accessor for Date.FormatStyle.TimeStyle(0);
  v100 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56);
  v96 = v27;
  v48 = v100(v27, 1, 1, v101);
  v49 = static Locale.autoupdatingCurrent.getter(v48);
  v50 = v22;
  v97 = v22;
  v51 = static Calendar.autoupdatingCurrent.getter(v49);
  v52 = v129;
  v53 = static TimeZone.autoupdatingCurrent.getter(v51);
  v54 = v130;
  static FormatStyleCapitalizationContext.unknown.getter(v53);
  v55 = Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)(v30, v27, v24, v50, v52, v54);
  v56 = v131;
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v55);
  Date.FormatStyle.year(_:)(v56);
  v105 = *(_QWORD *)(v105 + 8);
  ((void (*)(char *, uint64_t))v105)(v56, v133);
  v57 = *(uint64_t (**)(char *, uint64_t))(v91 + 8);
  v58 = v57(v34, v31);
  v59 = v106;
  static Date.FormatStyle.Symbol.Month.abbreviated.getter(v58);
  Date.FormatStyle.month(_:)(v59);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v59, v108);
  v60 = v57(v37, v31);
  v61 = v109;
  static Date.FormatStyle.Symbol.Day.twoDigits.getter(v60);
  v62 = v92;
  Date.FormatStyle.day(_:)(v61);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v61, v112);
  v63 = v57(v40, v31);
  v64 = v114;
  static Date.FormatStyle.Symbol.Hour.AMPMStyle.abbreviated.getter(v63);
  v65 = v113;
  static Date.FormatStyle.Symbol.Hour.defaultDigits(amPM:)(v64);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v64, v118);
  v66 = v93;
  Date.FormatStyle.hour(_:)(v65);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v65, v116);
  v67 = v57(v62, v31);
  v68 = v119;
  static Date.FormatStyle.Symbol.Minute.twoDigits.getter(v67);
  v69 = v95;
  Date.FormatStyle.minute(_:)(v68);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v121);
  v70 = v57(v66, v31);
  v71 = v122;
  static Date.FormatStyle.Symbol.Weekday.abbreviated.getter(v70);
  v72 = v98;
  Date.FormatStyle.weekday(_:)(v71);
  (*((void (**)(char *, _QWORD))v123 + 1))(v71, v124);
  v73 = v69;
  v74 = v57(v69, v31);
  static Locale.autoupdatingCurrent.getter(v74);
  Date.FormatStyle.locale(_:)(v24);
  v124 = *(void (**)(char *, uint64_t))(v110 + 8);
  v124(v24, v132);
  v57(v72, v31);
  v123 = &v134[*(int *)(v104 + 32)];
  v75 = v94;
  v102(v94, 1, 1, v103);
  v76 = v96;
  v77 = v100(v96, 1, 1, v101);
  v78 = static Locale.autoupdatingCurrent.getter(v77);
  v79 = v97;
  v80 = static Calendar.autoupdatingCurrent.getter(v78);
  v81 = v129;
  v82 = static TimeZone.autoupdatingCurrent.getter(v80);
  v83 = v130;
  static FormatStyleCapitalizationContext.unknown.getter(v82);
  v84 = Date.FormatStyle.init(date:time:locale:calendar:timeZone:capitalizationContext:)(v75, v76, v24, v79, v81, v83);
  v85 = v131;
  static Date.FormatStyle.Symbol.Year.defaultDigits.getter(v84);
  Date.FormatStyle.year(_:)(v85);
  ((void (*)(char *, uint64_t))v105)(v85, v133);
  v86 = v57(v73, v31);
  static Locale.autoupdatingCurrent.getter(v86);
  Date.FormatStyle.locale(_:)(v24);
  v124(v24, v132);
  v57(v72, v31);
  v87 = v134;
  *v134 = v125;
  result = sub_1000447DC(v126, (uint64_t)(v87 + 8));
  v89 = v128;
  *((_QWORD *)v87 + 6) = v127;
  *((_QWORD *)v87 + 7) = v89;
  return result;
}

void sub_1000682EC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100068310()
{
  return LocalizedStringKey.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001000DB370);
}

char *sub_1000683C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;

  v4 = (char *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    v8 = a2[7];
    *((_QWORD *)v4 + 6) = a2[6];
    *((_QWORD *)v4 + 7) = v8;
    v9 = *(int *)(a3 + 28);
    v10 = &v4[v9];
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for Date.FormatStyle(0);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v13(&v4[*(int *)(a3 + 32)], (uint64_t)a2 + *(int *)(a3 + 32), v12);
  }
  return v4;
}

uint64_t sub_1000684AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date.FormatStyle(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 32), v5);
}

uint64_t sub_10006852C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date.FormatStyle(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v12(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32), v11);
  return a1;
}

uint64_t sub_1000685E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  sub_100012EA4((_QWORD *)(a1 + 8), (_QWORD *)(a2 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date.FormatStyle(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24);
  v12(v9, v10, v11);
  v12(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32), v11);
  return a1;
}

uint64_t sub_100068690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date.FormatStyle(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32), v9);
  return a1;
}

uint64_t sub_10006873C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v6);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date.FormatStyle(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32), v10);
  return a1;
}

uint64_t sub_1000687F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100068800);
}

uint64_t sub_100068800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date.FormatStyle(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_10006887C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100068888);
}

uint64_t sub_100068888(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date.FormatStyle(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SongMetadataRowViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100119F28;
  if (!qword_100119F28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SongMetadataRowViewModel);
  return result;
}

uint64_t sub_100068938(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  v4[0] = &unk_1000D4BA0;
  v4[1] = &unk_1000D4BB8;
  v4[2] = &unk_1000D4BD0;
  result = type metadata accessor for Date.FormatStyle(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SongMetadataRowViewModel.SupportedMetadata(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SongMetadataRowViewModel.SupportedMetadata(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100068A9C + 4 * byte_1000D4B6C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100068AD0 + 4 * byte_1000D4B67[v4]))();
}

uint64_t sub_100068AD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100068AD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100068AE0);
  return result;
}

uint64_t sub_100068AEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100068AF4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100068AF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100068B00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SongMetadataRowViewModel.SupportedMetadata()
{
  return &type metadata for SongMetadataRowViewModel.SupportedMetadata;
}

unint64_t sub_100068B20()
{
  unint64_t result;

  result = qword_100119F70;
  if (!qword_100119F70)
  {
    result = swift_getWitnessTable(&unk_1000D4C3C, &type metadata for SongMetadataRowViewModel.SupportedMetadata);
    atomic_store(result, (unint64_t *)&qword_100119F70);
  }
  return result;
}

unint64_t sub_100068B68()
{
  unint64_t result;

  result = qword_100119F78;
  if (!qword_100119F78)
  {
    result = swift_getWitnessTable(&unk_1000D4C7C, &type metadata for SongMetadataRowViewModel.SupportedMetadata);
    atomic_store(result, (unint64_t *)&qword_100119F78);
  }
  return result;
}

void sub_100068BAC()
{
  uint64_t v1;

  v1 = sub_100004F7C(&qword_100117528);
  __chkstk_darwin(v1);
  __asm { BR              X10 }
}

uint64_t sub_100068C1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[4];
  v3 = v0[5];
  sub_10000C9C8(v0 + 1, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  __chkstk_darwin(v4);
  v5 = sub_1000678D4((void (*)(uint64_t *__return_ptr, char *))sub_100068E28);
  sub_100068DE8(v1);
  return v5;
}

uint64_t sub_100068D98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  type metadata accessor for SongMetadataRowViewModel(0);
  result = Date.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_100068DE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004F7C(&qword_100117528);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100068E28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  type metadata accessor for SongMetadataRowViewModel(0);
  result = Date.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_100068E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_100117528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for SongPlaybackViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SongPlaybackViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for SongPlaybackViewModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SongPlaybackViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SongPlaybackViewModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SongPlaybackViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SongPlaybackViewModel()
{
  return &type metadata for SongPlaybackViewModel;
}

uint64_t *sub_100069074(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for ArtistProfileViewModel(0);
    v9 = v8[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[6];
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = v8[7];
    v22 = (uint64_t *)((char *)v4 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v8[8];
    v26 = *(uint64_t *)((char *)a2 + v25);
    *(uint64_t *)((char *)v4 + v25) = v26;
    v27 = *(int *)(a3 + 20);
    v28 = (uint64_t *)((char *)v4 + v27);
    v29 = (char *)a2 + v27;
    v30 = *(uint64_t *)((char *)a2 + v27);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_retain(v26);
    if (v30)
    {
      v31 = *((_QWORD *)v29 + 1);
      *v28 = v30;
      v28[1] = v31;
      swift_retain(v31);
    }
    else
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
    }
    v32 = *(int *)(a3 + 24);
    v33 = (uint64_t *)((char *)v4 + v32);
    v34 = (uint64_t *)((char *)a2 + v32);
    v35 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v34, v35) == 1)
    {
      v36 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v33, v34, v36);
      v37 = v33;
      v38 = v35;
      v39 = 1;
    }
    else
    {
      v40 = *v34;
      *v33 = *v34;
      swift_retain(v40);
      v37 = v33;
      v38 = v35;
      v39 = 0;
    }
    swift_storeEnumTagMultiPayload(v37, v38, v39);
  }
  return v4;
}

double sub_100069278(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[7] + 8));
  swift_release(*(_QWORD *)(a1 + v4[8]));
  v8 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  if (*v8)
    swift_release(v8[1]);
  v9 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v10 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v9).n128_u64[0];
  }
  return result;
}

_QWORD *sub_100069398(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v7[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v7[8];
  v24 = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  v25 = *(int *)(a3 + 20);
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  swift_retain(v24);
  if (v28)
  {
    v29 = *((_QWORD *)v27 + 1);
    *v26 = v28;
    v26[1] = v29;
    swift_retain(v29);
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  v30 = *(int *)(a3 + 24);
  v31 = (_QWORD *)((char *)a1 + v30);
  v32 = (_QWORD *)((char *)a2 + v30);
  v33 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v32, v33) == 1)
  {
    v34 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v31, v32, v34);
    v35 = 1;
  }
  else
  {
    v36 = *v32;
    *v31 = *v32;
    swift_retain(v36);
    v35 = 0;
  }
  swift_storeEnumTagMultiPayload(v31, v33, v35);
  return a1;
}

_QWORD *sub_100069568(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = v8[6];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v8[7];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = v8[8];
  v29 = *(_QWORD *)((char *)a2 + v28);
  v30 = *(_QWORD *)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = v29;
  swift_retain(v29);
  swift_release(v30);
  v31 = *(int *)(a3 + 20);
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a1 + v31);
  v35 = *(_QWORD *)((char *)a2 + v31);
  if (v34)
  {
    if (v35)
    {
      v36 = *((_QWORD *)v33 + 1);
      v37 = v32[1];
      *v32 = v35;
      v32[1] = v36;
      swift_retain(v36);
      swift_release(v37);
      goto LABEL_14;
    }
    swift_release(v32[1]);
  }
  else if (v35)
  {
    v38 = *((_QWORD *)v33 + 1);
    *v32 = v35;
    v32[1] = v38;
    swift_retain(v38);
    goto LABEL_14;
  }
  *(_OWORD *)v32 = *(_OWORD *)v33;
LABEL_14:
  if (a1 != a2)
  {
    v39 = *(int *)(a3 + 24);
    v40 = (_QWORD *)((char *)a1 + v39);
    v41 = (_QWORD *)((char *)a2 + v39);
    sub_10000526C((uint64_t)a1 + v39, &qword_1001166A0);
    v42 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
    {
      v43 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v40, v41, v43);
      v44 = 1;
    }
    else
    {
      v45 = *v41;
      *v40 = *v41;
      swift_retain(v45);
      v44 = 0;
    }
    swift_storeEnumTagMultiPayload(v40, v42, v44);
  }
  return a1;
}

_OWORD *sub_100069800(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  v13 = *(int *)(a3 + 20);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = *v15;
  if (*v15)
  {
    v17 = v15[1];
    *v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  v18 = *(int *)(a3 + 24);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload(v19, v21, 1);
  }
  else
  {
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_10006999C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = v8[6];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v8[7];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v8[8];
  v31 = *(_QWORD *)((char *)a1 + v30);
  *(_QWORD *)((char *)a1 + v30) = *(_QWORD *)((char *)a2 + v30);
  swift_release(v31);
  v32 = *(int *)(a3 + 20);
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (char *)a2 + v32;
  v35 = *(_QWORD *)((char *)a1 + v32);
  v36 = *(_QWORD *)((char *)a2 + v32);
  if (v35)
  {
    if (v36)
    {
      v37 = *((_QWORD *)v34 + 1);
      v38 = v33[1];
      *v33 = v36;
      v33[1] = v37;
      swift_release(v38);
      goto LABEL_14;
    }
    swift_release(v33[1]);
  }
  else if (v36)
  {
    v39 = *((_QWORD *)v34 + 1);
    *v33 = v36;
    v33[1] = v39;
    goto LABEL_14;
  }
  *(_OWORD *)v33 = *(_OWORD *)v34;
LABEL_14:
  if (a1 != a2)
  {
    v40 = *(int *)(a3 + 24);
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    sub_10000526C((uint64_t)a1 + v40, &qword_1001166A0);
    v43 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
    {
      v44 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v41, v42, v44);
      swift_storeEnumTagMultiPayload(v41, v43, 1);
    }
    else
    {
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100069BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069C00);
}

uint64_t sub_100069C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for ArtistProfileViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = sub_100004F7C(&qword_100116768);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t sub_100069CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069CC4);
}

uint64_t sub_100069CC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for ArtistProfileViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return result;
    }
    v10 = sub_100004F7C(&qword_100116768);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ArtistProfileView(uint64_t a1)
{
  uint64_t result;

  result = qword_10011A008;
  if (!qword_10011A008)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ArtistProfileView);
  return result;
}

void sub_100069DA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for ArtistProfileViewModel(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_1000D4CE8;
    sub_1000090FC(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
    }
  }
}

uint64_t sub_100069E34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE40C, 1);
}

uint64_t sub_100069E44()
{
  uint64_t result;

  result = static Font.subheadline.getter();
  qword_100119F90 = result;
  return result;
}

uint64_t sub_100069E60()
{
  uint64_t result;

  result = static HierarchicalShapeStyle.secondary.getter();
  dword_100119F98 = result;
  return result;
}

uint64_t sub_100069E7C()
{
  id v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemFillColor");
  result = Color.init(uiColor:)(v0);
  qword_100119FA0 = result;
  return result;
}

void sub_100069EB8()
{
  qword_100119FA8 = 0;
}

uint64_t sub_100069EC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v46;
  uint64_t v48;

  v2 = v1;
  v4 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v4);
  v6 = (_OWORD *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100004F7C(&qword_10011A048);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_10011A050);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_10011A058);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v14, v17, v18, v19, v20, v21, v22, v23);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v24 = sub_100004F7C(&qword_10011A060);
  v25 = sub_10006A1A8(v2, (uint64_t)&v9[*(int *)(v24 + 44)]);
  LOBYTE(v2) = static Edge.Set.all.getter(v25);
  v26 = EdgeInsets.init(_all:)(16.0);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_100007C8C((uint64_t)v9, (uint64_t)v12, &qword_10011A048);
  v33 = &v12[*(int *)(v10 + 36)];
  *v33 = v2;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_10000526C((uint64_t)v9, &qword_10011A048);
  if (qword_100115FD8 != -1)
    swift_once(&qword_100115FD8, sub_100069E7C);
  v34 = qword_100119FA0;
  swift_retain(qword_100119FA0);
  v36 = static Edge.Set.all.getter(v35);
  sub_100007C8C((uint64_t)v12, (uint64_t)v16, &qword_10011A050);
  v37 = &v16[*(int *)(v13 + 36)];
  *(_QWORD *)v37 = v34;
  v37[8] = v36;
  sub_10000526C((uint64_t)v12, &qword_10011A050);
  v38 = (char *)v6 + *(int *)(v4 + 20);
  v39 = enum case for RoundedCornerStyle.continuous(_:);
  v40 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v38, v39, v40);
  __asm { FMOV            V0.2D, #10.0 }
  *v6 = _Q0;
  v46 = a1 + *(int *)(sub_100004F7C(&qword_10011A068) + 36);
  sub_10000B340((uint64_t)v6, v46, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v46 + *(int *)(sub_100004F7C(&qword_100117BE8) + 36)) = 256;
  sub_100007C8C((uint64_t)v16, a1, &qword_10011A058);
  sub_10000B600((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  return sub_10000526C((uint64_t)v16, &qword_10011A058);
}

uint64_t sub_10006A1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  Swift::String v46;
  Swift::String v47;
  void *object;
  Swift::String v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  Swift::String v92;

  v90 = a2;
  v3 = type metadata accessor for ExpandableTextView(0);
  v77 = *(_QWORD *)(v3 - 8);
  v78 = v3;
  __chkstk_darwin(v3);
  v76 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100004F7C(&qword_10011A070);
  __chkstk_darwin(v75);
  v80 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100004F7C(&qword_10011A078);
  __chkstk_darwin(v82);
  v81 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C(&qword_10011A080);
  v87 = *(_QWORD *)(v7 - 8);
  v88 = v7;
  __chkstk_darwin(v7);
  v79 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_10011A088);
  v10 = __chkstk_darwin(v9);
  v89 = (uint64_t)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v91 = (char *)&v75 - v12;
  v13 = type metadata accessor for ArtistProfileView(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for ArtistProfileViewModel(0);
  __chkstk_darwin(v85);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = _s17ArtistDetailsViewVMa(0);
  __chkstk_darwin(v83);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100004F7C(&qword_1001189A0);
  __chkstk_darwin(v84);
  v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004F7C(&qword_10011A090);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v75 - v27;
  sub_10000B340(a1, (uint64_t)v18, type metadata accessor for ArtistProfileViewModel);
  v86 = a1;
  sub_10000B340(a1, (uint64_t)v16, type metadata accessor for ArtistProfileView);
  v29 = *(unsigned __int8 *)(v14 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = swift_allocObject(&unk_10010B6B8, v30 + v15, v29 | 7);
  sub_10000B4D4((uint64_t)v16, v31 + v30, type metadata accessor for ArtistProfileView);
  v32 = sub_10000B4D4((uint64_t)v18, (uint64_t)v20, type metadata accessor for ArtistProfileViewModel);
  v33 = (uint64_t (**)())&v20[*(int *)(v83 + 20)];
  *v33 = sub_10006ADE0;
  v33[1] = (uint64_t (*)())v31;
  v34 = static Alignment.leading.getter(v32);
  sub_100034264(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v22, 0.0, 1, 0.0, 1, v34, v35);
  sub_10000B600((uint64_t)v20, _s17ArtistDetailsViewVMa);
  if (qword_1001160A0 != -1)
    swift_once(&qword_1001160A0, sub_10007FF84);
  v36 = qword_100124550;
  v37 = *(_QWORD *)algn_100124558;
  v38 = sub_10006AE0C();
  View.accessibilityIdentifier(_:)(v36, v37, v84, v38);
  sub_10000526C((uint64_t)v22, &qword_1001189A0);
  sub_100007C48((uint64_t)v26, (uint64_t)v28, &qword_10011A090);
  v39 = (uint64_t *)(v86 + *(int *)(v85 + 28));
  v40 = v39[1];
  if (v40)
  {
    v41 = *v39;
    v42 = qword_100115FC8;
    swift_bridgeObjectRetain(v40);
    if (v42 != -1)
      swift_once(&qword_100115FC8, sub_100069E44);
    v43 = qword_100119F90;
    v44 = (void *)objc_opt_self(NSBundle);
    v45 = objc_msgSend(v44, "mainBundle", swift_retain(v43).n128_f64[0]);
    v46._countAndFlagsBits = 0xD000000000000016;
    v92._object = (void *)0xE000000000000000;
    v46._object = (void *)0x80000001000DB390;
    v47._countAndFlagsBits = 0;
    v47._object = (void *)0xE000000000000000;
    v92._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, (Swift::String_optional)0, (NSBundle)v45, v47, v92)._object;

    v49 = String.lowercased()();
    swift_bridgeObjectRelease(object);
    v50 = v76;
    ExpandableTextView.init(text:font:numberOfLines:expandTextToken:_:)(v41, v40, v43, 3, v49._countAndFlagsBits, v49._object, 0, 0);
    if (qword_100115FD0 != -1)
      swift_once(&qword_100115FD0, sub_100069E60);
    v51 = dword_100119F98;
    v53 = v77;
    v52 = v78;
    v54 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v80, v50, v78);
    *(_DWORD *)(v54 + *(int *)(v75 + 36)) = v51;
    v55 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v50, v52);
    v56 = static Edge.Set.top.getter(v55);
    v57 = (uint64_t)v91;
    if (qword_100115FE0 != -1)
      swift_once(&qword_100115FE0, sub_100069EB8);
    v58 = EdgeInsets.init(_all:)(*(double *)&qword_100119FA8);
    v60 = v59;
    v62 = v61;
    v64 = v63;
    v65 = v81;
    sub_100007C8C(v54, v81, &qword_10011A070);
    v66 = v82;
    v67 = v65 + *(int *)(v82 + 36);
    *(_BYTE *)v67 = v56;
    *(double *)(v67 + 8) = v58;
    *(_QWORD *)(v67 + 16) = v60;
    *(_QWORD *)(v67 + 24) = v62;
    *(_QWORD *)(v67 + 32) = v64;
    *(_BYTE *)(v67 + 40) = 0;
    sub_10000526C(v54, &qword_10011A070);
    v68 = sub_10006AE90();
    v69 = (uint64_t)v79;
    View.accessibilityIdentifier(_:)(0xD000000000000010, 0x80000001000DB3B0, v66, v68);
    sub_10000526C(v65, &qword_10011A078);
    sub_100007C48(v69, v57, &qword_10011A080);
    v70 = 0;
  }
  else
  {
    v70 = 1;
    v57 = (uint64_t)v91;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v57, v70, 1, v88);
  sub_100007C8C((uint64_t)v28, (uint64_t)v26, &qword_10011A090);
  v71 = v89;
  sub_100007C8C(v57, v89, &qword_10011A088);
  v72 = v90;
  sub_100007C8C((uint64_t)v26, v90, &qword_10011A090);
  v73 = sub_100004F7C(&qword_10011A0A8);
  sub_100007C8C(v71, v72 + *(int *)(v73 + 48), &qword_10011A088);
  sub_10000526C(v57, &qword_10011A088);
  sub_10000526C((uint64_t)v28, &qword_10011A090);
  sub_10000526C(v71, &qword_10011A088);
  return sub_10000526C((uint64_t)v26, &qword_10011A090);
}

uint64_t sub_10006A91C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(void);
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = type metadata accessor for OpenURLAction(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  v16 = type metadata accessor for ArtistProfileViewModel(0);
  sub_100007C8C(a1 + *(int *)(v16 + 20), (uint64_t)v8, (uint64_t *)&unk_100118CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_10000526C((uint64_t)v8, (uint64_t *)&unk_100118CE0);
  v36 = a1;
  v37 = v3;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v18 = type metadata accessor for Logger(0);
  sub_10000B5E8(v18, (uint64_t)qword_100124478);
  v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v39 = v34;
    v35 = v2;
    *(_DWORD *)v22 = 136315138;
    v33 = v22 + 4;
    v23 = sub_100004864((unint64_t *)&qword_1001168E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v9, v23);
    v26 = v25;
    v38 = sub_1000529F4(v24, v25, &v39);
    v2 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v33, v22 + 12);
    swift_bridgeObjectRelease(v26);
    v27 = *(void (**)(char *, uint64_t))(v10 + 8);
    v27(v13, v9);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Opening %s", v22, 0xCu);
    v28 = v34;
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v27 = *(void (**)(char *, uint64_t))(v10 + 8);
    v27(v13, v9);
  }

  v29 = type metadata accessor for ArtistProfileView(0);
  v30 = v37;
  v31 = (void (**)(void))(v36 + *(int *)(v29 + 20));
  if (*v31)
    (*v31)();
  sub_100006A38(v5);
  OpenURLAction.callAsFunction(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v27)(v15, v9);
}

uint64_t sub_10006AC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for ArtistProfileView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v8 = v0 + v4 + v7[5];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[7] + 8));
  swift_release(*(_QWORD *)(v6 + v7[8]));
  v11 = (_QWORD *)(v6 + *(int *)(v1 + 20));
  if (*v11)
    swift_release(v11[1]);
  v12 = (_QWORD *)(v6 + *(int *)(v1 + 24));
  v13 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
  {
    v14 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  else
  {
    swift_release(*v12);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006ADE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ArtistProfileView(0) - 8) + 80);
  return sub_10006A91C(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_10006AE0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A098;
  if (!qword_10011A098)
  {
    v1 = sub_1000050C8(&qword_1001189A0);
    sub_100004864(&qword_10011A0A0, _s17ArtistDetailsViewVMa, (uint64_t)&unk_1000D4E04);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A098);
  }
  return result;
}

unint64_t sub_10006AE90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A0B0;
  if (!qword_10011A0B0)
  {
    v1 = sub_1000050C8(&qword_10011A078);
    sub_10006AEFC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A0B0);
  }
  return result;
}

unint64_t sub_10006AEFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A0B8;
  if (!qword_10011A0B8)
  {
    v1 = sub_1000050C8(&qword_10011A070);
    sub_100004864(&qword_10011A0C0, (uint64_t (*)(uint64_t))&type metadata accessor for ExpandableTextView, (uint64_t)&protocol conformance descriptor for ExpandableTextView);
    sub_10000522C(&qword_100116548, &qword_100116550, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A0B8);
  }
  return result;
}

unint64_t sub_10006AF9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A0C8;
  if (!qword_10011A0C8)
  {
    v1 = sub_1000050C8(&qword_10011A068);
    sub_10006B020();
    sub_10000522C(&qword_10011A0F8, &qword_100117BE8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A0C8);
  }
  return result;
}

unint64_t sub_10006B020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A0D0;
  if (!qword_10011A0D0)
  {
    v1 = sub_1000050C8(&qword_10011A058);
    sub_10006B0A4();
    sub_10000522C(&qword_10011A0E8, &qword_10011A0F0, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A0D0);
  }
  return result;
}

unint64_t sub_10006B0A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A0D8;
  if (!qword_10011A0D8)
  {
    v1 = sub_1000050C8(&qword_10011A050);
    sub_10000522C(&qword_10011A0E0, &qword_10011A048, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A0D8);
  }
  return result;
}

void destroy for LibraryItemPreview(uint64_t a1)
{

  if (*(_QWORD *)(a1 + 8))
    swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *_s16MusicRecognition18LibraryItemPreviewVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  id v8;
  uint64_t v9;

  v4 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v5 = a1 + 1;
  v7 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v4;
  if (v6)
  {
    v9 = *(_QWORD *)(a2 + 16);
    a1[1] = v6;
    a1[2] = v9;
    swift_retain(v9);
  }
  else
  {
    *v5 = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for LibraryItemPreview(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v7)
    {
      v10 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v10;
      swift_retain(v10);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    return a1;
  }
  if (!v7)
  {
    swift_release(*(_QWORD *)(a1 + 16));
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for MusicRecognitionLifeCycle(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LibraryItemPreview(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[1];
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v5)
    {
      v8 = a2[2];
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v5)
  {
    swift_release(*(_QWORD *)(a1 + 16));
    goto LABEL_7;
  }
  v6 = a2[2];
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LibraryItemPreview(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LibraryItemPreview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LibraryItemPreview()
{
  return &type metadata for LibraryItemPreview;
}

uint64_t sub_10006B39C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE450, 1);
}

uint64_t sub_10006B3AC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t OpaqueTypeConformance2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)();
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (**v51)();
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];

  v63 = a2;
  v64 = a3;
  v58 = a4;
  v57 = sub_100004F7C(&qword_100116EE8);
  __chkstk_darwin(v57);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessibilityChildBehavior(0);
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_10011A100);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004F7C(&qword_10011A108);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100004F7C(&qword_10011A110);
  v60 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100004F7C(&qword_10011A118);
  __chkstk_darwin(v54);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100004F7C(&qword_10011A120);
  v55 = *(_QWORD *)(v21 - 8);
  v56 = v21;
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v22);
  *((_QWORD *)v12 + 1) = 0x4030000000000000;
  v12[16] = 0;
  v25 = (uint64_t)&v12[*(int *)(sub_100004F7C(&qword_10011A128) + 44)];
  v59 = a1;
  v26 = sub_10006B820(a1, v25);
  LOBYTE(a1) = static Edge.Set.all.getter(v26);
  v27 = EdgeInsets.init(_all:)(16.0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_10006BB00((uint64_t)v12, (uint64_t)v15);
  v34 = &v15[*(int *)(v13 + 36)];
  *v34 = (char)a1;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  v35 = sub_10000526C((uint64_t)v12, &qword_10011A100);
  static AccessibilityChildBehavior.combine.getter(v35);
  v36 = sub_10006BB48();
  View.accessibilityElement(children:)(v9, v13, v36);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v9, v62);
  sub_10000526C((uint64_t)v15, &qword_10011A108);
  v65[0] = v13;
  v65[1] = v36;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v65, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityIdentifier(_:)(0xD00000000000001ALL, 0x80000001000DB3D0, v16, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v18, v16);
  v38 = enum case for DynamicTypeSize.xxxLarge(_:);
  v39 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v6, v38, v39);
  v40 = sub_100004864(&qword_100116F80, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v6, v6, v39, v40);
  if ((result & 1) != 0)
  {
    v42 = sub_10006BBCC();
    v43 = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v6, v54, v57, v42, v43);
    sub_10000526C((uint64_t)v6, &qword_100116EE8);
    sub_10000526C((uint64_t)v20, &qword_10011A118);
    v44 = (uint64_t (*)())swift_allocObject(&unk_10010B798, 40, 7);
    v46 = v58;
    v45 = v59;
    v48 = v63;
    v47 = v64;
    *((_QWORD *)v44 + 2) = v59;
    *((_QWORD *)v44 + 3) = v48;
    *((_QWORD *)v44 + 4) = v47;
    v50 = v55;
    v49 = v56;
    (*(void (**)(uint64_t, char *, uint64_t))(v55 + 16))(v46, v24, v56);
    v51 = (uint64_t (**)())(v46 + *(int *)(sub_100004F7C(&qword_10011A148) + 36));
    *v51 = sub_10006BCAC;
    v51[1] = v44;
    v51[2] = 0;
    v51[3] = 0;
    v52 = v45;
    sub_100011F44(v48, v47);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v24, v49);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006B820@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[8];
  _OWORD v45[8];

  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LibraryItemArtwork(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v36 - v14;
  v16 = objc_msgSend(a1, "artworkURL");
  if (v16)
  {
    v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v18 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 0, 1, v18);
  }
  else
  {
    v19 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
  }
  sub_100007EE4((uint64_t)v6, (uint64_t)v13);
  *(_QWORD *)&v45[0] = 0x4058000000000000;
  v20 = sub_10006BCD4();
  ScaledMetric.init(wrappedValue:)(v45, &type metadata for Double, v20);
  v21 = &v13[*(int *)(v7 + 24)];
  *(_QWORD *)v21 = swift_getKeyPath(&unk_1000D4DB8, v22);
  v23 = sub_100004F7C(&qword_100116698);
  swift_storeEnumTagMultiPayload(v21, v23, 0);
  sub_10006BD20((uint64_t)v13, (uint64_t)v15);
  v24 = a1;
  v25 = static Alignment.leading.getter(v24);
  sub_1000342C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v36, 0.0, 1, 0.0, 1, v25, v26, v24, 1);

  sub_10006BD64((uint64_t)v15, (uint64_t)v10);
  sub_10006BD64((uint64_t)v10, a2);
  v27 = (_OWORD *)(a2 + *(int *)(sub_100004F7C(&qword_10011A158) + 48));
  v28 = v40;
  v29 = v41;
  v44[4] = v40;
  v44[5] = v41;
  v30 = v42;
  v31 = v43;
  v44[6] = v42;
  v44[7] = v43;
  v32 = v36;
  v33 = v37;
  v44[0] = v36;
  v44[1] = v37;
  v34 = v39;
  v44[2] = v38;
  v44[3] = v39;
  v27[2] = v38;
  v27[3] = v34;
  *v27 = v32;
  v27[1] = v33;
  v27[6] = v30;
  v27[7] = v31;
  v27[4] = v28;
  v27[5] = v29;
  sub_10006BDA8((id *)v44);
  sub_10006BDD0((uint64_t)v15);
  v45[4] = v40;
  v45[5] = v41;
  v45[6] = v42;
  v45[7] = v43;
  v45[0] = v36;
  v45[1] = v37;
  v45[2] = v38;
  v45[3] = v39;
  sub_10006BE0C((id *)v45);
  return sub_10006BDD0((uint64_t)v10);
}

uint64_t sub_10006BAF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006B3AC(*(void **)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10006BB00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_10011A100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006BB48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A130;
  if (!qword_10011A130)
  {
    v1 = sub_1000050C8(&qword_10011A108);
    sub_10000522C(&qword_10011A138, &qword_10011A100, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A130);
  }
  return result;
}

unint64_t sub_10006BBCC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10011A140;
  if (!qword_10011A140)
  {
    v1 = sub_1000050C8(&qword_10011A118);
    v2[0] = sub_1000050C8(&qword_10011A108);
    v2[1] = sub_10006BB48();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A140);
  }
  return result;
}

uint64_t sub_10006BC78()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006BCAC()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 24);
  if (v1)
    return v1();
  return result;
}

unint64_t sub_10006BCD4()
{
  unint64_t result;

  result = qword_10011A150;
  if (!qword_10011A150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_10011A150);
  }
  return result;
}

uint64_t sub_10006BD20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LibraryItemArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006BD64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LibraryItemArtwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id *sub_10006BDA8(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_10006BDD0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LibraryItemArtwork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id *sub_10006BE0C(id *a1)
{

  return a1;
}

unint64_t sub_10006BE38()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10011A160;
  if (!qword_10011A160)
  {
    v1 = sub_1000050C8(&qword_10011A148);
    v2[0] = sub_1000050C8(&qword_10011A118);
    v2[1] = sub_1000050C8(&qword_100116EE8);
    v2[2] = sub_10006BBCC();
    v2[3] = sub_10000522C(&qword_100116F88, &qword_100116EE8, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A160);
  }
  return result;
}

uint64_t *sub_10006BF10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for ArtistProfileViewModel(0);
    v9 = v8[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = v8[6];
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = v8[7];
    v22 = (uint64_t *)((char *)v4 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = v8[8];
    v26 = *(uint64_t *)((char *)a2 + v25);
    *(uint64_t *)((char *)v4 + v25) = v26;
    v27 = *(int *)(a3 + 20);
    v28 = (uint64_t *)((char *)v4 + v27);
    v29 = (uint64_t *)((char *)a2 + v27);
    v16 = v29[1];
    *v28 = *v29;
    v28[1] = v16;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_retain(v26);
  }
  swift_retain(v16);
  return v4;
}

double sub_10006C084(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[7] + 8));
  swift_release(*(_QWORD *)(a1 + v4[8]));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8)).n128_u64[0];
  return result;
}

_QWORD *sub_10006C140(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = v7[6];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = v7[7];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = v7[8];
  v24 = *(_QWORD *)((char *)a2 + v23);
  *(_QWORD *)((char *)a1 + v23) = v24;
  v25 = *(int *)(a3 + 20);
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v22);
  swift_retain(v24);
  swift_retain(v28);
  return a1;
}

_QWORD *sub_10006C28C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = v8[6];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v8[7];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = v8[8];
  v29 = *(_QWORD *)((char *)a2 + v28);
  v30 = *(_QWORD *)((char *)a1 + v28);
  *(_QWORD *)((char *)a1 + v28) = v29;
  swift_retain(v29);
  swift_release(v30);
  v31 = *(int *)(a3 + 20);
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = v33[1];
  v35 = v32[1];
  *v32 = *v33;
  v32[1] = v34;
  swift_retain(v34);
  swift_release(v35);
  return a1;
}

_OWORD *sub_10006C460(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
  *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_10006C568(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = v8[6];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v8[7];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v8[8];
  v31 = *(_QWORD *)((char *)a1 + v30);
  *(_QWORD *)((char *)a1 + v30) = *(_QWORD *)((char *)a2 + v30);
  swift_release(v31);
  v32 = *(int *)(a3 + 20);
  v33 = *(_QWORD *)((char *)a1 + v32 + 8);
  *(_OWORD *)((char *)a1 + v32) = *(_OWORD *)((char *)a2 + v32);
  swift_release(v33);
  return a1;
}

uint64_t sub_10006C6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C704);
}

uint64_t sub_10006C704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ArtistProfileViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10006C780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C78C);
}

uint64_t sub_10006C78C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ArtistProfileViewModel(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t _s17ArtistDetailsViewVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_10011A1D0;
  if (!qword_10011A1D0)
    return swift_getSingletonMetadata(a1, &_s17ArtistDetailsViewVMn);
  return result;
}

uint64_t sub_10006C840(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for ArtistProfileViewModel(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10006C8B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE4A0, 1);
}

uint64_t sub_10006C8C4()
{
  uint64_t result;

  result = static Font.subheadline.getter();
  qword_10011A168 = result;
  return result;
}

uint64_t sub_10006C8E0()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10011A170 = result;
  return result;
}

uint64_t sub_10006C8FC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];

  v2 = v1;
  v37 = a1;
  v38 = type metadata accessor for AccessibilityTraits(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccessibilityChildBehavior(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_1001189D8);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_1001189E0);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_10011A208);
  v33 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100004F7C(&qword_10011A210);
  v17 = __chkstk_darwin(v32);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v17);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v20 = sub_100004F7C(&qword_10011A218);
  v21 = sub_10006CC14((uint64_t)v2, (uint64_t)&v10[*(int *)(v20 + 44)]);
  v22 = static Alignment.leading.getter(v21);
  sub_10003447C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v13, 0.0, 1, 0.0, 1, v22, v23);
  v24 = sub_10000526C((uint64_t)v10, &qword_1001189D8);
  static AccessibilityChildBehavior.combine.getter(v24);
  v25 = sub_10006D898();
  View.accessibilityElement(children:)(v7, v11, v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v35);
  sub_10000526C((uint64_t)v13, &qword_1001189E0);
  v26 = v2[1];
  v40[0] = *v2;
  v40[1] = v26;
  v39[0] = v11;
  v39[1] = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v39, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v28 = sub_10000B110();
  View.accessibilityLabel<A>(_:)(v40, v14, &type metadata for String, OpaqueTypeConformance2, v28);
  v29 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v14);
  static AccessibilityTraits.isButton.getter(v29);
  ModifiedContent<>.accessibilityAddTraits(_:)(v4, v32);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v38);
  return sub_10000526C((uint64_t)v19, &qword_10011A210);
}

uint64_t sub_10006CC14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[16];
  uint64_t v60;

  v58 = a2;
  v3 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v3);
  v52 = (uint64_t)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = _s17ArtistDetailsViewVMa(0);
  v49 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v49 + 64);
  __chkstk_darwin(v5);
  v7 = sub_100004F7C(&qword_10011A230);
  v55 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  __chkstk_darwin(v7);
  v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100004F7C(&qword_10011A238);
  v9 = __chkstk_darwin(v54);
  v57 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v51 = (char *)&v49 - v12;
  __chkstk_darwin(v11);
  v53 = (uint64_t)&v49 - v13;
  v14 = type metadata accessor for ArtistProfileViewModel(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v49 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v49 - v21;
  v23 = _s22ArtistProfileImageViewVMa(0);
  v24 = __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24);
  v28 = (char *)&v49 - v27;
  sub_10000B340(a1, (uint64_t)v22, type metadata accessor for ArtistProfileViewModel);
  sub_10000B340((uint64_t)v22, (uint64_t)v20, type metadata accessor for ArtistProfileViewModel);
  sub_10000B340((uint64_t)v20, (uint64_t)v17, type metadata accessor for ArtistProfileViewModel);
  State.init(wrappedValue:)(v26, v17, v14);
  sub_10000B600((uint64_t)v20, type metadata accessor for ArtistProfileViewModel);
  sub_10000B600((uint64_t)v22, type metadata accessor for ArtistProfileViewModel);
  sub_10000B4D4((uint64_t)v26, (uint64_t)v28, _s22ArtistProfileImageViewVMa);
  sub_10000B340(a1, (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), _s17ArtistDetailsViewVMa);
  v29 = *(unsigned __int8 *)(v49 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = swift_allocObject(&unk_10010B800, v30 + v6, v29 | 7);
  sub_10000B4D4((uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v31 + v30, _s17ArtistDetailsViewVMa);
  v60 = a1;
  v32 = sub_100004F7C(&qword_10011A240);
  v33 = sub_10000522C(&qword_10011A248, &qword_10011A240, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v34 = v50;
  Button.init(action:label:)(sub_10006DA1C, v31, sub_10006DA60, v59, v32, v33);
  v35 = v52;
  sub_100007C8C(a1 + *(int *)(v14 + 20), v52, (uint64_t *)&unk_100118CE0);
  v36 = type metadata accessor for URL(0);
  LOBYTE(v31) = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36) == 1;
  sub_10000526C(v35, (uint64_t *)&unk_100118CE0);
  KeyPath = swift_getKeyPath(&unk_1000D4E58, v37);
  v39 = swift_allocObject(&unk_10010B828, 17, 7);
  *(_BYTE *)(v39 + 16) = v31;
  v41 = v55;
  v40 = v56;
  v42 = (uint64_t)v51;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v51, v34, v56);
  v43 = (uint64_t *)(v42 + *(int *)(v54 + 36));
  *v43 = KeyPath;
  v43[1] = (uint64_t)sub_10006DA80;
  v43[2] = v39;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v40);
  v44 = v53;
  sub_10006DA88(v42, v53);
  sub_10000B340((uint64_t)v28, (uint64_t)v26, _s22ArtistProfileImageViewVMa);
  v45 = v57;
  sub_100007C8C(v44, v57, &qword_10011A238);
  v46 = v58;
  sub_10000B340((uint64_t)v26, v58, _s22ArtistProfileImageViewVMa);
  v47 = sub_100004F7C(&qword_10011A250);
  sub_100007C8C(v45, v46 + *(int *)(v47 + 48), &qword_10011A238);
  sub_10000526C(v44, &qword_10011A238);
  sub_10000B600((uint64_t)v28, _s22ArtistProfileImageViewVMa);
  sub_10000526C(v45, &qword_10011A238);
  return sub_10000B600((uint64_t)v26, _s22ArtistProfileImageViewVMa);
}

double sub_10006D0E0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  _OWORD v18[8];
  _OWORD v19[2];
  _BYTE v20[160];

  v11 = static HorizontalAlignment.leading.getter(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_10006D1F8(a1, (uint64_t)v18);
  *(_OWORD *)&v20[119] = v18[7];
  *(_OWORD *)&v20[103] = v18[6];
  *(_OWORD *)&v20[55] = v18[3];
  *(_OWORD *)&v20[39] = v18[2];
  *(_OWORD *)&v20[135] = v19[0];
  *(_OWORD *)&v20[144] = *(_OWORD *)((char *)v19 + 9);
  *(_OWORD *)&v20[71] = v18[4];
  *(_OWORD *)&v20[87] = v18[5];
  *(_OWORD *)&v20[7] = v18[0];
  *(_OWORD *)&v20[23] = v18[1];
  v12 = *(_OWORD *)&v20[112];
  *(_OWORD *)(a9 + 113) = *(_OWORD *)&v20[96];
  *(_OWORD *)(a9 + 129) = v12;
  v13 = *(_OWORD *)&v20[144];
  *(_OWORD *)(a9 + 145) = *(_OWORD *)&v20[128];
  *(_OWORD *)(a9 + 161) = v13;
  v14 = *(_OWORD *)&v20[48];
  *(_OWORD *)(a9 + 49) = *(_OWORD *)&v20[32];
  *(_OWORD *)(a9 + 65) = v14;
  v15 = *(_OWORD *)&v20[80];
  *(_OWORD *)(a9 + 81) = *(_OWORD *)&v20[64];
  *(_OWORD *)(a9 + 97) = v15;
  result = *(double *)v20;
  v17 = *(_OWORD *)&v20[16];
  *(_OWORD *)(a9 + 17) = *(_OWORD *)v20;
  *(_QWORD *)a9 = v11;
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = 1;
  *(_OWORD *)(a9 + 33) = v17;
  return result;
}

uint64_t sub_10006D1F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  v48 = static VerticalAlignment.center.getter(a1);
  sub_10006D54C(a1, (uint64_t)&v61);
  v57 = v62;
  v58 = v61;
  v55 = v63;
  v4 = v65;
  v47 = v66;
  v54 = v68;
  v52 = v69;
  v53 = v67;
  v56 = v70;
  v59 = v71;
  v60 = v64;
  v5 = (_QWORD *)((char *)a1 + *(int *)(type metadata accessor for ArtistProfileViewModel(0) + 24));
  v6 = v5[1];
  if (v6)
  {
    v61 = *v5;
    v62 = v6;
    v7 = sub_10000B110();
    v61 = StringProtocol.localizedUppercase.getter(&type metadata for String, v7);
    v62 = v8;
    v9 = Text.init<A>(_:)(&v61, &type metadata for String, v7);
    v11 = v10;
    v13 = v12;
    v15 = v14 & 1;
    v16 = static Font.caption.getter();
    v17 = Text.font(_:)(v16, v9, v11, v15, v13);
    v19 = v18;
    v46 = v4;
    v21 = v20;
    v23 = v22;
    swift_release(v16);
    LOBYTE(v16) = v21 & 1;
    sub_10000B64C(v9, v11, v15);
    v24 = swift_bridgeObjectRelease(v13);
    v25 = static Color.secondary.getter(v24);
    v61 = v25;
    v26 = v23;
    v27 = Text.foregroundStyle<A>(_:)(&v61, v17, v19, v21 & 1, v23, &type metadata for Color, &protocol witness table for Color);
    v29 = v28;
    v31 = v30;
    v33 = v32 & 1;
    sub_10000B64C(v17, v19, v16);
    swift_release(v25);
    v34 = swift_bridgeObjectRelease(v26);
    v35 = static Font.Weight.bold.getter(v34);
    v36 = Text.fontWeight(_:)(*(_QWORD *)&v35, 0, v27, v29, v33, v31);
    v50 = v37;
    v51 = v36;
    v49 = v38;
    v40 = v39 & 1;
    v41 = v27;
    v4 = v46;
    sub_10000B64C(v41, v29, v33);
    swift_bridgeObjectRelease(v31);
    KeyPath = swift_getKeyPath(&unk_1000D4E88, v42);
  }
  else
  {
    v50 = 0;
    v51 = 0;
    v40 = 0;
    v49 = 0;
    KeyPath = 0;
  }
  LOBYTE(v61) = 0;
  *(_QWORD *)a2 = v48;
  *(_QWORD *)(a2 + 8) = 0x4028000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v58;
  *(_QWORD *)(a2 + 32) = v57;
  *(_BYTE *)(a2 + 40) = v55;
  *(_QWORD *)(a2 + 48) = v60;
  *(_QWORD *)(a2 + 56) = v4;
  *(_QWORD *)(a2 + 64) = v47;
  *(_BYTE *)(a2 + 72) = v53;
  *(_QWORD *)(a2 + 80) = v54;
  *(_BYTE *)(a2 + 88) = v52;
  *(_QWORD *)(a2 + 96) = v56;
  *(_QWORD *)(a2 + 104) = v59;
  *(_QWORD *)(a2 + 112) = v51;
  *(_QWORD *)(a2 + 120) = v50;
  *(_QWORD *)(a2 + 128) = v40;
  *(_QWORD *)(a2 + 136) = v49;
  *(_QWORD *)(a2 + 144) = KeyPath;
  *(_BYTE *)(a2 + 152) = 0;
  v44 = KeyPath;
  sub_100025480(v58, v57, v55);
  swift_bridgeObjectRetain(v60);
  swift_retain(v4);
  swift_retain(v54);
  sub_10006DAD0(v56, v59);
  sub_10006DAFC(v51, v50, v40, v49, v44);
  sub_10006DB38(v51, v50, v40, v49, v44);
  sub_10000B64C(v58, v57, v55);
  swift_release(v54);
  swift_release(v4);
  swift_bridgeObjectRelease(v60);
  return sub_10006DB74(v56, v59);
}

uint64_t sub_10006D54C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[2];

  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v4);
  v54 = a1;
  v55 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[1];
  v56[0] = *a1;
  v56[1] = v6;
  v7 = sub_10000B110();
  swift_bridgeObjectRetain(v6);
  v8 = Text.init<A>(_:)(v56, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.title3.getter();
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release(v15);
  v23 = v20 & 1;
  sub_10000B64C(v8, v10, v14);
  v24 = swift_bridgeObjectRelease(v12);
  v25 = static Font.Weight.semibold.getter(v24);
  v26 = Text.fontWeight(_:)(*(_QWORD *)&v25, 0, v16, v18, v23, v22);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  sub_10000B64C(v16, v18, v23);
  v33 = swift_bridgeObjectRelease(v22);
  v34 = static Color.primary.getter(v33);
  v56[0] = v34;
  v35 = Text.foregroundStyle<A>(_:)(v56, v26, v28, v32, v30, &type metadata for Color, &protocol witness table for Color);
  v37 = v36;
  HIDWORD(v53) = v38;
  v40 = v39;
  sub_10000B64C(v26, v28, v32);
  swift_release(v34);
  swift_bridgeObjectRelease(v30);
  KeyPath = swift_getKeyPath(&unk_1000D4EB8, v41);
  v44 = swift_getKeyPath(&unk_1000D4E88, v43);
  v45 = type metadata accessor for ArtistProfileViewModel(0);
  v46 = v55;
  sub_100007C8C((uint64_t)v54 + *(int *)(v45 + 20), v55, (uint64_t *)&unk_100118CE0);
  v47 = type metadata accessor for URL(0);
  LODWORD(v30) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v46, 1, v47);
  sub_10000526C(v46, (uint64_t *)&unk_100118CE0);
  v48 = 0;
  v49 = 0;
  if ((_DWORD)v30 != 1)
  {
    if (qword_100115FE8 != -1)
      swift_once(&qword_100115FE8, sub_10006C8C4);
    v48 = qword_10011A168;
    v50 = qword_100115FF0;
    swift_retain(qword_10011A168);
    if (v50 != -1)
      swift_once(&qword_100115FF0, sub_10006C8E0);
    v49 = qword_10011A170;
    swift_retain(qword_10011A170);
  }
  v51 = BYTE4(v53) & 1;
  *(_QWORD *)a2 = v35;
  *(_QWORD *)(a2 + 8) = v37;
  *(_BYTE *)(a2 + 16) = v51;
  *(_QWORD *)(a2 + 24) = v40;
  *(_QWORD *)(a2 + 32) = KeyPath;
  *(_QWORD *)(a2 + 40) = 1;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v44;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = v48;
  *(_QWORD *)(a2 + 80) = v49;
  sub_100025480(v35, v37, v51);
  swift_bridgeObjectRetain(v40);
  swift_retain(KeyPath);
  swift_retain(v44);
  sub_10006DAD0(v48, v49);
  sub_10006DB74(v48, v49);
  sub_10000B64C(v35, v37, v51);
  swift_release(v44);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v40);
}

unint64_t sub_10006D898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A220;
  if (!qword_10011A220)
  {
    v1 = sub_1000050C8(&qword_1001189E0);
    sub_10000522C(&qword_10011A228, &qword_1001189D8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A220);
  }
  return result;
}

uint64_t sub_10006D91C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = _s17ArtistDetailsViewVMa(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  v7 = (int *)type metadata accessor for ArtistProfileViewModel(0);
  v8 = v0 + v4 + v7[5];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[7] + 8));
  swift_release(*(_QWORD *)(v6 + v7[8]));
  swift_release(*(_QWORD *)(v6 + *(int *)(v1 + 20) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006DA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = _s17ArtistDetailsViewVMa(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return (*(uint64_t (**)(void))(v0 + *(int *)(v1 + 20) + ((v2 + 16) & ~v2)))();
}

double sub_10006DA60@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;

  return sub_10006D0E0(*(_QWORD **)(v8 + 16), a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10006DA70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10006DA80(_BYTE *a1)
{
  uint64_t v1;

  return sub_100092ED0(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_10006DA88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_10011A238);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006DAD0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_retain(result);
    return swift_retain(a2);
  }
  return result;
}

double sub_10006DAFC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a4)
  {
    sub_100025480(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  }
  return result;
}

uint64_t sub_10006DB38(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    sub_10000B64C(result, a2, a3 & 1);
    swift_release(a5);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_10006DB74(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_release(result);
    return swift_release(a2);
  }
  return result;
}

unint64_t sub_10006DBB4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10011A258[0];
  if (!qword_10011A258[0])
  {
    v1 = sub_1000050C8(&qword_10011A210);
    v2[0] = sub_1000050C8(&qword_1001189E0);
    v2[1] = sub_10006D898();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10004A368();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, qword_10011A258);
  }
  return result;
}

uint64_t sub_10006DC48(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject.Type + 64;
  result = type metadata accessor for CoordinateSpace(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 3, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10006DCCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    v8 = *(int *)(a3 + 36);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for CoordinateSpace(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 40);
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v5 = v14[1];
    *v13 = *v14;
    v13[1] = v5;
  }
  swift_retain(v5);
  return a1;
}

uint64_t sub_10006DD70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 40) + 8));
}

_QWORD *sub_10006DDC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  return a1;
}

_QWORD *sub_10006DE4C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = v12[1];
  v14 = v11[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

_QWORD *sub_10006DEDC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 40)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 40));
  return a1;
}

_QWORD *sub_10006DF54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 36);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 40);
  v11 = *(_QWORD *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_10006DFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006DFE4);
}

uint64_t sub_10006DFE4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CoordinateSpace(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 36)], a2, v8);
  }
}

uint64_t sub_10006E060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E06C);
}

char *sub_10006E06C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CoordinateSpace(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SizeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SizeModifier);
}

uint64_t sub_10006E0EC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000DE524, 1);
}

uint64_t sub_10006E120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[4];

  v46 = a1;
  v47 = a3;
  v4 = *(_QWORD *)(a2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  WitnessTable = swift_getWitnessTable(&unk_1000D4F10, v7);
  v9 = type metadata accessor for _ViewModifier_Content(255, a2, WitnessTable);
  v38 = v9;
  v10 = sub_1000050C8(&qword_10011A2E0);
  v11 = *(_QWORD *)(a2 + 16);
  v42 = *(_QWORD *)(a2 + 24);
  v43 = v11;
  v12 = type metadata accessor for _PreferenceWritingModifier(255, v11, v42);
  v13 = type metadata accessor for ModifiedContent(255, v10, v12);
  v14 = sub_10006E6C0();
  v15 = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v12);
  v50[2] = v14;
  v50[3] = v15;
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v16 = type metadata accessor for GeometryReader(255, v13, v39);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v16);
  v41 = type metadata accessor for _BackgroundModifier(255, v16, v40);
  v17 = type metadata accessor for ModifiedContent(0, v9, v41);
  v44 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v38 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v45, a2);
  v23 = *(unsigned __int8 *)(v4 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(&unk_10010B900, v24 + v5, v23 | 7);
  v26 = v42;
  *(_QWORD *)(v25 + 16) = v43;
  *(_QWORD *)(v25 + 24) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v25 + v24, v6, a2);
  v27 = GeometryReader.init(content:)(sub_10006E854, v25, v13, v39);
  v29 = v28;
  v50[0] = v27;
  v50[1] = v28;
  v30 = static Alignment.center.getter(v27);
  v32 = v31;
  v33 = v38;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v38);
  View.background<A>(_:alignment:)(v50, v30, v32, v33, v16, v34, v40);
  swift_release(v29);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v41);
  v48 = v34;
  v49 = v35;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  sub_100093E10((uint64_t)v20, v17, (uint64_t)v22);
  v36 = *(void (**)(char *, uint64_t))(v44 + 8);
  v36(v20, v17);
  sub_100091208((uint64_t)v22, v17, v47);
  return ((uint64_t (*)(char *, uint64_t))v36)(v22, v17);
}

uint64_t sub_10006E404@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t WitnessTable;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;

  v32 = a1;
  v37 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for PreferenceKey, &associated type descriptor for PreferenceKey.Value);
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v35 = AssociatedTypeWitness;
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v30 - v9;
  v11 = sub_1000050C8(&qword_10011A2E0);
  v31 = v11;
  v33 = type metadata accessor for _PreferenceWritingModifier(255, a3, a4);
  v12 = type metadata accessor for ModifiedContent(0, v11, v33);
  v36 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v30 - v17;
  v19 = static Color.clear.getter(v16);
  KeyPath = swift_getKeyPath(&unk_1000D4F60, v20);
  v41 = v19;
  v21 = *a2;
  v23 = type metadata accessor for SizeModifier(0, a3, a4, v22);
  v24 = *(void (**)(uint64_t))((char *)a2 + *(int *)(v23 + 40));
  v25 = GeometryProxy.frame(in:)((char *)a2 + *(int *)(v23 + 36));
  v24(v25);
  v26 = sub_10006E6C0();
  View.preference<A>(key:value:)(v21, v10, v31, a3, v26, a4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v35);
  swift_release(KeyPath);
  swift_release(v41);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v33);
  v38 = v26;
  v39 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  sub_100093E10((uint64_t)v15, v12, (uint64_t)v18);
  v28 = *(void (**)(char *, uint64_t))(v36 + 8);
  v28(v15, v12);
  sub_100091208((uint64_t)v18, v12, v37);
  return ((uint64_t (*)(char *, uint64_t))v28)(v18, v12);
}

uint64_t sub_10006E638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  *a7 = a1;
  v11 = type metadata accessor for SizeModifier(0, a5, a6, a4);
  v12 = (char *)a7 + *(int *)(v11 + 36);
  v13 = type metadata accessor for CoordinateSpace(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  v15 = (_QWORD *)((char *)a7 + *(int *)(v11 + 40));
  *v15 = a3;
  v15[1] = a4;
  return result;
}

unint64_t sub_10006E6C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A2E8;
  if (!qword_10011A2E8)
  {
    v1 = sub_1000050C8(&qword_10011A2E0);
    sub_10006E72C();
    sub_10006E770();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A2E8);
  }
  return result;
}

unint64_t sub_10006E72C()
{
  unint64_t result;

  result = qword_10011A2F0;
  if (!qword_10011A2F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_10011A2F0);
  }
  return result;
}

unint64_t sub_10006E770()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F68;
  if (!qword_100116F68)
  {
    v1 = sub_1000050C8(&qword_100116F70);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F68);
  }
  return result;
}

uint64_t sub_10006E7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = type metadata accessor for SizeModifier(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  v11 = v4 + v8;
  v12 = v4 + v8 + *(int *)(v5 + 36);
  v13 = type metadata accessor for CoordinateSpace(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)(v11 + *(int *)(v5 + 40) + 8));
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_10006E854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SizeModifier(0, v6, v7, a2) - 8) + 80);
  return sub_10006E404(a1, (uint64_t *)(v3 + ((v8 + 32) & ~v8)), v6, v7, a3);
}

uint64_t sub_10006E8C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a1;
  v5 = a1[1];
  v6 = type metadata accessor for SizeModifier(255, *a1, v5, a4);
  WitnessTable = swift_getWitnessTable(&unk_1000D4F10, v6);
  v8 = type metadata accessor for _ViewModifier_Content(255, v6, WitnessTable);
  v9 = sub_1000050C8(&qword_10011A2E0);
  v10 = type metadata accessor for _PreferenceWritingModifier(255, v4, v5);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  sub_10006E6C0();
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v10);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13 = type metadata accessor for GeometryReader(255, v11, v12);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v13);
  v15 = type metadata accessor for _BackgroundModifier(255, v13, v14);
  v16 = type metadata accessor for ModifiedContent(255, v8, v15);
  swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v8);
  swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v15);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
}

ValueMetadata *type metadata accessor for ShazamCountsViewModel()
{
  return &type metadata for ShazamCountsViewModel;
}

double sub_10006EA28@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  double result;
  double v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5040, a2);
  v7 = swift_getKeyPath(&unk_1000D5068, v6);
  static Published.subscript.getter(&v9, v4, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  result = v9;
  *a3 = v9;
  return result;
}

void sub_10006EAA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5040, a2);
  v6 = swift_getKeyPath(&unk_1000D5068, v5);
  v9 = v2;
  swift_retain(v3);
  v7 = static Published.subscript.setter(&v9, v3, KeyPath, v6);
  sub_100061ACC(v7, v8);
}

id sub_10006EB20()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SongPreviewPlaybackController(0)), "init");
  qword_100124538 = (uint64_t)result;
  return result;
}

uint64_t sub_10006EB50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D4FF8, a2);
  v5 = swift_getKeyPath(&unk_1000D5020, v4);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

id sub_10006EBC0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  objc_super v15;
  uint64_t v16;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v5 = sub_100004F7C(&qword_10011A358);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_playerContext] = 0;
  v9 = &v3[OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController__statusController];
  v10 = type metadata accessor for SongPreviewStatusController(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v16 = 0;
  v12 = v3;
  Published.init(initialValue:)(&v16, &type metadata for Double);
  LOBYTE(v16) = 0;
  Published.init(initialValue:)(&v16, &type metadata for SongPreviewStatusController.PlaybackStatus);
  v16 = v11;
  Published.init(initialValue:)(&v16, v10);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v8, v5);

  v15.receiver = v12;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

void sub_10006ED38(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSURL *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  NSString v20;
  id v21;
  CMTimeValue value;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  double v30;
  id v31;
  id v32;
  uint64_t v33;
  CMTimeEpoch epoch;
  id v35;
  id v36;
  void **aBlock;
  unint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t *);
  void *v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  CMTime v43;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_10006F0A0();
  v7 = objc_allocWithZone((Class)AVURLAsset);
  URL._bridgeToObjectiveC()(v8);
  v10 = v9;
  v11 = objc_msgSend(v7, "initWithURL:options:", v9, 0);

  v36 = objc_msgSend(objc_allocWithZone((Class)AVPlayerItem), "initWithAsset:", v11);
  v12 = objc_msgSend(objc_allocWithZone((Class)AVPlayer), "initWithPlayerItem:", v36);
  v13 = OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer;
  v14 = *(void **)&v2[OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer];
  *(_QWORD *)&v2[OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer] = v12;

  v15 = *(void **)&v2[v13];
  if (v15)
  {
    v16 = v15;
    v17 = String._bridgeToObjectiveC()();
    v35 = v16;
    objc_msgSend(v16, "addObserver:forKeyPath:options:context:", v2, v17, 1, &v2[OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_playerContext]);

    v18 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v19 = v4;
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v16, "currentItem");
    objc_msgSend(v18, "addObserver:selector:name:object:", v2, "playerDidFinishPlaying", v20, v21);

    v43 = CMTime.init(value:timescale:)(1, 5);
    value = v43.value;
    LODWORD(v20) = v43.timescale;
    v33 = HIDWORD(*(_QWORD *)&v43.timescale);
    epoch = v43.epoch;
    sub_1000704B4();
    v23 = (void *)static OS_dispatch_queue.main.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v24 = *(unsigned __int8 *)(v5 + 80);
    v25 = (v24 + 24) & ~v24;
    v26 = swift_allocObject(&unk_10010B9C0, v25 + v6, v24 | 7);
    *(_QWORD *)(v26 + 16) = v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v26 + v25, (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
    v41 = sub_100070564;
    v42 = v26;
    aBlock = _NSConcreteStackBlock;
    v38 = 1107296256;
    v39 = sub_10006F730;
    v40 = &unk_10010B9D8;
    v27 = _Block_copy(&aBlock);
    v28 = v42;
    v29 = v2;
    *(_QWORD *)&v30 = swift_release(v28).n128_u64[0];
    aBlock = (void **)value;
    v38 = __PAIR64__(v33, v20);
    v31 = v35;
    v39 = (uint64_t (*)(uint64_t, uint64_t *))epoch;
    v32 = objc_msgSend(v35, "addPeriodicTimeObserverForInterval:queue:usingBlock:", &aBlock, v23, v27, v30);
    _Block_release(v27);

    _bridgeAnyObjectToAny(_:)(&aBlock, v32);
    swift_unknownObjectRelease(v32);
    _s16MusicRecognition11AnyPlaylistVwxx_0(&aBlock);
    sub_1000705D4();

  }
  else
  {

  }
}

uint64_t sub_10006F0A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer);
  if (v2)
  {
    objc_msgSend(v2, "pause");
    v3 = *(void **)(v0 + v1);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v0 + v1) = 0;

  KeyPath = swift_getKeyPath(&unk_1000D4FF8, v4);
  v7 = swift_getKeyPath(&unk_1000D5020, v6);
  static Published.subscript.getter(&v20, v0, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  v8 = v20;
  v10 = swift_getKeyPath(&unk_1000D5040, v9);
  v12 = swift_getKeyPath(&unk_1000D5068, v11);
  v20 = 0;
  swift_retain(v8);
  v13 = static Published.subscript.setter(&v20, v8, v10, v12);
  sub_100061ACC(v13, v14);
  v16 = swift_getKeyPath(&unk_1000D5088, v15);
  v18 = swift_getKeyPath(&unk_1000D50B0, v17);
  LOBYTE(v20) = 0;
  return static Published.subscript.setter(&v20, v8, v16, v18);
}

void sub_10006F1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;

  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(a4 + OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer);
  if (v14 && (v15 = objc_msgSend(v14, "currentItem")) != 0)
  {
    v16 = v15;
    objc_msgSend(v15, "duration");
    v17 = v63[0];
    v18 = v63[1];
    v19 = v63[2];

    v20 = CMTime.seconds.getter(v17, v18, v19);
    KeyPath = swift_getKeyPath(&unk_1000D4FF8, v21);
    v24 = swift_getKeyPath(&unk_1000D5020, v23);
    static Published.subscript.getter(v63, a4, KeyPath, v24);
    swift_release(KeyPath);
    swift_release(v24);
    v25 = v63[0];
    v26 = CMTime.seconds.getter(a1, a2, a3);
    sub_100061DBC(v26, v20, v27, v28);
    swift_release(v25);
    v30 = swift_getKeyPath(&unk_1000D4FF8, v29);
    v32 = swift_getKeyPath(&unk_1000D5020, v31);
    static Published.subscript.getter(v63, a4, v30, v32);
    swift_release(v30);
    swift_release(v32);
    v33 = v63[0];
    v35 = swift_getKeyPath(&unk_1000D5040, v34);
    v37 = swift_getKeyPath(&unk_1000D5068, v36);
    static Published.subscript.getter(v63, v33, v35, v37);
    swift_release(v33);
    swift_release(v35);
    swift_release(v37);
    if (*(double *)v63 == 1.0)
      sub_10006F5EC(v38, v39);
  }
  else
  {
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v40 = type metadata accessor for Logger(0);
    sub_10000B5E8(v40, (uint64_t)qword_100124478);
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v62 = a4;
      v63[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = sub_100004864((unint64_t *)&qword_1001168E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v10, v46);
      v49 = v48;
      v64 = sub_1000529F4(v47, v48, v63);
      a4 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v49);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Invalid or missing duration for current item %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    v51 = swift_getKeyPath(&unk_1000D4FF8, v50);
    v53 = swift_getKeyPath(&unk_1000D5020, v52);
    static Published.subscript.getter(v63, a4, v51, v53);
    swift_release(v51);
    swift_release(v53);
    v54 = v63[0];
    v56 = swift_getKeyPath(&unk_1000D5040, v55);
    v58 = swift_getKeyPath(&unk_1000D5068, v57);
    v63[0] = 0;
    swift_retain(v54);
    v59 = static Published.subscript.setter(v63, v54, v56, v58);
    sub_100061ACC(v59, v60);
    swift_release(v54);
  }
}

id sub_10006F5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  CMTimeValue v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id result;
  CMTimeScale timescale;
  CMTimeFlags flags;
  CMTimeValue v21;
  CMTimeScale v22;
  CMTimeFlags v23;
  CMTimeEpoch v24;
  CMTimeValue v25;
  CMTimeScale v26;
  CMTimeFlags v27;
  CMTimeEpoch epoch;
  CMTimeValue value;
  CMTimeScale v30;
  CMTimeFlags v31;
  CMTimeEpoch v32;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000D4FF8, a2);
  v6 = swift_getKeyPath(&unk_1000D5020, v5);
  static Published.subscript.getter(&value, v3, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = value;
  v9 = swift_getKeyPath(&unk_1000D5040, v8);
  v11 = swift_getKeyPath(&unk_1000D5068, v10);
  value = 0;
  swift_retain(v7);
  v12 = static Published.subscript.setter(&value, v7, v9, v11);
  sub_100061ACC(v12, v13);
  v15 = swift_getKeyPath(&unk_1000D5088, v14);
  v17 = swift_getKeyPath(&unk_1000D50B0, v16);
  LOBYTE(value) = 0;
  static Published.subscript.setter(&value, v7, v15, v17);
  result = *(id *)(v3 + OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer);
  if (result)
  {
    timescale = kCMTimeZero.timescale;
    flags = kCMTimeZero.flags;
    epoch = kCMTimeZero.epoch;
    value = kCMTimeZero.value;
    v30 = timescale;
    v31 = flags;
    v32 = epoch;
    v24 = epoch;
    v25 = kCMTimeZero.value;
    v26 = timescale;
    v27 = flags;
    v21 = kCMTimeZero.value;
    v22 = timescale;
    v23 = flags;
    return objc_msgSend(result, "seekToTime:toleranceBefore:toleranceAfter:", &value, &v25, &v21);
  }
  return result;
}

uint64_t sub_10006F730(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(v2, v3, v4);
  return swift_release(v5);
}

uint64_t sub_10006F784()
{
  return swift_task_switch(sub_10006F7E4, 0, 0);
}

uint64_t sub_10006F7E4()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = objc_msgSend((id)objc_opt_self(AVAudioSession), "sharedInstance");
  *(_QWORD *)(v0 + 16) = 0;
  v2 = objc_msgSend(v1, "setCategory:withOptions:error:", AVAudioSessionCategoryPlayback, 1, v0 + 16);

  v3 = *(void **)(v0 + 16);
  if (v2)
  {
    v4 = v3;
  }
  else
  {
    v5 = v3;
    v6 = _convertNSErrorToError(_:)(v3);

    swift_willThrow(v7);
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v8 = type metadata accessor for Logger(0);
    sub_10000B5E8(v8, (uint64_t)qword_100124478);
    swift_errorRetain(v6);
    v9 = swift_errorRetain(v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      swift_errorRetain(v6);
      v14 = _swift_stdlib_bridgeErrorToNSError(v6);
      *(_QWORD *)(v0 + 16) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v12 + 4, v12 + 12);
      *v13 = v14;
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received error setting playback category %@", v12, 0xCu);
      v15 = sub_100004F7C((uint64_t *)&unk_100116E50);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006FA50()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  float v5;
  id v6;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_previewPlayer);
  if (v1)
  {
    v6 = v1;
    v2 = objc_msgSend(v6, "error");
    if (v2)
    {
      v3 = v2;

      v4 = v3;
    }
    else
    {
      objc_msgSend(v6, "rate");
      if (v5 == 0.0)
        objc_msgSend(v6, "play");
      else
        objc_msgSend(v6, "pause");
      v4 = v6;
    }

  }
}

void sub_10006FB30(uint64_t a1, void *a2, uint64_t a3, Class isa, char *a5)
{
  char *v5;
  char *v6;
  NSString v10;
  objc_class *ObjectType;
  NSString *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  double v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  objc_super v46;
  __int128 v47;
  __int128 v48;

  v6 = v5;
  v10 = a2;
  ObjectType = (objc_class *)swift_getObjectType(v6, a2);
  if (!a5 || &v6[OBJC_IVAR____TtC16MusicRecognition29SongPreviewPlaybackController_playerContext] != a5)
  {
    if (v10)
      v10 = String._bridgeToObjectiveC()();
    sub_10007046C(a3, (uint64_t)&v47);
    v33 = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v34 = sub_10000C9C8(&v47, *((uint64_t *)&v48 + 1));
      v35 = *(_QWORD *)(v33 - 8);
      __chkstk_darwin(v34);
      v37 = (char *)&v44 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v35 + 16))(v37);
      v38 = _bridgeAnythingToObjectiveC<A>(_:)(v37, v33);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v33);
      _s16MusicRecognition11AnyPlaylistVwxx_0(&v47);
      if (!isa)
      {
LABEL_20:
        v46.receiver = v6;
        v46.super_class = ObjectType;
        objc_msgSendSuper2(&v46, "observeValueForKeyPath:ofObject:change:context:", v10, v38, isa, a5);

        swift_unknownObjectRelease(v38);
        return;
      }
    }
    else
    {
      v38 = 0;
      if (!isa)
        goto LABEL_20;
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_100004864(&qword_1001164C8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000D1440);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_20;
  }
  if (!v10
    || (a1 != 1702125938 || v10 != (NSString)0xE400000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, v10, 1702125938, 0xE400000000000000, 0) & 1) == 0)
  {
    return;
  }
  if (!isa || !*((_QWORD *)isa + 2))
  {
    v47 = 0u;
    v48 = 0u;
    goto LABEL_25;
  }
  v13 = NSKeyValueChangeNewKey;
  v14 = sub_10009D560();
  if ((v15 & 1) == 0)
  {
    v47 = 0u;
    v48 = 0u;

    goto LABEL_25;
  }
  sub_100053034(*((_QWORD *)isa + 7) + 32 * v14, (uint64_t)&v47);

  if (!*((_QWORD *)&v48 + 1))
  {
LABEL_25:
    sub_10000526C((uint64_t)&v47, &qword_10011A350);
    return;
  }
  if ((swift_dynamicCast(&v45, &v47, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
  {
    v17 = v45;
    if ((*(_QWORD *)&v45 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      KeyPath = swift_getKeyPath(&unk_1000D4FF8, v16);
      v20 = swift_getKeyPath(&unk_1000D5020, v19);
      static Published.subscript.getter(&v47, v6, KeyPath, v20);
      swift_release(KeyPath);
      swift_release(v20);
      v21 = v47;
      LOBYTE(v20) = sub_100061C6C(v22, v23);
      swift_release(v21);
      if ((v20 & 1) != 0)
      {
        v24 = swift_getKeyPath(&unk_1000D4FF8, v16);
        v26 = swift_getKeyPath(&unk_1000D5020, v25);
        static Published.subscript.getter(&v47, v6, v24, v26);
        swift_release(v24);
        swift_release(v26);
        v27 = v47;
        v29 = swift_getKeyPath(&unk_1000D5088, v28);
        v31 = swift_getKeyPath(&unk_1000D50B0, v30);
        v32 = 2;
LABEL_29:
        LOBYTE(v47) = v32;
        static Published.subscript.setter(&v47, v27, v29, v31);
        return;
      }
    }
    if (v17 != 0.0)
    {
      v39 = swift_getKeyPath(&unk_1000D4FF8, v16);
      v41 = swift_getKeyPath(&unk_1000D5020, v40);
      static Published.subscript.getter(&v47, v6, v39, v41);
      swift_release(v39);
      swift_release(v41);
      v27 = v47;
      v29 = swift_getKeyPath(&unk_1000D5088, v42);
      v31 = swift_getKeyPath(&unk_1000D50B0, v43);
      v32 = 1;
      goto LABEL_29;
    }
  }
}

uint64_t sub_1000700A8()
{
  return type metadata accessor for SongPreviewPlaybackController(0);
}

uint64_t type metadata accessor for SongPreviewPlaybackController(uint64_t a1)
{
  uint64_t result;

  result = qword_10011A338;
  if (!qword_10011A338)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SongPreviewPlaybackController);
  return result;
}

void sub_1000700EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100070170(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100070170(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10011A348)
  {
    v2 = type metadata accessor for SongPreviewStatusController(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10011A348);
  }
}

uint64_t sub_1000701C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *v2;
  KeyPath = swift_getKeyPath(&unk_1000D4FF8, a2);
  v6 = swift_getKeyPath(&unk_1000D5020, v5);
  static Published.subscript.getter(&v8, v3, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  return v8;
}

void sub_100070238()
{
  sub_10006FA50();
}

uint64_t sub_100070258()
{
  return sub_10006F0A0();
}

uint64_t sub_100070278@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5088, a2);
  v7 = swift_getKeyPath(&unk_1000D50B0, v6);
  static Published.subscript.getter(&v9, v4, KeyPath, v7);
  swift_release(KeyPath);
  result = swift_release(v7);
  *a3 = v9;
  return result;
}

uint64_t sub_1000702F4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5088, a2);
  v6 = swift_getKeyPath(&unk_1000D50B0, v5);
  v8 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_100070364@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D4FF8, a2);
  v7 = swift_getKeyPath(&unk_1000D5020, v6);
  static Published.subscript.getter(&v9, v4, KeyPath, v7);
  swift_release(KeyPath);
  result = swift_release(v7);
  *a3 = v9;
  return result;
}

uint64_t sub_1000703E4(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D4FF8, a2);
  v6 = swift_getKeyPath(&unk_1000D5020, v5);
  v8 = v2;
  swift_retain(v2);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_10007046C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_10011A350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000704B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100118B88;
  if (!qword_100118B88)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100118B88);
  }
  return result;
}

uint64_t sub_1000704F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100070564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_10006F1B8(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + ((v7 + 24) & ~v7));
}

uint64_t sub_1000705BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000705CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

double sub_1000705D4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double result;
  _QWORD v20[4];

  v0 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v0);
  v2 = (char *)v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject(&unk_10010BA10, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000526C((uint64_t)v2, &qword_100116D98);
    v7 = 0;
    v8 = 0;
    v9 = 7168;
  }
  else
  {
    v10 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    v9 = v10 | 0x1C00;
    v12 = *v6;
    if (*v6)
    {
      v13 = *(_QWORD *)(v5 + 24);
      ObjectType = swift_getObjectType(*v6, v11);
      swift_unknownObjectRetain(v12);
      v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v8 = v15;
      swift_unknownObjectRelease(v12);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  v16 = swift_allocObject(&unk_10010BA38, 32, 7);
  *(_QWORD *)(v16 + 16) = &unk_10011A368;
  *(_QWORD *)(v16 + 24) = v5;
  if (v8 | v7)
  {
    v20[0] = 0;
    v20[1] = 0;
    v17 = v20;
    v20[2] = v7;
    v20[3] = v8;
  }
  else
  {
    v17 = 0;
  }
  v18 = swift_task_create(v9, v17, (char *)&type metadata for () + 8, &unk_10011A370, v16);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

uint64_t sub_100070790()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000707B4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10011A364);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000101B8;
  return swift_task_switch(sub_10006F7E4, 0, 0);
}

uint64_t sub_10007080C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100070830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10011C294);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000101B8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10011C290 + dword_10011C290))(a1, v4);
}

uint64_t sub_1000708A0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, qword_100124540 + a1 + 16);
}

uint64_t sub_1000708E0()
{
  return 1;
}

uint64_t sub_1000708E8(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_100070AC8(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v2 + qword_100124540) - 8) + 8))(a1);
  return v5;
}

void *sub_100070948(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_100070988(a1, a2);
}

void *sub_100070988(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  uint64_t v13;

  v5 = *(_QWORD *)((swift_isaMask & *v2) + qword_100124540);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *))(v6 + 16))((char *)&v13 - v7);
  v9 = (void *)UIHostingController.init(coder:rootView:)(a1, v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11 = v9;
  v10(a2, v5);
  if (v9)

  return v9;
}

id sub_100070A48(void *a1, uint64_t a2)
{
  void *v2;
  id v4;
  objc_super v6;

  v6.receiver = v2;
  v6.super_class = (Class)swift_getObjectType(v2, a2);
  v4 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);

  return v4;
}

id sub_100070A98(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;

  v3 = a3;
  return sub_100070A48(v3, v4);
}

uint64_t type metadata accessor for SecureHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100018E38(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SecureHostingController);
}

uint64_t sub_100070AC8(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  __chkstk_darwin(a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return UIHostingController.init(rootView:)(v2);
}

uint64_t sub_100070B44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((((uint64_t (*)(void))SHLibrary.isUpdating.getter)() & 1) == 0)
    goto LABEL_27;
  v0 = SHLibrary.items.getter();
  v1 = v0;
  if ((unint64_t)v0 >> 62)
  {
    if (v0 >= 0)
      v0 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = _CocoaArrayWrapper.endIndex.getter(v0);
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = swift_bridgeObjectRelease(v1);
  if (v2)
  {
LABEL_27:
    if ((((uint64_t (*)(void))SHLibrary.isUpdating.getter)() & 1) != 0)
      return 2;
    v4 = SHLibrary.items.getter();
    v5 = v4;
    if ((unint64_t)v4 >> 62)
    {
      if (v4 >= 0)
        v4 &= 0xFFFFFFFFFFFFFF8uLL;
      v6 = _CocoaArrayWrapper.endIndex.getter(v4);
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v3 = swift_bridgeObjectRelease(v5);
    if (v6)
      return 2;
  }
  if ((SHLibrary.isUpdating.getter(v3) & 1) != 0)
  {
    v8 = SHLibrary.items.getter();
    v9 = v8;
    if ((unint64_t)v8 >> 62)
    {
      if (v8 >= 0)
        v8 &= 0xFFFFFFFFFFFFFF8uLL;
      v10 = _CocoaArrayWrapper.endIndex.getter(v8);
    }
    else
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v9);
    if (!v10)
      return 1;
  }
  return 0;
}

uint64_t sub_100070C48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_100070C60, 0, 0);
}

uint64_t sub_100070C60()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = (void *)v0[3];
  v2 = sub_100004F7C(&qword_100116D90);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000D3AA0;
  *(_QWORD *)(v3 + 32) = v1;
  v8 = v3;
  specialized Array._endMutation()(v3);
  v0[5] = v8;
  v4 = async function pointer to SHLibrary.removeItems(_:)[1];
  v5 = v1;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[6] = v6;
  *v6 = v0;
  v6[1] = sub_100070D0C;
  return SHLibrary.removeItems(_:)(v8);
}

uint64_t sub_100070D0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100070D80, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100070D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for Logger(0);
  sub_10000B5E8(v2, (uint64_t)qword_100124478);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to remove item %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100070F54()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_100070F6C, 0, 0);
}

uint64_t sub_100070F6C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to SHLibrary.reload()[1]);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_100070FBC;
  return SHLibrary.reload()();
}

uint64_t sub_100070FBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100071028, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100071028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10000B5E8(v2, (uint64_t)qword_100124478);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to reload library %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000711F4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC16MusicRecognition19HistoryListProvider___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10007124C()
{
  return type metadata accessor for HistoryListProvider(0);
}

uint64_t type metadata accessor for HistoryListProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10011A428;
  if (!qword_10011A428)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HistoryListProvider);
  return result;
}

uint64_t sub_100071290(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10007130C()
{
  return SHLibrary.items.getter();
}

uint64_t sub_100071330()
{
  return sub_100070B44();
}

uint64_t sub_100071350()
{
  return SHLibrary.isEncrypted.getter() & 1;
}

uint64_t sub_100071378(uint64_t a1)
{
  return SHLibrary.isUpdating.getter(a1) & 1;
}

uint64_t sub_1000713A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_10011A4D4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000101B8;
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch(sub_100070C60, 0, 0);
}

uint64_t sub_100071404()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *v0;
  v3 = (_QWORD *)swift_task_alloc(dword_10011A4CC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100010C20;
  v3[3] = v2;
  return swift_task_switch(sub_100070F6C, 0, 0);
}

uint64_t storeEnumTagSinglePayload for RecognizeMusicError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000714B0 + 4 * byte_1000D5165[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000714E4 + 4 * byte_1000D5160[v4]))();
}

uint64_t sub_1000714E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000714EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000714F4);
  return result;
}

uint64_t sub_100071500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100071508);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10007150C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100071514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecognizeMusicError()
{
  return &type metadata for RecognizeMusicError;
}

uint64_t sub_100071534(char a1)
{
  id v1;
  unint64_t v2;
  const char *v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  if (a1)
  {
    if (a1 != 1)
    {
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v9 = 0xE000000000000000;
      v4 = 0x80000001000DB510;
      v2 = 0xD00000000000002FLL;
      goto LABEL_7;
    }
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v2 = 0xD000000000000035;
    v9 = 0xE000000000000000;
    v3 = "RECOGNIZE_MUSIC_APP_INTENT_MATCH_FAILURE_ERROR_REASON";
  }
  else
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v2 = 0xD000000000000030;
    v9 = 0xE000000000000000;
    v3 = "RECOGNIZE_MUSIC_APP_INTENT_NO_MATCH_ERROR_REASON";
  }
  v4 = (unint64_t)(v3 - 32) | 0x8000000000000000;
LABEL_7:
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100071670(char a1)
{
  id v1;
  unint64_t v2;
  const char *v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  if (a1)
  {
    if (a1 != 1)
    {
      v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v9 = 0xE000000000000000;
      v4 = 0x80000001000DB5C0;
      v2 = 0xD000000000000034;
      goto LABEL_7;
    }
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v2 = 0xD00000000000003ALL;
    v9 = 0xE000000000000000;
    v3 = "RECOGNIZE_MUSIC_APP_INTENT_MATCH_FAILURE_ERROR_DESCRIPTION";
  }
  else
  {
    v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v2 = 0xD000000000000035;
    v9 = 0xE000000000000000;
    v3 = "RECOGNIZE_MUSIC_APP_INTENT_NO_MATCH_ERROR_DESCRIPTION";
  }
  v4 = (unint64_t)(v3 - 32) | 0x8000000000000000;
LABEL_7:
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = 0;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, (Swift::String_optional)0, (NSBundle)v1, v5, *(Swift::String *)(&v9 - 1))._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1000717AC()
{
  char *v0;

  return sub_100071670(*v0);
}

uint64_t sub_1000717B4()
{
  char *v0;

  return sub_100071534(*v0);
}

unint64_t sub_1000717C4()
{
  return 0xD000000000000019;
}

uint64_t sub_1000717E0()
{
  char *v0;

  return qword_1000D52B8[*v0];
}

unint64_t sub_1000717FC()
{
  unint64_t result;

  result = qword_10011A4D8;
  if (!qword_10011A4D8)
  {
    result = swift_getWitnessTable(&unk_1000D524C, &type metadata for RecognizeMusicError);
    atomic_store(result, (unint64_t *)&qword_10011A4D8);
  }
  return result;
}

uint64_t sub_100071840(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100071894();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100071868(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100071894();
  return Error<>._code.getter(a1, v2);
}

unint64_t sub_100071894()
{
  unint64_t result;

  result = qword_10011A4E0;
  if (!qword_10011A4E0)
  {
    result = swift_getWitnessTable(&unk_1000D5184, &type metadata for RecognizeMusicError);
    atomic_store(result, (unint64_t *)&qword_10011A4E0);
  }
  return result;
}

uint64_t destroy for HistoryListGroup(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s16MusicRecognition16HistoryListGroupVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for HistoryListGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for HistoryListGroup(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistoryListGroup(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryListGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryListGroup()
{
  return &type metadata for HistoryListGroup;
}

uint64_t destroy for TrackPageCampaignHandler(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

_QWORD *initializeWithCopy for TrackPageCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for TrackPageCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for TrackPageCampaignHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackPageCampaignHandler(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackPageCampaignHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrackPageCampaignHandler()
{
  return &type metadata for TrackPageCampaignHandler;
}

void sub_100071CFC()
{
  qword_10011A4E8 = 0x6763737469;
  unk_10011A4F0 = 0xE500000000000000;
}

void sub_100071D1C()
{
  qword_10011A4F8 = 0x7463737469;
  unk_10011A500 = 0xE500000000000000;
}

void sub_100071D3C()
{
  qword_10011A508 = 0x65766974616E5FLL;
  unk_10011A510 = 0xE700000000000000;
}

void sub_100071D60()
{
  qword_10011A518 = 29795;
  unk_10011A520 = 0xE200000000000000;
}

void sub_100071D78()
{
  qword_10011A528 = 29808;
  unk_10011A530 = 0xE200000000000000;
}

void sub_100071D90()
{
  qword_10011A538 = 0x3534333939343832;
  unk_10011A540 = 0xE900000000000039;
}

uint64_t sub_100071DB8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  v0 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  sub_10000C484(v3, qword_10011A548);
  v4 = sub_10000B5E8(v3, (uint64_t)qword_10011A548);
  v7 = 0;
  v8 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease(v8);
  if (qword_100116028 != -1)
    swift_once(&qword_100116028, sub_100071D90);
  URL.init(string:)(0xD000000000000025, 0x80000001000DB770);
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_100071EE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;

  v3 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v3);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_10011A570);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URLComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100116030 != -1)
    swift_once(&qword_100116030, sub_100071DB8);
  v13 = type metadata accessor for URL(0);
  v14 = sub_10000B5E8(v13, (uint64_t)qword_10011A548);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v14, 0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000526C((uint64_t)v8, &qword_10011A570);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, v14, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    sub_10005D0FC(v1 + 16, (uint64_t)v30);
    sub_10005D0FC((uint64_t)v30, (uint64_t)&v31);
    v16 = v32;
    v29 = a1;
    if (v32 && *(_QWORD *)(v1 + 40))
    {
      v28 = *(_QWORD *)(v1 + 40);
      v17 = *(_QWORD *)(v1 + 32);
      v26 = v31;
      v27 = v17;
      v18 = sub_100004F7C(&qword_10011A560);
      v19 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
      v20 = *(_QWORD *)(v19 + 72);
      v21 = *(unsigned __int8 *)(v19 + 80);
      v25[1] = v20;
      v22 = (_QWORD *)swift_allocObject(v18, ((v21 + 32) & ~v21) + 2 * v20, v21 | 7);
      *((_OWORD *)v22 + 1) = xmmword_1000D32A0;
      if (qword_100116018 != -1)
        swift_once(&qword_100116018, sub_100071D60);
      URLQueryItem.init(name:value:)(qword_10011A518, unk_10011A520, v26, v16);
      if (qword_100116020 != -1)
        swift_once(&qword_100116020, sub_100071D78);
      URLQueryItem.init(name:value:)(qword_10011A528, unk_10011A530, v27, v28);
    }
    else
    {
      v22 = _swiftEmptyArrayStorage;
    }
    v23 = URLComponents.queryItems.setter(v22);
    URLComponents.url.getter(v23);
    v24 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v5, 1, v13) == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v29, v14, v13);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return sub_10000526C((uint64_t)v5, (uint64_t *)&unk_100118CE0);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v29, v5, v13);
    }
  }
}

uint64_t sub_10007222C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t *v53;
  uint8_t *v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;

  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v73 = a5;
  v74 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a6;
  if (a4)
  {
    v76 = a3;
    v77 = a4;
    v18 = qword_100116010;
    swift_bridgeObjectRetain(a2);
    if (v18 != -1)
      swift_once(&qword_100116010, sub_100071D3C);
    v19 = qword_10011A508;
    v20 = (void *)unk_10011A510;
    swift_bridgeObjectRetain(unk_10011A510);
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(v20);
    v23 = v76;
    v22 = (void *)v77;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v23 = 0;
    v22 = 0;
  }
  v24 = swift_bridgeObjectRetain(v17);
  URLComponents.init()(v24);
  v70 = a2;
  v71 = v23;
  v72 = a1;
  v68 = v15;
  v69 = v14;
  v66 = a7;
  if (!v22)
  {
    v27 = _swiftEmptyArrayStorage;
    v31 = (void *)0xE300000000000000;
    v63 = 7104878;
LABEL_15:
    v30 = v73;
    goto LABEL_16;
  }
  if (!v17)
  {
    v27 = _swiftEmptyArrayStorage;
    v31 = v22;
    v63 = v23;
    goto LABEL_15;
  }
  v25 = sub_100004F7C(&qword_10011A560);
  v26 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v27 = (_QWORD *)swift_allocObject(v25, ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ 2 * *(_QWORD *)(v26 + 72), *(unsigned __int8 *)(v26 + 80) | 7);
  *((_OWORD *)v27 + 1) = xmmword_1000D32A0;
  v28 = qword_100116018;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v17);
  if (v28 != -1)
    swift_once(&qword_100116018, sub_100071D60);
  v29 = v71;
  URLQueryItem.init(name:value:)(qword_10011A518, unk_10011A520, v71, v22);
  a1 = v72;
  if (qword_100116020 != -1)
    swift_once(&qword_100116020, sub_100071D78);
  v30 = v73;
  URLQueryItem.init(name:value:)(qword_10011A528, unk_10011A530, v73, v17);
  swift_bridgeObjectRelease(0);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v22);
  a2 = v70;
  swift_bridgeObjectRelease(v70);
  v31 = v22;
  v63 = v29;
LABEL_16:
  v32 = URLComponents.queryItems.setter(v27);
  v33 = URLComponents.percentEncodedQuery.getter(v32);
  v64 = v34;
  v65 = v33;
  v76 = 0;
  v77 = 0xE000000000000000;
  swift_bridgeObjectRetain(v34);
  _StringGuts.grow(_:)(76);
  v35._countAndFlagsBits = 0xD00000000000001DLL;
  v35._object = (void *)0x80000001000DB6A0;
  String.append(_:)(v35);
  if (a2)
    v36 = a1;
  else
    v36 = 7104878;
  if (a2)
    v37 = a2;
  else
    v37 = (void *)0xE300000000000000;
  swift_bridgeObjectRetain(a2);
  v38._countAndFlagsBits = v36;
  v38._object = v37;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v37);
  v39._object = (void *)0x80000001000DB6C0;
  v39._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v39);
  v67 = (uint64_t)v22;
  swift_bridgeObjectRetain(v22);
  v40._countAndFlagsBits = v63;
  v40._object = v31;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v31);
  v41._countAndFlagsBits = 0xD000000000000015;
  v41._object = (void *)0x80000001000DB6E0;
  String.append(_:)(v41);
  if (v17)
    v42 = v30;
  else
    v42 = 7104878;
  if (v17)
    v43 = v17;
  else
    v43 = (void *)0xE300000000000000;
  swift_bridgeObjectRetain(v17);
  v44._countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45 = v76;
  v46 = v77;
  v47 = v30;
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v48 = type metadata accessor for Logger(0);
  sub_10000B5E8(v48, (uint64_t)qword_100124478);
  v49 = swift_bridgeObjectRetain(v46);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter();
  v52 = os_log_type_enabled(v50, v51);
  v53 = v66;
  if (v52)
  {
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v76 = v55;
    *(_DWORD *)v54 = 136315138;
    swift_bridgeObjectRetain(v46);
    v75 = sub_1000529F4(v45, v46, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease_n(v46, 3);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    v56 = v54;
    v47 = v73;
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v46, 2);
  }

  (*(void (**)(char *, uint64_t))(v68 + 8))(v74, v69);
  v57 = (uint64_t)v70;
  v58 = v71;
  swift_bridgeObjectRetain(v70);
  v59 = v64;
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v17);
  result = swift_bridgeObjectRelease_n(v57, 2);
  *v53 = v72;
  v53[1] = v57;
  v61 = v67;
  v53[2] = v58;
  v53[3] = v61;
  v53[4] = v47;
  v53[5] = (uint64_t)v17;
  v53[6] = v65;
  v53[7] = v59;
  return result;
}

uint64_t sub_1000727A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[42] = a3;
  v4[43] = a4;
  v4[40] = a1;
  v4[41] = a2;
  return swift_task_switch(sub_1000727C0, 0, 0);
}

uint64_t sub_1000727C0()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[43];
  v0[15] = v0 + 39;
  v0[10] = v0;
  v0[11] = sub_100072860;
  v0[38] = swift_continuation_init(v0 + 10, 1);
  v0[34] = _NSConcreteStackBlock;
  v0[35] = 0x40000000;
  v0[36] = sub_100072228;
  v0[37] = &unk_10010BDF8;
  objc_msgSend(v1, "defaultValuesWithCompletion:", v0 + 34);
  return swift_continuation_await(v0 + 10);
}

uint64_t sub_100072860()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  *(_QWORD *)(*v0 + 352) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 336));
    v3 = sub_100072C4C;
  }
  else
  {
    v3 = sub_1000728C8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000728C8()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[43];
  v0[45] = v0[39];
  v0[23] = v0 + 39;
  v0[18] = v0;
  v0[19] = sub_100072970;
  v0[38] = swift_continuation_init(v0 + 18, 1);
  v0[34] = _NSConcreteStackBlock;
  v0[35] = 0x40000000;
  v0[36] = sub_100072228;
  v0[37] = &unk_10010BE10;
  objc_msgSend(v1, "campaignTokenWithCompletion:", v0 + 34);
  return swift_continuation_await(v0 + 18);
}

uint64_t sub_100072970()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  *(_QWORD *)(*v0 + 368) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 336));
    v3 = sub_100072E3C;
  }
  else
  {
    v3 = sub_1000729D8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000729D8()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[43];
  v0[47] = v0[39];
  v0[7] = v0 + 39;
  v0[2] = v0;
  v0[3] = sub_100072A80;
  v0[38] = swift_continuation_init(v0 + 2, 1);
  v0[34] = _NSConcreteStackBlock;
  v0[35] = 0x40000000;
  v0[36] = sub_100072228;
  v0[37] = &unk_10010BE28;
  objc_msgSend(v1, "defaultValuesWithCompletion:", v0 + 34);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100072A80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 384) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 336));
    v3 = sub_100073030;
  }
  else
  {
    swift_bridgeObjectRelease_n(0, 4);
    v3 = sub_100072AF4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100072AF4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  NSString v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v23;

  v1 = *(void **)(v0 + 376);
  v2 = *(void **)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v23 = *(void **)(v0 + 344);
  v4 = *(void **)(v0 + 312);
  v5 = objc_msgSend(v4, "providerToken");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = objc_msgSend(v2, "campaignGroup");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v14 = objc_msgSend(v1, "tokenForClientIdentifier:", v13);

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  sub_10007222C(v10, v12, v15, v17, v6, v8, (uint64_t *)(v0 + 208));
  v18 = *(_OWORD **)(v0 + 320);
  v19 = *(_OWORD *)(v0 + 224);
  v20 = *(_OWORD *)(v0 + 240);
  v21 = *(_OWORD *)(v0 + 256);
  *v18 = *(_OWORD *)(v0 + 208);
  v18[1] = v19;
  v18[2] = v20;
  v18[3] = v21;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100072C4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  void *v15;

  swift_willThrow(a1);
  v2 = *(_QWORD *)(v1 + 352);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v3 = type metadata accessor for Logger(0);
  sub_10000B5E8(v3, (uint64_t)qword_100124478);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v1 + 344);
  if (v7)
  {
    v15 = *(void **)(v1 + 344);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v2);
    v11 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v1 + 272) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 272, v1 + 280, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error fetching campaign token & group with error %@", v9, 0xCu);
    v12 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v13 = *(_OWORD **)(v1 + 320);
  v13[2] = 0u;
  v13[3] = 0u;
  *v13 = 0u;
  v13[1] = 0u;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100072E3C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void *v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  void *v16;

  v2 = *(void **)(v1 + 360);
  swift_willThrow(a1);

  v3 = *(_QWORD *)(v1 + 368);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v4 = type metadata accessor for Logger(0);
  sub_10000B5E8(v4, (uint64_t)qword_100124478);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(void **)(v1 + 344);
  if (v8)
  {
    v16 = *(void **)(v1 + 344);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v3);
    v12 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v1 + 272) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 272, v1 + 280, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error fetching campaign token & group with error %@", v10, 0xCu);
    v13 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v14 = *(_OWORD **)(v1 + 320);
  v14[2] = 0u;
  v14[3] = 0u;
  *v14 = 0u;
  v14[1] = 0u;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100073030(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void *v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  void *v17;

  v2 = *(void **)(v1 + 376);
  v3 = *(void **)(v1 + 360);
  swift_willThrow(a1);

  v4 = *(_QWORD *)(v1 + 384);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v5 = type metadata accessor for Logger(0);
  sub_10000B5E8(v5, (uint64_t)qword_100124478);
  swift_errorRetain(v4);
  v6 = swift_errorRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(void **)(v1 + 344);
  if (v9)
  {
    v17 = *(void **)(v1 + 344);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v4);
    v13 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v1 + 272) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 272, v1 + 280, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error fetching campaign token & group with error %@", v11, 0xCu);
    v14 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v15 = *(_OWORD **)(v1 + 320);
  v15[2] = 0u;
  v15[3] = 0u;
  *v15 = 0u;
  v15[1] = 0u;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100073288(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  Class isa;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  objc_super v55;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v5 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55.receiver = v3;
  v55.super_class = ObjectType;
  objc_msgSendSuper2(&v55, "viewDidLoad");
  v8 = objc_msgSend(v3, "view");
  if (!v8)
  {
    __break(1u);
    goto LABEL_10;
  }
  v9 = v8;
  v10 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  objc_msgSend(v9, "setBackgroundColor:", v10);

  v11 = objc_msgSend(v3, "view");
  if (!v11)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v12 = v11;
  objc_msgSend(v11, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v13 = *(void **)&v3[OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_matchingFlowView];
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = objc_msgSend(v3, "view");
  if (!v14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v15 = v14;
  v53 = v7;
  objc_msgSend(v14, "addSubview:", v13);

  v16 = sub_100004F7C(&qword_100116D90);
  v17 = swift_allocObject(v16, 64, 7);
  *(_OWORD *)(v17 + 16) = xmmword_1000D1CE0;
  v18 = objc_msgSend(v13, "topAnchor");
  v19 = objc_msgSend(v3, "view");
  if (!v19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v20 = v19;
  v21 = objc_msgSend(v19, "layoutMarginsGuide");

  v22 = objc_msgSend(v21, "topAnchor");
  v23 = objc_msgSend(v18, "constraintEqualToAnchor:", v22);

  *(_QWORD *)(v17 + 32) = v23;
  v24 = objc_msgSend(v13, "bottomAnchor");
  v25 = objc_msgSend(v3, "view");
  if (!v25)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "layoutMarginsGuide");

  v28 = objc_msgSend(v27, "bottomAnchor");
  v29 = objc_msgSend(v24, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v17 + 40) = v29;
  v30 = objc_msgSend(v13, "leadingAnchor");
  v31 = objc_msgSend(v3, "view");
  if (!v31)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v32 = v31;
  v33 = objc_msgSend(v31, "layoutMarginsGuide");

  v34 = objc_msgSend(v33, "leadingAnchor");
  v35 = objc_msgSend(v30, "constraintEqualToAnchor:", v34);

  *(_QWORD *)(v17 + 48) = v35;
  v36 = objc_msgSend(v13, "trailingAnchor");
  v37 = objc_msgSend(v3, "view");
  if (v37)
  {
    v38 = v37;
    v39 = (void *)objc_opt_self(NSLayoutConstraint);
    v40 = objc_msgSend(v38, "layoutMarginsGuide");

    v41 = objc_msgSend(v40, "trailingAnchor");
    v42 = objc_msgSend(v36, "constraintEqualToAnchor:", v41);

    *(_QWORD *)(v17 + 56) = v42;
    v54 = v17;
    specialized Array._endMutation()(v43);
    v44 = v54;
    sub_100010498(0, (unint64_t *)&qword_1001177E0, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v44);
    objc_msgSend(v39, "activateConstraints:", isa);

    v46 = type metadata accessor for TaskPriority(0);
    v47 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v53, 1, 1, v46);
    v48 = swift_allocObject(&unk_10010BE50, 24, 7);
    swift_unknownObjectWeakInit(v48 + 16, v3);
    type metadata accessor for MainActor(0);
    swift_retain(v48);
    v50 = static MainActor.shared.getter(v49);
    v51 = (_QWORD *)swift_allocObject(&unk_10010BE78, 40, 7);
    v51[2] = v50;
    v51[3] = &protocol witness table for MainActor;
    v51[4] = v48;
    swift_release(v48);
    v52 = sub_1000AA064(v47, (uint64_t)&unk_10011A5B8, (uint64_t)v51);
    swift_release(v52);
    return;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_1000737F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[12] = a1;
  v4[13] = a4;
  v5 = sub_100004F7C(&qword_100118B70);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100116DC8);
  v4[15] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[16] = v7;
  v4[17] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004F7C(&qword_10011A5C0);
  v4[18] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[19] = v9;
  v4[20] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v4[21] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000738D8, v11, v12);
}

uint64_t sub_1000738D8()
{
  uint64_t v0;
  uint64_t v1;
  char *Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 168));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    if (qword_100115EE0 != -1)
      swift_once(&qword_100115EE0, sub_100045C0C);
    v3 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 144);
    v26 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 104) + 16;
    swift_beginAccess(qword_100124510 + OBJC_IVAR____TtC16MusicRecognition15MusicRecognizer__result, v0 + 40, 33, 0);
    v9 = sub_100004F7C(&qword_100116DD8);
    Published.projectedValue.getter(v9);
    swift_endAccess(v0 + 40);
    v10 = sub_100010498(0, (unint64_t *)&qword_100118B88, OS_dispatch_queue_ptr);
    *(_QWORD *)(v0 + 88) = static OS_dispatch_queue.main.getter();
    v11 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
    v12 = sub_10000522C(&qword_100116DE8, &qword_100116DC8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v13 = sub_100048EE8();
    Publisher.receive<A>(on:options:)(v0 + 88, v7, v6, v10, v12, v13);
    sub_100073F34(v7);

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v14 = swift_allocObject(&unk_10010BE50, 24, 7);
    swift_beginAccess(v8, v0 + 64, 0, 0);
    v15 = (void *)swift_unknownObjectWeakLoadStrong(v8);
    swift_unknownObjectWeakInit(v14 + 16, v15);

    v16 = sub_10000522C(&qword_10011A5C8, &qword_10011A5C0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v17 = Publisher<>.sink(receiveValue:)(sub_100073F74, v14, v25, v16);
    v18 = swift_release(v14);
    (*(void (**)(uint64_t, uint64_t, __n128))(v26 + 8))(v3, v25, v18);
    v19 = *(_QWORD *)&Strong[OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_musicRecognitionCancellable];
    *(_QWORD *)&Strong[OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_musicRecognitionCancellable] = v17;

    swift_release(v19);
  }
  v20 = Strong == 0;
  v21 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 136);
  v23 = *(_QWORD *)(v0 + 112);
  **(_BYTE **)(v0 + 96) = v20;
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100073B90(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  id v8;
  _BYTE v9[24];

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = objc_retain(*(id *)(Strong
                           + OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_matchingFlowView));
    sub_1000A4E5C(v2, v3, v4);

  }
}

id sub_100073C28(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  NSString v11;
  id v12;
  objc_super v14;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  *(_QWORD *)&v4[OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_musicRecognitionCancellable] = 0;
  v8 = OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_matchingFlowView;
  v9 = objc_allocWithZone((Class)type metadata accessor for AmbientCompactMatchingFlowView());
  v10 = v4;
  *(_QWORD *)&v4[v8] = objc_msgSend(v9, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  if (a2)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v11 = 0;
  }
  v14.receiver = v10;
  v14.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v14, "initWithNibName:bundle:", v11, a3);

  return v12;
}

id sub_100073D7C(void *a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  *(_QWORD *)&v2[OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_musicRecognitionCancellable] = 0;
  v5 = OBJC_IVAR____TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController_matchingFlowView;
  v6 = objc_allocWithZone((Class)type metadata accessor for AmbientCompactMatchingFlowView());
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v10.receiver = v7;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);

  return v8;
}

uint64_t type metadata accessor for MusicRecognitionAmbientCompactViewController()
{
  return objc_opt_self(_TtC16MusicRecognition44MusicRecognitionAmbientCompactViewController);
}

uint64_t sub_100073E78()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100073E9C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100073EC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10011A5B4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000101B8;
  return sub_1000737F0(a1, v4, v5, v6);
}

uint64_t sub_100073F34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004F7C(&qword_100118B70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100073F74(uint64_t a1)
{
  uint64_t v1;

  sub_100073B90(a1, v1);
}

void sub_100073F7C()
{
  qword_10011A5D0 = 0x6C7070612E6D6F63;
  *(_QWORD *)algn_10011A5D8 = 0xEF636973754D2E65;
}

uint64_t sub_100073FAC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch(sub_100073FC4, 0, 0);
}

uint64_t sub_100073FC4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0 + 2;
  v2 = v0[15];
  v3 = objc_msgSend((id)objc_opt_self(APGuard), "sharedGuard");
  v0[16] = v3;
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_10007408C;
  v4 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_100018804;
  v5[3] = &unk_10010BE90;
  v5[4] = v4;
  objc_msgSend(v3, "authenticateForSubject:completion:", v2, v5);
  return swift_continuation_await(v1);
}

uint64_t sub_10007408C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_100074128;
  else
    v2 = sub_1000740EC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000740EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 144);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100074128(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 128);
  swift_willThrow(a1);

  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_10007416C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  uint64_t *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  Swift::String v23;

  *a2 = 0x3534333939343832;
  a2[1] = 0xE900000000000039;
  a2[2] = 0xD000000000000024;
  a2[3] = 0x80000001000DB7F0;
  v4 = (int *)type metadata accessor for ShazamUpsellViewModel(0);
  URL.init(string:)(0xD000000000000028, 0x80000001000DB820);
  v5 = (_QWORD *)((char *)a2 + v4[7]);
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v23._object = (void *)0xE000000000000000;
  v7._object = (void *)0x80000001000DB850;
  v7._countAndFlagsBits = 0xD000000000000013;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v23)._object;

  v10 = sub_10000B110();
  v11 = StringProtocol.localizedUppercase.getter(&type metadata for String, v10);
  v13 = v12;
  swift_bridgeObjectRelease(object);
  *v5 = v11;
  v5[1] = v13;
  v14 = (char *)a2 + v4[8];
  *(_QWORD *)v14 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x80000001000DB870);
  *((_QWORD *)v14 + 1) = v15;
  v14[16] = v16 & 1;
  *((_QWORD *)v14 + 3) = v17;
  v18 = (char *)a2 + v4[9];
  *(_QWORD *)v18 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x80000001000DB890);
  *((_QWORD *)v18 + 1) = v19;
  v18[16] = v20 & 1;
  *((_QWORD *)v18 + 3) = v21;
  return sub_100007EE4(a1, (uint64_t)a2 + v4[10]);
}

uint64_t type metadata accessor for ShazamUpsellViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10011A640;
  if (!qword_10011A640)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShazamUpsellViewModel);
  return result;
}

uint64_t *sub_100074364(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v15 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v17 = a3[7];
    v18 = a3[8];
    v19 = (uint64_t *)((char *)v4 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (char *)v4 + v18;
    v23 = (char *)a2 + v18;
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v22[16] = v23[16];
    v25 = *((_QWORD *)v23 + 3);
    *((_QWORD *)v22 + 3) = v25;
    v26 = a3[9];
    v27 = a3[10];
    v28 = (char *)v4 + v26;
    v29 = (char *)a2 + v26;
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v28[16] = v29[16];
    v31 = *((_QWORD *)v29 + 3);
    v32 = (char *)v4 + v27;
    v33 = (char *)a2 + v27;
    *((_QWORD *)v28 + 3) = v31;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    if (v14(v33, 1, v12))
    {
      v34 = sub_100004F7C((uint64_t *)&unk_100118CE0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v32, 0, 1, v12);
    }
  }
  return v4;
}

uint64_t sub_100074564(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v8 = a1 + a2[8];
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
  v9 = a1 + a2[9];
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  v10 = a1 + a2[10];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v10, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  return result;
}

_QWORD *sub_100074660(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v14 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v15);
  v18 = (_QWORD *)((char *)a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (char *)a1 + v16;
  v21 = (char *)a2 + v16;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v20[16] = v21[16];
  v23 = *((_QWORD *)v21 + 3);
  *((_QWORD *)v20 + 3) = v23;
  v24 = a3[9];
  v25 = a3[10];
  v26 = (char *)a1 + v24;
  v27 = (char *)a2 + v24;
  v28 = *((_QWORD *)v27 + 1);
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *((_QWORD *)v26 + 1) = v28;
  v26[16] = v27[16];
  v29 = *((_QWORD *)v27 + 3);
  v30 = (char *)a1 + v25;
  v31 = (char *)a2 + v25;
  *((_QWORD *)v26 + 3) = v29;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  if (v13(v31, 1, v11))
  {
    v32 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v30, v31, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v11);
  }
  return a1;
}

char *sub_100074834(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;

  *(_QWORD *)a1 = *a2;
  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_QWORD *)a1 + 2) = a2[2];
  v8 = a2[3];
  v9 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = (_QWORD *)((char *)a2 + v19);
  *(_QWORD *)v20 = *v21;
  v22 = v21[1];
  v23 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[8];
  v25 = &a1[v24];
  v26 = (char *)a2 + v24;
  *(_QWORD *)v25 = *(_QWORD *)((char *)a2 + v24);
  v27 = *(_QWORD *)((char *)a2 + v24 + 8);
  v28 = *(_QWORD *)&a1[v24 + 8];
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v25[16] = v26[16];
  v29 = *((_QWORD *)v26 + 3);
  v30 = *((_QWORD *)v25 + 3);
  *((_QWORD *)v25 + 3) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[9];
  v32 = &a1[v31];
  v33 = (char *)a2 + v31;
  *(_QWORD *)v32 = *(_QWORD *)((char *)a2 + v31);
  v34 = *(_QWORD *)((char *)a2 + v31 + 8);
  v35 = *(_QWORD *)&a1[v31 + 8];
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v32[16] = v33[16];
  v36 = *((_QWORD *)v33 + 3);
  v37 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = a3[10];
  v39 = &a1[v38];
  v40 = (char *)a2 + v38;
  LODWORD(v37) = v15(&a1[v38], 1, v13);
  v41 = v15(v40, 1, v13);
  if (!(_DWORD)v37)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v39, v40, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v39, v13);
    goto LABEL_12;
  }
  if (v41)
  {
LABEL_12:
    v42 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v39, v40, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v39, 0, 1, v13);
  return a1;
}

_OWORD *sub_100074AFC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v15 = (_OWORD *)((char *)a1 + v14);
  v16 = (_OWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = a3[9];
  v19 = a3[10];
  v20 = (_OWORD *)((char *)a1 + v18);
  v21 = (_OWORD *)((char *)a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = (char *)a1 + v19;
  v24 = (char *)a2 + v19;
  if (v12(v24, 1, v10))
  {
    v25 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v23, v24, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v23, 0, 1, v10);
  }
  return a1;
}

char *sub_100074C64(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;

  v6 = a2[1];
  v7 = *((_QWORD *)a1 + 1);
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 2) = a2[2];
  *((_QWORD *)a1 + 3) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = (_QWORD *)((char *)a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = (char *)a2 + v25;
  v28 = *(_QWORD *)((char *)a2 + v25 + 8);
  v29 = *(_QWORD *)&a1[v25 + 8];
  *(_QWORD *)v26 = *(_QWORD *)((char *)a2 + v25);
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease(v29);
  v26[16] = v27[16];
  v30 = *((_QWORD *)v26 + 3);
  *((_QWORD *)v26 + 3) = *((_QWORD *)v27 + 3);
  swift_bridgeObjectRelease(v30);
  v31 = a3[9];
  v32 = &a1[v31];
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31 + 8);
  v35 = *(_QWORD *)&a1[v31 + 8];
  *(_QWORD *)v32 = *(_QWORD *)((char *)a2 + v31);
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRelease(v35);
  v32[16] = v33[16];
  v36 = *((_QWORD *)v32 + 3);
  *((_QWORD *)v32 + 3) = *((_QWORD *)v33 + 3);
  swift_bridgeObjectRelease(v36);
  v37 = a3[10];
  v38 = &a1[v37];
  v39 = (char *)a2 + v37;
  LODWORD(v32) = v15(&a1[v37], 1, v13);
  v40 = v15(v39, 1, v13);
  if (!(_DWORD)v32)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v38, v39, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v38, v13);
    goto LABEL_12;
  }
  if (v40)
  {
LABEL_12:
    v41 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v38, v39, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v38, 0, 1, v13);
  return a1;
}

uint64_t sub_100074ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100074ED8);
}

uint64_t sub_100074ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100074F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100074F64);
}

uint64_t sub_100074F64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004F7C((uint64_t *)&unk_100118CE0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

void sub_100074FDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4[0] = &unk_1000D53A8;
  v4[1] = &unk_1000D53A8;
  sub_10000880C(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = &unk_1000D53A8;
    v7 = &unk_1000D53C0;
    v8 = &unk_1000D53C0;
    v9 = v5;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for ContextMenuContent()
{
  return &type metadata for ContextMenuContent;
}

uint64_t sub_100075070(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE788, 1);
}

uint64_t sub_100075080(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  _QWORD v11[4];

  v10[2] = a1;
  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ContextMenuItemSection(0) + 20));
  v2 = v1[1];
  if (v2)
  {
    v3 = *v1;
    v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v11[0] = v3;
  v11[1] = v2;
  v11[2] = 0;
  v11[3] = v4;
  swift_bridgeObjectRetain(v2);
  v5 = sub_100004F7C(&qword_10011A6B8);
  v6 = sub_100004F7C(&qword_10011A6C8);
  v7 = sub_1000773E4();
  v8 = sub_1000322B0(&qword_10011A6C0, &qword_10011A6C8, (void (*)(void))sub_100077440, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
  return Section<>.init(header:content:)(v11, sub_10007779C, v10, v5, v6, v7, v8);
}

uint64_t sub_10007516C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for ContextMenuItemSection(0) + 24));
  swift_bridgeObjectRetain(v8);
  v1 = sub_100004F7C(&qword_10011A788);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100004F7C(&qword_10011A6D8);
  v4 = sub_1000777A4(&qword_10011A790, &qword_10011A788);
  v5 = sub_100077440();
  v6 = sub_100004864(&qword_10011A798, type metadata accessor for ContextMenuItem, (uint64_t)&unk_1000D55B8);
  return ForEach<>.init(_:content:)(&v8, sub_100075254, 0, v1, v2, v3, v4, v5, v6);
}

void sub_100075254(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD v44[9];
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v86 = a1;
  v91 = a2;
  v45 = type metadata accessor for StreamingService(0);
  __chkstk_darwin(v45);
  v48 = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100004F7C(&qword_10011A7A0);
  __chkstk_darwin(v65);
  v67 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100004F7C(&qword_10011A778);
  __chkstk_darwin(v78);
  v68 = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for SyncAction(0);
  v5 = __chkstk_darwin(v72);
  v49 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v50 = (char *)v44 - v7;
  v75 = sub_100004F7C(&qword_10011A7A8);
  __chkstk_darwin(v75);
  v77 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100004F7C(&qword_10011A7B0);
  __chkstk_darwin(v60);
  v63 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100004F7C(&qword_10011A758);
  __chkstk_darwin(v76);
  v64 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100004F7C(&qword_10011A748);
  __chkstk_darwin(v84);
  v79 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for AsyncThrowingAction(0);
  __chkstk_darwin(v61);
  v47 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for _OpenAction(0);
  v13 = __chkstk_darwin(v90);
  v44[6] = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v46 = (char *)v44 - v16;
  v17 = __chkstk_darwin(v15);
  v56 = (char *)v44 - v18;
  __chkstk_darwin(v17);
  v66 = (char *)v44 - v19;
  v54 = sub_100004F7C(&qword_10011A7B8);
  __chkstk_darwin(v54);
  v59 = (char *)v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100004F7C(&qword_10011A728);
  __chkstk_darwin(v73);
  v62 = (char *)v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for AsyncAction(0);
  __chkstk_darwin(v57);
  v44[7] = (char *)v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for ShareAction(0);
  __chkstk_darwin(v58);
  v44[8] = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100004F7C(&qword_10011A7C0);
  __chkstk_darwin(v87);
  v89 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100004F7C(&qword_10011A7C8);
  __chkstk_darwin(v81);
  v83 = (char *)v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100004F7C(&qword_10011A7D0);
  __chkstk_darwin(v69);
  v71 = (char *)v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004F7C(&qword_10011A7D8);
  __chkstk_darwin(v52);
  v53 = (char *)v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100004F7C(&qword_10011A708);
  __chkstk_darwin(v70);
  v55 = (char *)v44 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100004F7C(&qword_10011A6F8);
  __chkstk_darwin(v82);
  v74 = (char *)v44 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004F7C(&qword_10011A6E8);
  __chkstk_darwin(v88);
  v85 = (char *)v44 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Locale(0);
  __chkstk_darwin(v31);
  v80 = (char *)v44 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v33);
  v51 = type metadata accessor for OpenAction(0);
  v34 = __chkstk_darwin(v51);
  __chkstk_darwin(v34);
  v44[5] = (char *)v44 - v35;
  v36 = type metadata accessor for URL(0);
  v37 = __chkstk_darwin(v36);
  v38 = __chkstk_darwin(v37);
  __chkstk_darwin(v38);
  v39 = _s6ActionOMa(0);
  __chkstk_darwin(v39);
  v41 = (char *)v44 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for ContextMenuItem(0);
  sub_10000B340(v86 + *(int *)(v42 + 20), (uint64_t)v41, _s6ActionOMa);
  v43 = (char *)sub_100075A68 + 4 * word_1000D53E0[swift_getEnumCaseMultiPayload(v41, v39)];
  __asm { BR              X10 }
}

uint64_t sub_100075A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v8 = (uint64_t *)(v4 + *(int *)(sub_100004F7C(&qword_10011A7E0) + 48));
  v10 = *v8;
  v9 = v8[1];
  *(_QWORD *)(v7 - 144) = v10;
  *(_QWORD *)(v7 - 200) = v9;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v7 - 512) = v5;
  *(_QWORD *)(v7 - 520) = v3;
  v11(v3, v4, v0);
  v12 = ((uint64_t (*)(unint64_t, unint64_t))String.LocalizationValue.init(stringLiteral:))(0xD000000000000015, 0x80000001000D9130);
  v13 = *(_QWORD *)(v7 - 192);
  ((void (*)(uint64_t))static Locale.current.getter)(v12);
  v14 = ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))String.init(localized:table:bundle:locale:comment:))(v2, 0, 0, 0, v13, 0, 0, 256);
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v0);
  *v6 = swift_getKeyPath(&unk_1000D5468, v17);
  v18 = sub_100004F7C(&qword_1001166A0);
  swift_storeEnumTagMultiPayload(v6, v18, 0);
  v19 = *(int **)(v7 - 424);
  v20 = (_QWORD *)((char *)v6 + v19[5]);
  *v20 = v14;
  v20[1] = v16;
  v21 = (_QWORD *)((char *)v6 + v19[6]);
  *v21 = 0xD000000000000010;
  v21[1] = 0x80000001000D8DA0;
  v11((uint64_t)v6 + v19[7], v1, v0);
  v22 = (_QWORD *)((char *)v6 + v19[8]);
  v23 = *(_QWORD *)(v7 - 200);
  *v22 = *(_QWORD *)(v7 - 144);
  v22[1] = v23;
  v24 = (uint64_t)v6;
  v25 = *(_QWORD *)(v7 - 504);
  sub_10000B4D4(v24, v25, type metadata accessor for OpenAction);
  v26 = *(_QWORD *)(v7 - 408);
  sub_10000B340(v25, v26, type metadata accessor for OpenAction);
  swift_storeEnumTagMultiPayload(v26, *(_QWORD *)(v7 - 416), 0);
  v27 = sub_100004864(&qword_10011A710, type metadata accessor for OpenAction, (uint64_t)&unk_1000D8624);
  v28 = sub_100004864(&qword_10011A718, type metadata accessor for ShareAction, (uint64_t)&unk_1000D85D4);
  swift_retain(v23);
  v29 = *(_QWORD *)(v7 - 392);
  _ConditionalContent<>.init(storage:)(v26, v19, *(_QWORD *)(v7 - 368), v27, v28);
  v30 = *(_QWORD *)(v7 - 264);
  sub_100007C8C(v29, v30, &qword_10011A708);
  swift_storeEnumTagMultiPayload(v30, *(_QWORD *)(v7 - 280), 0);
  v31 = sub_100077508();
  v32 = sub_1000775A4();
  v33 = *(_QWORD *)(v7 - 240);
  _ConditionalContent<>.init(storage:)(v30, *(_QWORD *)(v7 - 272), *(_QWORD *)(v7 - 248), v31, v32);
  sub_10000526C(v29, &qword_10011A708);
  v34 = *(_QWORD *)(v7 - 168);
  sub_100007C8C(v33, v34, &qword_10011A6F8);
  swift_storeEnumTagMultiPayload(v34, *(_QWORD *)(v7 - 184), 0);
  v35 = sub_1000774E4();
  v36 = sub_100077640();
  v37 = *(_QWORD *)(v7 - 152);
  _ConditionalContent<>.init(storage:)(v34, *(_QWORD *)(v7 - 176), *(_QWORD *)(v7 - 160), v35, v36);
  sub_10000526C(v33, &qword_10011A6F8);
  v38 = *(_QWORD *)(v7 - 120);
  sub_100007C8C(v37, v38, &qword_10011A6E8);
  swift_storeEnumTagMultiPayload(v38, *(_QWORD *)(v7 - 136), 0);
  v39 = sub_100043760(&qword_10011A6E0, &qword_10011A6E8, (void (*)(void))sub_1000774E4, (void (*)(void))sub_100077640);
  v40 = sub_100004864(&qword_10011A738, type metadata accessor for _OpenAction, (uint64_t)&unk_1000D8534);
  _ConditionalContent<>.init(storage:)(v38, *(_QWORD *)(v7 - 128), *(_QWORD *)(v7 - 112), v39, v40);
  swift_release(v23);
  sub_10000526C(v37, &qword_10011A6E8);
  sub_10000B600(v25, type metadata accessor for OpenAction);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 512) + 8))(*(_QWORD *)(v7 - 520), v0);
}

uint64_t sub_100077274()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = *v0;
  swift_bridgeObjectRetain(v8);
  v1 = sub_100004F7C(&qword_10011A690);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100004F7C(&qword_10011A698);
  v4 = sub_1000777A4(&qword_10011A6A0, &qword_10011A690);
  v5 = sub_10007734C();
  v6 = sub_100004864(&qword_10011A780, type metadata accessor for ContextMenuItemSection, (uint64_t)&unk_1000D5580);
  return ForEach<>.init(_:content:)(&v8, sub_100075080, 0, v1, v2, v3, v4, v5, v6);
}

unint64_t sub_10007734C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A6A8;
  if (!qword_10011A6A8)
  {
    v1 = sub_1000050C8(&qword_10011A698);
    sub_1000773E4();
    sub_1000322B0(&qword_10011A6C0, &qword_10011A6C8, (void (*)(void))sub_100077440, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A6A8);
  }
  return result;
}

unint64_t sub_1000773E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A6B0;
  if (!qword_10011A6B0)
  {
    v1 = sub_1000050C8(&qword_10011A6B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10011A6B0);
  }
  return result;
}

unint64_t sub_100077440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A6D0;
  if (!qword_10011A6D0)
  {
    v1 = sub_1000050C8(&qword_10011A6D8);
    sub_100043760(&qword_10011A6E0, &qword_10011A6E8, (void (*)(void))sub_1000774E4, (void (*)(void))sub_100077640);
    sub_100004864(&qword_10011A738, type metadata accessor for _OpenAction, (uint64_t)&unk_1000D8534);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A6D0);
  }
  return result;
}

uint64_t sub_1000774E4()
{
  return sub_100043760(&qword_10011A6F0, &qword_10011A6F8, (void (*)(void))sub_100077508, (void (*)(void))sub_1000775A4);
}

unint64_t sub_100077508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A700;
  if (!qword_10011A700)
  {
    v1 = sub_1000050C8(&qword_10011A708);
    sub_100004864(&qword_10011A710, type metadata accessor for OpenAction, (uint64_t)&unk_1000D8624);
    sub_100004864(&qword_10011A718, type metadata accessor for ShareAction, (uint64_t)&unk_1000D85D4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A700);
  }
  return result;
}

unint64_t sub_1000775A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A720;
  if (!qword_10011A720)
  {
    v1 = sub_1000050C8(&qword_10011A728);
    sub_100004864(&qword_10011A730, type metadata accessor for AsyncAction, (uint64_t)&unk_1000D8584);
    sub_100004864(&qword_10011A738, type metadata accessor for _OpenAction, (uint64_t)&unk_1000D8534);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A720);
  }
  return result;
}

uint64_t sub_100077640()
{
  return sub_100043760(&qword_10011A740, &qword_10011A748, (void (*)(void))sub_100077664, (void (*)(void))sub_100077700);
}

unint64_t sub_100077664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A750;
  if (!qword_10011A750)
  {
    v1 = sub_1000050C8(&qword_10011A758);
    sub_100004864(&qword_10011A760, type metadata accessor for AsyncThrowingAction, (uint64_t)&unk_1000D84E4);
    sub_100004864(&qword_10011A768, type metadata accessor for SyncAction, (uint64_t)&unk_1000D8494);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A750);
  }
  return result;
}

unint64_t sub_100077700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011A770;
  if (!qword_10011A770)
  {
    v1 = sub_1000050C8(&qword_10011A778);
    sub_100004864(&qword_10011A768, type metadata accessor for SyncAction, (uint64_t)&unk_1000D8494);
    sub_100004864(&qword_10011A738, type metadata accessor for _OpenAction, (uint64_t)&unk_1000D8534);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011A770);
  }
  return result;
}

uint64_t sub_10007779C()
{
  uint64_t v0;

  return sub_10007516C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000777A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000050C8(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextMenuContentModel()
{
  return &type metadata for ContextMenuContentModel;
}

uint64_t sub_1000777FC()
{
  return sub_1000322B0(&qword_10011A7E8, &qword_10011A7F0, (void (*)(void))sub_100077830, (uint64_t)&protocol conformance descriptor for <A> Group<A>);
}

uint64_t sub_100077830()
{
  return sub_1000322B0(&qword_10011A7F8, &qword_10011A800, (void (*)(void))sub_10007734C, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
}

uint64_t sub_100077854(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (char *)a2 + *(int *)(a3 + 20);
    v9 = _s6ActionOMa(0);
    v10 = (char *)&loc_1000778E8 + 4 * byte_1000D54C0[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }
  v11 = *a2;
  *a1 = *a2;
  v12 = v11 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v11);
  return v12;
}

void sub_100077B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = _s6ActionOMa(0);
  switch(swift_getEnumCaseMultiPayload(v5, v6))
  {
    case 0u:
    case 1u:
      v8 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
      v7 = *(_QWORD *)(v5 + *(int *)(sub_100004F7C(&qword_10011A7E0) + 48) + 8);
      goto LABEL_4;
    case 2u:
    case 4u:
    case 5u:
    case 6u:
      v7 = *(_QWORD *)(v5 + 8);
LABEL_4:
      swift_release(v7);
      break;
    case 3u:
    case 7u:
      v9 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v5, v9);
      break;
    case 8u:
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      v10 = (int *)type metadata accessor for StreamingService(0);
      v11 = v5 + v10[5];
      v12 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + v10[6] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + v10[7] + 8));
      break;
    default:
      return;
  }
}

void sub_100077C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a2 + *(int *)(a3 + 20);
  v8 = _s6ActionOMa(0);
  v9 = (char *)sub_100077D20 + 4 * byte_1000D54D2[swift_getEnumCaseMultiPayload(v7, v8)];
  __asm { BR              X10 }
}

uint64_t sub_100077D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v2, v3, v4);
  v5 = *(int *)(sub_100004F7C(&qword_10011A7E0) + 48);
  v6 = (_QWORD *)(v2 + v5);
  v7 = (_QWORD *)(v3 + v5);
  v8 = v7[1];
  *v6 = *v7;
  v6[1] = v8;
  swift_retain(v8);
  swift_storeEnumTagMultiPayload(v2, v1, 0);
  return v0;
}

uint64_t sub_100077F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = a2 + v7;
    sub_100078238(a1 + v7);
    v9 = _s6ActionOMa(0);
    v10 = (char *)&loc_100077FEC + 4 * byte_1000D54DB[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }
  return a1;
}

uint64_t sub_100078238(uint64_t a1)
{
  uint64_t v2;

  v2 = _s6ActionOMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100078274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = _s6ActionOMa(0);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
      v11 = type metadata accessor for URL(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      v12 = sub_100004F7C(&qword_10011A7E0);
      *(_OWORD *)((char *)v8 + *(int *)(v12 + 48)) = *(_OWORD *)((char *)v9 + *(int *)(v12 + 48));
      v13 = v8;
      v14 = v10;
      v15 = 0;
      goto LABEL_8;
    case 1u:
      v16 = type metadata accessor for URL(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v8, v9, v16);
      v17 = sub_100004F7C(&qword_10011A7E0);
      *(_OWORD *)((char *)v8 + *(int *)(v17 + 48)) = *(_OWORD *)((char *)v9 + *(int *)(v17 + 48));
      v13 = v8;
      v14 = v10;
      v15 = 1;
      goto LABEL_8;
    case 3u:
      v18 = type metadata accessor for URL(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v8, v9, v18);
      v13 = v8;
      v14 = v10;
      v15 = 3;
      goto LABEL_8;
    case 7u:
      v19 = type metadata accessor for URL(0);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v8, v9, v19);
      v13 = v8;
      v14 = v10;
      v15 = 7;
      goto LABEL_8;
    case 8u:
      *v8 = *v9;
      v20 = (int *)type metadata accessor for StreamingService(0);
      v21 = v20[5];
      v22 = (char *)v8 + v21;
      v23 = (char *)v9 + v21;
      v24 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
      *(_OWORD *)((char *)v8 + v20[6]) = *(_OWORD *)((char *)v9 + v20[6]);
      *(_OWORD *)((char *)v8 + v20[7]) = *(_OWORD *)((char *)v9 + v20[7]);
      *((_BYTE *)v8 + v20[8]) = *((_BYTE *)v9 + v20[8]);
      v13 = v8;
      v14 = v10;
      v15 = 8;
LABEL_8:
      swift_storeEnumTagMultiPayload(v13, v14, v15);
      break;
    default:
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_100078498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 20);
    v8 = (_OWORD *)(a1 + v7);
    v9 = (_OWORD *)(a2 + v7);
    sub_100078238(a1 + v7);
    v10 = _s6ActionOMa(0);
    switch(swift_getEnumCaseMultiPayload(v9, v10))
    {
      case 0u:
        v11 = type metadata accessor for URL(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
        v12 = sub_100004F7C(&qword_10011A7E0);
        *(_OWORD *)((char *)v8 + *(int *)(v12 + 48)) = *(_OWORD *)((char *)v9 + *(int *)(v12 + 48));
        v13 = v8;
        v14 = v10;
        v15 = 0;
        goto LABEL_9;
      case 1u:
        v16 = type metadata accessor for URL(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v8, v9, v16);
        v17 = sub_100004F7C(&qword_10011A7E0);
        *(_OWORD *)((char *)v8 + *(int *)(v17 + 48)) = *(_OWORD *)((char *)v9 + *(int *)(v17 + 48));
        v13 = v8;
        v14 = v10;
        v15 = 1;
        goto LABEL_9;
      case 3u:
        v18 = type metadata accessor for URL(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v8, v9, v18);
        v13 = v8;
        v14 = v10;
        v15 = 3;
        goto LABEL_9;
      case 7u:
        v19 = type metadata accessor for URL(0);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v8, v9, v19);
        v13 = v8;
        v14 = v10;
        v15 = 7;
        goto LABEL_9;
      case 8u:
        *v8 = *v9;
        v20 = (int *)type metadata accessor for StreamingService(0);
        v21 = v20[5];
        v22 = (char *)v8 + v21;
        v23 = (char *)v9 + v21;
        v24 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
        *(_OWORD *)((char *)v8 + v20[6]) = *(_OWORD *)((char *)v9 + v20[6]);
        *(_OWORD *)((char *)v8 + v20[7]) = *(_OWORD *)((char *)v9 + v20[7]);
        *((_BYTE *)v8 + v20[8]) = *((_BYTE *)v9 + v20[8]);
        v13 = v8;
        v14 = v10;
        v15 = 8;
LABEL_9:
        swift_storeEnumTagMultiPayload(v13, v14, v15);
        break;
      default:
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000786CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000786D8);
}

uint64_t sub_1000786D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = _s6ActionOMa(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10007874C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078758);
}

uint64_t sub_100078758(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = _s6ActionOMa(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ContextMenuItem(uint64_t a1)
{
  return sub_100078C78(a1, qword_10011A860, (uint64_t)&nominal type descriptor for ContextMenuItem);
}

uint64_t sub_1000787E8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = _s6ActionOMa(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10007886C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v13;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_100078910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100078964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_1000789DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_100078A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100078AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_100078B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100078B64);
}

uint64_t sub_100078B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100078BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078BEC);
}

uint64_t sub_100078BEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ContextMenuItemSection(uint64_t a1)
{
  return sub_100078C78(a1, qword_10011A8F0, (uint64_t)&nominal type descriptor for ContextMenuItemSection);
}

uint64_t sub_100078C78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100078CAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000D5568;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100078D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117E18;
  if (!qword_100117E18)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100117E18);
  }
  return result;
}

uint64_t sub_100078D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

void sub_100078DB4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  NSString v7;
  Swift::String v8;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MusicRecognition13ListeningView_waveformView), "setHidden:", 1);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition13ListeningView_extendedListeningTextChangeTask);
  if (v1)
  {
    swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition13ListeningView_extendedListeningTextChangeTask));
    sub_100004F7C(&qword_1001174D8);
    Task.cancel()();
    swift_release(v1);
  }
  v2 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel);
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8._object = (void *)0xE000000000000000;
  v4._object = (void *)0x80000001000D9A40;
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v8)._object;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v2, "setText:", v7);

}

uint64_t sub_100078EEC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  Swift::String v21;

  v1 = v0;
  v2 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel];
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v21._object = (void *)0xE000000000000000;
  v7._object = (void *)0x80000001000D9A40;
  v7._countAndFlagsBits = 0xD00000000000001ELL;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v21)._object;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v5, "setText:", v10);

  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC16MusicRecognition13ListeningView_waveformView], "setHidden:", 0);
  v11 = OBJC_IVAR____TtC16MusicRecognition13ListeningView_extendedListeningTextChangeTask;
  v12 = *(_QWORD *)&v1[OBJC_IVAR____TtC16MusicRecognition13ListeningView_extendedListeningTextChangeTask];
  if (v12)
  {
    swift_retain(*(_QWORD *)&v1[OBJC_IVAR____TtC16MusicRecognition13ListeningView_extendedListeningTextChangeTask]);
    sub_100004F7C(&qword_1001174D8);
    Task.cancel()();
    swift_release(v12);
  }
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v4, 1, 1, v13);
  type metadata accessor for MainActor(0);
  v14 = v1;
  v15 = static MainActor.shared.getter(v14);
  v16 = (_QWORD *)swift_allocObject(&unk_10010BF68, 40, 7);
  v16[2] = v15;
  v16[3] = &protocol witness table for MainActor;
  v16[4] = v14;
  v17 = sub_1000A5724((uint64_t)v4, (uint64_t)&unk_10011A9C0, (uint64_t)v16);
  v18 = *(_QWORD *)&v1[v11];
  *(_QWORD *)&v1[v11] = v17;
  return swift_release(v18);
}

void sub_1000790F0()
{
  qword_10011A930 = 0x6B72616D78;
  *(_QWORD *)algn_10011A938 = 0xE500000000000000;
}

id sub_100079110()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.262745098, 0.533333333, 0.996078431, 1.0);
  qword_10011A940 = (uint64_t)result;
  return result;
}

id sub_100079160()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0588235294, 0.129411765, 0.250980392, 1.0);
  qword_10011A948 = (uint64_t)result;
  return result;
}

void sub_1000791B4()
{
  qword_10011A950 = 0xC030800000000000;
}

void sub_1000791C8(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  objc_class *ObjectType;
  void *v12;
  char *v13;
  id v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_class *v21;
  _BYTE *v22;
  id v23;
  id v24;
  objc_super v25;
  objc_super v26;

  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v12 = (void *)objc_opt_self(NSBundle);
  v13 = v6;
  v14 = objc_msgSend(v12, "mainBundle");
  v15 = objc_allocWithZone((Class)BSUICAPackageView);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "initWithPackageName:inBundle:", v16, v14);

  if (v17)
  {
    *(_QWORD *)&v13[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningView] = v17;
    v18 = OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel;
    *(_QWORD *)&v13[v18] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v19 = OBJC_IVAR____TtC16MusicRecognition13ListeningView_cancelButton;
    *(_QWORD *)&v13[v19] = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v20 = OBJC_IVAR____TtC16MusicRecognition13ListeningView_waveformView;
    v21 = (objc_class *)type metadata accessor for SpectralOutputWaveformView();
    v22 = objc_allocWithZone(v21);
    *(_QWORD *)&v22[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews] = _swiftEmptyArrayStorage;
    *(_QWORD *)&v22[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData] = _swiftEmptyArrayStorage;
    v22[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_style] = 1;
    v26.receiver = v22;
    v26.super_class = v21;
    v23 = objc_msgSendSuper2(&v26, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    sub_10001EAB8();

    *(_QWORD *)&v13[v20] = v23;
    *(_QWORD *)&v13[OBJC_IVAR____TtC16MusicRecognition13ListeningView_extendedListeningTextChangeTask] = 0;
    *(_QWORD *)&v13[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabelVerticalAnchor] = 0;

    v25.receiver = v13;
    v25.super_class = ObjectType;
    v24 = objc_msgSendSuper2(&v25, "initWithFrame:", a1, a2, a3, a4);
    sub_1000793F0();

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000793F0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  NSString v10;
  id v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  void *object;
  NSString v19;
  NSString v20;
  void *v21;
  id v22;
  char *v23;
  uint64_t v24;
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  NSString v36;
  NSString v37;
  id v38;
  Swift::String v39;
  Swift::String v40;
  void *v41;
  NSString v42;
  void *v43;
  NSString v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  Class isa;
  uint64_t v93;
  id v94;
  id v95;
  char *v96;
  void (**v97)(_QWORD, _QWORD, _QWORD);
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::String v103;
  Swift::String v104;

  v1 = v0;
  v2 = sub_100004F7C(&qword_10011A9B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v97 = *(void (***)(_QWORD, _QWORD, _QWORD))(v99 - 8);
  __chkstk_darwin(v99);
  v96 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UIButton.Configuration(0);
  v100 = *(_QWORD *)(v6 - 8);
  v101 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v9 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningView];
  objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v9);
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setAccessibilityIdentifier:", v10);

  v11 = objc_msgSend(v9, "layer");
  objc_msgSend(v11, "setCompositingFilter:", kCAFilterScreenBlendMode);

  v12 = *(char **)&v1[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel];
  objc_msgSend(v12, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", v12);
  v13 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", 16.0, UIFontWeightSemibold);
  objc_msgSend(v12, "setFont:", v13);

  v14 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  objc_msgSend(v12, "setTextColor:", v14);

  v95 = (id)objc_opt_self(NSBundle);
  v15 = objc_msgSend(v95, "mainBundle");
  v16._countAndFlagsBits = 0xD00000000000001ELL;
  v103._object = (void *)0xE000000000000000;
  v16._object = (void *)0x80000001000D9A40;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v103._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v103)._object;

  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v12, "setText:", v19);

  objc_msgSend(v12, "setNumberOfLines:", 2);
  if (qword_100116190 != -1)
    swift_once(&qword_100116190, sub_100080480);
  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setAccessibilityIdentifier:", v20);

  objc_msgSend(v12, "setIsAccessibilityElement:", 0);
  v21 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition13ListeningView_cancelButton];
  objc_msgSend(v21, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", v21);
  v22 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:", 5, 19.0);
  static UIButton.Configuration.filled()();
  v23 = v8;
  if (qword_100116040 != -1)
    swift_once(&qword_100116040, sub_1000790F0);
  v24 = *(_QWORD *)algn_10011A938;
  swift_bridgeObjectRetain(*(_QWORD *)algn_10011A938);
  v25 = v22;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  v27 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v26, v25);

  v98 = v25;
  UIButton.Configuration.image.setter(v27);
  if (qword_100116050 != -1)
    swift_once(&qword_100116050, sub_100079160);
  v28 = qword_10011A948;
  v29 = (id)qword_10011A948;
  UIButton.Configuration.baseBackgroundColor.setter(v28);
  if (qword_100116048 != -1)
    swift_once(&qword_100116048, sub_100079110);
  v30 = qword_10011A940;
  v31 = (id)qword_10011A940;
  UIButton.Configuration.baseForegroundColor.setter(v30);
  v32 = v96;
  ((void (**)(char *, _QWORD, uint64_t))v97)[13](v96, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v99);
  UIButton.Configuration.cornerStyle.setter(v32);
  v34 = v100;
  v33 = v101;
  v35 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  v99 = (uint64_t)v23;
  v35(v4, v23, v101);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v4, 0, 1, v33);
  UIButton.configuration.setter(v4);
  objc_msgSend(v21, "setContentVerticalAlignment:", 3);
  objc_msgSend(v21, "setContentHorizontalAlignment:", 3);
  if (qword_100116198 != -1)
    swift_once(&qword_100116198, sub_1000804B0);
  v96 = v12;
  v36 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setAccessibilityIdentifier:", v36);

  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v21, "setAccessibilityLabel:", v37);

  v38 = objc_msgSend(v95, "mainBundle");
  v39._countAndFlagsBits = 0xD000000000000033;
  v104._object = (void *)0xE000000000000000;
  v39._object = (void *)0x80000001000DB9D0;
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  v104._countAndFlagsBits = 0;
  v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, (NSBundle)v38, v40, v104)._object;

  v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  objc_msgSend(v21, "setAccessibilityHint:", v42);

  v43 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition13ListeningView_waveformView];
  objc_msgSend(v43, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v1, "addSubview:", v43);
  v94 = v21;
  if (qword_1001161D0 != -1)
    swift_once(&qword_1001161D0, sub_1000805EC);
  v44 = String._bridgeToObjectiveC()();
  objc_msgSend(v43, "setAccessibilityIdentifier:", v44);

  v97 = (void (**)(_QWORD, _QWORD, _QWORD))objc_opt_self(NSLayoutConstraint);
  v45 = sub_100004F7C(&qword_100116D90);
  v46 = swift_allocObject(v45, 144, 7);
  *(_OWORD *)(v46 + 16) = xmmword_1000D5610;
  v47 = objc_msgSend(v9, "heightAnchor");
  v48 = objc_msgSend(v1, "heightAnchor");
  v49 = objc_msgSend(v47, "constraintEqualToAnchor:constant:", v48, -12.0);

  *(_QWORD *)(v46 + 32) = v49;
  v50 = objc_msgSend(v9, "widthAnchor");
  v51 = objc_msgSend(v1, "heightAnchor");
  v52 = objc_msgSend(v50, "constraintEqualToAnchor:constant:", v51, -12.0);

  *(_QWORD *)(v46 + 40) = v52;
  v95 = v43;
  v53 = objc_msgSend(v9, "leadingAnchor");
  v54 = objc_msgSend(v1, "leadingAnchor");
  v55 = objc_msgSend(v53, "constraintEqualToAnchor:constant:", v54, 7.0);

  *(_QWORD *)(v46 + 48) = v55;
  v56 = objc_msgSend(v9, "centerYAnchor");
  v57 = objc_msgSend(v1, "centerYAnchor");
  v58 = objc_msgSend(v56, "constraintEqualToAnchor:constant:", v57, -2.0);

  *(_QWORD *)(v46 + 56) = v58;
  v59 = v96;
  v60 = objc_msgSend(v96, "leadingAnchor");
  v61 = objc_msgSend(v9, "trailingAnchor");
  v62 = objc_msgSend(v60, "constraintEqualToAnchor:constant:", v61, 2.0);

  *(_QWORD *)(v46 + 64) = v62;
  v63 = objc_msgSend(v59, "trailingAnchor");
  v64 = v95;
  v65 = objc_msgSend(v95, "leadingAnchor");
  v66 = objc_msgSend(v63, "constraintEqualToAnchor:constant:", v65, -7.0);

  *(_QWORD *)(v46 + 72) = v66;
  v67 = v94;
  v68 = objc_msgSend(v94, "trailingAnchor");
  v69 = objc_msgSend(v1, "trailingAnchor");
  v70 = v67;
  if (qword_100116058 != -1)
    swift_once(&qword_100116058, sub_1000791B4);
  v71 = objc_msgSend(v68, "constraintEqualToAnchor:constant:", v69, *(double *)&qword_10011A950);

  *(_QWORD *)(v46 + 80) = v71;
  v72 = objc_msgSend(v70, "centerYAnchor");
  v73 = objc_msgSend(v1, "centerYAnchor");
  v74 = objc_msgSend(v72, "constraintEqualToAnchor:", v73);

  *(_QWORD *)(v46 + 88) = v74;
  v75 = objc_msgSend(v70, "widthAnchor");
  v76 = objc_msgSend(v75, "constraintEqualToConstant:", 51.0);

  *(_QWORD *)(v46 + 96) = v76;
  v77 = objc_msgSend(v70, "heightAnchor");
  v78 = objc_msgSend(v77, "constraintEqualToConstant:", 51.0);

  *(_QWORD *)(v46 + 104) = v78;
  v79 = objc_msgSend(v64, "centerYAnchor");
  v80 = objc_msgSend(v1, "centerYAnchor");
  v81 = objc_msgSend(v79, "constraintEqualToAnchor:", v80);

  *(_QWORD *)(v46 + 112) = v81;
  v82 = objc_msgSend(v64, "widthAnchor");
  v83 = objc_msgSend(v82, "constraintEqualToConstant:", 36.0);

  *(_QWORD *)(v46 + 120) = v83;
  v84 = objc_msgSend(v64, "heightAnchor");
  v85 = objc_msgSend(v84, "constraintEqualToConstant:", 30.0);

  *(_QWORD *)(v46 + 128) = v85;
  v86 = objc_msgSend(v64, "trailingAnchor");
  v87 = objc_msgSend(v70, "leadingAnchor");
  v88 = objc_msgSend(v86, "constraintEqualToAnchor:constant:", v87, -18.0);

  *(_QWORD *)(v46 + 136) = v88;
  v102 = v46;
  specialized Array._endMutation()(v89);
  v90 = v102;
  sub_10001FC14();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v90);
  objc_msgSend(v97, "activateConstraints:", isa);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
}

void sub_10007A0E0(void *a1, uint64_t a2)
{
  void *v2;
  objc_class *ObjectType;
  void *v5;
  char *v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  _BYTE *v15;
  id v16;
  id v17;
  id v18;
  objc_super v19;
  objc_super v20;

  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v5 = (void *)objc_opt_self(NSBundle);
  v6 = v2;
  v7 = objc_msgSend(v5, "mainBundle");
  v8 = objc_allocWithZone((Class)BSUICAPackageView);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithPackageName:inBundle:", v9, v7);

  if (v10)
  {
    *(_QWORD *)&v6[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningView] = v10;
    v11 = OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel;
    *(_QWORD *)&v6[v11] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v12 = OBJC_IVAR____TtC16MusicRecognition13ListeningView_cancelButton;
    *(_QWORD *)&v6[v12] = objc_msgSend(objc_allocWithZone((Class)UIButton), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    v13 = OBJC_IVAR____TtC16MusicRecognition13ListeningView_waveformView;
    v14 = (objc_class *)type metadata accessor for SpectralOutputWaveformView();
    v15 = objc_allocWithZone(v14);
    *(_QWORD *)&v15[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_barViews] = _swiftEmptyArrayStorage;
    *(_QWORD *)&v15[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_waveformData] = _swiftEmptyArrayStorage;
    v15[OBJC_IVAR____TtC16MusicRecognition26SpectralOutputWaveformView_style] = 1;
    v20.receiver = v15;
    v20.super_class = v14;
    v16 = objc_msgSendSuper2(&v20, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    sub_10001EAB8();

    *(_QWORD *)&v6[v13] = v16;
    *(_QWORD *)&v6[OBJC_IVAR____TtC16MusicRecognition13ListeningView_extendedListeningTextChangeTask] = 0;
    *(_QWORD *)&v6[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabelVerticalAnchor] = 0;

    v19.receiver = v6;
    v19.super_class = ObjectType;
    v17 = objc_msgSendSuper2(&v19, "initWithCoder:", a1);
    if (v17)
    {
      v18 = v17;
      sub_1000793F0();

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10007A314(uint64_t a1, uint64_t a2)
{
  char *v2;
  char v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Class isa;
  uint64_t v15;
  objc_super v16;

  v16.receiver = v2;
  v16.super_class = (Class)swift_getObjectType(v2, a2);
  objc_msgSendSuper2(&v16, "layoutSubviews");
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabelVerticalAnchor])
  {
    v3 = sub_10009DC2C();
    v4 = *(void **)&v2[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel];
    if ((v3 & 1) != 0)
    {
      v5 = objc_msgSend(v4, "_tightBoundingBoxLayoutGuide");
      v6 = objc_msgSend(v5, "topAnchor");

      v7 = objc_msgSend(v2, "SBUISA_systemApertureObstructedAreaLayoutGuide");
      v8 = objc_msgSend(v7, "bottomAnchor");

    }
    else
    {
      v6 = objc_msgSend(v4, "centerYAnchor");
      v8 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningView], "centerYAnchor");
    }
    v9 = objc_msgSend(v6, "constraintEqualToAnchor:", v8);

    v10 = (void *)objc_opt_self(NSLayoutConstraint);
    v11 = sub_100004F7C(&qword_100116D90);
    v12 = swift_allocObject(v11, 40, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1000D3AA0;
    *(_QWORD *)(v12 + 32) = v9;
    v15 = v12;
    specialized Array._endMutation()(v12);
    sub_10001FC14();
    v13 = v9;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v15);
    objc_msgSend(v10, "activateConstraints:", isa);

  }
}

uint64_t sub_10007A510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock(0);
  v4[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[4] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[5] = swift_task_alloc(v7);
  v4[6] = swift_task_alloc(v7);
  v8 = type metadata accessor for MainActor(0);
  v4[7] = v8;
  v4[8] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v4[9] = v9;
  v4[10] = v10;
  return swift_task_switch(sub_10007A5B8, v9, v10);
}

uint64_t sub_10007A5B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100118C10 + dword_100118C10);
  v1 = (_QWORD *)swift_task_alloc(unk_100118C14);
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = sub_10007A638;
  return v3(9000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_10007A638()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v3);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v2[13] = v7;
  v7(v4, v5);
  if (v0)
    v8 = sub_10007A7EC;
  else
    v8 = sub_10007A6C4;
  return swift_task_switch(v8, v2[9], v2[10]);
}

uint64_t sub_10007A6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;

  v1 = *(_QWORD *)(v0 + 96);
  static Task<>.checkCancellation()();
  if (v1)
  {
    swift_release(*(_QWORD *)(v0 + 64));
    v2 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 56);
    v5 = (void *)objc_opt_self(NSBundle);
    *(_QWORD *)(v0 + 112) = v5;
    v6 = objc_msgSend(v5, "mainBundle");
    v13._object = (void *)0xE000000000000000;
    v7._object = (void *)0x80000001000DBA10;
    v7._countAndFlagsBits = 0xD000000000000029;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v13._countAndFlagsBits = 0;
    v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v13);

    *(Swift::String *)(v0 + 120) = v9;
    *(_QWORD *)(v0 + 136) = static MainActor.shared.getter(v10);
    v11 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 144) = v11;
    *(_QWORD *)(v0 + 152) = v12;
    return swift_task_switch(sub_10007A830, v11, v12);
  }
}

uint64_t sub_10007A7EC()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007A830(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = v1[15];
  v2 = v1[16];
  v4 = v1[2];
  v1[20] = static MainActor.shared.getter(a1);
  v5 = (_QWORD *)swift_task_alloc(48);
  v1[21] = v5;
  v5[2] = v4;
  v5[3] = v3;
  v5[4] = v2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[22] = v6;
  *v6 = v1;
  v6[1] = sub_10007A8F4;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10007A8F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 168);
  v3 = *(_QWORD *)(*v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10007A95C, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_10007A95C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[16];
  swift_release(v0[17]);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10007A99C, v0[9], v0[10]);
}

uint64_t sub_10007A99C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100118C10 + dword_100118C10);
  v1 = (_QWORD *)swift_task_alloc(unk_100118C14);
  *(_QWORD *)(v0 + 184) = v1;
  *v1 = v0;
  v1[1] = sub_10007AA1C;
  return v3(8000000000000000000, 0, 0, 0, 1);
}

uint64_t sub_10007AA1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  v4 = *(void (**)(uint64_t, uint64_t))(*v1 + 104);
  v5 = *(_QWORD *)(*v1 + 40);
  v6 = *(_QWORD *)(*v1 + 24);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  v4(v5, v6);
  if (v0)
    v7 = sub_10007ABC0;
  else
    v7 = sub_10007AAA4;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_10007AAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;

  v1 = *(_QWORD *)(v0 + 192);
  static Task<>.checkCancellation()();
  if (v1)
  {
    swift_release(*(_QWORD *)(v0 + 64));
    v2 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 56);
    v5 = objc_msgSend(*(id *)(v0 + 112), "mainBundle");
    v12._object = (void *)0xE000000000000000;
    v6._object = (void *)0x80000001000DBA70;
    v6._countAndFlagsBits = 0xD000000000000029;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v12._countAndFlagsBits = 0;
    v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v12);

    *(Swift::String *)(v0 + 200) = v8;
    *(_QWORD *)(v0 + 216) = static MainActor.shared.getter(v9);
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 224) = v10;
    *(_QWORD *)(v0 + 232) = v11;
    return swift_task_switch(sub_10007AC04, v10, v11);
  }
}

uint64_t sub_10007ABC0()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007AC04(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = v1[25];
  v2 = v1[26];
  v4 = v1[2];
  v1[30] = static MainActor.shared.getter(a1);
  v5 = (_QWORD *)swift_task_alloc(48);
  v1[31] = v5;
  v5[2] = v4;
  v5[3] = v3;
  v5[4] = v2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[32] = v6;
  *v6 = v1;
  v6[1] = sub_10007ACC8;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10007ACC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 248);
  v3 = *(_QWORD *)(*v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10007AD30, *(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 232));
}

uint64_t sub_10007AD30()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[26];
  swift_release(v0[27]);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10007AD70, v0[9], v0[10]);
}

uint64_t sub_10007AD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10007ADB8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  void **aBlock;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD *v28;

  v8 = sub_100004F7C(&qword_10011A9C8);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (void *)objc_opt_self(UIView);
  v21 = *(_QWORD *)&a2[OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel];
  v22 = v11;
  v12 = (_QWORD *)swift_allocObject(&unk_10010BF90, 40, 7);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v27 = sub_10007B108;
  v28 = v12;
  aBlock = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_1000A5684;
  v26 = &unk_10010BFA8;
  v13 = _Block_copy(&aBlock);
  v14 = v28;
  v15 = a2;
  swift_bridgeObjectRetain(a4);
  v16 = swift_release(v14);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v16);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = swift_allocObject(&unk_10010BFE0, v18 + v10, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v27 = sub_10007B1D8;
  v28 = (_QWORD *)v19;
  aBlock = _NSConcreteStackBlock;
  v24 = 1107296256;
  v25 = sub_10008DA38;
  v26 = &unk_10010BFF8;
  v20 = _Block_copy(&aBlock);
  swift_release(v28);
  objc_msgSend(v22, "transitionWithView:duration:options:animations:completion:", v21, 5242880, v13, v20, 0.35);
  _Block_release(v20);
  _Block_release(v13);
}

uint64_t type metadata accessor for ListeningView()
{
  return objc_opt_self(_TtC16MusicRecognition13ListeningView);
}

uint64_t sub_10007B038()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10007B064(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10011A9BC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000101B8;
  return sub_10007A510(a1, v4, v5, v6);
}

void sub_10007B0D0(uint64_t a1)
{
  uint64_t v1;

  sub_10007ADB8(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10007B0DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10007B108()
{
  uint64_t v0;
  void *v1;
  NSString v2;

  v1 = *(void **)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC16MusicRecognition13ListeningView_listeningLabel);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v2);

}

uint64_t sub_10007B15C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007B16C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007B174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100004F7C(&qword_10011A9C8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10007B1D8()
{
  uint64_t v0;

  v0 = sub_100004F7C(&qword_10011A9C8);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t *sub_10007B224(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    if (*a2)
    {
      v7 = a2[1];
      *v4 = *a2;
      v4[1] = v7;
      swift_retain(v7);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    v9 = a2[2];
    v10 = a2[3];
    v4[2] = v9;
    v4[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    swift_retain(v9);
    swift_retain(v10);
    v14 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      v15 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v12, v13, v15);
      v16 = 1;
    }
    else
    {
      v17 = *v13;
      *v12 = *v13;
      swift_retain(v17);
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v14, v16);
    v18 = *(int *)(a3 + 28);
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = v19;
      v24 = v21;
      v25 = 1;
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v23 = v19;
      v24 = v21;
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v23, v24, v25);
  }
  return v4;
}

double sub_10007B3AC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  if (*a1)
    swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 24));
  v5 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)((char *)a1 + *(int *)(a2 + 28));
  v8 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

_QWORD *sub_10007B498(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*a2)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v7 = a2[2];
  v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  swift_retain(v7);
  swift_retain(v8);
  v12 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
  {
    v13 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    v14 = 1;
  }
  else
  {
    v15 = *v11;
    *v10 = *v11;
    swift_retain(v15);
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v12, v14);
  v16 = *(int *)(a3 + 28);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    v21 = v17;
    v22 = v19;
    v23 = 1;
  }
  else
  {
    v24 = *v18;
    *v17 = *v18;
    swift_retain(v24);
    v21 = v17;
    v22 = v19;
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v22, v23);
  return a1;
}

uint64_t *sub_10007B5F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a2;
  if (*a1)
  {
    if (v6)
    {
      v7 = a2[1];
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v7;
      swift_retain(v7);
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v6)
  {
    v9 = a2[1];
    *a1 = v6;
    a1[1] = v9;
    swift_retain(v9);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v10 = a2[2];
  v11 = a1[2];
  a1[2] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a1[3];
  v13 = a2[3];
  a1[3] = v13;
  swift_retain(v13);
  swift_release(v12);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_10000526C((uint64_t)a1 + v14, &qword_1001166A0);
    v17 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v20 = *v16;
      *v15 = *v16;
      swift_retain(v20);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v21 = *(int *)(a3 + 28);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    sub_10000526C((uint64_t)a1 + v21, &qword_100116698);
    v24 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
      v26 = 1;
    }
    else
    {
      v27 = *v23;
      *v22 = *v23;
      swift_retain(v27);
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v24, v26);
  }
  return a1;
}

uint64_t sub_10007B7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = *(int *)(a3 + 28);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_10007B908(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  if (*a1)
  {
    if (v6)
    {
      v7 = a2[1];
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v7;
      swift_release(v8);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v6)
  {
    v9 = a2[1];
    *a1 = v6;
    a1[1] = v9;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v10 = a1[2];
  a1[2] = a2[2];
  swift_release(v10);
  v11 = a1[3];
  a1[3] = a2[3];
  swift_release(v11);
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_10000526C((uint64_t)a1 + v12, &qword_1001166A0);
    v15 = sub_100004F7C(&qword_1001166A0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for OpenURLAction(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    v17 = *(int *)(a3 + 28);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    sub_10000526C((uint64_t)a1 + v17, &qword_100116698);
    v20 = sub_100004F7C(&qword_100116698);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10007BABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007BAC8);
}

uint64_t sub_10007BAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004F7C(&qword_100116768);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_100004F7C(&qword_100117800);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10007BB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007BB7C);
}

uint64_t sub_10007BB7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = sub_100004F7C(&qword_100116768);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_100004F7C(&qword_100117800);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for PlayInAppleMusicView(uint64_t a1)
{
  uint64_t result;

  result = qword_10011AA80;
  if (!qword_10011AA80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayInAppleMusicView);
  return result;
}

void sub_10007BC5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = &unk_1000D5668;
  v6[1] = &unk_1000D5680;
  sub_10004360C(319, (unint64_t *)&qword_1001167D8, (uint64_t (*)(uint64_t))&type metadata accessor for OpenURLAction);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_10004360C(319, (unint64_t *)&qword_100117870, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_10007BD14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000DE8C4, 1);
}

uint64_t sub_10007BD24()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10011A9D0 = result;
  return result;
}

void sub_10007BD40()
{
  qword_10011A9D8 = 0x6B72616D78;
  unk_10011A9E0 = 0xE500000000000000;
}

uint64_t sub_10007BD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, _QWORD, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t result;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v0 = sub_100004F7C(&qword_10011AAE8);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v5 = (char *)&v28 - v4;
  v6 = sub_100004F7C(&qword_10011AAD0);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DynamicTypeSize(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v28 - v14;
  sub_10000C484(v6, qword_10011A9E8);
  v31 = sub_10000B5E8(v6, (uint64_t)qword_10011A9E8);
  v16 = (void (*)(char *, _QWORD, uint64_t))v10[13];
  v16(v15, enum case for DynamicTypeSize.xSmall(_:), v9);
  v16(v13, enum case for DynamicTypeSize.xxLarge(_:), v9);
  v17 = sub_100004864(&qword_10011AAF0, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  v18 = v15;
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v15, v13, v9, v17);
  if ((result & 1) != 0)
  {
    v20 = &v5[*(int *)(v0 + 48)];
    v29 = v6;
    v30 = v18;
    v21 = v0;
    v22 = (void (*)(char *, char *, uint64_t))v10[2];
    v22(v5, v18, v9);
    v22(v20, v13, v9);
    v23 = &v3[*(int *)(v21 + 48)];
    v22(v3, v5, v9);
    v22(v23, v20, v9);
    v24 = (void (*)(char *, char *, uint64_t))v10[4];
    v24(v8, v3, v9);
    v28 = v13;
    v25 = (uint64_t)v8;
    v26 = (void (*)(char *, uint64_t))v10[1];
    v26(v23, v9);
    v27 = &v3[*(int *)(v21 + 48)];
    v24(v3, v5, v9);
    v24(v27, v20, v9);
    v24((char *)(v25 + *(int *)(v29 + 36)), v27, v9);
    v26(v3, v9);
    sub_10007F2BC(v25, v31);
    v26(v28, v9);
    return ((uint64_t (*)(char *, uint64_t))v26)(v30, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007C014()
{
  uint64_t result;

  result = static Font.body.getter();
  qword_10011AA00 = result;
  return result;
}

uint64_t sub_10007C030()
{
  uint64_t result;

  result = static Font.subheadline.getter();
  qword_10011AA08 = result;
  return result;
}

void sub_10007C04C()
{
  qword_10011AA10 = static Font.Weight.regular.getter();
}

uint64_t sub_10007C068()
{
  uint64_t result;

  result = static Font.title3.getter();
  qword_10011AA18 = result;
  return result;
}

uint64_t sub_10007C084()
{
  id v0;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "systemFillColor");
  result = Color.init(uiColor:)(v0);
  qword_10011AA20 = result;
  return result;
}

uint64_t sub_10007C0C0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t OpaqueTypeConformance2;
  char *v108;
  uint64_t v109;
  char *v110;
  __n128 v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  char v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  void (*v160)(char *, char *, uint64_t);
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char v200[8];
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned __int8 v208;
  _QWORD v209[2];
  unsigned __int8 v210;

  v194 = a2;
  v3 = sub_100004F7C(&qword_10011AAF8);
  v4 = __chkstk_darwin(v3);
  v195 = (uint64_t)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v193 = (char *)&v168 - v6;
  v191 = type metadata accessor for MusicSubscriptionOffer.Options(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v180);
  v171 = (char *)&v168 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for BorderedProminentButtonStyle(0);
  v179 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v172 = (char *)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PlayInAppleMusicView(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v182 = (unint64_t)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v15 = (char *)&v168 - v14;
  v170 = sub_100004F7C(&qword_10011AB00);
  v16 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v18 = (char *)&v168 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100004F7C(&qword_10011AB08);
  __chkstk_darwin(v169);
  v20 = (char *)&v168 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_100004F7C(&qword_10011AB10);
  v173 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v22 = (char *)&v168 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100004F7C(&qword_10011AB18);
  __chkstk_darwin(v168);
  v24 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100004F7C(&qword_10011AB20);
  __chkstk_darwin(v184);
  v181 = (char *)&v168 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_100004F7C(&qword_10011AB28);
  v186 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v198 = (char *)&v168 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_100004F7C(&qword_10011AB30);
  v197 = *(_QWORD *)(v188 - 8);
  v27 = __chkstk_darwin(v188);
  v192 = (char *)&v168 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v183 = (char *)&v168 - v30;
  __chkstk_darwin(v29);
  v196 = (char *)&v168 - v31;
  sub_10000B340(a1, (uint64_t)v15, type metadata accessor for PlayInAppleMusicView);
  v32 = *(unsigned __int8 *)(v11 + 80);
  v33 = (v32 + 16) & ~v32;
  v176 = v33 + v12;
  v175 = v32 | 7;
  v34 = swift_allocObject(&unk_10010C030, v33 + v12, v32 | 7);
  v177 = v33;
  sub_10007F308((uint64_t)v15, v34 + v33);
  v201 = a1;
  v35 = sub_100004F7C(&qword_10011AB38);
  v36 = sub_10007F360();
  Button.init(action:label:)(sub_10007F34C, v34, sub_10007F358, v200, v35, v36);
  v185 = a1;
  v37 = *(_QWORD *)(a1 + 24);
  v202 = *(_QWORD *)(a1 + 16);
  v203 = v37;
  v199 = sub_100004F7C(&qword_10011AB88);
  State.wrappedValue.getter(&v206, v199);
  v38 = v206;
  v39 = *(_QWORD *)(v206 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_buttonBackgroundColor);
  swift_retain(v39);
  swift_release(v38);
  KeyPath = swift_getKeyPath(&unk_1000D56E8, v40);
  v202 = v39;
  v42 = swift_retain(v39);
  v43 = AnyShapeStyle.init<A>(_:)(&v202, &type metadata for Color, &protocol witness table for Color, v42);
  v44 = v16;
  v45 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v46 = v170;
  v45(v20, v18, v170);
  v47 = v39;
  v48 = v168;
  v49 = swift_release(v47);
  v50 = v169;
  v51 = (uint64_t *)&v20[*(int *)(v169 + 36)];
  *v51 = KeyPath;
  v51[1] = v43;
  v52 = (*(uint64_t (**)(char *, uint64_t, __n128))(v44 + 8))(v18, v46, v49);
  v53 = v172;
  BorderedProminentButtonStyle.init()(v52);
  v54 = sub_10007F5A0();
  v55 = sub_100004864(&qword_10011ABA0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v56 = v178;
  View.buttonStyle<A>(_:)(v53, v50, v178, v54, v55);
  (*(void (**)(char *, uint64_t))(v179 + 8))(v53, v56);
  sub_10000526C((uint64_t)v20, &qword_10011AB08);
  v57 = v171;
  v58 = &v171[*(int *)(v180 + 20)];
  v59 = enum case for RoundedCornerStyle.continuous(_:);
  v60 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v58, v59, v60);
  __asm { FMOV            V0.2D, #12.0 }
  *v57 = _Q0;
  v66 = (uint64_t)&v24[*(int *)(v48 + 36)];
  sub_10000B340((uint64_t)v57, v66, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v66 + *(int *)(sub_100004F7C(&qword_100117BE8) + 36)) = 256;
  v67 = v173;
  v68 = v174;
  (*(void (**)(char *, char *, uint64_t))(v173 + 16))(v24, v22, v174);
  sub_10000B600((uint64_t)v57, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v22, v68);
  if (qword_1001160B8 != -1)
    swift_once(&qword_1001160B8, sub_100080014);
  v69 = qword_100124580;
  v70 = *(_QWORD *)algn_100124588;
  v71 = sub_10007F63C();
  v72 = (uint64_t)v181;
  View.accessibilityIdentifier(_:)(v69, v70, v48, v71);
  sub_10000526C((uint64_t)v24, &qword_10011AB18);
  v73 = v185;
  v74 = *(_QWORD *)(v185 + 24);
  v206 = *(_QWORD *)(v185 + 16);
  v207 = v74;
  State.projectedValue.getter(&v202);
  v75 = v202;
  v76 = v203;
  v77 = v204;
  v79 = swift_getKeyPath(&unk_1000D5718, v78);
  v202 = v75;
  v203 = v76;
  v204 = v77;
  v80 = sub_100004F7C(&qword_10011ABB0);
  Binding.subscript.getter(&v206, v79, v80);
  swift_release(v77);
  swift_release(v76);
  swift_release(v79);
  swift_release(v75);
  v81 = v206;
  v82 = v207;
  v83 = v208;
  v84 = v182;
  sub_10000B340(v73, v182, type metadata accessor for PlayInAppleMusicView);
  v85 = swift_allocObject(&unk_10010C058, v176, v175);
  sub_10007F308(v84, v85 + v177);
  v86 = sub_100004F7C(&qword_10011ABB8);
  v179 = v86;
  v87 = sub_10007F774(&qword_10011ABC0, &qword_10011AB20, (void (*)(void))sub_10007F63C);
  v180 = v87;
  v182 = sub_10007F7F8();
  v167 = v87;
  v88 = v184;
  View.sheet<A>(isPresented:onDismiss:content:)(v81, v82, v83, 0, 0, sub_10007F738, v85, v184, v86, v167, v182);
  swift_release(v82);
  swift_release(v85);
  swift_release(v81);
  sub_10000526C(v72, &qword_10011AB20);
  v89 = *(_QWORD *)(v73 + 24);
  v206 = *(_QWORD *)(v73 + 16);
  v207 = v89;
  v90 = v199;
  State.projectedValue.getter(&v202);
  v91 = v202;
  v92 = v203;
  v93 = v204;
  v95 = swift_getKeyPath(&unk_1000D5740, v94);
  v202 = v91;
  v203 = v92;
  v204 = v93;
  Binding.subscript.getter(v209, v95, v80);
  swift_release(v93);
  swift_release(v92);
  swift_release(v95);
  swift_release(v91);
  v96 = v209[0];
  v97 = v209[1];
  LODWORD(v181) = v210;
  v98 = *(_QWORD *)(v73 + 24);
  v202 = *(_QWORD *)(v73 + 16);
  v203 = v98;
  State.wrappedValue.getter(&v206, v90);
  v99 = v206;
  v101 = swift_getKeyPath(&unk_1000D5768, v100);
  v202 = v99;
  v102 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v202, v101, v102);
  swift_release(v101);
  v103 = v99 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions;
  swift_beginAccess(v99 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions, &v206, 0, 0);
  v104 = v190;
  v105 = v189;
  v106 = v191;
  (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v189, v103, v191);
  swift_release(v99);
  v202 = v88;
  v203 = v179;
  v204 = v180;
  v205 = v182;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v202, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v108 = v183;
  v109 = v187;
  v110 = v198;
  View.musicSubscriptionOffer(isPresented:options:onLoadCompletion:)(v96, v97, v181, v105, sub_10007EF8C, 0, v187, OpaqueTypeConformance2);
  swift_release(v97);
  v111 = swift_release(v96);
  (*(void (**)(char *, uint64_t, __n128))(v104 + 8))(v105, v106, v111);
  (*(void (**)(char *, uint64_t))(v186 + 8))(v110, v109);
  v113 = v196;
  v112 = v197;
  v114 = v188;
  (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v196, v108, v188);
  v115 = *(_QWORD *)(v73 + 16);
  v116 = *(_QWORD *)(v73 + 24);
  v202 = v115;
  v203 = v116;
  v117 = v199;
  State.wrappedValue.getter(v209, v199);
  v118 = *(_QWORD *)(v209[0] + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers);
  swift_release(v209[0]);
  if (v118)
  {
    v202 = v115;
    v203 = v116;
    State.wrappedValue.getter(v209, v117);
    v119 = v209[0];
    v120 = sub_1000809C0();
    v122 = v121;
    swift_release(v119);
    v202 = v120;
    v203 = v122;
    v123 = sub_10000B110();
    v124 = Text.init<A>(_:)(&v202, &type metadata for String, v123);
    v126 = v125;
    v128 = v127;
    v130 = v129;
    if (qword_100116080 != -1)
      swift_once(&qword_100116080, sub_10007C030);
    v131 = v128 & 1;
    v132 = Text.font(_:)(qword_10011AA08, v124, v126, v128 & 1, v130);
    v134 = v133;
    v136 = v135;
    v138 = v137;
    sub_10000B64C(v124, v126, v131);
    swift_bridgeObjectRelease(v130);
    if (qword_100116088 != -1)
      swift_once(&qword_100116088, sub_10007C04C);
    v139 = v136 & 1;
    v140 = Text.fontWeight(_:)(qword_10011AA10, 0, v132, v134, v136 & 1, v138);
    v142 = v141;
    v144 = v143;
    v146 = v145;
    sub_10000B64C(v132, v134, v139);
    swift_bridgeObjectRelease(v138);
    if (qword_100116060 != -1)
      swift_once(&qword_100116060, sub_10007BD24);
    v147 = qword_10011A9D0;
    v202 = qword_10011A9D0;
    swift_retain(qword_10011A9D0);
    v148 = v144 & 1;
    v149 = Text.foregroundStyle<A>(_:)(&v202, v140, v142, v148, v146, &type metadata for Color, &protocol witness table for Color);
    v151 = v150;
    v153 = v152;
    v155 = v154;
    sub_10000B64C(v140, v142, v148);
    swift_release(v147);
    swift_bridgeObjectRelease(v146);
    v202 = v149;
    v203 = v151;
    LOBYTE(v204) = v153 & 1;
    v205 = v155;
    if (qword_1001160E8 != -1)
      swift_once(&qword_1001160E8, sub_10008011C);
    v156 = (uint64_t)v193;
    View.accessibilityIdentifier(_:)(qword_1001245E0, *(_QWORD *)algn_1001245E8, &type metadata for Text, &protocol witness table for Text);
    sub_10000B64C(v149, v151, v153 & 1);
    swift_bridgeObjectRelease(v155);
    v157 = sub_100004F7C(&qword_100117F88);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v156, 0, 1, v157);
    v158 = v196;
    v112 = v197;
  }
  else
  {
    v158 = v113;
    v159 = sub_100004F7C(&qword_100117F88);
    v156 = (uint64_t)v193;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 56))(v193, 1, 1, v159);
  }
  v160 = *(void (**)(char *, char *, uint64_t))(v112 + 16);
  v161 = v192;
  v160(v192, v158, v114);
  v162 = v195;
  sub_100007C8C(v156, v195, &qword_10011AAF8);
  v163 = v194;
  v160(v194, v161, v114);
  v164 = sub_100004F7C(&qword_10011ABE8);
  sub_100007C8C(v162, (uint64_t)&v163[*(int *)(v164 + 48)], &qword_10011AAF8);
  sub_10000526C(v156, &qword_10011AAF8);
  v165 = *(void (**)(char *, uint64_t))(v112 + 8);
  v165(v158, v114);
  sub_10000526C(v162, &qword_10011AAF8);
  return ((uint64_t (*)(char *, uint64_t))v165)(v161, v114);
}

double sub_10007CF3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)a1)
    (*(void (**)(uint64_t))a1)(v3);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v25 = v7;
  v26 = v6;
  v8 = sub_100004F7C(&qword_10011AB88);
  State.wrappedValue.getter(&v27, v8);
  v9 = *(_QWORD *)(v27 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers);
  swift_release(v27);
  if (v9)
  {
    v25 = v7;
    v26 = v6;
    State.wrappedValue.getter(&v27, v8);
    v10 = v27;
    sub_100080688((uint64_t)v5);
    v11 = type metadata accessor for URL(0);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v5, 1, v11);
    sub_10000526C((uint64_t)v5, (uint64_t *)&unk_100118CE0);
    swift_release(v10);
    v25 = v7;
    v26 = v6;
    State.wrappedValue.getter(&v27, v8);
    v14 = v27;
    if (v12 == 1)
    {
      KeyPath = swift_getKeyPath(&unk_1000D5740, v13);
      v25 = v14;
      v16 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v16);
      swift_release(KeyPath);
      v25 = v14;
      v18 = swift_getKeyPath(&unk_1000D5740, v17);
      ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v25, v18, v16);
      swift_release(v18);
      *(_BYTE *)(v14 + 16) = (*(_BYTE *)(v14 + 16) & 1) == 0;
      v25 = v14;
      v20 = swift_getKeyPath(&unk_1000D5740, v19);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v25, v20, v16);
      swift_release(v14);
      *(_QWORD *)&result = swift_release(v20).n128_u64[0];
    }
    else
    {
      v22 = swift_getKeyPath(&unk_1000D5718, v13);
      __chkstk_darwin(v22);
      *(&v24 - 2) = v14;
      *((_BYTE *)&v24 - 8) = 1;
      v25 = v14;
      v23 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v25, v22, sub_10007FF70, &v24 - 4, (char *)&type metadata for () + 8, v23);
      swift_release(v14);
      *(_QWORD *)&result = swift_release(v22).n128_u64[0];
    }
  }
  else
  {
    sub_10007D208();
  }
  return result;
}

uint64_t sub_10007D208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v47 = type metadata accessor for OpenURLAction(0);
  v2 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (uint64_t *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v5 = __chkstk_darwin(v4);
  v43 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - v7;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v45 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - v13;
  v44 = type metadata accessor for PlayInAppleMusicView(0);
  __chkstk_darwin(v44);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v17 = type metadata accessor for Logger(0);
  sub_10000B5E8(v17, (uint64_t)qword_100124478);
  v18 = sub_10000B340(v0, (uint64_t)v16, type metadata accessor for PlayInAppleMusicView);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, (os_log_type_t)v20))
  {
    v41 = v20;
    v42 = v2;
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v40 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = *((_QWORD *)v16 + 3);
    v49 = *((_QWORD *)v16 + 2);
    v50 = v23;
    v51 = v22;
    v24 = sub_100004F7C(&qword_10011AB88);
    State.wrappedValue.getter(&v48, v24);
    v25 = v48;
    if (!*(_QWORD *)(v48 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers))
    {
      sub_100007C8C(v48 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicClassicalURL, (uint64_t)v8, (uint64_t *)&unk_100118CE0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v8, v9);
        goto LABEL_8;
      }
      sub_10000526C((uint64_t)v8, (uint64_t *)&unk_100118CE0);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v25 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicSongURL, v9);
LABEL_8:
    swift_release(v25);
    v26 = sub_100004864((unint64_t *)&qword_1001168E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v9, v26);
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v49 = sub_1000529F4(v27, v29, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v29);
    sub_10000B600((uint64_t)v16, type metadata accessor for PlayInAppleMusicView);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v41, "Opening %s", v21, 0xCu);
    v30 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v31 = v47;
    v2 = v42;
    goto LABEL_10;
  }
  sub_10000B600((uint64_t)v16, type metadata accessor for PlayInAppleMusicView);

  v31 = v47;
LABEL_10:
  v32 = v46;
  sub_100006A38(v46);
  v33 = *(_QWORD *)(v1 + 24);
  v49 = *(_QWORD *)(v1 + 16);
  v50 = v33;
  v34 = sub_100004F7C(&qword_10011AB88);
  State.wrappedValue.getter(&v51, v34);
  v35 = v51;
  if (*(_QWORD *)(v51 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers))
  {
    v36 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v45, v51 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicSongURL, v9);
  }
  else
  {
    v37 = v43;
    sub_100007C8C(v51 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicClassicalURL, v43, (uint64_t *)&unk_100118CE0);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v37, 1, v9);
    v36 = v45;
    if (v38 == 1)
    {
      sub_10000526C(v37, (uint64_t *)&unk_100118CE0);
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v36, v35 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicSongURL, v9);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v45, v37, v9);
    }
  }
  swift_release(v35);
  OpenURLAction.callAsFunction(_:)(v36);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v36, v9);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v32, v31);
}

uint64_t sub_10007D6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[14];
  _BYTE v64[231];
  _OWORD v65[15];
  uint64_t v66;

  v45 = a2;
  v3 = sub_100004F7C(&qword_10011AC98);
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100004F7C(&qword_10011AB60);
  __chkstk_darwin(v41);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100004F7C(&qword_10011AB50);
  v8 = __chkstk_darwin(v42);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Axis.Set.horizontal.getter(v8);
  sub_10007DB48(a1, (uint64_t)v63);
  *(_OWORD *)&v64[167] = v63[10];
  *(_OWORD *)&v64[183] = v63[11];
  *(_OWORD *)&v64[199] = v63[12];
  *(_OWORD *)&v64[215] = v63[13];
  *(_OWORD *)&v64[103] = v63[6];
  *(_OWORD *)&v64[119] = v63[7];
  *(_OWORD *)&v64[135] = v63[8];
  *(_OWORD *)&v64[151] = v63[9];
  *(_OWORD *)&v64[39] = v63[2];
  *(_OWORD *)&v64[55] = v63[3];
  *(_OWORD *)&v64[71] = v63[4];
  *(_OWORD *)&v64[87] = v63[5];
  *(_OWORD *)&v64[7] = v63[0];
  *(_OWORD *)&v64[23] = v63[1];
  if (qword_100116078 != -1)
    swift_once(&qword_100116078, sub_10007C014);
  v13 = qword_10011AA00;
  KeyPath = swift_getKeyPath(&unk_1000D5790, v12);
  *(_OWORD *)((char *)&v65[11] + 1) = *(_OWORD *)&v64[176];
  *(_OWORD *)((char *)&v65[12] + 1) = *(_OWORD *)&v64[192];
  *(_OWORD *)((char *)&v65[13] + 1) = *(_OWORD *)&v64[208];
  *(_OWORD *)((char *)&v65[7] + 1) = *(_OWORD *)&v64[112];
  *(_OWORD *)((char *)&v65[8] + 1) = *(_OWORD *)&v64[128];
  *(_OWORD *)((char *)&v65[9] + 1) = *(_OWORD *)&v64[144];
  *(_OWORD *)((char *)&v65[10] + 1) = *(_OWORD *)&v64[160];
  *(_OWORD *)((char *)&v65[3] + 1) = *(_OWORD *)&v64[48];
  *(_OWORD *)((char *)&v65[4] + 1) = *(_OWORD *)&v64[64];
  *(_OWORD *)((char *)&v65[5] + 1) = *(_OWORD *)&v64[80];
  *(_OWORD *)((char *)&v65[6] + 1) = *(_OWORD *)&v64[96];
  *(_OWORD *)((char *)v65 + 1) = *(_OWORD *)v64;
  LOBYTE(v65[0]) = v11;
  *(_OWORD *)((char *)&v65[1] + 1) = *(_OWORD *)&v64[16];
  *(_OWORD *)((char *)&v65[2] + 1) = *(_OWORD *)&v64[32];
  *(_QWORD *)&v65[14] = *(_QWORD *)&v64[223];
  *((_QWORD *)&v65[14] + 1) = KeyPath;
  v66 = v13;
  v59 = v65[12];
  v60 = v65[13];
  v61 = v65[14];
  v62 = v13;
  v55 = v65[8];
  v56 = v65[9];
  v57 = v65[10];
  v58 = v65[11];
  v51 = v65[4];
  v52 = v65[5];
  v53 = v65[6];
  v54 = v65[7];
  v47 = v65[0];
  v48 = v65[1];
  v49 = v65[2];
  v50 = v65[3];
  swift_retain(v13);
  v16 = static Font.Weight.semibold.getter(v15);
  v17 = sub_100004F7C(&qword_10011AB68);
  sub_10007F4FC();
  View.fontWeight(_:)(*(_QWORD *)&v16, 0, v17);
  sub_10007FDF8((uint64_t)v65);
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v47 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)&v47 + 1) = v18;
  v19 = sub_100004F7C(&qword_10011AB88);
  State.wrappedValue.getter(&v46, v19);
  v20 = v46;
  v21 = *(_QWORD *)(v46 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_buttonTextColor);
  swift_retain(v21);
  swift_release(v20);
  v23 = swift_getKeyPath(&unk_1000D57C0, v22);
  v25 = v43;
  v24 = v44;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v7, v5, v44);
  v26 = (uint64_t *)&v7[*(int *)(v41 + 36)];
  *v26 = v23;
  v26[1] = v21;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v24);
  v28 = swift_getKeyPath(&unk_1000D57F0, v27);
  sub_100007C8C((uint64_t)v7, (uint64_t)v10, &qword_10011AB60);
  v29 = &v10[*(int *)(v42 + 36)];
  *(_QWORD *)v29 = v28;
  *((_QWORD *)v29 + 1) = 1;
  v29[16] = 0;
  v30 = sub_10000526C((uint64_t)v7, &qword_10011AB60);
  LOBYTE(v28) = static Edge.Set.vertical.getter(v30);
  v31 = EdgeInsets.init(_all:)(10.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v38 = v45;
  sub_100007C8C((uint64_t)v10, v45, &qword_10011AB50);
  v39 = v38 + *(int *)(sub_100004F7C(&qword_10011AB38) + 36);
  *(_BYTE *)v39 = v28;
  *(double *)(v39 + 8) = v31;
  *(_QWORD *)(v39 + 16) = v33;
  *(_QWORD *)(v39 + 24) = v35;
  *(_QWORD *)(v39 + 32) = v37;
  *(_BYTE *)(v39 + 40) = 0;
  return sub_10000526C((uint64_t)v10, &qword_10011AB50);
}

uint64_t sub_10007DB48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v45;
  uint64_t v46;
  _OWORD v47[9];
  _BYTE v48[151];
  char v49;
  _BYTE v50[7];
  _BYTE v51[7];
  char v52;
  _OWORD v53[9];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v48 = v4;
  *(_QWORD *)&v48[8] = v3;
  v5 = sub_100004F7C(&qword_10011AB88);
  State.wrappedValue.getter(&v54, v5);
  v6 = v54;
  if (*(_QWORD *)(v54 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers))
  {
    v7 = "Close campaign offer";
  }
  else
  {
    if ((*(_BYTE *)(v54
                   + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_shouldDisplayAppleClassicalFeatures) & 1) != 0)
    {
      v8 = 0xD000000000000018;
      v9 = 0x80000001000DB8B0;
      goto LABEL_7;
    }
    v7 = "SHAZAM_REMOVE_SONG_FROM_LIBRARY";
  }
  v9 = (unint64_t)v7 | 0x8000000000000000;
  v8 = 0xD000000000000014;
LABEL_7:
  v10 = LocalizedStringKey.init(stringLiteral:)(v8, v9);
  swift_release(v6);
  v11 = Text.init(_:tableName:bundle:comment:)(v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v45 = static Edge.Set.horizontal.getter(v11);
  v18 = EdgeInsets.init(_all:)(50.0);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  *(_QWORD *)v48 = v4;
  *(_QWORD *)&v48[8] = v3;
  State.wrappedValue.getter(&v54, v5);
  v25 = v54;
  v46 = v17;
  if (*(_QWORD *)(v54 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers))
  {
    v26 = "SHAZAM_PLAY_IN_MUSIC";
LABEL_12:
    v28 = (unint64_t)(v26 - 32) | 0x8000000000000000;
    v27 = 0xD000000000000014;
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v54
                 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_shouldDisplayAppleClassicalFeatures) & 1) == 0)
  {
    v26 = "SHAZAM_OPEN_IN_MUSIC";
    goto LABEL_12;
  }
  v27 = 0xD000000000000018;
  v28 = 0x80000001000DB8B0;
LABEL_13:
  v29 = LocalizedStringKey.init(stringLiteral:)(v27, v28);
  swift_release(v25);
  v30 = v15 & 1;
  v31 = Text.init(_:tableName:bundle:comment:)(v29);
  v33 = v32;
  v35 = v34;
  v37 = v36 & 1;
  v38 = static Alignment.center.getter(v31);
  sub_1000344E0(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v54, 0.0, 1, 0.0, 1, v38, v39, v31, v33, v37, v35);
  sub_10000B64C(v31, v33, v37);
  swift_bridgeObjectRelease(v35);
  v53[6] = v60;
  v53[7] = v61;
  v53[8] = v62;
  v53[2] = v56;
  v53[3] = v57;
  v53[4] = v58;
  v53[5] = v59;
  v53[0] = v54;
  v53[1] = v55;
  v47[6] = v60;
  v47[7] = v61;
  v47[8] = v62;
  v47[2] = v56;
  v47[3] = v57;
  v47[4] = v58;
  v47[5] = v59;
  v47[0] = v54;
  v47[1] = v55;
  *(_OWORD *)&v48[87] = v59;
  *(_OWORD *)&v48[103] = v60;
  *(_OWORD *)&v48[119] = v61;
  *(_OWORD *)&v48[135] = v62;
  *(_OWORD *)&v48[23] = v55;
  *(_OWORD *)&v48[39] = v56;
  *(_OWORD *)&v48[55] = v57;
  *(_OWORD *)&v48[71] = v58;
  v52 = v30;
  v49 = 0;
  *(_OWORD *)&v48[7] = v54;
  *(_DWORD *)(a2 + 17) = *(_DWORD *)v51;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)&v51[3];
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v50;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v50[3];
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 16) = v30;
  *(_QWORD *)(a2 + 24) = v46;
  *(_BYTE *)(a2 + 32) = v45;
  *(double *)(a2 + 40) = v18;
  *(_QWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v24;
  *(_BYTE *)(a2 + 72) = 0;
  v40 = *(_OWORD *)&v48[112];
  *(_OWORD *)(a2 + 169) = *(_OWORD *)&v48[96];
  *(_OWORD *)(a2 + 185) = v40;
  *(_OWORD *)(a2 + 201) = *(_OWORD *)&v48[128];
  *(_QWORD *)(a2 + 216) = *(_QWORD *)&v48[143];
  v41 = *(_OWORD *)&v48[48];
  *(_OWORD *)(a2 + 105) = *(_OWORD *)&v48[32];
  *(_OWORD *)(a2 + 121) = v41;
  v42 = *(_OWORD *)&v48[80];
  *(_OWORD *)(a2 + 137) = *(_OWORD *)&v48[64];
  *(_OWORD *)(a2 + 153) = v42;
  v43 = *(_OWORD *)&v48[16];
  *(_OWORD *)(a2 + 73) = *(_OWORD *)v48;
  *(_OWORD *)(a2 + 89) = v43;
  sub_100025480(v11, v13, v30);
  swift_bridgeObjectRetain(v46);
  sub_100025444((uint64_t)v47);
  sub_10007FE94((uint64_t)v53);
  sub_10000B64C(v11, v13, v30);
  return swift_bridgeObjectRelease(v46);
}

void sub_10007DFF4(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5718, a2);
  v7 = v4;
  v6 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v6);
  swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + 17);
}

double sub_10007E080(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5718, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10007FF70, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10007E128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 24);
  v21[1] = *(_QWORD *)(a1 + 16);
  v21[2] = v11;
  v12 = sub_100004F7C(&qword_10011AB88);
  State.wrappedValue.getter(&v22, v12);
  v13 = v22;
  sub_100080688((uint64_t)v6);
  v14 = swift_release(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48))(v6, 1, v7, v14) == 1)
  {
    sub_10000526C((uint64_t)v6, (uint64_t *)&unk_100118CE0);
    v15 = sub_100004F7C(&qword_10011ABD8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
  else
  {
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    __chkstk_darwin(v17);
    v21[-2] = v10;
    v21[-1] = a1;
    v18 = sub_100004F7C(&qword_10011ABF0);
    v19 = sub_10007F8A8();
    NavigationView.init(content:)(sub_10007F8A0, &v21[-4], v18, v19);
    v20 = sub_100004F7C(&qword_10011ABD8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 0, 1, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_10007E308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v30 = a2;
  v33 = a3;
  v4 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShazamCampaignWebView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_10011AC00);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004F7C(&qword_10011AC20);
  v32 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v10, a1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v4);
  v17 = sub_100004864(&qword_100116998, type metadata accessor for ShazamCampaignWebView, (uint64_t)&unk_1000D1BB8);
  View.navigationBarTitleDisplayMode(_:)(v7, v8, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_10000B600((uint64_t)v10, type metadata accessor for ShazamCampaignWebView);
  v35 = v30;
  v18 = sub_100004F7C(&qword_10011AC08);
  v36 = v8;
  v37 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v20 = sub_1000050C8(&qword_10011AC10);
  v21 = sub_10000522C(&qword_10011AC18, &qword_10011AC10, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v36 = v20;
  v37 = v21;
  v22 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_10007F9FC, v34, v11, v18, OpaqueTypeConformance2, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
  if (qword_1001160E0 != -1)
    swift_once(&qword_1001160E0, sub_1000800EC);
  v23 = qword_1001245D0;
  v24 = *(_QWORD *)algn_1001245D8;
  v36 = v11;
  v37 = v18;
  v38 = OpaqueTypeConformance2;
  v39 = v22;
  v25 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
  v26 = v29;
  View.accessibilityIdentifier(_:)(v23, v24, v29, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v26);
}

uint64_t sub_10007E610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;

  v2 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v2);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_100004F7C(&qword_10011AC10);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ToolbarItemPlacement.topBarTrailing.getter(v7);
  v15 = a1;
  v10 = sub_100004F7C(&qword_10011AC28);
  v11 = sub_10007F774(&qword_10011AC30, &qword_10011AC28, (void (*)(void))sub_10007FA0C);
  ToolbarItem<>.init(placement:content:)(v4, sub_10007FA04, v14, v10, v11);
  v12 = sub_10000522C(&qword_10011AC18, &qword_10011AC10, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v5, v12);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10007E758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v33 = a1;
  v38 = a2;
  v2 = type metadata accessor for PlainButtonStyle(0);
  v3 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  v37 = v3;
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlayInAppleMusicView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_10011AC48);
  v11 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  v35 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_10011AC60);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004F7C(&qword_10011AC40);
  __chkstk_darwin(v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B340(v33, (uint64_t)v9, type metadata accessor for PlayInAppleMusicView);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = swift_allocObject(&unk_10010C080, v22 + v8, v21 | 7);
  sub_10007F308((uint64_t)v9, v23 + v22);
  v24 = sub_100004F7C(&qword_10011AC68);
  v25 = sub_10007FC80();
  v26 = Button.init(action:label:)(sub_10007FC38, v23, sub_10007EB10, 0, v24, v25);
  PlainButtonStyle.init()(v26);
  v27 = sub_10000522C(&qword_10011AC50, &qword_10011AC48, (uint64_t)&protocol conformance descriptor for Button<A>);
  v28 = sub_100004864(&qword_10011AC58, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v29 = v34;
  v30 = v36;
  View.buttonStyle<A>(_:)(v5, v34, v36, v27, v28);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v30);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v29);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v17, v14);
  *(_WORD *)&v20[*(int *)(v18 + 36)] = 256;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v31 = sub_10007FA0C();
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001000DBAB0, v18, v31);
  return sub_10000526C((uint64_t)v20, &qword_10011AC40);
}

double sub_10007EA44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  _QWORD v9[2];
  uint64_t v10;

  v9[1] = *(_QWORD *)(a1 + 24);
  v1 = sub_100004F7C(&qword_10011AB88);
  State.wrappedValue.getter(&v10, v1);
  v2 = v10;
  KeyPath = swift_getKeyPath(&unk_1000D5718, v3);
  v7[2] = v2;
  v8 = 0;
  v9[0] = v2;
  v5 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v9, KeyPath, sub_10007FDDC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(v2);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10007EB10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t (*v25)(char *, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t (*v39)(char *, uint64_t, __n128);
  __n128 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a1;
  v1 = type metadata accessor for SymbolVariants(0);
  v42 = *(_QWORD *)(v1 - 8);
  v43 = v1;
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v42 - v5;
  v7 = sub_100004F7C(&qword_10011AC88);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_10011AC78);
  __chkstk_darwin(v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004F7C(&qword_10011AC90);
  v44 = *(_QWORD *)(v14 - 8);
  v45 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100116068 != -1)
    swift_once(&qword_100116068, sub_10007BD40);
  v17 = qword_10011A9D8;
  v18 = unk_10011A9E0;
  swift_bridgeObjectRetain(unk_10011A9E0);
  v19 = Image.init(systemName:)(v17, v18);
  v47 = v19;
  v20 = static Font.Weight.bold.getter(v19);
  View.fontWeight(_:)(*(_QWORD *)&v20, 0, &type metadata for Image);
  swift_release(v19);
  if (qword_100116090 != -1)
    swift_once(&qword_100116090, sub_10007C068);
  v22 = qword_10011AA18;
  KeyPath = swift_getKeyPath(&unk_1000D5790, v21);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v10, v7);
  v24 = (uint64_t *)&v13[*(int *)(v11 + 36)];
  *v24 = KeyPath;
  v24[1] = v22;
  v25 = *(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8);
  v26 = swift_retain(v22);
  v27 = v25(v10, v7, v26);
  v28 = static SymbolVariants.circle.getter(v27);
  SymbolVariants.fill.getter(v28);
  v29 = v43;
  v30 = *(void (**)(char *, uint64_t))(v42 + 8);
  v30(v6, v43);
  v31 = sub_10007FD2C();
  View.symbolVariant(_:)(v4, v11, v31);
  v30(v4, v29);
  sub_10000526C((uint64_t)v13, &qword_10011AC78);
  v32 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  v33 = Color.init(uiColor:)(v32);
  if (qword_100116098 != -1)
    swift_once(&qword_100116098, sub_10007C084);
  v34 = qword_10011AA20;
  v36 = v44;
  v35 = v45;
  v37 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v46, v16, v45);
  v38 = (uint64_t *)(v37 + *(int *)(sub_100004F7C(&qword_10011AC68) + 36));
  *v38 = v33;
  v38[1] = v34;
  v39 = *(uint64_t (**)(char *, uint64_t, __n128))(v36 + 8);
  v40 = swift_retain(v34);
  return v39(v16, v35, v40);
}

void sub_10007EE58(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5740, a2);
  v7 = v4;
  v6 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v6);
  swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + 16);
}

double sub_10007EEE4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5740, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864((unint64_t *)&qword_10011ABE0, type metadata accessor for PlayInAppleMusicViewModel, (uint64_t)&unk_1000D58B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10007F884, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_10007EF8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v2 = type metadata accessor for Logger(0);
    sub_10000B5E8(v2, (uint64_t)qword_100124478);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      swift_errorRetain(a1);
      v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
      *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error presenting music subscription offer: %@", v5, 0xCu);
      v8 = sub_100004F7C((uint64_t *)&unk_100116E50);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_10007F164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = sub_100004F7C(&qword_10011AAC0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.center.getter(v3);
  *((_QWORD *)v5 + 1) = 0x4018000000000000;
  v5[16] = 0;
  v6 = sub_100004F7C(&qword_10011AAC8);
  sub_10007C0C0(v1, &v5[*(int *)(v6 + 44)]);
  if (qword_100116070 != -1)
    swift_once(&qword_100116070, sub_10007BD60);
  v7 = sub_100004F7C(&qword_10011AAD0);
  v8 = sub_10000B5E8(v7, (uint64_t)qword_10011A9E8);
  v9 = sub_10000522C(&qword_10011AAD8, &qword_10011AAC0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v10 = sub_10000522C(&qword_10011AAE0, &qword_10011AAD0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  View.dynamicTypeSize<A>(_:)(v8, v2, v7, v9, v10);
  return sub_10000526C((uint64_t)v5, &qword_10011AAC0);
}

uint64_t sub_10007F2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C(&qword_10011AAD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007F308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PlayInAppleMusicView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007F34C()
{
  return sub_10007FC44((uint64_t (*)(uint64_t))sub_10007CF3C);
}

uint64_t sub_10007F358@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007D6F8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10007F360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011AB40;
  if (!qword_10011AB40)
  {
    v1 = sub_1000050C8(&qword_10011AB38);
    sub_10007F3CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AB40);
  }
  return result;
}

unint64_t sub_10007F3CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011AB48;
  if (!qword_10011AB48)
  {
    v1 = sub_1000050C8(&qword_10011AB50);
    sub_10007F450();
    sub_10000522C(&qword_100116F38, &qword_100116F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AB48);
  }
  return result;
}

unint64_t sub_10007F450()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10011AB58;
  if (!qword_10011AB58)
  {
    v1 = sub_1000050C8(&qword_10011AB60);
    v2[0] = sub_1000050C8(&qword_10011AB68);
    v2[1] = sub_10007F4FC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10000522C((unint64_t *)&qword_100116F68, &qword_100116F70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AB58);
  }
  return result;
}

unint64_t sub_10007F4FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011AB70;
  if (!qword_10011AB70)
  {
    v1 = sub_1000050C8(&qword_10011AB68);
    sub_10000522C(&qword_10011AB78, &qword_10011AB80, (uint64_t)&protocol conformance descriptor for ViewThatFits<A>);
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AB70);
  }
  return result;
}

unint64_t sub_10007F5A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011AB90;
  if (!qword_10011AB90)
  {
    v1 = sub_1000050C8(&qword_10011AB08);
    sub_10000522C(&qword_10011AB98, &qword_10011AB00, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_10000522C(&qword_100117908, &qword_100117910, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AB90);
  }
  return result;
}

unint64_t sub_10007F63C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10011ABA8;
  if (!qword_10011ABA8)
  {
    v1 = sub_1000050C8(&qword_10011AB18);
    v2[0] = sub_1000050C8(&qword_10011AB08);
    v2[1] = type metadata accessor for BorderedProminentButtonStyle(255);
    v2[2] = sub_10007F5A0();
    v2[3] = sub_100004864(&qword_10011ABA0, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_10000522C(&qword_10011A0F8, &qword_100117BE8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011ABA8);
  }
  return result;
}

uint64_t sub_10007F738@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlayInAppleMusicView(0) - 8) + 80);
  return sub_10007E128(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_10007F774(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000050C8(a2);
    a3();
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007F7F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011ABC8;
  if (!qword_10011ABC8)
  {
    v1 = sub_1000050C8(&qword_10011ABB8);
    sub_10000522C(&qword_10011ABD0, &qword_10011ABD8, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10011ABC8);
  }
  return result;
}

uint64_t sub_10007F884()
{
  uint64_t v0;

  return sub_100080BEC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10007F8A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007E308(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10007F8A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_10011ABF8;
  if (!qword_10011ABF8)
  {
    v1 = sub_1000050C8(&qword_10011ABF0);
    v2 = sub_1000050C8(&qword_10011AC00);
    v3 = sub_1000050C8(&qword_10011AC08);
    v8 = type metadata accessor for ShazamCampaignWebView(255);
    v9 = sub_100004864(&qword_100116998, type metadata accessor for ShazamCampaignWebView, (uint64_t)&unk_1000D1BB8);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v5 = sub_1000050C8(&qword_10011AC10);
    v6 = sub_10000522C(&qword_10011AC18, &qword_10011AC10, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v8 = v5;
    v9 = v6;
    v7 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v8 = v2;
    v9 = v3;
    v10 = OpaqueTypeConformance2;
    v11 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_100004864((unint64_t *)&qword_100116570, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011ABF8);
  }
  return result;
}

uint64_t sub_10007F9FC()
{
  uint64_t v0;

  return sub_10007E610(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10007FA04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007E758(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10007FA0C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10011AC38;
  if (!qword_10011AC38)
  {
    v1 = sub_1000050C8(&qword_10011AC40);
    v2[0] = sub_1000050C8(&qword_10011AC48);
    v2[1] = type metadata accessor for PlainButtonStyle(255);
    v2[2] = sub_10000522C(&qword_10011AC50, &qword_10011AC48, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100004864(&qword_10011AC58, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_10000522C(&qword_100118900, &qword_100118908, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AC38);
  }
  return result;
}

uint64_t sub_10007FB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for PlayInAppleMusicView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  if (*(_QWORD *)(v0 + v4))
    swift_release(v6[1]);
  swift_release(v6[2]);
  swift_release(v6[3]);
  v7 = (_QWORD *)((char *)v6 + *(int *)(v1 + 24));
  v8 = sub_100004F7C(&qword_1001166A0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for OpenURLAction(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)((char *)v6 + *(int *)(v1 + 28));
  v11 = sub_100004F7C(&qword_100116698);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10007FC38()
{
  return sub_10007FC44((uint64_t (*)(uint64_t))sub_10007EA44);
}

uint64_t sub_10007FC44(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PlayInAppleMusicView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

unint64_t sub_10007FC80()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10011AC70;
  if (!qword_10011AC70)
  {
    v1 = sub_1000050C8(&qword_10011AC68);
    v2[0] = sub_1000050C8(&qword_10011AC78);
    v2[1] = sub_10007FD2C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    sub_10000522C(&qword_1001178F8, &qword_100117900, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AC70);
  }
  return result;
}

unint64_t sub_10007FD2C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10011AC80;
  if (!qword_10011AC80)
  {
    v1 = sub_1000050C8(&qword_10011AC78);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_10000522C(&qword_100116538, &qword_100116540, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10011AC80);
  }
  return result;
}

uint64_t sub_10007FDDC()
{
  uint64_t v0;

  return sub_100080BF4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10007FDF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_BYTE *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 232);
  v8 = *(_QWORD *)(a1 + 240);
  sub_10000B64C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease(v2);
  sub_10000B64C(v3, v4, v5);
  swift_release(v7);
  swift_bridgeObjectRelease(v6);
  swift_release(v8);
  return a1;
}

uint64_t sub_10007FE94(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10000B64C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10007FED0()
{
  _QWORD v1[4];

  v1[0] = sub_1000050C8(&qword_10011AAC0);
  v1[1] = sub_1000050C8(&qword_10011AAD0);
  v1[2] = sub_10000522C(&qword_10011AAD8, &qword_10011AAC0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v1[3] = sub_10000522C(&qword_10011AAE0, &qword_10011AAD0, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
}

uint64_t sub_10007FF70()
{
  return sub_10007FDDC();
}

void sub_10007FF84()
{
  strcpy((char *)&qword_100124550, "Artist Module");
  *(_WORD *)&algn_100124558[6] = -4864;
}

void sub_10007FFB4()
{
  strcpy((char *)&qword_100124560, "Shazam Counts");
  *(_WORD *)&algn_100124568[6] = -4864;
}

void sub_10007FFE4()
{
  strcpy((char *)&qword_100124570, "Shazam Upsell");
  *(_WORD *)&algn_100124578[6] = -4864;
}

void sub_100080014()
{
  strcpy((char *)&qword_100124580, "Play in Music");
  *(_WORD *)&algn_100124588[6] = -4864;
}

void sub_100080044()
{
  qword_100124590 = 0x694C206572616853;
  *(_QWORD *)algn_100124598 = 0xEA00000000006B6ELL;
}

void sub_10008006C()
{
  strcpy((char *)&qword_1001245A0, "Song Metadata");
  *(_WORD *)&algn_1001245A8[6] = -4864;
}

void sub_10008009C()
{
  qword_1001245B0 = 0x6D75626C41;
  *(_QWORD *)algn_1001245B8 = 0xE500000000000000;
}

void sub_1000800BC()
{
  qword_1001245C0 = 0x20676E697373694DLL;
  *(_QWORD *)algn_1001245C8 = 0xEF6B726F77747261;
}

void sub_1000800EC()
{
  strcpy((char *)&qword_1001245D0, "Campaign Offer");
  algn_1001245D8[7] = -18;
}

void sub_10008011C()
{
  strcpy((char *)&qword_1001245E0, "Offer subtitle");
  algn_1001245E8[7] = -18;
}

void sub_10008014C()
{
  qword_1001245F0 = 0x676E6964616F4CLL;
  *(_QWORD *)algn_1001245F8 = 0xE700000000000000;
}

void sub_100080170()
{
  qword_100124600 = 2036427856;
  *(_QWORD *)algn_100124608 = 0xE400000000000000;
}

void sub_10008018C()
{
  qword_100124610 = 0x6573756150;
  *(_QWORD *)algn_100124618 = 0xE500000000000000;
}

void sub_1000801AC()
{
  qword_100124620 = 0x747542206B636142;
  *(_QWORD *)algn_100124628 = 0xEB000000006E6F74;
}

void sub_1000801D8()
{
  strcpy((char *)&qword_100124630, "Overflow Menu");
  *(_WORD *)&algn_100124638[6] = -4864;
}

void sub_100080208()
{
  qword_100124640 = 0x616853206E65704FLL;
  *(_QWORD *)algn_100124648 = 0xEB000000006D617ALL;
}

void sub_100080234()
{
  qword_100124650 = 0x7473696C79616C50;
  *(_QWORD *)algn_100124658 = 0xE800000000000000;
}

void sub_100080258()
{
  qword_100124660 = 0x532065766F6D6552;
  *(_QWORD *)algn_100124668 = 0xEB00000000676E6FLL;
}

void sub_100080284()
{
  qword_100124670 = 0x7241206D75626C41;
  *(_QWORD *)algn_100124678 = 0xE900000000000074;
}

void sub_1000802AC()
{
  qword_100124680 = 0x6C6F686563616C50;
  *(_QWORD *)algn_100124688 = 0xEB00000000726564;
}

void sub_1000802D8()
{
  qword_100124690 = 0x614C20656C746954;
  *(_QWORD *)algn_100124698 = 0xEB000000006C6562;
}

void sub_100080304()
{
  strcpy((char *)&qword_1001246A0, "Artist Label");
  algn_1001246A8[5] = 0;
  *(_WORD *)&algn_1001246A8[6] = -5120;
}

void sub_100080330()
{
  qword_1001246B0 = 0x62614C2065746144;
  *(_QWORD *)algn_1001246B8 = 0xEA00000000006C65;
}

void sub_100080358()
{
  strcpy((char *)&qword_1001246C0, "Explicit Icon");
  *(_WORD *)&algn_1001246C8[6] = -4864;
}

void sub_100080388()
{
  strcpy((char *)&qword_1001246D0, "Sorting Button");
  algn_1001246D8[7] = -18;
}

void sub_1000803B8()
{
  qword_1001246E0 = 0x6E69646E65637341;
  *(_QWORD *)algn_1001246E8 = 0xE900000000000067;
}

void sub_1000803E0()
{
  qword_1001246F0 = 0x69646E6563736544;
  *(_QWORD *)algn_1001246F8 = 0xEA0000000000676ELL;
}

void sub_100080408()
{
  strcpy((char *)&qword_100124700, "Shazam Count");
  algn_100124708[5] = 0;
  *(_WORD *)&algn_100124708[6] = -5120;
}

void sub_100080434()
{
  strcpy((char *)&qword_100124710, "Group Header");
  algn_100124718[5] = 0;
  *(_WORD *)&algn_100124718[6] = -5120;
}

void sub_100080460()
{
  qword_100124720 = 0x6E6F74747542;
  *(_QWORD *)algn_100124728 = 0xE600000000000000;
}

void sub_100080480()
{
  qword_100124730 = 0x6E696E657473694CLL;
  *(_QWORD *)algn_100124738 = 0xEF656C7469742067;
}

void sub_1000804B0()
{
  strcpy((char *)&qword_100124740, "Cancel button");
  *(_WORD *)&algn_100124748[6] = -4864;
}

void sub_1000804E0()
{
  qword_100124750 = 0x6E20747369747241;
  *(_QWORD *)algn_100124758 = 0xEB00000000656D61;
}

void sub_10008050C()
{
  qword_100124760 = 0x6D616E20676E6F53;
  *(_QWORD *)algn_100124768 = 0xE900000000000065;
}

void sub_100080534()
{
  strcpy((char *)&qword_100124770, "Artwork image");
  *(_WORD *)&algn_100124778[6] = -4864;
}

void sub_100080564()
{
  strcpy((char *)&qword_100124780, "No match title");
  algn_100124788[7] = -18;
}

void sub_100080594()
{
  strcpy((char *)&qword_100124790, "Retry button");
  algn_100124798[5] = 0;
  *(_WORD *)&algn_100124798[6] = -5120;
}

void sub_1000805C0()
{
  qword_1001247A0 = 0x4C206D617A616853;
  *(_QWORD *)algn_1001247A8 = 0xEB000000006F676FLL;
}

void sub_1000805EC()
{
  qword_1001247B0 = 0x6C61727463657053;
  *(_QWORD *)algn_1001247B8 = 0xEF74757074754F20;
}

uint64_t sub_10008061C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5950, a2);
  v6 = v2;
  v4 = sub_100081E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + 17);
}

uint64_t sub_100080688@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t KeyPath;
  unint64_t v10;
  id v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers);
  if (!v8)
    goto LABEL_8;
  KeyPath = swift_getKeyPath(&unk_1000D58D8, v5);
  v22 = v1;
  v10 = sub_100081E10();
  v11 = v8;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, KeyPath, v10);
  swift_release(KeyPath);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token + 8);
  if (!v12
    || !*(_QWORD *)(v2 + 32)
    || !*(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_sourceBundleIdentifier + 8))
  {

LABEL_8:
    v18 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  swift_bridgeObjectRetain(v12);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v16 = objc_msgSend(v11, "campaignURLForTrackID:bundleID:token:", v13, v14, v15);

  if (v16)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v17 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 0, 1, v17);
  }
  else
  {

    v20 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  }
  return sub_100007EE4((uint64_t)v7, a1);
}

uint64_t sub_1000808A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5928, a2);
  v6 = v2;
  v4 = sub_100081E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + 16);
}

uint64_t sub_100080914@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  KeyPath = swift_getKeyPath(&unk_1000D5900, a1);
  v9[0] = v2;
  v5 = sub_100081E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v2 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions, v9, 0, 0);
  v7 = type metadata accessor for MusicSubscriptionOffer.Options(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_1000809C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  int v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t countAndFlagsBits;
  id v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;

  v1 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers);
  if (v4)
  {
    v5 = v4;
    sub_100080688((uint64_t)v3);
    v6 = type metadata accessor for URL(0);
    v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v3, 1, v6);
    sub_100007B24((uint64_t)v3);
    if (v7 == 1 || (v8 = objc_msgSend(v5, "campaignSubtitle")) == 0)
    {
      v9 = objc_msgSend(v5, "defaultSubtitle");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      swift_bridgeObjectRelease(v12);
      v13 = HIBYTE(v12) & 0xF;
      if ((v12 & 0x2000000000000000) == 0)
        v13 = v10 & 0xFFFFFFFFFFFFLL;
      if (!v13)
      {
        v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v25._object = (void *)0xE000000000000000;
        v20._object = (void *)0x80000001000DBCA0;
        v20._countAndFlagsBits = 0xD000000000000028;
        v21._countAndFlagsBits = 0;
        v21._object = (void *)0xE000000000000000;
        v25._countAndFlagsBits = 0;
        countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v14, v21, v25)._countAndFlagsBits;
        goto LABEL_11;
      }
      v8 = objc_msgSend(v5, "defaultSubtitle");
    }
    v14 = v8;
    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
LABEL_11:
    v19 = countAndFlagsBits;

    return v19;
  }
  v16 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v24._object = (void *)0xE000000000000000;
  v17._object = (void *)0x80000001000DBCA0;
  v17._countAndFlagsBits = 0xD000000000000028;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v19 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, (Swift::String_optional)0, (NSBundle)v16, v18, v24)._countAndFlagsBits;

  return v19;
}

uint64_t sub_100080BEC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t sub_100080BF4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 17) = a2;
  return result;
}

uint64_t sub_100080BFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5900, a2);
  v10[0] = v4;
  v6 = sub_100081E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v10, KeyPath, v6);
  swift_release(KeyPath);
  v7 = v4 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions;
  swift_beginAccess(v4 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions, v10, 0, 0);
  v8 = type metadata accessor for MusicSubscriptionOffer.Options(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, v7, v8);
}

uint64_t sub_100080CA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  unint64_t v11;
  __n128 v12;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v4 = type metadata accessor for MusicSubscriptionOffer.Options(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5900, v9);
  v15 = v8;
  v16 = v7;
  v17 = v8;
  v11 = sub_100081E10();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v17, KeyPath, sub_10008242C, v14, (char *)&type metadata for () + 8, v11);
  v12 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v7, v4, v12);
}

uint64_t sub_100080D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = a1 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions, v6, 33, 0);
  v4 = type metadata accessor for MusicSubscriptionOffer.Options(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess(v6);
}

uint64_t sub_100080E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D58D8, a2);
  v7 = v2;
  v4 = sub_100081E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token + 8));
  return v5;
}

uint64_t sub_100080EA0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D58D8, a2);
  v9 = v4;
  v6 = sub_100081E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token + 8);
  *a3 = *(_QWORD *)(v4 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token);
  a3[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_100080F24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D58D8, a2);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_100081E10();
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100081DFC, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100080FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v4[3] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[4] = v5;
  v4[5] = static MainActor.shared.getter(v5);
  v6 = (_QWORD *)swift_task_alloc(dword_10011AE04);
  v4[6] = v6;
  *v6 = v4;
  v6[1] = sub_100081028;
  return sub_100081E58();
}

uint64_t sub_100081028(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 48);
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = a2;
  swift_task_dealloc(v4);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000810A0, v6, v7);
}

uint64_t sub_1000810A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  _QWORD *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  KeyPath = swift_getKeyPath(&unk_1000D58D8, v4);
  v6 = (_QWORD *)swift_task_alloc(48);
  v6[2] = v3;
  v6[3] = v2;
  v6[4] = v1;
  *(_QWORD *)(v0 + 16) = v3;
  v7 = sub_100081E10();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100081DFC, v6, (char *)&type metadata for () + 8, v7);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081170(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_100004F7C(&qword_1001174D8);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v11 = a2;
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v14 = v13;

    v15 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v15 = v12;
    v15[1] = v14;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100081210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicSongURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100007B24(v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicClassicalURL);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_buttonBackgroundColor));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_buttonTextColor));
  v3 = v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions;
  v4 = type metadata accessor for MusicSubscriptionOffer.Options(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_sourceBundleIdentifier
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token + 8));
  v5 = v0 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel___observationRegistrar;
  v6 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_100081314()
{
  uint64_t v0;

  sub_100081210();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100081338()
{
  return type metadata accessor for PlayInAppleMusicViewModel(0);
}

uint64_t type metadata accessor for PlayInAppleMusicViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10011AD08;
  if (!qword_10011AD08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlayInAppleMusicViewModel);
  return result;
}

void sub_10008137C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[13];

  v10[0] = &unk_1000D5870;
  v10[1] = &unk_1000D5870;
  v10[2] = &unk_1000D5888;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v10[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10000880C(319);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      v10[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v10[6] = (char *)&value witness table for Builtin.NativeObject + 64;
      v10[7] = &unk_1000D5870;
      v6 = type metadata accessor for MusicSubscriptionOffer.Options(319);
      if (v7 <= 0x3F)
      {
        v10[8] = *(_QWORD *)(v6 - 8) + 64;
        v10[9] = &unk_1000D58A0;
        v10[10] = &unk_1000D5888;
        v10[11] = &unk_1000D5888;
        v8 = type metadata accessor for ObservationRegistrar(319);
        if (v9 <= 0x3F)
        {
          v10[12] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 13, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t sub_100081474(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t KeyPath;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[4];

  v19 = v18;
  v83 = a6;
  v84 = a7;
  v82 = a5;
  v88 = a3;
  v81 = a1;
  v85 = a9;
  v86 = a8;
  v79 = a18;
  v80 = a4;
  v76 = a15;
  v77 = a17;
  v75 = a14;
  v78 = a11;
  v21 = type metadata accessor for MusicSubscriptionOffer.MessageIdentifier(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for MusicSubscriptionOffer.Action(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for MusicSubscriptionOffer.Options(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)(v19 + 16) = 0;
  v32 = static MusicSubscriptionOffer.Action.subscribe.getter(v29);
  static MusicSubscriptionOffer.MessageIdentifier.join.getter(v32);
  v33 = MusicSubscriptionOffer.Options.init(action:messageIdentifier:itemID:affiliateToken:campaignToken:)(v26, v23, 0, 0, 0, 0, 0, 0);
  static MusicSubscriptionOffer.MessageIdentifier.playMusic.getter(v33);
  MusicSubscriptionOffer.Options.messageIdentifier.setter(v23);
  v34 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions, v31, v27);
  v35 = (_QWORD *)(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token);
  *v35 = 0;
  v35[1] = 0;
  ObservationRegistrar.init()(v34);
  v36 = (_QWORD *)(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_sourceBundleIdentifier);
  *v36 = a12;
  v36[1] = a13;
  v37 = v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicSongURL;
  v38 = type metadata accessor for URL(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  v87 = a2;
  v40(v37, a2, v38);
  v41 = v76;
  *(_QWORD *)(v19 + 24) = v75;
  *(_QWORD *)(v19 + 32) = v41;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_offers) = a16;
  v42 = v35[1];
  v43 = a16;
  swift_bridgeObjectRelease(v42);
  v44 = v78;
  v45 = v79;
  *v35 = v77;
  v35[1] = v45;
  v46 = v80;
  sub_100008944(v88, v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_appleMusicClassicalURL);
  v47 = v82;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_shouldDisplayAppleClassicalFeatures) = v81;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_buttonTextColor) = v47;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel_buttonBackgroundColor) = v46;
  swift_retain(v47);
  if (v44)
  {
    v48 = swift_retain(v46);
    v49 = MusicItemID.init(_:)(a10, v44, v48);
    v50 = v39;
    v52 = v51;
    KeyPath = swift_getKeyPath(&unk_1000D5900, v51);
    v89[0] = v19;
    v54 = sub_100081E10();
    ObservationRegistrar.access<A, B>(_:keyPath:)(v89, KeyPath, v54);
    swift_release(KeyPath);
    v89[0] = v19;
    v56 = swift_getKeyPath(&unk_1000D5900, v55);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v89, v56, v54);
    swift_release(v56);
    swift_beginAccess(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions, v89, 33, 0);
    v57 = v52;
    v39 = v50;
    MusicSubscriptionOffer.Options.itemID.setter(v49, v57);
    swift_endAccess(v89);
    v89[0] = v19;
    v59 = swift_getKeyPath(&unk_1000D5900, v58);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v89, v59, v54);
    swift_release(v59);
  }
  else
  {
    swift_retain(v46);
  }
  v61 = swift_getKeyPath(&unk_1000D5900, v60);
  v89[0] = v19;
  v62 = sub_100081E10();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v89, v61, v62);
  swift_release(v61);
  v89[0] = v19;
  v64 = swift_getKeyPath(&unk_1000D5900, v63);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v89, v64, v62);
  swift_release(v64);
  v65 = v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions;
  swift_beginAccess(v19 + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__subscriptionOfferOptions, v89, 33, 0);
  MusicSubscriptionOffer.Options.figaroCampaignToken.setter(v83, v84);
  swift_endAccess(v89);
  v89[0] = v19;
  v67 = swift_getKeyPath(&unk_1000D5900, v66);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v89, v67, v62);
  swift_release(v67);
  v69 = swift_getKeyPath(&unk_1000D5900, v68);
  v89[0] = v19;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v89, v69, v62);
  swift_release(v69);
  v89[0] = v19;
  v71 = swift_getKeyPath(&unk_1000D5900, v70);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v89, v71, v62);
  swift_release(v71);
  swift_beginAccess(v65, v89, 33, 0);
  MusicSubscriptionOffer.Options.figaroCampaignGroup.setter(v86, v85);
  swift_endAccess(v89);
  v89[0] = v19;
  v73 = swift_getKeyPath(&unk_1000D5900, v72);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v89, v73, v62);
  swift_release(v73);
  sub_100007B24(v88);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v87, v38);
  return v19;
}

uint64_t sub_10008197C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12, void *a13)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t KeyPath;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v56 = a7;
  v57 = a8;
  v54 = a10;
  v55 = a9;
  v53 = a11;
  v19 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v19);
  v52 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v21);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for URL(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v51 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v28;
  v59 = v27;
  v29 = *(void (**)(char *, uint64_t))(v28 + 16);
  v61 = a2;
  v29(v26, a2);
  v60 = a3;
  sub_100008944(a3, (uint64_t)v23);
  v30 = type metadata accessor for PlayInAppleMusicViewModel(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  v31 = a13;
  swift_retain(a4);
  swift_retain(a5);
  v32 = v31;
  v33 = sub_100081474(a1, (uint64_t)v26, (uint64_t)v23, a4, a5, a6, v56, v57, v55, *((uint64_t *)&v55 + 1), v54, *((uint64_t *)&v54 + 1), v53, *((uint64_t *)&v53 + 1), a12, a13, 0, 0);
  swift_release(a4);
  swift_release(a5);

  v34 = (void *)objc_opt_self(NSProcessInfo);
  v35 = objc_msgSend(v34, "processInfo", swift_retain(v33).n128_f64[0]);
  v36 = objc_msgSend(v35, "arguments");

  v37 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for String);
  LOBYTE(v36) = sub_100041098(0xD000000000000036, 0x80000001000DA420, v37);
  swift_bridgeObjectRelease(v37);
  if ((v36 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1000D58D8, v38);
    __chkstk_darwin(KeyPath);
    v49 = v33;
    v50 = xmmword_1000D5820;
    v62 = v33;
    v40 = sub_100081E10();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v62, KeyPath, sub_100081DFC, &v48, (char *)&type metadata for () + 8, v40);
    swift_release(a4);
    swift_release(a5);

    swift_release(v33);
    swift_release(KeyPath);
  }
  else
  {
    v41 = type metadata accessor for TaskPriority(0);
    v42 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v52, 1, 1, v41);
    type metadata accessor for MainActor(0);
    swift_retain(v33);
    v44 = static MainActor.shared.getter(v43);
    v45 = (_QWORD *)swift_allocObject(&unk_10010C100, 40, 7);
    v45[2] = v44;
    v45[3] = &protocol witness table for MainActor;
    v45[4] = v33;
    v46 = sub_1000A9F18(v42, (uint64_t)&unk_10011ADF8, (uint64_t)v45);
    swift_release(a4);
    swift_release(a5);

    swift_release(v46);
    swift_release(v33);
  }
  sub_100007B24(v60);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v61, v59);
  return v33;
}

uint64_t sub_100081D5C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100081D88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10011ADF4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000101B8;
  return sub_100080FC8(a1, v4, v5, v6);
}

uint64_t sub_100081DFC()
{
  return sub_1000823DC();
}

unint64_t sub_100081E10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10011ABE0;
  if (!qword_10011ABE0)
  {
    v1 = type metadata accessor for PlayInAppleMusicViewModel(255);
    result = swift_getWitnessTable(&unk_1000D58B8, v1);
    atomic_store(result, (unint64_t *)&qword_10011ABE0);
  }
  return result;
}

uint64_t sub_100081E58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for CharacterSet(0);
  v0[20] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[21] = v2;
  v0[22] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for MainActor(0);
  v0[23] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v0[24] = v4;
  v0[25] = v5;
  return swift_task_switch(sub_100081EE8, v4, v5);
}

uint64_t sub_100081EE8()
{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned int v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = (void *)objc_opt_self(DCDevice);
  v2 = objc_msgSend(v1, "currentDevice");
  v3 = objc_msgSend(v2, "isSupported");

  if (v3)
  {
    v4 = v0 + 16;
    v5 = objc_msgSend(v1, "currentDevice");
    *(_QWORD *)(v0 + 208) = v5;
    *(_QWORD *)(v0 + 56) = v0 + 120;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1000820B8;
    v6 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v7 = (_QWORD *)(v0 + 80);
    v7[1] = 0x40000000;
    v7[2] = sub_100081170;
    v7[3] = &unk_10010C118;
    v7[4] = v6;
    objc_msgSend(v5, "generateTokenWithCompletionHandler:", v7);
    return swift_continuation_await(v4);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 184));
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10000B5E8(v9, (uint64_t)qword_100124478);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "DeviceCheck API is not supported on this device", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
  }
}

uint64_t sub_1000820B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 216) = v2;
  if (v2)
    v3 = sub_1000821EC;
  else
    v3 = sub_100082114;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 200));
}

uint64_t sub_100082114()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 184));
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = Data.base64EncodedString(options:)(0);
  sub_10004B228(v5, v6);

  *(Swift::String *)(v0 + 136) = v7;
  static CharacterSet.urlQueryAllowed.getter();
  v8 = sub_10000B110();
  v9 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v2, &type metadata for String, v8);
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease(v7._object);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v11);
}

uint64_t sub_1000821EC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 208);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_willThrow(v2);

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = type metadata accessor for Logger(0);
  sub_10000B5E8(v4, (uint64_t)qword_100124478);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 216);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 152) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error generating token with DeviceCheck API: %@", v10, 0xCu);
    v13 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 216));
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

uint64_t sub_1000823DC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[4];
  v2 = (_QWORD *)(v0[2] + OBJC_IVAR____TtC16MusicRecognition25PlayInAppleMusicViewModel__token);
  v3 = v2[1];
  *v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10008242C()
{
  uint64_t v0;

  return sub_100080D9C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_100082454(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  objc_class *ObjectType;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  id v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  objc_super v23;

  ObjectType = (objc_class *)swift_getObjectType(v6, a6);
  v12 = &v6[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_retryHandler];
  *(_QWORD *)v12 = nullsub_1;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v6[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_cancellationHandler];
  *(_QWORD *)v13 = nullsub_1;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v6[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_appleMusicURLHandler];
  *(_QWORD *)v14 = nullsub_1;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v6[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_displayMatchedMediaItemHandler];
  *(_QWORD *)v15 = nullsub_1;
  *((_QWORD *)v15 + 1) = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchedMediaItem] = 0;
  v16 = OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView;
  v17 = objc_allocWithZone((Class)type metadata accessor for ListeningView());
  v18 = v6;
  *(_QWORD *)&v6[v16] = objc_msgSend(v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v19 = OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchView;
  *(_QWORD *)&v18[v19] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v20 = OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_noMatchView;
  *(_QWORD *)&v18[v20] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NoMatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v23.receiver = v18;
  v23.super_class = ObjectType;
  v21 = objc_msgSendSuper2(&v23, "initWithFrame:", a1, a2, a3, a4);
  sub_1000825F8();

  return v21;
}

void sub_1000825F8()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  Class isa;

  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = *(char **)&v0[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView];
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v1);
  v2 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchView];
  objc_msgSend(v2, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v2);
  v3 = *(void **)&v0[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_noMatchView];
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v0, "addSubview:", v3);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC16MusicRecognition13ListeningView_cancelButton], "addTarget:action:forControlEvents:", v0, "cancelAction", 64);
  v4 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "displayMatchedMediaItemAction");
  objc_msgSend(v2, "addGestureRecognizer:", v4);

  v5 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "retryAction");
  objc_msgSend(v3, "addGestureRecognizer:", v5);

  v45 = (void *)objc_opt_self(NSLayoutConstraint);
  v6 = sub_100004F7C(&qword_100116D90);
  v7 = swift_allocObject(v6, 128, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000D3D40;
  v8 = objc_msgSend(v1, "topAnchor");
  v9 = objc_msgSend(v0, "topAnchor");
  v10 = objc_msgSend(v8, "constraintEqualToAnchor:", v9);

  *(_QWORD *)(v7 + 32) = v10;
  v11 = objc_msgSend(v1, "bottomAnchor");
  v12 = objc_msgSend(v0, "bottomAnchor");
  v13 = objc_msgSend(v11, "constraintEqualToAnchor:", v12);

  *(_QWORD *)(v7 + 40) = v13;
  v14 = objc_msgSend(v1, "leadingAnchor");
  v15 = objc_msgSend(v0, "leadingAnchor");
  v16 = objc_msgSend(v14, "constraintEqualToAnchor:", v15);

  *(_QWORD *)(v7 + 48) = v16;
  v17 = objc_msgSend(v1, "trailingAnchor");
  v18 = objc_msgSend(v0, "trailingAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  *(_QWORD *)(v7 + 56) = v19;
  v20 = objc_msgSend(v3, "topAnchor");
  v21 = objc_msgSend(v0, "topAnchor");
  v22 = objc_msgSend(v20, "constraintEqualToAnchor:", v21);

  *(_QWORD *)(v7 + 64) = v22;
  v23 = objc_msgSend(v3, "bottomAnchor");
  v24 = objc_msgSend(v0, "bottomAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v7 + 72) = v25;
  v26 = objc_msgSend(v3, "leadingAnchor");
  v27 = objc_msgSend(v0, "leadingAnchor");
  v28 = objc_msgSend(v26, "constraintEqualToAnchor:", v27);

  *(_QWORD *)(v7 + 80) = v28;
  v29 = objc_msgSend(v3, "trailingAnchor");
  v30 = objc_msgSend(v0, "trailingAnchor");
  v31 = objc_msgSend(v29, "constraintEqualToAnchor:", v30);

  *(_QWORD *)(v7 + 88) = v31;
  v32 = objc_msgSend(v2, "topAnchor");
  v33 = objc_msgSend(v0, "topAnchor");
  v34 = objc_msgSend(v32, "constraintEqualToAnchor:", v33);

  *(_QWORD *)(v7 + 96) = v34;
  v35 = objc_msgSend(v2, "bottomAnchor");
  v36 = objc_msgSend(v0, "bottomAnchor");
  v37 = objc_msgSend(v35, "constraintEqualToAnchor:", v36);

  *(_QWORD *)(v7 + 104) = v37;
  v38 = objc_msgSend(v2, "leadingAnchor");
  v39 = objc_msgSend(v0, "leadingAnchor");
  v40 = objc_msgSend(v38, "constraintEqualToAnchor:", v39);

  *(_QWORD *)(v7 + 112) = v40;
  v41 = objc_msgSend(v2, "trailingAnchor");
  v42 = objc_msgSend(v0, "trailingAnchor");
  v43 = objc_msgSend(v41, "constraintEqualToAnchor:", v42);

  *(_QWORD *)(v7 + 120) = v43;
  specialized Array._endMutation()(v44);
  sub_100010498(0, (unint64_t *)&qword_1001177E0, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v45, "activateConstraints:", isa);

}

id sub_100082C78(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  objc_super v19;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  v6 = &v3[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_retryHandler];
  *(_QWORD *)v6 = nullsub_1;
  *((_QWORD *)v6 + 1) = 0;
  v7 = &v3[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_cancellationHandler];
  *(_QWORD *)v7 = nullsub_1;
  *((_QWORD *)v7 + 1) = 0;
  v8 = &v3[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_appleMusicURLHandler];
  *(_QWORD *)v8 = nullsub_1;
  *((_QWORD *)v8 + 1) = 0;
  v9 = &v3[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_displayMatchedMediaItemHandler];
  *(_QWORD *)v9 = nullsub_1;
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchedMediaItem] = 0;
  v10 = OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView;
  v11 = objc_allocWithZone((Class)type metadata accessor for ListeningView());
  v12 = v3;
  *(_QWORD *)&v3[v10] = objc_msgSend(v11, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchView;
  *(_QWORD *)&v12[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v14 = OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_noMatchView;
  *(_QWORD *)&v12[v14] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NoMatchView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);

  v19.receiver = v12;
  v19.super_class = ObjectType;
  v15 = objc_msgSendSuper2(&v19, "initWithCoder:", a1);
  v16 = v15;
  if (v15)
  {
    v17 = v15;
    sub_1000825F8();

  }
  return v16;
}

uint64_t type metadata accessor for MatchingFlowCustomView()
{
  return objc_opt_self(_TtC16MusicRecognition22MatchingFlowCustomView);
}

id sub_100082EFC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView);
  objc_msgSend(v1, "setHidden:", 0);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_noMatchView);
  if ((objc_msgSend(v2, "isHidden") & 1) == 0)
  {
    v3 = objc_msgSend(v2, "layer");
    v4 = objc_msgSend(v1, "layer");
    sub_100083B5C(v3, v4);

  }
  objc_msgSend(v2, "setHidden:", 1);
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchView), "setHidden:", 1);
}

void sub_100082FD0(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  NSString v31;
  id v32;
  NSString v33;
  char v34;
  uint64_t v35;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)&v1[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchedMediaItem];
  *(_QWORD *)&v1[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchedMediaItem] = a1;

  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  type metadata accessor for MainActor(0);
  v15 = a1;
  v16 = v1;
  v17 = static MainActor.shared.getter(v16);
  v18 = (_QWORD *)swift_allocObject(&unk_10010C178, 48, 7);
  v18[2] = v17;
  v18[3] = &protocol witness table for MainActor;
  v18[4] = v16;
  v18[5] = v15;
  v19 = sub_1000A9F18((uint64_t)v12, (uint64_t)&unk_10011AF10, (uint64_t)v18);
  swift_release(v19);
  v20 = *(char **)&v16[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchView];
  v21 = *(id *)&v20[OBJC_IVAR____TtC16MusicRecognition9MatchView_titleLabel];
  v22 = objc_msgSend(v15, "title");
  objc_msgSend(v21, "setText:", v22);

  v23 = *(id *)&v20[OBJC_IVAR____TtC16MusicRecognition9MatchView_artistLabel];
  v24 = objc_msgSend(v15, "artist");
  objc_msgSend(v23, "setText:", v24);

  objc_msgSend(*(id *)&v20[OBJC_IVAR____TtC16MusicRecognition9MatchView_appleMusicButton], "addTarget:action:forControlEvents:", v16, "appleMusicButtonAction", 64);
  objc_msgSend(*(id *)&v16[OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_noMatchView], "setHidden:", 1);
  objc_msgSend(v20, "setHidden:", 0);
  v25 = objc_msgSend(v15, "appleMusicURL");
  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, 1, 1, v3);
    goto LABEL_7;
  }
  v26 = v25;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v6, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
LABEL_7:
    sub_100007B24((uint64_t)v9);
    v34 = 0;
    goto LABEL_8;
  }
  sub_100007B24((uint64_t)v9);
  if (qword_100116038 != -1)
    swift_once(&qword_100116038, sub_100073F7C);
  v27 = *(_QWORD *)algn_10011A5D8;
  v28 = objc_allocWithZone((Class)LSApplicationWorkspace);
  swift_bridgeObjectRetain(v27);
  v29 = objc_msgSend(v28, "init");
  v30 = (void *)objc_opt_self(APApplication);
  swift_bridgeObjectRetain(v27);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v32 = objc_msgSend(v30, "applicationWithBundleIdentifier:", v31);

  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v29, "applicationIsInstalled:", v33);

  swift_bridgeObjectRelease(v27);
LABEL_8:
  sub_10008EE70(v34);
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, *(id *)&v20[OBJC_IVAR____TtC16MusicRecognition9MatchView_stackView]);
}

uint64_t sub_100083414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[5] = v7;
  v5[6] = v8;
  return swift_task_switch(sub_100083480, v7, v8);
}

uint64_t sub_100083480()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  id v3;
  _QWORD *v4;

  v1 = v0[2];
  v2 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView), "layer"));
  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchView), "layer"));
  sub_100083B5C(v2, v3);

  v4 = (_QWORD *)swift_task_alloc(dword_10011B28C);
  v0[7] = v4;
  *v4 = v0;
  v4[1] = sub_100083538;
  return sub_10008EBFC(v0[3]);
}

uint64_t sub_100083538()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return swift_task_switch(sub_1000482F4, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void sub_100083584(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_noMatchView);
  objc_msgSend(v3, "setHidden:", 0);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchView), "setHidden:", 1);
  v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_listeningView), "layer"));
  v5 = objc_msgSend(v3, "layer");
  sub_100083B5C(v4, v5);

  sub_10009AB34(a1);
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, v3);
}

uint64_t sub_10008364C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(char *, __n128);
  __n128 v18;
  __n128 v19;
  uint64_t v20;

  v1 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v20 - v5;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v0 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_matchedMediaItem);
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    return sub_100007B24((uint64_t)v6);
  }
  v12 = objc_msgSend(v11, "appleMusicURL");
  if (v12)
  {
    v13 = v12;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v12);

    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, v14, 1, v7);
  sub_100007EE4((uint64_t)v4, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    return sub_100007B24((uint64_t)v6);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  v17 = *(void (**)(char *, __n128))(v0
                                              + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_appleMusicURLHandler);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16MusicRecognition22MatchingFlowCustomView_appleMusicURLHandler + 8);
  v18 = swift_retain(v16);
  v17(v10, v18);
  v19 = swift_release(v16);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v19);
}

uint64_t sub_10008384C(char *a1, uint64_t a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  char *v6;
  uint64_t v7;

  v3 = &a1[*a3];
  v5 = *(void (**)(uint64_t))v3;
  v4 = *((_QWORD *)v3 + 1);
  v6 = a1;
  v7 = swift_retain(v4);
  v5(v7);

  return swift_release(v4);
}

uint64_t sub_100083910()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100083944(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10011AF0C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1000101B8;
  return sub_100083414(a1, v4, v5, v7, v6);
}

void sub_1000839BC()
{
  qword_10011AE08 = 0x7974696361706FLL;
  unk_10011AE10 = 0xE700000000000000;
}

CAMediaTimingFillMode sub_1000839E0()
{
  qword_10011AE18 = (uint64_t)kCAFillModeForwards;
  return kCAFillModeForwards;
}

void sub_1000839F8()
{
  strcpy((char *)&qword_10011AE20, "fromLayerBlur");
  *(_WORD *)&algn_10011AE28[6] = -4864;
}

void sub_100083A28()
{
  qword_10011AE30 = 0x42726579614C6F74;
  *(_QWORD *)algn_10011AE38 = 0xEB0000000072756CLL;
}

void sub_100083A54()
{
  strcpy((char *)&qword_10011AE40, "toLayerOpacity");
  algn_10011AE48[7] = -18;
}

void sub_100083A84()
{
  strcpy((char *)&qword_10011AE50, "gaussianBlur");
  algn_10011AE58[5] = 0;
  *(_WORD *)&algn_10011AE58[6] = -5120;
}

void sub_100083AB0()
{
  qword_10011AE60 = 0x746C7561666564;
  *(_QWORD *)algn_10011AE68 = 0xE700000000000000;
}

void sub_100083AD4()
{
  strcpy((char *)&qword_10011AE70, "inputQuality");
  algn_10011AE78[5] = 0;
  *(_WORD *)&algn_10011AE78[6] = -5120;
}

void sub_100083B00()
{
  qword_10011AE80 = 0x6461527475706E69;
  *(_QWORD *)algn_10011AE88 = 0xEB00000000737569;
}

void sub_100083B2C()
{
  strcpy((char *)&qword_10011AE90, "inputHardEdges");
  algn_10011AE98[7] = -18;
}

void sub_100083B5C(void *a1, void *a2)
{
  NSString v2;
  void *v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  Class v8;
  NSString v9;
  id v10;
  id v11;
  Class v12;
  Class v13;
  uint64_t v14;
  NSString v15;
  id v16;
  id v17;
  Class v18;
  Class v19;
  uint64_t v20;
  NSString v21;
  id v22;
  id v23;
  Class v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  NSString v31;
  NSString v32;
  NSString v33;
  NSString v34;
  NSString v35;
  NSNumber v36;
  NSString v37;
  Class v38;
  NSString v39;
  NSNumber v40;
  NSString v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Class v47;
  uint64_t v48;
  id v49;
  Class v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  NSString v55;
  NSString v56;
  NSString v57;
  NSString v58;
  void *v61;
  _QWORD aBlock[5];
  uint64_t v63;

  v2 = String._bridgeToObjectiveC()();
  v3 = (void *)objc_opt_self(CASpringAnimation);
  v4 = objc_msgSend(v3, "animationWithKeyPath:", v2);

  v5 = v4;
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v5, "setFromValue:", isa);

  v7 = v5;
  v8 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v7, "setToValue:", v8);

  objc_msgSend(v7, "setMass:", 0.513);
  objc_msgSend(v7, "setStiffness:", 76.956);
  objc_msgSend(v7, "setDamping:", 72.0);
  objc_msgSend(v7, "setBeginTime:", CACurrentMediaTime());
  objc_msgSend(v7, "setRemovedOnCompletion:", 0);
  if (qword_1001161E0 != -1)
    swift_once(&qword_1001161E0, sub_1000839E0);
  v61 = v7;
  objc_msgSend(v7, "setFillMode:", qword_10011AE18);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v3, "animationWithKeyPath:", v9);

  v11 = v10;
  v12 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v11, "setFromValue:", v12);

  v13 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v11, "setToValue:", v13);

  objc_msgSend(v11, "setMass:", 0.513);
  objc_msgSend(v11, "setStiffness:", 76.956);
  objc_msgSend(v11, "setDamping:", 72.0);
  objc_msgSend(v11, "setBeginTime:", CACurrentMediaTime());
  objc_msgSend(v11, "setRemovedOnCompletion:", 0);
  objc_msgSend(v11, "setFillMode:", qword_10011AE18);
  if (qword_1001161D8 != -1)
    swift_once(&qword_1001161D8, sub_1000839BC);
  v14 = unk_10011AE10;
  swift_bridgeObjectRetain(unk_10011AE10);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v16 = objc_msgSend(v3, "animationWithKeyPath:", v15);

  v17 = v16;
  v18 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v17, "setFromValue:", v18);

  v19 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v17, "setToValue:", v19);

  objc_msgSend(v17, "setMass:", 0.513);
  objc_msgSend(v17, "setStiffness:", 76.956);
  objc_msgSend(v17, "setDamping:", 72.0);
  objc_msgSend(v17, "setBeginTime:", CACurrentMediaTime());
  objc_msgSend(v17, "setRemovedOnCompletion:", 0);
  objc_msgSend(v17, "setFillMode:", qword_10011AE18);
  v20 = unk_10011AE10;
  swift_bridgeObjectRetain(unk_10011AE10);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v22 = objc_msgSend(v3, "animationWithKeyPath:", v21);

  v23 = v22;
  v24 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v23, "setFromValue:", v24);

  v25 = Double._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v23, "setToValue:", v25);

  objc_msgSend(v23, "setMass:", 0.513);
  objc_msgSend(v23, "setStiffness:", 76.956);
  objc_msgSend(v23, "setDamping:", 72.0);
  objc_msgSend(v23, "setBeginTime:", CACurrentMediaTime());
  objc_msgSend(v23, "setRemovedOnCompletion:", 0);
  objc_msgSend(v23, "setFillMode:", qword_10011AE18);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterGaussianBlur);
  v27 = v26;
  v28 = objc_allocWithZone((Class)CAFilter);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v30 = objc_msgSend(v28, "initWithType:", v29);

  if (qword_100116200 != -1)
    swift_once(&qword_100116200, sub_100083A84);
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setName:", v31);

  if (qword_100116208 != -1)
    swift_once(&qword_100116208, sub_100083AB0);
  v32 = String._bridgeToObjectiveC()();
  if (qword_100116210 != -1)
    swift_once(&qword_100116210, sub_100083AD4);
  v33 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setValue:forKey:", v32, v33);

  v34 = String._bridgeToObjectiveC()();
  v35 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setValue:forKey:", v34, v35);

  v36.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
  if (qword_100116218 != -1)
    swift_once(&qword_100116218, sub_100083B00);
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setValue:forKey:", v36.super.super.isa, v37);

  v38 = Bool._bridgeToObjectiveC()().super.super.isa;
  v39 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setValue:forKey:", v38, v39);

  v40.super.super.isa = Bool._bridgeToObjectiveC()().super.super.isa;
  if (qword_100116220 != -1)
    swift_once(&qword_100116220, sub_100083B2C);
  v41 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setValue:forKey:", v40.super.super.isa, v41);

  v42 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v42, "begin");
  objc_msgSend(v42, "setAnimationDuration:", 0.8);
  v43 = sub_100004F7C(&qword_10011AF18);
  v44 = swift_allocObject(v43, 64, 7);
  *(_OWORD *)(v44 + 16) = xmmword_1000D1CC0;
  v45 = sub_100010498(0, &qword_10011AF20, CAFilter_ptr);
  *(_QWORD *)(v44 + 56) = v45;
  *(_QWORD *)(v44 + 32) = v30;
  v46 = v30;
  v47 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v44);
  objc_msgSend(a1, "setFilters:", v47);

  v48 = swift_allocObject(v43, 64, 7);
  *(_OWORD *)(v48 + 16) = xmmword_1000D1CC0;
  *(_QWORD *)(v48 + 56) = v45;
  *(_QWORD *)(v48 + 32) = v46;
  v49 = v46;
  v50 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v48);
  objc_msgSend(a2, "setFilters:", v50);

  v51 = swift_allocObject(&unk_10010C1A0, 24, 7);
  *(_QWORD *)(v51 + 16) = a1;
  aBlock[4] = sub_10008465C;
  v63 = v51;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5684;
  aBlock[3] = &unk_10010C1B8;
  v52 = _Block_copy(aBlock);
  v53 = v63;
  v54 = a1;
  swift_release(v53);
  objc_msgSend(v42, "setCompletionBlock:", v52);
  _Block_release(v52);
  if (qword_1001161E8 != -1)
    swift_once(&qword_1001161E8, sub_1000839F8);
  v55 = String._bridgeToObjectiveC()();
  objc_msgSend(v54, "addAnimation:forKey:", v61, v55);

  v56 = String._bridgeToObjectiveC()();
  objc_msgSend(v54, "addAnimation:forKey:", v17, v56);

  if (qword_1001161F0 != -1)
    swift_once(&qword_1001161F0, sub_100083A28);
  v57 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "addAnimation:forKey:", v11, v57);

  if (qword_1001161F8 != -1)
    swift_once(&qword_1001161F8, sub_100083A54);
  v58 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "addAnimation:forKey:", v23, v58);

  objc_msgSend(v42, "commit");
}

uint64_t sub_100084638()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10008465C()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "setHidden:", 1);
}

uint64_t sub_100084670(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100084680(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100084688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v16;

  v6 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007C8C(a1, (uint64_t)v8, (uint64_t *)&unk_100118CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10000526C((uint64_t)v8, (uint64_t *)&unk_100118CE0);
    v13 = 1;
  }
  else
  {
    v14 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v14(v12, v8, v9);
    if (*(_QWORD *)(a2 + 16))
    {
      URL.appending(queryItems:)(a2);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    else
    {
      v14(a3, v12, v9);
    }
    v13 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v13, 1, v9);
}

uint64_t sub_1000847E8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1000D5D58, a1);
  v7[0] = v2;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 32, v7, 0, 0);
  return sub_100043E28(v2 + 32, a2);
}

uint64_t sub_100084890()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1[311] = v0;
  v2 = sub_100004F7C(&qword_100118580);
  v1[312] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for AnyArtist(0);
  v1[313] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[314] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[315] = swift_task_alloc(v5);
  v1[316] = swift_task_alloc(v5);
  v6 = type metadata accessor for AnyAlbum(0);
  v1[317] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[318] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[319] = swift_task_alloc(v8);
  v1[320] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100004F7C((uint64_t *)&unk_100118CE0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[321] = swift_task_alloc(v9);
  v1[322] = swift_task_alloc(v9);
  v1[323] = swift_task_alloc(v9);
  v10 = type metadata accessor for AnySong(0);
  v1[324] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[325] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[326] = swift_task_alloc(v12);
  v1[327] = swift_task_alloc(v12);
  v13 = type metadata accessor for Album(0);
  v1[328] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[329] = v14;
  v1[330] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Artist(0);
  v1[331] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v1[332] = v16;
  v1[333] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Song(0);
  v1[334] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v1[335] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[336] = swift_task_alloc(v19);
  v1[337] = swift_task_alloc(v19);
  v20 = (*(_QWORD *)(*(_QWORD *)(sub_100004F7C(&qword_10011B0C8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[338] = swift_task_alloc(v20);
  v1[339] = swift_task_alloc(v20);
  v21 = (*(_QWORD *)(*(_QWORD *)(sub_100004F7C(&qword_10011B0D0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[340] = swift_task_alloc(v21);
  v1[341] = swift_task_alloc(v21);
  v22 = (*(_QWORD *)(*(_QWORD *)(sub_100004F7C(&qword_10011B0D8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[342] = swift_task_alloc(v22);
  v1[343] = swift_task_alloc(v22);
  v23 = sub_100004F7C(&qword_10011B0E0);
  v1[344] = v23;
  v24 = (*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[345] = swift_task_alloc(v24);
  v1[346] = swift_task_alloc(v24);
  v25 = type metadata accessor for TrackPageMetadata(0);
  v1[347] = v25;
  v26 = (*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[348] = swift_task_alloc(v26);
  v1[349] = swift_task_alloc(v26);
  v27 = type metadata accessor for MusicSubscription(0);
  v1[350] = v27;
  v28 = *(_QWORD *)(v27 - 8);
  v1[351] = v28;
  v1[352] = swift_task_alloc((*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004F7C(&qword_1001174E0);
  v1[353] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for MainActor(0);
  v1[354] = static MainActor.shared.getter(v30);
  v31 = dispatch thunk of Actor.unownedExecutor.getter(v30, &protocol witness table for MainActor);
  v1[355] = v31;
  v1[356] = v32;
  return swift_task_switch(sub_100084BE8, v31, v32);
}

uint64_t sub_100084BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10000B5E8(v1, (uint64_t)qword_100124478);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Loading Native Track Page", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 2488);

  KeyPath = swift_getKeyPath(&unk_1000D5D30, v7);
  *(_QWORD *)(v0 + 2856) = OBJC_IVAR____TtC16MusicRecognition18TrackPageViewModel___observationRegistrar;
  *(_QWORD *)(v0 + 2472) = v6;
  v9 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  *(_QWORD *)(v0 + 2864) = v9;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 2472, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(void **)(v6 + 560);
  *(_QWORD *)(v0 + 2872) = v10;
  if (!v10)
  {
    swift_release(*(_QWORD *)(v0 + 2832));
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Missing media item", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
    v30 = *(_QWORD *)(v0 + 2488);

    *(_BYTE *)(v0 + 1336) = 1;
    *(_BYTE *)(v0 + 1440) = 1;
    v32 = swift_getKeyPath(&unk_1000D5D58, v31);
    v33 = swift_task_alloc(32);
    *(_QWORD *)(v33 + 16) = v30;
    *(_QWORD *)(v33 + 24) = v0 + 1336;
    *(_QWORD *)(v0 + 2456) = v30;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2456, v32, sub_10004510C, v33, (char *)&type metadata for () + 8, v9);
    swift_release(v32);
    swift_task_dealloc(v33);
    sub_100045124(v0 + 1336);
    goto LABEL_13;
  }
  v11 = v10;
  v12 = SHMediaItem.properties.getter();
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease(v12);
  if (!v13)
  {
    v34 = *(_QWORD *)(v0 + 2488);
    swift_release(*(_QWORD *)(v0 + 2832));
    *(_BYTE *)(v0 + 1672) = 3;
    *(_BYTE *)(v0 + 1776) = 1;
    v36 = swift_getKeyPath(&unk_1000D5D58, v35);
    v37 = swift_task_alloc(32);
    *(_QWORD *)(v37 + 16) = v34;
    *(_QWORD *)(v37 + 24) = v0 + 1672;
    *(_QWORD *)(v0 + 2480) = v34;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2480, v36, sub_10008D878, v37, (char *)&type metadata for () + 8, v9);
    swift_release(v36);
    swift_task_dealloc(v37);
    sub_100045124(v0 + 1672);

LABEL_13:
    v38 = *(_QWORD *)(v0 + 2816);
    v39 = *(_QWORD *)(v0 + 2792);
    v40 = *(_QWORD *)(v0 + 2784);
    v41 = *(_QWORD *)(v0 + 2768);
    v42 = *(_QWORD *)(v0 + 2760);
    v43 = *(_QWORD *)(v0 + 2744);
    v44 = *(_QWORD *)(v0 + 2736);
    v45 = *(_QWORD *)(v0 + 2728);
    v46 = *(_QWORD *)(v0 + 2720);
    v75 = *(_QWORD *)(v0 + 2712);
    v76 = *(_QWORD *)(v0 + 2704);
    v77 = *(_QWORD *)(v0 + 2696);
    v78 = *(_QWORD *)(v0 + 2688);
    v79 = *(_QWORD *)(v0 + 2664);
    v80 = *(_QWORD *)(v0 + 2640);
    v81 = *(_QWORD *)(v0 + 2616);
    v83 = *(_QWORD *)(v0 + 2608);
    v85 = *(_QWORD *)(v0 + 2584);
    v87 = *(_QWORD *)(v0 + 2576);
    v89 = *(_QWORD *)(v0 + 2568);
    v90 = *(_QWORD *)(v0 + 2560);
    v91 = *(_QWORD *)(v0 + 2552);
    v93 = *(_QWORD *)(v0 + 2528);
    v95 = *(_QWORD *)(v0 + 2520);
    v96 = *(_QWORD *)(v0 + 2496);
    swift_task_dealloc(*(_QWORD *)(v0 + 2824));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v94 = v9;
  v14 = *(_QWORD *)(v0 + 2824);
  v15 = *(_QWORD *)(v0 + 2808);
  v16 = *(_QWORD *)(v0 + 2800);
  v17 = *sub_10000C9C8((_QWORD *)(*(_QWORD *)(v0 + 2488) + 592), *(_QWORD *)(*(_QWORD *)(v0 + 2488) + 616));
  v19 = swift_getKeyPath(&unk_1000D5D80, v18);
  *(_QWORD *)(v0 + 2448) = v17;
  v20 = sub_100004864((unint64_t *)&qword_1001174E8, type metadata accessor for MusicSubscriptionStatusController, (uint64_t)&unk_1000D7214);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 2448, v19, v20);
  swift_release(v19);
  v21 = v17 + OBJC_IVAR____TtC16MusicRecognition33MusicSubscriptionStatusController__musicSubscription;
  swift_beginAccess(v17 + OBJC_IVAR____TtC16MusicRecognition33MusicSubscriptionStatusController__musicSubscription, v0 + 2280, 0, 0);
  sub_100007C8C(v21, v14, &qword_1001174E0);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v14, 1, v16);
  v23 = *(_QWORD *)(v0 + 2824);
  v92 = v11;
  if (v22)
  {
    sub_10000526C(v23, &qword_1001174E0);
    v25 = 0;
  }
  else
  {
    v48 = *(_QWORD *)(v0 + 2816);
    v49 = *(_QWORD *)(v0 + 2808);
    v50 = *(_QWORD *)(v0 + 2800);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v48, v23, v50);
    v51 = sub_10000526C(v23, &qword_1001174E0);
    v52 = MusicSubscription.canBecomeSubscriber.getter(v51);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
    v25 = v52 ^ 1;
  }
  v53 = *(_QWORD *)(v0 + 2792);
  v54 = *(int **)(v0 + 2776);
  v55 = *(_QWORD *)(v0 + 2600);
  v56 = *(_QWORD *)(v0 + 2592);
  v82 = *(_QWORD *)(v0 + 2544);
  v84 = *(_QWORD *)(v0 + 2536);
  v86 = *(_QWORD *)(v0 + 2512);
  v88 = *(_QWORD *)(v0 + 2504);
  v57 = *(_QWORD *)(v0 + 2488);
  v58 = swift_getKeyPath(&unk_1000D5CE0, v24);
  v59 = swift_task_alloc(32);
  *(_QWORD *)(v59 + 16) = v57;
  *(_BYTE *)(v59 + 24) = v25 & 1;
  *(_QWORD *)(v0 + 2440) = v57;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2440, v58, sub_10008D83C, v59, (char *)&type metadata for () + 8, v94);
  swift_release(v58);
  swift_task_dealloc(v59);
  v60 = v54[6];
  *(_DWORD *)(v0 + 1444) = v60;
  v61 = v53 + v60;
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
  *(_QWORD *)(v0 + 2880) = v62;
  v62(v61, 1, 1, v56);
  v63 = v53 + v54[8];
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
  *(_QWORD *)(v0 + 2888) = v64;
  v64(v63, 1, 1, v84);
  v65 = v53 + v54[7];
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56);
  *(_QWORD *)(v0 + 2896) = v66;
  v66(v65, 1, 1, v88);
  v67 = v92;
  UUID.init()(v67);
  *(_QWORD *)(v53 + v54[5]) = v67;
  *(_QWORD *)(v0 + 1472) = v54;
  *(_QWORD *)(v0 + 1480) = &off_10010CF78;
  *(_QWORD *)(v0 + 1488) = &off_10010CEC0;
  v68 = sub_100004864(&qword_10011B0E8, type metadata accessor for TrackPageMetadata, (uint64_t)&unk_1000D6AA4);
  *(_QWORD *)(v0 + 2904) = v68;
  *(_QWORD *)(v0 + 1496) = v68;
  *(_QWORD *)(v0 + 1504) = &off_10010CEE0;
  *(_QWORD *)(v0 + 1512) = &off_10010CF28;
  *(_QWORD *)(v0 + 1520) = &off_10010CF88;
  *(_QWORD *)(v0 + 1528) = &off_10010CFA0;
  *(_QWORD *)(v0 + 1536) = &off_10010CF38;
  v69 = sub_100004864(&qword_10011B0F0, type metadata accessor for TrackPageMetadata, (uint64_t)&unk_1000D6A5C);
  *(_QWORD *)(v0 + 2912) = v69;
  *(_QWORD *)(v0 + 1544) = v69;
  v70 = sub_1000446F4((_QWORD *)(v0 + 1448));
  sub_10000B340(v53, (uint64_t)v70, type metadata accessor for TrackPageMetadata);
  *(_BYTE *)(v0 + 1552) = 0;
  v72 = swift_getKeyPath(&unk_1000D5D58, v71);
  v73 = swift_task_alloc(32);
  *(_QWORD *)(v73 + 16) = v57;
  *(_QWORD *)(v73 + 24) = v0 + 1448;
  *(_QWORD *)(v0 + 2432) = v57;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2432, v72, sub_10008D878, v73, (char *)&type metadata for () + 8, v94);
  *(_QWORD *)(v0 + 2920) = 0;
  swift_release(v72);
  swift_task_dealloc(v73);
  sub_100045124(v0 + 1448);
  v74 = (_QWORD *)swift_task_alloc(dword_10011B0FC);
  *(_QWORD *)(v0 + 2928) = v74;
  *v74 = v0;
  v74[1] = sub_100085424;
  return sub_10008A1B0();
}

uint64_t sub_100085424(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2928);
  *(_QWORD *)(*v1 + 2936) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_100085480, *(_QWORD *)(v2 + 2840), *(_QWORD *)(v2 + 2848));
}

uint64_t sub_100085480(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v16;
  uint64_t v17;

  v3 = *(void **)(v2 + 2936);
  v4 = *(_QWORD *)(v2 + 2920);
  v5 = *(_QWORD *)(v2 + 2864);
  v16 = *(void **)(v2 + 2872);
  v17 = *(_QWORD *)(v2 + 2768);
  v6 = *(_QWORD *)(v2 + 2752);
  v7 = *(_QWORD *)(v2 + 2488);
  KeyPath = swift_getKeyPath(&unk_1000D5DA8, a2);
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v3;
  *(_QWORD *)(v2 + 2416) = v7;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v2 + 2416, KeyPath, sub_10008CE94, v9, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)(v2 + 2944) = v4;
  swift_release(KeyPath);

  swift_task_dealloc(v9);
  v10 = swift_task_alloc(32);
  *(_QWORD *)(v2 + 2952) = v10;
  *(_QWORD *)(v10 + 16) = &unk_10011B108;
  *(_QWORD *)(v10 + 24) = v7;
  swift_retain(v7);
  v11 = sub_1000050C8(&qword_10011B120);
  swift_asyncLet_begin(v2 + 656, 0, v11, &unk_10011B118, v10, v2 + 1784);
  *(_DWORD *)(v2 + 1556) = *(_DWORD *)(v6 + 48);
  *(_DWORD *)(v2 + 1668) = *(_DWORD *)(v6 + 64);
  v12 = swift_allocObject(&unk_10010C318, 24, 7);
  *(_QWORD *)(v2 + 2960) = v12;
  *(_QWORD *)(v12 + 16) = v16;
  v13 = swift_task_alloc(32);
  *(_QWORD *)(v2 + 2968) = v13;
  *(_QWORD *)(v13 + 16) = &unk_10011B130;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = v16;
  swift_asyncLet_begin(v2 + 16, 0, v6, &unk_10011B140, v13, v17);
  return swift_asyncLet_get(v2 + 656, v2 + 1784, sub_100085644, v2 + 2240);
}

uint64_t sub_100085644()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[223];
  v0[372] = v1;
  v2 = v0[224];
  v0[373] = v2;
  v3 = v0[225];
  v0[374] = v3;
  v4 = v0[226];
  v0[375] = v4;
  v5 = v0[227];
  v0[376] = v5;
  v6 = v0[228];
  v0[377] = v6;
  v7 = v0[229];
  v0[378] = v7;
  v8 = v0[230];
  v0[379] = v8;
  sub_10008D090(v1, v2, v3, v4, v5, v6, v7, v8);
  return swift_asyncLet_get(v0 + 2, v0[346], sub_1000856C8, v0 + 270);
}

uint64_t sub_1000856C8()
{
  uint64_t v0;

  return swift_task_switch(sub_1000856DC, *(_QWORD *)(v0 + 2840), *(_QWORD *)(v0 + 2848));
}

uint64_t sub_1000856DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t *v147;
  uint64_t v148;
  void (*v149)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v150;
  uint64_t v151;
  void *v152;
  void (*v153)(uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;

  v160 = *(_QWORD *)(v0 + 2984);
  v1 = *(_QWORD *)(v0 + 2768);
  v2 = *(_QWORD *)(v0 + 2760);
  v3 = *(_QWORD *)(v0 + 2752);
  v4 = *(_QWORD *)(v0 + 2744);
  v5 = *(_QWORD *)(v0 + 2728);
  v156 = *(_QWORD *)(v0 + 2712);
  v6 = v1 + *(int *)(v0 + 1668);
  v7 = v1 + *(int *)(v0 + 1556);
  v8 = v2 + *(int *)(v3 + 48);
  v9 = v2 + *(int *)(v3 + 64);
  sub_100007C8C(v1, v2, &qword_10011B0D8);
  sub_100007C8C(v7, v8, &qword_10011B0D0);
  sub_100007C8C(v6, v9, &qword_10011B0C8);
  sub_100007C48(v2, v4, &qword_10011B0D8);
  sub_100007C48(v8, v5, &qword_10011B0D0);
  sub_100007C48(v9, v156, &qword_10011B0C8);
  if (v160 != 1)
  {
    v10 = *(_QWORD **)(v0 + 2488);
    v11 = v10[53];
    v12 = v10[54];
    v13 = v10[55];
    v14 = v10[56];
    v15 = v10[57];
    v16 = v10[58];
    v17 = v10[59];
    v18 = v10[60];
    v19 = *(_OWORD *)(v0 + 2992);
    v20 = *(_OWORD *)(v0 + 3008);
    v21 = *(_OWORD *)(v0 + 3024);
    *(_OWORD *)(v10 + 53) = *(_OWORD *)(v0 + 2976);
    *(_OWORD *)(v10 + 55) = v19;
    *(_OWORD *)(v10 + 57) = v20;
    *(_OWORD *)(v10 + 59) = v21;
    sub_10008CC44(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v22 = *(_QWORD *)(v0 + 2736);
  v23 = *(_QWORD *)(v0 + 2680);
  v24 = *(_QWORD *)(v0 + 2672);
  sub_100007C8C(*(_QWORD *)(v0 + 2744), v22, &qword_10011B0D8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v24) == 1)
  {
    v25 = &qword_10011B0D8;
    v26 = *(_QWORD *)(v0 + 2736);
LABEL_10:
    sub_10000526C(v26, v25);
    v40 = *(_QWORD *)(v0 + 2864);
    v157 = *(_QWORD *)(v0 + 2600);
    v161 = *(_QWORD *)(v0 + 2592);
    v41 = *(_QWORD *)(v0 + 2496);
    v42 = *(_QWORD *)(v0 + 2488);
    v154 = *(_QWORD *)(v0 + 2792) + *(int *)(v0 + 1444);
    KeyPath = swift_getKeyPath(&unk_1000D5DD0, v43);
    v45 = swift_task_alloc(32);
    *(_QWORD *)(v45 + 16) = v42;
    *(_BYTE *)(v45 + 24) = 1;
    *(_QWORD *)(v0 + 2408) = v42;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2408, KeyPath, sub_10008D0EC, v45, (char *)&type metadata for () + 8, v40);
    swift_release(KeyPath);
    swift_task_dealloc(v45);
    v47 = swift_getKeyPath(&unk_1000D5CE0, v46);
    *(_QWORD *)(v0 + 2400) = v42;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 2400, v47, v40);
    swift_release(v47);
    v48 = *(_BYTE *)(v42 + 24);
    sub_100007C8C(v154, v41, &qword_100118580);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v41, 1, v161) == 1)
    {
      v49 = *(_QWORD *)(v0 + 2568);
      sub_10000526C(*(_QWORD *)(v0 + 2496), &qword_100118580);
      v50 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 1, 1, v50);
    }
    else
    {
      v51 = *(_QWORD *)(v0 + 2496);
      v52 = (_QWORD *)(v51 + *(int *)(*(_QWORD *)(v0 + 2592) + 20));
      v53 = v52[3];
      v54 = v52[4];
      sub_10000C9C8(v52, v53);
      (*(void (**)(uint64_t, uint64_t))(v54 + 40))(v53, v54);
      sub_10000B600(v51, type metadata accessor for AnySong);
    }
    v55 = *(_QWORD *)(v0 + 2744);
    v56 = *(_QWORD *)(v0 + 2728);
    v57 = *(_QWORD *)(v0 + 2712);
    v58 = *(_QWORD *)(v0 + 2568);
    sub_10008B250(v48, v55, v58);
    sub_10000526C(v58, (uint64_t *)&unk_100118CE0);
    sub_10000526C(v57, &qword_10011B0C8);
    sub_10000526C(v56, &qword_10011B0D0);
    sub_10000526C(v55, &qword_10011B0D8);
    return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 2768), sub_10008699C, v0 + 1296);
  }
  v27 = *(_QWORD *)(v0 + 2728);
  v28 = *(_QWORD *)(v0 + 2720);
  v29 = *(_QWORD *)(v0 + 2656);
  v30 = *(_QWORD *)(v0 + 2648);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2680) + 32))(*(_QWORD *)(v0 + 2696), *(_QWORD *)(v0 + 2736), *(_QWORD *)(v0 + 2672));
  sub_100007C8C(v27, v28, &qword_10011B0D0);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v28, 1, v30);
  v32 = *(_QWORD *)(v0 + 2720);
  if (v31 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2680) + 8))(*(_QWORD *)(v0 + 2696), *(_QWORD *)(v0 + 2672));
    v25 = &qword_10011B0D0;
LABEL_9:
    v26 = v32;
    goto LABEL_10;
  }
  v33 = *(_QWORD *)(v0 + 2712);
  v34 = *(_QWORD *)(v0 + 2704);
  v35 = *(_QWORD *)(v0 + 2632);
  v36 = *(_QWORD *)(v0 + 2624);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2656) + 32))(*(_QWORD *)(v0 + 2664), *(_QWORD *)(v0 + 2720), *(_QWORD *)(v0 + 2648));
  sub_100007C8C(v33, v34, &qword_10011B0C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v34, 1, v36) == 1)
  {
    v32 = *(_QWORD *)(v0 + 2704);
    v37 = *(_QWORD *)(v0 + 2696);
    v38 = *(_QWORD *)(v0 + 2680);
    v39 = *(_QWORD *)(v0 + 2672);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 2656) + 8))(*(_QWORD *)(v0 + 2664), *(_QWORD *)(v0 + 2648));
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    v25 = &qword_10011B0C8;
    goto LABEL_9;
  }
  v147 = (uint64_t *)(v0 + 1976);
  v158 = (_QWORD *)(v0 + 2120);
  v162 = (_QWORD *)(v0 + 2040);
  v140 = v0 + 2336;
  v150 = (_QWORD *)(v0 + 2200);
  v145 = v0 + 2368;
  v133 = *(_QWORD *)(v0 + 2864);
  v136 = *(_QWORD *)(v0 + 2944);
  v60 = *(_QWORD *)(v0 + 2696);
  v61 = *(_QWORD *)(v0 + 2688);
  v62 = *(_QWORD *)(v0 + 2680);
  v63 = *(_QWORD *)(v0 + 2672);
  v64 = *(_QWORD *)(v0 + 2488);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2632) + 32))(*(_QWORD *)(v0 + 2640), *(_QWORD *)(v0 + 2704), *(_QWORD *)(v0 + 2624));
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  v65(v61, v60, v63);
  v66 = type metadata accessor for MusicKitMusicLibrary(0);
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v67 = sub_100050DDC(v61);
  v68 = type metadata accessor for AnyMusicLibrary();
  v69 = swift_allocObject(v68, 72, 7);
  v70 = sub_10008C920(v67, v69);
  v72 = swift_getKeyPath(&unk_1000D5DF8, v71);
  v73 = swift_task_alloc(32);
  *(_QWORD *)(v73 + 16) = v64;
  *(_QWORD *)(v73 + 24) = v70;
  *(_QWORD *)(v0 + 2424) = v64;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2424, v72, sub_10008D104, v73, (char *)&type metadata for () + 8, v133);
  *(_QWORD *)(v0 + 3040) = v136;
  swift_release(v70);
  swift_release(v72);
  swift_task_dealloc(v73);
  *(_QWORD *)(v0 + 2224) = type metadata accessor for MusicKitSong(0);
  *(_QWORD *)(v0 + 2232) = &off_10010CC10;
  v74 = sub_1000446F4((_QWORD *)(v0 + 2200));
  v65((uint64_t)v74, v60, v63);
  sub_100087604((uint64_t *)(v0 + 1912));
  sub_100007C48(v0 + 1928, v0 + 2352, &qword_1001197A0);
  sub_100007C48(v0 + 2352, v0 + 2304, &qword_1001197A0);
  v75 = *(_QWORD *)(v0 + 2312);
  if (v75 && (v76 = *(_QWORD *)(v0 + 1920)) != 0)
  {
    v77 = *(_QWORD *)(v0 + 2304);
    v78 = *(_QWORD *)(v0 + 1912);
    v79 = sub_100004F7C(&qword_10011A560);
    v80 = type metadata accessor for URLQueryItem(0);
    v81 = (_QWORD *)swift_allocObject(v79, ((*(unsigned __int8 *)(*(_QWORD *)(v80 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v80 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v80 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v80 - 8) + 80) | 7);
    *((_OWORD *)v81 + 1) = xmmword_1000D32A0;
    if (qword_100116000 != -1)
      swift_once(&qword_100116000, sub_100071CFC);
    URLQueryItem.init(name:value:)(qword_10011A4E8, unk_10011A4F0, v78, v76);
    if (qword_100116008 != -1)
      swift_once(&qword_100116008, sub_100071D1C);
    URLQueryItem.init(name:value:)(qword_10011A4F8, unk_10011A500, v77, v75);
  }
  else
  {
    v81 = _swiftEmptyArrayStorage;
  }
  v134 = *(_QWORD *)(v0 + 2624);
  v137 = *(_QWORD *)(v0 + 2640);
  v82 = *(_QWORD *)(v0 + 2616);
  v83 = *(_QWORD *)(v0 + 2608);
  v84 = *(_QWORD *)(v0 + 2592);
  v85 = *(char **)(v0 + 2584);
  v86 = *(_QWORD *)(v0 + 2576);
  v130 = *(_QWORD *)(v0 + 2632);
  sub_1000444C8((_QWORD *)(v0 + 1912));
  v87 = type metadata accessor for URL(0);
  v153 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56);
  v155 = v87;
  v153(v83, 1, 1);
  v88 = (_QWORD *)(v83 + *(int *)(v84 + 20));
  sub_100007AE0((uint64_t)v150, (uint64_t)v88);
  v89 = v88[3];
  v90 = v88[4];
  sub_10000C9C8(v88, v89);
  (*(void (**)(uint64_t, uint64_t))(v90 + 48))(v89, v90);
  sub_100084688(v86, (uint64_t)v81, v85);
  swift_bridgeObjectRelease(v81);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v150);
  sub_10000526C(v86, (uint64_t *)&unk_100118CE0);
  sub_10008D118((uint64_t)v85, v83);
  sub_10000B4D4(v83, v82, type metadata accessor for AnySong);
  *(_QWORD *)(v0 + 2144) = type metadata accessor for MusicKitAlbum(0);
  *(_QWORD *)(v0 + 2152) = &off_10010ADB0;
  v91 = sub_1000446F4(v158);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v130 + 16))(v91, v137, v134);
  v92 = (_QWORD *)(v0 + 1848);
  sub_100087604((uint64_t *)(v0 + 1848));
  sub_100007C48(v0 + 1864, v140, &qword_1001197A0);
  sub_100007C48(v140, v0 + 2320, &qword_1001197A0);
  v93 = *(_QWORD *)(v0 + 2328);
  if (v93 && (v94 = *(_QWORD *)(v0 + 1856)) != 0)
  {
    v95 = *(_QWORD *)(v0 + 2320);
    v96 = *(_QWORD *)(v0 + 1848);
    v97 = sub_100004F7C(&qword_10011A560);
    v98 = type metadata accessor for URLQueryItem(0);
    v99 = (_QWORD *)swift_allocObject(v97, ((*(unsigned __int8 *)(*(_QWORD *)(v98 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v98 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v98 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v98 - 8) + 80) | 7);
    *((_OWORD *)v99 + 1) = xmmword_1000D32A0;
    if (qword_100116000 != -1)
      swift_once(&qword_100116000, sub_100071CFC);
    URLQueryItem.init(name:value:)(qword_10011A4E8, unk_10011A4F0, v96, v94);
    if (qword_100116008 != -1)
      swift_once(&qword_100116008, sub_100071D1C);
    URLQueryItem.init(name:value:)(qword_10011A4F8, unk_10011A500, v95, v93);
    v92 = (_QWORD *)(v0 + 1848);
  }
  else
  {
    v99 = _swiftEmptyArrayStorage;
  }
  v148 = *(_QWORD *)(v0 + 2648);
  v151 = *(_QWORD *)(v0 + 2664);
  v100 = *(char **)(v0 + 2584);
  v101 = *(_QWORD *)(v0 + 2576);
  v102 = *(_QWORD *)(v0 + 2560);
  v103 = *(_QWORD *)(v0 + 2552);
  v104 = *(_QWORD *)(v0 + 2536);
  v141 = *(_QWORD *)(v0 + 2656);
  sub_1000444C8(v92);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v153)(v103, 1, 1, v155);
  v105 = (_QWORD *)(v103 + *(int *)(v104 + 20));
  sub_100007AE0((uint64_t)v158, (uint64_t)v105);
  v106 = v105[3];
  v107 = v105[4];
  sub_10000C9C8(v105, v106);
  (*(void (**)(uint64_t, uint64_t))(v107 + 48))(v106, v107);
  sub_100084688(v101, (uint64_t)v99, v100);
  swift_bridgeObjectRelease(v99);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v158);
  sub_10000526C(v101, (uint64_t *)&unk_100118CE0);
  sub_10008D118((uint64_t)v100, v103);
  sub_10000B4D4(v103, v102, type metadata accessor for AnyAlbum);
  *(_QWORD *)(v0 + 2064) = type metadata accessor for MusicKitArtist(0);
  *(_QWORD *)(v0 + 2072) = &off_100109270;
  v108 = sub_1000446F4(v162);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v141 + 16))(v108, v151, v148);
  sub_100087604(v147);
  sub_100007C48(v0 + 1992, v145, &qword_1001197A0);
  sub_100007C48(v145, v0 + 2384, &qword_1001197A0);
  v109 = *(_QWORD *)(v0 + 2392);
  if (v109 && (v110 = *(_QWORD *)(v0 + 1984)) != 0)
  {
    v111 = *(_QWORD *)(v0 + 2384);
    v112 = *(_QWORD *)(v0 + 1976);
    v113 = sub_100004F7C(&qword_10011A560);
    v114 = type metadata accessor for URLQueryItem(0);
    v115 = swift_allocObject(v113, ((*(unsigned __int8 *)(*(_QWORD *)(v114 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v114 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v114 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v114 - 8) + 80) | 7);
    *(_OWORD *)(v115 + 16) = xmmword_1000D32A0;
    if (qword_100116000 != -1)
      swift_once(&qword_100116000, sub_100071CFC);
    URLQueryItem.init(name:value:)(qword_10011A4E8, unk_10011A4F0, v112, v110);
    if (qword_100116008 != -1)
      swift_once(&qword_100116008, sub_100071D1C);
    URLQueryItem.init(name:value:)(qword_10011A4F8, unk_10011A500, v111, v109);
    v116 = (_QWORD *)v115;
  }
  else
  {
    v116 = _swiftEmptyArrayStorage;
  }
  v146 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 2888);
  v142 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 2880);
  v149 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 2896);
  v152 = *(void **)(v0 + 2872);
  v159 = *(_QWORD *)(v0 + 2792);
  v117 = *(_QWORD *)(v0 + 2784);
  v132 = *(int **)(v0 + 2776);
  v135 = *(_QWORD *)(v0 + 2616);
  v118 = *(char **)(v0 + 2584);
  v119 = *(_QWORD *)(v0 + 2576);
  v138 = *(_QWORD *)(v0 + 2592);
  v139 = *(_QWORD *)(v0 + 2560);
  v131 = *(_QWORD *)(v0 + 2528);
  v120 = *(_QWORD *)(v0 + 2520);
  v121 = *(_QWORD *)(v0 + 2504);
  v143 = v121;
  v144 = *(_QWORD *)(v0 + 2536);
  sub_1000444C8(v147);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v153)(v120, 1, 1, v155);
  v122 = (_QWORD *)(v120 + *(int *)(v121 + 20));
  sub_100007AE0((uint64_t)v162, (uint64_t)v122);
  v124 = v122[3];
  v123 = v122[4];
  sub_10000C9C8(v122, v124);
  (*(void (**)(uint64_t, uint64_t))(v123 + 32))(v124, v123);
  sub_100084688(v119, (uint64_t)v116, v118);
  swift_bridgeObjectRelease(v116);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v162);
  sub_10000526C(v119, (uint64_t *)&unk_100118CE0);
  sub_10008D118((uint64_t)v118, v120);
  sub_10000B4D4(v120, v131, type metadata accessor for AnyArtist);
  v125 = v117 + v132[6];
  sub_10000B340(v135, v125, type metadata accessor for AnySong);
  v142(v125, 0, 1, v138);
  v126 = v117 + v132[8];
  sub_10000B340(v139, v126, type metadata accessor for AnyAlbum);
  v146(v126, 0, 1, v144);
  v127 = v117 + v132[7];
  sub_10000B340(v131, v127, type metadata accessor for AnyArtist);
  v149(v127, 0, 1, v143);
  v128 = v152;
  UUID.init()(v128);
  *(_QWORD *)(v117 + v132[5]) = v128;
  sub_10000B600(v159, type metadata accessor for TrackPageMetadata);
  sub_10000B4D4(v117, v159, type metadata accessor for TrackPageMetadata);
  v129 = (_QWORD *)swift_task_alloc(dword_10011B14C);
  *(_QWORD *)(v0 + 3048) = v129;
  *v129 = v0;
  v129[1] = sub_10008654C;
  return sub_10008AC44(*(_QWORD *)(v0 + 2528), *(_QWORD *)(v0 + 2616), *(_QWORD *)(v0 + 2560));
}

uint64_t sub_10008654C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 3048));
  return swift_task_switch(sub_10008659C, *(_QWORD *)(v1 + 2840), *(_QWORD *)(v1 + 2848));
}

uint64_t sub_10008659C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 2912);
  v2 = *(_QWORD *)(v0 + 2904);
  v3 = *(_QWORD *)(v0 + 2864);
  v4 = *(_QWORD *)(v0 + 2792);
  v41 = *(_QWORD *)(v0 + 2672);
  v43 = *(_QWORD *)(v0 + 2696);
  v39 = *(_QWORD *)(v0 + 2664);
  v40 = *(_QWORD *)(v0 + 2680);
  v37 = *(_QWORD *)(v0 + 2656);
  v38 = *(_QWORD *)(v0 + 2648);
  v35 = *(_QWORD *)(v0 + 2624);
  v36 = *(_QWORD *)(v0 + 2640);
  v33 = *(_QWORD *)(v0 + 2616);
  v34 = *(_QWORD *)(v0 + 2632);
  v31 = *(_QWORD *)(v0 + 2528);
  v32 = *(_QWORD *)(v0 + 2560);
  v5 = *(_QWORD *)(v0 + 2488);
  *(_QWORD *)(v0 + 1584) = *(_QWORD *)(v0 + 2776);
  *(_QWORD *)(v0 + 1592) = &off_10010CF78;
  *(_QWORD *)(v0 + 1600) = &off_10010CEC0;
  *(_QWORD *)(v0 + 1608) = v2;
  *(_QWORD *)(v0 + 1616) = &off_10010CEE0;
  *(_QWORD *)(v0 + 1624) = &off_10010CF28;
  *(_QWORD *)(v0 + 1632) = &off_10010CF88;
  *(_QWORD *)(v0 + 1640) = &off_10010CFA0;
  *(_QWORD *)(v0 + 1648) = &off_10010CF38;
  *(_QWORD *)(v0 + 1656) = v1;
  v6 = sub_1000446F4((_QWORD *)(v0 + 1560));
  sub_10000B340(v4, (uint64_t)v6, type metadata accessor for TrackPageMetadata);
  *(_BYTE *)(v0 + 1664) = 0;
  KeyPath = swift_getKeyPath(&unk_1000D5D58, v7);
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v0 + 1560;
  *(_QWORD *)(v0 + 2464) = v5;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2464, KeyPath, sub_10008D878, v9, (char *)&type metadata for () + 8, v3);
  swift_release(KeyPath);
  swift_task_dealloc(v9);
  sub_100045124(v0 + 1560);
  sub_10000B600(v31, type metadata accessor for AnyArtist);
  sub_10000B600(v32, type metadata accessor for AnyAlbum);
  sub_10000B600(v33, type metadata accessor for AnySong);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v43, v41);
  v10 = *(_QWORD *)(v0 + 2864);
  v42 = *(_QWORD *)(v0 + 2600);
  v44 = *(_QWORD *)(v0 + 2592);
  v11 = *(_QWORD *)(v0 + 2496);
  v12 = *(_QWORD *)(v0 + 2488);
  v13 = *(_QWORD *)(v0 + 2792) + *(int *)(v0 + 1444);
  v15 = swift_getKeyPath(&unk_1000D5DD0, v14);
  v16 = swift_task_alloc(32);
  *(_QWORD *)(v16 + 16) = v12;
  *(_BYTE *)(v16 + 24) = 1;
  *(_QWORD *)(v0 + 2408) = v12;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 2408, v15, sub_10008D0EC, v16, (char *)&type metadata for () + 8, v10);
  swift_release(v15);
  swift_task_dealloc(v16);
  v18 = swift_getKeyPath(&unk_1000D5CE0, v17);
  *(_QWORD *)(v0 + 2400) = v12;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 2400, v18, v10);
  swift_release(v18);
  v19 = *(_BYTE *)(v12 + 24);
  sub_100007C8C(v13, v11, &qword_100118580);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v11, 1, v44) == 1)
  {
    v20 = *(_QWORD *)(v0 + 2568);
    sub_10000526C(*(_QWORD *)(v0 + 2496), &qword_100118580);
    v21 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 2496);
    v23 = (_QWORD *)(v22 + *(int *)(*(_QWORD *)(v0 + 2592) + 20));
    v24 = v23[3];
    v25 = v23[4];
    sub_10000C9C8(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v24, v25);
    sub_10000B600(v22, type metadata accessor for AnySong);
  }
  v26 = *(_QWORD *)(v0 + 2744);
  v27 = *(_QWORD *)(v0 + 2728);
  v28 = *(_QWORD *)(v0 + 2712);
  v29 = *(_QWORD *)(v0 + 2568);
  sub_10008B250(v19, v26, v29);
  sub_10000526C(v29, (uint64_t *)&unk_100118CE0);
  sub_10000526C(v28, &qword_10011B0C8);
  sub_10000526C(v27, &qword_10011B0D0);
  sub_10000526C(v26, &qword_10011B0D8);
  return swift_asyncLet_finish(v0 + 16, *(_QWORD *)(v0 + 2768), sub_10008699C, v0 + 1296);
}

uint64_t sub_10008699C()
{
  uint64_t v0;

  return swift_task_switch(sub_1000869B0, *(_QWORD *)(v0 + 2840), *(_QWORD *)(v0 + 2848));
}

uint64_t sub_1000869B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2968);
  swift_release(*(_QWORD *)(v0 + 2960));
  swift_task_dealloc(v1);
  return swift_asyncLet_finish(v0 + 656, v0 + 1784, sub_100086A10, v0 + 2080);
}

uint64_t sub_100086A10()
{
  uint64_t v0;

  return swift_task_switch(sub_100086A24, *(_QWORD *)(v0 + 2840), *(_QWORD *)(v0 + 2848));
}

uint64_t sub_100086A24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 2952);
  v2 = *(void **)(v0 + 2872);
  v3 = *(_QWORD *)(v0 + 2792);
  v4 = *(_QWORD *)(v0 + 2488);
  swift_release(*(_QWORD *)(v0 + 2832));

  swift_task_dealloc(v1);
  sub_10000B600(v3, type metadata accessor for TrackPageMetadata);
  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 2816);
  v6 = *(_QWORD *)(v0 + 2792);
  v7 = *(_QWORD *)(v0 + 2784);
  v8 = *(_QWORD *)(v0 + 2768);
  v9 = *(_QWORD *)(v0 + 2760);
  v10 = *(_QWORD *)(v0 + 2744);
  v11 = *(_QWORD *)(v0 + 2736);
  v12 = *(_QWORD *)(v0 + 2728);
  v13 = *(_QWORD *)(v0 + 2720);
  v15 = *(_QWORD *)(v0 + 2712);
  v16 = *(_QWORD *)(v0 + 2704);
  v17 = *(_QWORD *)(v0 + 2696);
  v18 = *(_QWORD *)(v0 + 2688);
  v19 = *(_QWORD *)(v0 + 2664);
  v20 = *(_QWORD *)(v0 + 2640);
  v21 = *(_QWORD *)(v0 + 2616);
  v22 = *(_QWORD *)(v0 + 2608);
  v23 = *(_QWORD *)(v0 + 2584);
  v24 = *(_QWORD *)(v0 + 2576);
  v25 = *(_QWORD *)(v0 + 2568);
  v26 = *(_QWORD *)(v0 + 2560);
  v27 = *(_QWORD *)(v0 + 2552);
  v28 = *(_QWORD *)(v0 + 2528);
  v29 = *(_QWORD *)(v0 + 2520);
  v30 = *(_QWORD *)(v0 + 2496);
  swift_task_dealloc(*(_QWORD *)(v0 + 2824));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100086C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  _QWORD v20[5];

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000D5CE0, a2);
  v20[0] = v2;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v20, KeyPath, v5);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v2 + 24) & 1) == 0)
  {
    if (qword_100115DD8 != -1)
      swift_once(&qword_100115DD8, sub_10000C418);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10000B5E8(v6, (uint64_t)qword_100124478);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pausing playback for unsubscribed user", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v12 = swift_getKeyPath(&unk_1000D5D08, v11);
    v16[0] = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v16, v12, v5);
    swift_release(v12);
    v13 = v3 + 280;
    swift_beginAccess(v13, v19, 0, 0);
    sub_100007C8C(v13, (uint64_t)v20, &qword_1001188C0);
    if (v20[3])
    {
      sub_100007AE0((uint64_t)v20, (uint64_t)v16);
      sub_10000526C((uint64_t)v20, &qword_1001188C0);
      v14 = v17;
      v15 = v18;
      sub_10000C9C8(v16, v17);
      (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
      _s16MusicRecognition11AnyPlaylistVwxx_0(v16);
    }
    else
    {
      sub_10000526C((uint64_t)v20, &qword_1001188C0);
    }
  }
}

double sub_100086E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5F60, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 16);
}

double sub_100086E88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D6078, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 144);
}

double sub_100086F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D60A0, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 152);
}

double sub_100086F90()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  double result;

  v0 = static Animation.easeOut(duration:)(0.2);
  v1 = Animation.delay(_:)(0.15);
  swift_release(v0);
  v2 = swift_retain(v1);
  withAnimation<A>(_:_:)(v2);
  swift_release(v1);
  v3 = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(1.0, 381.0, 23.0, 0.0);
  v4 = Animation.delay(_:)(0.15);
  swift_release(v3);
  v5 = swift_retain(v4);
  withAnimation<A>(_:_:)(v5);
  swift_release_n(v4, 2);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_10008708C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  double v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1000D5DD0, a2);
  v9 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v2 + 192) & 1) != 0)
    return 0;
  v7 = swift_getKeyPath(&unk_1000D5D30, v5);
  v9 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, v7, v4);
  *(_QWORD *)&v8 = swift_release(v7).n128_u64[0];
  result = *(_QWORD *)(v2 + 560);
  if (result)
  {
    result = (uint64_t)objc_msgSend((id)result, "appleMusicID", v8);
    if (result)
    {

      return 1;
    }
  }
  return result;
}

uint64_t sub_100087174@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1000D5D08, a1);
  v7[0] = v2;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 280, v7, 0, 0);
  return sub_100007C8C(v2 + 280, a2, &qword_1001188C0);
}

uint64_t sub_100087224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  _QWORD v18[3];
  uint64_t v19;

  v1 = sub_100004F7C(&qword_100118660);
  __chkstk_darwin(v1);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000D5CE0, v4);
  v18[0] = v0;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v18, KeyPath, v6);
  swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 24) != 1)
    return 0;
  v8 = swift_getKeyPath(&unk_1000D5E20, v7);
  v17[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, v8, v6);
  swift_release(v8);
  swift_beginAccess(v0 + 216, v17, 0, 0);
  sub_100007C8C(v0 + 216, (uint64_t)v18, &qword_1001185E0);
  v9 = v19;
  if (v19)
  {
    v10 = sub_10000C9C8(v18, v19);
    v11 = *(_QWORD *)(v9 - 8);
    __chkstk_darwin(v10);
    v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v11 + 16))(v13);
    sub_10000526C((uint64_t)v18, &qword_1001185E0);
    sub_100007C8C((uint64_t)v13, (uint64_t)v3, &qword_100118660);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v9);
    v14 = type metadata accessor for StreamingService(0);
    v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v3, 1, v14) != 1;
  }
  else
  {
    sub_10000526C((uint64_t)v18, &qword_1001185E0);
    v15 = type metadata accessor for StreamingService(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v3, 1, 1, v15);
  }
  sub_10000526C((uint64_t)v3, &qword_100118660);
  return v9;
}

uint64_t sub_100087458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000D5EE8, a2);
  v8 = v2;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v2 + 568);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + 576));
  return v6;
}

void *sub_1000874F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_1000D5DA8, a2);
  v8 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(void **)(v2 + 272);
  v6 = v5;
  return v5;
}

double sub_10008757C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5F38, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v2 + 208)).n128_u64[0];
  return result;
}

uint64_t sub_100087604@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = v1[53];
  v4 = v1[54];
  v5 = v1[55];
  v6 = v1[56];
  v7 = v1[57];
  v8 = v1[58];
  v9 = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v1[59];
  v15 = v1[60];
  v16 = v8;
  v17 = v14;
  v18 = v15;
  if (v4 == 1)
  {
    v19 = v1 + 53;
    v38 = v1[53];
    v20 = v1[55];
    v21 = v1[56];
    v22 = v1[57];
    v23 = v1[58];
    v24 = v1[60];
    v25 = v1[59];
    sub_10007222C(0, 0, 0, 0, 0, 0, (uint64_t *)&v39);
    v36 = v1[54];
    v37 = v1[53];
    v34 = v1[56];
    v35 = v1[55];
    v32 = v1[58];
    v33 = v1[57];
    v26 = v1[59];
    v27 = v1[60];
    v31 = v26;
    v28 = v40;
    *v19 = v39;
    v19[1] = v28;
    v29 = v42;
    v19[2] = v41;
    v19[3] = v29;
    sub_10008D1B4(&v39);
    sub_10008CC44(v37, v36, v35, v34, v33, v32, v31, v27);
    v14 = v25;
    v15 = v24;
    v8 = v23;
    v7 = v22;
    v6 = v21;
    v5 = v20;
    v4 = 1;
    v3 = v38;
    v9 = v39;
    v18 = *((_QWORD *)&v42 + 1);
    v17 = v42;
    v16 = *((_QWORD *)&v41 + 1);
    v13 = v41;
    v12 = *((_QWORD *)&v40 + 1);
    v11 = v40;
    v10 = *((_QWORD *)&v39 + 1);
  }
  result = sub_10008D090(v3, v4, v5, v6, v7, v8, v14, v15);
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  a1[3] = v12;
  a1[4] = v13;
  a1[5] = v16;
  a1[6] = v17;
  a1[7] = v18;
  return result;
}

double sub_100087764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5FD8, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 200);
}

uint64_t sub_1000877E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  _QWORD v65[3];
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;

  v1 = v0;
  v2 = sub_100004F7C(&qword_100117528);
  __chkstk_darwin(v2);
  v63 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000D5F10, v4);
  v65[0] = v0;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v65, KeyPath, v6);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 320, v65, 0, 0);
  sub_100007C8C(v0 + 320, (uint64_t)v66, &qword_100118860);
  v7 = v67;
  if (v67)
  {
    v8 = v68;
    v9 = sub_10000C9C8(v66, v67);
    v10 = *(_QWORD *)(v7 - 8);
    __chkstk_darwin(v9);
    v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v10 + 16))(v12);
    sub_10000526C((uint64_t)v66, &qword_100118860);
    (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v7);
    if (v14)
      goto LABEL_23;
  }
  else
  {
    sub_10000526C((uint64_t)v66, &qword_100118860);
  }
  v16 = swift_getKeyPath(&unk_1000D5F10, v15);
  v64 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v16, v6);
  swift_release(v16);
  sub_100007C8C(v1 + 320, (uint64_t)v66, &qword_100118860);
  v17 = v67;
  if (v67)
  {
    v18 = v68;
    v19 = sub_10000C9C8(v66, v67);
    v20 = *(_QWORD *)(v17 - 8);
    __chkstk_darwin(v19);
    v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v22);
    sub_10000526C((uint64_t)v66, &qword_100118860);
    (*(void (**)(uint64_t, uint64_t))(v18 + 40))(v17, v18);
    v14 = v23;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v17);
    if (v14)
      goto LABEL_23;
  }
  else
  {
    sub_10000526C((uint64_t)v66, &qword_100118860);
  }
  v25 = swift_getKeyPath(&unk_1000D5F10, v24);
  v64 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v25, v6);
  swift_release(v25);
  sub_100007C8C(v1 + 320, (uint64_t)v66, &qword_100118860);
  v26 = v67;
  if (v67)
  {
    v27 = v68;
    v28 = sub_10000C9C8(v66, v67);
    v29 = *(_QWORD *)(v26 - 8);
    __chkstk_darwin(v28);
    v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v29 + 16))(v31);
    sub_10000526C((uint64_t)v66, &qword_100118860);
    v32 = (uint64_t)v63;
    (*(void (**)(uint64_t, uint64_t))(v27 + 24))(v26, v27);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v26);
    v33 = type metadata accessor for Date(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v32, 1, v33) != 1)
    {
      sub_10000526C(v32, &qword_100117528);
      return 1;
    }
  }
  else
  {
    sub_10000526C((uint64_t)v66, &qword_100118860);
    v34 = type metadata accessor for Date(0);
    v32 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v63, 1, 1, v34);
  }
  sub_10000526C(v32, &qword_100117528);
  v36 = swift_getKeyPath(&unk_1000D5F10, v35);
  v64 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v36, v6);
  swift_release(v36);
  sub_100007C8C(v1 + 320, (uint64_t)v66, &qword_100118860);
  v37 = v67;
  if (v67)
  {
    v38 = v68;
    v39 = sub_10000C9C8(v66, v67);
    v40 = *(_QWORD *)(v37 - 8);
    __chkstk_darwin(v39);
    v42 = (char *)&v63 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v40 + 16))(v42);
    sub_10000526C((uint64_t)v66, &qword_100118860);
    (*(void (**)(uint64_t, uint64_t))(v38 + 48))(v37, v38);
    v14 = v43;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v37);
    if (v14)
      goto LABEL_23;
  }
  else
  {
    sub_10000526C((uint64_t)v66, &qword_100118860);
  }
  v45 = swift_getKeyPath(&unk_1000D5F10, v44);
  v64 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v45, v6);
  swift_release(v45);
  sub_100007C8C(v1 + 320, (uint64_t)v66, &qword_100118860);
  v46 = v67;
  if (!v67)
  {
    sub_10000526C((uint64_t)v66, &qword_100118860);
    goto LABEL_21;
  }
  v47 = v68;
  v48 = sub_10000C9C8(v66, v67);
  v49 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v48);
  v51 = (char *)&v63 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v49 + 16))(v51);
  sub_10000526C((uint64_t)v66, &qword_100118860);
  (*(void (**)(uint64_t, uint64_t))(v47 + 56))(v46, v47);
  v14 = v52;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v46);
  if (v14)
  {
LABEL_23:
    swift_bridgeObjectRelease(v14);
    return 1;
  }
LABEL_21:
  v54 = swift_getKeyPath(&unk_1000D5F10, v53);
  v64 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v54, v6);
  swift_release(v54);
  sub_100007C8C(v1 + 320, (uint64_t)v66, &qword_100118860);
  v55 = v67;
  if (v67)
  {
    v56 = v68;
    v57 = sub_10000C9C8(v66, v67);
    v58 = *(_QWORD *)(v55 - 8);
    __chkstk_darwin(v57);
    v60 = (char *)&v63 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v58 + 16))(v60);
    sub_10000526C((uint64_t)v66, &qword_100118860);
    (*(void (**)(uint64_t, uint64_t))(v56 + 64))(v55, v56);
    v14 = v61;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v55);
    if (v14)
      goto LABEL_23;
  }
  else
  {
    sub_10000526C((uint64_t)v66, &qword_100118860);
  }
  return 0;
}

uint64_t sub_100087F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D6000, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + 584);
}

double sub_100087F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D6050, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 160);
}

uint64_t sub_100088008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5CE0, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + 24);
}

double sub_10008808C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5DF8, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_retain(*(_QWORD *)(v2 + 264)).n128_u64[0];
  return result;
}

void sub_100088114(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  double v10;
  uint64_t KeyPath;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  double v15;
  uint64_t v16;

  v5 = type metadata accessor for UserInterfaceSizeClass(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for UserInterfaceSizeClass.compact(_:), v5);
  LOBYTE(a1) = static UserInterfaceSizeClass.== infix(_:_:)(a1, v8);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  if ((a1 & 1) != 0)
    v10 = a2 + -64.0;
  else
    v10 = a2 * 0.6;
  KeyPath = swift_getKeyPath(&unk_1000D5F60, v9);
  v14 = v2;
  v15 = v10;
  v16 = v2;
  v12 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, KeyPath, sub_10008D8C8, v13, (char *)&type metadata for () + 8, v12);
  swift_release(KeyPath);
}

double sub_100088270@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  uint64_t v8;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5F60, a2);
  v8 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v6);
  swift_release(KeyPath);
  result = *(double *)(v4 + 16);
  *a3 = result;
  return result;
}

void sub_1000882FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5F60, a2);
  v6[2] = v3;
  v6[3] = v2;
  v7 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_10008D6E4, v6, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
}

void sub_1000883AC(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5CE0, a2);
  v7 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v6);
  swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + 24);
}

double sub_100088438(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5CE0, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008CE64, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_1000884E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD v92[3];
  _QWORD v93[4];
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  char v97;
  _QWORD v98[14];

  v1 = v0;
  v2 = sub_100004F7C(&qword_100118670);
  __chkstk_darwin(v2);
  v91 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004F7C(&qword_100118678);
  __chkstk_darwin(v4);
  v90 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v84 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v84 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v84 - v16;
  KeyPath = swift_getKeyPath(&unk_1000D5D58, v18);
  v20 = v0 + OBJC_IVAR____TtC16MusicRecognition18TrackPageViewModel___observationRegistrar;
  v98[0] = v0;
  v21 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v98, KeyPath, v21);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 32, &v94, 0, 0);
  sub_100043E28(v0 + 32, (uint64_t)&v95);
  if (v97)
  {
    sub_100045124((uint64_t)&v95);
    return;
  }
  v85 = v12;
  v86 = v15;
  v87 = v17;
  v88 = v9;
  sub_100043E64(&v95, (uint64_t)v98);
  sub_10008D660((uint64_t)v98, (uint64_t)&v95);
  v23 = swift_getKeyPath(&unk_1000D5F10, v22);
  __chkstk_darwin(v23);
  *(&v84 - 2) = v0;
  *(&v84 - 1) = (uint64_t)&v95;
  v93[0] = v0;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v93, v23, sub_10008D6BC, &v84 - 4, (char *)&type metadata for () + 8, v21);
  swift_release(v23);
  sub_10000526C((uint64_t)&v95, &qword_100118860);
  v25 = swift_getKeyPath(&unk_1000D5D30, v24);
  *(_QWORD *)&v95 = v0;
  v26 = v21;
  v89 = v20;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v95, v25, v21);
  *(_QWORD *)&v27 = swift_release(v25).n128_u64[0];
  v28 = *(void **)(v0 + 560);
  v29 = v0;
  if (!v28)
  {
    v36 = type metadata accessor for URL(0);
    v32 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v86, 1, 1, v36);
    v38 = (uint64_t)v88;
    v39 = v26;
    v40 = (uint64_t)v90;
    v31 = (uint64_t)v91;
    goto LABEL_9;
  }
  v30 = objc_msgSend(v28, "artworkURL", v27);
  v31 = (uint64_t)v91;
  v32 = (uint64_t)v86;
  if (v30)
  {
    v33 = v30;
    v34 = (uint64_t)v85;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
  }
  else
  {
    v35 = type metadata accessor for URL(0);
    v34 = (uint64_t)v85;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v85, 1, 1, v35);
  }
  v38 = (uint64_t)v88;
  v39 = v26;
  sub_100007C48(v34, v32, (uint64_t *)&unk_100118CE0);
  type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v35 - 8);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v32, 1, v35);
  v40 = (uint64_t)v90;
  if (v42 == 1)
  {
LABEL_9:
    v43 = swift_getKeyPath(&unk_1000D5F10, v37);
    v93[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v93, v43, v39);
    swift_release(v43);
    swift_beginAccess(v1 + 320, v93, 0, 0);
    sub_100007C8C(v1 + 320, (uint64_t)&v95, &qword_100118860);
    v44 = v96;
    if (!v96)
    {
      sub_10000526C((uint64_t)&v95, &qword_100118860);
      goto LABEL_14;
    }
    v45 = sub_10000C9C8(&v95, v96);
    v46 = *(_QWORD *)(v44 - 8);
    __chkstk_darwin(v45);
    v48 = (char *)&v84 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v46 + 16))(v48);
    sub_10000526C((uint64_t)&v95, &qword_100118860);
    v49 = type metadata accessor for TrackPageMetadata(0);
    sub_100007C8C((uint64_t)&v48[*(int *)(v49 + 28)], v40, &qword_100118678);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v44);
    v50 = type metadata accessor for AnyArtist(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v40, 1, v50) == 1)
    {
      sub_10000526C(v40, &qword_100118678);
      v38 = (uint64_t)v88;
LABEL_14:
      v54 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v87, 1, 1, v54);
LABEL_22:
      sub_10000526C(v32, (uint64_t *)&unk_100118CE0);
      goto LABEL_23;
    }
    v90 = (char *)&v84;
    v55 = swift_getKeyPath(&unk_1000D5F60, v51);
    v92[0] = v29;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v92, v55, v39);
    swift_release(v55);
    v57 = *(double *)(v29 + 16);
    if ((~*(_QWORD *)&v57 & 0x7FF0000000000000) != 0)
    {
      v38 = (uint64_t)v88;
      if (v57 > -9.22337204e18)
      {
        if (v57 < 9.22337204e18)
        {
          v58 = swift_getKeyPath(&unk_1000D5F60, v56);
          v92[0] = v29;
          ObservationRegistrar.access<A, B>(_:keyPath:)(v92, v58, v39);
          swift_release(v58);
          v59 = *(double *)(v29 + 16);
          if ((~*(_QWORD *)&v59 & 0x7FF0000000000000) != 0)
          {
            if (v59 > -9.22337204e18)
            {
              if (v59 < 9.22337204e18)
              {
                v60 = (uint64_t)v59;
                v61 = (_QWORD *)(v40 + *(int *)(v50 + 20));
                v62 = v61[3];
                v63 = v61[4];
                sub_10000C9C8(v61, v62);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))((uint64_t)v57, v60, v62, v63);
                sub_10000B600(v40, type metadata accessor for AnyArtist);
                v31 = (uint64_t)v91;
                goto LABEL_22;
              }
LABEL_35:
              __break(1u);
              return;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_32;
  }
  v52 = (uint64_t)v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v87, v32, v35);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v52, 0, 1, v35);
LABEL_23:
  v64 = swift_getKeyPath(&unk_1000D5F10, v53);
  v92[0] = v29;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v92, v64, v39);
  swift_release(v64);
  swift_beginAccess(v29 + 320, v92, 0, 0);
  sub_100007C8C(v29 + 320, (uint64_t)&v95, &qword_100118860);
  v65 = v96;
  if (v96)
  {
    v66 = sub_10000C9C8(&v95, v96);
    v91 = (char *)&v84;
    v67 = *(_QWORD *)(v65 - 8);
    __chkstk_darwin(v66);
    v69 = (char *)&v84 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v67 + 16))(v69);
    sub_10000526C((uint64_t)&v95, &qword_100118860);
    v70 = type metadata accessor for TrackPageMetadata(0);
    sub_100007C8C((uint64_t)&v69[*(int *)(v70 + 32)], v31, &qword_100118670);
    v71 = type metadata accessor for AnyAlbum(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v31, 1, v71) == 1)
    {
      sub_10000526C(v31, &qword_100118670);
      v72 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v38, 1, 1, v72);
    }
    else
    {
      v75 = (_QWORD *)(v31 + *(int *)(v71 + 20));
      v76 = v31;
      v77 = v75[3];
      v78 = v75[4];
      sub_10000C9C8(v75, v77);
      v79 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v80 = v78;
      v38 = (uint64_t)v88;
      v79(v77, v80);
      sub_10000B600(v76, type metadata accessor for AnyAlbum);
    }
    (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v65);
  }
  else
  {
    sub_10000526C((uint64_t)&v95, &qword_100118860);
    v73 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v38, 1, 1, v73);
  }
  v81 = swift_getKeyPath(&unk_1000D5F38, v74);
  *(_QWORD *)&v95 = v29;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v95, v81, v39);
  swift_release(v81);
  v82 = *(_QWORD *)(v29 + 208);
  swift_retain(v82);
  v83 = (uint64_t)v87;
  sub_1000B793C((uint64_t)v87, v38);
  swift_release(v82);
  sub_10000526C(v38, (uint64_t *)&unk_100118CE0);
  sub_10000526C(v83, (uint64_t *)&unk_100118CE0);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v98);
}

void *sub_100088E04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_1000D5D30, a2);
  v8 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(void **)(v2 + 560);
  v6 = v5;
  return v5;
}

uint64_t sub_100088E90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1000D5F10, a1);
  v7[0] = v2;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 320, v7, 0, 0);
  return sub_100007C8C(v2 + 320, a2, &qword_100118860);
}

uint64_t sub_100088F40(uint64_t a1, uint64_t a2)
{
  _BYTE v4[24];
  __int128 v5[7];

  sub_100043E28(a2, (uint64_t)v5);
  swift_beginAccess(a1 + 32, v4, 33, 0);
  sub_10008D62C(v5, a1 + 32);
  swift_endAccess(v4);
  sub_1000884E0();
  return sub_100045124((uint64_t)v5);
}

uint64_t sub_100088FBC(uint64_t result, double a2)
{
  *(double *)(result + 144) = a2;
  return result;
}

uint64_t sub_100088FC4(uint64_t result, double a2)
{
  *(double *)(result + 152) = a2;
  return result;
}

uint64_t sub_100088FCC(uint64_t result, double a2)
{
  *(double *)(result + 160) = a2;
  return result;
}

double sub_100088FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D6028, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 168);
}

uint64_t sub_100089058(uint64_t result, double a2)
{
  *(double *)(result + 168) = a2;
  return result;
}

double sub_100089060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5F88, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 176);
}

uint64_t sub_1000890E4(uint64_t result, double a2)
{
  *(double *)(result + 176) = a2;
  return result;
}

double sub_1000890EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5FB0, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(double *)(v2 + 184);
}

uint64_t sub_100089170(uint64_t result, double a2)
{
  *(double *)(result + 184) = a2;
  return result;
}

uint64_t sub_100089178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D5DD0, a2);
  v6 = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v4);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + 192);
}

void sub_1000891FC(uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5DD0, a2);
  v7 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v6);
  swift_release(KeyPath);
  *a3 = *(_BYTE *)(v4 + 192);
}

double sub_100089288(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5DD0, a2);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008D850, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100089330(uint64_t result, double a2)
{
  *(double *)(result + 200) = a2;
  return result;
}

double sub_100089338@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5F38, a2);
  v9 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 208);
  *a3 = v7;
  *(_QWORD *)&result = swift_retain(v7).n128_u64[0];
  return result;
}

double sub_1000893C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5F38, a2);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10008D6F4, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100089480@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];

  KeyPath = swift_getKeyPath(&unk_1000D5E20, a1);
  v7[0] = v2;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 216, v7, 0, 0);
  return sub_100007C8C(v2 + 216, a2, &qword_1001185E0);
}

uint64_t sub_100089530@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[3];

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5E20, a2);
  v8[0] = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v6);
  swift_release(KeyPath);
  swift_beginAccess(v4 + 216, v8, 0, 0);
  return sub_100007C8C(v4 + 216, a3, &qword_1001185E0);
}

uint64_t sub_1000895E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  _BYTE v10[40];

  sub_100007C8C(a1, (uint64_t)v10, &qword_1001185E0);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5E20, v4);
  v8[2] = v3;
  v8[3] = v10;
  v9 = v3;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008D88C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return sub_10000526C((uint64_t)v10, &qword_1001185E0);
}

uint64_t sub_1000896A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 216;
  swift_beginAccess(a1 + 216, v5, 33, 0);
  sub_10008D72C(a2, v3, &qword_1001185E0);
  return swift_endAccess(v5);
}

double sub_100089710@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5DF8, a2);
  v9 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 264);
  *a3 = v7;
  *(_QWORD *)&result = swift_retain(v7).n128_u64[0];
  return result;
}

double sub_1000897A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5DF8, a2);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10008D104, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100089858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  double v12;
  double v13;
  _BOOL4 v14;
  _BOOL4 v16;
  _BYTE v17[24];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  CLLocationCoordinate2D v21;

  KeyPath = swift_getKeyPath(&unk_1000D5F10, a2);
  v18[0] = v2;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v18, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 320, v17, 0, 0);
  sub_100007C8C(v2 + 320, (uint64_t)v18, &qword_100118860);
  v5 = v19;
  if (v19)
  {
    v6 = v20;
    v7 = sub_10000C9C8(v18, v19);
    v8 = *(_QWORD *)(v5 - 8);
    __chkstk_darwin(v7);
    v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v8 + 16))(v10);
    sub_10000526C((uint64_t)v18, &qword_100118860);
    v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v5, v6);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v5);
    if (v11)
    {
      objc_msgSend(v11, "coordinate");
      if (v12 == 0.0)
      {
        objc_msgSend(v11, "coordinate");
        v14 = v13 != 0.0;
      }
      else
      {
        v14 = 1;
      }
      objc_msgSend(v11, "coordinate");
      v16 = CLLocationCoordinate2DIsValid(v21);

      return v16 & v14;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    sub_10000526C((uint64_t)v18, &qword_100118860);
    return 0;
  }
}

id sub_100089A18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5DA8, a2);
  v9 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(void **)(v4 + 272);
  *a3 = v7;
  return v7;
}

void sub_100089AA4(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5DA8, a2);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10008D864, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_100089B58@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[3];

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5D08, a2);
  v8[0] = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v6);
  swift_release(KeyPath);
  swift_beginAccess(v4 + 280, v8, 0, 0);
  return sub_100007C8C(v4 + 280, a3, &qword_1001188C0);
}

uint64_t sub_100089C08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  _BYTE v10[40];

  sub_100007C8C(a1, (uint64_t)v10, &qword_1001188C0);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5D08, v4);
  v8[2] = v3;
  v8[3] = v10;
  v9 = v3;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008CE4C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return sub_10000526C((uint64_t)v10, &qword_1001188C0);
}

uint64_t sub_100089CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 280;
  swift_beginAccess(a1 + 280, v5, 33, 0);
  sub_10008D72C(a2, v3, &qword_1001188C0);
  return swift_endAccess(v5);
}

uint64_t sub_100089D38@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[3];

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5F10, a2);
  v8[0] = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v6);
  swift_release(KeyPath);
  swift_beginAccess(v4 + 320, v8, 0, 0);
  return sub_100007C8C(v4 + 320, a3, &qword_100118860);
}

uint64_t sub_100089DE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  _BYTE v10[104];

  sub_100007C8C(a1, (uint64_t)v10, &qword_100118860);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5F10, v4);
  v8[2] = v3;
  v8[3] = v10;
  v9 = v3;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008D8B4, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return sub_10000526C((uint64_t)v10, &qword_100118860);
}

uint64_t sub_100089EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = a1 + 320;
  swift_beginAccess(a1 + 320, v5, 33, 0);
  sub_10008D72C(a2, v3, &qword_100118860);
  return swift_endAccess(v5);
}

id sub_100089F18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5D30, a2);
  v9 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(void **)(v4 + 560);
  *a3 = v7;
  return v7;
}

void sub_100089FA4(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5D30, a2);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10008D770, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_10008A058@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D5EE8, a2);
  v9 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 576);
  *a3 = *(_QWORD *)(v4 + 568);
  a3[1] = v7;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_10008A0EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[7];
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D5EE8, a2);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v9 = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10008D5EC, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10008A1A8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 584) = a2;
  return result;
}

uint64_t sub_10008A1B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[16] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[17] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[18] = v3;
  v1[19] = v4;
  return swift_task_switch(sub_10008A21C, v3, v4);
}

uint64_t sub_10008A21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __n128 v6;
  void *v8;

  v3 = *(_QWORD *)(v2 + 128);
  KeyPath = swift_getKeyPath(&unk_1000D5CE0, a2);
  *(_QWORD *)(v2 + 80) = v3;
  v5 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 80, KeyPath, v5);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
  {
    v6 = swift_release(*(_QWORD *)(v2 + 136));
    return (*(uint64_t (**)(_QWORD, __n128))(v2 + 8))(0, v6);
  }
  else
  {
    v8 = *(void **)(*(_QWORD *)(v2 + 128) + 488);
    *(_QWORD *)(v2 + 56) = v2 + 120;
    *(_QWORD *)(v2 + 16) = v2;
    *(_QWORD *)(v2 + 24) = sub_10008A344;
    *(_QWORD *)(v2 + 112) = swift_continuation_init(v2 + 16, 1);
    *(_QWORD *)(v2 + 80) = _NSConcreteStackBlock;
    *(_QWORD *)(v2 + 88) = 0x40000000;
    *(_QWORD *)(v2 + 96) = sub_10004BE5C;
    *(_QWORD *)(v2 + 104) = &unk_10010C420;
    objc_msgSend(v8, "offerValuesWithCompletion:", v2 + 80);
    return swift_continuation_await(v2 + 16);
  }
}

uint64_t sub_10008A344()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 160) = v2;
  if (v2)
    v3 = sub_10008A3D4;
  else
    v3 = sub_10008A3A0;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_10008A3A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_10008A3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 136));
  swift_willThrow(v1);
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = type metadata accessor for Logger(0);
  sub_10000B5E8(v3, (uint64_t)qword_100124478);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 160);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 80) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error fetching Shazam offers: %@", v9, 0xCu);
    v12 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 160));
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10008A5B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[11] = a1;
  v2[12] = a2;
  v3 = type metadata accessor for MainActor(0);
  v2[13] = v3;
  v2[14] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[15] = v4;
  v2[16] = v5;
  return swift_task_switch(sub_10008A624, v4, v5);
}

uint64_t sub_10008A624(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2[12];
  v3 = v2[13];
  KeyPath = swift_getKeyPath(&unk_1000D5EE8, a2);
  v2[10] = v4;
  v6 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 10, KeyPath, v6);
  swift_release(KeyPath);
  v2[17] = *(_QWORD *)(v4 + 568);
  v7 = *(_QWORD *)(v4 + 576);
  v2[18] = v7;
  v8 = swift_bridgeObjectRetain(v7);
  v2[19] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[20] = v9;
  v2[21] = v10;
  return swift_task_switch(sub_10008A700, v9, v10);
}

uint64_t sub_10008A700()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 144);
  if (v1)
  {
    v2 = (void *)objc_opt_self(SHRemoteConfiguration);
    swift_bridgeObjectRetain(v1);
    v3 = objc_msgSend(v2, "sharedInstance");
    v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10011A568 + dword_10011A568);
    v4 = (_QWORD *)swift_task_alloc(unk_10011A56C);
    *(_QWORD *)(v0 + 176) = v4;
    *v4 = v0;
    v4[1] = sub_10008A7F8;
    return v6(v0 + 16, *(_QWORD *)(v0 + 136), v1, (uint64_t)v3);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 152));
    *(_OWORD *)(v0 + 280) = 0u;
    *(_OWORD *)(v0 + 296) = 0u;
    *(_OWORD *)(v0 + 264) = 0u;
    *(_OWORD *)(v0 + 248) = xmmword_1000D59E0;
    return swift_task_switch(sub_10008A8BC, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  }
}

uint64_t sub_10008A7F8()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  v2 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v1 + 200) = v2;
  v3 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v1 + 216) = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v1 + 232) = v3;
  return swift_task_switch(sub_10008A85C, *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 168));
}

uint64_t sub_10008A85C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(v1);
  v2 = *(_OWORD *)(v0 + 232);
  v3 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 280) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 296) = v2;
  *(_OWORD *)(v0 + 264) = v3;
  *(_OWORD *)(v0 + 248) = *(_OWORD *)(v0 + 184);
  return swift_task_switch(sub_10008A8BC, *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
}

uint64_t sub_10008A8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  v6 = *(_OWORD *)(v0 + 264);
  v7 = *(_OWORD *)(v0 + 280);
  v5 = *(_OWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 112));
  *(_OWORD *)v3 = v5;
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)(v3 + 32) = v7;
  *(_QWORD *)(v3 + 48) = v1;
  *(_QWORD *)(v3 + 56) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008A930(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 80) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 88) = v3;
  *v3 = v2;
  v3[1] = sub_10008A998;
  return v5(v2 + 16);
}

uint64_t sub_10008A998()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0 + 16;
  v2 = *(_QWORD *)(*v0 + 80);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  sub_100007C48(v1, v2, &qword_10011B120);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10008A9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_10008AA6C, v6, v7);
}

uint64_t sub_10008AA6C()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = objc_msgSend(*(id *)(v0 + 40), "appleMusicID");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  *(_QWORD *)(v0 + 72) = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_10011D84C);
  *(_QWORD *)(v0 + 80) = v6;
  *v6 = v0;
  v6[1] = sub_10008AB0C;
  return sub_1000C99AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v3, v5);
}

uint64_t sub_10008AB0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_100021C7C, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10008AB60(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v5 = sub_100004F7C(&qword_10011B0E0);
  v6 = a1 + *(int *)(v5 + 48);
  v7 = a1 + *(int *)(v5 + 64);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a2 + *a2);
  v8 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10008ABF8;
  return v10(a1, v6, v7);
}

uint64_t sub_10008ABF8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10008AC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  v5 = sub_100004F7C(&qword_100118670);
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for MainActor(0);
  v4[21] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v4[22] = v7;
  v4[23] = v8;
  return swift_task_switch(sub_10008ACD8, v7, v8);
}

uint64_t sub_10008ACD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;

  v4 = v2[19];
  v3 = v2[20];
  v5 = v2[17];
  v27 = v2[18];
  v6 = v2[16];
  v7 = *(void **)(v4 + 488);
  KeyPath = swift_getKeyPath(&unk_1000D5CE0, a2);
  v2[24] = OBJC_IVAR____TtC16MusicRecognition18TrackPageViewModel___observationRegistrar;
  v2[12] = v4;
  v9 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  v2[25] = v9;
  v10 = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v2 + 12, KeyPath, v9);
  swift_release(KeyPath);
  LOBYTE(KeyPath) = *(_BYTE *)(v4 + 24);
  v11 = (_QWORD *)(v6 + *(int *)(type metadata accessor for AnyArtist(0) + 20));
  v12 = v11[3];
  v13 = v11[4];
  sub_10000C9C8(v11, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  v16 = v15;
  v17 = (_QWORD *)(v5 + *(int *)(type metadata accessor for AnySong(0) + 20));
  v19 = v17[3];
  v18 = v17[4];
  sub_10000C9C8(v17, v19);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v19, v18);
  v22 = v21;
  sub_10000B340(v27, v3, type metadata accessor for AnyAlbum);
  v23 = type metadata accessor for AnyAlbum(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v3, 0, 1, v23);
  v2[5] = type metadata accessor for StreamingServicesProvider(0);
  v2[6] = &off_10010A6A0;
  v24 = sub_1000446F4(v2 + 2);
  v25 = (_QWORD *)swift_task_alloc(dword_100118D2C);
  v2[26] = v25;
  *v25 = v2;
  v25[1] = sub_10008AEB0;
  return sub_10004B2FC((uint64_t)v24, (uint64_t)v10, KeyPath, v14, v16, v20, v22, v2[20]);
}

uint64_t sub_10008AEB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10008AFE0;
  else
    v4 = sub_10008AF10;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 184));
}

uint64_t sub_10008AF10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 168));
  KeyPath = swift_getKeyPath(&unk_1000D5E20, v3);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v0 + 16;
  *(_QWORD *)(v0 + 120) = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 120, KeyPath, sub_10008D88C, v5, (char *)&type metadata for () + 8, v1);
  swift_release(KeyPath);
  swift_task_dealloc(v5);
  sub_10000526C(v0 + 16, &qword_1001185E0);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008AFE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;

  swift_release(*(_QWORD *)(v0 + 168));
  sub_10008D160((_QWORD *)(v0 + 16));
  if (qword_100115DD8 != -1)
    swift_once(&qword_100115DD8, sub_10000C418);
  v1 = *(_QWORD *)(v0 + 216);
  v2 = type metadata accessor for Logger(0);
  sub_10000B5E8(v2, (uint64_t)qword_100124478);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 216);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 112) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error initializing Streaming providers controller %@", v8, 0xCu);
    v11 = sub_100004F7C((uint64_t *)&unk_100116E50);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 216));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 152);

  *(_QWORD *)(v0 + 88) = 0;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  KeyPath = swift_getKeyPath(&unk_1000D5E20, v15);
  v17 = swift_task_alloc(32);
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = v0 + 56;
  *(_QWORD *)(v0 + 104) = v14;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 104, KeyPath, sub_10008D19C, v17, (char *)&type metadata for () + 8, v13);
  swift_release(KeyPath);
  swift_task_dealloc(v17);
  sub_10000526C(v0 + 56, &qword_1001185E0);
  swift_errorRelease(v12);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B250(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t KeyPath;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;

  v36 = a2;
  v5 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v35 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004F7C(&qword_10011B0D8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Song(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v35 - v19;
  if ((a1 & 1) != 0)
  {
    sub_100007C8C(v36, (uint64_t)v13, &qword_10011B0D8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
      v29 = sub_100004F7C(&qword_10011B158);
      swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
      v30 = sub_10008BE00((uint64_t)v18);
      v40 = v29;
      v41 = &off_10010DAF8;
      v39[0] = v30;
      KeyPath = swift_getKeyPath(&unk_1000D5D08, v31);
      __chkstk_darwin(KeyPath);
      v33 = v37;
      *(&v35 - 2) = v37;
      *(&v35 - 1) = (char *)v39;
      v38 = v33;
      v34 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v38, KeyPath, sub_10008D8A0, &v35 - 4, (char *)&type metadata for () + 8, v34);
      swift_release(KeyPath);
      sub_10000526C((uint64_t)v39, &qword_1001188C0);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    }
    sub_10000526C((uint64_t)v13, &qword_10011B0D8);
  }
  sub_100007C8C(a3, (uint64_t)v7, (uint64_t *)&unk_100118CE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_10000526C((uint64_t)v7, (uint64_t *)&unk_100118CE0);
  v22 = (uint64_t)v35;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v35, v7, v8);
  if (qword_100115FF8 != -1)
    swift_once(&qword_100115FF8, sub_10006EB20);
  v23 = (void *)qword_100124538;
  sub_10006ED38(v22);
  v40 = type metadata accessor for SongPreviewPlaybackController(0);
  v41 = &off_10010B990;
  v39[0] = v23;
  v25 = swift_getKeyPath(&unk_1000D5D08, v24);
  __chkstk_darwin(v25);
  v26 = v37;
  *(&v35 - 2) = v37;
  *(&v35 - 1) = (char *)v39;
  v38 = v26;
  v27 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  v28 = v23;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v38, v25, sub_10008D8A0, &v35 - 4, (char *)&type metadata for () + 8, v27);
  swift_release(v25);
  sub_10000526C((uint64_t)v39, &qword_1001188C0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v22, v8);
}

double sub_10008B678(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  _QWORD v6[5];
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D60A0, a2);
  v6[2] = a1;
  v6[3] = 0x3FF0000000000000;
  v7 = a1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_10008D824, v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10008B728(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  _QWORD v6[5];
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000D6078, a2);
  v6[2] = a1;
  v6[3] = 0x3FF0000000000000;
  v7 = a1;
  v4 = sub_100004864(&qword_100118538, type metadata accessor for TrackPageViewModel, (uint64_t)&unk_1000D5C10);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v7, KeyPath, sub_10008D80C, v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10008B7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100045124(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 208));
  sub_10000526C(v0 + 216, &qword_1001185E0);
  swift_release(*(_QWORD *)(v0 + 264));

  sub_10000526C(v0 + 280, &qword_1001188C0);
  sub_10000526C(v0 + 320, &qword_100118860);
  sub_10008CC44(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480));

  v1 = *(_QWORD *)(v0 + 504);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 520));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 536);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 552));
  swift_bridgeObjectRelease(v2);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 576));
  _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)(v0 + 592));
  v3 = v0 + OBJC_IVAR____TtC16MusicRecognition18TrackPageViewModel___observationRegistrar;
  v4 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_10008B8C8()
{
  uint64_t v0;

  sub_10008B7D8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10008B8EC()
{
  return type metadata accessor for TrackPageViewModel(0);
}

uint64_t type metadata accessor for TrackPageViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10011AF58;
  if (!qword_10011AF58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrackPageViewModel);
  return result;
}

uint64_t sub_10008B930(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[27];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1000D5AE8;
  v4[2] = &unk_1000D5B00;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = &unk_1000D5AE8;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[12] = &unk_1000D5B18;
  v4[13] = &unk_1000D5B30;
  v4[14] = &unk_1000D5B48;
  v4[15] = &unk_1000D5B48;
  v4[16] = &unk_1000D5B18;
  v4[17] = &unk_1000D5B60;
  v4[18] = &unk_1000D5B78;
  v4[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[20] = &unk_1000D5B90;
  v4[21] = &unk_1000D5B90;
  v4[22] = &unk_1000D5B48;
  v4[23] = &unk_1000D5BA8;
  v4[24] = &unk_1000D5AE8;
  v4[25] = &unk_1000D5BC0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[26] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 27, v4, a1 + 80);
  }
  return result;
}

uint64_t destroy for TrackPageViewModel.LoadingState(uint64_t result)
{
  if (*(unsigned __int8 *)(result + 104) < 2u)
  {
    if (*(_BYTE *)(result + 104))
      return result;
    return _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)result);
  }
  if (*(_DWORD *)result == -2)
    return _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)result);
  return result;
}

uint64_t initializeWithCopy for TrackPageViewModel.LoadingState(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a2 + 104);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 104) = 1;
  }
  else if (v3)
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for TrackPageViewModel.LoadingState(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 104);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (!v4)
      _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)a1);
    v5 = *((unsigned __int8 *)a2 + 104);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 104) = 1;
    }
    else if (v5)
    {
      v11 = *a2;
      v12 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)a1 = v11;
      v13 = a2[3];
      v14 = a2[4];
      v15 = a2[5];
      *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
      *(_OWORD *)(a1 + 64) = v14;
      *(_OWORD *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 48) = v13;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v6;
      v7 = *((_QWORD *)a2 + 12);
      v8 = a2[3];
      v9 = a2[4];
      v10 = a2[5];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 64) = v9;
      *(_OWORD *)(a1 + 80) = v10;
      *(_QWORD *)(a1 + 96) = v7;
      (**(void (***)(uint64_t, __int128 *))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 104) = 0;
    }
  }
  return a1;
}

__n128 initializeWithTake for TrackPageViewModel.LoadingState(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for TrackPageViewModel.LoadingState(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 104);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (!v4)
      _s16MusicRecognition11AnyPlaylistVwxx_0((_QWORD *)a1);
    v5 = *(unsigned __int8 *)(a2 + 104);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 104) = 1;
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
        v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        v10 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v10;
      }
      else
      {
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        v8 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v8;
        *(_BYTE *)(a1 + 104) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TrackPageViewModel.LoadingState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TrackPageViewModel.LoadingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 89) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = -(char)a2;
  }
  return result;
}

uint64_t sub_10008BD98(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 104);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_10008BDB4(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  if (a2 > 1)
  {
    v2 = a2 - 2;
    *(_QWORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)result = v2;
  }
  *(_BYTE *)(result + 104) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TrackPageViewModel.LoadingState()
{
  return &type metadata for TrackPageViewModel.LoadingState;
}

char *sub_10008BE00(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  double v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v2 = v1;
  v52 = a1;
  v3 = type metadata accessor for Song(0);
  v4 = *(_QWORD *)(v3 - 8);
  v49 = *(_QWORD *)(v4 + 64);
  v46 = v4;
  __chkstk_darwin(v3);
  v48 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004F7C(&qword_100116DC0);
  __chkstk_darwin(v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004F7C(&qword_10011B160);
  v10 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  v51 = v10;
  __chkstk_darwin(v9);
  v47 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004F7C(&qword_10011A358);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v1 + 2) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  type metadata accessor for SystemMusicPlayer(0);
  *(_QWORD *)&v1[v16] = static SystemMusicPlayer.shared.getter();
  v17 = &v2[*(_QWORD *)(*(_QWORD *)v2 + 120)];
  v18 = type metadata accessor for SongPreviewStatusController(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v54 = 0;
  Published.init(initialValue:)(&v54, &type metadata for Double);
  LOBYTE(v54) = 0;
  Published.init(initialValue:)(&v54, &type metadata for SongPreviewStatusController.PlaybackStatus);
  v54 = v19;
  Published.init(initialValue:)(&v54, v18);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v15, v12);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v21 = v20(&v2[*(_QWORD *)(*(_QWORD *)v2 + 104)], v52, v3);
  v22 = MusicPlayer.state.getter(v21);
  v23 = dispatch thunk of MusicPlayer.State.objectWillChange.getter();
  swift_release(v22);
  v54 = v23;
  v53 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v24 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
  v25 = sub_100004F7C(&qword_10011B168);
  v26 = sub_10008D26C();
  v27 = sub_10000522C(&qword_10011B170, &qword_10011B168, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_100004864((unint64_t *)&qword_100116DF0, (uint64_t (*)(uint64_t))sub_10008D26C, (uint64_t)&protocol conformance descriptor for NSRunLoop);
  v29 = v47;
  Publisher.receive<A>(on:options:)(&v53, v8, v25, v26, v27, v28);
  sub_10000526C((uint64_t)v8, &qword_100116DC0);

  swift_release(v54);
  v30 = swift_allocObject(&unk_10010C368, 24, 7);
  swift_weakInit(v30 + 16, v2);
  v31 = v48;
  v32 = v52;
  v20(v48, v52, v3);
  v33 = v46;
  v34 = *(unsigned __int8 *)(v46 + 80);
  v35 = (v34 + 24) & ~v34;
  v36 = swift_allocObject(&unk_10010C390, v35 + v49, v34 | 7);
  *(_QWORD *)(v36 + 16) = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v36 + v35, v31, v3);
  v37 = swift_allocObject(&unk_10010C3B8, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_10008D31C;
  *(_QWORD *)(v37 + 24) = v36;
  v38 = sub_10000522C(&qword_10011B178, &qword_10011B160, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v39 = v50;
  v40 = Publisher<>.sink(receiveValue:)(sub_10008D370, v37, v50, v38);
  v41 = swift_release(v37);
  (*(void (**)(char *, uint64_t, __n128))(v51 + 8))(v29, v39, v41);
  v42 = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = v40;
  swift_release(v42);
  v43 = sub_10008D378();
  (*(void (**)(uint64_t, uint64_t, double))(v33 + 8))(v32, v3, v43);
  return v2;
}

void sub_10008C244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  uint64_t v68;
  _BYTE v69[24];

  v4 = type metadata accessor for MusicPlayer.PlaybackStatus(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MusicPlayer.Queue.Entry(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004F7C(&qword_10011B188);
  __chkstk_darwin(v12);
  v14 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004F7C(&qword_10011B190);
  __chkstk_darwin(v15);
  v17 = (char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v69, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v19 = Strong;
    v67[0] = v4;
    v67[1] = a2;
    v20 = dispatch thunk of SystemMusicPlayer.queue.getter();
    dispatch thunk of MusicPlayer.Queue.currentEntry.getter();
    v21 = swift_release(v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v9 + 48))(v14, 1, v8, v21))
    {
      v22 = &qword_10011B188;
      v23 = (uint64_t)v14;
LABEL_6:
      v27 = sub_10000526C(v23, v22);
LABEL_7:
      __chkstk_darwin(v27);
      v28 = type metadata accessor for Song(0);
      v67[-2] = v28;
      v67[-1] = &protocol witness table for Song;
      KeyPath = swift_getKeyPath(&unk_1000D5E48, &v67[-2]);
      __chkstk_darwin(KeyPath);
      v67[-2] = v28;
      v67[-1] = &protocol witness table for Song;
      v30 = swift_getKeyPath(&unk_1000D5E80, &v67[-2]);
      static Published.subscript.getter(&v68, v19, KeyPath, v30);
      swift_release(KeyPath);
      swift_release(v30);
      v31 = v68;
      v33 = swift_getKeyPath(&unk_1000D5EA0, v32);
      v35 = swift_getKeyPath(&unk_1000D5EC8, v34);
      LOBYTE(v68) = 0;
      static Published.subscript.setter(&v68, v31, v33, v35);
LABEL_8:
      swift_release(v19);
      return;
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    v24 = sub_10000526C((uint64_t)v14, &qword_10011B188);
    MusicPlayer.Queue.Entry.item.getter(v24);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v25 = type metadata accessor for MusicPlayer.Queue.Entry.Item(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v17, 1, v25) == 1)
    {
      v22 = &qword_10011B190;
      v23 = (uint64_t)v17;
      goto LABEL_6;
    }
    v36 = MusicPlayer.Queue.Entry.Item.id.getter();
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v25);
    v39 = type metadata accessor for Song(0);
    v40 = dispatch thunk of MusicItem.id.getter(v39, &protocol witness table for Song);
    v42 = v41;
    if (v40 == v36 && v41 == v38)
    {
      v27 = swift_bridgeObjectRelease_n(v38, 2);
    }
    else
    {
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v36, v38, 0);
      swift_bridgeObjectRelease(v38);
      v27 = swift_bridgeObjectRelease(v42);
      if ((v43 & 1) == 0)
        goto LABEL_7;
    }
    v44 = MusicPlayer.state.getter(v27);
    dispatch thunk of MusicPlayer.State.playbackStatus.getter();
    v45 = swift_release(v44);
    v46 = v67[0];
    v47 = (*(uint64_t (**)(char *, _QWORD, __n128))(v5 + 88))(v7, v67[0], v45);
    if ((_DWORD)v47 == enum case for MusicPlayer.PlaybackStatus.stopped(_:))
    {
      __chkstk_darwin(v47);
      v67[-2] = v39;
      v67[-1] = &protocol witness table for Song;
      v48 = swift_getKeyPath(&unk_1000D5E48, &v67[-2]);
      __chkstk_darwin(v48);
      v67[-2] = v39;
      v67[-1] = &protocol witness table for Song;
      v49 = swift_getKeyPath(&unk_1000D5E80, &v67[-2]);
      static Published.subscript.getter(&v68, v19, v48, v49);
      swift_release(v48);
      swift_release(v49);
      v50 = v68;
      v52 = swift_getKeyPath(&unk_1000D5EA0, v51);
      v54 = swift_getKeyPath(&unk_1000D5EC8, v53);
      LOBYTE(v68) = 0;
LABEL_25:
      swift_retain(v50);
      static Published.subscript.setter(&v68, v50, v52, v54);
      swift_release(v50);
      goto LABEL_8;
    }
    v55 = v47;
    if ((_DWORD)v47 == enum case for MusicPlayer.PlaybackStatus.playing(_:))
    {
      __chkstk_darwin(v47);
      v67[-2] = v39;
      v67[-1] = &protocol witness table for Song;
      v56 = swift_getKeyPath(&unk_1000D5E48, &v67[-2]);
      __chkstk_darwin(v56);
      v67[-2] = v39;
      v67[-1] = &protocol witness table for Song;
      v57 = swift_getKeyPath(&unk_1000D5E80, &v67[-2]);
      static Published.subscript.getter(&v68, v19, v56, v57);
      swift_release(v56);
      swift_release(v57);
      v50 = v68;
      v52 = swift_getKeyPath(&unk_1000D5EA0, v58);
      v54 = swift_getKeyPath(&unk_1000D5EC8, v59);
      v60 = 1;
LABEL_24:
      LOBYTE(v68) = v60;
      goto LABEL_25;
    }
    if ((_DWORD)v47 == enum case for MusicPlayer.PlaybackStatus.paused(_:)
      || (_DWORD)v47 == enum case for MusicPlayer.PlaybackStatus.interrupted(_:))
    {
      __chkstk_darwin(v47);
      v67[-2] = v39;
      v67[-1] = &protocol witness table for Song;
      v63 = swift_getKeyPath(&unk_1000D5E48, &v67[-2]);
      __chkstk_darwin(v63);
      v67[-2] = v39;
      v67[-1] = &protocol witness table for Song;
      v64 = swift_getKeyPath(&unk_1000D5E80, &v67[-2]);
      static Published.subscript.getter(&v68, v19, v63, v64);
      swift_release(v63);
      swift_release(v64);
      v50 = v68;
      v52 = swift_getKeyPath(&unk_1000D5EA0, v65);
      v54 = swift_getKeyPath(&unk_1000D5EC8, v66);
      v60 = 2;
      goto LABEL_24;
    }
    if ((_DWORD)v47 == enum case for MusicPlayer.PlaybackStatus.seekingForward(_:))
      goto LABEL_8;
    v61 = enum case for MusicPlayer.PlaybackStatus.seekingBackward(_:);
    v62 = swift_release(v19);
    if (v55 != v61)
      (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v46, v62);
  }
}

uint64_t sub_10008C920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[5];

  v12[3] = type metadata accessor for MusicKitMusicLibrary(0);
  v12[4] = &off_10010A868;
  v12[0] = a1;
  LOBYTE(v11) = 0;
  v4 = sub_100004F7C(&qword_1001190B0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(a2 + 16) = CurrentValueSubject.init(_:)(&v11);
  *(_QWORD *)(a2 + 64) = 0;
  sub_100007AE0((uint64_t)v12, a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v5 = v11;
  v6 = swift_allocObject(&unk_10010C340, 24, 7);
  swift_weakInit(v6 + 16, a2);
  v7 = sub_10000522C((unint64_t *)&qword_10011B150, &qword_1001190B0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  swift_retain(v5);
  v8 = Publisher<>.sink(receiveValue:)(sub_10008D264, v6, v4, v7);
  swift_release(v6);
  swift_release(v11);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v8;
  swift_release(v9);
  _s16MusicRecognition11AnyPlaylistVwxx_0(v12);
  return a2;
}

uint64_t sub_10008CA4C(uint64_t a1, uint64_t a2)
{
  char v3;
  int8x16_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[13];
  _QWORD v13[13];
  __int128 v14[7];
  _BYTE v15[104];
  char v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char v24;

  sub_100043E28(a1, (uint64_t)v15);
  sub_100043E28(a2, (uint64_t)&v17);
  if (!v16)
  {
    sub_100043E28((uint64_t)v15, (uint64_t)v14);
    if (v24)
    {
      _s16MusicRecognition11AnyPlaylistVwxx_0(v14);
      goto LABEL_9;
    }
    sub_100043E64(v14, (uint64_t)v13);
    sub_100043E64((__int128 *)&v17, (uint64_t)v12);
    sub_10000C9C8(v13, v13[3]);
    v5 = sub_10009854C();
    v7 = v6;
    sub_10000C9C8(v12, v12[3]);
    v8 = sub_10009854C();
    v10 = v9;
    if (v7)
    {
      if (v9)
      {
        if (v5 == v8 && v7 == v9)
        {
          swift_bridgeObjectRelease(v7);
          v3 = 1;
        }
        else
        {
          v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
          swift_bridgeObjectRelease(v7);
        }
      }
      else
      {
        v3 = 0;
        v10 = v7;
      }
    }
    else
    {
      if (!v9)
      {
        v3 = 1;
        goto LABEL_21;
      }
      v3 = 0;
    }
    swift_bridgeObjectRelease(v10);
LABEL_21:
    _s16MusicRecognition11AnyPlaylistVwxx_0(v12);
    _s16MusicRecognition11AnyPlaylistVwxx_0(v13);
    goto LABEL_22;
  }
  if (v16 == 1)
  {
    sub_100043E28((uint64_t)v15, (uint64_t)v14);
    if (v24 == 1)
    {
      v3 = LOBYTE(v14[0]) == v17;
LABEL_22:
      sub_100045124((uint64_t)v15);
      return v3 & 1;
    }
  }
  else if (v24 == 2)
  {
    v4 = vorrq_s8(vorrq_s8(vorrq_s8(v20, v22), vorrq_s8(v21, v23)), vorrq_s8(v18, v19));
    if (!(*(_QWORD *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v17))
    {
      sub_100045124((uint64_t)v15);
      v3 = 1;
      return v3 & 1;
    }
  }
LABEL_9:
  sub_10000526C((uint64_t)v15, &qword_10011B0B0);
  v3 = 0;
  return v3 & 1;
}

uint64_t sub_10008CC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrackPageViewModel.StateError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackPageViewModel.StateError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10008CD74 + 4 * byte_1000D59F5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10008CDA8 + 4 * byte_1000D59F0[v4]))();
}

uint64_t sub_10008CDA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008CDB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008CDB8);
  return result;
}

uint64_t sub_10008CDC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008CDCCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10008CDD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008CDD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrackPageViewModel.StateError()
{
  return &type metadata for TrackPageViewModel.StateError;
}

unint64_t sub_10008CDF8()
{
  unint64_t result;

  result = qword_10011B0B8;
  if (!qword_10011B0B8)
  {
    result = swift_getWitnessTable(&unk_1000D5CB8, &type metadata for TrackPageViewModel.StateError);
    atomic_store(result, &qword_10011B0B8);
  }
  return result;
}

uint64_t sub_10008CE4C()
{
  uint64_t v0;

  return sub_100089CD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10008CE64()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 24) = *(_BYTE *)(v0 + 24);
}

void sub_10008CE94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 272);
  *(_QWORD *)(v1 + 272) = v2;
  v4 = v2;

}

uint64_t sub_10008CEC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10011B104);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100010C20;
  return sub_10008A5B4(a1, v1);
}

uint64_t sub_10008CF1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10011B114);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000101B8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10011B110 + dword_10011B110))(a1, v4);
}

uint64_t sub_10008CF8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008CFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc(dword_10011B12C);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_100010C20;
  return sub_10008A9FC(a1, a2, a3, v8);
}

uint64_t sub_10008D020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10011B13C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100010C20;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10011B138 + dword_10011B138))(a1, v4);
}

uint64_t sub_10008D090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

void sub_10008D0EC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 192) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10008D104()
{
  return sub_10008D208();
}

uint64_t sub_10008D118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004F7C((uint64_t *)&unk_100118CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10008D160(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

uint64_t sub_10008D19C()
{
  uint64_t v0;

  return sub_1000896A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_10008D1B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRetain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_10008D208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 264);
  *(_QWORD *)(v2 + 264) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t sub_10008D240()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008D264(char *a1)
{
  uint64_t v1;

  return sub_10000C4C4(a1, v1);
}

unint64_t sub_10008D26C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116DE0;
  if (!qword_100116DE0)
  {
    v1 = objc_opt_self(NSRunLoop);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100116DE0);
  }
  return result;
}

uint64_t sub_10008D2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Song(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10008D31C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Song(0) - 8) + 80);
  sub_10008C244(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10008D34C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008D370(uint64_t a1)
{
  uint64_t v1;

  return sub_100051160(a1, *(uint64_t (**)(void))(v1 + 16));
}

double sub_10008D378()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  double result;
  _QWORD v20[4];

  v0 = sub_100004F7C(&qword_100116D98);
  __chkstk_darwin(v0);
  v2 = (char *)v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for TaskPriority(0);
  v4 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  v5 = swift_allocObject(&unk_10010C3E0, 32, 7);
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10000526C((uint64_t)v2, &qword_100116D98);
    v7 = 0;
    v8 = 0;
    v9 = 7168;
  }
  else
  {
    v10 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    v9 = v10 | 0x1C00;
    v12 = *v6;
    if (*v6)
    {
      v13 = *(_QWORD *)(v5 + 24);
      ObjectType = swift_getObjectType(*v6, v11);
      swift_unknownObjectRetain(v12);
      v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
      v8 = v15;
      swift_unknownObjectRelease(v12);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  v16 = swift_allocObject(&unk_10010C408, 32, 7);
  *(_QWORD *)(v16 + 16) = &unk_10011B180;
  *(_QWORD *)(v16 + 24) = v5;
  if (v8 | v7)
  {
    v20[0] = 0;
    v20[1] = 0;
    v17 = v20;
    v20[2] = v7;
    v20[3] = v8;
  }
  else
  {
    v17 = 0;
  }
  v18 = swift_task_create(v9, v17, (char *)&type metadata for () + 8, &unk_10011A370, v16);
  *(_QWORD *)&result = swift_release(v18).n128_u64[0];
  return result;
}

uint64_t sub_10008D534()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008D558()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10011C8B4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1000101B8;
  return sub_10006F784();
}

uint64_t sub_10008D5C4()
{
  return 16;
}

__n128 sub_10008D5D0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10008D5EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[2];
  v2 = v0[4];
  v3 = *(_QWORD *)(v1 + 576);
  *(_QWORD *)(v1 + 568) = v0[3];
  *(_QWORD *)(v1 + 576) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10008D62C(__int128 *a1, uint64_t a2)
{
  assignWithCopy for TrackPageViewModel.LoadingState(a2, a1);
  return a2;
}

