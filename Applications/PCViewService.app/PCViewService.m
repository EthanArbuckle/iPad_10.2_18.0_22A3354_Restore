int64x2_t sub_1000026B0@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  int64x2_t result;

  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a4;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

BOOL sub_1000026DC(double *a1)
{
  return vabdd_f64(*a1, a1[5]) <= a1[6] && fabs(a1[1]) <= a1[7];
}

int64x2_t sub_100002710@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  uint64_t v10;
  uint64_t v11;
  int64x2_t result;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  sub_100002A10((double *)&v14, (double *)&v13, a5, a6);
  v11 = v13;
  v10 = v14;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(double *)(a1 + 40) = a4;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

double sub_100002794(uint64_t a1, double a2, double a3)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  double v7;

  v6 = 0;
  v7 = 0.0;
  sub_100002A10(&v7, (double *)&v6, a2, a3);
  v5 = v6;
  result = v7;
  *(double *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void sub_1000027D0(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __double2 v19;
  double v20;
  long double v21;
  double v22;
  long double v23;
  double v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  long double __x;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v5 = *(double *)(a1 + 40);
  if (vabdd_f64(*(double *)a1, v5) <= *(double *)(a1 + 48))
  {
    v6 = *(double *)(a1 + 8);
    if (fabs(v6) <= *(double *)(a1 + 56))
    {
      v26 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a2 + 80) = v26;
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
      v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_OWORD *)(a2 + 16) = v27;
      v28 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a2 + 48) = v28;
      return;
    }
  }
  else
  {
    v6 = *(double *)(a1 + 8);
  }
  v7 = *(double *)a1 - v5;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v8;
  v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  v10 = *(double *)(a1 + 24);
  v11 = *(double *)(a1 + 32);
  v32 = v10;
  v33 = v5;
  v31 = v11;
  if (v10 == *(double *)(a1 + 64) && v11 == *(double *)(a1 + 72))
  {
    v12 = *(double *)(a1 + 80);
    v13 = *(double *)(a1 + 88);
    v15 = *(double *)(a1 + 96);
    v34 = *(double *)(a1 + 104);
    v14 = -v12;
  }
  else
  {
    v12 = v11 * 0.5;
    v13 = sqrt(v10);
    v14 = -(v11 * 0.5);
    v15 = sqrt(v13 * v13 - v12 * v12);
    v34 = sqrt(v12 * v12 - v13 * v13);
  }
  v16 = exp(v14 * a3);
  v17 = v6 + v12 * v7;
  if (v12 >= v13)
  {
    if (v12 <= v13)
    {
      v24 = v7 + v17 * a3;
      v20 = v16 * v14;
      v25 = v24;
      goto LABEL_14;
    }
    v21 = v34 * a3;
    __x = v34 * a3;
    v22 = v17 / v34;
    v30 = cosh(v21);
    v23 = sinh(__x);
    v20 = v22 * v23 + v7 * v30;
    v17 = v34 * (v22 * v30) + v7 * v23 * v34;
  }
  else
  {
    v18 = v17 / v15;
    v19 = __sincos_stret(v15 * a3);
    v20 = v19.__sinval * v18 + v7 * v19.__cosval;
    v17 = v15 * (v19.__cosval * v18) + -(v19.__sinval * v7) * v15;
  }
  v24 = v16 * v14;
  v25 = v20;
LABEL_14:
  *(double *)a2 = v33 + v16 * v25;
  *(double *)(a2 + 8) = v24 * v20 + v16 * v17;
  *(double *)(a2 + 64) = v32;
  *(double *)(a2 + 72) = v31;
  *(double *)(a2 + 80) = v12;
  *(double *)(a2 + 88) = v13;
  *(double *)(a2 + 96) = v15;
  *(double *)(a2 + 104) = v34;
}

double sub_1000029AC(double *a1, double *a2, double a3, double a4)
{
  double result;

  result = sqrt(a3);
  if (a1)
    *a1 = a4 / (result + result);
  if (a2)
  {
    result = 6.28318531 / result;
    *a2 = result;
  }
  return result;
}

double sub_1000029D8(double *a1, double *a2, double result, double a4, double a5)
{
  double v5;

  if (a1)
  {
    v5 = sqrt(result * a4);
    *a1 = a5 / (v5 + v5);
  }
  if (a2)
  {
    result = 6.28318531 / sqrt(a4 / result);
    *a2 = result;
  }
  return result;
}

double sub_100002A10(double *a1, double *a2, double result, double a4)
{
  double v4;
  double v5;

  v4 = 6.28318531 / a4 * (6.28318531 / a4);
  if (a1)
    *a1 = v4;
  if (a2)
  {
    v5 = sqrt(v4);
    result = (v5 + v5) * result;
    *a2 = result;
  }
  return result;
}

double sub_100002A40(double *a1, double *a2, double result, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = sqrt(a4 / result);
  v6 = 6.28318531 / (6.28318531 / v5) * (6.28318531 / (6.28318531 / v5));
  if (a1)
    *a1 = v6;
  if (a2)
  {
    v7 = sqrt(result * a4);
    v8 = sqrt(v6);
    result = a5 / (v7 + v7) * (v8 + v8);
    *a2 = result;
  }
  return result;
}

__n128 sub_100002A8C@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D3>, double a5@<D4>)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double v23;
  double v24;

  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v9 = a1 + 16;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  v23 = 0.0;
  v24 = 0.0;
  sub_100002A10(&v24, &v23, 1.0, 0.5);
  sub_1000026B0(v9, a4, 0.0, a4, v24, v23);
  sub_1000026B0((uint64_t)&v16, a5, 0.0, a5, v24, v23);
  v10 = v21;
  *(_OWORD *)(a1 + 192) = v20;
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v22;
  v11 = v17;
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v11;
  v12 = v19;
  *(_OWORD *)(a1 + 160) = v18;
  *(__n128 *)(a1 + 176) = v12;
  sub_1000026B0((uint64_t)&v16, a2, 0.0, a2, v24, v23);
  v13 = v21;
  *(_OWORD *)(a1 + 304) = v20;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v22;
  v14 = v17;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 256) = v14;
  result = v19;
  *(_OWORD *)(a1 + 272) = v18;
  *(__n128 *)(a1 + 288) = result;
  return result;
}

uint64_t sub_100002BA8(uint64_t result, double a2)
{
  *(double *)(result + 280) = a2;
  *(double *)(result + 240) = a2;
  *(_QWORD *)(result + 248) = 0;
  return result;
}

void sub_100002BB8(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 240) = a3;
    *(_QWORD *)(a1 + 248) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    sub_100002A10((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 264) = v7;
    *(_QWORD *)(a1 + 272) = v5;
    a3 = a2;
  }
  *(double *)(a1 + 280) = a3;
}

void sub_100002C20(uint64_t a1, double a2, double a3, double a4)
{
  if (a4 == 0.0)
  {
    *(double *)(a1 + 280) = a2;
  }
  else
  {
    sub_100002BB8(a1, a2, a4);
    a2 = a3;
  }
  *(double *)(a1 + 240) = a2;
  *(_QWORD *)(a1 + 248) = 0;
}

uint64_t sub_100002C70(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  *(double *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void sub_100002C80(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 16) = a2;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    sub_100002A10((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v5;
  }
  *(double *)(a1 + 56) = a2;
}

uint64_t sub_100002CE4(uint64_t result, double a2)
{
  *(double *)(result + 168) = a2;
  *(double *)(result + 128) = a2;
  *(_QWORD *)(result + 136) = 0;
  return result;
}

void sub_100002CF4(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3 == 0.0)
  {
    *(double *)(a1 + 128) = a2;
    *(_QWORD *)(a1 + 136) = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    sub_100002A10((double *)&v7, (double *)&v6, 1.0, a3);
    v5 = v6;
    *(_QWORD *)(a1 + 152) = v7;
    *(_QWORD *)(a1 + 160) = v5;
  }
  *(double *)(a1 + 168) = a2;
}

double sub_100002D58@<D0>(void *__src@<X0>, double *a2@<X8>, double a3@<D0>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double result;
  _OWORD v26[7];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  memcpy(a2, __src, 0x170uLL);
  v5 = *((_OWORD *)a2 + 6);
  v38 = *((_OWORD *)a2 + 5);
  v39 = v5;
  v40 = *((_OWORD *)a2 + 7);
  v6 = *((_OWORD *)a2 + 2);
  v34 = *((_OWORD *)a2 + 1);
  v35 = v6;
  v7 = *((_OWORD *)a2 + 4);
  v36 = *((_OWORD *)a2 + 3);
  v37 = v7;
  sub_1000027D0((uint64_t)&v34, (uint64_t)(a2 + 2), a3);
  v8 = *((_OWORD *)a2 + 13);
  v31 = *((_OWORD *)a2 + 12);
  v32 = v8;
  v33 = *((_OWORD *)a2 + 14);
  v9 = *((_OWORD *)a2 + 9);
  v27 = *((_OWORD *)a2 + 8);
  v28 = v9;
  v10 = *((_OWORD *)a2 + 11);
  v29 = *((_OWORD *)a2 + 10);
  v30 = v10;
  sub_1000027D0((uint64_t)&v27, (uint64_t)&v34, a3);
  v11 = v39;
  *((_OWORD *)a2 + 12) = v38;
  *((_OWORD *)a2 + 13) = v11;
  *((_OWORD *)a2 + 14) = v40;
  v12 = v35;
  *((_OWORD *)a2 + 8) = v34;
  *((_OWORD *)a2 + 9) = v12;
  v13 = v37;
  *((_OWORD *)a2 + 10) = v36;
  *((_OWORD *)a2 + 11) = v13;
  v14 = *((_OWORD *)a2 + 20);
  v31 = *((_OWORD *)a2 + 19);
  v32 = v14;
  v33 = *((_OWORD *)a2 + 21);
  v15 = *((_OWORD *)a2 + 16);
  v27 = *((_OWORD *)a2 + 15);
  v28 = v15;
  v16 = *((_OWORD *)a2 + 18);
  v29 = *((_OWORD *)a2 + 17);
  v30 = v16;
  sub_1000027D0((uint64_t)&v27, (uint64_t)&v34, a3);
  v17 = v39;
  *((_OWORD *)a2 + 19) = v38;
  *((_OWORD *)a2 + 20) = v17;
  *((_OWORD *)a2 + 21) = v40;
  v18 = v35;
  *((_OWORD *)a2 + 15) = v34;
  *((_OWORD *)a2 + 16) = v18;
  v19 = v37;
  *((_OWORD *)a2 + 17) = v36;
  *((_OWORD *)a2 + 18) = v19;
  *(double *)&v19 = *a2;
  *(double *)&v18 = a2[1];
  v20 = a2[2];
  v21 = a2[16];
  v22 = a2[30];
  v23 = *((_QWORD *)a2 + 44);
  v24 = *((_QWORD *)a2 + 45);
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  sub_100002710((uint64_t)&v34, *(double *)&v19, *(double *)&v18, v22, v20, v21);
  *(_QWORD *)&v37 = v23;
  *((_QWORD *)&v37 + 1) = v24;
  v26[4] = v38;
  v26[5] = v39;
  v26[6] = v40;
  v26[0] = v34;
  v26[1] = v35;
  v26[2] = v36;
  v26[3] = v37;
  sub_1000027D0((uint64_t)v26, (uint64_t)&v27, a3);
  result = *(double *)&v27;
  *(_OWORD *)a2 = v27;
  return result;
}

__n128 sub_100002EFC@<Q0>(__n128 *a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;

  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  sub_100002710((uint64_t)a2, a1->n128_f64[0], a1->n128_f64[1], a1[15].n128_f64[0], a1[1].n128_f64[0], a1[8].n128_f64[0]);
  result = a1[22];
  a2[3] = result;
  return result;
}

BOOL sub_100002F4C(_QWORD *a1)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  double v6;
  __int128 *v7;
  double v8;
  __int128 *v9;
  double v10;
  _BOOL8 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v1 = *(double *)a1;
  v2 = *((double *)a1 + 1);
  v3 = a1[44];
  v4 = a1[45];
  v5 = (__int128 *)(a1 + 2);
  v6 = *((double *)a1 + 2);
  v7 = (__int128 *)(a1 + 16);
  v8 = *((double *)a1 + 16);
  v9 = (__int128 *)(a1 + 30);
  v10 = *((double *)a1 + 30);
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  sub_100002710((uint64_t)&v28, v1, v2, v10, v6, v8);
  *(_QWORD *)&v31 = v3;
  *((_QWORD *)&v31 + 1) = v4;
  v25 = v32;
  v26 = v33;
  v27 = v34;
  v21 = v28;
  v22 = v29;
  v23 = v30;
  v24 = v31;
  result = sub_1000026DC((double *)&v21);
  if (result)
  {
    v12 = v9[5];
    v25 = v9[4];
    v26 = v12;
    v27 = v9[6];
    v13 = v9[1];
    v21 = *v9;
    v22 = v13;
    v14 = v9[3];
    v23 = v9[2];
    v24 = v14;
    result = sub_1000026DC((double *)&v21);
    if (result)
    {
      v15 = v5[5];
      v25 = v5[4];
      v26 = v15;
      v27 = v5[6];
      v16 = v5[1];
      v21 = *v5;
      v22 = v16;
      v17 = v5[3];
      v23 = v5[2];
      v24 = v17;
      result = sub_1000026DC((double *)&v21);
      if (result)
      {
        v18 = v7[5];
        v25 = v7[4];
        v26 = v18;
        v27 = v7[6];
        v19 = v7[1];
        v21 = *v7;
        v22 = v19;
        v20 = v7[3];
        v23 = v7[2];
        v24 = v20;
        return sub_1000026DC((double *)&v21);
      }
    }
  }
  return result;
}

double sub_1000039D0(double a1, double a2, double a3)
{
  return a2 / 1000.0 * a3 / (1.0 - a3) + a1;
}

double sub_1000039F4(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0)
    return a2;
  if (a1 < a2)
    a3 = -a3;
  return a2 + (1.0 - 1.0 / (a4 * ((a1 - a2) / a3) + 1.0)) * a3;
}

double sub_100003A30(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0)
    return a2;
  if (a1 < a2)
    a3 = -a3;
  return a2 + (-1.0 / ((a1 - a2) / a3 + -1.0) + -1.0) / a4 * a3;
}

__n128 initializeWithTake for MediaTransferStatus(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpringState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpringState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5E88, (uint64_t)&unk_1000B2750);
}

void type metadata accessor for PCActivityAssetType(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5E90, (uint64_t)&unk_1000B2778);
}

void type metadata accessor for PCInteractionDirection(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5E98, (uint64_t)&unk_1000B2798);
}

void type metadata accessor for CAMediaTimingFunctionName(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5EA0, (uint64_t)&unk_1000B27B8);
}

void type metadata accessor for Style(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5EA8, (uint64_t)&unk_1000B27E0);
}

void type metadata accessor for PCActivityType(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5EB0, (uint64_t)&unk_1000B2800);
}

BOOL sub_100003B40(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100003B54@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100003B64(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100003B70(uint64_t a1, uint64_t a2)
{
  return sub_100003F78(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void sub_100003B94(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100003B9C(uint64_t a1, uint64_t a2)
{
  return sub_100003F78(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100003BA8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100003C1C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100003C98@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *sub_100003CDC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100003CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003E48((unint64_t *)&qword_1000C5F40, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10007FD6C);
  v3 = sub_100003E48(&qword_1000C5F48, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10007FC60);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003D6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003E48(&qword_1000C5ED0, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFunctionName, (uint64_t)&unk_10007F900);
  v3 = sub_100003E48(&qword_1000C5ED8, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFunctionName, (uint64_t)&unk_10007F8A0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003DF0()
{
  return sub_100003E48((unint64_t *)&qword_1000C5EB8, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFunctionName, (uint64_t)&unk_10007F864);
}

uint64_t sub_100003E1C()
{
  return sub_100003E48(&qword_1000C5EC0, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFunctionName, (uint64_t)&unk_10007F838);
}

uint64_t sub_100003E48(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100003E88@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100003ECC@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100003EF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100003E48((unint64_t *)&qword_1000C5F50, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10007FDB0);
  v3 = sub_100003E48(&qword_1000C5F58, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10007FB4C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100003F78(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100003FB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100003FF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100004064(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000040EC()
{
  return sub_100003E48(&qword_1000C5EC8, (uint64_t (*)(uint64_t))type metadata accessor for CAMediaTimingFunctionName, (uint64_t)&unk_10007F8D4);
}

void type metadata accessor for SBUIRemoteAlertServiceButtonEvents(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5EE0, (uint64_t)&unk_1000B2820);
}

void type metadata accessor for _UIBacklightLuminance(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5EE8, (uint64_t)&unk_1000B2848);
}

void type metadata accessor for CULogLevel(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5EF0, (uint64_t)&unk_1000B2868);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5EF8, (uint64_t)&unk_1000B2888);
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5F00, (uint64_t)&unk_1000B28B0);
}

void type metadata accessor for UIModalPresentationStyle(uint64_t a1)
{
  sub_100004190(a1, &qword_1000C5F08, (uint64_t)&unk_1000B28D8);
}

void sub_100004190(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000041D4()
{
  return sub_100003E48(&qword_1000C5F10, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10007FB10);
}

uint64_t sub_100004200()
{
  return sub_100003E48(&qword_1000C5F18, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10007FAE4);
}

uint64_t sub_10000422C()
{
  return sub_100003E48(&qword_1000C5F20, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10007FC24);
}

uint64_t sub_100004258()
{
  return sub_100003E48(&qword_1000C5F28, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10007FBF8);
}

uint64_t sub_100004284()
{
  return sub_100003E48(&qword_1000C5F30, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10007FC94);
}

uint64_t sub_1000042B0()
{
  return sub_100003E48(&qword_1000C5F38, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_10007FB80);
}

uint64_t *sub_1000042EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for URL(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100004388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1000043D0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_100004440(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_1000044BC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_100004518(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100004584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100004590);
}

uint64_t sub_100004590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10000460C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100004618);
}

uint64_t sub_100004618(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AdjustedMovie(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000C60D8, (uint64_t)&nominal type descriptor for AdjustedMovie);
}

uint64_t sub_1000046A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10007FE20;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100004714@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  void (*v18)(char *, char *, uint64_t);
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v26;
  NSString v27;
  uint64_t v28;
  id v29;
  NSString v30;
  uint64_t v31;
  id v32;
  NSString v33;
  uint64_t v34;

  v4 = sub_100004B18(&qword_1000C6110);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v34 - v12;
  v14 = objc_msgSend((id)objc_opt_self(PCAssetManager), "sharedInstance");
  v15 = objc_msgSend(v14, "alternateBundleForAssetType:", a1);

  if (!v15)
  {
    v26 = sub_1000051B0((uint64_t)&type metadata for HomePodMovieManager, &qword_1000C6118);
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "ulog:message:", 40, v27);

    v28 = type metadata accessor for AdjustedMovie(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a2, 1, 1, v28);
  }
  v16 = objc_msgSend(v15, "URLForResource:withExtension:", SFDeviceAssetNameAdjustments, 0);
  if (v16)
  {
    v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v18(v6, v11, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v18(v13, v6, v7);
      v19 = String._bridgeToObjectiveC()();
      v20 = objc_msgSend(v15, "pathForResource:ofType:", v19, 0);

      if (v20)
      {
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

        v24 = type metadata accessor for AdjustedMovie(0);
        v18((char *)a2 + *(int *)(v24 + 20), v13, v7);
        *a2 = v21;
        a2[1] = v23;
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 0, 1, v24);
      }
      v32 = sub_1000051B0((uint64_t)&type metadata for HomePodMovieManager, &qword_1000C6118);
      v33 = String._bridgeToObjectiveC()();
      objc_msgSend(v32, "ulog:message:", 40, v33);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      goto LABEL_9;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_100005024((uint64_t)v6);
  v29 = sub_1000051B0((uint64_t)&type metadata for HomePodMovieManager, &qword_1000C6118);
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "ulog:message:", 40, v30);

LABEL_9:
  v31 = type metadata accessor for AdjustedMovie(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a2, 1, 1, v31);
}

uint64_t sub_100004B18(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

id sub_100004B58()
{
  id v0;
  NSString v1;
  id v2;
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;

  v0 = sub_10004FDD8();
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "ulog:message:", 40, v1);

  v2 = objc_msgSend(objc_allocWithZone((Class)SFMediaPlayerView), "init");
  v3 = objc_msgSend(v2, "layer");
  objc_msgSend(v3, "setShouldRasterize:", 1);

  v4 = objc_msgSend(v2, "layer");
  v5 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v5, "scale");
  v7 = v6;

  objc_msgSend(v4, "setRasterizationScale:", v7 + v7);
  return v2;
}

uint64_t sub_100004C7C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSString v9;
  id v10;
  NSURL *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10004FDD8();
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "ulog:message:", 40, v9);

  URL.init(fileURLWithPath:isDirectory:)(*v2, v2[1], 0);
  objc_msgSend(a1, "setPausesAfterEachItem:", 1);
  v10 = objc_allocWithZone((Class)SFMediaPlayerItem);
  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  v14 = objc_msgSend(v10, "initWithURL:", v12);

  objc_msgSend(a1, "addMovieItem:", v14);
  objc_msgSend(a1, "play");
  v15 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v16 = objc_msgSend(v15, "userInterfaceStyle");

  if (v16 == (id)2)
    v17 = 1;
  else
    v17 = 2;
  v18 = type metadata accessor for AdjustedMovie(0);
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v18 + 20));
  v20 = v19;
  objc_msgSend(a1, "updateViewForAssetType:adjustmentsURL:", v17, v19);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_100004E58(void *a1)
{
  id v2;
  NSString v3;

  v2 = sub_100005064();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "ulog:message:", 40, v3);

  return objc_msgSend(a1, "stop");
}

uint64_t sub_100004ED8(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_100004F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005728(&qword_1000C61C0, (uint64_t)&unk_10007FE80);
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100004F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005728(&qword_1000C61C0, (uint64_t)&unk_10007FE80);
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100004FD8()
{
  return static View._viewListCount(inputs:)();
}

void sub_100004FF0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005728(&qword_1000C61C0, (uint64_t)&unk_10007FE80);
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_100005024(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000C6110);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100005064()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v19;

  v19 = type metadata accessor for MovieView(0);
  v0 = sub_100004B18(&qword_1000C61C8);
  v1 = String.init<A>(describing:)(&v19, v0);
  v3 = v2;
  v4 = sub_10003E348(60, 0xE100000000000000, v1, v2);
  if ((v5 & 1) == 0)
  {
    v6 = String.subscript.getter(15, v4, v1, v3);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    swift_bridgeObjectRelease(v3);
    static String._fromSubstring(_:)(v6, v8, v10, v12);
    v3 = v13;
    swift_bridgeObjectRelease(v12);
  }
  v14 = objc_allocWithZone((Class)CULogHandle);
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v17 = objc_msgSend(v14, "initWithSubsystem:category:", v15, v16);

  return v17;
}

id sub_10000519C()
{
  return sub_1000051B0((uint64_t)&type metadata for HomeAccessoryViewManager, &qword_1000C6120);
}

id sub_1000051B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  NSString v17;
  NSString v18;
  id v19;
  uint64_t v21;

  v21 = a1;
  v2 = sub_100004B18(a2);
  v3 = String.init<A>(describing:)(&v21, v2);
  v5 = v4;
  v6 = sub_10003E348(60, 0xE100000000000000, v3, v4);
  if ((v7 & 1) == 0)
  {
    v8 = String.subscript.getter(15, v6, v3, v5);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease(v5);
    static String._fromSubstring(_:)(v8, v10, v12, v14);
    v5 = v15;
    swift_bridgeObjectRelease(v14);
  }
  v16 = objc_allocWithZone((Class)CULogHandle);
  v17 = String._bridgeToObjectiveC()();
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v19 = objc_msgSend(v16, "initWithSubsystem:category:", v17, v18);

  return v19;
}

ValueMetadata *type metadata accessor for HomePodMovieManager()
{
  return &type metadata for HomePodMovieManager;
}

uint64_t *sub_1000052EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v4 = type metadata accessor for AdjustedMovie(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = *(int *)(v4 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain(v6);
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100005394(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v2 = a1 + *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *sub_1000053E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10000545C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1000054DC(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_100005544(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000055B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000055C0);
}

uint64_t sub_1000055C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AdjustedMovie(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000055FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100005608);
}

uint64_t sub_100005608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AdjustedMovie(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MovieView(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000C6180, (uint64_t)&nominal type descriptor for MovieView);
}

uint64_t sub_10000565C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100005690(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for AdjustedMovie(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000056F8()
{
  return sub_100005728(&qword_1000C61B8, (uint64_t)&unk_10007FF10);
}

void *sub_10000571C()
{
  return &protocol witness table for Never;
}

uint64_t sub_100005728(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MovieView(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SpringParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithCopy for SpringParameters(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SpringParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpringParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpringParameters()
{
  return &type metadata for SpringParameters;
}

BOOL sub_100005800(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

_BYTE *initializeBufferWithCopyOfBuffer for Feature(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Feature(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Feature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100005930 + 4 * byte_10007FFC1[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100005964 + 4 * byte_10007FFBC[v4]))();
}

uint64_t sub_100005964(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000596C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100005974);
  return result;
}

uint64_t sub_100005980(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100005988);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10000598C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100005994(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000059A0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000059A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

unint64_t sub_1000059C4()
{
  unint64_t result;

  result = qword_1000C61D0;
  if (!qword_1000C61D0)
  {
    result = swift_getWitnessTable(&unk_100080028, &type metadata for Feature);
    atomic_store(result, (unint64_t *)&qword_1000C61D0);
  }
  return result;
}

uint64_t sub_100005A08(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100005A34 + 4 * byte_10007FFC6[a1]))("Fix_97690291", 12);
}

const char *sub_100005A34()
{
  return "Handoff_Animation";
}

const char *sub_100005A48()
{
  return "Handoff_v2";
}

BOOL sub_100005AD8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100005AEC()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100005B30()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100005B58(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

const char *sub_100005B98()
{
  return "ProximityControl";
}

uint64_t sub_100005BAC()
{
  unsigned __int8 *v0;

  return sub_100005A08(*v0);
}

uint64_t initializeBufferWithCopyOfBuffer for BlurModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for BlurModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BlurModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for BlurModifier()
{
  return &type metadata for BlurModifier;
}

unint64_t sub_100005C88()
{
  unint64_t result;

  result = qword_1000C61D8;
  if (!qword_1000C61D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1000C61D8);
  }
  return result;
}

double sub_100005CCC@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double sub_100005CD8(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

double (*sub_100005CE4(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_100005D00;
}

double sub_100005D00(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)a1;
  return result;
}

uint64_t sub_100005D14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000958E8, 1);
}

uint64_t sub_100005D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100005E94();
  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100005D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;

  v12 = sub_100005E94();
  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100005E04()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100005E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v5 = *v2;
  v6 = *((_BYTE *)v2 + 8);
  v7 = sub_100004B18(&qword_1000C61E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  result = sub_100004B18(&qword_1000C61E8);
  v9 = a2 + *(int *)(result + 36);
  *(_QWORD *)v9 = v5;
  *(_BYTE *)(v9 + 8) = v6;
  return result;
}

unint64_t sub_100005E94()
{
  unint64_t result;

  result = qword_1000C61F0;
  if (!qword_1000C61F0)
  {
    result = swift_getWitnessTable(&unk_10008009C, &type metadata for BlurModifier);
    atomic_store(result, (unint64_t *)&qword_1000C61F0);
  }
  return result;
}

unint64_t sub_100005EDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C61F8;
  if (!qword_1000C61F8)
  {
    v1 = sub_100005F48(&qword_1000C61E8);
    sub_100005F8C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C61F8);
  }
  return result;
}

uint64_t sub_100005F48(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100005F8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6200;
  if (!qword_1000C6200)
  {
    v1 = sub_100005F48(&qword_1000C61E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ViewModifier_Content<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C6200);
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionDisplayContext()
{
  return &type metadata for NearbySharingInteractionDisplayContext;
}

uint64_t sub_100005FE8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v17 = a4;
  v18 = a5;
  v9 = sub_100004B18(&qword_1000C6270);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_100006914(a1, v14);
  v15 = sub_100006E08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys, v15, v14, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100006110(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100004B18(&qword_1000C6230);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100006914(a1, v8);
  v10 = sub_100006938();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionDisplayContext.CodingKeys, &type metadata for NearbySharingInteractionDisplayContext.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_100004B18(&qword_1000C6218);
  sub_1000069E0(&qword_1000C6238, (void (*)(void))sub_100006A48, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

BOOL sub_10000622C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100006244()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C746974;
  else
    return 25705;
}

uint64_t sub_100006270@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100006554(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100006294()
{
  return 0;
}

void sub_1000062A0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000062AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100006E08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000062D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100006E08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000062FC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100006624(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100006328(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100005FE8(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100006344()
{
  return 1;
}

Swift::Int sub_10000634C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10000638C()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000063B0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000063EC()
{
  return 0x53746E65746E6F63;
}

uint64_t sub_10000640C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x53746E65746E6F63 && a2 == 0xEC00000073627574)
  {
    result = swift_bridgeObjectRelease(0xEC00000073627574);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x53746E65746E6F63, 0xEC00000073627574, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

void sub_1000064B8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000064C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100006938();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000064EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100006938();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100006514@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1000067D0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10000653C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100006110(a1, *v1);
}

uint64_t sub_100006554(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100006624(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = sub_100004B18(&qword_1000C6260);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100006914(a1, v7);
  v9 = sub_100006E08();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10000697C(a1);
  }
  else
  {
    v17 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v12 = v11;
    v16 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v14);
    sub_10000697C(a1);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

_QWORD *sub_1000067D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v3 = sub_100004B18(&qword_1000C6208);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100006914(a1, v7);
  v10 = sub_100006938();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionDisplayContext.CodingKeys, &type metadata for NearbySharingInteractionDisplayContext.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_10000697C(a1);
  }
  else
  {
    v11 = sub_100004B18(&qword_1000C6218);
    sub_1000069E0(&qword_1000C6220, (void (*)(void))sub_10000699C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_10000697C(a1);
  }
  return v9;
}

_QWORD *sub_100006914(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100006938()
{
  unint64_t result;

  result = qword_1000C6210;
  if (!qword_1000C6210)
  {
    result = swift_getWitnessTable(&unk_1000805A0, &type metadata for NearbySharingInteractionDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C6210);
  }
  return result;
}

uint64_t sub_10000697C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_10000699C()
{
  unint64_t result;

  result = qword_1000C6228;
  if (!qword_1000C6228)
  {
    result = swift_getWitnessTable(&unk_100080578, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub);
    atomic_store(result, (unint64_t *)&qword_1000C6228);
  }
  return result;
}

uint64_t sub_1000069E0(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100005F48(&qword_1000C6218);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100006A48()
{
  unint64_t result;

  result = qword_1000C6240;
  if (!qword_1000C6240)
  {
    result = swift_getWitnessTable(&unk_100080550, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub);
    atomic_store(result, (unint64_t *)&qword_1000C6240);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionDisplayContext.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionDisplayContext.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100006B20 + 4 * asc_1000803C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100006B40 + 4 * byte_1000803C5[v4]))();
}

_BYTE *sub_100006B20(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100006B40(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100006B48(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100006B50(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100006B58(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100006B60(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100006B6C()
{
  return 0;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionDisplayContext.CodingKeys()
{
  return &type metadata for NearbySharingInteractionDisplayContext.CodingKeys;
}

uint64_t destroy for NearbySharingInteractionDisplayContext.ShareableContentStub(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for NearbySharingInteractionDisplayContext.ShareableContentStub(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for NearbySharingInteractionDisplayContext.ShareableContentStub(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for NearbySharingInteractionDisplayContext.ShareableContentStub(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionDisplayContext.ShareableContentStub(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionDisplayContext.ShareableContentStub(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionDisplayContext.ShareableContentStub()
{
  return &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub;
}

unint64_t sub_100006D34()
{
  unint64_t result;

  result = qword_1000C6248;
  if (!qword_1000C6248)
  {
    result = swift_getWitnessTable(&unk_100080528, &type metadata for NearbySharingInteractionDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C6248);
  }
  return result;
}

unint64_t sub_100006D7C()
{
  unint64_t result;

  result = qword_1000C6250;
  if (!qword_1000C6250)
  {
    result = swift_getWitnessTable(&unk_100080498, &type metadata for NearbySharingInteractionDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C6250);
  }
  return result;
}

unint64_t sub_100006DC4()
{
  unint64_t result;

  result = qword_1000C6258;
  if (!qword_1000C6258)
  {
    result = swift_getWitnessTable(&unk_1000804C0, &type metadata for NearbySharingInteractionDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C6258);
  }
  return result;
}

unint64_t sub_100006E08()
{
  unint64_t result;

  result = qword_1000C6268;
  if (!qword_1000C6268)
  {
    result = swift_getWitnessTable(&unk_1000806A8, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C6268);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100006F28 + 4 * byte_1000803CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100006F5C + 4 * byte_1000803CA[v4]))();
}

uint64_t sub_100006F5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006F64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100006F6CLL);
  return result;
}

uint64_t sub_100006F78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100006F80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100006F84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100006F8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100006F98(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys()
{
  return &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys;
}

unint64_t sub_100006FB8()
{
  unint64_t result;

  result = qword_1000C6278;
  if (!qword_1000C6278)
  {
    result = swift_getWitnessTable(&unk_100080680, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C6278);
  }
  return result;
}

unint64_t sub_100007000()
{
  unint64_t result;

  result = qword_1000C6280;
  if (!qword_1000C6280)
  {
    result = swift_getWitnessTable(&unk_1000805F0, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C6280);
  }
  return result;
}

unint64_t sub_100007048()
{
  unint64_t result;

  result = qword_1000C6288[0];
  if (!qword_1000C6288[0])
  {
    result = swift_getWitnessTable(&unk_100080618, &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys);
    atomic_store(result, qword_1000C6288);
  }
  return result;
}

uint64_t sub_100007090(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  _QWORD v10[5];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  v3 = v2;
  if (v4 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = &unk_100080718;
    v10[2] = &unk_100080730;
    v10[3] = &unk_100080748;
    v5 = type metadata accessor for Binding(255, v2);
    v6 = type metadata accessor for Optional(319, v5);
    v3 = v6;
    if (v7 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v6 - 8) + 64;
      inited = swift_initClassMetadata2(a1, 0, 5, v10, a1 + 104);
      if (inited)
        return inited;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t sub_100007154()
{
  uint64_t v0;

  String.append(_:)(*(Swift::String *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)));
  return 45;
}

uint64_t sub_10000719C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104), v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112) + 8));

  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  v3 = type metadata accessor for Binding(255, v1);
  v4 = type metadata accessor for Optional(0, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  return v0;
}

uint64_t sub_10000723C()
{
  uint64_t v0;

  sub_10000719C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for UserDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefault);
}

uint64_t sub_10000726C()
{
  return sub_100007154();
}

uint64_t sub_10000728C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1000072B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    v2 = sub_100007314(v0);
    v3 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v2;
    swift_unknownObjectRetain(v2);
    swift_unknownObjectRelease(v3, v4);
    v1 = 0;
  }
  swift_unknownObjectRetain(v1);
  return v2;
}

uint64_t sub_100007314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  double v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[5];
  uint64_t v47;

  v38 = a1;
  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  __chkstk_darwin(v1);
  v41 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  __chkstk_darwin(v3);
  v40 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DispatchTimeInterval(0);
  v37 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v6 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchTime(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v13 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000079C0();
  aBlock[0] = &_swiftEmptyArrayStorage;
  v17 = sub_100003E48(&qword_1000C6438, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v18 = sub_100004B18(&qword_1000C6440);
  v19 = sub_100007A40(&qword_1000C6448, &qword_1000C6440);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v13, v17);
  v20 = v38;
  v21 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v16, *(_QWORD *)(v38 + 48));
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  ObjectType = swift_getObjectType(v21);
  static DispatchTime.now()();
  v23 = *(double *)(v20 + 32);
  + infix(_:_:)(v10, v23);
  v24 = v36;
  v25 = *(void (**)(char *, uint64_t))(v35 + 8);
  v25(v10, v36);
  *v6 = 0;
  v26 = v37;
  v27 = v39;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v37 + 104))(v6, enum case for DispatchTimeInterval.nanoseconds(_:), v39);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v12, v6, ObjectType, v23);
  (*(void (**)(_QWORD *, uint64_t))(v26 + 8))(v6, v27);
  v25(v12, v24);
  v28 = swift_allocObject(&unk_1000B3178, 24, 7);
  swift_weakInit(v28 + 16, v20);
  aBlock[4] = sub_100007A20;
  v47 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030320;
  aBlock[3] = &unk_1000B3190;
  v29 = _Block_copy(aBlock);
  v30 = swift_retain(v28);
  v31 = v40;
  static DispatchQoS.unspecified.getter(v30);
  v32 = v41;
  sub_100007738();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v31, v32, v29, ObjectType);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v43);
  v33 = v47;
  swift_release(v28);
  swift_release(v33);
  return v21;
}

uint64_t sub_1000076BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(void (**)(uint64_t))(result + 16);
    v5 = *(_QWORD *)(result + 24);
    sub_100007A80((uint64_t)v4, v5);
    result = swift_release(v3);
    if (v4)
    {
      v4(result);
      return sub_100007A90((uint64_t)v4, v5);
    }
  }
  return result;
}

uint64_t sub_100007738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = &_swiftEmptyArrayStorage;
  v1 = sub_100003E48((unint64_t *)&qword_1000C6450, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_100004B18(&qword_1000C6458);
  v3 = sub_100007A40((unint64_t *)&qword_1000C6460, &qword_1000C6458);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_1000077E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0;
  v2 = sub_1000072B8();
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease(v2, v3);
  if ((*(_BYTE *)(v1 + 40) & 1) == 0)
  {
    *(_BYTE *)(v1 + 40) = 1;
    v4 = sub_1000072B8();
    swift_getObjectType(v4);
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease(v4, v5);
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  sub_100007A90(v6, v7);
  sub_100007A90(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 56), v8);
  return v1;
}

uint64_t sub_10000786C()
{
  uint64_t v0;

  sub_1000077E4();
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for RepeatingTimer()
{
  return objc_opt_self(_TtC13PCViewService14RepeatingTimer);
}

uint64_t storeEnumTagSinglePayload for RepeatingTimer.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000078F8 + 4 * byte_1000807BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000792C + 4 * byte_1000807B8[v4]))();
}

uint64_t sub_10000792C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100007934(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000793CLL);
  return result;
}

uint64_t sub_100007948(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100007950);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100007954(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000795C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepeatingTimer.State()
{
  return &type metadata for RepeatingTimer.State;
}

unint64_t sub_10000797C()
{
  unint64_t result;

  result = qword_1000C6428;
  if (!qword_1000C6428)
  {
    result = swift_getWitnessTable(&unk_100080860, &type metadata for RepeatingTimer.State);
    atomic_store(result, (unint64_t *)&qword_1000C6428);
  }
  return result;
}

unint64_t sub_1000079C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6430;
  if (!qword_1000C6430)
  {
    v1 = objc_opt_self(OS_dispatch_source);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C6430);
  }
  return result;
}

uint64_t sub_1000079FC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100007A20()
{
  uint64_t v0;

  return sub_1000076BC(v0);
}

uint64_t sub_100007A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100007A38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100007A40(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005F48(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007A80(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100007A90(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100007AA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for UserAccountPrefs()
{
  return objc_opt_self(_TtC13PCViewService16UserAccountPrefs);
}

uint64_t sub_100007AEC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for UserAccountPrefBool()
{
  return objc_opt_self(_TtC13PCViewService19UserAccountPrefBool);
}

uint64_t sub_100007B38()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v1 = objc_msgSend(v0, "_remoteViewControllerProxy");
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v2, v3);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10000A9A0((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v4 = sub_100004B18(&qword_1000C6680);
    if (swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, v4, 6))
      return v6;
    else
      return 0;
  }
  else
  {
    sub_10000A9E8((uint64_t)v8);
    return 0;
  }
}

id sub_100007BF0()
{
  void *v0;
  id v1;
  NSString v2;
  objc_super v4;

  v1 = sub_1000534E0();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MainViewController();
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_100007D40(id a1, void (*a2)(void *))
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  NSString v13;
  id v14;
  void *v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  Swift::String v27;
  void *object;
  unint64_t v29;
  id v30;
  NSString v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;

  v36 = 0xD000000000000025;
  v37 = 0x800000010008F6A0;
  if (a1 && (v4 = objc_msgSend(a1, "userInfo")) != 0)
  {
    v5 = v4;
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    *(_QWORD *)&v38 = v6;
    v7 = sub_100004B18(qword_1000C66B8);
    v8 = String.init<A>(describing:)(&v38, v7);
    v10 = v9;
  }
  else
  {
    v10 = 0xE300000000000000;
    v8 = 7104878;
  }
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v10);
  v12 = sub_1000534E0();
  swift_bridgeObjectRetain(v37);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  objc_msgSend(v12, "ulog:message:", 40, v13);
  swift_bridgeObjectRelease(v37);

  if (!a1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v14 = objc_msgSend(a1, "userInfo");
  if (!v14)
  {
    v21 = sub_1000534E0();
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v21, "ulog:message:", 90, v16);

    v22 = (void *)sub_100007B38();
    if (v22)
    {
      v23 = v22;
      objc_msgSend(v22, "invalidate");
      v22 = (void *)swift_unknownObjectRelease(v23, v24);
    }
    if (a2)
      goto LABEL_31;
    __break(1u);
    goto LABEL_18;
  }
  v15 = v14;
  v16 = (_QWORD *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v34 = 0xD00000000000001DLL;
  v35 = 0x800000010008F6F0;
  AnyHashable.init<A>(_:)(&v36, &v34, &type metadata for String, &protocol witness table for String);
  if (v16[2] && (v17 = sub_100044048((uint64_t)&v36), (v18 & 1) != 0))
  {
    sub_10000ABEC(v16[7] + 32 * v17, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  sub_10000AB74((uint64_t)&v36);
  if (!*((_QWORD *)&v39 + 1))
  {
LABEL_18:
    sub_10000A9E8((uint64_t)&v38);
    goto LABEL_19;
  }
  if ((swift_dynamicCast(&v34, &v38, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
  {
    swift_bridgeObjectRelease(v16);
    v19 = v34;
    v20 = v35;
    sub_100008B94(v34, v35);
LABEL_26:
    v22 = (void *)sub_10000ABA8(v19, v20);
    goto LABEL_30;
  }
LABEL_19:
  v34 = 0xD00000000000002ALL;
  v35 = 0x800000010008F710;
  AnyHashable.init<A>(_:)(&v36, &v34, &type metadata for String, &protocol witness table for String);
  if (v16[2] && (v25 = sub_100044048((uint64_t)&v36), (v26 & 1) != 0))
  {
    sub_10000ABEC(v16[7] + 32 * v25, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  sub_10000AB74((uint64_t)&v36);
  if (*((_QWORD *)&v39 + 1))
  {
    if ((swift_dynamicCast(&v34, &v38, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      swift_bridgeObjectRelease(v16);
      v19 = v34;
      v20 = v35;
      sub_100009014(v34, v35);
      goto LABEL_26;
    }
  }
  else
  {
    sub_10000A9E8((uint64_t)&v38);
  }
  v36 = 0;
  v37 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v37);
  v36 = 0xD00000000000001FLL;
  v37 = 0x800000010008F740;
  v27._countAndFlagsBits = Dictionary.description.getter(v16, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  object = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(object);
  v29 = v37;
  v30 = sub_1000534E0();
  swift_bridgeObjectRetain(v29);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  objc_msgSend(v30, "ulog:message:", 60, v31);
  swift_bridgeObjectRelease(v29);

  v22 = (void *)sub_100007B38();
  if (v22)
  {
    v32 = v22;
    objc_msgSend(v22, "invalidate");
    v22 = (void *)swift_unknownObjectRelease(v32, v33);
  }
LABEL_30:
  if (a2)
  {
LABEL_31:
    a2(v22);
    return;
  }
LABEL_33:
  __break(1u);
}

void sub_100008274()
{
  uint64_t v0;
  id v1;
  NSString v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(_QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;

  v1 = sub_1000534E0();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v3 = (uint64_t *)(v0 + OBJC_IVAR___MainViewController_environment);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR___MainViewController_environment);
  if (v4)
  {
    v5 = v3[1];
    ObjectType = swift_getObjectType(v4);
    v7 = *(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 16);
    swift_unknownObjectRetain(v4);
    v7(0, ObjectType, v5);
    (*(void (**)(uint64_t, uint64_t))(v5 + 32))(ObjectType, v5);
    v8 = *v3;
    *v3 = 0;
    v3[1] = 0;
    swift_unknownObjectRelease(v4, v9);
    swift_unknownObjectRelease(v8, v10);
  }
  else
  {
    v11 = sub_1000534E0();
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "ulog:message:", 40, v12);

  }
}

uint64_t sub_1000083E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  void *object;
  unint64_t v15;
  id v16;
  NSString v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void **aBlock;
  unint64_t v33;
  uint64_t (*v34)();
  void *v35;
  void (*v36)();
  uint64_t v37;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(v33);
  aBlock = (void **)0xD00000000000001ALL;
  v33 = 0x800000010008F600;
  v11 = sub_10000AA28(0, &qword_1000C6698, SBUIRemoteAlertButtonAction_ptr);
  v12 = sub_10000AA60();
  v13._countAndFlagsBits = Set.description.getter(a1, v11, v12);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15 = v33;
  v16 = sub_1000534E0();
  swift_bridgeObjectRetain(v15);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  objc_msgSend(v16, "ulog:message:", 40, v17);
  swift_bridgeObjectRelease(v15);

  v18 = sub_10000873C(a1);
  LOBYTE(a1) = sub_100008994(16, v18);
  result = swift_bridgeObjectRelease(v18);
  if ((a1 & 1) != 0)
  {
    if (qword_1000C5DA8 != -1)
      swift_once(&qword_1000C5DA8, sub_100074070);
    v20 = swift_allocObject(&unk_1000B3278, 24, 7);
    swift_unknownObjectWeakInit(v20 + 16, v2);
    v21 = swift_allocObject(&unk_1000B32F0, 32, 7);
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(v21 + 24) = ObjectType;
    v36 = sub_10000AADC;
    v37 = v21;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_100030320;
    v35 = &unk_1000B3308;
    v22 = _Block_copy(&aBlock);
    v23 = swift_retain(v20);
    static DispatchQoS.unspecified.getter(v23);
    v31 = _swiftEmptyArrayStorage;
    v24 = sub_100003E48((unint64_t *)&qword_1000C6450, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_100004B18(&qword_1000C6458);
    v26 = sub_10000AAFC((unint64_t *)&qword_1000C6460, &qword_1000C6458, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v25, v26, v5, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v29);
    v27 = v37;
    swift_release(v20);
    return swift_release(v27);
  }
  return result;
}

uint64_t sub_10000873C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  int64_t v15;
  char v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  void (*v26)(_BYTE *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE v30[32];
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  v1 = a1;
  v29 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = __CocoaSet.count.getter(a1);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 16);
  }
  result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    v34 = _swiftEmptyArrayStorage;
    sub_10004EDE8(0, v2 & ~(v2 >> 63), 0);
    if (v29)
    {
      if (v1 < 0)
        v4 = v1;
      else
        v4 = v1 & 0xFFFFFFFFFFFFFF8;
      result = __CocoaSet.startIndex.getter(v4);
      v6 = 1;
    }
    else
    {
      result = sub_10000A62C(v1);
      v6 = v7 & 1;
    }
    v31 = result;
    v32 = v5;
    v33 = v6;
    if (v2 < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
    }
    else
    {
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
      if (v1 < 0)
        v8 = v1;
      v28 = v8;
      do
      {
        while (1)
        {
          v15 = v31;
          v14 = v32;
          v16 = v33;
          sub_10000A3C4(v31, v32, v33, v1);
          v18 = v17;
          v19 = objc_msgSend(v17, "events");

          v20 = v34;
          result = swift_isUniquelyReferenced_nonNull_native(v34);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_10004EDE8(0, v20[2] + 1, 1);
            v20 = v34;
          }
          v22 = v20[2];
          v21 = v20[3];
          if (v22 >= v21 >> 1)
          {
            result = (uint64_t)sub_10004EDE8((char *)(v21 > 1), v22 + 1, 1);
            v20 = v34;
          }
          v20[2] = v22 + 1;
          v20[v22 + 4] = v19;
          if (v29)
            break;
          v9 = sub_10000A2E0(v15, v14, v16, v1);
          v11 = v10;
          v13 = v12;
          sub_10000AB3C(v15, v14, v16);
          v31 = v9;
          v32 = v11;
          v33 = v13 & 1;
          if (!--v2)
            goto LABEL_28;
        }
        if ((v16 & 1) == 0)
          goto LABEL_31;
        v23 = __CocoaSet.Index.handleBitPattern.getter(v15, v14);
        if (v23)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v25 = sub_100004B18(&qword_1000C66B0);
        v26 = (void (*)(_BYTE *, _QWORD))Set.Index._asCocoa.modify(v30, v25);
        __CocoaSet.formIndex(after:isUnique:)(v27, isUniquelyReferenced_nonNull_native, v28);
        v26(v30, 0);
        --v2;
      }
      while (v2);
LABEL_28:
      sub_10000AB3C(v31, v32, v33);
      return (uint64_t)v34;
    }
  }
  return result;
}

uint64_t sub_100008994(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

void sub_1000089F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    if (*(_QWORD *)(Strong + OBJC_IVAR___MainViewController_environment))
    {
      v6 = *(_QWORD *)(Strong + OBJC_IVAR___MainViewController_homeGestureEventSubject);
      swift_retain(v6);
      v7 = sub_100004B18(&qword_1000C6688);
      v8 = sub_10000AAFC(&qword_1000C66A8, &qword_1000C6688, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v7, v8);

      swift_release(v6);
    }
    else
    {
      sub_10003DE94(60, 0xD000000000000023, (void *)0x800000010008F620, 0, a2, (uint64_t)&off_1000B3238);
      v9 = (void *)sub_100007B38();
      if (v9)
      {
        v10 = v9;
        objc_msgSend(v9, "invalidate");

        swift_unknownObjectRelease(v10, v11);
      }
      else
      {

      }
    }
  }
}

void sub_100008B94(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  void *object;
  unint64_t v14;
  id v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Swift::String v23;
  unint64_t v24;
  id v25;
  NSString v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id ObjectType;
  unint64_t v38;
  unint64_t v39;

  v3 = v2;
  ObjectType = (id)swift_getObjectType(v2);
  v6 = type metadata accessor for ClassicCardViewServiceContext(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v36 - v10;
  v38 = 0;
  v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(v39);
  v38 = 0xD000000000000028;
  v39 = 0x800000010008F490;
  v12._countAndFlagsBits = Data.description.getter(a1, a2);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14 = v39;
  v15 = sub_1000534E0();
  swift_bridgeObjectRetain(v14);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v15, "ulog:message:", 40, v16);
  swift_bridgeObjectRelease(v14);

  v17 = sub_100007B38();
  if (v17)
  {
    v18 = v17;
    v19 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    v20 = JSONDecoder.init()();
    v21 = sub_100003E48(&qword_1000C6670, type metadata accessor for ClassicCardViewServiceContext, (uint64_t)&unk_1000885C0);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v6, a1, a2, v6, v21);
    swift_release(v20);
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v23._countAndFlagsBits = 0x6F6320646E756F46;
    v23._object = (void *)0xEF203A747865746ELL;
    String.append(_:)(v23);
    _print_unlocked<A, B>(_:_:)(v11, &v38, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = v39;
    v25 = sub_1000534E0();
    swift_bridgeObjectRetain(v24);
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    objc_msgSend(v25, "ulog:message:", 40, v26);
    swift_bridgeObjectRelease(v24);

    sub_10000A8D4((uint64_t)v11, (uint64_t)v9);
    v27 = swift_allocObject(&unk_1000B3278, 24, 7);
    swift_unknownObjectWeakInit(v27 + 16, v3);
    v28 = (_QWORD *)swift_allocObject(&unk_1000B32C8, 40, 7);
    v28[2] = v27;
    v28[3] = v18;
    v28[4] = ObjectType;
    v29 = type metadata accessor for ClassicCardAlertEnvironment(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    swift_unknownObjectRetain_n(v18, 2);
    v30 = v3;
    v31 = sub_100051FEC((uint64_t)v9, v18, v30, (uint64_t)sub_10000A948, (uint64_t)v28);
    v32 = (uint64_t *)&v30[OBJC_IVAR___MainViewController_environment];
    v33 = *(_QWORD *)&v30[OBJC_IVAR___MainViewController_environment];
    *v32 = v31;
    v32[1] = (uint64_t)&off_1000B7098;
    swift_unknownObjectRelease(v18, v34);
    swift_unknownObjectRelease(v33, v35);
    sub_10000A964((uint64_t)v11);
  }
  else
  {
    v22 = sub_1000534E0();
    ObjectType = String._bridgeToObjectiveC()();
    objc_msgSend(v22, "ulog:message:", 60, ObjectType);

  }
}

void sub_100009014(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  Swift::String v7;
  void *object;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  NSString v17;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  id v21;
  NSString v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  ValueMetadata *v35;
  unint64_t v36;

  v3 = v2;
  ObjectType = swift_getObjectType(v2);
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease(0xE000000000000000);
  v33 = 0xD000000000000009;
  v34 = 0x800000010008F3C0;
  v7._countAndFlagsBits = Data.description.getter(a1, a2);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9 = sub_1000534E0();
  swift_bridgeObjectRetain(0x800000010008F3C0);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x800000010008F3C0);
  objc_msgSend(v9, "ulog:message:", 40, v10);
  swift_bridgeObjectRelease(0x800000010008F3C0);

  v35 = &type metadata for Feature;
  v36 = sub_10000A824();
  LOBYTE(v10) = isFeatureEnabled(_:)(&v33);
  sub_10000697C(&v33);
  if ((v10 & 1) != 0)
  {
    v11 = sub_100007B38();
    if (v11)
    {
      v12 = v11;
      v13 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
      v14 = JSONDecoder.init()();
      v15 = sub_10000A868();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for NearbySharingInteractionViewServiceContext, a1, a2, &type metadata for NearbySharingInteractionViewServiceContext, v15);
      swift_release(v14);
      v18 = v33;
      v33 = 0;
      v34 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v19._countAndFlagsBits = 0x6F6320646E756F46;
      v19._object = (void *)0xEF203A747865746ELL;
      String.append(_:)(v19);
      v32 = v18;
      _print_unlocked<A, B>(_:_:)(&v32, &v33, &type metadata for NearbySharingInteractionViewServiceContext, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v20 = v34;
      v21 = sub_1000534E0();
      swift_bridgeObjectRetain(v20);
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      objc_msgSend(v21, "ulog:message:", 40, v22);
      swift_bridgeObjectRelease(v20);

      v23 = swift_allocObject(&unk_1000B3278, 24, 7);
      swift_unknownObjectWeakInit(v23 + 16, v3);
      v24 = (_QWORD *)swift_allocObject(&unk_1000B32A0, 40, 7);
      v24[2] = v23;
      v24[3] = v12;
      v24[4] = ObjectType;
      v25 = type metadata accessor for NearbySharingInteractionAlertEnvironment(0);
      swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
      swift_unknownObjectRetain_n(v12, 2);
      v26 = v3;
      v27 = sub_10007A568(v18, v12, v26, (uint64_t)sub_10000AC28, (uint64_t)v24);
      v28 = (uint64_t **)&v26[OBJC_IVAR___MainViewController_environment];
      v29 = *(_QWORD *)&v26[OBJC_IVAR___MainViewController_environment];
      *v28 = v27;
      v28[1] = (uint64_t *)&off_1000B9BD0;
      swift_unknownObjectRelease(v12, v30);
      swift_unknownObjectRelease(v29, v31);
      return;
    }
    v16 = sub_1000534E0();
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "ulog:message:", 60, v17);
  }
  else
  {
    v16 = sub_1000534E0();
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "ulog:message:", 40, v17);
  }

}

id sub_100009480(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17[24];

  v4 = a1 + 16;
  sub_10003DC3C(0xD000000000000014, (void *)0x800000010008F470, 0, a3, (uint64_t)&off_1000B3238);
  swift_beginAccess(v4, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    v7 = *(_QWORD *)(Strong + OBJC_IVAR___MainViewController_environment);
    v8 = *(_QWORD *)(Strong + OBJC_IVAR___MainViewController_environment + 8);
    swift_unknownObjectRetain(v7);

    if (v7)
    {
      ObjectType = swift_getObjectType(v7);
      (*(void (**)(uint64_t, uint64_t))(v8 + 32))(ObjectType, v8);
      swift_unknownObjectRelease(v7, v10);
    }
  }
  swift_beginAccess(v4, &v16, 0, 0);
  v11 = (char *)swift_unknownObjectWeakLoadStrong(v4);
  if (v11)
  {
    v12 = &v11[OBJC_IVAR___MainViewController_environment];
    v13 = *(_QWORD *)&v11[OBJC_IVAR___MainViewController_environment];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;

    swift_unknownObjectRelease(v13, v14);
  }
  return objc_msgSend(a2, "invalidate");
}

void sub_100009594(uint64_t a1)
{
  void *v1;
  void *v2;
  Swift::String v4;
  Swift::String v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  objc_super v18;

  v2 = v1;
  v18.receiver = v2;
  v18.super_class = (Class)type metadata accessor for MainViewController();
  objc_msgSendSuper2(&v18, "traitCollectionDidChange:", a1);
  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  v4._object = (void *)0x800000010008F5C0;
  String.append(_:)(v4);
  v5._object = (void *)0x800000010008F5E0;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  v6 = objc_msgSend(v2, "traitCollection");
  v7 = objc_msgSend(v6, "_backlightLuminance");

  v15 = v7;
  type metadata accessor for _UIBacklightLuminance(0);
  _print_unlocked<A, B>(_:_:)(&v15, &v16, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v17;
  v10 = sub_1000534E0();
  swift_bridgeObjectRetain(v9);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v10, "ulog:message:", 40, v11);
  swift_bridgeObjectRelease(v9);

  v12 = objc_msgSend(v2, "traitCollection");
  v13 = objc_msgSend(v12, "_backlightLuminance");

  if (v13 == (id)1)
    PassthroughSubject.send(_:)(v14);
}

id sub_100009790(char a1)
{
  void *v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  NSString v9;
  objc_super v11;
  unint64_t v12;
  unint64_t v13;

  v2 = v1;
  v12 = 0xD00000000000001CLL;
  v13 = 0x800000010008F5A0;
  v4 = a1 & 1;
  v3 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (v3)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v8 = sub_1000534E0();
  swift_bridgeObjectRetain(v13);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v8, "ulog:message:", 40, v9);
  swift_bridgeObjectRelease(v13);

  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for MainViewController();
  return objc_msgSendSuper2(&v11, "viewDidAppear:", v4);
}

void sub_1000098CC()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;
  void *v4;
  id v5;
  objc_super v6;

  v1 = sub_1000534E0();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for MainViewController();
  objc_msgSendSuper2(&v6, "viewDidLoad");
  v3 = objc_msgSend(v0, "view");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v4, "setBackgroundColor:", v5);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000099F4(void *a1, char a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  NSString v19;
  objc_class *v20;
  id v21;
  id v22;
  id v23;
  NSString v24;
  void *v25;
  objc_super v26;
  unint64_t v27;
  unint64_t v28;

  v3 = v2;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27 = 0xD000000000000031;
  v28 = 0x800000010008F500;
  if (a1)
  {
    v25 = a1;
    v6 = sub_10000AA28(0, &qword_1000C6690, UIWindow_ptr);
    v7 = a1;
    v8 = String.init<A>(describing:)(&v25, v6);
    v10 = v9;
  }
  else
  {
    v10 = 0xE300000000000000;
    v8 = 7104878;
  }
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v10);
  v12._object = (void *)0x800000010008F540;
  v12._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v12);
  v13 = a2 & 1;
  if ((_DWORD)v13)
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if ((_DWORD)v13)
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease(v15);
  v17 = v28;
  v18 = sub_1000534E0();
  swift_bridgeObjectRetain(v17);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v18, "ulog:message:", 40, v19);
  swift_bridgeObjectRelease(v17);

  v20 = (objc_class *)type metadata accessor for MainViewController();
  v26.receiver = v3;
  v26.super_class = v20;
  objc_msgSendSuper2(&v26, "viewDidMoveToWindow:shouldAppearOrDisappear:", a1, v13);
  if (a1)
  {
    v21 = a1;
    v22 = objc_msgSend(v21, "_rootSheetPresentationController");
    if (v22)
    {
      v23 = v22;
      objc_msgSend(v22, "_setShouldScaleDownBehindDescendantSheets:", 0);
    }
    else
    {
      v23 = sub_1000534E0();
      v24 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "ulog:message:", 60, v24);

      v21 = v24;
    }

  }
}

void sub_100009C84(void *a1, char a2)
{
  void *v2;
  void *v3;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  NSString v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  NSString v42;

  v3 = v2;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v6 = objc_msgSend(a1, "description");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x3D746E6F7266202CLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  if ((a2 & 1) != 0)
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15 = sub_1000534E0();
  swift_bridgeObjectRetain(0x800000010008F360);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x800000010008F360);
  objc_msgSend(v15, "ulog:message:", 40, v16);
  swift_bridgeObjectRelease(0x800000010008F360);

  v17 = objc_msgSend(a1, "parentViewController");
  if (v17)
  {
    v18 = v17;
    sub_10000AA28(0, &qword_1000C6650, UIViewController_ptr);
    v19 = v3;
    v20 = v18;
    LOBYTE(v18) = static NSObject.== infix(_:_:)(v20, v19);

    if ((v18 & 1) != 0)
    {
      v21 = sub_1000534E0();
      v42 = String._bridgeToObjectiveC()();
      objc_msgSend(v21, "ulog:message:", 60, v42);

      return;
    }
  }
  objc_msgSend(a1, "willMoveToParentViewController:", v3);
  objc_msgSend(v3, "addChildViewController:", a1);
  v22 = objc_msgSend(v3, "view");
  if (!v22)
  {
    __break(1u);
    goto LABEL_20;
  }
  v23 = v22;
  v24 = objc_msgSend(a1, "view");
  if (!v24)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v25 = v24;
  objc_msgSend(v23, "addSubview:", v24);

  if ((a2 & 1) != 0)
    goto LABEL_16;
  v26 = objc_msgSend(v3, "view");
  if (!v26)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v27 = v26;
  v28 = objc_msgSend(a1, "view");
  if (v28)
  {
    v29 = v28;
    objc_msgSend(v27, "sendSubviewToBack:", v28);

LABEL_16:
    v30 = objc_msgSend(a1, "view");
    if (v30)
    {
      v31 = v30;
      v32 = objc_msgSend(v3, "view");
      if (v32)
      {
        v33 = v32;
        objc_msgSend(v32, "frame");
        v35 = v34;
        v37 = v36;
        v39 = v38;
        v41 = v40;

        objc_msgSend(v31, "setFrame:", v35, v37, v39, v41);
        objc_msgSend(a1, "didMoveToParentViewController:", v3);
        return;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
}

id sub_10000A064(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSString v11;
  id v12;
  objc_super v14;

  v6 = &v3[OBJC_IVAR___MainViewController_environment];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v7 = OBJC_IVAR___MainViewController_backlightLuminanceBecameReducedSubject;
  v8 = sub_100004B18(&qword_1000C6688);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = v3;
  *(_QWORD *)&v3[v7] = PassthroughSubject.init()();
  v10 = OBJC_IVAR___MainViewController_homeGestureEventSubject;
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)&v9[v10] = PassthroughSubject.init()();

  if (a2)
  {
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v11 = 0;
  }
  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for MainViewController();
  v12 = objc_msgSendSuper2(&v14, "initWithNibName:bundle:", v11, a3);

  return v12;
}

id sub_10000A1CC(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v3 = &v1[OBJC_IVAR___MainViewController_environment];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = OBJC_IVAR___MainViewController_backlightLuminanceBecameReducedSubject;
  v5 = sub_100004B18(&qword_1000C6688);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = v1;
  *(_QWORD *)&v1[v4] = PassthroughSubject.init()();
  v7 = OBJC_IVAR___MainViewController_homeGestureEventSubject;
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)&v6[v7] = PassthroughSubject.init()();

  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for MainViewController();
  v8 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);

  return v8;
}

uint64_t type metadata accessor for MainViewController()
{
  return objc_opt_self(MainViewController);
}

int64_t sub_10000A2E0(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_10000A3C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  id v22;
  uint64_t v23;
  void *v24;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v12 = __CocoaSet.Index.element.getter(v7, a2);
        v23 = v12;
        v13 = sub_10000AA28(0, &qword_1000C6698, SBUIRemoteAlertButtonAction_ptr);
        swift_unknownObjectRetain(v12);
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
        v4 = v24;
        swift_unknownObjectRelease(v12, v14);
        v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v16 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v15 & ~v16;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v17 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v18 = static NSObject.== infix(_:_:)(v17, v4);

          if ((v18 & 1) == 0)
          {
            v19 = ~v16;
            do
            {
              v7 = (v7 + 1) & v19;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v21 = static NSObject.== infix(_:_:)(v20, v4);

            }
            while ((v21 & 1) == 0);
          }

LABEL_20:
          v22 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v23 = v9;
  v10 = sub_10000AA28(0, &qword_1000C6698, SBUIRemoteAlertButtonAction_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9, v11);
}

uint64_t sub_10000A62C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10000A6B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  id v5;
  NSString v6;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v0 = *(_QWORD *)(qword_1000DF570 + 984);
  swift_retain(v0);
  v1 = sub_10001FFCC();
  v3 = v2;
  swift_release(v0);
  if (v3)
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(0xE000000000000000);
    v4._countAndFlagsBits = v1;
    v4._object = v3;
    String.append(_:)(v4);
    v5 = sub_1000534E0();
    swift_bridgeObjectRetain(0x800000010008F340);
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0x800000010008F340);
    objc_msgSend(v5, "ulog:message:", 40, v6, 0xD000000000000019);
    swift_bridgeObjectRelease(0x800000010008F340);

  }
  else
  {
    v6 = sub_10000A7FC();
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  }

  return v1;
}

id sub_10000A7FC()
{
  return (id)GestaltCopyAnswer(CFSTR("ProductType"), 0, 0);
}

unint64_t sub_10000A824()
{
  unint64_t result;

  result = qword_1000C6658;
  if (!qword_1000C6658)
  {
    result = swift_getWitnessTable(&unk_100080050, &type metadata for Feature);
    atomic_store(result, (unint64_t *)&qword_1000C6658);
  }
  return result;
}

unint64_t sub_10000A868()
{
  unint64_t result;

  result = qword_1000C6660;
  if (!qword_1000C6660)
  {
    result = swift_getWitnessTable(&unk_1000822D4, &type metadata for NearbySharingInteractionViewServiceContext);
    atomic_store(result, (unint64_t *)&qword_1000C6660);
  }
  return result;
}

uint64_t sub_10000A8AC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000A8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClassicCardViewServiceContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A91C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24), v1);
  return swift_deallocObject(v0, 40, 7);
}

id sub_10000A948()
{
  uint64_t v0;

  return sub_100009480(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10000A964(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClassicCardViewServiceContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000A9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C6678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A9E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000C6678);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000AA28(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10000AA60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C66A0;
  if (!qword_1000C66A0)
  {
    v1 = sub_10000AA28(255, &qword_1000C6698, SBUIRemoteAlertButtonAction_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000C66A0);
  }
  return result;
}

uint64_t sub_10000AAB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10000AADC()
{
  uint64_t v0;

  sub_1000089F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10000AAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000AAF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000AAFC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F48(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000AB3C(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10000AB48()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000AB6C()
{
  uint64_t v0;

  return sub_10006341C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000AB74(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_10000ABA8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000ABEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_10000AC2C(uint64_t a1)
{
  id result;
  __objc2_prot *v2;

  v2 = &OBJC_PROTOCOL___NSSecureCoding;
  result = (id)swift_dynamicCastTypeToObjCProtocolConditional(a1, 1, &v2);
  if (result)
    return objc_msgSend((id)swift_getObjCClassFromMetadata(), "supportsSecureCoding");
  return result;
}

uint64_t sub_10000AC70(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v5 = a1[3];
  v6 = a1[4];
  sub_100006914(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v19, v5, v6);
  if (!v2)
  {
    v7 = v20;
    v8 = v21;
    sub_100006914(v19, v20);
    v9 = sub_10000B454();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(v18, &type metadata for Data, &type metadata for Data, v9, v7, v8);
    v11 = v18[0];
    v10 = v18[1];
    v12 = objc_allocWithZone((Class)NSKeyedUnarchiver);
    sub_10000B554(v11, v10);
    v13 = sub_10000B498();
    sub_10000ABA8(v11, v10);
    objc_msgSend(v13, "setRequiresSecureCoding:", (unint64_t)sub_10000AC2C(a2) & 1);
    v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(a2)), "initWithCoder:", v13);
    if (v15)
    {
      a2 = (uint64_t)v15;

      sub_10000ABA8(v11, v10);
      sub_10000697C(v19);
      sub_10000697C(a1);
      return a2;
    }
    v16 = sub_10000B598();
    swift_allocError(&type metadata for DaemonError, v16, 0, 0);
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0xE000000000000000;
    *(_BYTE *)(v17 + 16) = 7;
    swift_willThrow();

    sub_10000ABA8(v11, v10);
    sub_10000697C(v19);
  }
  sub_10000697C(a1);
  return a2;
}

uint64_t sub_10000AE2C(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v5 = a1[3];
  v6 = a1[4];
  sub_100006914(a1, v5);
  dispatch thunk of Encoder.singleValueContainer()(v17, v5, v6);
  v7 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", (unint64_t)sub_10000AC2C(a3) & 1);
  objc_msgSend(a2, "encodeWithCoder:", v7);
  objc_msgSend(v7, "finishEncoding");
  v8 = objc_msgSend(v7, "encodedData");
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  v16[0] = v9;
  v16[1] = v11;
  v12 = v18;
  v13 = v19;
  sub_10000B5DC((uint64_t)v17, v18);
  v14 = sub_10000B604();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)(v16, &type metadata for Data, v14, v12, v13);

  sub_10000ABA8(v9, v11);
  return sub_10000697C(v17);
}

uint64_t sub_10000AF68(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  v4 = a1;
  return dispatch thunk of static Equatable.== infix(_:_:)(&v4, &v3) & 1;
}

uint64_t sub_10000AFA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_10000AC70(a1, *(_QWORD *)(a2 + 16));
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_10000AFCC(_QWORD *a1, uint64_t a2)
{
  void **v2;

  return sub_10000AE2C(a1, *v2, *(_QWORD *)(a2 + 16));
}

uint64_t sub_10000AFEC(uint64_t *a1, uint64_t *a2)
{
  return sub_10000AF68(*a1, *a2);
}

uint64_t sub_10000B000(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v5 = a1[3];
  v6 = a1[4];
  v7 = (uint64_t)sub_100006914(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v12, v5, v6);
  if (v2)
  {
    sub_10000697C(a1);
  }
  else
  {
    v8 = v13;
    v9 = v14;
    sub_100006914(v12, v13);
    if ((dispatch thunk of SingleValueDecodingContainer.decodeNil()(v8, v9) & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      sub_10000B410((uint64_t)a1, (uint64_t)v11);
      v7 = sub_10000AC70(v11, a2);
    }
    sub_10000697C(v12);
    sub_10000697C(a1);
  }
  return v7;
}

uint64_t sub_10000B0EC(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    swift_unknownObjectRetain(a2);
    sub_10000AE2C(a1, a2, a3);
    return swift_unknownObjectRelease(a2, v6);
  }
  else
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_100006914(a1, v8);
    dispatch thunk of Encoder.singleValueContainer()(v12, v8, v9);
    v10 = v13;
    v11 = v14;
    sub_10000B5DC((uint64_t)v12, v13);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()(v10, v11);
    return sub_10000697C(v12);
  }
}

uint64_t sub_10000B1AC(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    if (a2)
    {
      swift_unknownObjectRetain(a2);
      swift_unknownObjectRetain(a1);
      v8 = a2;
      v9 = a1;
      v4 = dispatch thunk of static Equatable.== infix(_:_:)(&v9, &v8);
      swift_unknownObjectRelease(a1, v5);
      swift_unknownObjectRelease(a2, v6);
      if ((v4 & 1) != 0)
        return 1;
    }
  }
  else if (!a2)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10000B23C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = sub_10000B000(a1, *(_QWORD *)(a2 + 16));
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_10000B268(_QWORD *a1, uint64_t a2)
{
  void **v2;

  return sub_10000B0EC(a1, *v2, *(_QWORD *)(a2 + 16));
}

uint64_t sub_10000B288(uint64_t *a1, uint64_t *a2)
{
  return sub_10000B1AC(*a1, *a2);
}

uint64_t sub_10000B29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for NSCodingCodable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSCodingCodable);
}

uint64_t *sub_10000B2B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t sub_10000B2DC(_QWORD *a1, uint64_t a2)
{
  return swift_unknownObjectRelease(*a1, a2);
}

uint64_t *sub_10000B2E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v3, v5);
  return a1;
}

_QWORD *initializeWithTake for MRNowPlayingPlayerResponseWrapper(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *sub_10000B328(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v3, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for NSCodingCodableOptional(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NSCodingCodableOptional);
}

uint64_t sub_10000B410(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10000B454()
{
  unint64_t result;

  result = qword_1000C6820;
  if (!qword_1000C6820)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000C6820);
  }
  return result;
}

id sub_10000B498()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  id v7;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = 0;
  v2 = objc_msgSend(v0, "initForReadingFromData:error:", isa, &v7);

  v3 = v7;
  if (v2)
  {
    v4 = v7;
  }
  else
  {
    v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_10000B554(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10000B598()
{
  unint64_t result;

  result = qword_1000C6828;
  if (!qword_1000C6828)
  {
    result = swift_getWitnessTable(&unk_10008811C, &type metadata for DaemonError);
    atomic_store(result, (unint64_t *)&qword_1000C6828);
  }
  return result;
}

uint64_t sub_10000B5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_10000B604()
{
  unint64_t result;

  result = qword_1000C6890[0];
  if (!qword_1000C6890[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, qword_1000C6890);
  }
  return result;
}

float64x2_t sub_10000B64C@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  float64x2_t *v3;
  double v4;
  float64x2_t v5;
  float64x2_t result;

  v4 = a3;
  v5 = vaddq_f64(vmulq_n_f64(v3[1], 1.0 - v4), vmulq_n_f64(a1[1], v4));
  *a2 = vaddq_f64(vmulq_n_f64(*v3, 1.0 - v4), vmulq_n_f64(*a1, v4));
  a2[1] = v5;
  result = vaddq_f64(vmulq_n_f64(v3[2], 1.0 - v4), vmulq_n_f64(a1[2], v4));
  a2[2] = result;
  return result;
}

uint64_t sub_10000B698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10000B6A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = *(_QWORD *)(a1 + 16);
  result = type metadata accessor for ClosedRange(319, v2, *(_QWORD *)(a1 + 24));
  if (v4 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, v2);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(result - 8) + 64;
      v6[3] = &unk_100080B78;
      swift_initStructMetadata(a1, 0, 4, v6, a1 + 32);
      return 0;
    }
  }
  return result;
}

void **sub_10000B748(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + v6;
  v9 = (v7 + v6) & ~v6;
  v10 = v9 + v7;
  v11 = v7 + 7;
  v12 = *(_DWORD *)(v5 + 80) & 0x100000;
  v13 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7
    || v12 != 0
    || ((v7 + 7 + ((v9 + v7 + v6 + ((v6 + 8) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = (void **)&v13[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
  }
  else
  {
    v16 = ~v6;
    v24 = (uint64_t)a1 + v6 + 8;
    v17 = v24 & ~v6;
    v25 = (uint64_t)a2 + v6 + 8;
    v18 = v25 & ~v6;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v20 = v13;
    v19(v17, v18, v4);
    v19((v8 + v17) & v16, (v8 + v18) & v16, v4);
    v19(((v24 | v6) + v10) & v16, ((v25 | v6) + v10) & v16, v4);
    v21 = (v11 + (((v24 | v6) + v10) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v11 + (((v25 | v6) + v10) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v22 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
      return a1;
    }
    v13 = *(char **)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v13;
  }
  swift_retain(v13);
  return a1;
}

uint64_t sub_10000B8C4(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v7, v4);
  v9 = *(_QWORD *)(v5 + 64);
  v10 = v9 + v6 + v7;
  v8(v10 & ~v6, v4);
  v11 = (v10 + ((v9 + v6) & ~v6)) & ~v6;
  result = ((uint64_t (*)(uint64_t, uint64_t))v8)(v11, v4);
  v13 = (_QWORD *)((v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v13 >= 0xFFFFFFFFuLL)
    return swift_release(v13[1]);
  return result;
}

void **sub_10000B988(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(unint64_t, unint64_t, uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (unint64_t)a1 + v7 + 8;
  v9 = (unint64_t)a2 + v7 + 8;
  v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  v11 = v4;
  v10(v8 & ~v7, v9 & ~v7, v5);
  v12 = *(_QWORD *)(v6 + 64);
  v10((v12 + v7 + (v8 & ~v7)) & ~v7, (v12 + v7 + (v9 & ~v7)) & ~v7, v5);
  v13 = ((v12 + v7) & ~v7) + v12;
  v14 = ((v8 | v7) + v13) & ~v7;
  v15 = ((v9 | v7) + v13) & ~v7;
  v10(v14, v15, v5);
  v16 = (v12 + 7 + v14) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v18 = *(_QWORD *)(v17 + 8);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *(_QWORD *)(v16 + 8) = v18;
    swift_retain(v18);
  }
  return a1;
}

void **sub_10000BA94(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(unint64_t, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (unint64_t)a1 + v11 + 8;
  v13 = (unint64_t)a2 + v11 + 8;
  v14 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24);
  v14(v12 & ~v11, v13 & ~v11, v9);
  v15 = *(_QWORD *)(v10 + 64);
  v14((v15 + v11 + (v12 & ~v11)) & ~v11, (v15 + v11 + (v13 & ~v11)) & ~v11, v9);
  v16 = ((v15 + v11) & ~v11) + v15;
  v17 = ((v12 | v11) + v16) & ~v11;
  v18 = ((v13 | v11) + v16) & ~v11;
  v14(v17, v18, v9);
  v19 = (_QWORD *)((v15 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  v20 = (unint64_t *)((v15 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  v21 = *v20;
  if (*v19 < 0xFFFFFFFFuLL)
  {
    if (v21 >= 0xFFFFFFFF)
    {
      v24 = v20[1];
      *v19 = v21;
      v19[1] = v24;
      swift_retain(v24);
      return a1;
    }
LABEL_7:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    return a1;
  }
  if (v21 < 0xFFFFFFFF)
  {
    swift_release(v19[1]);
    goto LABEL_7;
  }
  v22 = v20[1];
  v23 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

_QWORD *sub_10000BBF0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(unint64_t, unint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (unint64_t)a1 + v6 + 8;
  v8 = (unint64_t)a2 + v6 + 8;
  v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32);
  v9(v7 & ~v6, v8 & ~v6, v4);
  v10 = *(_QWORD *)(v5 + 64);
  v9((v10 + v6 + (v7 & ~v6)) & ~v6, (v10 + v6 + (v8 & ~v6)) & ~v6, v4);
  v11 = ((v10 + v6) & ~v6) + v10;
  v12 = ((v7 | v6) + v11) & ~v6;
  v13 = ((v8 | v6) + v11) & ~v6;
  v9(v12, v13, v4);
  v14 = (v10 + 7 + v12) & 0xFFFFFFFFFFFFFFF8;
  v15 = (uint64_t *)((v10 + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  v16 = *v15;
  if ((unint64_t)*v15 < 0xFFFFFFFF)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v17 = v15[1];
    *(_QWORD *)v14 = v16;
    *(_QWORD *)(v14 + 8) = v17;
  }
  return a1;
}

void **sub_10000BCF4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(unint64_t, unint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (unint64_t)a1 + v9 + 8;
  v11 = (unint64_t)a2 + v9 + 8;
  v12 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40);
  v12(v10 & ~v9, v11 & ~v9, v7);
  v13 = *(_QWORD *)(v8 + 64);
  v12((v13 + v9 + (v10 & ~v9)) & ~v9, (v13 + v9 + (v11 & ~v9)) & ~v9, v7);
  v14 = ((v13 + v9) & ~v9) + v13;
  v15 = ((v10 | v9) + v14) & ~v9;
  v16 = ((v11 | v9) + v14) & ~v9;
  v12(v15, v16, v7);
  v17 = (_QWORD *)((v13 + 7 + v15) & 0xFFFFFFFFFFFFFFF8);
  v18 = (unint64_t *)((v13 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  v19 = *v18;
  if (*v17 < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      v22 = v18[1];
      *v17 = v19;
      v17[1] = v22;
      return a1;
    }
LABEL_7:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    return a1;
  }
  if (v19 < 0xFFFFFFFF)
  {
    swift_release(v17[1]);
    goto LABEL_7;
  }
  v20 = v18[1];
  v21 = v17[1];
  *v17 = v19;
  v17[1] = v20;
  swift_release(v21);
  return a1;
}

uint64_t sub_10000BE40(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64)
           + ((*(_QWORD *)(v4 + 64) + v7 + ((*(_QWORD *)(v4 + 64) + v7) & ~v7) + ((v7 + 8) & ~v7)) & ~v7)
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10000BEE0 + 4 * byte_100080B48[v10]))();
  }
}

void sub_10000BF60(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64)
         + (((((_DWORD)v7 + 8) | v7)
           + ((*(_DWORD *)(v5 + 64) + (_DWORD)v7) & ~(_DWORD)v7)
           + *(_DWORD *)(v5 + 64)) & ~(_DWORD)v7)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64)
       + (((((_DWORD)v7 + 8) | v7)
         + ((*(_DWORD *)(v5 + 64) + (_DWORD)v7) & ~(_DWORD)v7)
         + *(_DWORD *)(v5 + 64)) & ~(_DWORD)v7)
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((((v7 + 8) | v7) + ((*(_QWORD *)(v5 + 64) + v7) & ~v7) + *(_QWORD *)(v5 + 64)) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_10000C07C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10000C134);
}

void sub_10000C084(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10000C08CLL);
  JUMPOUT(0x10000C134);
}

void sub_10000C09C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10000C134);
}

void sub_10000C0A4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10000C134);
}

void sub_10000C0AC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x10000C130);
      JUMPOUT(0x10000C12CLL);
    }
    JUMPOUT(0x10000C0B8);
  }
  JUMPOUT(0x10000C134);
}

void sub_10000C124()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
  JUMPOUT(0x10000C134);
}

void sub_10000C164()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x10000C134);
}

void sub_10000C16C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x10000C134);
}

void sub_10000C17C()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x10000C134);
}

uint64_t type metadata accessor for Clamping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Clamping);
}

uint64_t sub_10000C194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v21 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mrResponse;
  v22 = sub_100004B18(&qword_1000C6D20);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v15 + v21) = sub_100013618(0, 0, 0, 0, 0, 0);
  sub_100017264(a1, v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_cardInfo, _s8CardInfoOMa);
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_deviceAssetType) = a2;
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_host) = a3;
  v23 = (_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_initialMediaTransferStatus);
  *v23 = a4;
  v23[1] = a5;
  v24 = (_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_localDeviceModel);
  *v24 = a6;
  v24[1] = a7;
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController) = a8;
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__isActive) = a9;
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__activityDisplayContext) = a10;
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__cardMode) = a11;
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus) = a12;
  v25 = *(_QWORD *)(v15 + v21);
  *(_QWORD *)(v15 + v21) = a13;
  swift_release(v25);
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__progress) = a14;
  *(_QWORD *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_homeGestureEventPublisher) = a15;
  return v15;
}

uint64_t sub_10000C33C()
{
  uint64_t v0;
  uint64_t v1;

  sub_100018008(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_cardInfo, _s8CardInfoOMa);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_host), v1);
  sub_100013C94(*(id *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_initialMediaTransferStatus));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_localDeviceModel + 8));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__isActive));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__activityDisplayContext));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__cardMode));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mrResponse));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__progress));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_homeGestureEventPublisher));
  return v0;
}

uint64_t sub_10000C420()
{
  uint64_t v0;

  sub_10000C33C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000C444()
{
  return type metadata accessor for CardPresenterModel(0);
}

uint64_t type metadata accessor for CardPresenterModel(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000C6978, (uint64_t)&nominal type descriptor for CardPresenterModel);
}

uint64_t sub_10000C460(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  result = _s8CardInfoOMa(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = "\b";
    v4[3] = &unk_1000810E0;
    v4[4] = &unk_1000810F8;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

uint64_t type metadata accessor for CardPresenterState()
{
  return objc_opt_self(_TtC13PCViewService18CardPresenterState);
}

uint64_t *sub_10000C53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle);
  if (v2)
  {
    v3 = *(uint64_t **)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle);
  }
  else
  {
    v4 = v0;
    v5 = sub_10000C5E8();
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13PCViewService13CardPresenter_homeAccessoryViewHandleState);
    v7 = type metadata accessor for HomeAccessoryViewHandle();
    swift_allocObject(v7, 80, 7);
    swift_retain(v6);
    v3 = sub_100063840(v5, v6);
    v8 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v8);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10000C5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  v2 = _s8CardInfoOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel);
  if (v6)
  {
    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter_model);
    sub_100017FC4(v8 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_cardInfo, (uint64_t)v4, _s8CardInfoOMa);
    v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus);
    v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mrResponse);
    v11 = type metadata accessor for HomeAccessoryViewHandleModel(0);
    v7 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mrResponse;
    v13 = sub_100004B18(&qword_1000C6D20);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    swift_retain(v9);
    swift_retain(v10);
    *(_QWORD *)(v7 + v12) = sub_100013618(0, 0, 0, 0, 0, 0);
    sub_100017264((uint64_t)v4, v7 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel_cardInfo, _s8CardInfoOMa);
    *(_QWORD *)(v7 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mediaTransferStatus) = v9;
    v14 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mrResponse);
    *(_QWORD *)(v7 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mrResponse) = v10;
    swift_release(v14);
    v15 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v7;
    swift_retain(v7);
    swift_release(v15);
    v6 = 0;
  }
  swift_retain(v6);
  return v7;
}

uint64_t *sub_10000C780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel);
  if (v6)
  {
    v7 = *(uint64_t **)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel);
  }
  else
  {
    sub_100017FC4(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_initialActivityDisplayContext, (uint64_t)v4, type metadata accessor for ActivityDisplayContext);
    v8 = swift_allocObject(&unk_1000B34A8, 24, 7);
    swift_unknownObjectWeakInit(v8 + 16, v1);
    v9 = type metadata accessor for ProximityCardHeaderViewModel(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v7 = sub_10006F820((uint64_t)v4, (uint64_t)sub_100017FB8, v8);
    swift_release(v8);
    v10 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v7;
    swift_retain(v7);
    swift_release(v10);
    v6 = 0;
  }
  swift_retain(v6);
  return v7;
}

void sub_10000C894(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1000106BC(a1 & 1);

  }
}

id sub_10000C8EC()
{
  void *v0;
  id v1;
  NSString v2;
  objc_super v4;

  v1 = sub_100053508();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for CardPresenter(0);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10000CB10()
{
  return type metadata accessor for CardPresenter(0);
}

uint64_t type metadata accessor for CardPresenter(uint64_t a1)
{
  return sub_10000565C(a1, (uint64_t *)&unk_1000C6D10, (uint64_t)&nominal type descriptor for CardPresenter);
}

id sub_10000CB2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id result;
  void *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  id v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(void);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  id v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  id v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  id v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  void *v231;
  uint64_t v232;
  id v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void (*v288)(void);
  uint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  id v298;
  id v299[2];

  v1 = v0;
  v2 = sub_100004B18(&qword_1000C6EB8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v243 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = sub_100004B18(&qword_1000C6EC0);
  v249 = *(_QWORD *)(v250 - 8);
  v6 = __chkstk_darwin(v250);
  v247 = (char *)&v243 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = v7;
  __chkstk_darwin(v6);
  v248 = (char *)&v243 - v8;
  v9 = sub_100004B18(&qword_1000C6EC8);
  v285 = *(_QWORD *)(v9 - 8);
  v286 = v9;
  __chkstk_darwin(v9);
  v284 = (char *)&v243 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = sub_100004B18(&qword_1000C6ED0);
  v278 = *(_QWORD *)(v280 - 8);
  __chkstk_darwin(v280);
  v277 = (char *)&v243 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = sub_100004B18(&qword_1000C6ED8);
  v282 = *(_QWORD *)(v283 - 8);
  v12 = __chkstk_darwin(v283);
  v281 = (char *)&v243 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = v13;
  __chkstk_darwin(v12);
  v292 = (char *)&v243 - v14;
  v276 = sub_100004B18(&qword_1000C6EE0);
  v275 = *(_QWORD *)(v276 - 8);
  __chkstk_darwin(v276);
  v274 = (char *)&v243 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = sub_100004B18(&qword_1000C6EE8);
  v268 = *(_QWORD *)(v270 - 8);
  __chkstk_darwin(v270);
  v267 = (char *)&v243 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_100004B18(&qword_1000C6EF0);
  v272 = *(_QWORD *)(v273 - 8);
  v17 = __chkstk_darwin(v273);
  v271 = (char *)&v243 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = v18;
  __chkstk_darwin(v17);
  v291 = (char *)&v243 - v19;
  v263 = sub_100004B18(&qword_1000C6EF8);
  v262 = *(_QWORD *)(v263 - 8);
  __chkstk_darwin(v263);
  v261 = (char *)&v243 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = sub_100004B18(&qword_1000C6F00);
  v265 = *(_QWORD *)(v266 - 8);
  __chkstk_darwin(v266);
  v264 = (char *)&v243 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004B18(&qword_1000C6F08);
  v260 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v259 = (char *)&v243 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = sub_100004B18(&qword_1000C6F10);
  v257 = *(_QWORD *)(v258 - 8);
  __chkstk_darwin(v258);
  v256 = (char *)&v243 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100004B18(&qword_1000C6F18);
  __chkstk_darwin(v25);
  v294 = (char *)&v243 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v255 = sub_100004B18(&qword_1000C6F20);
  v254 = *(_QWORD *)(v255 - 8);
  v27 = __chkstk_darwin(v255);
  v253 = (char *)&v243 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = v28;
  __chkstk_darwin(v27);
  v290 = (char *)&v243 - v29;
  v30 = sub_100053508();
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "ulog:message:", 40, v31);

  v32 = *(char **)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_model);
  v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_state);
  v34 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel_host;
  objc_msgSend(*(id *)&v32[OBJC_IVAR____TtC13PCViewService18CardPresenterModel_host], "setAllowsAlertStacking:", 1);
  objc_msgSend(*(id *)&v32[v34], "setDesiredHardwareButtonEvents:", 16);
  v35 = *(void **)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView);
  v36 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController;
  v295 = v32;
  result = objc_msgSend(*(id *)&v32[OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController], "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v38 = result;
  v251 = v22;
  v243 = v5;
  v244 = v3;
  v245 = v2;
  objc_msgSend(result, "bounds");
  v40 = v39;
  v42 = v41;
  v44 = v43;
  v46 = v45;

  objc_msgSend(v35, "setFrame:", v40, v42, v44, v46);
  result = objc_msgSend(*(id *)&v295[v36], "view");
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v47 = result;
  objc_msgSend(result, "addSubview:", v35);

  v48 = sub_10000C5E8();
  v49 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_homeAccessoryViewHandleState);
  v50 = type metadata accessor for HomeAccessoryViewHandle();
  swift_allocObject(v50, 80, 7);
  swift_retain(v49);
  v51 = sub_100063840(v48, v49);
  v52 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle) = v51;
  swift_release(v52);
  v299[0] = *(id *)(v49 + 16);
  swift_retain(v299[0]);
  swift_retain(v33);
  v53 = sub_100004B18(&qword_1000C6D80);
  v54 = sub_10000AAFC(&qword_1000C6F28, &qword_1000C6D80, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v55 = Publisher<>.sink(receiveValue:)(sub_1000179D4, v33, v53, v54);
  swift_release(v33);
  swift_release(v299[0]);
  v56 = v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_tasks;
  swift_beginAccess(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_tasks, v299, 33, 0);
  AnyCancellable.store(in:)(v56);
  swift_endAccess(v299);
  swift_release(v55);
  v299[0] = *(id *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_educationViewModel)
                  + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_educationViewEventSubject);
  v57 = sub_100004B18(&qword_1000C6F30);
  v58 = sub_10000AAFC(&qword_1000C6F38, &qword_1000C6F30, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v299[0] = (id)Publisher.eraseToAnyPublisher()(v57, v58);
  swift_retain(v33);
  v59 = sub_100004B18(&qword_1000C6F40);
  v60 = sub_10000AAFC(&qword_1000C6F48, &qword_1000C6F40, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v61 = Publisher<>.sink(receiveValue:)(sub_1000179DC, v33, v59, v60);
  swift_release(v33);
  swift_release(v299[0]);
  swift_beginAccess(v56, v299, 33, 0);
  AnyCancellable.store(in:)(v56);
  swift_endAccess(v299);
  swift_release(v61);
  v299[0] = (id)sub_10001F598();
  v62 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v62 + 16, v1);
  v63 = sub_100004B18(&qword_1000C6F50);
  v64 = sub_10000AAFC(&qword_1000C6F58, &qword_1000C6F50, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v65 = Publisher<>.sink(receiveValue:)(sub_100017A44, v62, v63, v64);
  swift_release(v62);
  swift_release(v299[0]);
  swift_beginAccess(v56, v299, 33, 0);
  AnyCancellable.store(in:)(v56);
  swift_endAccess(v299);
  swift_release(v65);
  dispatch thunk of UIHostingController.rootView.getter(v299);
  v66 = v299[1];
  v67 = (void *)sub_10002507C();
  swift_release(v66);
  v299[0] = v67;
  v68 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v68 + 16, v1);
  v69 = sub_100004B18(&qword_1000C6F60);
  v70 = sub_10000AAFC(&qword_1000C6F68, &qword_1000C6F60, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v71 = Publisher<>.sink(receiveValue:)(sub_100017A4C, v68, v69, v70);
  swift_release(v68);
  swift_release(v299[0]);
  v296 = v56;
  swift_beginAccess(v56, v299, 33, 0);
  AnyCancellable.store(in:)(v56);
  swift_endAccess(v299);
  swift_release(v71);
  v72 = sub_10000C53C();
  v73 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v73 + 16, v1);
  v74 = v72[6];
  v75 = v72[7];
  v72[6] = (uint64_t)sub_100017A54;
  v72[7] = v73;
  sub_100007A90(v74, v75);
  swift_release(v72);
  v299[0] = *(id *)&v295[OBJC_IVAR____TtC13PCViewService18CardPresenterModel__activityDisplayContext];
  v76 = v299[0];
  v77 = sub_10000AA28(0, (unint64_t *)&qword_1000C6E28, OS_dispatch_queue_ptr);
  v78 = swift_retain(v76);
  v293 = v77;
  v298 = (id)static OS_dispatch_queue.main.getter(v78);
  v79 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v288 = *(void (**)(void))(*(_QWORD *)(v79 - 8) + 56);
  v289 = v79;
  v80 = (uint64_t)v294;
  v288();
  v81 = sub_100004B18(&qword_1000C6F70);
  v82 = sub_10000AAFC(&qword_1000C6F78, &qword_1000C6F70, (uint64_t)&unk_100085A10);
  v287 = sub_100017A5C();
  v83 = v290;
  Publisher.receive<A>(on:options:)(&v298, v80, v81, v77, v82, v287);
  sub_100017AB4(v80, &qword_1000C6F18);

  swift_release(v299[0]);
  v84 = sub_100053508();
  v85 = v254;
  v86 = v253;
  v87 = v83;
  v88 = v255;
  (*(void (**)(char *, char *, uint64_t))(v254 + 16))(v253, v87, v255);
  v89 = *(unsigned __int8 *)(v85 + 80);
  v90 = (v89 + 32) & ~v89;
  v91 = (v252 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
  v92 = (v91 + 23) & 0xFFFFFFFFFFFFFFF8;
  v93 = (v92 + 23) & 0xFFFFFFFFFFFFFFF8;
  v297 = v1;
  v94 = (v93 + 11) & 0xFFFFFFFFFFFFFFF8;
  v95 = swift_allocObject(&unk_1000B3930, v94 | 4, v89 | 7);
  *(_QWORD *)(v95 + 16) = 0;
  *(_QWORD *)(v95 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v95 + v90, v86, v88);
  v96 = (_QWORD *)(v95 + v91);
  *v96 = 0xD00000000000001CLL;
  v96[1] = 0x8000000100090320;
  v97 = (_QWORD *)(v95 + v92);
  *v97 = 0;
  v97[1] = 0xE000000000000000;
  *(_QWORD *)(v95 + v93) = v84;
  *(_DWORD *)(v95 + v94) = 40;
  v98 = type metadata accessor for ActivityDisplayContext(0);
  v99 = sub_10000AAFC(&qword_1000C6F88, &qword_1000C6F20, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v100 = v84;
  v101 = v256;
  v102 = v290;
  Publisher.map<A>(_:)(sub_100017AFC, v95, v88, v98, v99);
  swift_release(v95);
  v103 = sub_10000AAFC(&qword_1000C6F90, &qword_1000C6F10, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v104 = v258;
  v105 = (void *)Publisher.eraseToAnyPublisher()(v258, v103);
  (*(void (**)(char *, uint64_t))(v257 + 8))(v101, v104);

  (*(void (**)(char *, uint64_t))(v85 + 8))(v102, v88);
  v299[0] = v105;
  v106 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v106 + 16, v297);
  v107 = sub_100004B18(&qword_1000C6F98);
  v108 = sub_10000AAFC(&qword_1000C6FA0, &qword_1000C6F98, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v109 = Publisher<>.sink(receiveValue:)(sub_100017BA4, v106, v107, v108);
  swift_release(v106);
  swift_release(v299[0]);
  v110 = v296;
  swift_beginAccess(v296, v299, 33, 0);
  AnyCancellable.store(in:)(v110);
  swift_endAccess(v299);
  swift_release(v109);
  v111 = v295;
  v299[0] = *(id *)&v295[OBJC_IVAR____TtC13PCViewService18CardPresenterModel_homeGestureEventPublisher];
  v112 = swift_retain(v299[0]);
  v113 = v293;
  v298 = (id)static OS_dispatch_queue.main.getter(v112);
  v114 = (uint64_t)v294;
  v115 = v288;
  v116 = v289;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v288)(v294, 1, 1, v289);
  v117 = sub_100004B18(&qword_1000C6FA8);
  v118 = sub_10000AAFC(&qword_1000C6FB0, &qword_1000C6FA8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v119 = v259;
  v120 = v287;
  Publisher.receive<A>(on:options:)(&v298, v114, v117, v113, v118, v287);
  sub_100017AB4(v114, &qword_1000C6F18);

  swift_release(v299[0]);
  v121 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v121 + 16, v297);
  v122 = swift_allocObject(&unk_1000B3958, 32, 7);
  *(_QWORD *)(v122 + 16) = sub_100017BAC;
  *(_QWORD *)(v122 + 24) = v121;
  v123 = sub_10000AAFC(&qword_1000C6FB8, &qword_1000C6F08, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v124 = v251;
  v125 = Publisher<>.sink(receiveValue:)(sub_1000174D4, v122, v251, v123);
  swift_release(v122);
  (*(void (**)(char *, uint64_t))(v260 + 8))(v119, v124);
  v126 = v296;
  swift_beginAccess(v296, v299, 33, 0);
  AnyCancellable.store(in:)(v126);
  swift_endAccess(v299);
  swift_release(v125);
  v299[0] = *(id *)&v111[OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus];
  v127 = sub_100004B18(&qword_1000C6FC0);
  v128 = sub_10000AAFC(&qword_1000C6FC8, &qword_1000C6FC0, (uint64_t)&unk_100085A10);
  v129 = v261;
  v130 = Publisher.dropFirst(_:)(1, v127, v128);
  v299[0] = (id)static OS_dispatch_queue.main.getter(v130);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v115)(v114, 1, 1, v116);
  v131 = sub_10000AAFC(&qword_1000C6FD0, &qword_1000C6EF8, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v132 = v264;
  v133 = v263;
  Publisher.receive<A>(on:options:)(v299, v114, v263, v113, v131, v120);
  sub_100017AB4(v114, &qword_1000C6F18);

  (*(void (**)(char *, uint64_t))(v262 + 8))(v129, v133);
  v134 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v134 + 16, v297);
  v135 = sub_10000AAFC(&qword_1000C6FD8, &qword_1000C6F00, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v136 = v266;
  v137 = Publisher<>.sink(receiveValue:)(sub_100017BCC, v134, v266, v135);
  swift_release(v134);
  (*(void (**)(char *, uint64_t))(v265 + 8))(v132, v136);
  v138 = v296;
  swift_beginAccess(v296, v299, 33, 0);
  AnyCancellable.store(in:)(v138);
  swift_endAccess(v299);
  swift_release(v137);
  v299[0] = *(id *)&v295[OBJC_IVAR____TtC13PCViewService18CardPresenterModel__progress];
  v139 = sub_100004B18(&qword_1000C6FE0);
  v140 = sub_10000AAFC(&qword_1000C6FE8, &qword_1000C6FE0, (uint64_t)&unk_100085A10);
  v141 = v267;
  v142 = Publisher<>.removeDuplicates()(v139, v140, &protocol witness table for Float);
  v143 = v293;
  v299[0] = (id)static OS_dispatch_queue.main.getter(v142);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v115)(v114, 1, 1, v116);
  v144 = sub_10000AAFC(&qword_1000C6FF0, &qword_1000C6EE8, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v145 = v291;
  v146 = v270;
  Publisher.receive<A>(on:options:)(v299, v114, v270, v143, v144, v120);
  sub_100017AB4(v114, &qword_1000C6F18);

  (*(void (**)(char *, uint64_t))(v268 + 8))(v141, v146);
  v147 = sub_100053508();
  v148 = v272;
  v149 = v271;
  v150 = v273;
  (*(void (**)(char *, char *, uint64_t))(v272 + 16))(v271, v145, v273);
  v151 = *(unsigned __int8 *)(v148 + 80);
  v152 = (v151 + 32) & ~v151;
  v153 = (v269 + v152 + 7) & 0xFFFFFFFFFFFFFFF8;
  v154 = (v153 + 23) & 0xFFFFFFFFFFFFFFF8;
  v155 = (v154 + 23) & 0xFFFFFFFFFFFFFFF8;
  v156 = (v155 + 11) & 0xFFFFFFFFFFFFFFF8;
  v157 = swift_allocObject(&unk_1000B3980, v156 | 4, v151 | 7);
  *(_QWORD *)(v157 + 16) = 0;
  *(_QWORD *)(v157 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v148 + 32))(v157 + v152, v149, v150);
  strcpy((char *)(v157 + v153), "New progress: ");
  *(_BYTE *)(v157 + v153 + 15) = -18;
  v158 = (_QWORD *)(v157 + v154);
  *v158 = 0;
  v158[1] = 0xE000000000000000;
  *(_QWORD *)(v157 + v155) = v147;
  *(_DWORD *)(v157 + v156) = 40;
  v159 = sub_10000AAFC(&qword_1000C6FF8, &qword_1000C6EF0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v160 = v147;
  v161 = v274;
  v162 = v291;
  Publisher.map<A>(_:)(sub_100017BE0, v157, v150, &type metadata for Float, v159);
  swift_release(v157);
  v163 = sub_10000AAFC(&qword_1000C7000, &qword_1000C6EE0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v164 = v276;
  v165 = (void *)Publisher.eraseToAnyPublisher()(v276, v163);
  (*(void (**)(char *, uint64_t))(v275 + 8))(v161, v164);

  (*(void (**)(char *, uint64_t))(v148 + 8))(v162, v150);
  v299[0] = v165;
  v166 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v166 + 16, v297);
  v167 = sub_100004B18(&qword_1000C7008);
  v168 = sub_10000AAFC(&qword_1000C7010, &qword_1000C7008, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v169 = Publisher<>.sink(receiveValue:)(sub_100017C84, v166, v167, v168);
  swift_release(v166);
  swift_release(v299[0]);
  v170 = v296;
  swift_beginAccess(v296, v299, 33, 0);
  AnyCancellable.store(in:)(v170);
  swift_endAccess(v299);
  swift_release(v169);
  v299[0] = *(id *)&v295[OBJC_IVAR____TtC13PCViewService18CardPresenterModel__cardMode];
  v171 = sub_100004B18(&qword_1000C7018);
  v172 = sub_10000AAFC(&qword_1000C7020, &qword_1000C7018, (uint64_t)&unk_100085A10);
  v173 = sub_100017C8C();
  v174 = v277;
  v175 = Publisher<>.removeDuplicates()(v171, v172, v173);
  v176 = v293;
  v299[0] = (id)static OS_dispatch_queue.main.getter(v175);
  v177 = (uint64_t)v294;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v288)(v294, 1, 1, v289);
  v178 = sub_10000AAFC(&qword_1000C7030, &qword_1000C6ED0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v179 = v292;
  v180 = v280;
  Publisher.receive<A>(on:options:)(v299, v177, v280, v176, v178, v287);
  sub_100017AB4(v177, &qword_1000C6F18);

  (*(void (**)(char *, uint64_t))(v278 + 8))(v174, v180);
  v181 = sub_100053508();
  v182 = v282;
  v183 = v281;
  v184 = v283;
  (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v281, v179, v283);
  v185 = *(unsigned __int8 *)(v182 + 80);
  v186 = (v185 + 32) & ~v185;
  v187 = (v279 + v186 + 7) & 0xFFFFFFFFFFFFFFF8;
  v188 = (v187 + 23) & 0xFFFFFFFFFFFFFFF8;
  v189 = (v188 + 23) & 0xFFFFFFFFFFFFFFF8;
  v190 = (v189 + 11) & 0xFFFFFFFFFFFFFFF8;
  v191 = swift_allocObject(&unk_1000B39A8, v190 | 4, v185 | 7);
  v192 = v191 + v186;
  v193 = v297;
  *(_QWORD *)(v191 + 16) = 0;
  *(_QWORD *)(v191 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v182 + 32))(v192, v183, v184);
  strcpy((char *)(v191 + v187), "New cardMode: ");
  *(_BYTE *)(v191 + v187 + 15) = -18;
  v194 = (_QWORD *)(v191 + v188);
  *v194 = 0;
  v194[1] = 0xE000000000000000;
  *(_QWORD *)(v191 + v189) = v181;
  *(_DWORD *)(v191 + v190) = 40;
  v195 = sub_10000AAFC(&qword_1000C7038, &qword_1000C6ED8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v196 = v181;
  v197 = v284;
  v198 = v195;
  v199 = v292;
  Publisher.map<A>(_:)(sub_100017CDC, v191, v184, &type metadata for CardMode, v198);
  swift_release(v191);
  v200 = sub_10000AAFC(&qword_1000C7040, &qword_1000C6EC8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v201 = v286;
  v202 = (void *)Publisher.eraseToAnyPublisher()(v286, v200);
  (*(void (**)(char *, uint64_t))(v285 + 8))(v197, v201);

  (*(void (**)(char *, uint64_t))(v182 + 8))(v199, v184);
  v299[0] = v202;
  v203 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v203 + 16, v193);
  v204 = sub_100004B18(&qword_1000C7048);
  v205 = sub_10000AAFC(&qword_1000C7050, &qword_1000C7048, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v206 = Publisher<>.sink(receiveValue:)(sub_100017D84, v203, v204, v205);
  swift_release(v203);
  swift_release(v299[0]);
  v207 = v296;
  swift_beginAccess(v296, v299, 33, 0);
  AnyCancellable.store(in:)(v207);
  swift_endAccess(v299);
  swift_release(v206);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v208 = *(_QWORD *)(qword_1000DF570 + 496);
  swift_retain(v208);
  v209 = sub_100020AA8();
  result = (id)swift_release(v208);
  if ((v209 & 1) != 0)
  {
    v210 = sub_10000C53C();
    v211 = v210[5];
    swift_retain(v211);
    v212 = (void *)sub_100063424();
    v299[0] = v212;
    v213 = sub_100004B18(&qword_1000C7058);
    v214 = sub_10000AAFC(&qword_1000C7060, &qword_1000C7058, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v215 = (void *)Publisher.eraseToAnyPublisher()(v213, v214);
    swift_release(v210);
    swift_release(v211);
    swift_release(v212);
    v299[0] = v215;
    v216 = sub_100004B18(&qword_1000C7068);
    v217 = sub_10000AAFC(&qword_1000C7070, &qword_1000C7068, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v218 = v248;
    Publisher.map<A>(_:)(sub_10000EB6C, 0, v216, &type metadata for Bool, v217);
    swift_release(v215);
    v295 = (char *)sub_100053508();
    v219 = v249;
    v220 = v247;
    v221 = v250;
    (*(void (**)(char *, char *, uint64_t))(v249 + 16))(v247, v218, v250);
    v222 = *(unsigned __int8 *)(v219 + 80);
    v223 = (v222 + 32) & ~v222;
    v224 = (v246 + v223 + 7) & 0xFFFFFFFFFFFFFFF8;
    v225 = (v224 + 23) & 0xFFFFFFFFFFFFFFF8;
    v226 = (v225 + 23) & 0xFFFFFFFFFFFFFFF8;
    v227 = (v226 + 11) & 0xFFFFFFFFFFFFFFF8;
    v228 = swift_allocObject(&unk_1000B39D0, v227 | 4, v222 | 7);
    *(_QWORD *)(v228 + 16) = 0;
    *(_QWORD *)(v228 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v219 + 32))(v228 + v223, v220, v221);
    v229 = (_QWORD *)(v228 + v224);
    *v229 = 0xD00000000000001DLL;
    v229[1] = 0x8000000100090340;
    v230 = (_QWORD *)(v228 + v225);
    *v230 = 0;
    v230[1] = 0xE000000000000000;
    v231 = v295;
    *(_QWORD *)(v228 + v226) = v295;
    *(_DWORD *)(v228 + v227) = 40;
    v232 = sub_10000AAFC(&qword_1000C7078, &qword_1000C6EC0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v233 = v231;
    v234 = v243;
    Publisher.map<A>(_:)(sub_100017E5C, v228, v221, &type metadata for Bool, v232);
    swift_release(v228);
    v235 = sub_10000AAFC(&qword_1000C7080, &qword_1000C6EB8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v236 = v245;
    v237 = (void *)Publisher.eraseToAnyPublisher()(v245, v235);
    (*(void (**)(char *, uint64_t))(v244 + 8))(v234, v236);

    (*(void (**)(char *, uint64_t))(v219 + 8))(v218, v221);
    v299[0] = v237;
    v238 = swift_allocObject(&unk_1000B34A8, 24, 7);
    swift_unknownObjectWeakInit(v238 + 16, v297);
    v239 = sub_100004B18(&qword_1000C6E18);
    v240 = sub_10000AAFC(&qword_1000C6E20, &qword_1000C6E18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v241 = Publisher<>.sink(receiveValue:)(sub_100017F08, v238, v239, v240);
    swift_release(v238);
    swift_release(v299[0]);
    v242 = v296;
    swift_beginAccess(v296, v299, 33, 0);
    AnyCancellable.store(in:)(v242);
    swift_endAccess(v299);
    return (id)swift_release(v241);
  }
  return result;
}

uint64_t sub_10000E694(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;
  _QWORD v11[7];
  char v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_BYTE *)(a1 + 56);
  v9 = v8 | 0x40;
  v11[0] = v1;
  v11[1] = v2;
  v11[2] = v3;
  v11[3] = v4;
  v11[4] = v5;
  v11[5] = v6;
  v11[6] = v7;
  v12 = v8 | 0x40;
  v13 = 0xD000000000000026;
  v14 = 0x80000001000903B0;
  sub_100017F6C(v1, v2, v3, v4, v5, v6, v7, v8);
  PassthroughSubject.send(_:)(v11);
  sub_1000173AC(v1, v2, v3, v4, v5, v6, v7, v9);
  return swift_bridgeObjectRelease(0x80000001000903B0);
}

void sub_10000E774(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    sub_100011FA0(v2, v3, v4);

  }
}

void sub_10000E7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_100011E90();

  }
}

void sub_10000E834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    sub_1000117CC(0xD00000000000001FLL, (void *)0x8000000100090360, a1, a2);

  }
}

uint64_t sub_10000E8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  void *v11;
  uint64_t *v12;
  uint64_t KeyPath;
  uint64_t v14;
  _BYTE v16[24];

  v4 = type metadata accessor for ActivityDisplayContext(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5);
  v9 = &v16[-v8 - 8];
  a2 += 16;
  swift_beginAccess(a2, v16, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    v11 = (void *)result;
    v12 = sub_10000C780();

    sub_100017FC4(a1, (uint64_t)v9, type metadata accessor for ActivityDisplayContext);
    KeyPath = swift_getKeyPath(&unk_100081398);
    v14 = swift_getKeyPath(&unk_1000813C0);
    sub_100017FC4((uint64_t)v9, (uint64_t)v7, type metadata accessor for ActivityDisplayContext);
    swift_retain(v12);
    static Published.subscript.setter(v7, v12, KeyPath, v14);
    sub_100018008((uint64_t)v9, type metadata accessor for ActivityDisplayContext);
    return swift_release(v12);
  }
  return result;
}

uint64_t sub_10000E9EC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_10000EA0C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  _BYTE v7[24];

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (Strong)
  {
    v6 = (void *)Strong;
    sub_10000EC14(v2, v3);

  }
}

uint64_t sub_10000EA74(int *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  int v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC13PCViewService13CardPresenter_educationViewModel);
    swift_retain(v6);

    KeyPath = swift_getKeyPath(&unk_100081350);
    v8 = swift_getKeyPath(&unk_100081378);
    v9 = v2;
    return static Published.subscript.setter(&v9, v6, KeyPath, v8);
  }
  return result;
}

void sub_10000EB14(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10000EF20(v2);

  }
}

_QWORD *sub_10000EB6C@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t sub_10000EB80(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t *v6;
  uint64_t KeyPath;
  uint64_t v8;
  char v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = sub_10000C780();

    KeyPath = swift_getKeyPath(&unk_100081308);
    v8 = swift_getKeyPath(&unk_100081330);
    v9 = v2;
    return static Published.subscript.setter(&v9, v6, KeyPath, v8);
  }
  return result;
}

void sub_10000EC14(void *a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  id v7;
  NSString v8;
  uint64_t v9;
  char v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t *v14;
  id v15;
  _QWORD v16[2];
  uint64_t v17;
  unint64_t v18;

  v17 = 0;
  v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v4._countAndFlagsBits = 0xD000000000000020;
  v4._object = (void *)0x8000000100090290;
  String.append(_:)(v4);
  v5._object = (void *)0x80000001000902C0;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  v16[0] = a1;
  v16[1] = a2;
  _print_unlocked<A, B>(_:_:)(v16, &v17, &type metadata for MediaTransferStatus, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6 = v18;
  v7 = sub_100053508();
  swift_bridgeObjectRetain(v6);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v7, "ulog:message:", 40, v8);
  swift_bridgeObjectRelease(v6);

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v9 = *(_QWORD *)(qword_1000DF570 + 512);
  swift_retain(v9);
  v10 = sub_100020AA8();
  swift_release(v9);
  if ((v10 & 1) != 0)
  {
    v11 = sub_100053508();
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "ulog:message:", 40, v12);

  }
  else if (a1 == (void *)1)
  {
    sub_10000EE18();
  }
  else
  {
    v13 = a1;
    v14 = sub_10000C53C();
    v15 = v13;
    sub_1000642EC(a1);
    swift_release(v14);

    sub_100013C94(a1);
  }
}

void sub_10000EE18()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;

  v1 = v0;
  v2 = sub_100053508();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "ulog:message:", 40, v3);

  v4 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_model)
                 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus);
  v5 = swift_retain(v4);
  v6 = CurrentValueSubject.value.getter(&v9, v5);
  v7 = v9;
  if (v9 == (void *)2)
  {
    CurrentValueSubject.value.getter(&v10, v6);
    swift_release(v4);
    v7 = v10;
    if (v10 != (void *)1)
    {
LABEL_3:
      sub_100013C94(v7);
      return;
    }
  }
  else
  {
    swift_release(v4);
    if (v7 != (void *)1)
      goto LABEL_3;
  }
  v8 = sub_10000C53C();
  sub_100064680();
  swift_release(v8);
}

void sub_10000EF20(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  Swift::String v5;
  void *object;
  id v7;
  NSString v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  Swift::String v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  void *v56;
  Swift::String v57;
  uint64_t v58;
  Swift::String v59;
  void *v60;
  uint64_t v61;
  id v62;
  NSString v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t *v81;
  id v82;
  NSString v83;
  uint64_t v84;
  id v85;
  NSString v86;
  uint64_t v87;
  char v88;
  NSString v89;
  id v90;
  _BYTE v91[56];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  *(_QWORD *)&v96 = 0xD00000000000001DLL;
  *((_QWORD *)&v96 + 1) = 0x8000000100090010;
  v5._countAndFlagsBits = sub_1000378A4(a1);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7 = sub_100053508();
  swift_bridgeObjectRetain(0x8000000100090010);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100090010);
  objc_msgSend(v7, "ulog:message:", 40, v8);
  swift_bridgeObjectRelease(0x8000000100090010);

  if (a1 == 4)
  {
    v16 = sub_100053508();
    v89 = String._bridgeToObjectiveC()();
    objc_msgSend(v16, "ulog:message:", 60, v89);

    return;
  }
  if (a1 == 3)
  {
    v9 = sub_10000C53C();
    v10 = swift_allocObject(&unk_1000B34A8, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, v2);
    v11 = swift_allocObject(&unk_1000B3840, 25, 7);
    *(_QWORD *)(v11 + 16) = v10;
    *(_BYTE *)(v11 + 24) = 3;
    swift_retain(v10);
    v12 = sub_100053530();
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "ulog:message:", 40, v13);

    v14 = sub_1000639A8();
    v15 = swift_allocObject(&unk_1000B3868, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_100017764;
    *(_QWORD *)(v15 + 24) = v11;
    swift_retain(v11);
    sub_1000160EC((void (*)(void **))sub_100017798, v15);
    swift_release(v9);
    swift_release(v10);
    swift_release(v11);
    swift_release(v14);
    swift_release(v15);
    return;
  }
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_educationViewModel);
  KeyPath = swift_getKeyPath(&unk_1000811E8);
  v19 = swift_getKeyPath(&unk_100081210);
  LOBYTE(v96) = a1;
  swift_retain(v17);
  static Published.subscript.setter(&v96, v17, KeyPath, v19);
  v20 = swift_retain(v17);
  sub_100048F78(v20, (uint64_t)&v96);
  v91[0] = 0;
  swift_retain(v17);
  State.init(wrappedValue:)(v91, &type metadata for Bool);
  v88 = v92;
  v21 = *((_QWORD *)&v92 + 1);
  v22 = type metadata accessor for HandoffFeatureEducationViewModel(0);
  v23 = sub_100003E48((unint64_t *)&qword_1000C6E38, type metadata accessor for HandoffFeatureEducationViewModel, (uint64_t)&unk_100081680);
  v87 = ObservedObject.init(wrappedValue:)(v17, v22, v23);
  v90 = v24;
  v25 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16, v2);
  v26 = swift_allocObject(&unk_1000B37A0, 32, 7);
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = ObjectType;
  v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_model);
  v28 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController;
  v29 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v27
                                                              + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController), "view"));
  if (v29)
  {
    v30 = v29;
    v31 = v21;
    objc_msgSend(v29, "frame");
    v33 = v32;
    v35 = v34;

    v92 = v96;
    v93 = v97;
    v94 = v98;
    v95 = v99;
    v36 = objc_allocWithZone((Class)sub_100004B18(&qword_1000C6E40));
    sub_100017570(&v96);
    v37 = (void *)UIHostingController.init(rootView:)(&v92);
    v38 = dispatch thunk of UIHostingController.sizeThatFits(in:)(v33, v35);
    v40 = v39;

    if (qword_1000C5D80 != -1)
      swift_once(&qword_1000C5D80, sub_10003F290);
    v41 = *(_QWORD *)(qword_1000DF570 + 648);
    swift_retain(v41);
    v42 = sub_1000215CC();
    swift_release(v41);
    v43 = v33 + v40 + v42 + 8.0;
    sub_10000AA28(0, (unint64_t *)&qword_1000C6D88, UISheetPresentationControllerDetent_ptr);
    v44 = swift_allocObject(&unk_1000B37C8, 24, 7);
    *(double *)(v44 + 16) = v43;
    v45 = (void *)static UISheetPresentationControllerDetent.custom(identifier:resolver:)(0, sub_1000175D0, v44);
    swift_release(v44);
    *(_QWORD *)&v92 = 0;
    *((_QWORD *)&v92 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(*((_QWORD *)&v92 + 1));
    *(_QWORD *)&v92 = 0x203A657A6953;
    *((_QWORD *)&v92 + 1) = 0xE600000000000000;
    v46 = objc_msgSend(*(id *)(v27 + v28), "view");
    if (v46)
    {
      v47 = v46;
      objc_msgSend(v46, "frame");
      v49 = v48;
      v51 = v50;

      v52._countAndFlagsBits = CGSize.description.getter(v49, v51);
      v53 = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(v53);
      v54._countAndFlagsBits = 540945696;
      v54._object = (void *)0xE400000000000000;
      String.append(_:)(v54);
      v55._countAndFlagsBits = CGSize.description.getter(v38, v40);
      v56 = v55._object;
      String.append(_:)(v55);
      swift_bridgeObjectRelease(v56);
      v57._countAndFlagsBits = 540945696;
      v57._object = (void *)0xE400000000000000;
      String.append(_:)(v57);
      v59._countAndFlagsBits = Double.description.getter(v58, v43);
      v60 = v59._object;
      String.append(_:)(v59);
      swift_bridgeObjectRelease(v60);
      v61 = *((_QWORD *)&v92 + 1);
      v62 = sub_100053508();
      swift_bridgeObjectRetain(v61);
      v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v61);
      objc_msgSend(v62, "ulog:message:", 40, v63);
      swift_bridgeObjectRelease(v61);

      v64 = *(void **)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController);
      dispatch thunk of UIHostingController.rootView.getter(&v92);
      v65 = *((_QWORD *)&v92 + 1);
      *((_QWORD *)&v93 + 1) = &type metadata for HandoffFeatureEducationViewHeader;
      *(_QWORD *)&v94 = sub_1000175D8();
      v66 = swift_allocObject(&unk_1000B37F0, 72, 7);
      *(_QWORD *)&v92 = v66;
      v67 = v97;
      *(_OWORD *)(v66 + 16) = v96;
      *(_OWORD *)(v66 + 32) = v67;
      *(_OWORD *)(v66 + 48) = v98;
      *(_QWORD *)(v66 + 64) = v99;
      v68 = swift_getKeyPath(&unk_100081230);
      v69 = swift_getKeyPath(&unk_100081258);
      sub_100017F28((uint64_t)&v92, (uint64_t)v91, &qword_1000C6E50);
      sub_100017570(&v96);
      swift_retain(v65);
      static Published.subscript.setter(v91, v65, v68, v69);
      sub_100017AB4((uint64_t)&v92, &qword_1000C6E50);
      swift_release(v65);
      dispatch thunk of UIHostingController.rootView.getter(&v92);
      v70 = *((_QWORD *)&v92 + 1);
      v71 = swift_getKeyPath(&unk_100081278);
      v72 = swift_getKeyPath(&unk_1000812A0);
      LOBYTE(v92) = 0;
      static Published.subscript.setter(&v92, v70, v71, v72);
      dispatch thunk of UIHostingController.rootView.getter(&v92);
      v73 = *((_QWORD *)&v92 + 1);
      *((_QWORD *)&v93 + 1) = &type metadata for HandoffFeatureEducationView;
      *(_QWORD *)&v94 = sub_100017668();
      v74 = swift_allocObject(&unk_1000B3818, 64, 7);
      *(_QWORD *)(v74 + 16) = v87;
      *(_QWORD *)(v74 + 24) = v90;
      *(_BYTE *)(v74 + 32) = v88;
      *(_QWORD *)(v74 + 40) = v31;
      *(_QWORD *)(v74 + 48) = sub_100017568;
      *(_QWORD *)(v74 + 56) = v26;
      *(_QWORD *)&v92 = v74;
      *((_QWORD *)&v94 + 1) = 0x6F69746163756465;
      v95 = 0xE90000000000006ELL;
      v75 = swift_getKeyPath(&unk_1000812C0);
      v76 = swift_getKeyPath(&unk_1000812E8);
      sub_100017F28((uint64_t)&v92, (uint64_t)v91, (uint64_t *)&unk_1000C6E60);
      swift_retain(v31);
      swift_retain(v26);
      swift_retain(v73);
      swift_retain(v90);
      static Published.subscript.setter(v91, v73, v75, v76);
      sub_100017AB4((uint64_t)&v92, (uint64_t *)&unk_1000C6E60);
      swift_release(v73);
      v77 = sub_100004B18(&qword_1000C6E00);
      v78 = swift_allocObject(v77, 40, 7);
      *(_OWORD *)(v78 + 16) = xmmword_100081060;
      *(_QWORD *)(v78 + 32) = v45;
      *(_QWORD *)&v92 = v78;
      specialized Array._endMutation()(v78);
      v79 = v92;
      v80 = v45;
      sub_100010EF4(v64, 0, v79, 0, 0);
      swift_bridgeObjectRelease(v79);
      v81 = sub_10000C53C();
      v82 = sub_100053530();
      v83 = String._bridgeToObjectiveC()();
      objc_msgSend(v82, "ulog:message:", 40, v83);

      v84 = sub_1000639A8();
      v85 = sub_1000535AC();
      v86 = String._bridgeToObjectiveC()();
      objc_msgSend(v85, "ulog:message:", 40, v86);

      sub_1000160EC(0, 0);
      swift_release(v26);
      swift_release(v31);
      swift_release(v90);

      swift_release(v81);
      swift_release(v84);
      sub_1000176F0(&v96);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10000F8C8(void *a1, char a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t Strong;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  id v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  NSString v66;
  uint64_t *v67;
  _QWORD *v68;
  BOOL v69;
  char v70;
  uint64_t *v71;
  void *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Swift::String v87;
  void *object;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  void *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char v107;
  uint64_t aBlock;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  char v115[24];
  id v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v106 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for DispatchQoS(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v103 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for DispatchTime(0);
  v100 = *(_QWORD *)(v102 - 8);
  v12 = __chkstk_darwin(v102);
  v99 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v101 = (char *)&v91 - v14;
  v15 = type metadata accessor for ActivityIcon(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v91 - v19;
  a3 += 16;
  swift_beginAccess(a3, v115, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (!Strong)
    return;
  v22 = (char *)Strong;
  v98 = a1;
  if ((a2 & 1) != 0)
  {
    aBlock = 0;
    *(_QWORD *)&v109 = 0xE000000000000000;
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(37);
    v51._countAndFlagsBits = 0xD000000000000023;
    v51._object = (void *)0x8000000100090070;
    String.append(_:)(v51);
    v116 = a1;
    v52 = sub_100004B18(&qword_1000C6668);
    _print_unlocked<A, B>(_:_:)(&v116, &aBlock, v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v53 = v109;
    v54 = sub_100053508();
    swift_bridgeObjectRetain(v53);
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v53);
    objc_msgSend(v54, "ulog:message:", 60, v55);
    swift_bridgeObjectRelease(v53);

    v56 = *(_QWORD *)(*(_QWORD *)&v22[OBJC_IVAR____TtC13PCViewService13CardPresenter_state] + 16);
    sub_1000177C4(a1, 1);
    swift_retain(v56);
    sub_100074F9C((uint64_t)a1, &v116);
    v57 = (uint64_t)v116;
    v58 = v117;
    v59 = v118;
    v60 = v119;
    aBlock = (uint64_t)v116;
    v109 = v117;
    v110 = v118;
    v111 = v119;
    v112 = 32;
    v113 = 0xD000000000000017;
    v114 = 0x80000001000900A0;
    PassthroughSubject.send(_:)(&aBlock);
    swift_release(v56);
    sub_1000173AC(v57, v58, *((uint64_t *)&v58 + 1), v59, *((uint64_t *)&v59 + 1), v60, *((uint64_t *)&v60 + 1), 0x20u);
    swift_bridgeObjectRelease(0x80000001000900A0);
    sub_1000117CC(0xD000000000000017, (void *)0x80000001000900A0, 0, 0);

    sub_1000177D0(v98, 1);
    return;
  }
  v95 = v9;
  v96 = v8;
  v97 = a4;
  v94 = a1;
  dispatch thunk of UIHostingController.rootView.getter(&aBlock);
  v23 = v109;
  v24 = sub_10000C780();
  UUID.init()();
  *(_QWORD *)&v20[*(int *)(v15 + 20)] = 0;
  v25 = sub_100004B18(&qword_1000C6E70);
  *(_QWORD *)&v110 = v25;
  *((_QWORD *)&v110 + 1) = sub_10000AAFC(&qword_1000C6E78, &qword_1000C6E70, (uint64_t)&unk_100089400);
  v26 = sub_1000177DC(&aBlock);
  *v26 = 0x4032000000000000;
  v27 = type metadata accessor for ProximityCardHeaderViewModel(0);
  v28 = sub_100003E48((unint64_t *)&unk_1000C6E80, type metadata accessor for ProximityCardHeaderViewModel, (uint64_t)&unk_1000891B4);
  v26[1] = ObservedObject.init(wrappedValue:)(v24, v27, v28);
  v26[2] = v29;
  sub_100017FC4((uint64_t)v20, (uint64_t)v18, type metadata accessor for ActivityIcon);
  State.init(wrappedValue:)(v18, v15);
  sub_100018008((uint64_t)v20, type metadata accessor for ActivityIcon);
  v30 = (char *)v26 + *(int *)(v25 + 44);
  v107 = 0;
  State.init(wrappedValue:)(&v107, &type metadata for Bool);
  v31 = v117;
  *v30 = (char)v116;
  *((_QWORD *)v30 + 1) = v31;
  KeyPath = swift_getKeyPath(&unk_100081230);
  v33 = swift_getKeyPath(&unk_100081258);
  sub_100017F28((uint64_t)&aBlock, (uint64_t)&v116, &qword_1000C6E50);
  swift_retain(v23);
  static Published.subscript.setter(&v116, v23, KeyPath, v33);
  sub_100017AB4((uint64_t)&aBlock, &qword_1000C6E50);
  swift_release(v23);
  dispatch thunk of UIHostingController.rootView.getter(&aBlock);
  v34 = v109;
  v35 = swift_getKeyPath(&unk_100081278);
  v36 = swift_getKeyPath(&unk_1000812A0);
  LOBYTE(aBlock) = 1;
  static Published.subscript.setter(&aBlock, v34, v35, v36);
  v37 = v94;
  v116 = v94;
  v38 = sub_10000AA28(0, &qword_1000C6650, UIViewController_ptr);
  v39 = v37;
  State.init(wrappedValue:)(&v116, v38);
  v40 = (void *)aBlock;
  v41 = (void *)v109;
  dispatch thunk of UIHostingController.rootView.getter(&aBlock);
  v42 = v109;
  *(_QWORD *)&v110 = sub_100004B18(&qword_1000C6E90);
  v43 = sub_100017818();
  aBlock = (uint64_t)v40;
  *(_QWORD *)&v109 = v41;
  WORD4(v109) = 0;
  *((_QWORD *)&v110 + 1) = v43;
  *(_QWORD *)&v111 = 0x726F737365636361;
  *((_QWORD *)&v111 + 1) = 0xE900000000000079;
  v44 = swift_getKeyPath(&unk_1000812C0);
  v45 = swift_getKeyPath(&unk_1000812E8);
  sub_100017F28((uint64_t)&aBlock, (uint64_t)&v116, (uint64_t *)&unk_1000C6E60);
  v94 = v41;
  swift_retain(v41);
  v93 = v40;
  swift_retain(v42);
  static Published.subscript.setter(&v116, v42, v44, v45);
  sub_100017AB4((uint64_t)&aBlock, (uint64_t *)&unk_1000C6E60);
  swift_release(v42);
  v46 = OBJC_IVAR____TtC13PCViewService13CardPresenter_model;
  v47 = *(_QWORD *)(*(_QWORD *)&v22[OBJC_IVAR____TtC13PCViewService13CardPresenter_model]
                  + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus);
  v48 = swift_retain(v47);
  v49 = CurrentValueSubject.value.getter(&v116, v48);
  v50 = v116;
  if (v116 == (id)2)
  {
    CurrentValueSubject.value.getter(&aBlock, v49);
    swift_release(v47);
    v50 = (void *)aBlock;
  }
  else
  {
    swift_release(v47);
  }
  v61 = sub_100053508();
  if (v50 != (void *)1)
  {
    v66 = String._bridgeToObjectiveC()();
    objc_msgSend(v61, "ulog:message:", 40, v66);
LABEL_14:

    goto LABEL_15;
  }
  v62 = String._bridgeToObjectiveC()();
  objc_msgSend(v61, "ulog:message:", 40, v62);

  v63 = *(_QWORD *)(*(_QWORD *)&v22[v46] + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mrResponse);
  v64 = swift_retain(v63);
  v65 = CurrentValueSubject.value.getter(&v116, v64);
  v50 = v116;
  if (v116 == (id)1)
  {
    CurrentValueSubject.value.getter(&aBlock, v65);
    swift_release(v63);
    v50 = (void *)aBlock;
    if (!aBlock)
      goto LABEL_13;
  }
  else
  {
    swift_release(v63);
    if (!v50)
    {
LABEL_13:
      v61 = sub_100053508();
      v66 = String._bridgeToObjectiveC()();
      objc_msgSend(v61, "ulog:message:", 60, v66);
      goto LABEL_14;
    }
  }
LABEL_15:
  v67 = sub_10000C53C();
  sub_1000642EC(v50);
  swift_release(v67);
  v68 = (_QWORD *)(*(_QWORD *)&v22[v46] + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_initialMediaTransferStatus);
  v69 = *v68 == 1;
  v92 = v50;
  if (v69)
    v70 = 0;
  else
    v70 = (v68[1] < 3uLL) & v68[1];
  v71 = sub_10000C53C();
  sub_100064950(v70);
  swift_release(v71);
  sub_10000AA28(0, (unint64_t *)&qword_1000C6E28, OS_dispatch_queue_ptr);
  v72 = (void *)static OS_dispatch_queue.main.getter();
  v73 = v99;
  static DispatchTime.now()();
  v74 = v101;
  + infix(_:_:)(v73, 0.1);
  v100 = *(_QWORD *)(v100 + 8);
  v75 = v102;
  ((void (*)(char *, uint64_t))v100)(v73, v102);
  v76 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v76 + 16, v22);
  *((_QWORD *)&v110 + 1) = sub_1000178E0;
  *(_QWORD *)&v111 = v76;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  *(_QWORD *)&v109 = 1107296256;
  *((_QWORD *)&v109 + 1) = sub_100030320;
  *(_QWORD *)&v110 = &unk_1000B3880;
  v77 = _Block_copy(&aBlock);
  v78 = swift_release(v111);
  v79 = v103;
  static DispatchQoS.unspecified.getter(v78);
  aBlock = (uint64_t)&_swiftEmptyArrayStorage;
  v80 = sub_100003E48((unint64_t *)&qword_1000C6450, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v81 = sub_100004B18(&qword_1000C6458);
  v82 = sub_10000AAFC((unint64_t *)&qword_1000C6460, &qword_1000C6458, (uint64_t)&protocol conformance descriptor for [A]);
  v83 = v106;
  v84 = v81;
  v85 = v96;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v84, v82, v96, v80);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v74, v79, v83, v77);
  _Block_release(v77);

  (*(void (**)(char *, uint64_t))(v95 + 8))(v83, v85);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v79, v105);
  ((void (*)(char *, uint64_t))v100)(v74, v75);
  v86 = *(_QWORD *)(*(_QWORD *)&v22[OBJC_IVAR____TtC13PCViewService13CardPresenter_state] + 16);
  aBlock = 0x65646F4D64726163;
  *(_QWORD *)&v109 = 0xE90000000000003DLL;
  swift_retain(v86);
  v87._countAndFlagsBits = sub_1000378A4(v97);
  object = v87._object;
  String.append(_:)(v87);
  swift_bridgeObjectRelease(object);
  v89 = aBlock;
  v90 = v109;
  aBlock = 3;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 66;
  v113 = v89;
  v114 = v90;
  PassthroughSubject.send(_:)(&aBlock);
  swift_release(v94);

  swift_release(v86);
  sub_1000177D0(v98, 0);

  sub_1000173AC(3, 0, 0, 0, 0, 0, 0, 0x42u);
  swift_bridgeObjectRelease(v90);
}

uint64_t sub_100010428(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v4 = *(void **)(result + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController);
    v5 = swift_allocObject(&unk_1000B34A8, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v3);
    v6 = v4;
    swift_retain(v5);
    sub_100010EF4(v6, 1, 0, (void (*)(void))sub_1000178E8, v5);

    return swift_release_n(v5, 2);
  }
  return result;
}

uint64_t sub_1000104E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t *v5;
  _BYTE v6[24];

  v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v4 = (void *)result;
    v5 = sub_10000C53C();

    swift_retain(a1);
    sub_1000647DC((uint64_t)sub_1000178F0, a1);
    swift_release(v5);
    return swift_release(a1);
  }
  return result;
}

void sub_100010574(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    a2();

  }
}

uint64_t sub_1000105C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE v12[24];

  v2 = a1 + 16;
  sub_10003DC3C(0xD00000000000001FLL, (void *)0x8000000100090230, 0, a2, (uint64_t)&off_1000B3468);
  swift_beginAccess(v2, v12, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v4 = (void *)result;
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC13PCViewService13CardPresenter_state);
    swift_retain(v5);

    v6 = *(_QWORD *)(v5 + 16);
    swift_retain(v6);
    swift_release(v5);
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    v9 = 96;
    v10 = 0xD000000000000015;
    v11 = 0x8000000100090250;
    PassthroughSubject.send(_:)(v7);
    return swift_release(v6);
  }
  return result;
}

void sub_1000106BC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  v2 = v1;
  v4 = a1 & 1;
  v11 = 0;
  *(_QWORD *)&v12 = 0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000026;
  v5._object = (void *)0x800000010008FFC0;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x3D746E657665203ALL;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  v18 = v4;
  _print_unlocked<A, B>(_:_:)(&v18, &v11, &type metadata for ProximityCardHeaderViewEvent, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = v12;
  v8 = sub_100053508();
  swift_bridgeObjectRetain(v7);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v8, "ulog:message:", 40, v9);
  swift_bridgeObjectRelease(v7);

  if ((a1 & 1) != 0)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_state) + 16);
    v11 = 5;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 66;
    v16 = 0xD00000000000001CLL;
    v17 = 0x800000010008FFF0;
    swift_retain(v10);
    PassthroughSubject.send(_:)(&v11);
    swift_release(v10);
  }
  else
  {
    sub_1000117CC(0x61742065736F6C43, (void *)0xEC00000064657070, 0, 0);
  }
}

uint64_t sub_100010848()
{
  void *v0;
  id v1;
  NSString v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  NSString v10;
  id v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v1 = sub_100053508();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v3 = swift_allocObject(&unk_1000B3728, 24, 7);
  *(_QWORD *)(v3 + 16) = v0;
  v4 = v0;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0xE000000000000000);
  v5 = OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn;
  if (*(_BYTE *)(*(_QWORD *)&v4[OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn] + 24))
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if (*(_BYTE *)(*(_QWORD *)&v4[OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn] + 24))
    v7 = 0xE400000000000000;
  else
    v7 = 0xE500000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9 = sub_100053508();
  swift_bridgeObjectRetain(0x800000010008FF30);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x800000010008FF30);
  objc_msgSend(v9, "ulog:message:", 40, v10, 0xD000000000000012);
  swift_bridgeObjectRelease(0x800000010008FF30);

  if (*(_BYTE *)(*(_QWORD *)&v4[v5] + 24) == 1)
  {
    v11 = sub_100053508();
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "ulog:message:", 40, v12);

    v13 = *(_QWORD *)&v4[v5];
    swift_retain(v13);
    v14 = sub_1000634B4();
    v15 = sub_100004B18(&qword_1000C6E08);
    v16 = sub_10000AAFC(&qword_1000C6E10, &qword_1000C6E08, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v17 = Publisher.eraseToAnyPublisher()(v15, v16);
    swift_release(v13);
    swift_release(v14);
    v25 = v17;
    v18 = swift_allocObject(&unk_1000B34A8, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v4);
    v19 = (_QWORD *)swift_allocObject(&unk_1000B3750, 40, 7);
    v19[2] = v18;
    v19[3] = sub_100017518;
    v19[4] = v3;
    swift_retain(v3);
    v20 = sub_100004B18(&qword_1000C6E18);
    v21 = sub_10000AAFC(&qword_1000C6E20, &qword_1000C6E18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v22 = Publisher<>.sink(receiveValue:)(sub_10001754C, v19, v20, v21);
    swift_release(v19);
    swift_release(v25);
    v23 = *(_QWORD *)&v4[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener];
    *(_QWORD *)&v4[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener] = v22;
    swift_release(v3);
    return swift_release(v23);
  }
  else
  {
    sub_100010B74((uint64_t)v4);
    return swift_release(v3);
  }
}

uint64_t sub_100010B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AA28(0, (unint64_t *)&qword_1000C6E28, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter();
  v10 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, a1);
  aBlock[4] = sub_100017558;
  v20 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030320;
  aBlock[3] = &unk_1000B3768;
  v11 = _Block_copy(aBlock);
  v12 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v13 = sub_100003E48((unint64_t *)&qword_1000C6450, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_100004B18(&qword_1000C6458);
  v15 = sub_10000AAFC((unint64_t *)&qword_1000C6460, &qword_1000C6458, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100010D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  id v4;
  NSString v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = sub_100053508();
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "ulog:message:", 40, v5);

  }
  swift_beginAccess(v1, &v8, 0, 0);
  v6 = swift_unknownObjectWeakLoadStrong(v1);
  if (v6)
  {
    v7 = (void *)v6;
    sub_1000117CC(0x74756220656D6F48, (void *)0xEB000000006E6F74, 0, 0);

  }
}

_BYTE *sub_100010E78(_BYTE *result, uint64_t a2, uint64_t (*a3)(char *))
{
  uint64_t v4;
  char *Strong;
  uint64_t v6;
  _BYTE v7[24];

  if ((*result & 1) == 0)
  {
    v4 = a2 + 16;
    swift_beginAccess(a2 + 16, v7, 0, 0);
    Strong = (char *)swift_unknownObjectWeakLoadStrong(v4);
    if (Strong)
    {
      v6 = *(_QWORD *)&Strong[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener];
      *(_QWORD *)&Strong[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener] = 0;

      Strong = (char *)swift_release(v6);
    }
    return (_BYTE *)a3(Strong);
  }
  return result;
}

uint64_t sub_100010EF4(void *a1, char a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  char *v5;
  char *v6;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t result;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)();
  void *v37;
  uint64_t v38;
  char *v39;
  id v40;
  id v41;
  id v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t KeyPath;
  uint64_t v48;
  void (**v49)(void);
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t ObjectType;
  uint64_t v61;
  void **aBlock;
  unint64_t v63;
  uint64_t (*v64)(uint64_t);
  void *v65;
  void *v66;
  uint64_t v67;

  v6 = v5;
  ObjectType = swift_getObjectType(v5);
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(0xE000000000000000);
  aBlock = (void **)0xD000000000000040;
  v63 = 0x800000010008FE50;
  v11 = objc_msgSend(a1, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 0x746E65746564202CLL;
  v16._object = (void *)0xEA00000000003D73;
  String.append(_:)(v16);
  if (a3)
  {
    v61 = a3;
    swift_bridgeObjectRetain(a3);
    v17 = sub_100004B18(&qword_1000C6DF8);
    v18 = String.init<A>(describing:)(&v61, v17);
    v20 = v19;
  }
  else
  {
    v20 = 0xE300000000000000;
    v18 = 7104878;
  }
  v21 = v20;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease(v20);
  v22 = v63;
  v23 = sub_100053508();
  swift_bridgeObjectRetain(v22);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  v25 = &off_1000C4000;
  objc_msgSend(v23, "ulog:message:", 40, v24);
  swift_bridgeObjectRelease(v22);

  v26 = *(_QWORD *)&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter_model];
  v27 = *(_QWORD *)(v26 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__isActive);
  v28 = swift_retain(v27);
  v29 = CurrentValueSubject.value.getter(&v61, v28);
  v30 = v61;
  if (v61 == 2)
  {
    CurrentValueSubject.value.getter(&aBlock, v29);
    result = swift_release(v27);
    if (aBlock != 1)
      return result;
  }
  else
  {
    result = swift_release(v27);
    if ((v30 & 1) == 0)
      return result;
  }
  v32 = objc_msgSend(a1, "sheetPresentationController");
  if (v32)
  {
    v33 = v32;
    v58 = a5;
    v34 = swift_allocObject(&unk_1000B36B0, 48, 7);
    *(_QWORD *)(v34 + 16) = v6;
    *(_QWORD *)(v34 + 24) = v33;
    *(_BYTE *)(v34 + 32) = a2 & 1;
    *(_QWORD *)(v34 + 40) = a3;
    v35 = swift_allocObject(&unk_1000B36D8, 32, 7);
    v36 = sub_1000174B4;
    *(_QWORD *)(v35 + 16) = sub_1000174B4;
    *(_QWORD *)(v35 + 24) = v34;
    v66 = sub_1000174D4;
    v67 = v35;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = sub_1000115A4;
    v65 = &unk_1000B36F0;
    v37 = _Block_copy(&aBlock);
    v38 = v67;
    swift_bridgeObjectRetain(a3);
    v39 = v6;
    v40 = v33;
    swift_retain(v35);
    swift_release(v38);
    objc_msgSend(v40, "animateChanges:", v37);

    _Block_release(v37);
    LOBYTE(v38) = swift_isEscapingClosureAtFileLocation(v35, "", 93, 513, 13, 1);
    result = swift_release(v35);
    if ((v38 & 1) != 0)
    {
      __break(1u);
      return result;
    }
    a5 = v58;
    v25 = &off_1000C4000;
  }
  else
  {
    v36 = 0;
    v34 = 0;
  }
  v41 = objc_msgSend(a1, "presentingViewController", v58);

  if (v41)
  {
    v42 = sub_100053508();
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v42, v25[444], 40, v43);

    if (a4)
      a4();
  }
  else
  {
    v44 = *(_QWORD *)&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn];
    *(_BYTE *)(v44 + 24) = 1;
    swift_retain(v44);
    v45 = sub_1000634B4();
    LOBYTE(aBlock) = *(_BYTE *)(v44 + 24);
    CurrentValueSubject.send(_:)(&aBlock);
    swift_release(v44);
    swift_release(v45);
    v46 = sub_10000C780();
    KeyPath = swift_getKeyPath(&unk_1000811A0);
    v48 = swift_getKeyPath(&unk_1000811C8);
    LOBYTE(aBlock) = 0;
    static Published.subscript.setter(&aBlock, v46, KeyPath, v48);
    v49 = (void (**)(void))&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock];
    v50 = *(_QWORD *)&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock];
    v51 = *(_QWORD *)&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock + 8];
    *v49 = a4;
    v49[1] = (void (*)(void))a5;
    sub_100007A80((uint64_t)a4, a5);
    sub_100007A90(v50, v51);
    v52 = *(void **)(v26 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController);
    v53 = swift_allocObject(&unk_1000B34A8, 24, 7);
    swift_unknownObjectWeakInit(v53 + 16, v6);
    v54 = swift_allocObject(&unk_1000B3660, 32, 7);
    *(_QWORD *)(v54 + 16) = v53;
    *(_QWORD *)(v54 + 24) = ObjectType;
    v66 = sub_100017478;
    v67 = v54;
    aBlock = _NSConcreteStackBlock;
    v63 = 1107296256;
    v64 = (uint64_t (*)(uint64_t))sub_100030320;
    v65 = &unk_1000B3678;
    v55 = _Block_copy(&aBlock);
    v56 = v67;
    v57 = v52;
    swift_release(v56);
    objc_msgSend(v57, "presentViewController:animated:completion:", a1, 1, v55);
    _Block_release(v55);

  }
  return sub_100007A90((uint64_t)v36, v34);
}

void sub_100011450(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;

  v7 = sub_100053508();
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "ulog:message:", 40, v8);

  objc_msgSend(a2, "setPrefersGrabberVisible:", a3 & 1);
  if (a4)
  {
    v9 = a4;
  }
  else
  {
    v10 = sub_100004B18(&qword_1000C6E00);
    v9 = swift_allocObject(v10, 40, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100081060;
    *(_QWORD *)(v9 + 32) = objc_msgSend((id)objc_opt_self(UISheetPresentationControllerDetent), "largeDetent");
    specialized Array._endMutation()();
  }
  sub_10000AA28(0, (unint64_t *)&qword_1000C6D88, UISheetPresentationControllerDetent_ptr);
  swift_bridgeObjectRetain(a4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  objc_msgSend(a2, "setDetents:", isa);

}

uint64_t sub_1000115A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_1000115C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE v30[24];

  v2 = a1 + 16;
  sub_10003DC3C(0xD000000000000019, (void *)0x800000010008FEF0, 0, a2, (uint64_t)&off_1000B3468);
  swift_beginAccess(v2, v30, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC13PCViewService13CardPresenter_state);
    swift_retain(v5);

    v6 = *(_QWORD *)(v5 + 16);
    swift_retain(v6);
    swift_release(v5);
    v23 = 1;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0x80;
    v28 = 0x65746E6573657270;
    v29 = 0xE900000000000064;
    PassthroughSubject.send(_:)(&v23);
    swift_release(v6);
  }
  swift_beginAccess(v2, &v23, 0, 0);
  v7 = swift_unknownObjectWeakLoadStrong(v2);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn);
    *(_BYTE *)(v9 + 24) = 0;
    swift_retain(v9);
    v10 = sub_1000634B4();
    v22[0] = *(_BYTE *)(v9 + 24);
    CurrentValueSubject.send(_:)(v22);

    swift_release(v9);
    swift_release(v10);
  }
  swift_beginAccess(v2, v22, 0, 0);
  v11 = swift_unknownObjectWeakLoadStrong(v2);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = sub_10000C780();

    KeyPath = swift_getKeyPath(&unk_1000811A0);
    v15 = swift_getKeyPath(&unk_1000811C8);
    v21[0] = 1;
    static Published.subscript.setter(v21, v13, KeyPath, v15);
  }
  swift_beginAccess(v2, v21, 0, 0);
  v16 = swift_unknownObjectWeakLoadStrong(v2);
  if (v16)
  {
    v17 = (void *)v16;
    v18 = (_QWORD *)(v16 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    v19 = *(_QWORD *)(v16 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    v20 = v18[1];
    *v18 = 0;
    v18[1] = 0;
    sub_100007A90(v19, v20);

  }
}

void sub_1000117CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  NSString v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  NSString v27;
  void **v28;
  unint64_t v29;
  uint64_t (*v30)();
  void *v31;
  uint64_t (*v32)();
  _QWORD *v33;

  v5 = v4;
  ObjectType = swift_getObjectType(v4);
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(0xE000000000000000);
  v28 = (void **)0xD000000000000024;
  v29 = 0x800000010008FDE0;
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x656C706D6F63202CLL;
  v12._object = (void *)0xED00003D6E6F6974;
  String.append(_:)(v12);
  if (a3)
    v13 = 0x3E656D6F733CLL;
  else
    v13 = 7104878;
  if (a3)
    v14 = 0xE600000000000000;
  else
    v14 = 0xE300000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v14);
  v16 = sub_100053508();
  swift_bridgeObjectRetain(v29);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  objc_msgSend(v16, "ulog:message:", 40, v17, v28);
  swift_bridgeObjectRelease(v29);

  v18 = *(void **)(v5 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController);
  v19 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v5);
  v20 = (_QWORD *)swift_allocObject(&unk_1000B3610, 64, 7);
  v20[2] = v19;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  v20[7] = ObjectType;
  v32 = sub_10001739C;
  v33 = v20;
  v28 = _NSConcreteStackBlock;
  v29 = 1107296256;
  v30 = sub_100030320;
  v31 = &unk_1000B3628;
  v21 = _Block_copy(&v28);
  v22 = v33;
  swift_bridgeObjectRetain(a2);
  sub_100007A80(a3, a4);
  swift_release(v22);
  objc_msgSend(v18, "dismissViewControllerAnimated:completion:", 1, v21);
  _Block_release(v21);
  v23 = objc_msgSend(v18, "transitionCoordinator");
  if (v23)
  {
    v24 = v23;
    sub_100011C64(v23);
    swift_unknownObjectRelease(v24, v25);
  }
  else
  {
    v26 = sub_100053508();
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "ulog:message:", 60, v27);

  }
}

uint64_t sub_100011A7C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t Strong;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _BYTE v22[24];
  _QWORD v23[2];
  __int128 v24;
  _BYTE v25[25];
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];

  v9 = a1 + 16;
  sub_10003DC3C(0xD000000000000030, (void *)0x800000010008FE10, 0, a6, (uint64_t)&off_1000B3468);
  swift_beginAccess(v9, v28, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v11 = (void *)Strong;
    v12 = *(_QWORD *)(Strong + OBJC_IVAR____TtC13PCViewService13CardPresenter_state);
    swift_retain(v12);

    v13 = *(_QWORD *)(v12 + 16);
    swift_retain(v13);
    swift_release(v12);
    v23[0] = a2;
    v23[1] = a3;
    v24 = 0u;
    memset(v25, 0, sizeof(v25));
    v26 = a2;
    v27 = a3;
    swift_bridgeObjectRetain_n(a3, 2);
    PassthroughSubject.send(_:)(v23);
    swift_release(v13);
    sub_1000173AC(a2, a3, 0, 0, 0, 0, 0, 0);
    swift_bridgeObjectRelease(a3);
  }
  swift_beginAccess(v9, v23, 0, 0);
  v14 = swift_unknownObjectWeakLoadStrong(v9);
  if (v14)
  {
    v15 = (void *)v14;
    v16 = *(id *)(v14 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView);

    objc_msgSend(v16, "removeFromSuperview");
  }
  if (a4)
    a4();
  swift_beginAccess(v9, v22, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v9);
  if (result)
  {
    v18 = (void *)result;
    v19 = *(_QWORD *)(result + OBJC_IVAR____TtC13PCViewService13CardPresenter_state);
    swift_retain(v19);

    v20 = *(_QWORD *)(v19 + 24);
    swift_retain(v20);
    swift_release(v19);
    v21[0] = a2;
    v21[1] = a3;
    PassthroughSubject.send(_:)(v21);
    return swift_release(v20);
  }
  return result;
}

void sub_100011C64(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void **aBlock;
  unint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  aBlock = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v5._object = (void *)0x800000010008FBF0;
  v5._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD000000000000018;
  v6._object = (void *)0x800000010008FC10;
  String.append(_:)(v6);
  v22 = a1;
  v7 = sub_100004B18(&qword_1000C6DF0);
  _print_unlocked<A, B>(_:_:)(&v22, &aBlock, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8 = v17;
  v9 = sub_100053508();
  swift_bridgeObjectRetain(v8);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v9, "ulog:message:", 40, v10);
  swift_bridgeObjectRelease(v8);

  v11 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v2);
  v12 = swift_allocObject(&unk_1000B34D0, 32, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = ObjectType;
  v20 = sub_1000172E4;
  v21 = v12;
  aBlock = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000129B4;
  v19 = &unk_1000B34E8;
  v13 = _Block_copy(&aBlock);
  swift_release(v21);
  v14 = swift_allocObject(&unk_1000B3520, 24, 7);
  *(_QWORD *)(v14 + 16) = ObjectType;
  v20 = sub_100017314;
  v21 = v14;
  aBlock = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000129B4;
  v19 = &unk_1000B3538;
  v15 = _Block_copy(&aBlock);
  swift_release(v21);
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v13, v15);
  _Block_release(v15);
  _Block_release(v13);
}

void sub_100011E90()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  unint64_t v7;

  v6 = 0;
  v7 = 0xE000000000000000;
  v0._object = (void *)0x800000010008FDC0;
  v0._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x3D746E657665203ALL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)(v2, &v6, &type metadata for CardViewEvent, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3 = v7;
  v4 = sub_100053508();
  swift_bridgeObjectRetain(v3);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v4, "ulog:message:", 40, v5, v6);
  swift_bridgeObjectRelease(v3);

  sub_1000117CC(0x61742065736F6C43, (void *)0xEC00000064657070, 0, 0);
}

void sub_100011FA0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  id v17;
  NSString v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  NSString v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[2];
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[2];

  v4 = v3;
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  v8._countAndFlagsBits = 0xD000000000000031;
  v8._object = (void *)0x800000010008FB50;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x3D746E657665203ALL;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  v34[0] = a2;
  v34[1] = a3;
  _print_unlocked<A, B>(_:_:)(v34, &v29, &type metadata for AdaptivePresentationControllerEvent, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 0x6F72746E6F63202CLL;
  v10._object = (void *)0xED00003D72656C6CLL;
  String.append(_:)(v10);
  v11 = objc_msgSend(a1, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16 = *((_QWORD *)&v29 + 1);
  v17 = sub_100053508();
  swift_bridgeObjectRetain(v16);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v17, "ulog:message:", 40, v18);
  swift_bridgeObjectRelease(v16);

  switch(a3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      return;
    case 2:
      v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13PCViewService13CardPresenter_state);
      v22 = *(_QWORD *)(v21 + 16);
      *(_QWORD *)&v29 = 0xD000000000000010;
      *((_QWORD *)&v29 + 1) = 0x800000010008FBD0;
      v30 = 0u;
      memset(v31, 0, 25);
      v32 = 0xD000000000000010;
      v33 = 0x800000010008FBD0;
      swift_retain(v22);
      PassthroughSubject.send(_:)(&v29);
      swift_release(v22);
      v23 = *(_QWORD *)(v21 + 24);
      *(_QWORD *)&v29 = 0xD000000000000010;
      *((_QWORD *)&v29 + 1) = 0x800000010008FBD0;
      swift_retain(v23);
      PassthroughSubject.send(_:)(&v29);
      swift_release(v23);
      break;
    case 3:
      v24 = objc_msgSend(a1, "presentedViewController");
      v25 = objc_msgSend(v24, "transitionCoordinator");

      if (v25)
      {
        sub_100011C64(v25);
        swift_unknownObjectRelease(v25, v26);
      }
      else
      {
LABEL_6:
        v27 = sub_100053508();
        v28 = String._bridgeToObjectiveC()();
        objc_msgSend(v27, "ulog:message:", 60, v28);

      }
      break;
    default:
      v19 = (void *)swift_unknownObjectRetain(a3);
      sub_100012300(v19);
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC13PCViewService13CardPresenter_state) + 16);
      v30 = 0u;
      memset(v31, 0, 24);
      v29 = 0u;
      BYTE8(v31[1]) = 0x80;
      v32 = 0x69746E6573657270;
      v33 = 0xEA0000000000676ELL;
      swift_retain(v20);
      PassthroughSubject.send(_:)(&v29);
      swift_release(v20);
      sub_1000172A8(a2, a3);
      break;
  }
}

void sub_100012300(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void **aBlock;
  unint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  void *v22;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  aBlock = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v5._countAndFlagsBits = 0xD00000000000001ALL;
  v5._object = (void *)0x800000010008FD30;
  String.append(_:)(v5);
  v6._object = (void *)0x800000010008FC10;
  v6._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v6);
  v22 = a1;
  v7 = sub_100004B18(&qword_1000C6DF0);
  _print_unlocked<A, B>(_:_:)(&v22, &aBlock, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8 = v17;
  v9 = sub_100053508();
  swift_bridgeObjectRetain(v8);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v9, "ulog:message:", 40, v10);
  swift_bridgeObjectRelease(v8);

  v11 = swift_allocObject(&unk_1000B34A8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v2);
  v12 = swift_allocObject(&unk_1000B3570, 32, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = ObjectType;
  v20 = sub_100017340;
  v21 = v12;
  aBlock = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000129B4;
  v19 = &unk_1000B3588;
  v13 = _Block_copy(&aBlock);
  swift_release(v21);
  v14 = swift_allocObject(&unk_1000B35C0, 24, 7);
  *(_QWORD *)(v14 + 16) = ObjectType;
  v20 = sub_100017358;
  v21 = v14;
  aBlock = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_1000129B4;
  v19 = &unk_1000B35D8;
  v15 = _Block_copy(&aBlock);
  swift_release(v21);
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v13, v15);
  _Block_release(v15);
  _Block_release(v13);
}

uint64_t sub_100012558(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[15];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ActivityDisplayContext(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = "\b";
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[9] = "\b";
    v4[10] = "\b";
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = &unk_100081170;
    v4[13] = "\b";
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 15, v4, a1 + 80);
  }
  return result;
}

void sub_100012610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v3 = a2 + 16;
  sub_10003DC3C(0xD00000000000001DLL, (void *)0x800000010008FDA0, 0, a3, (uint64_t)&off_1000B3468);
  swift_beginAccess(v3, v17, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_100012738(1);

  }
  swift_beginAccess(v3, v16, 0, 0);
  v6 = swift_unknownObjectWeakLoadStrong(v3);
  if (v6)
  {
    v7 = (void *)v6;
    v9 = *(void (**)(void))(v6 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock + 8);
    sub_100007A80((uint64_t)v9, v8);

    if (v9)
    {
      v9();
      sub_100007A90((uint64_t)v9, v8);
    }
  }
  swift_beginAccess(v3, v15, 0, 0);
  v10 = swift_unknownObjectWeakLoadStrong(v3);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = (_QWORD *)(v10 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    v13 = *(_QWORD *)(v10 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    v14 = v12[1];
    *v12 = 0;
    v12[1] = 0;
    sub_100007A90(v13, v14);

  }
}

void sub_100012738(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  id v8;
  NSString v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char v18;
  unint64_t v19;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v18 = 0;
  v19 = 0xE000000000000000;
  v5._object = (void *)0x800000010008FCE0;
  v5._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x3D6574617473203ALL;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  v17 = a1 & 1;
  _print_unlocked<A, B>(_:_:)(&v17, (char *)&v17 + 1, &type metadata for CardPresenter.PresentationState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = v19;
  v8 = sub_100053508();
  swift_bridgeObjectRetain(v7);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v8, "ulog:message:", 40, v9);
  swift_bridgeObjectRelease(v7);

  if ((a1 & 1) == 0)
  {
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView), "setEffect:", 0);
    return;
  }
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v10 = *(_QWORD *)(qword_1000DF570 + 616);
  swift_retain(v10);
  v11 = sub_1000220F4();
  swift_release(v10);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(qword_1000DF570 + 624);
    swift_retain(v12);
    v13 = sub_100022118();
    swift_release(v12);
    v14 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", v13);
LABEL_8:
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView), "setEffect:", v14);

    return;
  }
  v15 = *(_QWORD *)(qword_1000DF570 + 632);
  swift_retain(v15);
  v16 = sub_1000215CC();
  swift_release(v15);
  v14 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithBlurRadius:", v16);
  if (v14)
    goto LABEL_8;
  sub_10003DE94(60, 0xD000000000000021, (void *)0x800000010008FD00, 0, ObjectType, (uint64_t)&off_1000B3468);
}

uint64_t sub_1000129B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2, v6);
}

void sub_1000129FC(uint64_t a1, uint64_t a2)
{
  sub_10003DC3C(0xD00000000000001ALL, (void *)0x800000010008FD50, 0, a2, (uint64_t)&off_1000B3468);
  sub_10003DC3C(0xD000000000000029, (void *)0x800000010008FD70, 0, a2, (uint64_t)&off_1000B3468);
}

void sub_100012A7C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  Swift::String v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  void *v15;

  v5 = a2 + 16;
  v14 = 0;
  v15 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v6._object = (void *)0x800000010008FCA0;
  v6._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v6);
  v7 = objc_msgSend(a1, "initiallyInteractive");
  v8 = v7 == 0;
  if (v7)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (v8)
    v10 = 0xE500000000000000;
  else
    v10 = 0xE400000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  sub_10003DC3C(v14, v15, 0, a3, (uint64_t)&off_1000B3468);
  swift_bridgeObjectRelease(v15);
  swift_beginAccess(v5, &v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v13 = (void *)Strong;
    sub_100012738(0);

  }
}

uint64_t sub_100012B90(void *a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v4 = objc_msgSend(a1, "isCancelled");
  v5 = v4 == 0;
  if (v4)
    v6 = 1702195828;
  else
    v6 = 0x65736C6166;
  if (v5)
    v7 = 0xE500000000000000;
  else
    v7 = 0xE400000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  sub_10003DC3C(0xD000000000000025, (void *)0x800000010008FC70, 0, a2, (uint64_t)&off_1000B3468);
  return swift_bridgeObjectRelease(0x800000010008FC70);
}

unint64_t sub_100012C68(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t ObjectType;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t result;
  id v25;
  void *v26;
  id v27;
  id v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  ObjectType = swift_getObjectType(v2);
  v6 = *(_QWORD *)(qword_1000DF528 + (swift_isaMask & *v2) + 16);
  v7 = objc_allocWithZone((Class)type metadata accessor for AdaptivePresentationControllerDelegate());
  v8 = v2;
  *(_QWORD *)((char *)v2 + v6) = objc_msgSend(v7, "init");

  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, ObjectType, (uint64_t)&off_1000B4248);
  v31 = a1;
  v32 = a2;
  swift_retain(a2);
  v9 = (id)UIHostingController.init(rootView:)(&v31);
  v10 = objc_msgSend(v9, "presentationController", v31, v32);
  if (!v10)
    goto LABEL_15;
  v11 = v10;
  v12 = objc_opt_self(UISheetPresentationController);
  v13 = swift_dynamicCastObjCClass(v11, v12);
  if (!v13)
  {

LABEL_15:
    v28 = sub_10005351C();
    v29 = String._bridgeToObjectiveC()();
    objc_msgSend(v28, "ulog:message:", 60, v29);
    swift_release(a2);

    return (unint64_t)v9;
  }
  v14 = (void *)v13;
  v15 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v15, "displayCornerRadius");
  v17 = v16;

  UISheetPresentationController.preferredCornerRadius.setter(*(_QWORD *)&v17, 0);
  objc_msgSend(v14, "_setCornerRadiusForPresentationAndDismissal:", v17);
  objc_msgSend(v14, "setDelegate:", *(_QWORD *)((char *)v9 + *(_QWORD *)(qword_1000DF528 + (swift_isaMask & *v9) + 16)));
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v18 = *(_QWORD *)(qword_1000DF570 + 640);
  swift_retain(v18);
  v19 = sub_100020AA8();
  swift_release(v18);
  if ((v19 & 1) == 0)
  {

    swift_release(a2);
    return (unint64_t)v9;
  }
  v20 = objc_msgSend(v14, "detents");
  v21 = sub_10000AA28(0, (unint64_t *)&qword_1000C6D88, UISheetPresentationControllerDetent_ptr);
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

  if (!((unint64_t)v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_8;
LABEL_21:

    swift_release(a2);
    swift_bridgeObjectRelease(v22);
    return (unint64_t)v9;
  }
  if (v22 < 0)
    v30 = v22;
  else
    v30 = v22 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v22);
  v23 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v22);
  if (!v23)
    goto LABEL_21;
LABEL_8:
  result = v23 - 1;
  if (__OFSUB__(v23, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((v22 & 0xC000000000000001) != 0)
  {
LABEL_24:
    v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v22);
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v25 = *(id *)(v22 + 8 * result + 32);
LABEL_13:
    v26 = v25;
    swift_bridgeObjectRelease(v22);
    v27 = objc_msgSend(v26, "identifier");
    objc_msgSend(v14, "setLargestUndimmedDetentIdentifier:", v27);
    swift_release(a2);

    return (unint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t *sub_100013028(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Swift::String v45;
  void *v46;
  void *v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  id v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD v62[2];

  v7 = v6;
  v55 = *v7;
  swift_bridgeObjectRelease(a6);
  v12 = (char *)v7 + *(_QWORD *)(*v7 + 104);
  v13 = sub_100004B18(&qword_1000C70A0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = *(_QWORD *)(*v7 + 112);
  *(uint64_t *)((char *)v7 + v14) = 0;
  v15 = *(_QWORD *)(*v7 + 120);
  *((_BYTE *)v7 + v15) = 2;
  v16 = (uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 128));
  *v16 = 0;
  v16[1] = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 136)) = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 144)) = 0;
  if (!a3)
    goto LABEL_29;
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v17 = qword_1000DF658;
  if (!qword_1000DF658)
  {
    swift_bridgeObjectRelease(a3);
    goto LABEL_29;
  }
  v53 = a1;
  v18 = a4 & 1;
  *(_QWORD *)&v56 = 0;
  *((_QWORD *)&v56 + 1) = 0xE000000000000000;
  v54 = (id)qword_1000DF658;
  _StringGuts.grow(_:)(32);
  v62[0] = v56;
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  v19._object = (void *)0x800000010008FAA0;
  String.append(_:)(v19);
  *(_QWORD *)&v56 = a2;
  *((_QWORD *)&v56 + 1) = a3;
  LOBYTE(v57) = a4 & 1;
  v20 = sub_100004B18((uint64_t *)&unk_1000C6D40);
  _print_unlocked<A, B>(_:_:)(&v56, v62, v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v21 = *((_QWORD *)&v62[0] + 1);
  sub_10003DC3C(*(uint64_t *)&v62[0], *((void **)&v62[0] + 1), 0, v55, (uint64_t)&off_1000B6848);
  swift_bridgeObjectRelease(v21);
  v22 = v16[1];
  *v16 = a2;
  v16[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)v7 + v15) = v18;
  v23 = *(void **)((char *)v7 + v14);
  *(uint64_t *)((char *)v7 + v14) = v17;
  v24 = v54;

  swift_bridgeObjectRetain(a3);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v26 = objc_msgSend(v24, "valueForKey:", v25);

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)(&v56);
    swift_unknownObjectRelease(v26, v27);
  }
  else
  {
    v56 = 0u;
    v57 = 0u;
  }
  sub_100018064((uint64_t)&v56, (uint64_t)v62, &qword_1000C6678);
  swift_bridgeObjectRelease(a3);
  if (!v18)
  {
    sub_100017F28((uint64_t)v62, (uint64_t)&v56, &qword_1000C6678);
    v28 = &qword_1000C6678;
    goto LABEL_11;
  }
  v31 = sub_100016E14((uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Bool, (uint64_t)&protocol descriptor for Decodable, (uint64_t)&protocol descriptor for Encodable);
  if (v31)
  {
    v34 = v31;
    v35 = v32;
    v36 = v33;
    sub_100017F28((uint64_t)v62, (uint64_t)&v56, &qword_1000C6678);
    if (*((_QWORD *)&v57 + 1))
    {
      if ((swift_dynamicCast(&v60, &v56, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v37 = v60;
        v38 = v61;
        *((_QWORD *)&v57 + 1) = v34;
        v58 = v35;
        v59 = v36;
        sub_1000177DC(&v56);
        sub_10004A81C(v37, v38, v34, v35);
        sub_10000ABA8(v37, v38);
        v28 = &qword_1000C6D58;
LABEL_11:
        v29 = sub_100004B18(v28);
        if (swift_dynamicCast(&v60, &v56, v29, &type metadata for Bool, 6))
          v30 = v60;
        else
          v30 = 2;
        goto LABEL_19;
      }
    }
    else
    {
      sub_100017AB4((uint64_t)&v56, &qword_1000C6678);
    }
    a1 = v53;
    sub_10003DE94(60, 0xD00000000000001ALL, (void *)0x800000010008FAE0, 0, v55, (uint64_t)&off_1000B6848);
    v30 = 2;
    goto LABEL_22;
  }
  sub_10003DE94(60, 0xD000000000000014, (void *)0x800000010008FAC0, 0, v55, (uint64_t)&off_1000B6848);
  v30 = 2;
LABEL_19:
  a1 = v53;
LABEL_22:
  v39 = 7104878;
  *(_QWORD *)&v56 = 0x206C616974696E49;
  *((_QWORD *)&v56 + 1) = 0xE800000000000000;
  v40 = v16[1];
  if (v40)
  {
    v60 = *v16;
    v61 = v40;
    swift_bridgeObjectRetain(v40);
    v41 = String.init<A>(describing:)(&v60, &type metadata for String);
    v43 = v42;
  }
  else
  {
    v43 = 0xE300000000000000;
    v41 = 7104878;
  }
  v44 = v43;
  String.append(_:)(*(Swift::String *)&v41);
  swift_bridgeObjectRelease(v43);
  v45._countAndFlagsBits = 8250;
  v45._object = (void *)0xE200000000000000;
  String.append(_:)(v45);
  if (v30 == 2)
  {
    v46 = (void *)0xE300000000000000;
  }
  else
  {
    a1 = v30 & 1;
    LOBYTE(v60) = v30 & 1;
    v39 = String.init<A>(describing:)(&v60, &type metadata for Bool);
    v46 = v47;
  }
  v48._countAndFlagsBits = v39;
  v48._object = v46;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v46);
  v49 = *((_QWORD *)&v56 + 1);
  sub_10003DC3C(v56, *((void **)&v56 + 1), 0, v55, (uint64_t)&off_1000B6848);

  swift_bridgeObjectRelease(v49);
  sub_100017AB4((uint64_t)v62, &qword_1000C6678);
LABEL_29:
  LOBYTE(v56) = a1 & 1;
  v50 = sub_100004B18(&qword_1000C6E08);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  v7[2] = CurrentValueSubject.init(_:)(&v56);
  LOBYTE(v56) = 2;
  v51 = sub_100004B18(&qword_1000C70A8);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v7[3] = CurrentValueSubject.init(_:)(&v56);
  return v7;
}

uint64_t *sub_100013618(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v54;
  uint64_t v55;
  Swift::String v56;
  void *object;
  uint64_t v58;
  id v59;
  void *v60;
  id v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _OWORD v69[2];

  v7 = v6;
  v62 = *v7;
  swift_bridgeObjectRelease(a6);
  v12 = (char *)v7 + *(_QWORD *)(*v7 + 104);
  v13 = sub_100004B18(&qword_1000C6D28);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = *(_QWORD *)(*v7 + 112);
  *(uint64_t *)((char *)v7 + v14) = 0;
  v15 = *(_QWORD *)(*v7 + 120);
  *((_BYTE *)v7 + v15) = 2;
  v16 = (uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 128));
  *v16 = 0;
  v16[1] = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 136)) = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 144)) = 0;
  if (!a3)
    goto LABEL_27;
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v17 = qword_1000DF658;
  if (!qword_1000DF658)
  {
    swift_bridgeObjectRelease(a3);
    goto LABEL_27;
  }
  v60 = a1;
  v18 = a4 & 1;
  *(_QWORD *)&v63 = 0;
  *((_QWORD *)&v63 + 1) = 0xE000000000000000;
  v61 = (id)qword_1000DF658;
  _StringGuts.grow(_:)(32);
  v69[0] = v63;
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  v19._object = (void *)0x800000010008FAA0;
  String.append(_:)(v19);
  *(_QWORD *)&v63 = a2;
  *((_QWORD *)&v63 + 1) = a3;
  LOBYTE(v64) = a4 & 1;
  v20 = sub_100004B18((uint64_t *)&unk_1000C6D40);
  _print_unlocked<A, B>(_:_:)(&v63, v69, v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v21 = *((_QWORD *)&v69[0] + 1);
  sub_10003DC3C(*(uint64_t *)&v69[0], *((void **)&v69[0] + 1), 0, v62, (uint64_t)&off_1000B6848);
  swift_bridgeObjectRelease(v21);
  v22 = v16[1];
  *v16 = a2;
  v16[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)v7 + v15) = v18;
  v23 = *(void **)((char *)v7 + v14);
  *(uint64_t *)((char *)v7 + v14) = v17;
  v24 = v61;

  swift_bridgeObjectRetain(a3);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v26 = objc_msgSend(v24, "valueForKey:", v25);

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)(&v63);
    swift_unknownObjectRelease(v26, v27);
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
  }
  sub_100018064((uint64_t)&v63, (uint64_t)v69, &qword_1000C6678);
  swift_bridgeObjectRelease(a3);
  if (!v18)
  {
    sub_100017F28((uint64_t)v69, (uint64_t)&v63, &qword_1000C6678);
    v28 = sub_100004B18(&qword_1000C6678);
    v29 = sub_100004B18(&qword_1000C6D50);
    v30 = v28;
    goto LABEL_11;
  }
  v32 = sub_100004B18(&qword_1000C6D50);
  v33 = sub_100016E14(v32, v32, (uint64_t)&protocol descriptor for Decodable, (uint64_t)&protocol descriptor for Encodable);
  if (v33)
  {
    v36 = v33;
    v37 = v34;
    v38 = v35;
    sub_100017F28((uint64_t)v69, (uint64_t)&v63, &qword_1000C6678);
    if (*((_QWORD *)&v64 + 1))
    {
      if ((swift_dynamicCast(&v67, &v63, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v40 = v67;
        v39 = v68;
        *((_QWORD *)&v64 + 1) = v36;
        v65 = v37;
        v66 = v38;
        sub_1000177DC(&v63);
        sub_10004A81C(v40, v39, v36, v37);
        sub_10000ABA8(v40, v39);
        v30 = sub_100004B18(&qword_1000C6D58);
        v29 = v32;
LABEL_11:
        if (swift_dynamicCast(&v67, &v63, v30, v29, 6))
          v31 = v67;
        else
          v31 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      sub_100017AB4((uint64_t)&v63, &qword_1000C6678);
    }
    a1 = v60;
    sub_10003DE94(60, 0xD00000000000001ALL, (void *)0x800000010008FAE0, 0, v62, (uint64_t)&off_1000B6848);
    v31 = 1;
    goto LABEL_22;
  }
  sub_10003DE94(60, 0xD000000000000014, (void *)0x800000010008FAC0, 0, v62, (uint64_t)&off_1000B6848);
  v31 = 1;
LABEL_19:
  a1 = v60;
LABEL_22:
  *(_QWORD *)&v63 = 0x206C616974696E49;
  *((_QWORD *)&v63 + 1) = 0xE800000000000000;
  v41 = v16[1];
  if (v41)
  {
    v67 = *v16;
    v68 = v41;
    swift_bridgeObjectRetain(v41);
    v42 = String.init<A>(describing:)(&v67, &type metadata for String);
    v44 = v43;
  }
  else
  {
    v44 = 0xE300000000000000;
    v42 = 7104878;
  }
  v45 = v44;
  String.append(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease(v44);
  v46._countAndFlagsBits = 8250;
  v46._object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  if (v31 != 1)
  {
    v67 = v31;
    v54 = (id)v31;
    v55 = sub_100004B18(&qword_1000C6D50);
    v56._countAndFlagsBits = String.init<A>(describing:)(&v67, v55);
    object = v56._object;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(object);
    v58 = *((_QWORD *)&v63 + 1);
    sub_10003DC3C(v63, *((void **)&v63 + 1), 0, v62, (uint64_t)&off_1000B6848);

    swift_bridgeObjectRelease(v58);
    sub_100017AB4((uint64_t)v69, &qword_1000C6678);
    v59 = v54;
    v49 = a1;
    a1 = (void *)v31;
    goto LABEL_28;
  }
  v47._countAndFlagsBits = 7104878;
  v47._object = (void *)0xE300000000000000;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(0xE300000000000000);
  v48 = *((_QWORD *)&v63 + 1);
  sub_10003DC3C(v63, *((void **)&v63 + 1), 0, v62, (uint64_t)&off_1000B6848);

  swift_bridgeObjectRelease(v48);
  sub_100017AB4((uint64_t)v69, &qword_1000C6678);
LABEL_27:
  v49 = a1;
  v31 = 1;
LABEL_28:
  *(_QWORD *)&v63 = a1;
  v50 = sub_100004B18(&qword_1000C6D30);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  v7[2] = CurrentValueSubject.init(_:)(&v63);
  *(_QWORD *)&v63 = 1;
  v51 = sub_100004B18(&qword_1000C6D38);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v52 = CurrentValueSubject.init(_:)(&v63);

  sub_100013C94((id)v31);
  v7[3] = v52;
  return v7;
}

void sub_100013C94(id a1)
{
  if (a1 != (id)1)

}

_QWORD *sub_100013CA4(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  int v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  Swift::String v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  Swift::String v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v96)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v97;
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _OWORD v119[2];

  v7 = v6;
  v103 = a2;
  v111 = a1;
  v106 = *v7;
  v11 = type metadata accessor for ActivityDisplayContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v108 = (uint64_t)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v109 = (uint64_t)&v96 - v16;
  v17 = __chkstk_darwin(v15);
  v100 = (uint64_t)&v96 - v18;
  __chkstk_darwin(v17);
  v101 = (uint64_t)&v96 - v19;
  v20 = sub_100004B18(&qword_1000C6D60);
  v21 = __chkstk_darwin(v20);
  v110 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v107 = (uint64_t)&v96 - v24;
  v25 = __chkstk_darwin(v23);
  v102 = (char *)&v96 - v26;
  v27 = __chkstk_darwin(v25);
  v99 = (char *)&v96 - v28;
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v96 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v96 - v32;
  swift_bridgeObjectRelease(a6);
  v34 = (char *)v7 + *(_QWORD *)(*v7 + 104);
  v35 = sub_100004B18(&qword_1000C70F8);
  v36 = v34;
  v37 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v36, 1, 1, v35);
  v38 = *(_QWORD *)(*v7 + 112);
  *(_QWORD *)((char *)v7 + v38) = 0;
  v39 = *(_QWORD *)(*v7 + 120);
  *((_BYTE *)v7 + v39) = 2;
  v40 = (_QWORD *)((char *)v7 + *(_QWORD *)(*v7 + 128));
  *v40 = 0;
  v40[1] = 0;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 + 136)) = 0;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 + 144)) = 0;
  v112 = v12;
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v41(v37, 1, 1, v11);
  if (!a3)
    goto LABEL_26;
  v104 = v37;
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v42 = qword_1000DF658;
  if (!qword_1000DF658)
  {
    swift_bridgeObjectRelease(a3);
    v37 = v104;
    goto LABEL_26;
  }
  v97 = v31;
  v96 = v41;
  v105 = v11;
  v43 = a4 & 1;
  *(_QWORD *)&v113 = 0;
  *((_QWORD *)&v113 + 1) = 0xE000000000000000;
  v98 = (id)qword_1000DF658;
  _StringGuts.grow(_:)(32);
  v119[0] = v113;
  v44._countAndFlagsBits = 0xD00000000000001ELL;
  v44._object = (void *)0x800000010008FAA0;
  String.append(_:)(v44);
  v45 = (uint64_t)v103;
  *(_QWORD *)&v113 = v103;
  *((_QWORD *)&v113 + 1) = a3;
  LOBYTE(v114) = a4 & 1;
  v46 = sub_100004B18((uint64_t *)&unk_1000C6D40);
  _print_unlocked<A, B>(_:_:)(&v113, v119, v46, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v47 = *((_QWORD *)&v119[0] + 1);
  sub_10003DC3C(*(uint64_t *)&v119[0], *((void **)&v119[0] + 1), 0, v106, (uint64_t)&off_1000B6848);
  swift_bridgeObjectRelease(v47);
  v48 = v40[1];
  *v40 = v45;
  v40[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v48);
  *((_BYTE *)v7 + v39) = v43;
  v49 = *(void **)((char *)v7 + v38);
  *(_QWORD *)((char *)v7 + v38) = v42;
  v50 = v98;

  swift_bridgeObjectRetain(a3);
  v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v52 = objc_msgSend(v50, "valueForKey:", v51);

  if (v52)
  {
    _bridgeAnyObjectToAny(_:)(&v113);
    swift_unknownObjectRelease(v52, v53);
  }
  else
  {
    v113 = 0u;
    v114 = 0u;
  }
  v54 = v105;
  v37 = v104;
  v55 = (uint64_t)v97;
  sub_100018064((uint64_t)&v113, (uint64_t)v119, &qword_1000C6678);
  swift_bridgeObjectRelease(a3);
  if (!v43)
  {
    sub_100017AB4(v37, &qword_1000C6D60);
    sub_100017F28((uint64_t)v119, (uint64_t)&v113, &qword_1000C6678);
    v56 = sub_100004B18(&qword_1000C6678);
    v57 = swift_dynamicCast(v55, &v113, v56, v54, 6);
    v41 = v96;
    v96(v55, v57 ^ 1u, 1, v54);
    sub_100018064(v55, v37, &qword_1000C6D60);
LABEL_16:
    v70 = (uint64_t)v102;
    goto LABEL_19;
  }
  v58 = sub_100016E14(v54, v54, (uint64_t)&protocol descriptor for Decodable, (uint64_t)&protocol descriptor for Encodable);
  if (!v58)
  {
    sub_10003DE94(60, 0xD000000000000014, (void *)0x800000010008FAC0, 0, v106, (uint64_t)&off_1000B6848);
    v37 = v104;
    v41 = v96;
    goto LABEL_16;
  }
  v61 = v58;
  v62 = v59;
  v63 = v60;
  sub_100017F28((uint64_t)v119, (uint64_t)&v113, &qword_1000C6678);
  if (!*((_QWORD *)&v114 + 1))
  {
    sub_100017AB4((uint64_t)&v113, &qword_1000C6678);
    v41 = v96;
    goto LABEL_18;
  }
  v64 = swift_dynamicCast(&v117, &v113, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
  v41 = v96;
  if ((v64 & 1) == 0)
  {
LABEL_18:
    v70 = (uint64_t)v102;
    sub_10003DE94(60, 0xD00000000000001ALL, (void *)0x800000010008FAE0, 0, v106, (uint64_t)&off_1000B6848);
    v37 = v104;
    goto LABEL_19;
  }
  v103 = v50;
  v65 = v117;
  v66 = v118;
  *((_QWORD *)&v114 + 1) = v61;
  v115 = v62;
  v116 = v63;
  sub_1000177DC(&v113);
  sub_10004A81C(v65, v66, v61, v62);
  v37 = v104;
  sub_100017AB4(v104, &qword_1000C6D60);
  sub_10000ABA8(v65, v66);
  v67 = sub_100004B18(&qword_1000C6D58);
  v68 = (uint64_t)v99;
  v69 = swift_dynamicCast(v99, &v113, v67, v54, 6);
  v41(v68, v69 ^ 1u, 1, v54);
  sub_100018064(v68, v37, &qword_1000C6D60);
  v70 = (uint64_t)v102;
  v50 = v103;
LABEL_19:
  v71 = 7104878;
  *(_QWORD *)&v113 = 0x206C616974696E49;
  *((_QWORD *)&v113 + 1) = 0xE800000000000000;
  v72 = v40[1];
  if (v72)
  {
    v117 = *v40;
    v118 = v72;
    swift_bridgeObjectRetain(v72);
    v73 = String.init<A>(describing:)(&v117, &type metadata for String);
    v75 = v74;
  }
  else
  {
    v75 = 0xE300000000000000;
    v73 = 7104878;
  }
  v76 = v75;
  String.append(_:)(*(Swift::String *)&v73);
  swift_bridgeObjectRelease(v75);
  v77._countAndFlagsBits = 8250;
  v77._object = (void *)0xE200000000000000;
  String.append(_:)(v77);
  sub_100017F28(v37, v70, &qword_1000C6D60);
  v78 = v105;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v70, 1, v105) == 1)
  {
    v79 = (void *)0xE300000000000000;
  }
  else
  {
    v80 = v70;
    v81 = v101;
    sub_100017264(v80, v101, type metadata accessor for ActivityDisplayContext);
    v82 = v100;
    sub_100017FC4(v81, v100, type metadata accessor for ActivityDisplayContext);
    v71 = String.init<A>(describing:)(v82, v78);
    v79 = v83;
    sub_100018008(v81, type metadata accessor for ActivityDisplayContext);
  }
  v84._countAndFlagsBits = v71;
  v84._object = v79;
  String.append(_:)(v84);
  swift_bridgeObjectRelease(v79);
  v85 = *((_QWORD *)&v113 + 1);
  sub_10003DC3C(v113, *((void **)&v113 + 1), 0, v106, (uint64_t)&off_1000B6848);

  swift_bridgeObjectRelease(v85);
  sub_100017AB4((uint64_t)v119, &qword_1000C6678);
  v11 = v105;
LABEL_26:
  v86 = v107;
  sub_100017F28(v37, v107, &qword_1000C6D60);
  v87 = v111;
  v88 = v108;
  sub_100017FC4(v111, v108, type metadata accessor for ActivityDisplayContext);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v86, 1, v11) == 1)
  {
    v89 = v88;
    v90 = v109;
    sub_100017264(v89, v109, type metadata accessor for ActivityDisplayContext);
    sub_100017AB4(v86, &qword_1000C6D60);
  }
  else
  {
    sub_100018008(v88, type metadata accessor for ActivityDisplayContext);
    v90 = v109;
    sub_100017264(v86, v109, type metadata accessor for ActivityDisplayContext);
  }
  v91 = sub_100004B18(&qword_1000C7100);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v7[2] = CurrentValueSubject.init(_:)(v90);
  v92 = v110;
  v41((uint64_t)v110, 1, 1, v11);
  v93 = sub_100004B18(&qword_1000C7108);
  swift_allocObject(v93, *(unsigned int *)(v93 + 48), *(unsigned __int16 *)(v93 + 52));
  v94 = CurrentValueSubject.init(_:)(v92);
  sub_100018008(v87, type metadata accessor for ActivityDisplayContext);
  sub_100017AB4(v37, &qword_1000C6D60);
  v7[3] = v94;
  return v7;
}

uint64_t *sub_100014698(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  Swift::String v47;
  void *v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char v57;
  id v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD v66[2];

  v7 = v6;
  v12 = *v7;
  swift_bridgeObjectRelease(a6);
  v13 = (char *)v7 + *(_QWORD *)(*v7 + 104);
  v14 = sub_100004B18(&qword_1000C70E0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = *(_QWORD *)(*v7 + 112);
  *(uint64_t *)((char *)v7 + v15) = 0;
  v16 = *(_QWORD *)(*v7 + 120);
  *((_BYTE *)v7 + v16) = 2;
  v17 = (uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 128));
  *v17 = 0;
  v17[1] = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 136)) = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 144)) = 0;
  if (!a3)
    goto LABEL_28;
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v18 = qword_1000DF658;
  if (!qword_1000DF658)
  {
    swift_bridgeObjectRelease(a3);
    goto LABEL_28;
  }
  v57 = a1;
  v59 = v16;
  v19 = v12;
  v20 = v17;
  v21 = a4 & 1;
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v60 + 1) = 0xE000000000000000;
  v58 = (id)qword_1000DF658;
  _StringGuts.grow(_:)(32);
  v66[0] = v60;
  v22._countAndFlagsBits = 0xD00000000000001ELL;
  v22._object = (void *)0x800000010008FAA0;
  String.append(_:)(v22);
  *(_QWORD *)&v60 = a2;
  *((_QWORD *)&v60 + 1) = a3;
  LOBYTE(v61) = a4 & 1;
  v23 = sub_100004B18((uint64_t *)&unk_1000C6D40);
  _print_unlocked<A, B>(_:_:)(&v60, v66, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v24 = *((_QWORD *)&v66[0] + 1);
  sub_10003DC3C(*(uint64_t *)&v66[0], *((void **)&v66[0] + 1), 0, v19, (uint64_t)&off_1000B6848);
  swift_bridgeObjectRelease(v24);
  v25 = v20[1];
  *v20 = a2;
  v20[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v25);
  *((_BYTE *)v7 + v59) = v21;
  v26 = *(void **)((char *)v7 + v15);
  *(uint64_t *)((char *)v7 + v15) = v18;
  v27 = v58;

  swift_bridgeObjectRetain(a3);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v29 = objc_msgSend(v27, "valueForKey:", v28);

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)(&v60);
    swift_unknownObjectRelease(v29, v30);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_100018064((uint64_t)&v60, (uint64_t)v66, &qword_1000C6678);
  swift_bridgeObjectRelease(a3);
  if (!v21)
  {
    sub_100017F28((uint64_t)v66, (uint64_t)&v60, &qword_1000C6678);
    v31 = sub_100004B18(&qword_1000C6678);
    if (swift_dynamicCast(&v64, &v60, v31, &type metadata for CardMode, 6))
      v32 = v64;
    else
      v32 = 5;
    a1 = v57;
    goto LABEL_21;
  }
  v33 = sub_100016E14((uint64_t)&type metadata for CardMode, (uint64_t)&type metadata for CardMode, (uint64_t)&protocol descriptor for Decodable, (uint64_t)&protocol descriptor for Encodable);
  if (!v33)
  {
    sub_10003DE94(60, 0xD000000000000014, (void *)0x800000010008FAC0, 0, v19, (uint64_t)&off_1000B6848);
    v32 = 5;
    a1 = v57;
    goto LABEL_21;
  }
  v36 = v33;
  v37 = v34;
  v38 = v35;
  sub_100017F28((uint64_t)v66, (uint64_t)&v60, &qword_1000C6678);
  if (!*((_QWORD *)&v61 + 1))
  {
    sub_100017AB4((uint64_t)&v60, &qword_1000C6678);
    goto LABEL_20;
  }
  if ((swift_dynamicCast(&v64, &v60, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_20:
    a1 = v57;
    sub_10003DE94(60, 0xD00000000000001ALL, (void *)0x800000010008FAE0, 0, v19, (uint64_t)&off_1000B6848);
    v32 = 5;
    goto LABEL_21;
  }
  v39 = v64;
  v40 = v65;
  *((_QWORD *)&v61 + 1) = v36;
  v62 = v37;
  v63 = v38;
  sub_1000177DC(&v60);
  sub_10004A81C(v39, v40, v36, v37);
  sub_10000ABA8(v39, v40);
  v55 = sub_100004B18(&qword_1000C6D58);
  if (swift_dynamicCast(&v64, &v60, v55, &type metadata for CardMode, 6))
    v32 = v64;
  else
    v32 = 5;
  a1 = v57;
LABEL_21:
  v41 = 7104878;
  *(_QWORD *)&v60 = 0x206C616974696E49;
  *((_QWORD *)&v60 + 1) = 0xE800000000000000;
  v42 = v20[1];
  if (v42)
  {
    v64 = *v20;
    v65 = v42;
    swift_bridgeObjectRetain(v42);
    v43 = String.init<A>(describing:)(&v64, &type metadata for String);
    v45 = v44;
  }
  else
  {
    v45 = 0xE300000000000000;
    v43 = 7104878;
  }
  v46 = v45;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease(v45);
  v47._countAndFlagsBits = 8250;
  v47._object = (void *)0xE200000000000000;
  String.append(_:)(v47);
  if (v32 == 5)
  {
    v48 = (void *)0xE300000000000000;
  }
  else
  {
    LOBYTE(v64) = v32;
    v41 = String.init<A>(describing:)(&v64, &type metadata for CardMode);
    v48 = v49;
    a1 = v32;
  }
  v50._countAndFlagsBits = v41;
  v50._object = v48;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v48);
  v51 = *((_QWORD *)&v60 + 1);
  sub_10003DC3C(v60, *((void **)&v60 + 1), 0, v19, (uint64_t)&off_1000B6848);

  swift_bridgeObjectRelease(v51);
  sub_100017AB4((uint64_t)v66, &qword_1000C6678);
LABEL_28:
  LOBYTE(v60) = a1;
  v52 = sub_100004B18(&qword_1000C70E8);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  v7[2] = CurrentValueSubject.init(_:)(&v60);
  LOBYTE(v60) = 5;
  v53 = sub_100004B18(&qword_1000C70F0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v7[3] = CurrentValueSubject.init(_:)(&v60);
  return v7;
}

uint64_t *sub_100014CF4(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v8;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v56;
  void *object;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _OWORD v71[2];

  v8 = v7;
  v64 = *v8;
  swift_bridgeObjectRelease(a7);
  v14 = (char *)v8 + *(_QWORD *)(*v8 + 104);
  v15 = sub_100004B18(&qword_1000C70C8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = *(_QWORD *)(*v8 + 112);
  *(uint64_t *)((char *)v8 + v16) = 0;
  v17 = *(_QWORD *)(*v8 + 120);
  *((_BYTE *)v8 + v17) = 2;
  v18 = (uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 128));
  *v18 = 0;
  v18[1] = 0;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 136)) = 0;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 + 144)) = 0;
  if (!a4)
  {
LABEL_29:
    sub_100018044(a1);
    goto LABEL_30;
  }
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v19 = qword_1000DF658;
  if (qword_1000DF658)
  {
    v61 = a2;
    v62 = a1;
    v20 = a5 & 1;
    *(_QWORD *)&v65 = 0;
    *((_QWORD *)&v65 + 1) = 0xE000000000000000;
    v63 = (id)qword_1000DF658;
    _StringGuts.grow(_:)(32);
    v71[0] = v65;
    v21._countAndFlagsBits = 0xD00000000000001ELL;
    v21._object = (void *)0x800000010008FAA0;
    String.append(_:)(v21);
    *(_QWORD *)&v65 = a3;
    *((_QWORD *)&v65 + 1) = a4;
    LOBYTE(v66) = a5 & 1;
    v22 = sub_100004B18((uint64_t *)&unk_1000C6D40);
    _print_unlocked<A, B>(_:_:)(&v65, v71, v22, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v23 = *((_QWORD *)&v71[0] + 1);
    sub_10003DC3C(*(uint64_t *)&v71[0], *((void **)&v71[0] + 1), 0, v64, (uint64_t)&off_1000B6848);
    swift_bridgeObjectRelease(v23);
    v24 = v18[1];
    *v18 = a3;
    v18[1] = a4;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease(v24);
    *((_BYTE *)v8 + v17) = v20;
    v25 = *(void **)((char *)v8 + v16);
    *(uint64_t *)((char *)v8 + v16) = v19;
    v26 = v63;

    swift_bridgeObjectRetain(a4);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    v28 = objc_msgSend(v26, "valueForKey:", v27);

    if (v28)
    {
      _bridgeAnyObjectToAny(_:)(&v65);
      swift_unknownObjectRelease(v28, v29);
    }
    else
    {
      v65 = 0u;
      v66 = 0u;
    }
    sub_100018064((uint64_t)&v65, (uint64_t)v71, &qword_1000C6678);
    swift_bridgeObjectRelease(a4);
    if (!v20)
    {
      sub_100017F28((uint64_t)v71, (uint64_t)&v65, &qword_1000C6678);
      v30 = sub_100004B18(&qword_1000C6678);
      v31 = swift_dynamicCast(&v69, &v65, v30, &type metadata for MediaTransferStatus, 6);
      if (v31)
        v32 = v70;
      else
        v32 = 0;
      if (v31)
        v33 = v69;
      else
        v33 = 2;
      a2 = v61;
      goto LABEL_24;
    }
    v34 = sub_100016E14((uint64_t)&type metadata for MediaTransferStatus, (uint64_t)&type metadata for MediaTransferStatus, (uint64_t)&protocol descriptor for Decodable, (uint64_t)&protocol descriptor for Encodable);
    if (v34)
    {
      v37 = v34;
      v38 = v35;
      v39 = v36;
      sub_100017F28((uint64_t)v71, (uint64_t)&v65, &qword_1000C6678);
      a2 = v61;
      if (*((_QWORD *)&v66 + 1))
      {
        if ((swift_dynamicCast(&v69, &v65, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
        {
          v40 = v69;
          v41 = v70;
          *((_QWORD *)&v66 + 1) = v37;
          v67 = v38;
          v68 = v39;
          sub_1000177DC(&v65);
          sub_10004A81C(v40, v41, v37, v38);
          sub_10000ABA8(v40, v41);
          v59 = sub_100004B18(&qword_1000C6D58);
          v60 = swift_dynamicCast(&v69, &v65, v59, &type metadata for MediaTransferStatus, 6);
          if (v60)
            v32 = v70;
          else
            v32 = 0;
          if (v60)
            v33 = v69;
          else
            v33 = 2;
LABEL_24:
          *(_QWORD *)&v65 = 0x206C616974696E49;
          *((_QWORD *)&v65 + 1) = 0xE800000000000000;
          v42 = v18[1];
          if (v42)
          {
            v69 = *v18;
            v70 = v42;
            swift_bridgeObjectRetain(v42);
            v43 = String.init<A>(describing:)(&v69, &type metadata for String);
            v45 = v44;
          }
          else
          {
            v45 = 0xE300000000000000;
            v43 = 7104878;
          }
          v46 = v45;
          String.append(_:)(*(Swift::String *)&v43);
          swift_bridgeObjectRelease(v45);
          v47._countAndFlagsBits = 8250;
          v47._object = (void *)0xE200000000000000;
          String.append(_:)(v47);
          if (v33 != 2)
          {
            v69 = v33;
            v70 = v32;
            sub_100018044((id)v33);
            v56._countAndFlagsBits = String.init<A>(describing:)(&v69, &type metadata for MediaTransferStatus);
            object = v56._object;
            String.append(_:)(v56);
            swift_bridgeObjectRelease(object);
            v58 = *((_QWORD *)&v65 + 1);
            sub_10003DC3C(v65, *((void **)&v65 + 1), 0, v64, (uint64_t)&off_1000B6848);

            swift_bridgeObjectRelease(v58);
            sub_100017AB4((uint64_t)v71, &qword_1000C6678);
            sub_100018044((id)v33);
            v51 = v32;
            v50 = v33;
            a1 = v62;
            goto LABEL_31;
          }
          v48._countAndFlagsBits = 7104878;
          v48._object = (void *)0xE300000000000000;
          String.append(_:)(v48);
          swift_bridgeObjectRelease(0xE300000000000000);
          v49 = *((_QWORD *)&v65 + 1);
          sub_10003DC3C(v65, *((void **)&v65 + 1), 0, v64, (uint64_t)&off_1000B6848);

          swift_bridgeObjectRelease(v49);
          sub_100017AB4((uint64_t)v71, &qword_1000C6678);
          a1 = v62;
          goto LABEL_29;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v65, &qword_1000C6678);
      }
      sub_10003DE94(60, 0xD00000000000001ALL, (void *)0x800000010008FAE0, 0, v64, (uint64_t)&off_1000B6848);
      v32 = 0;
      v33 = 2;
      goto LABEL_24;
    }
    sub_10003DE94(60, 0xD000000000000014, (void *)0x800000010008FAC0, 0, v64, (uint64_t)&off_1000B6848);
    v32 = 0;
    v33 = 2;
    a2 = v61;
    goto LABEL_24;
  }
  swift_bridgeObjectRelease(a4);
  sub_100018044(a1);
LABEL_30:
  v50 = 2;
  v33 = (uint64_t)a1;
  v51 = a2;
LABEL_31:
  *(_QWORD *)&v65 = v33;
  *((_QWORD *)&v65 + 1) = v51;
  v52 = sub_100004B18(&qword_1000C70D0);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  v8[2] = CurrentValueSubject.init(_:)(&v65);
  v65 = xmmword_100081070;
  v53 = sub_100004B18(&qword_1000C70D8);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = CurrentValueSubject.init(_:)(&v65);
  sub_100013C94(a1);
  sub_100018054((id)v50);
  v8[3] = v54;
  return v8;
}

uint64_t *sub_1000153CC(uint64_t a1, uint64_t a2, char a3, float a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  float v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  Swift::String v47;
  void *v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  id v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _OWORD v67[2];

  v7 = v6;
  v12 = *v7;
  swift_bridgeObjectRelease(a6);
  v13 = (char *)v7 + *(_QWORD *)(*v7 + 104);
  v14 = sub_100004B18(&qword_1000C70B0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = *(_QWORD *)(*v7 + 112);
  *(uint64_t *)((char *)v7 + v15) = 0;
  v16 = *(_QWORD *)(*v7 + 120);
  *((_BYTE *)v7 + v16) = 2;
  v17 = (uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 128));
  *v17 = 0;
  v17[1] = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 136)) = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 144)) = 0;
  if (!a2)
    goto LABEL_28;
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v18 = qword_1000DF658;
  if (!qword_1000DF658)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_28;
  }
  v59 = a3 & 1;
  *(_QWORD *)&v61 = 0;
  *((_QWORD *)&v61 + 1) = 0xE000000000000000;
  v60 = (id)qword_1000DF658;
  _StringGuts.grow(_:)(32);
  v67[0] = v61;
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  v19._object = (void *)0x800000010008FAA0;
  String.append(_:)(v19);
  *(_QWORD *)&v61 = a1;
  *((_QWORD *)&v61 + 1) = a2;
  LOBYTE(v62) = a3 & 1;
  v20 = sub_100004B18((uint64_t *)&unk_1000C6D40);
  _print_unlocked<A, B>(_:_:)(&v61, v67, v20, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v21 = *((_QWORD *)&v67[0] + 1);
  v57 = v12;
  sub_10003DC3C(*(uint64_t *)&v67[0], *((void **)&v67[0] + 1), 0, v12, (uint64_t)&off_1000B6848);
  swift_bridgeObjectRelease(v21);
  v22 = v17[1];
  *v17 = a1;
  v17[1] = a2;
  v58 = v17;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v22);
  *((_BYTE *)v7 + v16) = v59;
  v23 = *(void **)((char *)v7 + v15);
  *(uint64_t *)((char *)v7 + v15) = v18;
  v24 = v60;

  swift_bridgeObjectRetain(a2);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v26 = objc_msgSend(v24, "valueForKey:", v25);

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v26, v27);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_100018064((uint64_t)&v61, (uint64_t)v67, &qword_1000C6678);
  swift_bridgeObjectRelease(a2);
  if (!v59)
  {
    sub_100017F28((uint64_t)v67, (uint64_t)&v61, &qword_1000C6678);
    v28 = sub_100004B18(&qword_1000C6678);
    v29 = swift_dynamicCast(&v65, &v61, v28, &type metadata for Float, 6);
    if (v29)
      v30 = *(float *)&v65;
    else
      v30 = 0.0;
    v31 = v29 ^ 1;
    v32 = v58;
    goto LABEL_21;
  }
  v33 = sub_100016E14((uint64_t)&type metadata for Float, (uint64_t)&type metadata for Float, (uint64_t)&protocol descriptor for Decodable, (uint64_t)&protocol descriptor for Encodable);
  if (!v33)
  {
    sub_10003DE94(60, 0xD000000000000014, (void *)0x800000010008FAC0, 0, v12, (uint64_t)&off_1000B6848);
    v31 = 1;
    v30 = 0.0;
    v32 = v58;
    goto LABEL_21;
  }
  v36 = v33;
  v37 = v34;
  v38 = v35;
  sub_100017F28((uint64_t)v67, (uint64_t)&v61, &qword_1000C6678);
  v32 = v58;
  if (!*((_QWORD *)&v62 + 1))
  {
    sub_100017AB4((uint64_t)&v61, &qword_1000C6678);
    goto LABEL_20;
  }
  if ((swift_dynamicCast(&v65, &v61, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) == 0)
  {
LABEL_20:
    v12 = v57;
    sub_10003DE94(60, 0xD00000000000001ALL, (void *)0x800000010008FAE0, 0, v57, (uint64_t)&off_1000B6848);
    v31 = 1;
    v30 = 0.0;
    goto LABEL_21;
  }
  v39 = v65;
  v40 = v66;
  *((_QWORD *)&v62 + 1) = v36;
  v63 = v37;
  v64 = v38;
  sub_1000177DC(&v61);
  sub_10004A81C(v39, v40, v36, v37);
  sub_10000ABA8(v39, v40);
  v55 = sub_100004B18(&qword_1000C6D58);
  v56 = swift_dynamicCast(&v65, &v61, v55, &type metadata for Float, 6);
  if (v56)
    v30 = *(float *)&v65;
  else
    v30 = 0.0;
  v31 = v56 ^ 1;
  v12 = v57;
LABEL_21:
  v41 = 7104878;
  *(_QWORD *)&v61 = 0x206C616974696E49;
  *((_QWORD *)&v61 + 1) = 0xE800000000000000;
  v42 = v32[1];
  if (v42)
  {
    v65 = *v32;
    v66 = v42;
    swift_bridgeObjectRetain(v42);
    v43 = String.init<A>(describing:)(&v65, &type metadata for String);
    v45 = v44;
  }
  else
  {
    v45 = 0xE300000000000000;
    v43 = 7104878;
  }
  v46 = v45;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease(v45);
  v47._countAndFlagsBits = 8250;
  v47._object = (void *)0xE200000000000000;
  String.append(_:)(v47);
  if ((v31 & 1) != 0)
  {
    v48 = (void *)0xE300000000000000;
  }
  else
  {
    *(float *)&v65 = v30;
    v41 = String.init<A>(describing:)(&v65, &type metadata for Float);
    v48 = v49;
    a4 = v30;
  }
  v50._countAndFlagsBits = v41;
  v50._object = v48;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v48);
  v51 = *((_QWORD *)&v61 + 1);
  sub_10003DC3C(v61, *((void **)&v61 + 1), 0, v12, (uint64_t)&off_1000B6848);

  swift_bridgeObjectRelease(v51);
  sub_100017AB4((uint64_t)v67, &qword_1000C6678);
LABEL_28:
  *(float *)&v61 = a4;
  v52 = sub_100004B18(&qword_1000C70B8);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  v7[2] = CurrentValueSubject.init(_:)(&v61);
  LODWORD(v61) = 0;
  BYTE4(v61) = 1;
  v53 = sub_100004B18(&qword_1000C70C0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v7[3] = CurrentValueSubject.init(_:)(&v61);
  return v7;
}

uint64_t *sub_100015A34(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  Swift::String v46;
  Swift::String v47;
  void *object;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v59;
  id v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _OWORD v68[2];

  v7 = v6;
  v12 = *v7;
  swift_bridgeObjectRelease(a6);
  v13 = (char *)v7 + *(_QWORD *)(*v7 + 104);
  v14 = sub_100004B18(&qword_1000C7088);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = *(_QWORD *)(*v7 + 112);
  *(uint64_t *)((char *)v7 + v15) = 0;
  v16 = *(_QWORD *)(*v7 + 120);
  *((_BYTE *)v7 + v16) = 2;
  v17 = (uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 128));
  *v17 = 0;
  v17[1] = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 136)) = 0;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 + 144)) = 0;
  if (!a3)
  {
    swift_bridgeObjectRetain(a1);
LABEL_29:
    v50 = a1;
    goto LABEL_30;
  }
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v18 = qword_1000DF658;
  if (!qword_1000DF658)
  {
    swift_bridgeObjectRelease(a3);
LABEL_28:
    swift_bridgeObjectRetain(a1);
    a3 = 0;
    goto LABEL_29;
  }
  v59 = a1;
  v61 = v16;
  v19 = v12;
  v20 = v17;
  v21 = a4 & 1;
  *(_QWORD *)&v62 = 0;
  *((_QWORD *)&v62 + 1) = 0xE000000000000000;
  v60 = (id)qword_1000DF658;
  _StringGuts.grow(_:)(32);
  v68[0] = v62;
  v22._countAndFlagsBits = 0xD00000000000001ELL;
  v22._object = (void *)0x800000010008FAA0;
  String.append(_:)(v22);
  *(_QWORD *)&v62 = a2;
  *((_QWORD *)&v62 + 1) = a3;
  LOBYTE(v63) = a4 & 1;
  v23 = sub_100004B18((uint64_t *)&unk_1000C6D40);
  _print_unlocked<A, B>(_:_:)(&v62, v68, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v24 = *((_QWORD *)&v68[0] + 1);
  sub_10003DC3C(*(uint64_t *)&v68[0], *((void **)&v68[0] + 1), 0, v19, (uint64_t)&off_1000B6848);
  swift_bridgeObjectRelease(v24);
  v25 = v20[1];
  *v20 = a2;
  v20[1] = a3;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v25);
  *((_BYTE *)v7 + v61) = v21;
  v26 = *(void **)((char *)v7 + v15);
  *(uint64_t *)((char *)v7 + v15) = v18;
  v27 = v60;

  swift_bridgeObjectRetain(a3);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v29 = objc_msgSend(v27, "valueForKey:", v28);

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)(&v62);
    swift_unknownObjectRelease(v29, v30);
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  sub_100018064((uint64_t)&v62, (uint64_t)v68, &qword_1000C6678);
  swift_bridgeObjectRelease(a3);
  if (v21)
  {
    v33 = sub_100016E14((uint64_t)&type metadata for NearbySharingInteractionDisplayContext, (uint64_t)&type metadata for NearbySharingInteractionDisplayContext, (uint64_t)&protocol descriptor for Decodable, (uint64_t)&protocol descriptor for Encodable);
    if (v33)
    {
      v36 = v33;
      v37 = v34;
      v38 = v35;
      sub_100017F28((uint64_t)v68, (uint64_t)&v62, &qword_1000C6678);
      if (*((_QWORD *)&v63 + 1))
      {
        if ((swift_dynamicCast(&v66, &v62, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
        {
          v39 = v66;
          v40 = v67;
          *((_QWORD *)&v63 + 1) = v36;
          v64 = v37;
          v65 = v38;
          sub_1000177DC(&v62);
          sub_10004A81C(v39, v40, v36, v37);
          sub_10000ABA8(v39, v40);
          v57 = sub_100004B18(&qword_1000C6D58);
          if (swift_dynamicCast(&v66, &v62, v57, &type metadata for NearbySharingInteractionDisplayContext, 6))a3 = v66;
          else
            a3 = 0;
          v32 = v19;
          a1 = v59;
          goto LABEL_22;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v62, &qword_1000C6678);
      }
      v32 = v19;
      a1 = v59;
      sub_10003DE94(60, 0xD00000000000001ALL, (void *)0x800000010008FAE0, 0, v19, (uint64_t)&off_1000B6848);
      a3 = 0;
    }
    else
    {
      v32 = v19;
      sub_10003DE94(60, 0xD000000000000014, (void *)0x800000010008FAC0, 0, v19, (uint64_t)&off_1000B6848);
      a3 = 0;
      a1 = v59;
    }
  }
  else
  {
    sub_100017F28((uint64_t)v68, (uint64_t)&v62, &qword_1000C6678);
    v31 = sub_100004B18(&qword_1000C6678);
    if (swift_dynamicCast(&v66, &v62, v31, &type metadata for NearbySharingInteractionDisplayContext, 6))a3 = v66;
    else
      a3 = 0;
    v32 = v19;
    a1 = v59;
  }
LABEL_22:
  *(_QWORD *)&v62 = 0x206C616974696E49;
  *((_QWORD *)&v62 + 1) = 0xE800000000000000;
  v41 = v20[1];
  if (v41)
  {
    v66 = *v20;
    v67 = v41;
    swift_bridgeObjectRetain(v41);
    v42 = String.init<A>(describing:)(&v66, &type metadata for String);
    v44 = v43;
  }
  else
  {
    v44 = 0xE300000000000000;
    v42 = 7104878;
  }
  v45 = v44;
  String.append(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease(v44);
  v46._countAndFlagsBits = 8250;
  v46._object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  if (!a3)
  {
    v51._countAndFlagsBits = 7104878;
    v51._object = (void *)0xE300000000000000;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(0xE300000000000000);
    v52 = *((_QWORD *)&v62 + 1);
    sub_10003DC3C(v62, *((void **)&v62 + 1), 0, v32, (uint64_t)&off_1000B6848);

    swift_bridgeObjectRelease(v52);
    sub_100017AB4((uint64_t)v68, &qword_1000C6678);
    goto LABEL_28;
  }
  v66 = a3;
  swift_bridgeObjectRetain(a3);
  v47._countAndFlagsBits = String.init<A>(describing:)(&v66, &type metadata for NearbySharingInteractionDisplayContext);
  object = v47._object;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(object);
  v49 = *((_QWORD *)&v62 + 1);
  sub_10003DC3C(v62, *((void **)&v62 + 1), 0, v32, (uint64_t)&off_1000B6848);

  swift_bridgeObjectRelease(v49);
  sub_100017AB4((uint64_t)v68, &qword_1000C6678);
  swift_bridgeObjectRetain(a3);
  v50 = a3;
LABEL_30:
  *(_QWORD *)&v62 = v50;
  v53 = sub_100004B18(&qword_1000C7090);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v7[2] = CurrentValueSubject.init(_:)(&v62);
  *(_QWORD *)&v62 = 0;
  v54 = sub_100004B18(&qword_1000C7098);
  swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  v55 = CurrentValueSubject.init(_:)(&v62);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(a3);
  v7[3] = v55;
  return v7;
}

void sub_1000160EC(void (*a1)(void **), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  NSString v7;
  int v8;
  id v9;
  NSString v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  void (*v14)(uint64_t (*)(uint64_t), _QWORD *);
  uint64_t v15;
  _QWORD *v16;
  id v17;
  NSString v18;
  uint64_t v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  id v27;
  NSString v28;
  id v29;
  _QWORD *v30;
  NSString v31;
  void *v32;
  char v33;

  v5 = *v2;
  v6 = sub_1000535AC();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

  v8 = *((unsigned __int8 *)v2 + 40);
  if (v8 == 254)
  {
    if (a1)
    {
      swift_retain(a2);
      v17 = sub_1000535AC();
      v18 = String._bridgeToObjectiveC()();
      objc_msgSend(v17, "ulog:message:", 40, v18);

      v19 = swift_allocObject(&unk_1000B38B8, 32, 7);
      *(_QWORD *)(v19 + 16) = a1;
      *(_QWORD *)(v19 + 24) = a2;
      v20 = (_QWORD *)v2[6];
      swift_retain(a2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
      v2[6] = (uint64_t)v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v20 = sub_10005D0C0(0, v20[2] + 1, 1, v20);
        v2[6] = (uint64_t)v20;
      }
      v23 = v20[2];
      v22 = v20[3];
      v24 = v23 + 1;
      if (v23 >= v22 >> 1)
      {
        v30 = sub_10005D0C0((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
        v24 = v23 + 1;
        v20 = v30;
        v2[6] = (uint64_t)v30;
      }
      v20[2] = v24;
      v25 = &v20[2 * v23];
      v25[4] = sub_100017928;
      v25[5] = v19;
      sub_100007A90((uint64_t)a1, a2);
    }
    else
    {
      v29 = sub_1000535AC();
      v31 = String._bridgeToObjectiveC()();
      objc_msgSend(v29, "ulog:message:", 40, v31);

    }
  }
  else if (v8 == 255)
  {
    v9 = sub_1000535AC();
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "ulog:message:", 40, v10);

    v11 = (void *)v2[4];
    v2[4] = 0;
    v12 = *((_BYTE *)v2 + 40);
    *((_BYTE *)v2 + 40) = -2;
    sub_100017910(v11, v12);
    v14 = (void (*)(uint64_t (*)(uint64_t), _QWORD *))v2[2];
    v13 = v2[3];
    v15 = swift_allocObject(&unk_1000B38E0, 24, 7);
    swift_weakInit(v15 + 16, v2);
    v16 = (_QWORD *)swift_allocObject(&unk_1000B3908, 48, 7);
    v16[2] = v15;
    v16[3] = a1;
    v16[4] = a2;
    v16[5] = v5;
    swift_retain(v13);
    swift_retain(v15);
    sub_100007A80((uint64_t)a1, a2);
    v14(sub_1000179BC, v16);
    swift_release(v13);
    swift_release(v15);
    swift_release(v16);
  }
  else
  {
    v26 = (void *)v2[4];
    v32 = v26;
    v33 = v8 & 1;
    sub_1000177C4(v26, v8 & 1);
    v27 = sub_1000535AC();
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v27, "ulog:message:", 40, v28);

    if (a1)
      a1(&v32);
    sub_100017910(v26, v8);
  }
}

uint64_t sub_100016494(void *a1, char a2, uint64_t a3, uint64_t (*a4)(void **), uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void (*v20)(void **);
  uint64_t result;
  uint64_t v22;
  void *v23;
  BOOL v24;
  _BYTE v25[24];
  _BYTE v26[24];
  void *v27;
  char v28;

  v8 = a2 & 1;
  v27 = a1;
  v28 = a2 & 1;
  v9 = a3 + 16;
  sub_10003DC3C(0xD000000000000016, (void *)0x8000000100090210, 0, a6, (uint64_t)&off_1000B7310);
  swift_beginAccess(v9, v26, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(void **)(Strong + 32);
    *(_QWORD *)(Strong + 32) = a1;
    v13 = *(_BYTE *)(Strong + 40);
    *(_BYTE *)(Strong + 40) = v8;
    sub_1000177C4(a1, v8);
    sub_100017910(v12, v13);
    swift_release(v11);
  }
  swift_beginAccess(v9, v25, 0, 0);
  v14 = swift_weakLoadStrong(v9);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)(v14 + 48);
    swift_bridgeObjectRetain(v16);
    swift_release(v15);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      swift_bridgeObjectRetain(v16);
      v18 = (uint64_t *)(v16 + 40);
      do
      {
        v20 = (void (*)(void **))*(v18 - 1);
        v19 = *v18;
        v23 = a1;
        v24 = v8 != 0;
        swift_retain(v19);
        v20(&v23);
        swift_release(v19);
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease(v16);
    }
    swift_bridgeObjectRelease(v16);
  }
  swift_beginAccess(v9, &v23, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    v22 = *(_QWORD *)(result + 48);
    *(_QWORD *)(result + 48) = &_swiftEmptyArrayStorage;
    swift_release(result);
    result = swift_bridgeObjectRelease(v22);
  }
  if (a4)
    return a4(&v27);
  return result;
}

uint64_t sub_100016654(char a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  NSString v24;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v28 = a1;
  if (a2)
  {
    v15 = a2(&v28);
  }
  else
  {
    LOBYTE(v26) = a1 & 1;
    v15 = String.init<A>(describing:)(&v26, &type metadata for Bool);
  }
  v17 = v15;
  v18 = v16;
  v26 = a5;
  v27 = a6;
  swift_bridgeObjectRetain(a6);
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = v27;
  swift_bridgeObjectRetain(v27);
  v21._countAndFlagsBits = a7;
  v21._object = a8;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22 = v27;
  if (a9)
  {
    v23 = a9;
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "ulog:message:", a10, v24);
    swift_bridgeObjectRelease(v22);

  }
  else
  {
    NSLog(_:_:)(v26, v27, &_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v22);
  }
  return a1 & 1;
}

uint64_t sub_1000167A0(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  NSString v24;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v28 = a1;
  if (a2)
  {
    v15 = a2(&v28);
  }
  else
  {
    LOBYTE(v26) = a1;
    v15 = String.init<A>(describing:)(&v26, &type metadata for CardMode);
  }
  v17 = v15;
  v18 = v16;
  v26 = a5;
  v27 = a6;
  swift_bridgeObjectRetain(a6);
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = v27;
  swift_bridgeObjectRetain(v27);
  v21._countAndFlagsBits = a7;
  v21._object = a8;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22 = v27;
  if (a9)
  {
    v23 = a9;
    v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v23, "ulog:message:", a10, v24);
    swift_bridgeObjectRelease(v22);

  }
  else
  {
    NSLog(_:_:)(v26, v27, &_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v22);
  }
  return a1;
}

float sub_1000168E8(uint64_t (*a1)(float *), float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  id v24;
  NSString v25;
  uint64_t v27;
  uint64_t v28;
  float v29;

  v29 = a2;
  if (a1)
  {
    v16 = a1(&v29);
  }
  else
  {
    *(float *)&v27 = a2;
    v16 = String.init<A>(describing:)(&v27, &type metadata for Float);
  }
  v18 = v16;
  v19 = v17;
  v27 = a5;
  v28 = a6;
  swift_bridgeObjectRetain(a6);
  v20._countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21 = v28;
  swift_bridgeObjectRetain(v28);
  v22._countAndFlagsBits = a7;
  v22._object = a8;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23 = v28;
  if (a9)
  {
    v24 = a9;
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "ulog:message:", a10, v25);
    swift_bridgeObjectRelease(v23);

  }
  else
  {
    NSLog(_:_:)(v27, v28, &_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v23);
  }
  return a2;
}

uint64_t sub_100016A3C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>, void *a9, unsigned int a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  uint64_t v38;
  id v39;
  char *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *object;
  uint64_t v45;
  uint64_t countAndFlagsBits;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  id v52;
  NSString v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  Swift::String v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;

  v61._countAndFlagsBits = a6;
  v61._object = a7;
  v59 = (char *)a3;
  v62 = a8;
  v60 = a10;
  v63 = a9;
  v14 = sub_100004B18(&qword_1000C6D60);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v55 - v18;
  v20 = type metadata accessor for ActivityDisplayContext(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v55 - v26;
  __chkstk_darwin(v25);
  if (a2)
  {
    v29 = a2(a1);
    v31 = v30;
    v64 = a4;
    v65 = a5;
    swift_bridgeObjectRetain(a5);
    v32._countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v31);
    v33 = v65;
    swift_bridgeObjectRetain(v65);
    String.append(_:)(v61);
    swift_bridgeObjectRelease(v33);
    v34 = v65;
    v35 = a1;
    if (v63)
    {
      v36 = v63;
      v37 = String._bridgeToObjectiveC()();
      objc_msgSend(v36, "ulog:message:", v60, v37);
      swift_bridgeObjectRelease(v34);

    }
    else
    {
      NSLog(_:_:)(v64, v65, &_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v34);
    }
    v38 = v62;
  }
  else
  {
    v56 = a4;
    v57 = a5;
    v39 = v63;
    v58 = a1;
    v40 = (char *)&v55 - v28;
    sub_100017FC4(a1, (uint64_t)&v55 - v28, type metadata accessor for ActivityDisplayContext);
    v59 = v40;
    sub_100017FC4((uint64_t)v40, (uint64_t)v19, type metadata accessor for ActivityDisplayContext);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
    sub_100017F28((uint64_t)v19, (uint64_t)v17, &qword_1000C6D60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v20) == 1)
    {
      v41 = (void *)0xE300000000000000;
      v42 = 7104878;
    }
    else
    {
      sub_100017264((uint64_t)v17, (uint64_t)v27, type metadata accessor for ActivityDisplayContext);
      sub_100017FC4((uint64_t)v27, (uint64_t)v24, type metadata accessor for ActivityDisplayContext);
      v42 = String.init<A>(describing:)(v24, v20);
      v41 = v43;
      sub_100018008((uint64_t)v27, type metadata accessor for ActivityDisplayContext);
    }
    object = v61._object;
    v38 = v62;
    v45 = v57;
    v35 = v58;
    countAndFlagsBits = v61._countAndFlagsBits;
    v47 = v56;
    sub_100017AB4((uint64_t)v19, &qword_1000C6D60);
    v64 = v47;
    v65 = v45;
    swift_bridgeObjectRetain(v45);
    v48._countAndFlagsBits = v42;
    v48._object = v41;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(v41);
    v49 = v65;
    swift_bridgeObjectRetain(v65);
    v50._countAndFlagsBits = countAndFlagsBits;
    v50._object = object;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v49);
    v51 = v65;
    if (v39)
    {
      v52 = v39;
      v53 = String._bridgeToObjectiveC()();
      objc_msgSend(v52, "ulog:message:", v60, v53);
      swift_bridgeObjectRelease(v51);

    }
    else
    {
      NSLog(_:_:)(v64, v65, &_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(v51);
    }
    sub_100018008((uint64_t)v59, type metadata accessor for ActivityDisplayContext);
  }
  return sub_100017FC4(v35, v38, type metadata accessor for ActivityDisplayContext);
}

uint64_t sub_100016E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = swift_conformsToProtocol2(a2, a3);
  if (result)
  {
    if (swift_conformsToProtocol2(a2, a4))
      return a1;
    else
      return 0;
  }
  return result;
}

_QWORD *sub_100016E80(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

id sub_100016EB4(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v45;

  v3 = v2;
  v44 = a2;
  ObjectType = swift_getObjectType(v2);
  v6 = sub_100004B18(&qword_1000C6D60);
  __chkstk_darwin(v6);
  v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for ActivityDisplayContext(0);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v2[OBJC_IVAR____TtC13PCViewService13CardPresenter_headerView] = 0;
  v12 = OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn;
  v13 = sub_100004B18(&qword_1000C6D68);
  v14 = swift_allocObject(v13, 25, 7);
  *(_QWORD *)(v14 + 16) = 0;
  *(_BYTE *)(v14 + 24) = 0;
  *(_QWORD *)&v3[v12] = v14;
  *(_QWORD *)&v3[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener] = 0;
  v15 = OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController;
  v16 = type metadata accessor for CardViewModel(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = v3;
  v18 = sub_100025538();
  v19 = sub_100003E48(&qword_1000C6D70, type metadata accessor for CardViewModel, (uint64_t)&unk_100081D00);
  v20 = ObservedObject.init(wrappedValue:)(v18, v16, v19);
  v22 = v21;
  v23 = objc_allocWithZone((Class)sub_100004B18(&qword_1000C6D78));
  *(_QWORD *)&v3[v15] = sub_100012C68(v20, v22);
  v24 = OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView;
  *(_QWORD *)&v17[v24] = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "init");
  *(_QWORD *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel] = 0;
  v25 = OBJC_IVAR____TtC13PCViewService13CardPresenter_homeAccessoryViewHandleState;
  v26 = type metadata accessor for HomeAccessoryViewHandleState();
  v27 = swift_allocObject(v26, 24, 7);
  v28 = sub_100004B18(&qword_1000C6D80);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  *(_QWORD *)(v27 + 16) = PassthroughSubject.init()();
  *(_QWORD *)&v17[v25] = v27;
  v29 = &v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_tasks] = &_swiftEmptySetSingleton;
  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, ObjectType, (uint64_t)&off_1000B3468);
  *(_QWORD *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_model] = a1;
  v30 = v44;
  *(_QWORD *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_state] = v44;
  v31 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__activityDisplayContext);
  swift_retain(a1);
  swift_retain(v30);
  v32 = swift_retain(v31);
  CurrentValueSubject.value.getter(v8, v32);
  v33 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48))(v8, 1, v43);
  if ((_DWORD)v33 == 1)
  {
    CurrentValueSubject.value.getter(v11, v33);
    sub_100017AB4((uint64_t)v8, &qword_1000C6D60);
  }
  else
  {
    sub_100017264((uint64_t)v8, (uint64_t)v11, type metadata accessor for ActivityDisplayContext);
  }
  swift_release(v31);
  sub_100017264((uint64_t)v11, (uint64_t)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_initialActivityDisplayContext], type metadata accessor for ActivityDisplayContext);
  v34 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_deviceAssetType);
  v35 = a1 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_localDeviceModel;
  v36 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_localDeviceModel);
  v37 = *(_QWORD *)(v35 + 8);
  v38 = type metadata accessor for HandoffFeatureEducationViewModel(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  swift_bridgeObjectRetain(v37);
  *(_QWORD *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_educationViewModel] = sub_100019F14(v34, v36, v37);

  v39 = (objc_class *)type metadata accessor for CardPresenter(0);
  v45.receiver = v17;
  v45.super_class = v39;
  return objc_msgSendSuper2(&v45, "init");
}

uint64_t sub_100017264(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000172A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((unint64_t)(a2 - 1) >= 3)
    return swift_unknownObjectRelease(a2, a2);
  return result;
}

uint64_t sub_1000172C0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000172E4(void *a1)
{
  uint64_t v1;

  sub_100012A7C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000172EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000172FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100017304()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100017314(void *a1)
{
  uint64_t v1;

  return sub_100012B90(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10001731C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100017340(uint64_t a1)
{
  uint64_t v1;

  sub_100012610(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100017348()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100017358(uint64_t a1)
{
  uint64_t v1;

  sub_1000129FC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100017360()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10001739C()
{
  uint64_t v0;

  return sub_100011A7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void))(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1000173AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  int v10;

  v10 = a8 >> 5;
  if (v10 == 2)
    return sub_100017424(result, a2, a3, a4, a5, a6, a7, a8 & 0x1F);
  if (v10 == 1)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  else if (!(a8 >> 5))
  {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100017424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a8 != 1)
  {
    if (a8)
      return result;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    a2 = a7;
  }
  return swift_bridgeObjectRelease(a2);
}

void sub_100017478()
{
  uint64_t v0;

  sub_1000115C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100017480()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000174B4()
{
  uint64_t v0;

  sub_100011450(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000174C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000174D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000174F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100017518()
{
  uint64_t v0;

  return sub_100010B74(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100017520()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

_BYTE *sub_10001754C(_BYTE *a1)
{
  uint64_t v1;

  return sub_100010E78(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(char *))(v1 + 24));
}

void sub_100017558()
{
  uint64_t v0;

  sub_100010D8C(v0);
}

uint64_t sub_100017568()
{
  uint64_t v0;

  return sub_1000105C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_100017570(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  swift_retain(a1[6]);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1000175C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000175D0()
{
  sub_10000583C();
}

unint64_t sub_1000175D8()
{
  unint64_t result;

  result = qword_1000C6E48;
  if (!qword_1000C6E48)
  {
    result = swift_getWitnessTable(&unk_100085D84, &type metadata for HandoffFeatureEducationViewHeader);
    atomic_store(result, (unint64_t *)&qword_1000C6E48);
  }
  return result;
}

uint64_t sub_10001761C()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_100017668()
{
  unint64_t result;

  result = qword_1000C6E58;
  if (!qword_1000C6E58)
  {
    result = swift_getWitnessTable(&unk_10008180C, &type metadata for HandoffFeatureEducationView);
    atomic_store(result, (unint64_t *)&qword_1000C6E58);
  }
  return result;
}

uint64_t sub_1000176AC()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[5]);
  if (v0[6])
    swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

_QWORD *sub_1000176F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  swift_release(v4);
  return a1;
}

uint64_t sub_100017740()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_100017764(void *a1, char a2)
{
  uint64_t v2;

  sub_10000F8C8(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_100017774()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100017798(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

id sub_1000177C4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain();
  else
    return a1;
}

void sub_1000177D0(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease();
  else

}

_QWORD *sub_1000177DC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_100017818()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6E98;
  if (!qword_1000C6E98)
  {
    v1 = sub_100005F48(&qword_1000C6E90);
    sub_10001789C();
    sub_10000AAFC(&qword_1000C6EA8, &qword_1000C6EB0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C6E98);
  }
  return result;
}

unint64_t sub_10001789C()
{
  unint64_t result;

  result = qword_1000C6EA0;
  if (!qword_1000C6EA0)
  {
    result = swift_getWitnessTable(&unk_10008AEF4, &type metadata for HomeAccessoryView);
    atomic_store(result, (unint64_t *)&qword_1000C6EA0);
  }
  return result;
}

uint64_t sub_1000178E0()
{
  uint64_t v0;

  return sub_100010428(v0);
}

uint64_t sub_1000178E8()
{
  uint64_t v0;

  return sub_1000104E8(v0);
}

void sub_1000178F0()
{
  uint64_t v0;

  sub_100010574(v0, sub_10000EE18);
}

void sub_100017910(void *a1, unsigned __int8 a2)
{
  if (a2 <= 0xFDu)
    sub_1000177D0(a1, a2 & 1);
}

uint64_t sub_100017928(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v5;
  char v6;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v3 = *((_BYTE *)a1 + 8);
  v5 = *a1;
  v6 = v3;
  return v2(&v5);
}

uint64_t sub_100017964()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100017988()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000179BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100016494(*(void **)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)(v1 + 16), *(uint64_t (**)(void **))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000179D4(uint64_t a1)
{
  return sub_10000E694(a1);
}

uint64_t sub_1000179DC(unsigned __int8 *a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a1;
  v3 = 0u;
  v4 = 0u;
  v5 = 0u;
  v6 = 96;
  v7 = 0xD000000000000025;
  v8 = 0x8000000100090380;
  return PassthroughSubject.send(_:)(&v2);
}

void sub_100017A44(uint64_t a1)
{
  uint64_t v1;

  sub_10000E774(a1, v1);
}

void sub_100017A4C(uint64_t a1)
{
  uint64_t v1;

  sub_10000E7E4(a1, v1);
}

void sub_100017A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000E834(a1, a2, v2);
}

unint64_t sub_100017A5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6F80;
  if (!qword_1000C6F80)
  {
    v1 = sub_10000AA28(255, (unint64_t *)&qword_1000C6E28, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1000C6F80);
  }
  return result;
}

uint64_t sub_100017AB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100004B18(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100017AF0()
{
  return sub_100017D98(&qword_1000C6F20);
}

uint64_t sub_100017AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = sub_100004B18(&qword_1000C6F20);
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64)
      + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_100016A3C(a1, *(uint64_t (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + v6), *(_QWORD *)(v2 + v6 + 8), *(_QWORD *)(v2 + v7), *(void **)(v2 + v7 + 8), a2, *(void **)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100017BA4(uint64_t a1)
{
  uint64_t v1;

  return sub_10000E8B8(a1, v1);
}

void sub_100017BAC()
{
  uint64_t v0;

  sub_100010574(v0, (void (*)(void))sub_100010848);
}

void sub_100017BCC(uint64_t a1)
{
  uint64_t v1;

  sub_10000EA0C(a1, v1);
}

uint64_t sub_100017BD4()
{
  return sub_100017D98(&qword_1000C6EF0);
}

void sub_100017BE0(float *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(sub_100004B18(&qword_1000C6EF0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *a2 = sub_1000168E8(*(uint64_t (**)(float *))(v2 + 16), *a1, *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100017C84(int *a1)
{
  uint64_t v1;

  return sub_10000EA74(a1, v1);
}

unint64_t sub_100017C8C()
{
  unint64_t result;

  result = qword_1000C7028;
  if (!qword_1000C7028)
  {
    result = swift_getWitnessTable(&unk_10008370C, &type metadata for CardMode);
    atomic_store(result, (unint64_t *)&qword_1000C7028);
  }
  return result;
}

uint64_t sub_100017CD0()
{
  return sub_100017D98(&qword_1000C6ED8);
}

uint64_t sub_100017CDC@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_QWORD *)(sub_100004B18(&qword_1000C6ED8) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  result = sub_1000167A0(*a1, *(uint64_t (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8)));
  *a2 = result;
  return result;
}

void sub_100017D84(char *a1)
{
  uint64_t v1;

  sub_10000EB14(a1, v1);
}

uint64_t sub_100017D8C()
{
  return sub_100017D98(&qword_1000C6EC0);
}

uint64_t sub_100017D98(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = sub_100004B18(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  if (*(_QWORD *)(v1 + 16))
    swift_release(*(_QWORD *)(v1 + 24));
  v6 = (v4 + 32) & ~v4;
  v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v6, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v8 + 8));

  return swift_deallocObject(v1, (v9 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v4 | 7);
}

uint64_t sub_100017E5C@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = *(_QWORD *)(sub_100004B18(&qword_1000C6EC0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  result = sub_100016654(*a1, *(uint64_t (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFF8)));
  *a2 = result & 1;
  return result;
}

uint64_t sub_100017F08(char *a1)
{
  uint64_t v1;

  return sub_10000EB80(a1, v1);
}

uint64_t sub_100017F28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004B18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100017F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a8 != 1)
  {
    if (a8)
      return result;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a3);
    a2 = a5;
  }
  return swift_bridgeObjectRetain(a2);
}

void sub_100017FB8(char a1)
{
  uint64_t v1;

  sub_10000C894(a1 & 1, v1);
}

uint64_t sub_100017FC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100018008(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_100018044(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

void sub_100018054(id a1)
{
  if (a1 != (id)2)
    sub_100013C94(a1);
}

uint64_t sub_100018064(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100004B18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for CardPresenter.PresentationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000180F4 + 4 * byte_100081095[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100018128 + 4 * byte_100081090[v4]))();
}

uint64_t sub_100018128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100018138);
  return result;
}

uint64_t sub_100018144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001814CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100018150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100018158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CardPresenter.PresentationState()
{
  return &type metadata for CardPresenter.PresentationState;
}

unint64_t sub_100018178()
{
  unint64_t result;

  result = qword_1000C7110;
  if (!qword_1000C7110)
  {
    result = swift_getWitnessTable(&unk_100081434, &type metadata for CardPresenter.PresentationState);
    atomic_store(result, (unint64_t *)&qword_1000C7110);
  }
  return result;
}

uint64_t *sub_100018210(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_100004B18(&qword_1000C7180);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v17[2];
    v16[2] = v19;
    v20 = (uint64_t *)((char *)a1 + v15);
    v21 = (uint64_t *)((char *)a2 + v15);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = a3[7];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain(v18);
    swift_retain(v19);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
  }
  return a1;
}

uint64_t sub_100018340(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v4 = sub_100004B18(&qword_1000C7180);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (char *)a1 + a2[5];
  swift_bridgeObjectRelease(*((_QWORD *)v6 + 1));
  swift_release(*((_QWORD *)v6 + 2));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
}

uint64_t *sub_1000183E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = sub_100004B18(&qword_1000C7180);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v15[2];
  v14[2] = v17;
  v18 = (uint64_t *)((char *)a1 + v13);
  v19 = (uint64_t *)((char *)a2 + v13);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[7];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *sub_1000184E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    sub_100017AB4((uint64_t)a1, &qword_1000C7180);
    v6 = sub_100004B18(&qword_1000C7180);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  *v13 = *(uint64_t *)((char *)a2 + v12);
  v15 = *(uint64_t *)((char *)a2 + v12 + 8);
  v16 = *(uint64_t *)((char *)a1 + v12 + 8);
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = v13[2];
  v18 = *((_QWORD *)v14 + 2);
  v13[2] = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = a3[6];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[7];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)((char *)a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

char *sub_100018644(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = sub_100004B18(&qword_1000C7180);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100018710(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_100017AB4((uint64_t)a1, &qword_1000C7180);
    v6 = sub_100004B18(&qword_1000C7180);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a2[v8 + 8];
  v12 = *(_QWORD *)&a1[v8 + 8];
  *(_QWORD *)v9 = *(_QWORD *)&a2[v8];
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *((_QWORD *)v9 + 2);
  *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  swift_release(v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v18 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  v19 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v24 = *(_QWORD *)v22;
  v23 = *((_QWORD *)v22 + 1);
  v25 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v21 = v24;
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_100018830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001883C);
}

uint64_t sub_10001883C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004B18(&qword_1000C7188);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000188C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000188CC);
}

uint64_t sub_1000188CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004B18(&qword_1000C7188);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CAImage(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C71E8;
  if (!qword_1000C71E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CAImage);
  return result;
}

void sub_100018988(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_100018A0C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100081488;
    v4[2] = &unk_1000814A0;
    v4[3] = &unk_1000814B8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100018A0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000C71F8)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000C71F8);
  }
}

uint64_t sub_100018A60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (**v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[3];

  v56 = a1;
  v55 = sub_100004B18(&qword_1000C7230);
  __chkstk_darwin(v55);
  v54 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CAImage(0);
  v51 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v51 + 64);
  __chkstk_darwin(v3);
  v57 = (uint64_t)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ColorScheme(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OpacityTransition(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v42 - v13;
  v50 = sub_100004B18(&qword_1000C7238);
  v15 = __chkstk_darwin(v50);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static Alignment.center.getter(v15);
  v48 = v19;
  v49 = v18;
  sub_100018FFC(v1, (uint64_t)&v58);
  v46 = v58;
  v47 = BYTE8(v58);
  v20 = v1 + *(int *)(v3 + 20);
  v21 = *(_QWORD *)(v20 + 16);
  v58 = *(_OWORD *)v20;
  v59 = v21;
  v22 = sub_100004B18(&qword_1000C7240);
  v23 = State.wrappedValue.getter(v60, v22);
  v24 = v60[1];
  v44 = v60[0];
  OpacityTransition.init()(v23);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v25 = sub_100019100();
  v26 = AnyTransition.init<A>(_:)(v12, v8, v25);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  v45 = v1;
  sub_100033094((uint64_t)v7);
  v27 = v57;
  sub_10001986C(v1, v57);
  v28 = *(unsigned __int8 *)(v51 + 80);
  v29 = (v28 + 16) & ~v28;
  v51 = v29 + v4;
  v43 = v28 | 7;
  v30 = swift_allocObject(&unk_1000B3B38, v29 + v4, v28 | 7);
  sub_1000198B4(v27, v30 + v29);
  v32 = v52;
  v31 = v53;
  v33 = (uint64_t)v54;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v54, v7, v53);
  v34 = (uint64_t (**)(uint64_t))(v33 + *(int *)(v55 + 36));
  *v34 = sub_1000198F8;
  v34[1] = (uint64_t (*)(uint64_t))v30;
  sub_100017F28(v33, (uint64_t)&v17[*(int *)(v50 + 36)], &qword_1000C7230);
  v35 = v48;
  *(_QWORD *)v17 = v49;
  *((_QWORD *)v17 + 1) = v35;
  v36 = v46;
  *((_QWORD *)v17 + 2) = v46;
  v17[24] = v47;
  *((_QWORD *)v17 + 4) = v44;
  *((_QWORD *)v17 + 5) = v24;
  *((_QWORD *)v17 + 6) = v26;
  swift_bridgeObjectRetain(v24);
  swift_retain(v26);
  swift_retain(v36);
  sub_100017AB4(v33, &qword_1000C7230);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v31);
  swift_release(v26);
  swift_bridgeObjectRelease(v24);
  swift_release(v36);
  v37 = v57;
  sub_10001986C(v45, v57);
  v38 = swift_allocObject(&unk_1000B3B60, v51, v43);
  sub_1000198B4(v37, v38 + v29);
  v39 = v56;
  sub_100017F28((uint64_t)v17, v56, &qword_1000C7238);
  v40 = (uint64_t (**)())(v39 + *(int *)(sub_100004B18(&qword_1000C7250) + 36));
  *v40 = sub_100019A1C;
  v40[1] = (uint64_t (*)())v38;
  v40[2] = 0;
  v40[3] = 0;
  return sub_100017AB4((uint64_t)v17, &qword_1000C7238);
}

uint64_t sub_100018E34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = type metadata accessor for ColorScheme(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for CAImage(0);
  v8 = (uint64_t *)(v1 + v7[7]);
  v9 = v8[1];
  if (!v9)
    goto LABEL_5;
  v10 = *v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for ColorScheme.dark(_:), v3);
  swift_bridgeObjectRetain(v9);
  v11 = static ColorScheme.== infix(_:_:)(a1, v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
LABEL_5:
    v14 = (uint64_t *)(v1 + v7[6]);
    v16 = *v14;
    v15 = v14[1];
    v17 = (__int128 *)(v1 + v7[5]);
    v18 = *((_QWORD *)v17 + 2);
    v23 = *v17;
    v24 = v18;
    v21 = v16;
    v22 = v15;
    swift_bridgeObjectRetain(v15);
    goto LABEL_6;
  }
  v12 = (__int128 *)(v1 + v7[5]);
  v13 = *((_QWORD *)v12 + 2);
  v23 = *v12;
  v24 = v13;
  v21 = v10;
  v22 = v9;
LABEL_6:
  v19 = sub_100004B18(&qword_1000C7240);
  return State.wrappedValue.setter(&v21, v19);
}

uint64_t sub_100018F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for ColorScheme(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033094((uint64_t)v3);
  sub_100018E34((uint64_t)v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

_QWORD *sub_100018FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *result;
  char v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;

  v3 = (__int128 *)(a1 + *(int *)(type metadata accessor for CAImage(0) + 20));
  v4 = *((_QWORD *)v3 + 2);
  v10 = *v3;
  v11 = v4;
  v5 = sub_100004B18(&qword_1000C7240);
  v6 = State.wrappedValue.getter(&v12, v5);
  if (*((_QWORD *)&v12 + 1))
  {
    v10 = v12;
    v7 = sub_100019A48();
    *(_QWORD *)&v12 = AnyView.init<A>(_:)(&v10, &type metadata for CAPackageImage, v7);
    BYTE8(v12) = 0;
  }
  else
  {
    *(_QWORD *)&v12 = AnyView.init<A>(_:)(v6, &type metadata for EmptyView, &protocol witness table for EmptyView);
    BYTE8(v12) = 1;
  }
  result = _ConditionalContent<>.init(storage:)(&v10, &v12, &type metadata for AnyView, &type metadata for AnyView, &protocol witness table for AnyView, &protocol witness table for AnyView);
  v9 = BYTE8(v10);
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v9;
  return result;
}

uint64_t sub_1000190F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009695C, 1);
}

unint64_t sub_100019100()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7248;
  if (!qword_1000C7248)
  {
    v1 = type metadata accessor for OpacityTransition(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OpacityTransition, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7248);
  }
  return result;
}

void sub_100019148(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  Swift::String v8;
  id v9;
  NSString v10;
  void *v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  Class isa;
  Swift::String v44;
  Swift::String v45;
  NSString v46;

  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain(a4);
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(a4);
  v8._countAndFlagsBits = 11810;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9 = sub_10005347C();
  swift_bridgeObjectRetain(0x8000000100090410);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100090410);
  objc_msgSend(v9, "ulog:message:", 40, v10);
  swift_bridgeObjectRelease(0x8000000100090410);

  v11 = (void *)objc_opt_self(NSBundle);
  swift_bridgeObjectRetain(a4);
  v12 = objc_msgSend(v11, "mainBundle");
  v13 = objc_allocWithZone((Class)BSUICAPackageView);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v15 = objc_msgSend(v13, "initWithPackageName:inBundle:", v14, v12);

  if (!v15)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRetain(a4);
    v23._countAndFlagsBits = a3;
    v23._object = a4;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(a4);
    v24._countAndFlagsBits = 11810;
    v24._object = (void *)0xE200000000000000;
    String.append(_:)(v24);
    v25 = sub_10005347C();
    swift_bridgeObjectRetain(0x8000000100090430);
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0x8000000100090430);
    objc_msgSend(v25, "ulog:message:", 40, v46);
    swift_bridgeObjectRelease(0x8000000100090430);
LABEL_16:

    return;
  }
  objc_msgSend(v15, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v16 = objc_msgSend(a1, "subviews");
  v17 = sub_10000AA28(0, (unint64_t *)&qword_1000C72B0, UIView_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if (!((unint64_t)v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v18);
    if (v19)
      goto LABEL_4;
LABEL_15:
    swift_bridgeObjectRelease_n(v18, 2);
    objc_msgSend(a1, "addSubview:", v15);
    v27 = (void *)objc_opt_self(NSLayoutConstraint);
    v28 = sub_100004B18(&qword_1000C6E00);
    v29 = swift_allocObject(v28, 64, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100081460;
    v30 = objc_msgSend(a1, "topAnchor");
    v31 = objc_msgSend(v15, "topAnchor");
    v32 = objc_msgSend(v30, "constraintEqualToAnchor:", v31);

    *(_QWORD *)(v29 + 32) = v32;
    v33 = objc_msgSend(a1, "bottomAnchor");
    v34 = objc_msgSend(v15, "bottomAnchor");
    v35 = objc_msgSend(v33, "constraintEqualToAnchor:", v34);

    *(_QWORD *)(v29 + 40) = v35;
    v36 = objc_msgSend(a1, "rightAnchor");
    v37 = objc_msgSend(v15, "rightAnchor");
    v38 = objc_msgSend(v36, "constraintEqualToAnchor:", v37);

    *(_QWORD *)(v29 + 48) = v38;
    v39 = objc_msgSend(a1, "leftAnchor");
    v40 = objc_msgSend(v15, "leftAnchor");
    v41 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

    *(_QWORD *)(v29 + 56) = v41;
    specialized Array._endMutation()(v42);
    sub_10000AA28(0, &qword_1000C72B8, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    objc_msgSend(v27, "activateConstraints:", isa);

    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRetain(a4);
    v44._countAndFlagsBits = a3;
    v44._object = a4;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(a4);
    v45._countAndFlagsBits = 0x6F6C207361772022;
    v45._object = (void *)0xED00002E64656461;
    String.append(_:)(v45);
    v25 = sub_10005347C();
    swift_bridgeObjectRetain(0xEB00000000222065);
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xEB00000000222065);
    objc_msgSend(v25, "ulog:message:", 40, v46);
    swift_bridgeObjectRelease(0xEB00000000222065);

    goto LABEL_16;
  }
  if (v18 < 0)
    v26 = v18;
  else
    v26 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v19 = _CocoaArrayWrapper.endIndex.getter(v26);
  if (!v19)
    goto LABEL_15;
LABEL_4:
  if (v19 >= 1)
  {
    for (i = 0; i != v19; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0)
        v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
      else
        v21 = *(id *)(v18 + 8 * i + 32);
      v22 = v21;
      objc_msgSend(v21, "removeFromSuperview");

    }
    goto LABEL_15;
  }
  __break(1u);
}

id sub_100019778()
{
  return objc_msgSend(objc_allocWithZone((Class)UIView), "init");
}

void sub_10001979C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100019148(a1, a2, *(_QWORD *)v2, *(void **)(v2 + 8));
}

uint64_t sub_1000197A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100019D58();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000197F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100019D58();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100019848(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100019D58();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

uint64_t sub_10001986C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CAImage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000198B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CAImage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000198F8(uint64_t a1)
{
  type metadata accessor for CAImage(0);
  return sub_100018E34(a1);
}

uint64_t sub_10001993C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v1 = (int *)type metadata accessor for CAImage(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_100004B18(&qword_1000C7180);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = v4 + v5;
  v10 = (char *)v6 + v1[5];
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  swift_release(*((_QWORD *)v10 + 2));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + v1[7] + 8));
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_100019A1C()
{
  type metadata accessor for CAImage(0);
  return sub_100018F7C();
}

unint64_t sub_100019A48()
{
  unint64_t result;

  result = qword_1000C7258;
  if (!qword_1000C7258)
  {
    result = swift_getWitnessTable(&unk_1000815E0, &type metadata for CAPackageImage);
    atomic_store(result, (unint64_t *)&qword_1000C7258);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CAPackageImage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for CAPackageImage(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for CAPackageImage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for CAPackageImage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CardView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CAPackageImage()
{
  return &type metadata for CAPackageImage;
}

unint64_t sub_100019BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7260;
  if (!qword_1000C7260)
  {
    v1 = sub_100005F48(&qword_1000C7250);
    sub_100019C34();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7260);
  }
  return result;
}

unint64_t sub_100019C34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7268;
  if (!qword_1000C7268)
  {
    v1 = sub_100005F48(&qword_1000C7238);
    sub_100019CB8();
    sub_10000AAFC(&qword_1000C72A0, &qword_1000C7230, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7268);
  }
  return result;
}

unint64_t sub_100019CB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7270;
  if (!qword_1000C7270)
  {
    v1 = sub_100005F48(&qword_1000C7278);
    sub_10000AAFC(&qword_1000C7280, &qword_1000C7288, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_10000AAFC(&qword_1000C7290, &qword_1000C7298, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7270);
  }
  return result;
}

unint64_t sub_100019D58()
{
  unint64_t result;

  result = qword_1000C72A8;
  if (!qword_1000C72A8)
  {
    result = swift_getWitnessTable(&unk_100081550, &type metadata for CAPackageImage);
    atomic_store(result, (unint64_t *)&qword_1000C72A8);
  }
  return result;
}

uint64_t sub_100019DA4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000816C8);
  v2 = swift_getKeyPath(&unk_1000816F0);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

float sub_100019E14()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000817A0);
  v2 = swift_getKeyPath(&unk_1000817C8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return *(float *)&v4;
}

uint64_t sub_100019E84()
{
  return sub_100019EAC((uint64_t)&unk_100081758, (uint64_t)&unk_100081780);
}

uint64_t sub_100019E98()
{
  return sub_100019EAC((uint64_t)&unk_100081710, (uint64_t)&unk_100081738);
}

uint64_t sub_100019EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t *sub_100019F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74[4];

  v4 = v3;
  v61 = a2;
  v62 = a3;
  v60 = a1;
  v58 = *v3;
  v5 = sub_100004B18(&qword_1000C6F18);
  __chkstk_darwin(v5);
  v64 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v70 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  __chkstk_darwin(v7);
  v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004B18(&qword_1000C74E8);
  v10 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  v67 = v10;
  __chkstk_darwin(v9);
  v57 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004B18(&qword_1000C74F0);
  v13 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  v69 = v13;
  __chkstk_darwin(v12);
  v63 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004B18(&qword_1000C74F8);
  v16 = *(_QWORD *)(v15 - 8);
  v72 = v15;
  v73 = v16;
  __chkstk_darwin(v15);
  v65 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100004B18(&qword_1000C7500);
  v56 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100004B18(&qword_1000C7508);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100004B18(&qword_1000C7510);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__state;
  LOBYTE(v74[0]) = 0;
  Published.init(initialValue:)(v74, &type metadata for EducationViewState);
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v28, v25);
  v30 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__progress;
  LODWORD(v74[0]) = 0;
  Published.init(initialValue:)(v74, &type metadata for Float);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v30, v24, v21);
  v31 = OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_educationViewEventSubject;
  v32 = sub_100004B18(&qword_1000C6F30);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  *(uint64_t *)((char *)v4 + v31) = PassthroughSubject.init()();
  v33 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isViewPresenting;
  LOBYTE(v74[0]) = 0;
  Published.init(initialValue:)(v74, &type metadata for Bool);
  v34 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v34(v33, v20, v18);
  v35 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isIntroAnimationComplete;
  LOBYTE(v74[0]) = 0;
  Published.init(initialValue:)(v74, &type metadata for Bool);
  v34(v35, v20, v18);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_tasks) = (uint64_t)&_swiftEmptySetSingleton;
  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, v58, (uint64_t)&off_1000B3CE0);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_deviceAssetType) = v60;
  v36 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_localDeviceModel);
  v37 = v62;
  *v36 = v61;
  v36[1] = v37;
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__state, v74, 33, 0);
  v38 = v57;
  Published.projectedValue.getter(v25);
  swift_endAccess(v74);
  v39 = v59;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(8);
  v40 = sub_10001A940();
  v74[0] = (id)static OS_dispatch_queue.main.getter(v40);
  v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v42 = (uint64_t)v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v64, 1, 1, v41);
  v43 = sub_10000AAFC(&qword_1000C7518, &qword_1000C74E8, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v44 = sub_100003E48((unint64_t *)&qword_1000C6F80, (uint64_t (*)(uint64_t))sub_10001A940, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v45 = v63;
  v46 = v66;
  Publisher.debounce<A>(for:scheduler:options:)(v39, v74, v42, v66, v40, v43, v44);
  sub_100017AB4(v42, &qword_1000C6F18);

  (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v71);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v38, v46);
  v47 = sub_10000AAFC(&qword_1000C7520, &qword_1000C74F0, (uint64_t)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v48 = v65;
  v49 = v68;
  Publisher.filter(_:)(sub_10001A504, 0, v68, v47);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v45, v49);
  v50 = swift_allocObject(&unk_1000B3D20, 24, 7);
  swift_weakInit(v50 + 16, v4);
  v51 = sub_10000AAFC(&qword_1000C7528, &qword_1000C74F8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v52 = v72;
  v53 = Publisher<>.sink(receiveValue:)(sub_10001A9A0, v50, v72, v51);
  swift_release(v50);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v48, v52);
  v54 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_tasks;
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_tasks, v74, 33, 0);
  AnyCancellable.store(in:)(v54);
  swift_endAccess(v74);
  swift_release(v53);
  return v4;
}

BOOL sub_10001A504(_BYTE *a1)
{
  return *a1 == 0;
}

uint64_t sub_10001A514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    KeyPath = swift_getKeyPath(&unk_1000816C8);
    v6 = swift_getKeyPath(&unk_1000816F0);
    v7 = 1;
    return static Published.subscript.setter(&v7, v4, KeyPath, v6);
  }
  return result;
}

uint64_t sub_10001A594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v1 = v0;
  BYTE1(v8) = 2;
  PassthroughSubject.send(_:)((char *)&v8 + 1);
  KeyPath = swift_getKeyPath(&unk_1000816C8);
  v3 = swift_getKeyPath(&unk_1000816F0);
  static Published.subscript.getter(&v8, v1, KeyPath, v3);
  swift_release(KeyPath);
  result = swift_release(v3);
  if (v8 == 1)
  {
    v5 = swift_getKeyPath(&unk_1000816C8);
    v6 = swift_getKeyPath(&unk_1000816F0);
    v7 = 0;
    swift_retain(v1);
    return static Published.subscript.setter(&v7, v1, v5, v6);
  }
  return result;
}

uint64_t sub_10001A66C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__state;
  v2 = sub_100004B18(&qword_1000C7510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__progress;
  v4 = sub_100004B18(&qword_1000C7508);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_localDeviceModel
                                      + 8));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_educationViewEventSubject));
  v5 = v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isViewPresenting;
  v6 = sub_100004B18(&qword_1000C7500);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isIntroAnimationComplete, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_tasks));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10001A76C()
{
  return type metadata accessor for HandoffFeatureEducationViewModel(0);
}

uint64_t type metadata accessor for HandoffFeatureEducationViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C7318;
  if (!qword_1000C7318)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HandoffFeatureEducationViewModel);
  return result;
}

void sub_10001A7B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t v10;
  char *v11;

  sub_10001A8B4(319, &qword_1000C7328, (uint64_t)&type metadata for EducationViewState);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10001A8B4(319, &qword_1000C7330, (uint64_t)&type metadata for Float);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[3] = &unk_100081668;
      v8[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      sub_10001A8B4(319, (unint64_t *)&qword_1000C7338, (uint64_t)&type metadata for Bool);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_updateClassMetadata2(a1, 256, 8, v8, a1 + 80);
      }
    }
  }
}

void sub_10001A8B4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void *sub_10001A8F8()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10001A904@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for HandoffFeatureEducationViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

unint64_t sub_10001A940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6E28;
  if (!qword_1000C6E28)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C6E28);
  }
  return result;
}

uint64_t sub_10001A97C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001A9A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10001A514(a1, v1);
}

uint64_t sub_10001A9A8@<X0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double (*v30)();
  __int128 v31;
  double (**v32)();
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;

  v46 = a2;
  v3 = sub_100004B18(&qword_1000C7530);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100004B18(&qword_1000C7538);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004B18(&qword_1000C7540);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100004B18(&qword_1000C7548);
  __chkstk_darwin(v44);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100004B18(&qword_1000C7550);
  v14 = __chkstk_darwin(v45);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v5 = static Alignment.bottom.getter(v14);
  v5[1] = v17;
  v18 = sub_100004B18(&qword_1000C7558);
  v19 = sub_10001ADC8(a1, (uint64_t)v5 + *(int *)(v18 + 44));
  v20 = static Edge.Set.bottom.getter(v19);
  v21 = static SafeAreaRegions.all.getter();
  sub_100017F28((uint64_t)v5, (uint64_t)v8, &qword_1000C7530);
  v22 = &v8[*(int *)(v6 + 36)];
  *(_QWORD *)v22 = v21;
  v22[8] = v20;
  v23 = sub_100017AB4((uint64_t)v5, &qword_1000C7530);
  v24 = static Alignment.center.getter(v23);
  sub_1000242A4(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v11, 0.0, 1, INFINITY, 0, v24, v25);
  sub_100017AB4((uint64_t)v8, &qword_1000C7538);
  v26 = *a1;
  v48 = a1[1];
  v49 = v26;
  v27 = *((_QWORD *)&v26 + 1);
  v28 = *((_QWORD *)a1 + 4);
  v29 = *((_QWORD *)a1 + 5);
  v30 = (double (*)())swift_allocObject(&unk_1000B3DF8, 64, 7);
  v31 = a1[1];
  *((_OWORD *)v30 + 1) = *a1;
  *((_OWORD *)v30 + 2) = v31;
  *((_OWORD *)v30 + 3) = a1[2];
  sub_100017F28((uint64_t)v11, (uint64_t)v13, &qword_1000C7540);
  v32 = (double (**)())&v13[*(int *)(v44 + 36)];
  *v32 = sub_10001C1B4;
  v32[1] = v30;
  v32[2] = 0;
  v32[3] = 0;
  sub_10001C188((uint64_t)&v49);
  sub_10001C188((uint64_t)&v48);
  sub_100007A80(v28, v29);
  sub_100017AB4((uint64_t)v11, &qword_1000C7540);
  KeyPath = swift_getKeyPath(&unk_1000816C8);
  v34 = swift_getKeyPath(&unk_1000816F0);
  v35 = swift_retain(v27);
  static Published.subscript.getter(&v47, v35, KeyPath, v34);
  swift_release(KeyPath);
  swift_release(v34);
  sub_10001C1BC((uint64_t)&v49);
  LOBYTE(v34) = v47;
  v36 = (_OWORD *)swift_allocObject(&unk_1000B3E20, 64, 7);
  v37 = a1[1];
  v36[1] = *a1;
  v36[2] = v37;
  v36[3] = a1[2];
  sub_100017F28((uint64_t)v13, (uint64_t)v16, &qword_1000C7548);
  v38 = v45;
  v39 = &v16[*(int *)(v45 + 36)];
  *v39 = v34;
  *((_QWORD *)v39 + 1) = sub_10001C1E8;
  *((_QWORD *)v39 + 2) = v36;
  sub_10001C188((uint64_t)&v49);
  sub_10001C188((uint64_t)&v48);
  sub_100007A80(v28, v29);
  sub_100017AB4((uint64_t)v13, &qword_1000C7548);
  v40 = (_OWORD *)swift_allocObject(&unk_1000B3E48, 64, 7);
  v41 = a1[1];
  v40[1] = *a1;
  v40[2] = v41;
  v40[3] = a1[2];
  sub_10001C188((uint64_t)&v49);
  sub_10001C188((uint64_t)&v48);
  sub_100007A80(v28, v29);
  v42 = sub_10001C1FC();
  View.onTapGesture(count:perform:)(1, sub_10001C1F4, v40, v38, v42);
  swift_release(v40);
  return sub_100017AB4((uint64_t)v16, &qword_1000C7550);
}

_QWORD *sub_10001ADC8@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  char v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  double *v51;
  uint64_t v52;
  char v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  double *v62;
  uint64_t v63;
  _BYTE *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v78[4];
  int v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  _OWORD v93[11];
  uint64_t v94;
  _OWORD v95[11];
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float v108;
  unsigned __int128 v109;
  char v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;

  v4 = sub_100004B18(&qword_1000C75A0);
  __chkstk_darwin(v4);
  v81 = &v78[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v80 = sub_100004B18(&qword_1000C75A8);
  __chkstk_darwin(v80);
  v83 = &v78[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100004B18(&qword_1000C75B0);
  v89 = *(_QWORD *)(v7 - 8);
  v90 = v7;
  __chkstk_darwin(v7);
  v82 = &v78[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100004B18(&qword_1000C75B8);
  v10 = __chkstk_darwin(v9);
  v92 = &v78[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v91 = &v78[-v12];
  v88 = a1;
  v103 = *a1;
  v13 = *((_QWORD *)&v103 + 1);
  KeyPath = swift_getKeyPath(&unk_1000816C8);
  v15 = swift_getKeyPath(&unk_1000816F0);
  v16 = swift_retain(v13);
  static Published.subscript.getter(&v112, v16, KeyPath, v15);
  swift_release(KeyPath);
  swift_release(v15);
  sub_10001C1BC((uint64_t)&v103);
  v87 = *(_QWORD *)(v13 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_deviceAssetType);
  v86 = v112;
  v17 = *(_QWORD *)(v13 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_localDeviceModel);
  v18 = *(_QWORD *)(v13 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_localDeviceModel + 8);
  v19 = swift_getKeyPath(&unk_1000817A0);
  v20 = swift_getKeyPath(&unk_1000817C8);
  sub_10001C188((uint64_t)&v103);
  swift_bridgeObjectRetain(v18);
  static Published.subscript.getter(&v112, v13, v19, v20);
  swift_release(v19);
  swift_release(v20);
  v21 = *(float *)&v112;
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v22 = *(_QWORD *)(qword_1000DF570 + 160);
  swift_retain(v22);
  v23 = sub_100022118();
  swift_release(v22);
  v24 = powf(v21, (float)v23);
  sub_10001C1BC((uint64_t)&v103);
  *(_QWORD *)&v95[0] = 0;
  v25 = sub_100004B18(&qword_1000C75C0);
  State.init(wrappedValue:)(v95, v25);
  v27 = *((_QWORD *)&v112 + 1);
  v26 = (void *)v112;
  LOBYTE(v95[0]) = 0;
  v28 = State.init(wrappedValue:)(v95, &type metadata for Bool);
  v36 = *((_QWORD *)&v112 + 1);
  v104 = v86;
  v105 = v87;
  v106 = v17;
  v107 = v18;
  v108 = v24;
  v109 = __PAIR128__(v27, (unint64_t)v26);
  v110 = v112;
  v111 = *((_QWORD *)&v112 + 1);
  v29 = static Alignment.center.getter(v28);
  v30 = 1;
  sub_1000242FC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v112, 0.0, 1, INFINITY, 0, v29, v31);
  swift_bridgeObjectRelease(v18);

  swift_release(v27);
  swift_release(v36);
  v33 = static Alignment.center.getter(v32);
  _FrameLayout.init(width:height:alignment:)(&v97, 0, 1, 0x4065400000000000, 0, v33, v34);
  v35 = v97;
  LODWORD(v36) = v98;
  v87 = v99;
  v86 = v100;
  v84 = v102;
  v85 = v101;
  v95[0] = v88[1];
  v37 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(v93, v37);
  v38 = v90;
  v39 = (uint64_t)v91;
  if (LOBYTE(v93[0]) == 1)
  {
    v79 = v36;
    v36 = v35;
    v40 = v81;
    v41 = sub_10001B434((uint64_t)v81);
    v42 = static Edge.Set.horizontal.getter(v41);
    v43 = EdgeInsets.init(_all:)(34.0);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    v50 = v83;
    sub_100017F28((uint64_t)v40, (uint64_t)v83, &qword_1000C75A0);
    v51 = (double *)&v50[*(int *)(v80 + 36)];
    *(_BYTE *)v51 = v42;
    v51[1] = v43;
    *((_QWORD *)v51 + 2) = v45;
    *((_QWORD *)v51 + 3) = v47;
    *((_QWORD *)v51 + 4) = v49;
    *((_BYTE *)v51 + 40) = 0;
    v52 = sub_100017AB4((uint64_t)v40, &qword_1000C75A0);
    v53 = static Edge.Set.bottom.getter(v52);
    v54 = EdgeInsets.init(_all:)(44.0);
    v56 = v55;
    v58 = v57;
    v60 = v59;
    v61 = v82;
    sub_100017F28((uint64_t)v50, (uint64_t)v82, &qword_1000C75A8);
    v62 = (double *)&v61[*(int *)(v38 + 36)];
    *(_BYTE *)v62 = v53;
    v62[1] = v54;
    *((_QWORD *)v62 + 2) = v56;
    *((_QWORD *)v62 + 3) = v58;
    *((_QWORD *)v62 + 4) = v60;
    *((_BYTE *)v62 + 40) = 0;
    sub_100017AB4((uint64_t)v50, &qword_1000C75A8);
    v63 = (uint64_t)v61;
    v35 = v36;
    LOBYTE(v36) = v79;
    sub_10001C4B4(v63, v39);
    v30 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v39, v30, 1, v38);
  v64 = v92;
  sub_100017F28(v39, (uint64_t)v92, &qword_1000C75B8);
  v65 = v119;
  v93[8] = v120;
  v93[9] = v121;
  v66 = v121;
  v93[10] = v122;
  v68 = v115;
  v93[4] = v116;
  v67 = v116;
  v93[5] = v117;
  v69 = v117;
  v93[6] = v118;
  v70 = v118;
  v93[7] = v119;
  v93[0] = v112;
  v93[1] = v113;
  v72 = v112;
  v71 = v113;
  v93[2] = v114;
  v73 = v114;
  v93[3] = v115;
  *(_OWORD *)(a2 + 128) = v120;
  *(_OWORD *)(a2 + 144) = v66;
  *(_OWORD *)(a2 + 160) = v122;
  *(_OWORD *)(a2 + 64) = v67;
  *(_OWORD *)(a2 + 80) = v69;
  *(_OWORD *)(a2 + 96) = v70;
  *(_OWORD *)(a2 + 112) = v65;
  *(_OWORD *)a2 = v72;
  *(_OWORD *)(a2 + 16) = v71;
  v74 = v123;
  v94 = v123;
  *(_OWORD *)(a2 + 32) = v73;
  *(_OWORD *)(a2 + 48) = v68;
  *(_QWORD *)(a2 + 176) = v74;
  *(_QWORD *)(a2 + 184) = 0x4008000000000000;
  *(_QWORD *)(a2 + 192) = v35;
  *(_BYTE *)(a2 + 200) = v36;
  *(_QWORD *)(a2 + 208) = v87;
  *(_BYTE *)(a2 + 216) = v86;
  v75 = v84;
  *(_QWORD *)(a2 + 224) = v85;
  *(_QWORD *)(a2 + 232) = v75;
  v76 = sub_100004B18(&qword_1000C75C8);
  sub_100017F28((uint64_t)v64, a2 + *(int *)(v76 + 64), &qword_1000C75B8);
  sub_10001C41C(v93);
  sub_100017AB4(v39, &qword_1000C75B8);
  sub_100017AB4((uint64_t)v64, &qword_1000C75B8);
  v95[8] = v120;
  v95[9] = v121;
  v95[10] = v122;
  v96 = v123;
  v95[4] = v116;
  v95[5] = v117;
  v95[6] = v118;
  v95[7] = v119;
  v95[0] = v112;
  v95[1] = v113;
  v95[2] = v114;
  v95[3] = v115;
  return sub_10001C468(v95);
}

uint64_t sub_10001B434@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v38 = a1;
  v2 = type metadata accessor for OpacityTransition(0);
  v37 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - v5;
  v7 = sub_100004B18(&qword_1000C75D0);
  v34 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100004B18(&qword_1000C75D8);
  v10 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(PCLocalizedString), "localizedStringForKey:", 19);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v39 = v14;
  v40 = v16;
  v17 = *v1;
  v41 = v1[1];
  v42 = v17;
  v18 = *((_QWORD *)v1 + 4);
  v19 = *((_QWORD *)v1 + 5);
  v20 = (_OWORD *)swift_allocObject(&unk_1000B3E70, 64, 7);
  v21 = v1[1];
  v20[1] = *v1;
  v20[2] = v21;
  v20[3] = v1[2];
  sub_10001C188((uint64_t)&v42);
  sub_10001C188((uint64_t)&v41);
  sub_100007A80(v18, v19);
  v22 = sub_10001C564();
  Button<>.init<A>(_:action:)(&v39, sub_10001C53C, v20, &type metadata for String, v22);
  v39 = 0x4020000000000000;
  LOBYTE(v40) = 1;
  v23 = sub_10000AAFC(&qword_1000C75E8, &qword_1000C75D0, (uint64_t)&protocol conformance descriptor for Button<A>);
  v24 = sub_10001C5A8();
  View.buttonStyle<A>(_:)(&v39, v7, &type metadata for PrimaryButtonStyle, v23, v24);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  OpacityTransition.init()(v25);
  v26 = v36;
  v27 = v37;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v36, v6, v2);
  v28 = sub_100003E48((unint64_t *)&qword_1000C7248, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v29 = AnyTransition.init<A>(_:)(v26, v2, v28);
  v30 = v38;
  v31 = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v38, v12, v35);
  *(_QWORD *)(v30 + *(int *)(sub_100004B18(&qword_1000C75A0) + 36)) = v29;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v31);
}

double sub_10001B710(__int128 *a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;

  v12 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000816C8);
  v2 = swift_getKeyPath(&unk_1000816F0);
  v3 = swift_retain(*((_QWORD *)&v12 + 1));
  static Published.subscript.getter(&v11, v3, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  sub_10001C1BC((uint64_t)&v12);
  if (v11 == 2)
  {
    if (qword_1000C5D80 != -1)
      swift_once(&qword_1000C5D80, sub_10003F290);
    v5 = *(_QWORD *)(qword_1000DF570 + 280);
    swift_retain(v5);
    v6 = sub_100022C38();
    swift_release(v5);
    if ((v6 & 1) != 0)
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74756F656D6974, 0xE700000000000000, 0x6E6F74747562, 0xE600000000000000, 0);
      v7 = swift_bridgeObjectRelease(0xE700000000000000);
      if ((v8 & 1) == 0)
        return result;
    }
    else
    {
      v7 = swift_bridgeObjectRelease(0xE600000000000000);
    }
    v9 = static Animation.easeInOut.getter(v7);
    v10 = __chkstk_darwin(v9);
    withAnimation<A>(_:_:)(v10, sub_10001C3B0);
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

double sub_10001B890(_BYTE *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  if (*a1 == 2)
  {
    if (qword_1000C5D80 != -1)
      swift_once(&qword_1000C5D80, sub_10003F290);
    v1 = *(_QWORD *)(qword_1000DF570 + 280);
    swift_retain(v1);
    v2 = sub_100022C38();
    swift_release(v1);
    if ((v2 & 1) != 0)
    {
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74756F656D6974, 0xE700000000000000, 0x6E6F74747562, 0xE600000000000000, 0);
      v3 = swift_bridgeObjectRelease(0xE700000000000000);
      if ((v4 & 1) == 0)
        return result;
    }
    else
    {
      v3 = swift_bridgeObjectRelease(0xE600000000000000);
    }
    v6 = static Animation.easeInOut.getter(v3);
    v7 = __chkstk_darwin(v6);
    withAnimation<A>(_:_:)(v7, sub_10001C3B0);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

void sub_10001B9B4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  __n128 v7;
  void (*v8)(__n128);

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v2 = *(_QWORD *)(qword_1000DF570 + 280);
  swift_retain(v2);
  v3 = sub_100022C38();
  swift_release(v2);
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F74747562, 0xE600000000000000, 0x74756F656D6974, 0xE700000000000000, 0);
    swift_bridgeObjectRelease(0xE600000000000000);
    if ((v4 & 1) == 0)
      return;
  }
  v5 = *(_QWORD *)(qword_1000DF570 + 200);
  swift_retain(v5);
  v6 = sub_100020AA8();
  v7 = swift_release(v5);
  if ((v6 & 1) != 0)
  {
    v8 = *(void (**)(__n128))(a1 + 32);
    if (v8)
      v8(v7);
  }
}

uint64_t sub_10001BAA4@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v8 = v1[1];
  v3 = *((_QWORD *)v1 + 4);
  v4 = *((_QWORD *)v1 + 5);
  v9 = *v1;
  v10 = v8;
  v5 = swift_allocObject(&unk_1000B3DD0, 64, 7);
  v6 = v1[1];
  *(_OWORD *)(v5 + 16) = *v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v4;
  *a1 = sub_10001C180;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;
  sub_10001C188((uint64_t)&v9);
  sub_10001C188((uint64_t)&v10);
  return sub_100007A80(v3, v4);
}

float sub_10001BB28@<S0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  float result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000817A0);
  v5 = swift_getKeyPath(&unk_1000817C8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  result = *(float *)&v7;
  *a2 = v7;
  return result;
}

uint64_t sub_10001BBA4(int *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000817A0);
  v5 = swift_getKeyPath(&unk_1000817C8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10001BC1C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000816C8);
  v5 = swift_getKeyPath(&unk_1000816F0);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10001BC9C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000816C8);
  v5 = swift_getKeyPath(&unk_1000816F0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_10001BD10@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_10001BD88(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  char v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_10001BDF4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100081710, (uint64_t)&unk_100081738, a2);
}

uint64_t sub_10001BE18(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100081710, (uint64_t)&unk_100081738);
}

uint64_t sub_10001BE3C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100081758, (uint64_t)&unk_100081780, a2);
}

uint64_t sub_10001BE60(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100081758, (uint64_t)&unk_100081780);
}

uint64_t destroy for HandoffFeatureEducationView(_QWORD *a1)
{
  uint64_t result;

  swift_release(a1[1]);
  result = swift_release(a1[3]);
  if (a1[4])
    return swift_release(a1[5]);
  return result;
}

uint64_t initializeWithCopy for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  swift_retain(v4);
  swift_retain(v5);
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v8)
    {
      v11 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = v11;
      swift_retain(v11);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v8)
  {
    swift_release(*(_QWORD *)(a1 + 40));
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain(v9);
  swift_release(v10);
  return a1;
}

__n128 initializeWithTake for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (v7)
    {
      v10 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = v10;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v7)
  {
    swift_release(*(_QWORD *)(a1 + 40));
    goto LABEL_7;
  }
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandoffFeatureEducationView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandoffFeatureEducationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeatureEducationView()
{
  return &type metadata for HandoffFeatureEducationView;
}

uint64_t sub_10001C16C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100096AE0, 1);
}

uint64_t sub_10001C180@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10001A9A8((__int128 *)(v1 + 16), a1);
}

uint64_t sub_10001C188(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

double sub_10001C1B4()
{
  uint64_t v0;

  return sub_10001B710((__int128 *)(v0 + 16));
}

uint64_t sub_10001C1BC(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

double sub_10001C1E8(_BYTE *a1)
{
  return sub_10001B890(a1);
}

void sub_10001C1F4()
{
  uint64_t v0;

  sub_10001B9B4(v0 + 16);
}

unint64_t sub_10001C1FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7560;
  if (!qword_1000C7560)
  {
    v1 = sub_100005F48(&qword_1000C7550);
    sub_10001C2C4(&qword_1000C7568, &qword_1000C7548, (void (*)(void))sub_10001C2A0);
    sub_10000AAFC(&qword_1000C7588, &qword_1000C7590, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7560);
  }
  return result;
}

uint64_t sub_10001C2A0()
{
  return sub_10001C2C4(&qword_1000C7570, &qword_1000C7540, (void (*)(void))sub_10001C32C);
}

uint64_t sub_10001C2C4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F48(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10001C32C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7578;
  if (!qword_1000C7578)
  {
    v1 = sub_100005F48(&qword_1000C7538);
    sub_10000AAFC(&qword_1000C7580, &qword_1000C7530, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7578);
  }
  return result;
}

uint64_t sub_10001C3B0()
{
  return sub_10001C3C4();
}

uint64_t sub_10001C3C4()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 16);
  v3 = 1;
  v1 = sub_100004B18(&qword_1000C7598);
  return State.wrappedValue.setter(&v3, v1);
}

_QWORD *sub_10001C41C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = a1[3];
  v4 = (void *)a1[5];
  v3 = a1[6];
  swift_retain(a1[8]);
  swift_bridgeObjectRetain(v2);
  v5 = v4;
  swift_retain(v3);
  return a1;
}

_QWORD *sub_10001C468(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v3 = (void *)a1[5];
  v2 = a1[6];
  v4 = a1[8];
  swift_bridgeObjectRelease(a1[3]);

  swift_release(v2);
  swift_release(v4);
  return a1;
}

uint64_t sub_10001C4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C75B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001C500()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[5]);
  if (v0[6])
    swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10001C53C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 48);
  if (v1)
    return v1();
  return result;
}

unint64_t sub_10001C564()
{
  unint64_t result;

  result = qword_1000C75E0;
  if (!qword_1000C75E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000C75E0);
  }
  return result;
}

unint64_t sub_10001C5A8()
{
  unint64_t result;

  result = qword_1000C75F0;
  if (!qword_1000C75F0)
  {
    result = swift_getWitnessTable(&unk_10008AB54, &type metadata for PrimaryButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1000C75F0);
  }
  return result;
}

uint64_t sub_10001C5EC()
{
  return sub_10000AAFC(&qword_1000C75F8, qword_1000C7600, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
}

uint64_t sub_10001C618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10001C620(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100081898;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10001C694(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain(v9);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v12 = v11[1];
    v10[1] = v12;
    swift_bridgeObjectRetain(v12);
  }
  return v4;
}

uint64_t sub_10001C750(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  return swift_bridgeObjectRelease(*(_QWORD *)(((a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10001C790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10001C7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v8[1];
  v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_10001C86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10001C8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = v7[1];
  v7[1] = v8[1];
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10001C934(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10001C9B0 + 4 * byte_100081860[v10]))();
  }
}

void sub_10001CA34(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_10001CB28()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10001CBA0);
}

void sub_10001CB30(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10001CB38);
  JUMPOUT(0x10001CBA0);
}

void sub_10001CB7C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10001CBA0);
}

void sub_10001CB84()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10001CBA0);
}

uint64_t sub_10001CB8C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x10001CB98);
    *(_QWORD *)(((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x10001CBA0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for Subtitle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subtitle);
}

uint64_t sub_10001CBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10001CBCC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1000818D8;
    v4[3] = &unk_1000818F0;
    v4[4] = &unk_1000818D8;
    v4[5] = &unk_1000818D8;
    swift_initStructMetadata(a1, 0, 6, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10001CC60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v11 = a1;
    v12 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v13 = ((unint64_t)a2 + v5 + 8) & ~v5;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain(v8);
    v14(v12, v13, v3);
    v15 = v12 + v6;
    v16 = v13 + v6;
    v17 = (v12 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v13 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)v18 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    else
    {
      v19 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)v17 = *(_QWORD *)v18;
      *(_QWORD *)(v17 + 8) = v19;
      swift_retain(v19);
    }
    *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
    v20 = (_QWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
    v21 = (_QWORD *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
    *v20 = *v21;
    v22 = v21[1];
    v20[1] = v22;
    v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    v8 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v23 + 8) = v8;
    swift_retain(v22);
  }
  swift_retain(v8);
  return v11;
}

uint64_t sub_10001CDCC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  swift_bridgeObjectRelease(*a1);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v5);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v7 >= 0xFFFFFFFFuLL)
    swift_release(v7[1]);
  v8 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v8 + 8));
  return swift_release(*(_QWORD *)(((v8 + 23) & 0xFFFFFFFFFFFFF8) + 8));
}

uint64_t *sub_10001CE64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v16 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *(_QWORD *)(v14 + 8) = v16;
    swift_retain(v16);
  }
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v17 = (_QWORD *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v13 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = v18[1];
  v17[1] = v19;
  v20 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v20 = *(_BYTE *)v21;
  v22 = *(_QWORD *)(v21 + 8);
  *(_QWORD *)(v20 + 8) = v22;
  swift_retain(v19);
  swift_retain(v22);
  return a1;
}

uint64_t *sub_10001CF6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 8) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  v15 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      v20 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v15 = v17;
      *(_QWORD *)(v15 + 8) = v20;
      swift_retain(v20);
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v15 = *(_OWORD *)v16;
    goto LABEL_8;
  }
  if (v17 < 0xFFFFFFFF)
  {
    swift_release(*(_QWORD *)(v15 + 8));
    goto LABEL_7;
  }
  v18 = *(_QWORD *)(v16 + 8);
  v19 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)v15 = v17;
  *(_QWORD *)(v15 + 8) = v18;
  swift_retain(v18);
  swift_release(v19);
LABEL_8:
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v21 = (_QWORD *)((v13 + 31) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  v23 = v21[1];
  v24 = v22[1];
  v21[1] = v24;
  swift_retain(v24);
  swift_release(v23);
  v25 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v25 = *(_BYTE *)v26;
  v27 = *(_QWORD *)(v25 + 8);
  v28 = *(_QWORD *)(v26 + 8);
  *(_QWORD *)(v25 + 8) = v28;
  swift_retain(v28);
  swift_release(v27);
  return a1;
}

_QWORD *sub_10001D0D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = ((unint64_t)a1 + v5 + 8) & ~v5;
  v7 = ((unint64_t)a2 + v5 + 8) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  v8 = *(_QWORD *)(v4 + 64);
  v9 = v6 + v8;
  v10 = v7 + v8;
  v11 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)v12 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  else
  {
    v13 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_QWORD *)(v11 + 8) = v13;
  }
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v14 = (_OWORD *)((v9 + 31) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v10 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  *(_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *sub_10001D1A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64);
  v12 = v9 + v11;
  v13 = v10 + v11;
  v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      v19 = *(_QWORD *)(v15 + 8);
      *(_QWORD *)v14 = v16;
      *(_QWORD *)(v14 + 8) = v19;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  if (v16 < 0xFFFFFFFF)
  {
    swift_release(*(_QWORD *)(v14 + 8));
    goto LABEL_7;
  }
  v17 = *(_QWORD *)(v15 + 8);
  v18 = *(_QWORD *)(v14 + 8);
  *(_QWORD *)v14 = v16;
  *(_QWORD *)(v14 + 8) = v17;
  swift_release(v18);
LABEL_8:
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v20 = (_QWORD *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v13 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = v20[1];
  v20[1] = v21[1];
  swift_release(v22);
  v23 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v23 = *(_BYTE *)v24;
  v25 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  swift_release(v25);
  return a1;
}

uint64_t sub_10001D2F0(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10001D384 + 4 * byte_10008186F[v10]))();
  }
}

void sub_10001D404(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 8) & ~v7) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_10001D514()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10001D57CLL);
}

void sub_10001D51C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10001D524);
  JUMPOUT(0x10001D57CLL);
}

void sub_10001D534()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10001D57CLL);
}

void sub_10001D53C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10001D57CLL);
}

void sub_10001D544(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x10001D578);
      JUMPOUT(0x10001D574);
    }
    JUMPOUT(0x10001D550);
  }
  JUMPOUT(0x10001D57CLL);
}

uint64_t type metadata accessor for MultipleSubtitles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MultipleSubtitles);
}

uint64_t sub_10001D5A0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char v94[16];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[6];

  v92 = a2;
  v4 = sub_100004B18(&qword_1000C7708);
  v91 = *(_QWORD *)(v4 - 8);
  v5 = v4;
  v80 = v4;
  v6 = __chkstk_darwin(v4);
  v90 = (uint64_t)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v88 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v6);
  v87 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 - 8);
  v74 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v9);
  v71 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100004B18(&qword_1000C7710);
  __chkstk_darwin(v77);
  v70 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000C7718);
  v85 = v14;
  __chkstk_darwin(v14);
  v72 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 24);
  v86 = *(_QWORD *)(v16 + 8);
  v17 = type metadata accessor for _ValueActionModifier(255, v8);
  v18 = type metadata accessor for ModifiedContent(0, v14, v17);
  v89 = *(_QWORD *)(v18 - 8);
  v19 = v18;
  __chkstk_darwin(v18);
  v78 = (char *)&v66 - v20;
  v21 = sub_10001E888();
  v75 = v21;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ValueActionModifier<A>, v17);
  v99[4] = v21;
  v99[5] = WitnessTable;
  v79 = v19;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v82 = v23;
  v81 = sub_10000AAFC(&qword_1000C7730, &qword_1000C7708, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v99[0] = v19;
  v99[1] = v5;
  v99[2] = v23;
  v99[3] = v81;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, v99, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 0);
  v83 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v24 = __chkstk_darwin(OpaqueTypeMetadata2);
  v73 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v76 = (char *)&v66 - v27;
  v28 = static Alignment.top.getter(v26);
  v30 = v29;
  v95 = v8;
  v96 = v16;
  v67 = v8;
  v31 = v16;
  v68 = v16;
  v93 = v2;
  v97 = v2;
  v32 = sub_100004B18(&qword_1000C7738);
  v98 = sub_10001C2C4(&qword_1000C7740, &qword_1000C7748, (void (*)(void))sub_10001E918);
  v33 = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v32);
  v34 = (uint64_t)v70;
  ZStack.init(alignment:content:)(v28, v30, sub_10001E90C, v94, v32, v33);
  v35 = v11;
  v69 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v36 = v71;
  v69(v71, v2, a1);
  v37 = *(unsigned __int8 *)(v35 + 80);
  v38 = v35;
  v39 = (v37 + 32) & ~v37;
  v74 += v39;
  v40 = v37 | 7;
  v41 = swift_allocObject(&unk_1000B3FD8, v74, v37 | 7);
  *(_QWORD *)(v41 + 16) = v8;
  *(_QWORD *)(v41 + 24) = v31;
  v42 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
  v42(v41 + v39, v36, a1);
  v43 = v77;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v77);
  v45 = (uint64_t)v72;
  View.onAppear(perform:)(sub_10001EA30, v41, v43, v44);
  swift_release(v41);
  sub_100017AB4(v34, &qword_1000C7710);
  v46 = v93;
  v48 = v87;
  v47 = v88;
  v49 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v93 + *(int *)(a1 + 36), v67);
  v69(v36, v46, a1);
  v50 = swift_allocObject(&unk_1000B4000, v74, v40);
  v51 = v68;
  *(_QWORD *)(v50 + 16) = v49;
  *(_QWORD *)(v50 + 24) = v51;
  v42(v50 + v39, v36, a1);
  v52 = v78;
  View.onChange<A>(of:perform:)(v48, sub_10001EA7C, v50, v85, v49, v75, v86);
  v53 = swift_release(v50);
  (*(void (**)(char *, uint64_t, __n128))(v47 + 8))(v48, v49, v53);
  sub_100017AB4(v45, &qword_1000C7718);
  v54 = v90;
  v55 = sub_10001E3C0(a1, v90);
  v56 = static GestureMask.all.getter(v55);
  v57 = v73;
  v58 = v79;
  v59 = v80;
  View.gesture<A>(_:including:)(v54, v56, v79, v80, v82, v81);
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v54, v59);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v52, v58);
  v60 = v83;
  v61 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
  v62 = v76;
  v63 = OpaqueTypeMetadata2;
  v61(v76, v57, OpaqueTypeMetadata2);
  v64 = *(void (**)(char *, uint64_t))(v60 + 8);
  v64(v57, v63);
  v61(v92, v62, v63);
  return ((uint64_t (*)(char *, uint64_t))v64)(v62, v63);
}

uint64_t sub_10001DBCC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;

  v40 = a5;
  v8 = type metadata accessor for MultipleSubtitles(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = sub_100004B18(&qword_1000C7738);
  v39 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v37 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v38 = (char *)&v36 - v16;
  *(_QWORD *)&v44 = *a1;
  v18 = type metadata accessor for Subtitle(255, a2, a3, v17);
  v19 = type metadata accessor for Array(0, v18);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
  RandomAccessCollection<>.indices.getter(&v45, v19, WitnessTable, &protocol witness table for Int);
  v44 = v45;
  KeyPath = swift_getKeyPath(&unk_100081980);
  (*(void (**)(char *, _QWORD *, uint64_t))(v9 + 16))(v12, a1, v8);
  v22 = *(unsigned __int8 *)(v9 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(&unk_1000B4078, v23 + v10, v22 | 7);
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v23, v12, v8);
  v25 = sub_100004B18(&qword_1000C77D8);
  v26 = sub_100004B18(&qword_1000C7748);
  v27 = sub_10001ECD8();
  v42 = &protocol witness table for Int;
  v43 = v27;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v25);
  v29 = sub_10001C2C4(&qword_1000C7740, &qword_1000C7748, (void (*)(void))sub_10001E918);
  v30 = v37;
  ForEach<>.init(_:id:content:)(&v44, KeyPath, sub_10001EC70, v24, v25, v26, v28, &protocol witness table for Int, v29);
  v41 = v29;
  swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v13);
  v32 = v38;
  v31 = v39;
  v33 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v33(v38, v30, v13);
  v34 = *(void (**)(char *, uint64_t))(v31 + 8);
  v34(v30, v13);
  v33(v40, v32, v13);
  return ((uint64_t (*)(char *, uint64_t))v34)(v32, v13);
}

double sub_10001DE7C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  double result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[7];
  _BYTE v52[7];
  _BYTE v53[7];
  char v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  _DWORD v60[2];
  _DWORD v61[2];
  _DWORD v62[4];

  *(_QWORD *)&v48 = a4;
  v47 = a3;
  v46 = a2;
  v7 = type metadata accessor for Subtitle(0, a3, a4, a4);
  v50 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - v8;
  v45 = *a1;
  Array.subscript.getter();
  v10 = &v9[*(int *)(v7 + 36)];
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)&v55 = *(_QWORD *)v10;
  *((_QWORD *)&v55 + 1) = v11;
  v12 = sub_10001C564();
  swift_bridgeObjectRetain(v11);
  v13 = Text.init<A>(_:)(&v55, &type metadata for String, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.body.getter();
  v21 = Text.font(_:)(v20, v13, v15, v19, v17);
  v23 = v22;
  LOBYTE(v11) = v24;
  v44 = v25;
  swift_release(v20);
  sub_10001ED1C(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  KeyPath = swift_getKeyPath(&unk_100081998);
  type metadata accessor for MultipleSubtitles(0, v47, v48, v27);
  sub_10001E198(v45, (uint64_t)&v55);
  v48 = v55;
  v29 = v56;
  v28 = v57;
  sub_10001ED34(v21, v23, v11 & 1);
  v30 = v44;
  swift_bridgeObjectRetain(v44);
  v31 = swift_retain(KeyPath);
  v32 = static UnitPoint.center.getter(v31);
  v34 = v33;
  v35 = v58;
  v36 = v59 * 0.0174532925;
  v38 = static UnitPoint.center.getter(v37);
  v40 = v39;
  sub_10001ED1C(v21, v23, v11 & 1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v30);
  v54 = v11 & 1;
  (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v49);
  v41 = v54;
  v62[0] = *(_DWORD *)v53;
  *(_DWORD *)((char *)v62 + 3) = *(_DWORD *)&v53[3];
  v61[0] = *(_DWORD *)v52;
  *(_DWORD *)((char *)v61 + 3) = *(_DWORD *)&v52[3];
  v60[0] = *(_DWORD *)v51;
  *(_DWORD *)((char *)v60 + 3) = *(_DWORD *)&v51[3];
  *(_QWORD *)a5 = v21;
  *(_QWORD *)(a5 + 8) = v23;
  *(_BYTE *)(a5 + 16) = v41;
  *(_DWORD *)(a5 + 17) = v62[0];
  *(_DWORD *)(a5 + 20) = *(_DWORD *)((char *)v62 + 3);
  *(_QWORD *)(a5 + 24) = v30;
  *(_QWORD *)(a5 + 32) = KeyPath;
  *(_BYTE *)(a5 + 40) = 1;
  *(_DWORD *)(a5 + 41) = v61[0];
  *(_DWORD *)(a5 + 44) = *(_DWORD *)((char *)v61 + 3);
  *(_OWORD *)(a5 + 48) = v48;
  *(_QWORD *)(a5 + 64) = v29;
  *(_QWORD *)(a5 + 72) = v28;
  *(_QWORD *)(a5 + 80) = v28;
  *(double *)(a5 + 88) = v32;
  *(_QWORD *)(a5 + 96) = v34;
  *(_QWORD *)(a5 + 104) = v35;
  *(_BYTE *)(a5 + 112) = 0;
  v42 = v60[0];
  *(_DWORD *)(a5 + 116) = *(_DWORD *)((char *)v60 + 3);
  *(_DWORD *)(a5 + 113) = v42;
  *(double *)(a5 + 120) = v36;
  *(_QWORD *)(a5 + 136) = 0;
  *(_QWORD *)(a5 + 144) = 0;
  *(_QWORD *)(a5 + 128) = 0x3FF0000000000000;
  *(double *)(a5 + 152) = v38;
  *(_QWORD *)(a5 + 160) = v40;
  result = 20.0;
  *(_OWORD *)(a5 + 168) = xmmword_1000819D0;
  return result;
}

double sub_10001E198@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double result;
  double v8;

  v3 = (double)a1;
  v4 = sub_100004B18(&qword_1000C77D0);
  State.wrappedValue.getter(&v8, v4);
  v5 = 1.0 - vabdd_f64(v3, v8);
  if (v5 < 0.0)
    v5 = 0.0;
  v6 = (v3 - v8) * 100.0;
  *(double *)a2 = v5;
  *(double *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = xmmword_1000819E0;
  result = 1.0 - v5 + 1.0 - v5;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001E244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  char v25;

  v23 = *v4;
  v6 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a2 + 16);
  v20 = v6;
  v21 = a1;
  v7 = type metadata accessor for Subtitle(255, v19, v6, a4);
  v8 = type metadata accessor for Array(0, v7);
  swift_bridgeObjectRetain(v23);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  Collection.firstIndex(where:)(&v24, sub_10001EB4C, v18, v8, WitnessTable);
  v10 = swift_bridgeObjectRelease(v23);
  if (v25 == 1)
  {
    v11 = 0.0;
    if ((*((_BYTE *)v4 + *(int *)(a2 + 44)) & 1) == 0)
    {
LABEL_3:
      v12 = (_QWORD *)((char *)v4 + *(int *)(a2 + 48));
      v13 = *v12;
      v14 = v12[1];
      *(double *)v22 = v11;
      v22[1] = v13;
      v22[2] = v14;
      v15 = sub_100004B18(&qword_1000C77D0);
      State.wrappedValue.setter(v22, v15);
      return;
    }
  }
  else
  {
    v11 = (double)v24;
    if (*((_BYTE *)v4 + *(int *)(a2 + 44)) != 1)
      goto LABEL_3;
  }
  v16 = static Animation.easeOut.getter(v10);
  v17 = __chkstk_darwin(v16);
  withAnimation<A>(_:_:)(v17, sub_10001EB84);
  swift_release(v16);
}

uint64_t sub_10001E3C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v43 = a2;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalCoordinateSpace(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for DragGesture(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004B18(&qword_1000C77B0);
  v14 = *(_QWORD *)(v13 - 8);
  v41 = v13;
  v42 = v14;
  v15 = __chkstk_darwin(v13);
  v36 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter(v15);
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v10, v8, &protocol witness table for LocalCoordinateSpace, 10.0);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v37(v7, v3, a1);
  v17 = *(unsigned __int8 *)(v5 + 80);
  v18 = (v17 + 32) & ~v17;
  v34 = v17 | 7;
  v35 = v18 + v6;
  v19 = swift_allocObject(&unk_1000B4028, v18 + v6, v17 | 7);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v19 + 16) = v20;
  *(_QWORD *)(v19 + 24) = v21;
  v33 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v33(v19 + v18, v7, a1);
  v22 = sub_100003E48(&qword_1000C77B8, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
  v23 = sub_100003E48(&qword_1000C77C0, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
  v24 = v36;
  v25 = v39;
  Gesture<>.onChanged(_:)(sub_10001EAC8, v19, v39, v22, v23);
  v26 = swift_release(v19);
  (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v12, v25, v26);
  v37(v7, v38, a1);
  v27 = swift_allocObject(&unk_1000B4050, v35, v34);
  *(_QWORD *)(v27 + 16) = v20;
  *(_QWORD *)(v27 + 24) = v21;
  v33(v27 + v18, v7, a1);
  v28 = sub_10000AAFC(&qword_1000C77C8, &qword_1000C77B0, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
  v29 = v41;
  Gesture.onEnded(_:)(sub_10001EAD8, v27, v41, v28);
  v30 = swift_release(v27);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v42 + 8))(v24, v29, v30);
}

uint64_t sub_10001E690(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  double v8;

  type metadata accessor for MultipleSubtitles(0, a3, a4, a5);
  v8 = a1;
  v6 = sub_100004B18(&qword_1000C77D0);
  return State.wrappedValue.setter(&v8, v6);
}

void sub_10001E708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (**v8)(void);
  uint64_t v9;

  v5 = type metadata accessor for MultipleSubtitles(0, a3, a4, a4);
  v6 = sub_100004B18(&qword_1000C7598);
  v7 = State.wrappedValue.getter(&v9, v6);
  if ((v9 & 1) == 0 && DragGesture.Value.translation.getter(v7) >= 30.0)
  {
    v8 = (void (**)(void))(a2 + *(int *)(v5 + 40));
    if (*v8)
      (*v8)();
    LOBYTE(v9) = 1;
    State.wrappedValue.setter(&v9, v6);
  }
}

uint64_t sub_10001E7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[9];
  uint64_t v10;

  v4 = (char *)(a2 + *(int *)(type metadata accessor for MultipleSubtitles(0, a3, a4, a4) + 52));
  v5 = *v4;
  v6 = *((_QWORD *)v4 + 1);
  v9[1] = v5;
  v10 = v6;
  v9[0] = 0;
  v7 = sub_100004B18(&qword_1000C7598);
  return State.wrappedValue.setter(v9, v7);
}

uint64_t sub_10001E854(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_100096B80, 1);
}

unint64_t sub_10001E888()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7720;
  if (!qword_1000C7720)
  {
    v1 = sub_100005F48(&qword_1000C7718);
    sub_10000AAFC(&qword_1000C7728, &qword_1000C7710, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7720);
  }
  return result;
}

uint64_t sub_10001E90C@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_10001DBCC(*(_QWORD **)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_10001E918()
{
  return sub_10001C2C4(&qword_1000C7750, &qword_1000C7758, (void (*)(void))sub_10001E93C);
}

uint64_t sub_10001E93C()
{
  return sub_10001C2C4(&qword_1000C7760, &qword_1000C7768, (void (*)(void))sub_10001E960);
}

uint64_t sub_10001E960()
{
  return sub_10001C2C4(&qword_1000C7770, &qword_1000C7778, (void (*)(void))sub_10001E984);
}

uint64_t sub_10001E984()
{
  return sub_10001C2C4(&qword_1000C7780, &qword_1000C7788, (void (*)(void))sub_10001E9A8);
}

unint64_t sub_10001E9A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7790;
  if (!qword_1000C7790)
  {
    v1 = sub_100005F48(&qword_1000C7798);
    sub_10000AAFC(&qword_1000C77A0, &qword_1000C77A8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7790);
  }
  return result;
}

void sub_10001EA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for MultipleSubtitles(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  sub_10001E244(v4 + ((v6 + 32) & ~v6) + *(int *)(v5 + 36), v5, v7, v8);
}

void sub_10001EA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for MultipleSubtitles(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  sub_10001E244(a1, v6, v7, v8);
}

uint64_t sub_10001EAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001EAE4(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10001E708, a3, a4);
}

uint64_t sub_10001EAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001EAE4(a1, sub_10001E7E4, a3, a4);
}

uint64_t sub_10001EAE4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MultipleSubtitles(0, v6, v7, a4) - 8) + 80);
  return a2(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_10001EB4C(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of static Equatable.== infix(_:_:)(a1, *(_QWORD *)(v1 + 32)) & 1;
}

uint64_t sub_10001EB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10001E690(*(double *)(v4 + 40), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_10001EBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for MultipleSubtitles(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v4 + v9;
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v9));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9 + v6[9], v5);
  v12 = (_QWORD *)(v4 + v9 + v6[10]);
  if (*v12)
    swift_release(v12[1]);
  swift_release(*(_QWORD *)(v11 + v6[12] + 8));
  swift_release(*(_QWORD *)(v11 + v6[13] + 8));
  return swift_deallocObject(v4, v9 + v10, v8 | 7);
}

double sub_10001EC70@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MultipleSubtitles(0, v6, v7, a2) - 8) + 80);
  return sub_10001DE7C(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_10001ECD8()
{
  unint64_t result;

  result = qword_1000C77E0;
  if (!qword_1000C77E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1000C77E0);
  }
  return result;
}

uint64_t sub_10001ED1C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10001ED34(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10001ED44(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v1 = *a1;
  v2 = sub_100005F48(&qword_1000C7718);
  v3 = type metadata accessor for _ValueActionModifier(255, v1);
  v4 = type metadata accessor for ModifiedContent(255, v2, v3);
  v5 = sub_100005F48(&qword_1000C7708);
  v7[4] = sub_10001E888();
  v7[5] = swift_getWitnessTable(&protocol conformance descriptor for _ValueActionModifier<A>, v3);
  v7[0] = v4;
  v7[1] = v5;
  v7[2] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
  v7[3] = sub_10000AAFC(&qword_1000C7730, &qword_1000C7708, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  return swift_getOpaqueTypeConformance2(v7, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
}

uint64_t sub_10001EE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10001EED4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10001EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10001EED4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10001EED4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C77E8[0];
  if (!qword_1000C77E8[0])
  {
    type metadata accessor for PCActivityType(255);
    result = swift_getWitnessTable(&unk_10007F7AC, v1);
    atomic_store(result, qword_1000C77E8);
  }
  return result;
}

uint64_t sub_10001EF1C(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, qword_1000DF528 + a1 + 16);
}

unint64_t sub_10001EF6C(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_10001EF9C(a1);
}

unint64_t sub_10001EF9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  uint64_t v18;
  char v19;
  __n128 v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t result;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  ObjectType = swift_getObjectType(v1);
  v4 = swift_isaMask & *v1;
  v5 = *(_QWORD *)(qword_1000DF528 + v4 + 16);
  v6 = objc_allocWithZone((Class)type metadata accessor for AdaptivePresentationControllerDelegate());
  v7 = v1;
  *(_QWORD *)((char *)v1 + v5) = objc_msgSend(v6, "init");

  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, ObjectType, (uint64_t)&off_1000B4248);
  v8 = (id)sub_10004B49C(a1);
  v9 = objc_msgSend(v8, "presentationController");
  if (!v9)
    goto LABEL_15;
  v11 = v9;
  v12 = objc_opt_self(UISheetPresentationController);
  v13 = swift_dynamicCastObjCClass(v11, v12);
  if (!v13)
  {

LABEL_15:
    v29 = *(_QWORD *)(v4 + qword_1000DF528);
    v30 = type metadata accessor for CardHostingController(0, v29, *(_QWORD *)(v4 + qword_1000DF528 + 8), v10);
    sub_10003DDD8(60, 0xD00000000000002FLL, (void *)0x800000010008FB20, 0, v30, (uint64_t)&off_1000B4248);

    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(a1, v29);
    return (unint64_t)v8;
  }
  v14 = (void *)v13;
  v15 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  objc_msgSend(v15, "displayCornerRadius");
  v17 = v16;

  UISheetPresentationController.preferredCornerRadius.setter(*(_QWORD *)&v17, 0);
  objc_msgSend(v14, "_setCornerRadiusForPresentationAndDismissal:", v17);
  objc_msgSend(v14, "setDelegate:", *(_QWORD *)((char *)v8 + *(_QWORD *)(qword_1000DF528 + (swift_isaMask & *v8) + 16)));
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v18 = *(_QWORD *)(qword_1000DF570 + 640);
  swift_retain(v18);
  v19 = sub_100020AA8();
  v20 = swift_release(v18);
  if ((v19 & 1) == 0)
    goto LABEL_21;
  v21 = objc_msgSend(v14, "detents", v20.n128_f64[0]);
  v22 = sub_10001FBC8();
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if (!((unint64_t)v23 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v24)
      goto LABEL_8;
    goto LABEL_20;
  }
  if (v23 < 0)
    v31 = v23;
  else
    v31 = v23 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v23);
  v24 = _CocoaArrayWrapper.endIndex.getter(v31);
  swift_bridgeObjectRelease(v23);
  if (!v24)
  {
LABEL_20:
    swift_bridgeObjectRelease(v23);
LABEL_21:
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)(*(_QWORD *)(v4 + qword_1000DF528) - 8) + 8))(a1, v20);

    return (unint64_t)v8;
  }
LABEL_8:
  result = v24 - 1;
  if (__OFSUB__(v24, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((v23 & 0xC000000000000001) != 0)
  {
LABEL_24:
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v23);
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v26 = *(id *)(v23 + 8 * result + 32);
LABEL_13:
    v27 = v26;
    swift_bridgeObjectRelease(v23);
    v28 = objc_msgSend(v27, "identifier");
    objc_msgSend(v14, "setLargestUndimmedDetentIdentifier:", v28);

    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v4 + qword_1000DF528) - 8) + 8))(a1, *(_QWORD *)(v4 + qword_1000DF528));
    return (unint64_t)v8;
  }
  __break(1u);
  return result;
}

void sub_10001F350(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_10001FB2C();
}

void sub_10001F374()
{
  _QWORD *v0;

}

id sub_10001F3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for CardHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF528), *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF528 + 8), a4);
  sub_10003DDAC(0x74696E696564, (void *)0xE600000000000000, 0, (uint64_t)v5, (uint64_t)&off_1000B4248);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

id sub_10001F43C(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  return sub_10001F3A0((uint64_t)v1, v2, v3, v4);
}

void sub_10001F460(_QWORD *a1)
{

}

void sub_10001F48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v6;

  v5 = (objc_class *)type metadata accessor for CardHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF528), *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF528 + 8), a4);
  v6.receiver = v4;
  v6.super_class = v5;
  objc_msgSendSuper2(&v6, "viewDidLoad");
  sub_10003DDAC(0x4C64694477656976, (void *)0xED0000292864616FLL, 0, (uint64_t)v5, (uint64_t)&off_1000B4248);
}

void sub_10001F52C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_10001F48C((uint64_t)v4, v1, v2, v3);

}

uint64_t type metadata accessor for CardHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CardHostingController);
}

void sub_10001F56C()
{
  _swift_stdlib_reportUnimplementedInitializer("PCViewService.CardHostingController", 35, "init(coder:rootView:)", 21, 0);
  __break(1u);
}

uint64_t sub_10001F598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC13PCViewService38AdaptivePresentationControllerDelegate____lazy_storage___publisher;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC13PCViewService38AdaptivePresentationControllerDelegate____lazy_storage___publisher);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC13PCViewService38AdaptivePresentationControllerDelegate____lazy_storage___publisher);
  }
  else
  {
    v4 = v0;
    v5 = sub_100004B18(&qword_1000C78A8);
    v6 = sub_10001FAE0();
    v3 = Publisher.eraseToAnyPublisher()(v5, v6);
    v7 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v7);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

void sub_10001F658(void *a1, __n128 a2, uint64_t a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  __n128 v8;

  v7 = a4;
  v8 = a2;
  v5 = a4;
  v6 = a1;
  PassthroughSubject.send(_:)(&v7);

}

id sub_10001F7B4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AdaptivePresentationControllerDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AdaptivePresentationControllerDelegate()
{
  return objc_opt_self(_TtC13PCViewService38AdaptivePresentationControllerDelegate);
}

unint64_t destroy for AdaptivePresentationControllerEvent(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  int v3;

  result = *(_QWORD *)(a1 + 8);
  v3 = -1;
  if (result < 0xFFFFFFFF)
    v3 = result;
  if (v3 - 1 < 0)
    return swift_unknownObjectRelease(result, a2);
  return result;
}

_QWORD *_s13PCViewService35AdaptivePresentationControllerEventOwCP_0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = a2[1];
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_unknownObjectRetain(v3);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

_QWORD *assignWithCopy for AdaptivePresentationControllerEvent(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = a1[1];
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = a1[1];
  v7 = v6 - 1;
  if (a2[1] < 0xFFFFFFFFuLL)
    v5 = a2[1];
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *a1 = *a2;
      v11 = a2[1];
      a1[1] = v11;
      swift_unknownObjectRetain(v11);
      swift_unknownObjectRelease(v4, v12);
      return a1;
    }
    swift_unknownObjectRelease(a1[1], a2);
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  v9 = a2[1];
  a1[1] = v9;
  swift_unknownObjectRetain(v9);
  return a1;
}

_QWORD *assignWithTake for AdaptivePresentationControllerEvent(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = a2[1];
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_unknownObjectRelease(v4, a2);
      return a1;
    }
    swift_unknownObjectRelease(v4, a2);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptivePresentationControllerEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 2;
  if (v5 >= 4)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AdaptivePresentationControllerEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_10001FA80(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_10001FAA4(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AdaptivePresentationControllerEvent()
{
  return &type metadata for AdaptivePresentationControllerEvent;
}

unint64_t sub_10001FAE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C78B0;
  if (!qword_1000C78B0)
  {
    v1 = sub_100005F48(&qword_1000C78A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C78B0);
  }
  return result;
}

void sub_10001FB2C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(qword_1000DF528 + (swift_isaMask & *v0) + 16);
  *(_QWORD *)((char *)v0 + v1) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AdaptivePresentationControllerDelegate()), "init");

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100090660, "PCViewService/CardHostingController.swift", 41, 2, 59, 0);
  __break(1u);
}

unint64_t sub_10001FBC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6D88;
  if (!qword_1000C6D88)
  {
    v1 = objc_opt_self(UISheetPresentationControllerDetent);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C6D88);
  }
  return result;
}

uint64_t sub_10001FC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;
  unint64_t v21;

  v20 = sub_100004B18(&qword_1000C7C80);
  v1 = sub_100004B18(&qword_1000C7C88);
  v2 = String.init<A>(describing:)(&v20, v1);
  v4 = v3;
  v5 = sub_10003E348(60, 0xE100000000000000, v2, v3);
  if ((v6 & 1) == 0)
  {
    v7 = String.subscript.getter(15, v5, v2, v4);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease(v4);
    v2 = static String._fromSubstring(_:)(v7, v9, v11, v13);
    v4 = v14;
    swift_bridgeObjectRelease(v13);
  }
  v15 = *(Swift::String *)(v0 + 32);
  v20 = 45;
  v21 = 0xE100000000000000;
  String.append(_:)(v15);
  v16 = v20;
  v17 = (void *)v21;
  v20 = v2;
  v21 = v4;
  swift_bridgeObjectRetain(v4);
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v17);
  return v20;
}

uint64_t sub_10001FD24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v30 = *v0;
  v1 = sub_100004B18(&qword_1000C7C60);
  v2 = String.init<A>(describing:)(&v30, v1);
  v4 = v3;
  v5 = sub_10003E348(60, 0xE100000000000000, v2, v3);
  if ((v6 & 1) == 0)
  {
    v7 = String.subscript.getter(15, v5, v2, v4);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease(v4);
    v2 = static String._fromSubstring(_:)(v7, v9, v11, v13);
    v4 = v14;
    v5 = swift_bridgeObjectRelease(v13);
  }
  v15 = UUID.uuidString.getter(v5);
  v17 = v16;
  v18 = sub_10002FCB8(8, v15, v16);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_bridgeObjectRelease(v17);
  v34 = 45;
  v35 = 0xE100000000000000;
  v30 = v18;
  v31 = v20;
  v32 = v22;
  v33 = v24;
  v25 = sub_100029338();
  String.append<A>(contentsOf:)(&v30, &type metadata for Substring, v25);
  swift_bridgeObjectRelease(v24);
  v26 = v34;
  v27 = (void *)v35;
  v30 = v2;
  v31 = v4;
  swift_bridgeObjectRetain(v4);
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v27);
  return v30;
}

uint64_t sub_10001FEA0()
{
  return sub_10001FEB4(&qword_1000C7B18, &qword_1000C7B20);
}

uint64_t sub_10001FEB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  uint64_t v23;
  unint64_t v24;

  v23 = sub_100004B18(a1);
  v4 = sub_100004B18(a2);
  v5 = String.init<A>(describing:)(&v23, v4);
  v7 = v6;
  v8 = sub_10003E348(60, 0xE100000000000000, v5, v6);
  if ((v9 & 1) == 0)
  {
    v10 = String.subscript.getter(15, v8, v5, v7);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    swift_bridgeObjectRelease(v7);
    v5 = static String._fromSubstring(_:)(v10, v12, v14, v16);
    v7 = v17;
    swift_bridgeObjectRelease(v16);
  }
  v18 = *(Swift::String *)(v2 + 24);
  v23 = 45;
  v24 = 0xE100000000000000;
  String.append(_:)(v18);
  v19 = v23;
  v20 = (void *)v24;
  v23 = v5;
  v24 = v7;
  swift_bridgeObjectRetain(v7);
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v20);
  return v23;
}

uint64_t sub_10001FFCC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Swift::String v24;
  void *object;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  NSString v31;
  id v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSString v37;
  id v38;
  uint64_t v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  NSString v46;
  id v47;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  Swift::String v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSString v61;
  NSString v62;
  id v63;
  NSString v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int128 v81;
  __int128 v82;
  Swift::String v83;
  __int128 v84;

  v1 = v0;
  v2 = *(void **)(v0 + 48);
  if (v2)
  {
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "objectForKey:", v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)(&v81);
      swift_unknownObjectRelease(v4, v5);
    }
    else
    {
      v81 = 0u;
      v82 = 0u;
    }
    sub_100018064((uint64_t)&v81, (uint64_t)&v83, &qword_1000C6678);
  }
  else
  {
    v83 = (Swift::String)0;
    v84 = 0u;
  }
  v6 = sub_100004B18(&qword_1000C6678);
  v7 = sub_100004B18(&qword_1000C7C70);
  if (!swift_dynamicCast(&v81, &v83, v6, v7, 6))
  {
    if (v2)
    {
      v19 = String._bridgeToObjectiveC()();
      v20 = objc_msgSend(v2, "objectForKey:", v19);

      if (v20)
      {
        _bridgeAnyObjectToAny(_:)(&v81);
        swift_unknownObjectRelease(v20, v21);
      }
      else
      {
        v81 = 0u;
        v82 = 0u;
      }
      sub_100018064((uint64_t)&v81, (uint64_t)&v83, &qword_1000C6678);
      if (*((_QWORD *)&v84 + 1))
      {
        if (swift_dynamicCast(&v81, &v83, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          v23 = *((_QWORD *)&v81 + 1);
          v22 = v81;
          strcpy((char *)&v83, "Found data: ");
          BYTE5(v83._object) = 0;
          HIWORD(v83._object) = -5120;
          v24._countAndFlagsBits = Data.description.getter(v81, *((_QWORD *)&v81 + 1));
          object = v24._object;
          String.append(_:)(v24);
          swift_bridgeObjectRelease(object);
          v26 = v83._object;
          sub_10001FC04();
          v28 = v27;
          v29 = objc_allocWithZone((Class)CULogHandle);
          v30 = String._bridgeToObjectiveC()();
          v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v28);
          v32 = objc_msgSend(v29, "initWithSubsystem:category:", v30, v31);

          swift_bridgeObjectRetain(v26);
          v33 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
          objc_msgSend(v32, "ulog:message:", 40, v33);
          swift_bridgeObjectRelease(v26);

          v34 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
          v35 = JSONDecoder.init()();
          v36 = sub_10002937C();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v22, v23, v7, v36);
          swift_release(v35);
          v67 = v22;
LABEL_32:
          v80 = v23;
          goto LABEL_33;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v83, &qword_1000C6678);
      }
      v37 = String._bridgeToObjectiveC()();
      v38 = objc_msgSend(v2, "objectForKey:", v37);

      if (v38)
      {
        _bridgeAnyObjectToAny(_:)(&v81);
        swift_unknownObjectRelease(v38, v39);
      }
      else
      {
        v81 = 0u;
        v82 = 0u;
      }
      sub_100018064((uint64_t)&v81, (uint64_t)&v83, &qword_1000C6678);
      if (*((_QWORD *)&v84 + 1))
      {
        if (swift_dynamicCast(&v81, &v83, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v40 = (Swift::String)v81;
          v83._countAndFlagsBits = 0;
          v83._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(16);
          swift_bridgeObjectRelease(v83._object);
          strcpy((char *)&v83, "Found string: ");
          HIBYTE(v83._object) = -18;
          String.append(_:)(v40);
          v41 = v83._object;
          sub_10001FC04();
          v43 = v42;
          v44 = objc_allocWithZone((Class)CULogHandle);
          v45 = String._bridgeToObjectiveC()();
          v46 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v43);
          v47 = objc_msgSend(v44, "initWithSubsystem:category:", v45, v46);

          swift_bridgeObjectRetain(v41);
          v48 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v41);
          objc_msgSend(v47, "ulog:message:", 40, v48);
          swift_bridgeObjectRelease(v41);

          v83 = v40;
          v49 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
          v50 = JSONEncoder.init()();
          v68 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v83, &type metadata for String, &protocol witness table for String);
          v23 = v69;
          swift_bridgeObjectRelease(v40._object);
          swift_release(v50);
          v70 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
          v71 = JSONDecoder.init()();
          v72 = sub_10002937C();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v68, v23, v7, v72);
          swift_release(v71);
          v67 = v68;
          goto LABEL_32;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v83, &qword_1000C6678);
      }
      v51 = String._bridgeToObjectiveC()();
      v52 = objc_msgSend(v2, "objectForKey:", v51);

      if (v52)
      {
        _bridgeAnyObjectToAny(_:)(&v81);
        swift_unknownObjectRelease(v52, v53);
      }
      else
      {
        v81 = 0u;
        v82 = 0u;
      }
      sub_100018064((uint64_t)&v81, (uint64_t)&v83, &qword_1000C6678);
      if (*((_QWORD *)&v84 + 1))
      {
        if (swift_dynamicCast(&v81, &v83, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        {
          v54 = v81;
          v83._countAndFlagsBits = 0x6E6920646E756F46;
          v83._object = (void *)0xEB00000000203A74;
          v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v56 = v55._object;
          String.append(_:)(v55);
          swift_bridgeObjectRelease(v56);
          v57 = v83._object;
          sub_10001FC04();
          v59 = v58;
          v60 = objc_allocWithZone((Class)CULogHandle);
          v61 = String._bridgeToObjectiveC()();
          v62 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v59);
          v63 = objc_msgSend(v60, "initWithSubsystem:category:", v61, v62);

          swift_bridgeObjectRetain(v57);
          v64 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v57);
          objc_msgSend(v63, "ulog:message:", 40, v64);
          swift_bridgeObjectRelease(v57);

          v83._countAndFlagsBits = v54;
          v65 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
          v66 = JSONEncoder.init()();
          v74 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v83, &type metadata for Int, &protocol witness table for Int);
          v76 = v75;
          swift_release(v66);
          v77 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v77, *(unsigned int *)(v77 + 48), *(unsigned __int16 *)(v77 + 52));
          v78 = JSONDecoder.init()();
          v79 = sub_10002937C();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v74, v76, v7, v79);
          swift_release(v78);
          v67 = v74;
          v80 = v76;
LABEL_33:
          sub_10000ABA8(v67, v80);
          return v83._countAndFlagsBits;
        }
LABEL_34:
        v8 = *(_QWORD *)(v1 + 16);
        swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
        return v8;
      }
    }
    else
    {
      v83 = (Swift::String)0;
      v84 = 0u;
      sub_100017AB4((uint64_t)&v83, &qword_1000C6678);
      v83 = (Swift::String)0;
      v84 = 0u;
      sub_100017AB4((uint64_t)&v83, &qword_1000C6678);
      v83 = (Swift::String)0;
      v84 = 0u;
    }
    sub_100017AB4((uint64_t)&v83, &qword_1000C6678);
    goto LABEL_34;
  }
  v9 = *((_QWORD *)&v81 + 1);
  v8 = v81;
  v83._countAndFlagsBits = 0;
  v83._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0x617620646E756F46;
  v10._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v10);
  v81 = __PAIR128__(v9, v8);
  _print_unlocked<A, B>(_:_:)(&v81, &v83, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11 = v83._object;
  sub_10001FC04();
  v13 = v12;
  v14 = objc_allocWithZone((Class)CULogHandle);
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v17 = objc_msgSend(v14, "initWithSubsystem:category:", v15, v16);

  swift_bridgeObjectRetain(v11);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v17, "ulog:message:", 40, v18);
  swift_bridgeObjectRelease(v11);

  return v8;
}

uint64_t sub_100020AA8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  uint64_t v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  NSString v43;
  id v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  NSString v58;
  NSString v59;
  id v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  Swift::String v76;
  __int128 v77;
  Swift::String v78;
  __int128 v79;

  v1 = v0;
  v2 = *(void **)(v0 + 40);
  if (v2)
  {
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "objectForKey:", v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)(&v76);
      swift_unknownObjectRelease(v4, v5);
    }
    else
    {
      v76 = (Swift::String)0;
      v77 = 0u;
    }
    sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
  }
  else
  {
    v78 = (Swift::String)0;
    v79 = 0u;
  }
  v6 = sub_100004B18(&qword_1000C6678);
  if (!swift_dynamicCast(&v76, &v78, v6, &type metadata for Bool, 6))
  {
    if (v2)
    {
      v17 = String._bridgeToObjectiveC()();
      v18 = objc_msgSend(v2, "objectForKey:", v17);

      if (v18)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v18, v19);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          object = (unint64_t)v76._object;
          countAndFlagsBits = v76._countAndFlagsBits;
          strcpy((char *)&v78, "Found data: ");
          BYTE5(v78._object) = 0;
          HIWORD(v78._object) = -5120;
          v22._countAndFlagsBits = Data.description.getter(v76._countAndFlagsBits, v76._object);
          v23 = v22._object;
          String.append(_:)(v22);
          swift_bridgeObjectRelease(v23);
          v24 = v78._object;
          sub_10001FEB4(&qword_1000C7B18, &qword_1000C7B20);
          v26 = v25;
          v27 = objc_allocWithZone((Class)CULogHandle);
          v28 = String._bridgeToObjectiveC()();
          v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
          v30 = objc_msgSend(v27, "initWithSubsystem:category:", v28, v29);

          swift_bridgeObjectRetain(v24);
          v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v24);
          objc_msgSend(v30, "ulog:message:", 40, v31);
          swift_bridgeObjectRelease(v24);

          v32 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
          v33 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Bool, countAndFlagsBits, object, &type metadata for Bool, &protocol witness table for Bool);
          swift_release(v33);
          v64 = countAndFlagsBits;
LABEL_32:
          v75 = object;
          goto LABEL_33;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      }
      v34 = String._bridgeToObjectiveC()();
      v35 = objc_msgSend(v2, "objectForKey:", v34);

      if (v35)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v35, v36);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v37 = v76;
          v78._countAndFlagsBits = 0;
          v78._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(16);
          swift_bridgeObjectRelease(v78._object);
          strcpy((char *)&v78, "Found string: ");
          HIBYTE(v78._object) = -18;
          String.append(_:)(v37);
          v38 = v78._object;
          sub_10001FEB4(&qword_1000C7B18, &qword_1000C7B20);
          v40 = v39;
          v41 = objc_allocWithZone((Class)CULogHandle);
          v42 = String._bridgeToObjectiveC()();
          v43 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v40);
          v44 = objc_msgSend(v41, "initWithSubsystem:category:", v42, v43);

          swift_bridgeObjectRetain(v38);
          v45 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v38);
          objc_msgSend(v44, "ulog:message:", 40, v45);
          swift_bridgeObjectRelease(v38);

          v78 = v37;
          v46 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
          v47 = JSONEncoder.init()();
          v65 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
          object = v66;
          swift_bridgeObjectRelease(v37._object);
          swift_release(v47);
          v67 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
          v68 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Bool, v65, object, &type metadata for Bool, &protocol witness table for Bool);
          swift_release(v68);
          v64 = v65;
          goto LABEL_32;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      }
      v48 = String._bridgeToObjectiveC()();
      v49 = objc_msgSend(v2, "objectForKey:", v48);

      if (v49)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v49, v50);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        {
          v51 = v76._countAndFlagsBits;
          v78._countAndFlagsBits = 0x6E6920646E756F46;
          v78._object = (void *)0xEB00000000203A74;
          v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v53 = v52._object;
          String.append(_:)(v52);
          swift_bridgeObjectRelease(v53);
          v54 = v78._object;
          sub_10001FEB4(&qword_1000C7B18, &qword_1000C7B20);
          v56 = v55;
          v57 = objc_allocWithZone((Class)CULogHandle);
          v58 = String._bridgeToObjectiveC()();
          v59 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v56);
          v60 = objc_msgSend(v57, "initWithSubsystem:category:", v58, v59);

          swift_bridgeObjectRetain(v54);
          v61 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v54);
          objc_msgSend(v60, "ulog:message:", 40, v61);
          swift_bridgeObjectRelease(v54);

          v78._countAndFlagsBits = v51;
          v62 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
          v63 = JSONEncoder.init()();
          v70 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v78, &type metadata for Int, &protocol witness table for Int);
          v72 = v71;
          swift_release(v63);
          v73 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
          v74 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Bool, v70, v72, &type metadata for Bool, &protocol witness table for Bool);
          swift_release(v74);
          v64 = v70;
          v75 = v72;
LABEL_33:
          sub_10000ABA8(v64, v75);
          return LOBYTE(v78._countAndFlagsBits);
        }
        return *(unsigned __int8 *)(v1 + 16);
      }
    }
    else
    {
      v78 = (Swift::String)0;
      v79 = 0u;
      sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      v78 = (Swift::String)0;
      v79 = 0u;
      sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      v78 = (Swift::String)0;
      v79 = 0u;
    }
    sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
    return *(unsigned __int8 *)(v1 + 16);
  }
  v7 = v76._countAndFlagsBits & 1;
  v78._countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x617620646E756F46;
  v8._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v8);
  LOBYTE(v76._countAndFlagsBits) = v7;
  _print_unlocked<A, B>(_:_:)(&v76, &v78, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v78._object;
  sub_10001FEB4(&qword_1000C7B18, &qword_1000C7B20);
  v11 = v10;
  v12 = objc_allocWithZone((Class)CULogHandle);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v15 = objc_msgSend(v12, "initWithSubsystem:category:", v13, v14);

  swift_bridgeObjectRetain(v9);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v15, "ulog:message:", 40, v16);
  swift_bridgeObjectRelease(v9);

  return v7;
}

double sub_1000215CC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  Swift::String v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSString v43;
  NSString v44;
  id v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  NSString v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSString v59;
  NSString v60;
  id v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  Swift::String v79;
  __int128 v80;
  Swift::String v81;
  __int128 v82;

  v1 = v0;
  v2 = *(void **)(v0 + 40);
  if (v2)
  {
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "objectForKey:", v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)(&v79);
      swift_unknownObjectRelease(v4, v5);
    }
    else
    {
      v79 = (Swift::String)0;
      v80 = 0u;
    }
    sub_100018064((uint64_t)&v79, (uint64_t)&v81, &qword_1000C6678);
  }
  else
  {
    v81 = (Swift::String)0;
    v82 = 0u;
  }
  v6 = sub_100004B18(&qword_1000C6678);
  if (!swift_dynamicCast(&v79, &v81, v6, &type metadata for CGFloat, 6))
  {
    if (v2)
    {
      v17 = String._bridgeToObjectiveC()();
      v18 = objc_msgSend(v2, "objectForKey:", v17);

      if (v18)
      {
        _bridgeAnyObjectToAny(_:)(&v79);
        swift_unknownObjectRelease(v18, v19);
      }
      else
      {
        v79 = (Swift::String)0;
        v80 = 0u;
      }
      sub_100018064((uint64_t)&v79, (uint64_t)&v81, &qword_1000C6678);
      if (*((_QWORD *)&v82 + 1))
      {
        if (swift_dynamicCast(&v79, &v81, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          object = (unint64_t)v79._object;
          countAndFlagsBits = v79._countAndFlagsBits;
          strcpy((char *)&v81, "Found data: ");
          BYTE5(v81._object) = 0;
          HIWORD(v81._object) = -5120;
          v22._countAndFlagsBits = Data.description.getter(v79._countAndFlagsBits, v79._object);
          v23 = v22._object;
          String.append(_:)(v22);
          swift_bridgeObjectRelease(v23);
          v24 = v81._object;
          sub_10001FEB4(&qword_1000C7BD8, &qword_1000C7BE0);
          v26 = v25;
          v27 = objc_allocWithZone((Class)CULogHandle);
          v28 = String._bridgeToObjectiveC()();
          v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
          v30 = objc_msgSend(v27, "initWithSubsystem:category:", v28, v29);

          swift_bridgeObjectRetain(v24);
          v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v24);
          objc_msgSend(v30, "ulog:message:", 40, v31);
          swift_bridgeObjectRelease(v24);

          v32 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
          v33 = JSONDecoder.init()();
          v34 = sub_100028F74();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for CGFloat, countAndFlagsBits, object, &type metadata for CGFloat, v34);
          swift_release(v33);
          v65 = countAndFlagsBits;
LABEL_32:
          v78 = object;
          goto LABEL_33;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v81, &qword_1000C6678);
      }
      v35 = String._bridgeToObjectiveC()();
      v36 = objc_msgSend(v2, "objectForKey:", v35);

      if (v36)
      {
        _bridgeAnyObjectToAny(_:)(&v79);
        swift_unknownObjectRelease(v36, v37);
      }
      else
      {
        v79 = (Swift::String)0;
        v80 = 0u;
      }
      sub_100018064((uint64_t)&v79, (uint64_t)&v81, &qword_1000C6678);
      if (*((_QWORD *)&v82 + 1))
      {
        if (swift_dynamicCast(&v79, &v81, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v38 = v79;
          v81._countAndFlagsBits = 0;
          v81._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(16);
          swift_bridgeObjectRelease(v81._object);
          strcpy((char *)&v81, "Found string: ");
          HIBYTE(v81._object) = -18;
          String.append(_:)(v38);
          v39 = v81._object;
          sub_10001FEB4(&qword_1000C7BD8, &qword_1000C7BE0);
          v41 = v40;
          v42 = objc_allocWithZone((Class)CULogHandle);
          v43 = String._bridgeToObjectiveC()();
          v44 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v41);
          v45 = objc_msgSend(v42, "initWithSubsystem:category:", v43, v44);

          swift_bridgeObjectRetain(v39);
          v46 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v39);
          objc_msgSend(v45, "ulog:message:", 40, v46);
          swift_bridgeObjectRelease(v39);

          v81 = v38;
          v47 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
          v48 = JSONEncoder.init()();
          v66 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v81, &type metadata for String, &protocol witness table for String);
          object = v67;
          swift_bridgeObjectRelease(v38._object);
          swift_release(v48);
          v68 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
          v69 = JSONDecoder.init()();
          v70 = sub_100028F74();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for CGFloat, v66, object, &type metadata for CGFloat, v70);
          swift_release(v69);
          v65 = v66;
          goto LABEL_32;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v81, &qword_1000C6678);
      }
      v49 = String._bridgeToObjectiveC()();
      v50 = objc_msgSend(v2, "objectForKey:", v49);

      if (v50)
      {
        _bridgeAnyObjectToAny(_:)(&v79);
        swift_unknownObjectRelease(v50, v51);
      }
      else
      {
        v79 = (Swift::String)0;
        v80 = 0u;
      }
      sub_100018064((uint64_t)&v79, (uint64_t)&v81, &qword_1000C6678);
      if (*((_QWORD *)&v82 + 1))
      {
        if (swift_dynamicCast(&v79, &v81, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        {
          v52 = v79._countAndFlagsBits;
          v81._countAndFlagsBits = 0x6E6920646E756F46;
          v81._object = (void *)0xEB00000000203A74;
          v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v54 = v53._object;
          String.append(_:)(v53);
          swift_bridgeObjectRelease(v54);
          v55 = v81._object;
          sub_10001FEB4(&qword_1000C7BD8, &qword_1000C7BE0);
          v57 = v56;
          v58 = objc_allocWithZone((Class)CULogHandle);
          v59 = String._bridgeToObjectiveC()();
          v60 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v57);
          v61 = objc_msgSend(v58, "initWithSubsystem:category:", v59, v60);

          swift_bridgeObjectRetain(v55);
          v62 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v55);
          objc_msgSend(v61, "ulog:message:", 40, v62);
          swift_bridgeObjectRelease(v55);

          v81._countAndFlagsBits = v52;
          v63 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
          v64 = JSONEncoder.init()();
          v72 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v81, &type metadata for Int, &protocol witness table for Int);
          v74 = v73;
          swift_release(v64);
          v75 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
          v76 = JSONDecoder.init()();
          v77 = sub_100028F74();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for CGFloat, v72, v74, &type metadata for CGFloat, v77);
          swift_release(v76);
          v65 = v72;
          v78 = v74;
LABEL_33:
          sub_10000ABA8(v65, v78);
          return *(double *)&v81._countAndFlagsBits;
        }
        return *(double *)(v1 + 16);
      }
    }
    else
    {
      v81 = (Swift::String)0;
      v82 = 0u;
      sub_100017AB4((uint64_t)&v81, &qword_1000C6678);
      v81 = (Swift::String)0;
      v82 = 0u;
      sub_100017AB4((uint64_t)&v81, &qword_1000C6678);
      v81 = (Swift::String)0;
      v82 = 0u;
    }
    sub_100017AB4((uint64_t)&v81, &qword_1000C6678);
    return *(double *)(v1 + 16);
  }
  v7 = *(double *)&v79._countAndFlagsBits;
  v81._countAndFlagsBits = 0;
  v81._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x617620646E756F46;
  v8._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v8);
  *(double *)&v79._countAndFlagsBits = v7;
  _print_unlocked<A, B>(_:_:)(&v79, &v81, &type metadata for CGFloat, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v81._object;
  sub_10001FEB4(&qword_1000C7BD8, &qword_1000C7BE0);
  v11 = v10;
  v12 = objc_allocWithZone((Class)CULogHandle);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v15 = objc_msgSend(v12, "initWithSubsystem:category:", v13, v14);

  swift_bridgeObjectRetain(v9);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v15, "ulog:message:", 40, v16);
  swift_bridgeObjectRelease(v9);

  return v7;
}

uint64_t sub_1000220F4()
{
  return sub_100022C5C((uint64_t)&type metadata for Defaults.BlurInitType, &qword_1000C7CC8, &qword_1000C7CD0, (uint64_t (*)(void))sub_1000293D8);
}

uint64_t sub_100022118()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  uint64_t v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  NSString v43;
  id v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  NSString v58;
  NSString v59;
  id v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  Swift::String v76;
  __int128 v77;
  Swift::String v78;
  __int128 v79;

  v1 = v0;
  v2 = *(void **)(v0 + 40);
  if (v2)
  {
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "objectForKey:", v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)(&v76);
      swift_unknownObjectRelease(v4, v5);
    }
    else
    {
      v76 = (Swift::String)0;
      v77 = 0u;
    }
    sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
  }
  else
  {
    v78 = (Swift::String)0;
    v79 = 0u;
  }
  v6 = sub_100004B18(&qword_1000C6678);
  if (!swift_dynamicCast(&v76, &v78, v6, &type metadata for Int, 6))
  {
    if (v2)
    {
      v17 = String._bridgeToObjectiveC()();
      v18 = objc_msgSend(v2, "objectForKey:", v17);

      if (v18)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v18, v19);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          object = (unint64_t)v76._object;
          countAndFlagsBits = v76._countAndFlagsBits;
          strcpy((char *)&v78, "Found data: ");
          BYTE5(v78._object) = 0;
          HIWORD(v78._object) = -5120;
          v22._countAndFlagsBits = Data.description.getter(v76._countAndFlagsBits, v76._object);
          v23 = v22._object;
          String.append(_:)(v22);
          swift_bridgeObjectRelease(v23);
          v24 = v78._object;
          sub_10001FEB4(&qword_1000C7CB0, &qword_1000C7CB8);
          v26 = v25;
          v27 = objc_allocWithZone((Class)CULogHandle);
          v28 = String._bridgeToObjectiveC()();
          v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
          v30 = objc_msgSend(v27, "initWithSubsystem:category:", v28, v29);

          swift_bridgeObjectRetain(v24);
          v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v24);
          objc_msgSend(v30, "ulog:message:", 40, v31);
          swift_bridgeObjectRelease(v24);

          v32 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
          v33 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Int, countAndFlagsBits, object, &type metadata for Int, &protocol witness table for Int);
          swift_release(v33);
          v64 = countAndFlagsBits;
LABEL_32:
          v75 = object;
          goto LABEL_33;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      }
      v34 = String._bridgeToObjectiveC()();
      v35 = objc_msgSend(v2, "objectForKey:", v34);

      if (v35)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v35, v36);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v37 = v76;
          v78._countAndFlagsBits = 0;
          v78._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(16);
          swift_bridgeObjectRelease(v78._object);
          strcpy((char *)&v78, "Found string: ");
          HIBYTE(v78._object) = -18;
          String.append(_:)(v37);
          v38 = v78._object;
          sub_10001FEB4(&qword_1000C7CB0, &qword_1000C7CB8);
          v40 = v39;
          v41 = objc_allocWithZone((Class)CULogHandle);
          v42 = String._bridgeToObjectiveC()();
          v43 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v40);
          v44 = objc_msgSend(v41, "initWithSubsystem:category:", v42, v43);

          swift_bridgeObjectRetain(v38);
          v45 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v38);
          objc_msgSend(v44, "ulog:message:", 40, v45);
          swift_bridgeObjectRelease(v38);

          v78 = v37;
          v46 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
          v47 = JSONEncoder.init()();
          v65 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
          object = v66;
          swift_bridgeObjectRelease(v37._object);
          swift_release(v47);
          v67 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
          v68 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Int, v65, object, &type metadata for Int, &protocol witness table for Int);
          swift_release(v68);
          v64 = v65;
          goto LABEL_32;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      }
      v48 = String._bridgeToObjectiveC()();
      v49 = objc_msgSend(v2, "objectForKey:", v48);

      if (v49)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v49, v50);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        {
          v51 = v76._countAndFlagsBits;
          v78._countAndFlagsBits = 0x6E6920646E756F46;
          v78._object = (void *)0xEB00000000203A74;
          v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v53 = v52._object;
          String.append(_:)(v52);
          swift_bridgeObjectRelease(v53);
          v54 = v78._object;
          sub_10001FEB4(&qword_1000C7CB0, &qword_1000C7CB8);
          v56 = v55;
          v57 = objc_allocWithZone((Class)CULogHandle);
          v58 = String._bridgeToObjectiveC()();
          v59 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v56);
          v60 = objc_msgSend(v57, "initWithSubsystem:category:", v58, v59);

          swift_bridgeObjectRetain(v54);
          v61 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v54);
          objc_msgSend(v60, "ulog:message:", 40, v61);
          swift_bridgeObjectRelease(v54);

          v78._countAndFlagsBits = v51;
          v62 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
          v63 = JSONEncoder.init()();
          v70 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v78, &type metadata for Int, &protocol witness table for Int);
          v72 = v71;
          swift_release(v63);
          v73 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
          v74 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Int, v70, v72, &type metadata for Int, &protocol witness table for Int);
          swift_release(v74);
          v64 = v70;
          v75 = v72;
LABEL_33:
          sub_10000ABA8(v64, v75);
          return v78._countAndFlagsBits;
        }
        return *(_QWORD *)(v1 + 16);
      }
    }
    else
    {
      v78 = (Swift::String)0;
      v79 = 0u;
      sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      v78 = (Swift::String)0;
      v79 = 0u;
      sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      v78 = (Swift::String)0;
      v79 = 0u;
    }
    sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
    return *(_QWORD *)(v1 + 16);
  }
  v7 = v76._countAndFlagsBits;
  v78._countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x617620646E756F46;
  v8._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v8);
  v76._countAndFlagsBits = v7;
  _print_unlocked<A, B>(_:_:)(&v76, &v78, &type metadata for Int, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v78._object;
  sub_10001FEB4(&qword_1000C7CB0, &qword_1000C7CB8);
  v11 = v10;
  v12 = objc_allocWithZone((Class)CULogHandle);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v15 = objc_msgSend(v12, "initWithSubsystem:category:", v13, v14);

  swift_bridgeObjectRetain(v9);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v15, "ulog:message:", 40, v16);
  swift_bridgeObjectRelease(v9);

  return v7;
}

uint64_t sub_100022C38()
{
  return sub_100022C5C((uint64_t)&type metadata for Defaults.ContinueTrigger, &qword_1000C7CF0, &qword_1000C7CF8, (uint64_t (*)(void))sub_100029570);
}

uint64_t sub_100022C5C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  NSString v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  NSString v38;
  id v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  id v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSString v53;
  NSString v54;
  id v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  id v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  Swift::String v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  NSString v70;
  NSString v71;
  id v72;
  NSString v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t (*v93)(void);
  Swift::String v94;
  __int128 v95;
  Swift::String v96;
  __int128 v97;

  v9 = v4;
  v10 = *(void **)(v4 + 40);
  if (v10)
  {
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "objectForKey:", v11);

    if (v12)
    {
      _bridgeAnyObjectToAny(_:)(&v94);
      swift_unknownObjectRelease(v12, v13);
    }
    else
    {
      v94 = (Swift::String)0;
      v95 = 0u;
    }
    sub_100018064((uint64_t)&v94, (uint64_t)&v96, &qword_1000C6678);
  }
  else
  {
    v96 = (Swift::String)0;
    v97 = 0u;
  }
  v14 = sub_100004B18(&qword_1000C6678);
  if (!swift_dynamicCast(&v94, &v96, v14, a1, 6))
  {
    if (v10)
    {
      v25 = String._bridgeToObjectiveC()();
      v26 = objc_msgSend(v10, "objectForKey:", v25);

      if (v26)
      {
        _bridgeAnyObjectToAny(_:)(&v94);
        swift_unknownObjectRelease(v26, v27);
      }
      else
      {
        v94 = (Swift::String)0;
        v95 = 0u;
      }
      sub_100018064((uint64_t)&v94, (uint64_t)&v96, &qword_1000C6678);
      v93 = a4;
      if (*((_QWORD *)&v97 + 1))
      {
        if (swift_dynamicCast(&v94, &v96, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          v28 = a3;
          object = (unint64_t)v94._object;
          countAndFlagsBits = v94._countAndFlagsBits;
          strcpy((char *)&v96, "Found data: ");
          BYTE5(v96._object) = 0;
          HIWORD(v96._object) = -5120;
          v31._countAndFlagsBits = Data.description.getter(v94._countAndFlagsBits, v94._object);
          v32 = v31._object;
          String.append(_:)(v31);
          swift_bridgeObjectRelease(v32);
          v33 = v96._object;
          v91 = v28;
          sub_10001FEB4(a2, v28);
          v35 = v34;
          v36 = objc_allocWithZone((Class)CULogHandle);
          v37 = String._bridgeToObjectiveC()();
          v38 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v35);
          v39 = objc_msgSend(v36, "initWithSubsystem:category:", v37, v38, a2, v91);

          swift_bridgeObjectRetain(v33);
          v40 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v33);
          objc_msgSend(v39, "ulog:message:", 40, v40);
          swift_bridgeObjectRelease(v33);

          v41 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
          v42 = JSONDecoder.init()();
          v43 = v93();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, countAndFlagsBits, object, a1, v43);
          swift_release(v42);
          v76 = countAndFlagsBits;
LABEL_32:
          v89 = object;
          goto LABEL_33;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v96, &qword_1000C6678);
      }
      v44 = String._bridgeToObjectiveC()();
      v45 = objc_msgSend(v10, "objectForKey:", v44);

      if (v45)
      {
        _bridgeAnyObjectToAny(_:)(&v94);
        swift_unknownObjectRelease(v45, v46);
      }
      else
      {
        v94 = (Swift::String)0;
        v95 = 0u;
      }
      sub_100018064((uint64_t)&v94, (uint64_t)&v96, &qword_1000C6678);
      if (*((_QWORD *)&v97 + 1))
      {
        if (swift_dynamicCast(&v94, &v96, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v47 = v94;
          v96._countAndFlagsBits = 0;
          v96._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(16);
          swift_bridgeObjectRelease(v96._object);
          strcpy((char *)&v96, "Found string: ");
          HIBYTE(v96._object) = -18;
          String.append(_:)(v47);
          v48 = a3;
          v49 = v96._object;
          v92 = v48;
          sub_10001FEB4(a2, v48);
          v51 = v50;
          v52 = objc_allocWithZone((Class)CULogHandle);
          v53 = String._bridgeToObjectiveC()();
          v54 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v51);
          v55 = objc_msgSend(v52, "initWithSubsystem:category:", v53, v54, a2, v92);

          swift_bridgeObjectRetain(v49);
          v56 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v49);
          objc_msgSend(v55, "ulog:message:", 40, v56);
          swift_bridgeObjectRelease(v49);

          v96 = v47;
          v57 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v57, *(unsigned int *)(v57 + 48), *(unsigned __int16 *)(v57 + 52));
          v58 = JSONEncoder.init()();
          v77 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v96, &type metadata for String, &protocol witness table for String);
          object = v78;
          swift_bridgeObjectRelease(v47._object);
          swift_release(v58);
          v79 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
          v80 = JSONDecoder.init()();
          v81 = v93();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, v77, object, a1, v81);
          swift_release(v80);
          v76 = v77;
          goto LABEL_32;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v96, &qword_1000C6678);
      }
      v59 = String._bridgeToObjectiveC()();
      v60 = objc_msgSend(v10, "objectForKey:", v59);

      if (v60)
      {
        _bridgeAnyObjectToAny(_:)(&v94);
        swift_unknownObjectRelease(v60, v61);
      }
      else
      {
        v94 = (Swift::String)0;
        v95 = 0u;
      }
      sub_100018064((uint64_t)&v94, (uint64_t)&v96, &qword_1000C6678);
      if (*((_QWORD *)&v97 + 1))
      {
        if (swift_dynamicCast(&v94, &v96, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        {
          v62 = a2;
          v63 = v94._countAndFlagsBits;
          v96._countAndFlagsBits = 0x6E6920646E756F46;
          v96._object = (void *)0xEB00000000203A74;
          v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v65 = v64._object;
          String.append(_:)(v64);
          swift_bridgeObjectRelease(v65);
          v66 = v96._object;
          v90 = v62;
          sub_10001FEB4(v62, a3);
          v68 = v67;
          v69 = objc_allocWithZone((Class)CULogHandle);
          v70 = String._bridgeToObjectiveC()();
          v71 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v68);
          v72 = objc_msgSend(v69, "initWithSubsystem:category:", v70, v71, v90, a3);

          swift_bridgeObjectRetain(v66);
          v73 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v66);
          objc_msgSend(v72, "ulog:message:", 40, v73);
          swift_bridgeObjectRelease(v66);

          v96._countAndFlagsBits = v63;
          v74 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
          v75 = JSONEncoder.init()();
          v83 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v96, &type metadata for Int, &protocol witness table for Int);
          v85 = v84;
          swift_release(v75);
          v86 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
          v87 = JSONDecoder.init()();
          v88 = v93();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(a1, v83, v85, a1, v88);
          swift_release(v87);
          v76 = v83;
          v89 = v85;
LABEL_33:
          sub_10000ABA8(v76, v89);
          return LOBYTE(v96._countAndFlagsBits);
        }
        return *(unsigned __int8 *)(v9 + 16);
      }
    }
    else
    {
      v96 = (Swift::String)0;
      v97 = 0u;
      sub_100017AB4((uint64_t)&v96, &qword_1000C6678);
      v96 = (Swift::String)0;
      v97 = 0u;
      sub_100017AB4((uint64_t)&v96, &qword_1000C6678);
      v96 = (Swift::String)0;
      v97 = 0u;
    }
    sub_100017AB4((uint64_t)&v96, &qword_1000C6678);
    return *(unsigned __int8 *)(v9 + 16);
  }
  v15 = v94._countAndFlagsBits & 1;
  v96._countAndFlagsBits = 0;
  v96._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0x617620646E756F46;
  v16._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v16);
  LOBYTE(v94._countAndFlagsBits) = v15;
  _print_unlocked<A, B>(_:_:)(&v94, &v96, a1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v17 = v96._object;
  sub_10001FEB4(a2, a3);
  v19 = v18;
  v20 = objc_allocWithZone((Class)CULogHandle);
  v21 = String._bridgeToObjectiveC()();
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v23 = objc_msgSend(v20, "initWithSubsystem:category:", v21, v22);

  swift_bridgeObjectRetain(v17);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v23, "ulog:message:", 40, v24);
  swift_bridgeObjectRelease(v17);

  return v15;
}

double sub_10002377C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  NSString v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  unint64_t object;
  Swift::String v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  NSString v29;
  id v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  uint64_t v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  NSString v43;
  id v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  NSString v58;
  NSString v59;
  id v60;
  NSString v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  Swift::String v76;
  __int128 v77;
  Swift::String v78;
  __int128 v79;

  v1 = v0;
  v2 = *(void **)(v0 + 40);
  if (v2)
  {
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend(v2, "objectForKey:", v3);

    if (v4)
    {
      _bridgeAnyObjectToAny(_:)(&v76);
      swift_unknownObjectRelease(v4, v5);
    }
    else
    {
      v76 = (Swift::String)0;
      v77 = 0u;
    }
    sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
  }
  else
  {
    v78 = (Swift::String)0;
    v79 = 0u;
  }
  v6 = sub_100004B18(&qword_1000C6678);
  if (!swift_dynamicCast(&v76, &v78, v6, &type metadata for Double, 6))
  {
    if (v2)
    {
      v17 = String._bridgeToObjectiveC()();
      v18 = objc_msgSend(v2, "objectForKey:", v17);

      if (v18)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v18, v19);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
        {
          object = (unint64_t)v76._object;
          countAndFlagsBits = v76._countAndFlagsBits;
          strcpy((char *)&v78, "Found data: ");
          BYTE5(v78._object) = 0;
          HIWORD(v78._object) = -5120;
          v22._countAndFlagsBits = Data.description.getter(v76._countAndFlagsBits, v76._object);
          v23 = v22._object;
          String.append(_:)(v22);
          swift_bridgeObjectRelease(v23);
          v24 = v78._object;
          sub_10001FEB4(&qword_1000C7E60, &qword_1000C7E68);
          v26 = v25;
          v27 = objc_allocWithZone((Class)CULogHandle);
          v28 = String._bridgeToObjectiveC()();
          v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
          v30 = objc_msgSend(v27, "initWithSubsystem:category:", v28, v29);

          swift_bridgeObjectRetain(v24);
          v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v24);
          objc_msgSend(v30, "ulog:message:", 40, v31);
          swift_bridgeObjectRelease(v24);

          v32 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
          v33 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Double, countAndFlagsBits, object, &type metadata for Double, &protocol witness table for Double);
          swift_release(v33);
          v64 = countAndFlagsBits;
LABEL_32:
          v75 = object;
          goto LABEL_33;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      }
      v34 = String._bridgeToObjectiveC()();
      v35 = objc_msgSend(v2, "objectForKey:", v34);

      if (v35)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v35, v36);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for String, 6))
        {
          v37 = v76;
          v78._countAndFlagsBits = 0;
          v78._object = (void *)0xE000000000000000;
          _StringGuts.grow(_:)(16);
          swift_bridgeObjectRelease(v78._object);
          strcpy((char *)&v78, "Found string: ");
          HIBYTE(v78._object) = -18;
          String.append(_:)(v37);
          v38 = v78._object;
          sub_10001FEB4(&qword_1000C7E60, &qword_1000C7E68);
          v40 = v39;
          v41 = objc_allocWithZone((Class)CULogHandle);
          v42 = String._bridgeToObjectiveC()();
          v43 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v40);
          v44 = objc_msgSend(v41, "initWithSubsystem:category:", v42, v43);

          swift_bridgeObjectRetain(v38);
          v45 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v38);
          objc_msgSend(v44, "ulog:message:", 40, v45);
          swift_bridgeObjectRelease(v38);

          v78 = v37;
          v46 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
          v47 = JSONEncoder.init()();
          v65 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v78, &type metadata for String, &protocol witness table for String);
          object = v66;
          swift_bridgeObjectRelease(v37._object);
          swift_release(v47);
          v67 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
          v68 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Double, v65, object, &type metadata for Double, &protocol witness table for Double);
          swift_release(v68);
          v64 = v65;
          goto LABEL_32;
        }
      }
      else
      {
        sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      }
      v48 = String._bridgeToObjectiveC()();
      v49 = objc_msgSend(v2, "objectForKey:", v48);

      if (v49)
      {
        _bridgeAnyObjectToAny(_:)(&v76);
        swift_unknownObjectRelease(v49, v50);
      }
      else
      {
        v76 = (Swift::String)0;
        v77 = 0u;
      }
      sub_100018064((uint64_t)&v76, (uint64_t)&v78, &qword_1000C6678);
      if (*((_QWORD *)&v79 + 1))
      {
        if (swift_dynamicCast(&v76, &v78, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
        {
          v51 = v76._countAndFlagsBits;
          v78._countAndFlagsBits = 0x6E6920646E756F46;
          v78._object = (void *)0xEB00000000203A74;
          v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
          v53 = v52._object;
          String.append(_:)(v52);
          swift_bridgeObjectRelease(v53);
          v54 = v78._object;
          sub_10001FEB4(&qword_1000C7E60, &qword_1000C7E68);
          v56 = v55;
          v57 = objc_allocWithZone((Class)CULogHandle);
          v58 = String._bridgeToObjectiveC()();
          v59 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v56);
          v60 = objc_msgSend(v57, "initWithSubsystem:category:", v58, v59);

          swift_bridgeObjectRetain(v54);
          v61 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v54);
          objc_msgSend(v60, "ulog:message:", 40, v61);
          swift_bridgeObjectRelease(v54);

          v78._countAndFlagsBits = v51;
          v62 = type metadata accessor for JSONEncoder(0);
          swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
          v63 = JSONEncoder.init()();
          v70 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v78, &type metadata for Int, &protocol witness table for Int);
          v72 = v71;
          swift_release(v63);
          v73 = type metadata accessor for JSONDecoder(0);
          swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
          v74 = JSONDecoder.init()();
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for Double, v70, v72, &type metadata for Double, &protocol witness table for Double);
          swift_release(v74);
          v64 = v70;
          v75 = v72;
LABEL_33:
          sub_10000ABA8(v64, v75);
          return *(double *)&v78._countAndFlagsBits;
        }
        return *(double *)(v1 + 16);
      }
    }
    else
    {
      v78 = (Swift::String)0;
      v79 = 0u;
      sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      v78 = (Swift::String)0;
      v79 = 0u;
      sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
      v78 = (Swift::String)0;
      v79 = 0u;
    }
    sub_100017AB4((uint64_t)&v78, &qword_1000C6678);
    return *(double *)(v1 + 16);
  }
  v7 = *(double *)&v76._countAndFlagsBits;
  v78._countAndFlagsBits = 0;
  v78._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x617620646E756F46;
  v8._object = (void *)0xED0000203A65756CLL;
  String.append(_:)(v8);
  *(double *)&v76._countAndFlagsBits = v7;
  _print_unlocked<A, B>(_:_:)(&v76, &v78, &type metadata for Double, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v78._object;
  sub_10001FEB4(&qword_1000C7E60, &qword_1000C7E68);
  v11 = v10;
  v12 = objc_allocWithZone((Class)CULogHandle);
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v15 = objc_msgSend(v12, "initWithSubsystem:category:", v13, v14);

  swift_bridgeObjectRetain(v9);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v15, "ulog:message:", 40, v16);
  swift_bridgeObjectRelease(v9);

  return v7;
}

double sub_1000242A4@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100024680(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C7538, &qword_1000C7540).n128_u64[0];
  return result;
}

_QWORD *sub_1000242FC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 120) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 136) = v45[4];
  *(_OWORD *)(a9 + 152) = v37;
  *(_OWORD *)(a9 + 168) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 72) = v45[0];
  *(_OWORD *)(a9 + 88) = v38;
  *(_QWORD *)(a9 + 64) = *(_QWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 104) = v36;
  return sub_10001C41C((_QWORD *)v15);
}

uint64_t sub_1000244B4@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  _OWORD v47[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v45 = a5;
    v46 = a7;
    v44 = a3;
    v43 = a1;
    v42 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v42;
    v19 = a10;
    a1 = v43;
    a3 = v44;
    v18 = a12;
    a5 = v45;
    a7 = v46;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v47, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v34;
  *(_BYTE *)(a9 + 96) = *(_BYTE *)(v15 + 96);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v36;
  v37 = v47[1];
  *(_OWORD *)(a9 + 104) = v47[0];
  *(_OWORD *)(a9 + 120) = v37;
  v38 = v47[3];
  *(_OWORD *)(a9 + 136) = v47[2];
  v39 = v47[4];
  v40 = v47[5];
  *(_OWORD *)(a9 + 200) = v47[6];
  *(_OWORD *)(a9 + 184) = v40;
  *(_OWORD *)(a9 + 168) = v39;
  *(_OWORD *)(a9 + 152) = v38;
  return sub_100029258(v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002907C);
}

__n128 sub_100024680@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter();
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_100017F28(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100004B18(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

_QWORD *sub_10002484C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v21;
    v33 = static os_log_type_t.fault.getter();
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v39;
    v20 = a10;
    a1 = v40;
    a3 = v41;
    v19 = a12;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  memcpy(a9, v16, 0x1F0uLL);
  v35 = v44[5];
  a9[35] = v44[4];
  a9[36] = v35;
  a9[37] = v44[6];
  v36 = v44[1];
  a9[31] = v44[0];
  a9[32] = v36;
  v37 = v44[3];
  a9[33] = v44[2];
  a9[34] = v37;
  return sub_100029CFC(v16);
}

__n128 sub_1000249F4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v30;
  double v31;
  double v32;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v18 = a17;
  v19 = a15;
  v20 = a12;
  v21 = a10;
  v22 = a2 & 1;
  v23 = a1;
  if ((_DWORD)v22)
    v23 = -INFINITY;
  v24 = a4 & 1;
  v25 = a3;
  if ((_DWORD)v24)
    v25 = v23;
  v26 = a6 & 1;
  v27 = a8 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v25;
  if (v23 > v25 || v25 > v28)
    goto LABEL_22;
  v30 = a7;
  if ((a8 & 1) != 0)
    v30 = -INFINITY;
  v31 = a10;
  if ((a11 & 1) != 0)
    v31 = v30;
  v32 = a12;
  if ((a13 & 1) != 0)
    v32 = v31;
  if (v30 > v31 || v31 > v32)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v41 = a1;
    v42 = a3;
    v39 = v24;
    v40 = v22;
    v34 = static os_log_type_t.fault.getter();
    v35 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v24 = v39;
    v22 = v40;
    v19 = a15;
    v21 = a10;
    v20 = a12;
    a1 = v41;
    a3 = v42;
    a5 = v43;
    v18 = a17;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v22, *(_QWORD *)&a3, v24, *(_QWORD *)&a5, v26, *(_QWORD *)&a7, v27, *(_QWORD *)&v21, a11 & 1, *(_QWORD *)&v20, a13 & 1, a14, v19);
  *(_QWORD *)a9 = a16;
  *(_BYTE *)(a9 + 8) = v18 & 1;
  v36 = v45[5];
  *(_OWORD *)(a9 + 80) = v45[4];
  *(_OWORD *)(a9 + 96) = v36;
  *(_OWORD *)(a9 + 112) = v45[6];
  v37 = v45[1];
  *(_OWORD *)(a9 + 16) = v45[0];
  *(_OWORD *)(a9 + 32) = v37;
  result = (__n128)v45[3];
  *(_OWORD *)(a9 + 48) = v45[2];
  *(__n128 *)(a9 + 64) = result;
  return result;
}

uint64_t sub_100024B9C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD v52[7];

  v20 = a19;
  v21 = a18;
  v22 = a17;
  v24 = a14;
  v23 = a15;
  v25 = a12;
  v26 = a10;
  v27 = a2 & 1;
  v28 = a1;
  if ((_DWORD)v27)
    v28 = -INFINITY;
  v29 = a4 & 1;
  v30 = a3;
  if ((_DWORD)v29)
    v30 = v28;
  v31 = a6 & 1;
  v32 = a8 & 1;
  v33 = a13 & 1;
  v34 = a5;
  if ((a6 & 1) != 0)
    v34 = v30;
  if (v28 > v30 || v30 > v34)
    goto LABEL_22;
  v36 = a7;
  if ((a8 & 1) != 0)
    v36 = -INFINITY;
  v37 = a10;
  if ((a11 & 1) != 0)
    v37 = v36;
  v38 = a12;
  if ((a13 & 1) != 0)
    v38 = v37;
  if (v36 > v37 || v37 > v38)
  {
LABEL_22:
    v50 = a7;
    v51 = a5;
    v48 = a1;
    v49 = a3;
    v47 = v27;
    v46 = v29;
    v40 = static os_log_type_t.fault.getter();
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v33 = a13 & 1;
    v29 = v46;
    v24 = a14;
    v23 = a15;
    v27 = v47;
    v26 = a10;
    v25 = a12;
    a1 = v48;
    a3 = v49;
    a7 = v50;
    a5 = v51;
    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, *(_QWORD *)&a1, v27, *(_QWORD *)&a3, v29, *(_QWORD *)&a5, v31, *(_QWORD *)&a7, v32, *(_QWORD *)&v26, a11 & 1, *(_QWORD *)&v25, v33, v24, v23);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  v42 = v52[5];
  *(_OWORD *)(a9 + 96) = v52[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v52[6];
  v43 = v52[1];
  *(_OWORD *)(a9 + 32) = v52[0];
  *(_OWORD *)(a9 + 48) = v43;
  v44 = v52[3];
  *(_OWORD *)(a9 + 64) = v52[2];
  *(_OWORD *)(a9 + 80) = v44;
  sub_10001ED34(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain(v20);
}

_QWORD *sub_100024D7C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 120) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 136) = v45[4];
  *(_OWORD *)(a9 + 152) = v37;
  *(_OWORD *)(a9 + 168) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 72) = v45[0];
  *(_OWORD *)(a9 + 88) = v38;
  *(_QWORD *)(a9 + 64) = *(_QWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 104) = v36;
  return sub_100029510((_QWORD *)v15);
}

double sub_100024F34@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100024680(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000C7E50, &qword_1000C7E58).n128_u64[0];
  return result;
}

uint64_t sub_100024F8C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100081D80);
  v4 = swift_getKeyPath(&unk_100081DA8);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100024FF0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100081D38);
  v4 = swift_getKeyPath(&unk_100081D60);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_100025054()
{
  return sub_100019EAC((uint64_t)&unk_100081DC8, (uint64_t)&unk_100081DF0);
}

uint64_t sub_100025068()
{
  return sub_100019EAC((uint64_t)&unk_100081E10, (uint64_t)&unk_100081E38);
}

uint64_t sub_10002507C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher);
  }
  else
  {
    v4 = v0;
    v5 = sub_100004B18(&qword_1000C7CA0);
    v6 = sub_10000AAFC(&qword_1000C7CA8, &qword_1000C7CA0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v3 = Publisher.eraseToAnyPublisher()(v5, v6);
    v7 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v7);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_100025130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__header;
  v2 = sub_100004B18(&qword_1000C7C98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__content;
  v4 = sub_100004B18(&qword_1000C7C90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__closeButtonEnabled;
  v6 = sub_100004B18(&qword_1000C7500);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__enablePaddingForCloseButton, v6);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel_cardEventSubject));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002521C()
{
  return type metadata accessor for CardViewModel(0);
}

uint64_t type metadata accessor for CardViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C7908;
  if (!qword_1000C7908)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CardViewModel);
  return result;
}

void sub_100025260(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  char *v11;
  const char *v12;

  sub_100025338(319, &qword_1000C7918, &qword_1000C6E50);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100025338(319, (unint64_t *)&unk_1000C7920, (uint64_t *)&unk_1000C6E60);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100025384();
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        v11 = (char *)&value witness table for Builtin.NativeObject + 64;
        v12 = "\b";
        swift_updateClassMetadata2(a1, 256, 6, v8, a1 + 80);
      }
    }
  }
}

void sub_100025338(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_100005F48(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_100025384()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000C7338)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000C7338);
  }
}

uint64_t storeEnumTagSinglePayload for CardViewEvent(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100025418 + 4 * byte_100081BF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100025438 + 4 * byte_100081BF5[v4]))();
}

_BYTE *sub_100025418(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100025438(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100025440(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100025448(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100025450(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100025458(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CardViewEvent()
{
  return &type metadata for CardViewEvent;
}

_QWORD *initializeBufferWithCopyOfBuffer for CardView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for CardView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for CardView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

_QWORD *assignWithTake for CardView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for CardView()
{
  return &type metadata for CardView;
}

uint64_t sub_100025528(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100096E10, 1);
}

uint64_t sub_100025538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[56];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v1 = v0;
  v2 = sub_100004B18(&qword_1000C7500);
  v25 = *(_QWORD *)(v2 - 8);
  v26 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000C7C90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004B18(&qword_1000C7C98);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__header;
  *(_QWORD *)&v30 = 0;
  v28 = 0u;
  v29 = 0u;
  sub_100017F28((uint64_t)&v28, (uint64_t)v27, &qword_1000C6E50);
  v14 = sub_100004B18(&qword_1000C6E50);
  Published.init(initialValue:)(v27, v14);
  sub_100017AB4((uint64_t)&v28, &qword_1000C6E50);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v13, v12, v9);
  v15 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__content;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  sub_100017F28((uint64_t)&v28, (uint64_t)v27, (uint64_t *)&unk_1000C6E60);
  v16 = sub_100004B18((uint64_t *)&unk_1000C6E60);
  Published.init(initialValue:)(v27, v16);
  sub_100017AB4((uint64_t)&v28, (uint64_t *)&unk_1000C6E60);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15, v8, v5);
  v17 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__closeButtonEnabled;
  LOBYTE(v28) = 1;
  Published.init(initialValue:)(&v28, &type metadata for Bool);
  v18 = v26;
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
  v19(v17, v4, v26);
  v20 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__enablePaddingForCloseButton;
  LOBYTE(v28) = 1;
  Published.init(initialValue:)(&v28, &type metadata for Bool);
  v19(v20, v4, v18);
  v21 = OBJC_IVAR____TtC13PCViewService13CardViewModel_cardEventSubject;
  v22 = sub_100004B18(&qword_1000C7CA0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v1 + v21) = PassthroughSubject.init()();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher) = 0;
  return v1;
}

uint64_t sub_1000257B4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CardViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000257F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v34;
  _QWORD v35[6];
  uint64_t v36;

  v34 = a3;
  v5 = sub_100004B18(&qword_1000C7AA8);
  __chkstk_darwin(v5);
  v7 = (char *)&v35[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000C7AB0);
  __chkstk_darwin(v8);
  v10 = (char *)&v35[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000C7AB8);
  __chkstk_darwin(v11);
  v13 = (_QWORD *)((char *)&v35[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_100004B18(&qword_1000C7AC0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v35[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v7 = static HorizontalAlignment.center.getter(v15);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v18 = sub_100004B18(&qword_1000C7AC8);
  v19 = sub_100025A94(a1, a2, (uint64_t)&v7[*(int *)(v18 + 44)]);
  v20 = static Animation.default.getter(v19);
  KeyPath = swift_getKeyPath(&unk_100081D38);
  v22 = swift_getKeyPath(&unk_100081D60);
  v23 = swift_retain(a2);
  static Published.subscript.getter(v35, v23, KeyPath, v22);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v22);
  if (v35[3])
  {
    v25 = v35[5];
    v24 = v36;
    swift_bridgeObjectRetain(v36);
  }
  else
  {
    v25 = 0;
    v24 = 0;
  }
  sub_100017AB4((uint64_t)v35, (uint64_t *)&unk_1000C6E60);
  sub_100017F28((uint64_t)v7, (uint64_t)v10, &qword_1000C7AA8);
  v26 = (uint64_t *)&v10[*(int *)(v8 + 36)];
  *v26 = v20;
  v26[1] = v25;
  v26[2] = v24;
  v27 = sub_100017AB4((uint64_t)v7, &qword_1000C7AA8);
  v28 = static Color.red.getter(v27);
  sub_1000261C4(v28, 0, v13, 1.0);
  swift_release(v28);
  v29 = sub_100017AB4((uint64_t)v10, &qword_1000C7AB0);
  v30 = static SafeAreaRegions.container.getter(v29);
  v31 = static Edge.Set.all.getter();
  sub_100017F28((uint64_t)v13, (uint64_t)v17, &qword_1000C7AB8);
  v32 = &v17[*(int *)(v14 + 36)];
  *(_QWORD *)v32 = v30;
  v32[8] = v31;
  sub_100017AB4((uint64_t)v13, &qword_1000C7AB8);
  return sub_100018064((uint64_t)v17, v34, &qword_1000C7AC0);
}

uint64_t sub_100025A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[2];
  char v118;
  _QWORD v119[13];
  unsigned __int8 v120;
  uint64_t v121;
  unsigned __int8 v122;
  uint64_t v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;

  v112 = a3;
  v5 = sub_100004B18(&qword_1000C7B28);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100004B18(&qword_1000C7B30);
  __chkstk_darwin(v8);
  v10 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100004B18(&qword_1000C7B38);
  v11 = __chkstk_darwin(v113);
  v13 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v99 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v99 - v17;
  v19 = sub_100004B18(&qword_1000C7B40);
  v20 = __chkstk_darwin(v19);
  v116 = (uint64_t)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (uint64_t *)((char *)&v99 - v23);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v99 - v26;
  *v7 = static Alignment.topTrailing.getter(v25);
  v7[1] = v28;
  v29 = (uint64_t)v7 + *(int *)(sub_100004B18(&qword_1000C7B48) + 44);
  v114 = a1;
  v115 = a2;
  v30 = sub_100027FE4(a1, a2, v29);
  v31 = static Edge.Set.top.getter(v30);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v32 = *(_QWORD *)(qword_1000DF570 + 648);
  swift_retain(v32);
  v33 = sub_1000215CC();
  swift_release(v32);
  v34 = EdgeInsets.init(_all:)(v33);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_100017F28((uint64_t)v7, (uint64_t)v10, &qword_1000C7B28);
  v41 = &v10[*(int *)(v8 + 36)];
  *v41 = v31;
  *((double *)v41 + 1) = v34;
  *((_QWORD *)v41 + 2) = v36;
  *((_QWORD *)v41 + 3) = v38;
  *((_QWORD *)v41 + 4) = v40;
  v41[40] = 0;
  v42 = sub_100017AB4((uint64_t)v7, &qword_1000C7B28);
  v43 = static Edge.Set.leading.getter(v42);
  v44 = v43;
  v45 = static Edge.Set.trailing.getter(v43);
  v46 = Edge.Set.init(rawValue:)(0);
  v47 = Edge.Set.init(rawValue:)(v46);
  if (Edge.Set.init(rawValue:)(v47 & v44) != v44)
    v46 = Edge.Set.init(rawValue:)(v46 | v44);
  v48 = Edge.Set.init(rawValue:)(v46);
  if (Edge.Set.init(rawValue:)(v48 & v45) != v45)
    LOBYTE(v46) = Edge.Set.init(rawValue:)(v46 | v45);
  v49 = *(_QWORD *)(qword_1000DF570 + 656);
  swift_retain(v49);
  v50 = sub_1000215CC();
  swift_release(v49);
  v51 = EdgeInsets.init(_all:)(v50);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  sub_100017F28((uint64_t)v10, (uint64_t)v13, &qword_1000C7B30);
  v58 = &v13[*(int *)(v113 + 36)];
  *v58 = v46;
  *((double *)v58 + 1) = v51;
  *((_QWORD *)v58 + 2) = v53;
  *((_QWORD *)v58 + 3) = v55;
  *((_QWORD *)v58 + 4) = v57;
  v58[40] = 0;
  sub_100017AB4((uint64_t)v10, &qword_1000C7B30);
  sub_100018064((uint64_t)v13, (uint64_t)v16, &qword_1000C7B38);
  v59 = sub_100018064((uint64_t)v16, (uint64_t)v18, &qword_1000C7B38);
  v60 = static Color.green.getter(v59);
  sub_1000264B0(v60, 0, v24, 1.0);
  swift_release(v60);
  sub_100017AB4((uint64_t)v18, &qword_1000C7B38);
  v61 = (uint64_t)v27;
  v62 = sub_100018064((uint64_t)v24, (uint64_t)v27, &qword_1000C7B40);
  v63 = static Alignment.center.getter(v62);
  _FrameLayout.init(width:height:alignment:)(&v121, 0, 1, 0x4020000000000000, 0, v63, v64);
  v111 = v121;
  v110 = v122;
  v109 = v123;
  v108 = v124;
  v107 = v125;
  v106 = v126;
  v65 = sub_100027C10(v115, (uint64_t)v117);
  v66 = v117[0];
  v67 = v117[1];
  v68 = v118;
  v69 = static Color.blue.getter(v65);
  sub_10002679C(v69, 0, v66, v67, v68, (uint64_t)v119, 1.0);
  swift_release(v69);
  sub_100028C18(v66, v67, v68);
  v104 = v119[0];
  v103 = v119[1];
  v70 = v119[2];
  v72 = v119[3];
  v71 = v119[4];
  v73 = v119[6];
  v102 = v119[5];
  v105 = v61;
  v74 = v119[7];
  v101 = v119[8];
  v75 = v119[9];
  v76 = v119[10];
  v115 = v119[11];
  v114 = v119[12];
  LODWORD(v113) = v120;
  v77 = v61;
  v78 = v116;
  sub_100017F28(v77, v116, &qword_1000C7B40);
  v79 = v112;
  sub_100017F28(v78, v112, &qword_1000C7B40);
  v80 = (int *)sub_100004B18(&qword_1000C7B50);
  v81 = v79 + v80[12];
  *(_QWORD *)v81 = 0;
  *(_BYTE *)(v81 + 8) = 1;
  *(_QWORD *)(v81 + 16) = v111;
  *(_BYTE *)(v81 + 24) = v110;
  *(_QWORD *)(v81 + 32) = v109;
  *(_BYTE *)(v81 + 40) = v108;
  v82 = v106;
  *(_QWORD *)(v81 + 48) = v107;
  *(_QWORD *)(v81 + 56) = v82;
  v83 = v79 + v80[16];
  v84 = v104;
  v85 = v103;
  *(_QWORD *)v83 = v104;
  *(_QWORD *)(v83 + 8) = v85;
  *(_QWORD *)(v83 + 16) = v70;
  *(_QWORD *)(v83 + 24) = v72;
  v86 = v102;
  *(_QWORD *)(v83 + 32) = v71;
  *(_QWORD *)(v83 + 40) = v86;
  *(_QWORD *)(v83 + 48) = v73;
  *(_QWORD *)(v83 + 56) = v74;
  v87 = v101;
  *(_QWORD *)(v83 + 64) = v101;
  *(_QWORD *)(v83 + 72) = v75;
  v88 = v75;
  v100 = v76;
  v89 = v115;
  *(_QWORD *)(v83 + 80) = v76;
  *(_QWORD *)(v83 + 88) = v89;
  v90 = v114;
  *(_QWORD *)(v83 + 96) = v114;
  v91 = v113;
  *(_BYTE *)(v83 + 104) = v113;
  v92 = v79 + v80[20];
  *(_QWORD *)v92 = 0;
  *(_BYTE *)(v92 + 8) = 0;
  v97 = v75;
  v98 = v76;
  v93 = v87;
  v94 = v84;
  v95 = v85;
  sub_100028C50(v84, v85, v70, v72, v71, v86, v73, v74, v87, v97, v98, v89, v90, v91);
  sub_100017AB4(v105, &qword_1000C7B40);
  sub_100028CC4(v94, v95, v70, v72, v71, v86, v73, v74, v93, v88, v100, v115, v114, v113);
  return sub_100017AB4(v116, &qword_1000C7B40);
}

uint64_t sub_1000261C4@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[5];

  v5 = v4;
  v37 = a1;
  v38 = a3;
  v8 = sub_100004B18(&qword_1000C7AB0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000C7AD0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000C7AD8);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v17 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v17);
  v18 = sub_100020AA8();
  swift_release(v17);
  if ((v18 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v23 = *(double *)v39;
    v24 = v39[2];
    v25 = v39[3];
    v26 = v39[4];
    v27 = v37;
    v28 = swift_retain(v37);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    sub_100017F28(v5, (uint64_t)v16, &qword_1000C7AB0);
    v32 = &v16[*(int *)(v14 + 36)];
    *(double *)v32 = v23 * 0.5;
    *((double *)v32 + 1) = v23;
    *((_QWORD *)v32 + 2) = v39[1];
    *((_QWORD *)v32 + 3) = v24;
    *((_QWORD *)v32 + 4) = v25;
    *((_QWORD *)v32 + 5) = v26;
    *((_QWORD *)v32 + 6) = v27;
    *((_WORD *)v32 + 28) = 256;
    *((_QWORD *)v32 + 8) = v29;
    *((_QWORD *)v32 + 9) = v31;
    v19 = &qword_1000C7AD8;
    sub_100017F28((uint64_t)v16, (uint64_t)v13, &qword_1000C7AD8);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v33 = sub_100029BF4(&qword_1000C7AE0, &qword_1000C7AD8, (void (*)(void))sub_100028B7C);
    v34 = sub_100028B7C();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v33, v34);
    v22 = (uint64_t)v16;
  }
  else
  {
    v19 = &qword_1000C7AB0;
    sub_100017F28(v5, (uint64_t)v10, &qword_1000C7AB0);
    sub_100017F28((uint64_t)v10, (uint64_t)v13, &qword_1000C7AB0);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v20 = sub_100029BF4(&qword_1000C7AE0, &qword_1000C7AD8, (void (*)(void))sub_100028B7C);
    v21 = sub_100028B7C();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v20, v21);
    v22 = (uint64_t)v10;
  }
  return sub_100017AB4(v22, v19);
}

uint64_t sub_1000264B0@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[5];

  v5 = v4;
  v37 = a1;
  v38 = a3;
  v8 = sub_100004B18(&qword_1000C7B38);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000C7BA0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000C7BA8);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v17 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v17);
  v18 = sub_100020AA8();
  swift_release(v17);
  if ((v18 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v23 = *(double *)v39;
    v24 = v39[2];
    v25 = v39[3];
    v26 = v39[4];
    v27 = v37;
    v28 = swift_retain(v37);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    sub_100017F28(v5, (uint64_t)v16, &qword_1000C7B38);
    v32 = &v16[*(int *)(v14 + 36)];
    *(double *)v32 = v23 * 0.5;
    *((double *)v32 + 1) = v23;
    *((_QWORD *)v32 + 2) = v39[1];
    *((_QWORD *)v32 + 3) = v24;
    *((_QWORD *)v32 + 4) = v25;
    *((_QWORD *)v32 + 5) = v26;
    *((_QWORD *)v32 + 6) = v27;
    *((_WORD *)v32 + 28) = 256;
    *((_QWORD *)v32 + 8) = v29;
    *((_QWORD *)v32 + 9) = v31;
    v19 = &qword_1000C7BA8;
    sub_100017F28((uint64_t)v16, (uint64_t)v13, &qword_1000C7BA8);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v33 = sub_100029BF4(&qword_1000C7BB0, &qword_1000C7BA8, (void (*)(void))sub_100028E84);
    v34 = sub_100028E84();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v33, v34);
    v22 = (uint64_t)v16;
  }
  else
  {
    v19 = &qword_1000C7B38;
    sub_100017F28(v5, (uint64_t)v10, &qword_1000C7B38);
    sub_100017F28((uint64_t)v10, (uint64_t)v13, &qword_1000C7B38);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v20 = sub_100029BF4(&qword_1000C7BB0, &qword_1000C7BA8, (void (*)(void))sub_100028E84);
    v21 = sub_100028E84();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v20, v21);
    v22 = (uint64_t)v10;
  }
  return sub_100017AB4(v22, v19);
}

double sub_10002679C@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  double result;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  _OWORD v41[4];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  double v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v13 = a5 & 1;
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v14 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v14);
  v15 = sub_100020AA8();
  swift_release(v14);
  if ((v15 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v46, 0, 0, _swiftEmptyArrayStorage, a7, 10.0, 0.0);
    v16 = v46;
    v31 = v47;
    v17 = v48;
    v18 = v49;
    v19 = swift_retain(a1);
    v32 = a3;
    v33 = a4;
    v34 = v13;
    *(double *)&v35 = v16 * 0.5;
    *((double *)&v35 + 1) = v16;
    v36 = v31;
    *(_QWORD *)&v37 = v17;
    *((_QWORD *)&v37 + 1) = v18;
    *(_QWORD *)&v38 = a1;
    *((_QWORD *)&v38 + 1) = 256;
    *(_QWORD *)&v39 = static Alignment.center.getter(v19);
    *((_QWORD *)&v39 + 1) = v20;
    v40 = 0;
  }
  else
  {
    v32 = a3;
    v33 = a4;
    v34 = v13;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 1;
  }
  sub_100028C9C(a3, a4, v13);
  v21 = sub_100004B18(&qword_1000C7B58);
  v22 = sub_100004B18(&qword_1000C7B60);
  v23 = sub_100029BF4(&qword_1000C7B68, &qword_1000C7B58, (void (*)(void))sub_100028D10);
  v24 = sub_100028D10();
  _ConditionalContent<>.init(storage:)(v41, &v32, v21, v22, v23, v24);
  v25 = v44;
  v26 = v45;
  v27 = v41[1];
  *(_OWORD *)a6 = v41[0];
  *(_OWORD *)(a6 + 16) = v27;
  v28 = v41[3];
  *(_OWORD *)(a6 + 32) = v41[2];
  *(_OWORD *)(a6 + 48) = v28;
  result = *(double *)&v42;
  v30 = v43;
  *(_OWORD *)(a6 + 64) = v42;
  *(_OWORD *)(a6 + 80) = v30;
  *(_QWORD *)(a6 + 96) = v25;
  *(_BYTE *)(a6 + 104) = v26;
  return result;
}

double sub_100026988@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  char v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  __int128 v24;
  __int128 v25;
  double result;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  _OWORD v37[4];
  __int128 v38;
  __int128 v39;
  char v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v12 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v12);
  v13 = sub_100020AA8();
  swift_release(v12);
  if ((v13 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v41, 0, 0, _swiftEmptyArrayStorage, a6, 10.0, 0.0);
    v14 = v41;
    v28 = v42;
    v15 = v43;
    v16 = v44;
    v17 = swift_retain(a1);
    v29 = a3;
    v30 = a4;
    *(double *)&v31 = v14 * 0.5;
    *((double *)&v31 + 1) = v14;
    v32 = v28;
    *(_QWORD *)&v33 = v15;
    *((_QWORD *)&v33 + 1) = v16;
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = 256;
    *(_QWORD *)&v35 = static Alignment.center.getter(v17);
    *((_QWORD *)&v35 + 1) = v18;
    v36 = 0;
  }
  else
  {
    v29 = a3;
    v30 = a4;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 1;
  }
  swift_retain(a3);
  swift_retain(a4);
  v19 = sub_100004B18(&qword_1000C7C28);
  v20 = sub_100004B18(&qword_1000C7B80);
  v21 = sub_100029BF4(&qword_1000C7C30, &qword_1000C7C28, (void (*)(void))sub_100028D7C);
  v22 = sub_100028D7C();
  _ConditionalContent<>.init(storage:)(v37, &v29, v19, v20, v21, v22);
  v23 = v40;
  v24 = v37[1];
  *(_OWORD *)a5 = v37[0];
  *(_OWORD *)(a5 + 16) = v24;
  v25 = v37[3];
  *(_OWORD *)(a5 + 32) = v37[2];
  *(_OWORD *)(a5 + 48) = v25;
  result = *(double *)&v38;
  v27 = v39;
  *(_OWORD *)(a5 + 64) = v38;
  *(_OWORD *)(a5 + 80) = v27;
  *(_BYTE *)(a5 + 96) = v23;
  return result;
}

uint64_t sub_100026B64@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[5];

  v5 = v4;
  v37 = a1;
  v38 = a3;
  v8 = sub_100004B18(&qword_1000C7BF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000C7C38);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000C7C40);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v17 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v17);
  v18 = sub_100020AA8();
  swift_release(v17);
  if ((v18 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v23 = *(double *)v39;
    v24 = v39[2];
    v25 = v39[3];
    v26 = v39[4];
    v27 = v37;
    v28 = swift_retain(v37);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    sub_100017F28(v5, (uint64_t)v16, &qword_1000C7BF0);
    v32 = &v16[*(int *)(v14 + 36)];
    *(double *)v32 = v23 * 0.5;
    *((double *)v32 + 1) = v23;
    *((_QWORD *)v32 + 2) = v39[1];
    *((_QWORD *)v32 + 3) = v24;
    *((_QWORD *)v32 + 4) = v25;
    *((_QWORD *)v32 + 5) = v26;
    *((_QWORD *)v32 + 6) = v27;
    *((_WORD *)v32 + 28) = 256;
    *((_QWORD *)v32 + 8) = v29;
    *((_QWORD *)v32 + 9) = v31;
    v19 = &qword_1000C7C40;
    sub_100017F28((uint64_t)v16, (uint64_t)v13, &qword_1000C7C40);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v33 = sub_100029BF4(&qword_1000C7C48, &qword_1000C7C40, (void (*)(void))sub_1000292B4);
    v34 = sub_1000292B4();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v33, v34);
    v22 = (uint64_t)v16;
  }
  else
  {
    v19 = &qword_1000C7BF0;
    sub_100017F28(v5, (uint64_t)v10, &qword_1000C7BF0);
    sub_100017F28((uint64_t)v10, (uint64_t)v13, &qword_1000C7BF0);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v20 = sub_100029BF4(&qword_1000C7C48, &qword_1000C7C40, (void (*)(void))sub_1000292B4);
    v21 = sub_1000292B4();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v20, v21);
    v22 = (uint64_t)v10;
  }
  return sub_100017AB4(v22, v19);
}

void *sub_100026E50@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>, double a4@<D0>)
{
  const void *v4;
  uint64_t v5;
  uint64_t v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE v26[448];
  _BYTE v27[360];
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD __src[56];
  double v39[5];
  _BYTE __dst[353];

  v5 = (uint64_t)v4;
  memcpy(__dst, v4, sizeof(__dst));
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v10 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v10);
  v11 = sub_100020AA8();
  swift_release(v10);
  if ((v11 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v12 = v39[0];
    v13 = v39[2];
    v14 = v39[3];
    v15 = v39[4];
    v16 = v39[0] * 0.5;
    v17 = swift_retain(a1);
    v18 = static Alignment.center.getter(v17);
    v20 = v19;
    memcpy(v27, __dst, 0x161uLL);
    v28 = v16;
    v29 = v12;
    v30 = v39[1];
    v31 = v13;
    v32 = v14;
    v33 = v15;
    v34 = a1;
    v35 = 256;
    v36 = v18;
    v37 = v20;
    sub_1000297C8((uint64_t)v27);
  }
  else
  {
    memcpy(v27, __dst, 0x161uLL);
    sub_1000295B4((uint64_t)v27);
  }
  sub_100018064((uint64_t)v27, (uint64_t)v26, &qword_1000C7D00);
  sub_1000295C0(v5);
  v21 = sub_100004B18(&qword_1000C7D08);
  v22 = sub_100004B18(&qword_1000C7D10);
  v23 = sub_100029BF4(&qword_1000C7D18, &qword_1000C7D08, (void (*)(void))sub_100029744);
  v24 = sub_100029744();
  _ConditionalContent<>.init(storage:)(__src, v26, v21, v22, v23, v24);
  return memcpy(a3, __src, 0x1B9uLL);
}

uint64_t sub_100027050@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[5];

  v5 = v4;
  v37 = a1;
  v38 = a3;
  v8 = sub_100004B18(&qword_1000C7DB0);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000C7DB8);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000C7DC0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v17 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v17);
  v18 = sub_100020AA8();
  swift_release(v17);
  if ((v18 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v23 = *(double *)v39;
    v24 = v39[2];
    v25 = v39[3];
    v26 = v39[4];
    v27 = v37;
    v28 = swift_retain(v37);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    sub_100017F28(v5, (uint64_t)v16, &qword_1000C7DB0);
    v32 = &v16[*(int *)(v14 + 36)];
    *(double *)v32 = v23 * 0.5;
    *((double *)v32 + 1) = v23;
    *((_QWORD *)v32 + 2) = v39[1];
    *((_QWORD *)v32 + 3) = v24;
    *((_QWORD *)v32 + 4) = v25;
    *((_QWORD *)v32 + 5) = v26;
    *((_QWORD *)v32 + 6) = v27;
    *((_WORD *)v32 + 28) = 256;
    *((_QWORD *)v32 + 8) = v29;
    *((_QWORD *)v32 + 9) = v31;
    v19 = &qword_1000C7DC0;
    sub_100017F28((uint64_t)v16, (uint64_t)v13, &qword_1000C7DC0);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v33 = sub_100029BF4(&qword_1000C7DC8, &qword_1000C7DC0, (void (*)(void))sub_100029A14);
    v34 = sub_100029A14();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v33, v34);
    v22 = (uint64_t)v16;
  }
  else
  {
    v19 = &qword_1000C7DB0;
    sub_100017F28(v5, (uint64_t)v10, &qword_1000C7DB0);
    sub_100017F28((uint64_t)v10, (uint64_t)v13, &qword_1000C7DB0);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v20 = sub_100029BF4(&qword_1000C7DC8, &qword_1000C7DC0, (void (*)(void))sub_100029A14);
    v21 = sub_100029A14();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v20, v21);
    v22 = (uint64_t)v10;
  }
  return sub_100017AB4(v22, v19);
}

uint64_t sub_10002733C@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[5];

  v5 = v4;
  v37 = a1;
  v38 = a3;
  v8 = sub_100004B18(&qword_1000C7D70);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000C7D78);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000C7D80);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v17 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v17);
  v18 = sub_100020AA8();
  swift_release(v17);
  if ((v18 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v23 = *(double *)v39;
    v24 = v39[2];
    v25 = v39[3];
    v26 = v39[4];
    v27 = v37;
    v28 = swift_retain(v37);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    sub_100017F28(v5, (uint64_t)v16, &qword_1000C7D70);
    v32 = &v16[*(int *)(v14 + 36)];
    *(double *)v32 = v23 * 0.5;
    *((double *)v32 + 1) = v23;
    *((_QWORD *)v32 + 2) = v39[1];
    *((_QWORD *)v32 + 3) = v24;
    *((_QWORD *)v32 + 4) = v25;
    *((_QWORD *)v32 + 5) = v26;
    *((_QWORD *)v32 + 6) = v27;
    *((_WORD *)v32 + 28) = 256;
    *((_QWORD *)v32 + 8) = v29;
    *((_QWORD *)v32 + 9) = v31;
    v19 = &qword_1000C7D80;
    sub_100017F28((uint64_t)v16, (uint64_t)v13, &qword_1000C7D80);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v33 = sub_100029BF4(&qword_1000C7D88, &qword_1000C7D80, (void (*)(void))sub_100029924);
    v34 = sub_100029924();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v33, v34);
    v22 = (uint64_t)v16;
  }
  else
  {
    v19 = &qword_1000C7D70;
    sub_100017F28(v5, (uint64_t)v10, &qword_1000C7D70);
    sub_100017F28((uint64_t)v10, (uint64_t)v13, &qword_1000C7D70);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v20 = sub_100029BF4(&qword_1000C7D88, &qword_1000C7D80, (void (*)(void))sub_100029924);
    v21 = sub_100029924();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v20, v21);
    v22 = (uint64_t)v10;
  }
  return sub_100017AB4(v22, v19);
}

uint64_t sub_100027628@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v39[5];

  v5 = v4;
  v37 = a1;
  v38 = a3;
  v8 = sub_100004B18(&qword_1000C7E28);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000C7E30);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000C7E38);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v17 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v17);
  v18 = sub_100020AA8();
  swift_release(v17);
  if ((v18 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v39, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v23 = *(double *)v39;
    v24 = v39[2];
    v25 = v39[3];
    v26 = v39[4];
    v27 = v37;
    v28 = swift_retain(v37);
    v29 = static Alignment.center.getter(v28);
    v31 = v30;
    sub_100017F28(v5, (uint64_t)v16, &qword_1000C7E28);
    v32 = &v16[*(int *)(v14 + 36)];
    *(double *)v32 = v23 * 0.5;
    *((double *)v32 + 1) = v23;
    *((_QWORD *)v32 + 2) = v39[1];
    *((_QWORD *)v32 + 3) = v24;
    *((_QWORD *)v32 + 4) = v25;
    *((_QWORD *)v32 + 5) = v26;
    *((_QWORD *)v32 + 6) = v27;
    *((_WORD *)v32 + 28) = 256;
    *((_QWORD *)v32 + 8) = v29;
    *((_QWORD *)v32 + 9) = v31;
    v19 = &qword_1000C7E38;
    sub_100017F28((uint64_t)v16, (uint64_t)v13, &qword_1000C7E38);
    swift_storeEnumTagMultiPayload(v13, v11, 0);
    v33 = sub_100029BF4((unint64_t *)&qword_1000C7E40, &qword_1000C7E38, (void (*)(void))sub_100029C78);
    v34 = sub_100029C78();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v33, v34);
    v22 = (uint64_t)v16;
  }
  else
  {
    v19 = &qword_1000C7E28;
    sub_100017F28(v5, (uint64_t)v10, &qword_1000C7E28);
    sub_100017F28((uint64_t)v10, (uint64_t)v13, &qword_1000C7E28);
    swift_storeEnumTagMultiPayload(v13, v11, 1);
    v20 = sub_100029BF4((unint64_t *)&qword_1000C7E40, &qword_1000C7E38, (void (*)(void))sub_100029C78);
    v21 = sub_100029C78();
    _ConditionalContent<>.init(storage:)(v38, v13, v14, v8, v20, v21);
    v22 = (uint64_t)v10;
  }
  return sub_100017AB4(v22, v19);
}

__n128 sub_100027914@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v10;
  char v11;
  __int128 *v12;
  char v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __n128 result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[144];
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  double v47;
  unsigned __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD v55[7];
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  char v66;

  v5 = v4;
  v10 = *(_QWORD *)v4;
  v11 = *((_BYTE *)v4 + 16);
  v12 = v4 + 2;
  v35 = *((_QWORD *)v4 + 1);
  v36 = *((_QWORD *)v4 + 3);
  v37 = *((_QWORD *)v4 + 4);
  v38 = *((_QWORD *)v4 + 5);
  v13 = *((_BYTE *)v4 + 48);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v14 = *(_QWORD *)(qword_1000DF570 + 128);
  swift_retain(v14);
  v15 = sub_100020AA8();
  swift_release(v14);
  if ((v15 & 1) != 0 || (a2 & 1) != 0)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v57, 0, 0, _swiftEmptyArrayStorage, a4, 10.0, 0.0);
    v18 = v57;
    v19 = v58;
    v20 = v59;
    v21 = *(double *)&v57 * 0.5;
    v22 = swift_retain(a1);
    v23 = static Alignment.center.getter(v22);
    v25 = v24;
    v26 = v5[1];
    v62 = *v5;
    v63 = v26;
    sub_1000297D0((uint64_t)&v62, (uint64_t)&v65);
    v64 = *((_QWORD *)&v63 + 1);
    v60 = *v12;
    v61 = *((_BYTE *)v12 + 16);
    v40 = v10;
    v41 = v35;
    v42 = v11 & 1;
    v43 = v36;
    v44 = v37;
    v45 = v38;
    v46 = v13 & 1;
    v47 = v21;
    v48 = __PAIR128__(*((unint64_t *)&v57 + 1), v18);
    v49 = v19;
    v50 = v20;
    v51 = a1;
    v52 = 256;
    v53 = v23;
    v54 = v25;
    sub_10002991C((uint64_t)&v40);
    sub_100018064((uint64_t)&v40, (uint64_t)v39, &qword_1000C7D38);
    sub_100029818((uint64_t)&v65);
    sub_100029848(&v64);
    v17 = &v60;
  }
  else
  {
    v16 = v5[1];
    v57 = *v5;
    v58 = v16;
    sub_1000297D0((uint64_t)&v57, (uint64_t)&v62);
    *(_QWORD *)&v60 = *((_QWORD *)&v58 + 1);
    v65 = *v12;
    v66 = *((_BYTE *)v12 + 16);
    v40 = v10;
    v41 = v35;
    v42 = v11 & 1;
    v43 = v36;
    v44 = v37;
    v45 = v38;
    v46 = v13 & 1;
    sub_10002980C((uint64_t)&v40);
    sub_100018064((uint64_t)&v40, (uint64_t)v39, &qword_1000C7D38);
    sub_100029818((uint64_t)&v62);
    sub_100029848(&v60);
    v17 = &v65;
  }
  sub_100029870(v17);
  v27 = sub_100004B18(&qword_1000C7D40);
  v28 = sub_100004B18(&qword_1000C7D48);
  v29 = sub_100029BF4(&qword_1000C7D50, &qword_1000C7D40, (void (*)(void))sub_100029898);
  v30 = sub_100029898();
  _ConditionalContent<>.init(storage:)(v55, v39, v27, v28, v29, v30);
  v31 = v56[0];
  *(_OWORD *)(a3 + 96) = v55[6];
  *(_OWORD *)(a3 + 112) = v31;
  *(_OWORD *)(a3 + 121) = *(_OWORD *)((char *)v56 + 9);
  v32 = v55[3];
  *(_OWORD *)(a3 + 32) = v55[2];
  *(_OWORD *)(a3 + 48) = v32;
  v33 = v55[5];
  *(_OWORD *)(a3 + 64) = v55[4];
  *(_OWORD *)(a3 + 80) = v33;
  result = (__n128)v55[1];
  *(_OWORD *)a3 = v55[0];
  *(__n128 *)(a3 + 16) = result;
  return result;
}

_QWORD *sub_100027C10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *result;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51[56];
  char v52[48];
  __int128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  KeyPath = swift_getKeyPath(&unk_100081D38);
  v5 = swift_getKeyPath(&unk_100081D60);
  v6 = swift_retain(a1);
  static Published.subscript.getter(&v53, v6, KeyPath, v5);
  swift_release(a1);
  swift_release(KeyPath);
  swift_release(v5);
  if (v55)
  {
    sub_100028E28(&v53, (uint64_t)&v58);
    v62 = v56;
    v63 = v57;
    v7 = v60;
    v8 = v61;
    sub_100006914(&v58, v60);
    v9 = sub_10006248C(v7, v8);
    v10 = sub_100004B18(&qword_1000C7B88);
    inited = swift_initStackObject(v10, v52);
    *(_OWORD *)(inited + 16) = xmmword_100081E60;
    *(_QWORD *)&v53 = 0x4024000000000000;
    BYTE8(v53) = 0;
    v48 = 0;
    LOBYTE(v49) = 0;
    v12 = sub_100028E40();
    *(_QWORD *)(inited + 32) = static AnyTransition.modifier<A>(active:identity:)(&v53, &v48, &type metadata for BlurModifier, v12);
    v13 = static AnyTransition.opacity.getter();
    *(_QWORD *)(inited + 40) = v13;
    *(_QWORD *)&v53 = inited;
    v14 = specialized Array._endMutation()(v13);
    v15 = v53;
    v16 = static AnyTransition.identity.getter(v14);
    v17 = v16;
    v18 = *(_QWORD *)(v15 + 16);
    if (v18)
    {
      v46 = a2;
      v19 = v9;
      swift_retain(v16);
      swift_bridgeObjectRetain(v15);
      v20 = 0;
      v21 = v17;
      do
      {
        v22 = v21;
        v23 = *(_QWORD *)(v15 + 8 * v20++ + 32);
        v24 = swift_retain(v23);
        v21 = AnyTransition.combined(with:)(v24, v21);
        swift_release(v22);
        swift_release(v23);
      }
      while (v18 != v20);
      swift_release(v17);
      swift_bridgeObjectRelease(v15);
      v9 = v19;
      a2 = v46;
    }
    else
    {
      v21 = v16;
    }
    swift_bridgeObjectRelease(v15);
    v31 = swift_initStackObject(v10, v51);
    *(_OWORD *)(v31 + 16) = xmmword_100081E70;
    *(_QWORD *)&v53 = 0x4024000000000000;
    BYTE8(v53) = 0;
    v48 = 0;
    LOBYTE(v49) = 0;
    *(_QWORD *)(v31 + 32) = static AnyTransition.modifier<A>(active:identity:)(&v53, &v48, &type metadata for BlurModifier, v12);
    *(_QWORD *)(v31 + 40) = static AnyTransition.opacity.getter();
    v32 = static AnyTransition.scale.getter();
    *(_QWORD *)(v31 + 48) = v32;
    *(_QWORD *)&v53 = v31;
    v33 = specialized Array._endMutation()(v32);
    v34 = v53;
    v35 = static AnyTransition.identity.getter(v33);
    v36 = v35;
    v37 = *(_QWORD *)(v34 + 16);
    if (v37)
    {
      swift_retain(v35);
      swift_bridgeObjectRetain(v34);
      v38 = 0;
      v39 = v36;
      do
      {
        v40 = v39;
        v41 = *(_QWORD *)(v34 + 8 * v38++ + 32);
        v42 = swift_retain(v41);
        v39 = AnyTransition.combined(with:)(v42, v39);
        swift_release(v40);
        swift_release(v41);
      }
      while (v37 != v38);
      swift_release(v36);
      swift_bridgeObjectRelease(v34);
    }
    else
    {
      v39 = v35;
    }
    swift_bridgeObjectRelease(v34);
    v43 = static AnyTransition.asymmetric(insertion:removal:)(v21, v39);
    swift_release(v21);
    swift_release(v39);
    v48 = v9;
    v49 = v43;
    v50 = 0;
    v44 = sub_100004B18(&qword_1000C7B80);
    v45 = sub_100028D7C();
    _ConditionalContent<>.init(storage:)(&v53, &v48, v44, &type metadata for AnyView, v45, &protocol witness table for AnyView);
    v47 = v53;
    v30 = v54;
    result = (_QWORD *)sub_100017AB4((uint64_t)&v58, &qword_1000C7B98);
    v29 = v47;
  }
  else
  {
    v25 = sub_100017AB4((uint64_t)&v53, (uint64_t *)&unk_1000C6E60);
    v53 = (unint64_t)AnyView.init<A>(_:)(v25, &type metadata for EmptyView, &protocol witness table for EmptyView);
    v54 = 1;
    v26 = sub_100004B18(&qword_1000C7B80);
    v27 = sub_100028D7C();
    result = _ConditionalContent<>.init(storage:)(&v58, &v53, v26, &type metadata for AnyView, v27, &protocol witness table for AnyView);
    v29 = v58;
    v30 = v59;
  }
  *(_OWORD *)a2 = v29;
  *(_BYTE *)(a2 + 16) = v30;
  return result;
}

uint64_t sub_100027FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  _OWORD v108[6];
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  _OWORD v124[13];
  uint64_t v125;
  char v126;
  double v127;
  double v128;
  double v129;
  double v130;
  char v131;
  _QWORD v132[3];
  uint64_t v133;
  uint64_t v134;
  _OWORD v135[6];
  char v136;
  uint64_t v137;
  char v138;

  v6 = sub_100004B18(&qword_1000C7BE8);
  v98 = *(_QWORD *)(v6 - 8);
  v99 = v6;
  __chkstk_darwin(v6);
  v104 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100004B18(&qword_1000C7BF0);
  __chkstk_darwin(v96);
  v97 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004B18(&qword_1000C7BF8);
  __chkstk_darwin(v9);
  v102 = (uint64_t *)((char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100004B18(&qword_1000C7C00);
  v103 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v101 = (uint64_t)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v100 = (uint64_t)&v92 - v14;
  v15 = sub_100004B18(&qword_1000C7C08);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v92 - v19;
  KeyPath = swift_getKeyPath(&unk_100081D80);
  v22 = swift_getKeyPath(&unk_100081DA8);
  v23 = swift_retain(a2);
  static Published.subscript.getter(&v110, v23, KeyPath, v22);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v22);
  v105 = v11;
  v106 = a3;
  if (*((_QWORD *)&v111 + 1))
  {
    v93 = a1;
    v94 = v20;
    v95 = v18;
    sub_100028E28(&v110, (uint64_t)v132);
    v24 = v133;
    v25 = v134;
    sub_100006914(v132, v133);
    v26 = sub_10006248C(v24, v25);
    v27 = sub_100004B18(&qword_1000C7B88);
    v28 = swift_allocObject(v27, 48, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100081E60;
    v137 = 0x4024000000000000;
    v138 = 0;
    *(_QWORD *)&v124[0] = 0;
    BYTE8(v124[0]) = 0;
    v29 = sub_100028E40();
    *(_QWORD *)(v28 + 32) = static AnyTransition.modifier<A>(active:identity:)(&v137, v124, &type metadata for BlurModifier, v29);
    v30 = static AnyTransition.opacity.getter();
    *(_QWORD *)(v28 + 40) = v30;
    v137 = v28;
    v31 = specialized Array._endMutation()(v30);
    v32 = v137;
    v33 = static AnyTransition.identity.getter(v31);
    v34 = v33;
    v35 = *(_QWORD *)(v32 + 16);
    if (v35)
    {
      v92 = v26;
      swift_retain(v33);
      swift_bridgeObjectRetain(v32);
      v36 = 0;
      v37 = v34;
      do
      {
        v38 = v37;
        v39 = *(_QWORD *)(v32 + 8 * v36++ + 32);
        v40 = swift_retain(v39);
        v37 = AnyTransition.combined(with:)(v40, v37);
        swift_release(v38);
        swift_release(v39);
      }
      while (v35 != v36);
      swift_release(v34);
      swift_bridgeObjectRelease(v32);
      v26 = v92;
    }
    else
    {
      v37 = v33;
    }
    v41 = swift_bridgeObjectRelease(v32);
    v42 = static Color.green.getter(v41);
    sub_100026988(v42, 0, v26, v37, (uint64_t)v108, 1.0);
    swift_release(v37);
    swift_release(v26);
    swift_release(v42);
    v135[4] = v108[4];
    v135[5] = v108[5];
    v136 = v109;
    v135[0] = v108[0];
    v135[1] = v108[1];
    v135[2] = v108[2];
    v135[3] = v108[3];
    v43 = static Alignment.leading.getter();
    sub_1000244B4(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v110, 0.0, 1, 0.0, 1, v43, v44);
    v45 = sub_100029258((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100029188);
    v46 = static Edge.Set.trailing.getter(v45);
    v47 = swift_getKeyPath(&unk_100081E10);
    v48 = swift_getKeyPath(&unk_100081E38);
    v49 = swift_retain(a2);
    static Published.subscript.getter(&v137, v49, v47, v48);
    swift_release(a2);
    swift_release(v47);
    swift_release(v48);
    v50 = 40.0;
    if (!(_BYTE)v137)
      v50 = 0.0;
    v51 = EdgeInsets.init(_all:)(v50);
    v107 = 0;
    v124[10] = v120;
    v124[11] = v121;
    v124[12] = v122;
    v125 = v123;
    v124[6] = v116;
    v124[7] = v117;
    v124[8] = v118;
    v124[9] = v119;
    v124[2] = v112;
    v124[3] = v113;
    v124[4] = v114;
    v124[5] = v115;
    v124[0] = v110;
    v124[1] = v111;
    v126 = v46;
    v127 = v51;
    v128 = v52;
    v129 = v53;
    v130 = v54;
    v131 = 0;
    nullsub_1(v51, v52, v53, v54);
    sub_10000697C(v132);
    sub_100018064((uint64_t)v124, (uint64_t)&v137, &qword_1000C7C10);
    a3 = v106;
    v20 = v94;
    v18 = v95;
    a1 = v93;
  }
  else
  {
    sub_100017AB4((uint64_t)&v110, &qword_1000C6E50);
    sub_100028FC0((uint64_t)v124);
    sub_100018064((uint64_t)v124, (uint64_t)&v137, &qword_1000C7C10);
  }
  v55 = swift_getKeyPath(&unk_100081DC8);
  v56 = swift_getKeyPath(&unk_100081DF0);
  v57 = swift_retain(a2);
  static Published.subscript.getter(v124, v57, v55, v56);
  swift_release(a2);
  swift_release(v55);
  swift_release(v56);
  if (LOBYTE(v124[0]) == 1)
  {
    v58 = swift_allocObject(&unk_1000B4420, 32, 7);
    *(_QWORD *)(v58 + 16) = a1;
    *(_QWORD *)(v58 + 24) = a2;
    v59 = type metadata accessor for CloseButtonView(0);
    v60 = sub_100003E48(&qword_1000C7C20, type metadata accessor for CloseButtonView, (uint64_t)&unk_1000831E8);
    swift_retain(a2);
    v61 = Button.init(action:label:)(sub_100029208, v58, sub_100028918, 0, v59, v60);
    v62 = static Edge.Set.top.getter(v61);
    v63 = v62;
    v64 = static Edge.Set.trailing.getter(v62);
    v65 = Edge.Set.init(rawValue:)(0);
    v66 = Edge.Set.init(rawValue:)(v65);
    if (Edge.Set.init(rawValue:)(v66 & v63) != v63)
      v65 = Edge.Set.init(rawValue:)(v65 | v63);
    v67 = Edge.Set.init(rawValue:)(v65);
    if (Edge.Set.init(rawValue:)(v67 & v64) != v64)
      LOBYTE(v65) = Edge.Set.init(rawValue:)(v65 | v64);
    v68 = v103;
    v69 = EdgeInsets.init(_all:)(10.0);
    v71 = v70;
    v73 = v72;
    v75 = v74;
    v77 = (uint64_t)v97;
    v76 = v98;
    v78 = v104;
    v79 = v99;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v97, v104, v99);
    v80 = v77 + *(int *)(v96 + 36);
    *(_BYTE *)v80 = v65;
    *(double *)(v80 + 8) = v69;
    *(_QWORD *)(v80 + 16) = v71;
    *(_QWORD *)(v80 + 24) = v73;
    *(_QWORD *)(v80 + 32) = v75;
    *(_BYTE *)(v80 + 40) = 0;
    v81 = (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v78, v79);
    v82 = static Color.purple.getter(v81);
    v83 = v102;
    sub_100026B64(v82, 0, v102, 1.0);
    swift_release(v82);
    v84 = sub_100017AB4(v77, &qword_1000C7BF0);
    v85 = static Alignment.trailing.getter(v84);
    v86 = v101;
    sub_100024680(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v101, 0.0, 1, 0.0, 1, v85, v87, &qword_1000C7BF8, &qword_1000C7C00);
    sub_100017AB4((uint64_t)v83, &qword_1000C7BF8);
    v88 = v100;
    sub_100018064(v86, v100, &qword_1000C7C00);
    sub_100018064(v88, (uint64_t)v20, &qword_1000C7C00);
    v89 = 0;
    a3 = v106;
  }
  else
  {
    v89 = 1;
    v68 = v103;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v20, v89, 1, v105);
  sub_100018064((uint64_t)&v137, (uint64_t)v108, &qword_1000C7C10);
  sub_100017F28((uint64_t)v20, (uint64_t)v18, &qword_1000C7C08);
  sub_100018064((uint64_t)v108, (uint64_t)&v110, &qword_1000C7C10);
  sub_100018064((uint64_t)&v110, a3, &qword_1000C7C10);
  v90 = sub_100004B18(&qword_1000C7C18);
  sub_100017F28((uint64_t)v18, a3 + *(int *)(v90 + 48), &qword_1000C7C08);
  sub_1000290D4((uint64_t)&v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002904C);
  sub_100017AB4((uint64_t)v20, &qword_1000C7C08);
  sub_100017AB4((uint64_t)v18, &qword_1000C7C08);
  sub_100018064((uint64_t)v108, (uint64_t)v124, &qword_1000C7C10);
  return sub_1000290D4((uint64_t)v124, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100029158);
}

uint64_t sub_1000288E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13PCViewService13CardViewModel_cardEventSubject);
  v3 = swift_retain(v2);
  PassthroughSubject.send(_:)(v3);
  return swift_release(v2);
}

uint64_t sub_10002891C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000257F0(*v1, v1[1], a1);
}

unint64_t sub_100028928()
{
  unint64_t result;

  result = qword_1000C7AA0;
  if (!qword_1000C7AA0)
  {
    result = swift_getWitnessTable(&unk_100081CD8, &type metadata for CardViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000C7AA0);
  }
  return result;
}

uint64_t sub_10002896C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100081D80);
  v5 = swift_getKeyPath(&unk_100081DA8);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_1000289D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _BYTE v7[40];
  _BYTE v8[40];

  sub_100017F28(a1, (uint64_t)v8, &qword_1000C6E50);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100081D80);
  v5 = swift_getKeyPath(&unk_100081DA8);
  sub_100017F28((uint64_t)v8, (uint64_t)v7, &qword_1000C6E50);
  swift_retain(v3);
  static Published.subscript.setter(v7, v3, KeyPath, v5);
  return sub_100017AB4((uint64_t)v8, &qword_1000C6E50);
}

uint64_t sub_100028A70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100081D38);
  v5 = swift_getKeyPath(&unk_100081D60);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(KeyPath);
  return swift_release(v5);
}

uint64_t sub_100028ADC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _BYTE v7[56];
  _BYTE v8[56];

  sub_100017F28(a1, (uint64_t)v8, (uint64_t *)&unk_1000C6E60);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100081D38);
  v5 = swift_getKeyPath(&unk_100081D60);
  sub_100017F28((uint64_t)v8, (uint64_t)v7, (uint64_t *)&unk_1000C6E60);
  swift_retain(v3);
  static Published.subscript.setter(v7, v3, KeyPath, v5);
  return sub_100017AB4((uint64_t)v8, (uint64_t *)&unk_1000C6E60);
}

unint64_t sub_100028B7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7AE8;
  if (!qword_1000C7AE8)
  {
    v1 = sub_100005F48(&qword_1000C7AB0);
    sub_10000AAFC(&qword_1000C7AF0, &qword_1000C7AA8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10000AAFC(&qword_1000C7AF8, &qword_1000C7B00, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7AE8);
  }
  return result;
}

uint64_t sub_100028C18(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = swift_release(a1);
  if ((a3 & 1) == 0)
    return swift_release(a2);
  return result;
}

uint64_t sub_100028C50(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 1) != 0)
    return sub_100028C9C(a1, a2, a3 & 1);
  sub_100028C9C(a1, a2, a3 & 1);
  swift_bridgeObjectRetain(a8);
  return swift_retain(a10);
}

uint64_t sub_100028C9C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_retain(a1);
    a1 = a2;
  }
  return swift_retain(a1);
}

uint64_t sub_100028CC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 1) != 0)
    return sub_100028C18(a1, a2, a3 & 1);
  sub_100028C18(a1, a2, a3 & 1);
  swift_release(a10);
  return swift_bridgeObjectRelease(a8);
}

unint64_t sub_100028D10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7B70;
  if (!qword_1000C7B70)
  {
    v1 = sub_100005F48(&qword_1000C7B60);
    sub_100028D7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7B70);
  }
  return result;
}

unint64_t sub_100028D7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7B78;
  if (!qword_1000C7B78)
  {
    v1 = sub_100005F48(&qword_1000C7B80);
    sub_10000AAFC(&qword_1000C7290, &qword_1000C7298, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7B78);
  }
  return result;
}

uint64_t sub_100028E00@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100081E10, (uint64_t)&unk_100081E38, a2);
}

uint64_t sub_100028E14(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100081E10, (uint64_t)&unk_100081E38);
}

uint64_t sub_100028E28(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_100028E40()
{
  unint64_t result;

  result = qword_1000C7B90;
  if (!qword_1000C7B90)
  {
    result = swift_getWitnessTable(&unk_1000800EC, &type metadata for BlurModifier);
    atomic_store(result, (unint64_t *)&qword_1000C7B90);
  }
  return result;
}

unint64_t sub_100028E84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7BB8;
  if (!qword_1000C7BB8)
  {
    v1 = sub_100005F48(&qword_1000C7B38);
    sub_100028EF0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7BB8);
  }
  return result;
}

unint64_t sub_100028EF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7BC0;
  if (!qword_1000C7BC0)
  {
    v1 = sub_100005F48(&qword_1000C7B30);
    sub_10000AAFC(&qword_1000C7BC8, &qword_1000C7B28, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7BC0);
  }
  return result;
}

unint64_t sub_100028F74()
{
  unint64_t result;

  result = qword_1000C7BD0;
  if (!qword_1000C7BD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1000C7BD0);
  }
  return result;
}

double sub_100028FC0(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 96) = 255;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 241) = 0u;
  return result;
}

uint64_t sub_100029004@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100081DC8, (uint64_t)&unk_100081DF0, a2);
}

uint64_t sub_100029028(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100081DC8, (uint64_t)&unk_100081DF0);
}

uint64_t sub_10002904C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 != -1)
    return sub_10002907C(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13 & 1);
  return result;
}

uint64_t sub_10002907C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v14;

  if ((a13 & 1) != 0)
  {
    swift_retain(a1);
    v14 = a2;
  }
  else
  {
    v14 = a9;
    swift_retain(a1);
    swift_retain(a2);
    swift_bridgeObjectRetain(a7);
  }
  return swift_retain(v14);
}

uint64_t sub_1000290D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  char v5;

  v5 = *(_BYTE *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5);
  return a1;
}

uint64_t sub_100029158(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 != -1)
    return sub_100029188(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13 & 1);
  return result;
}

uint64_t sub_100029188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t result;

  swift_release(a1);
  result = swift_release(a2);
  if ((a13 & 1) == 0)
  {
    swift_bridgeObjectRelease(a7);
    return swift_release(a9);
  }
  return result;
}

uint64_t sub_1000291E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100029208()
{
  uint64_t v0;

  return sub_1000288E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100029210@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100081E10, (uint64_t)&unk_100081E38, a2);
}

uint64_t sub_100029234(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100081E10, (uint64_t)&unk_100081E38);
}

uint64_t sub_100029258(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 96);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v4);
  return a1;
}

unint64_t sub_1000292B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7C50;
  if (!qword_1000C7C50)
  {
    v1 = sub_100005F48(&qword_1000C7BF0);
    sub_10000AAFC(&qword_1000C7C58, &qword_1000C7BE8, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7C50);
  }
  return result;
}

unint64_t sub_100029338()
{
  unint64_t result;

  result = qword_1000C7C68;
  if (!qword_1000C7C68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1000C7C68);
  }
  return result;
}

unint64_t sub_10002937C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7C78;
  if (!qword_1000C7C78)
  {
    v1 = sub_100005F48(&qword_1000C7C70);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7C78);
  }
  return result;
}

unint64_t sub_1000293D8()
{
  unint64_t result;

  result = qword_1000C7CC0;
  if (!qword_1000C7CC0)
  {
    result = swift_getWitnessTable(&unk_100085634, &type metadata for Defaults.BlurInitType);
    atomic_store(result, (unint64_t *)&qword_1000C7CC0);
  }
  return result;
}

unint64_t sub_100029420()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7CD8;
  if (!qword_1000C7CD8)
  {
    v1 = sub_100005F48(&qword_1000C7AC0);
    sub_10002948C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7CD8);
  }
  return result;
}

unint64_t sub_10002948C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7CE0;
  if (!qword_1000C7CE0)
  {
    v1 = sub_100005F48(&qword_1000C7AB8);
    sub_100029BF4(&qword_1000C7AE0, &qword_1000C7AD8, (void (*)(void))sub_100028B7C);
    sub_100028B7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7CE0);
  }
  return result;
}

_QWORD *sub_100029510(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  swift_bridgeObjectRetain(*a1);
  sub_100007A80(v2, v3);
  swift_retain(v5);
  swift_retain(v4);
  return a1;
}

unint64_t sub_100029570()
{
  unint64_t result;

  result = qword_1000C7CE8;
  if (!qword_1000C7CE8)
  {
    result = swift_getWitnessTable(&unk_1000853F4, &type metadata for Defaults.ContinueTrigger);
    atomic_store(result, (unint64_t *)&qword_1000C7CE8);
  }
  return result;
}

uint64_t sub_1000295B4(uint64_t result)
{
  *(_BYTE *)(result + 440) = 1;
  return result;
}

uint64_t sub_1000295C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *(_QWORD *)(a1 + 168);
  v2 = *(_QWORD *)(a1 + 176);
  v3 = *(_QWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 200);
  v6 = *(_QWORD *)(a1 + 208);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(_QWORD *)(a1 + 224);
  v15 = *(_OWORD *)(a1 + 232);
  v13 = *(_OWORD *)(a1 + 264);
  v14 = *(_OWORD *)(a1 + 248);
  v12 = *(_OWORD *)(a1 + 280);
  v9 = *(_QWORD *)(a1 + 296);
  v10 = *(_BYTE *)(a1 + 304);
  sub_1000296D4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 160));
  sub_1000296D4(v16, v2, v3, v4, v5, v6, v7, v8, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_1000296D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v20;
  uint64_t v21;

  if ((a18 & 1) != 0)
  {
    sub_10001ED34(a1, a2, a3 & 1);
    v20 = a4;
    v21 = a5;
  }
  else
  {
    v21 = a14;
    v20 = a12;
    sub_10001ED34(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
  }
  swift_bridgeObjectRetain(v20);
  return swift_retain(v21);
}

unint64_t sub_100029744()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7D20;
  if (!qword_1000C7D20)
  {
    v1 = sub_100005F48(&qword_1000C7D10);
    sub_10000AAFC(&qword_1000C7D28, &qword_1000C7D30, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7D20);
  }
  return result;
}

uint64_t sub_1000297C8(uint64_t result)
{
  *(_BYTE *)(result + 440) = 0;
  return result;
}

uint64_t sub_1000297D0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Text.Storage - 1) + 32))(a2, a1);
  return a2;
}

uint64_t sub_10002980C(uint64_t result)
{
  *(_BYTE *)(result + 136) = 1;
  return result;
}

uint64_t sub_100029818(uint64_t a1)
{
  sub_10001ED34(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

_QWORD *sub_100029848(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

_QWORD *sub_100029870(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

unint64_t sub_100029898()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7D58;
  if (!qword_1000C7D58)
  {
    v1 = sub_100005F48(&qword_1000C7D48);
    sub_10000AAFC(&qword_1000C7D60, &qword_1000C7D68, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7D58);
  }
  return result;
}

uint64_t sub_10002991C(uint64_t result)
{
  *(_BYTE *)(result + 136) = 0;
  return result;
}

unint64_t sub_100029924()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7D90;
  if (!qword_1000C7D90)
  {
    v1 = sub_100005F48(&qword_1000C7D70);
    sub_100029990();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7D90);
  }
  return result;
}

unint64_t sub_100029990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7D98;
  if (!qword_1000C7D98)
  {
    v1 = sub_100005F48(&qword_1000C7DA0);
    sub_100003E48(&qword_1000C7DA8, type metadata accessor for ActivityIconView, (uint64_t)&unk_100085B68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7D98);
  }
  return result;
}

unint64_t sub_100029A14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7DD0;
  if (!qword_1000C7DD0)
  {
    v1 = sub_100005F48(&qword_1000C7DB0);
    sub_100029A80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7DD0);
  }
  return result;
}

unint64_t sub_100029A80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7DD8;
  if (!qword_1000C7DD8)
  {
    v1 = sub_100005F48(&qword_1000C7DE0);
    sub_100029B04();
    sub_10000AAFC(&qword_1000C7E18, &qword_1000C7E20, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7DD8);
  }
  return result;
}

unint64_t sub_100029B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7DE8;
  if (!qword_1000C7DE8)
  {
    v1 = sub_100005F48(&qword_1000C7DF0);
    sub_100029B70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7DE8);
  }
  return result;
}

unint64_t sub_100029B70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7DF8;
  if (!qword_1000C7DF8)
  {
    v1 = sub_100005F48(&qword_1000C7E00);
    sub_10000AAFC(&qword_1000C7E08, &qword_1000C7E10, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7DF8);
  }
  return result;
}

uint64_t sub_100029BF4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005F48(a2);
    a3();
    sub_10000AAFC(&qword_1000C7B08, &qword_1000C7B10, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100029C78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7E48;
  if (!qword_1000C7E48)
  {
    v1 = sub_100005F48(&qword_1000C7E28);
    sub_100003E48(&qword_1000C61B8, type metadata accessor for MovieView, (uint64_t)&unk_10007FF10);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7E48);
  }
  return result;
}

_QWORD *sub_100029CFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[4];
  v3 = a1[25];
  swift_retain(a1[28]);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void destroy for MediaTransferStatus(void **a1)
{
  void *v1;
  int v2;

  v1 = *a1;
  v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF)
    v2 = (int)v1;
  if (v2 - 1 < 0)

}

_QWORD *_s13PCViewService19MediaTransferStatusOwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  LODWORD(v4) = -1;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
    v4 = *(void **)a2;
  if ((int)v4 - 1 < 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *a1 = v3;
    a1[1] = v5;
    v6 = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

uint64_t assignWithCopy for MediaTransferStatus(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  id v10;
  id v12;

  v4 = *(void **)a1;
  LODWORD(v5) = -1;
  if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
    LODWORD(v6) = -1;
  else
    v6 = *(void **)a1;
  v7 = (_DWORD)v6 - 1;
  v8 = *(void **)a2;
  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
    v5 = *(void **)a2;
  v9 = (_DWORD)v5 - 1;
  if (v7 < 0)
  {
    if (v9 < 0)
    {
      *(_QWORD *)a1 = v8;
      v12 = v8;

      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      return a1;
    }

    goto LABEL_11;
  }
  if ((v9 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v10 = v8;
  return a1;
}

uint64_t assignWithTake for MediaTransferStatus(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;

  v4 = *(void **)a1;
  LODWORD(v5) = -1;
  if (*(_QWORD *)a1 < 0xFFFFFFFFuLL)
    v5 = *(void **)a1;
  if ((int)v5 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if ((unint64_t)*a2 < 0xFFFFFFFF)
      v6 = *a2;
    if ((int)v6 - 1 < 0)
    {
      *(_QWORD *)a1 = *a2;

      *(_QWORD *)(a1 + 8) = a2[1];
      return a1;
    }

  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaTransferStatus(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MediaTransferStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_100029F7C(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_100029FA0(_QWORD *result, unsigned int a2)
{
  uint64_t v2;

  if (a2 > 0x7FFFFFFE)
  {
    v2 = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus()
{
  return &type metadata for MediaTransferStatus;
}

void sub_100029FDC(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;

  v29 = a3;
  v5 = sub_100004B18(&qword_1000C7EB8);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v26 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004B18(&qword_1000C7EC0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100004B18(&qword_1000C7EC8);
  v11 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_100006914(a1, v14);
  v16 = sub_10002AC14();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MediaTransferStatus.CodingKeys, &type metadata for MediaTransferStatus.CodingKeys, v16, v14, v15);
  if (a2 == (void *)1)
  {
    LOBYTE(v33) = 0;
    v17 = sub_10002ACE0();
    v18 = v31;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for MediaTransferStatus.NotTransferringCodingKeys, &v33, v31, &type metadata for MediaTransferStatus.NotTransferringCodingKeys, v17);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v18);
  }
  else
  {
    v25 = v11;
    LOBYTE(v33) = 1;
    v19 = sub_10002AC58();
    v20 = a2;
    v21 = v26;
    v22 = v31;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for MediaTransferStatus.TransferringCodingKeys, &v33, v31, &type metadata for MediaTransferStatus.TransferringCodingKeys, v19);
    v33 = a2;
    v32 = 0;
    sub_10002AD24();
    v23 = v28;
    v24 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33);
    if (v24)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v23);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v22);
      sub_100013C94(a2);
    }
    else
    {
      v33 = v29;
      v32 = 1;
      type metadata accessor for PCInteractionDirection(0);
      sub_10002AD68(&qword_1000C7ED8, (uint64_t)&protocol conformance descriptor for PCInteractionDirection);
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v33);
      sub_100013C94(a2);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v23);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v22);
    }
  }
}

uint64_t sub_10002A2C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x726566736E617274;
  else
    return 0x736E617254746F6ELL;
}

uint64_t sub_10002A314@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002A5E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002A338(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002AC14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002A360(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002AC14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002A388()
{
  return 0;
}

uint64_t sub_10002A394@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_10002A3C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002ACE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002A3E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002ACE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002A410()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F69746365726964;
  else
    return 12383;
}

uint64_t sub_10002A444@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002A70C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002A468(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002AC58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002A490(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002AC58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002A4B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_10002A7F0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_10002A4E0(_QWORD *a1)
{
  void **v1;

  sub_100029FDC(a1, *v1, v1[1]);
}

BOOL sub_10002A4F8(uint64_t a1, uint64_t a2)
{
  return sub_10002A50C(*(void **)a1, *(_QWORD *)(a1 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
}

BOOL sub_10002A50C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v9;

  if (a1 == (void *)1)
    return a3 == (void *)1;
  if (a3 == (void *)1)
    return 0;
  if (a1)
  {
    if (!a3)
      return 0;
    sub_10002ADA8();
    sub_100018044(a3);
    sub_100018044(a1);
    v9 = static NSObject.== infix(_:_:)(a1, a3);
    sub_100013C94(a3);
    sub_100013C94(a1);
    if ((v9 & 1) == 0)
      return 0;
  }
  else
  {
    sub_100013C94(0);
    if (a3)
      return 0;
  }
  return a2 == a4;
}

uint64_t sub_10002A5E0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x736E617254746F6ELL && a2 == 0xEF676E6972726566)
  {
    v5 = 0xEF676E6972726566;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736E617254746F6ELL, 0xEF676E6972726566, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726566736E617274 && a2 == 0xEC000000676E6972)
  {
    swift_bridgeObjectRelease(0xEC000000676E6972);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726566736E617274, 0xEC000000676E6972, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10002A70C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease(0xE90000000000006ELL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746365726964, 0xE90000000000006ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10002A7F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v2 = sub_100004B18(&qword_1000C7E70);
  v3 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  v37 = v3;
  __chkstk_darwin(v2);
  v38 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000C7E78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004B18(&qword_1000C7E80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v39 = a1;
  sub_100006914(a1, v13);
  v15 = sub_10002AC14();
  v16 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MediaTransferStatus.CodingKeys, &type metadata for MediaTransferStatus.CodingKeys, v15, v13, v14);
  if (!v16)
  {
    v17 = v5;
    v18 = v38;
    v40 = v10;
    v19 = KeyedDecodingContainer.allKeys.getter(v9);
    v20 = v19;
    if (*(_QWORD *)(v19 + 16) == 1)
    {
      if ((*(_BYTE *)(v19 + 32) & 1) != 0)
      {
        LOBYTE(v43) = 1;
        v21 = sub_10002AC58();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for MediaTransferStatus.TransferringCodingKeys, &v43, v9, &type metadata for MediaTransferStatus.TransferringCodingKeys, v21);
        LOBYTE(v42) = 0;
        sub_10002AC9C();
        v22 = v36;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for MRNowPlayingPlayerResponseWrapper);
        v6 = v43;
        type metadata accessor for PCInteractionDirection(0);
        v31 = v30;
        v41 = 1;
        sub_10002AD68(&qword_1000C7EA8, (uint64_t)&protocol conformance descriptor for PCInteractionDirection);
        v32 = v31;
        v33 = v18;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, v32);
        v34 = v40;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v22);
        swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v9);
      }
      else
      {
        LOBYTE(v43) = 0;
        v28 = sub_10002ACE0();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for MediaTransferStatus.NotTransferringCodingKeys, &v43, v9, &type metadata for MediaTransferStatus.NotTransferringCodingKeys, v28);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
        swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v9);
        v6 = 1;
      }
    }
    else
    {
      v23 = v9;
      v24 = type metadata accessor for DecodingError(0);
      swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
      v6 = v25;
      sub_100004B18(&qword_1000C7E90);
      *(_QWORD *)v6 = &type metadata for MediaTransferStatus;
      v26 = KeyedDecodingContainer.codingPath.getter(v23);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000001000907B0, 0);
      v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v6, enum case for DecodingError.typeMismatch(_:), v24);
      swift_willThrow(v27);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v23);
    }
  }
  sub_10000697C(v39);
  return v6;
}

unint64_t sub_10002AC14()
{
  unint64_t result;

  result = qword_1000C7E88;
  if (!qword_1000C7E88)
  {
    result = swift_getWitnessTable(&unk_1000821D8, &type metadata for MediaTransferStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7E88);
  }
  return result;
}

unint64_t sub_10002AC58()
{
  unint64_t result;

  result = qword_1000C7E98;
  if (!qword_1000C7E98)
  {
    result = swift_getWitnessTable(&unk_100082188, &type metadata for MediaTransferStatus.TransferringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7E98);
  }
  return result;
}

unint64_t sub_10002AC9C()
{
  unint64_t result;

  result = qword_1000C7EA0;
  if (!qword_1000C7EA0)
  {
    result = swift_getWitnessTable(&unk_100082934, &type metadata for MRNowPlayingPlayerResponseWrapper);
    atomic_store(result, (unint64_t *)&qword_1000C7EA0);
  }
  return result;
}

unint64_t sub_10002ACE0()
{
  unint64_t result;

  result = qword_1000C7EB0;
  if (!qword_1000C7EB0)
  {
    result = swift_getWitnessTable(&unk_100082138, &type metadata for MediaTransferStatus.NotTransferringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7EB0);
  }
  return result;
}

unint64_t sub_10002AD24()
{
  unint64_t result;

  result = qword_1000C7ED0;
  if (!qword_1000C7ED0)
  {
    result = swift_getWitnessTable(&unk_10008290C, &type metadata for MRNowPlayingPlayerResponseWrapper);
    atomic_store(result, (unint64_t *)&qword_1000C7ED0);
  }
  return result;
}

uint64_t sub_10002AD68(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for PCInteractionDirection(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002ADA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7EE0;
  if (!qword_1000C7EE0)
  {
    v1 = objc_opt_self(MRNowPlayingPlayerResponse);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C7EE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.CodingKeys()
{
  return &type metadata for MediaTransferStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.NotTransferringCodingKeys()
{
  return &type metadata for MediaTransferStatus.NotTransferringCodingKeys;
}

uint64_t _s13PCViewService19MediaTransferStatusO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10002AE58 + 4 * byte_100081E85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002AE8C + 4 * byte_100081E80[v4]))();
}

uint64_t sub_10002AE8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002AE94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002AE9CLL);
  return result;
}

uint64_t sub_10002AEA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002AEB0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10002AEB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002AEBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.TransferringCodingKeys()
{
  return &type metadata for MediaTransferStatus.TransferringCodingKeys;
}

unint64_t sub_10002AEDC()
{
  unint64_t result;

  result = qword_1000C7EE8;
  if (!qword_1000C7EE8)
  {
    result = swift_getWitnessTable(&unk_100082008, &type metadata for MediaTransferStatus.TransferringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7EE8);
  }
  return result;
}

unint64_t sub_10002AF24()
{
  unint64_t result;

  result = qword_1000C7EF0;
  if (!qword_1000C7EF0)
  {
    result = swift_getWitnessTable(&unk_100082110, &type metadata for MediaTransferStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7EF0);
  }
  return result;
}

unint64_t sub_10002AF6C()
{
  unint64_t result;

  result = qword_1000C7EF8;
  if (!qword_1000C7EF8)
  {
    result = swift_getWitnessTable(&unk_100082030, &type metadata for MediaTransferStatus.NotTransferringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7EF8);
  }
  return result;
}

unint64_t sub_10002AFB4()
{
  unint64_t result;

  result = qword_1000C7F00;
  if (!qword_1000C7F00)
  {
    result = swift_getWitnessTable(&unk_100082058, &type metadata for MediaTransferStatus.NotTransferringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7F00);
  }
  return result;
}

unint64_t sub_10002AFFC()
{
  unint64_t result;

  result = qword_1000C7F08;
  if (!qword_1000C7F08)
  {
    result = swift_getWitnessTable(&unk_100081F78, &type metadata for MediaTransferStatus.TransferringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7F08);
  }
  return result;
}

unint64_t sub_10002B044()
{
  unint64_t result;

  result = qword_1000C7F10;
  if (!qword_1000C7F10)
  {
    result = swift_getWitnessTable(&unk_100081FA0, &type metadata for MediaTransferStatus.TransferringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7F10);
  }
  return result;
}

unint64_t sub_10002B08C()
{
  unint64_t result;

  result = qword_1000C7F18;
  if (!qword_1000C7F18)
  {
    result = swift_getWitnessTable(&unk_100082080, &type metadata for MediaTransferStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7F18);
  }
  return result;
}

unint64_t sub_10002B0D4()
{
  unint64_t result;

  result = qword_1000C7F20;
  if (!qword_1000C7F20)
  {
    result = swift_getWitnessTable(&unk_1000820A8, &type metadata for MediaTransferStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7F20);
  }
  return result;
}

id sub_10002B1F4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

int main(int argc, const char **argv, const char **envp)
{
  objc_class *v5;
  NSString *v6;

  v5 = (objc_class *)type metadata accessor for AppDelegate();
  v6 = NSStringFromClass(v5);
  UIApplicationMain(argc, (char **)argv, 0, v6);

  return 0;
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC13PCViewService11AppDelegate);
}

uint64_t sub_10002B29C(uint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  void *object;
  unint64_t v5;
  id v6;
  NSString v7;
  _QWORD v9[2];
  unint64_t v10;

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9[1] = 0xD000000000000023;
  v10 = 0x8000000100090810;
  v9[0] = a1;
  swift_bridgeObjectRetain(a1);
  v2 = sub_100004B18((uint64_t *)&unk_1000C7FC0);
  v3._countAndFlagsBits = String.init<A>(describing:)(v9, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5 = v10;
  v6 = sub_100053648();
  swift_bridgeObjectRetain(v5);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v6, "ulog:message:", 40, v7);
  swift_bridgeObjectRelease(v5);

  return 1;
}

unint64_t sub_10002B390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C5F40;
  if (!qword_1000C5F40)
  {
    type metadata accessor for LaunchOptionsKey(255);
    result = swift_getWitnessTable(&unk_10007FD6C, v1);
    atomic_store(result, (unint64_t *)&qword_1000C5F40);
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewServiceContext()
{
  return &type metadata for NearbySharingInteractionViewServiceContext;
}

uint64_t sub_10002B3E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100004B18(&qword_1000C7FE8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100006914(a1, v8);
  v10 = sub_10002B758();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionViewServiceContext.CodingKeys, &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_10002B7E0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10002B4E0()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_10002B4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002B5B4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10002B524(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B758();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002B54C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002B758();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10002B574@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10002B638(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10002B59C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10002B3E8(a1, *v1);
}

uint64_t sub_10002B5B4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD00000000000002DLL && a2 == 0x8000000100090840)
  {
    swift_bridgeObjectRelease(0x8000000100090840);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002DLL, 0x8000000100090840, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

_QWORD *sub_10002B638(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD *v13;

  v3 = sub_100004B18(&qword_1000C7FD0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100006914(a1, v7);
  v10 = sub_10002B758();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionViewServiceContext.CodingKeys, &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_10000697C(a1);
  }
  else
  {
    sub_10002B79C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v13, &type metadata for NearbySharingInteractionDisplayContext);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v13;
    sub_10000697C(a1);
  }
  return v9;
}

unint64_t sub_10002B758()
{
  unint64_t result;

  result = qword_1000C7FD8;
  if (!qword_1000C7FD8)
  {
    result = swift_getWitnessTable(&unk_1000823C0, &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7FD8);
  }
  return result;
}

unint64_t sub_10002B79C()
{
  unint64_t result;

  result = qword_1000C7FE0;
  if (!qword_1000C7FE0)
  {
    result = swift_getWitnessTable(&unk_100080440, &type metadata for NearbySharingInteractionDisplayContext);
    atomic_store(result, (unint64_t *)&qword_1000C7FE0);
  }
  return result;
}

unint64_t sub_10002B7E0()
{
  unint64_t result;

  result = qword_1000C7FF0;
  if (!qword_1000C7FF0)
  {
    result = swift_getWitnessTable(&unk_100080418, &type metadata for NearbySharingInteractionDisplayContext);
    atomic_store(result, (unint64_t *)&qword_1000C7FF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionViewServiceContext.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002B864 + 4 * byte_100082260[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002B884 + 4 * byte_100082265[v4]))();
}

_BYTE *sub_10002B864(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002B884(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002B88C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002B894(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002B89C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002B8A4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewServiceContext.CodingKeys()
{
  return &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys;
}

unint64_t sub_10002B8C4()
{
  unint64_t result;

  result = qword_1000C7FF8;
  if (!qword_1000C7FF8)
  {
    result = swift_getWitnessTable(&unk_100082398, &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C7FF8);
  }
  return result;
}

unint64_t sub_10002B90C()
{
  unint64_t result;

  result = qword_1000C8000;
  if (!qword_1000C8000)
  {
    result = swift_getWitnessTable(&unk_100082308, &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8000);
  }
  return result;
}

unint64_t sub_10002B954()
{
  unint64_t result;

  result = qword_1000C8008;
  if (!qword_1000C8008)
  {
    result = swift_getWitnessTable(&unk_100082330, &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8008);
  }
  return result;
}

_UNKNOWN **static UIBlurEffectStyle.allCases.getter()
{
  return &off_1000B2238;
}

unint64_t UIBlurEffectStyle.description.getter(uint64_t a1)
{
  unint64_t result;
  Swift::String v3;
  void *object;

  result = 0x67694C6172747865;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x746867696CLL;
      break;
    case 2:
      result = 1802658148;
      break;
    case 3:
      result = 0x7261446172747865;
      break;
    case 4:
      result = 0x72616C75676572;
      break;
    case 5:
      result = 0x6E656E696D6F7270;
      break;
    case 6:
    case 12:
    case 19:
      result = 0xD000000000000017;
      break;
    case 7:
      result = 0xD000000000000012;
      break;
    case 8:
      result = 0x614D6D6574737973;
      break;
    case 9:
      result = 0xD000000000000013;
      break;
    case 10:
      result = 0xD000000000000014;
      break;
    case 11:
      result = 0xD00000000000001CLL;
      break;
    case 13:
      result = 0xD000000000000013;
      break;
    case 14:
      result = 0xD000000000000018;
      break;
    case 15:
      result = 0xD000000000000019;
      break;
    case 16:
      result = 0xD00000000000001BLL;
      break;
    case 17:
      result = 0xD000000000000016;
      break;
    case 18:
      result = 0xD000000000000012;
      break;
    case 20:
      result = 0xD000000000000018;
      break;
    default:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0xD000000000000011;
      break;
  }
  return result;
}

unint64_t sub_10002BC54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8010;
  if (!qword_1000C8010)
  {
    v1 = sub_100005F48(&qword_1000C8018);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000C8010);
  }
  return result;
}

void sub_10002BCA0(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B2238;
}

uint64_t sub_10002BCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002BD60();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10002BD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002BD60();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10002BD58()
{
  uint64_t *v0;

  return UIBlurEffectStyle.description.getter(*v0);
}

unint64_t sub_10002BD60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8020;
  if (!qword_1000C8020)
  {
    type metadata accessor for Style(255);
    result = swift_getWitnessTable(&unk_10007F7F0, v1);
    atomic_store(result, (unint64_t *)&qword_1000C8020);
  }
  return result;
}

uint64_t destroy for SchematicHandWithiPhoneView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for SchematicHandWithiPhoneView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for SchematicHandWithiPhoneView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t assignWithTake for SchematicHandWithiPhoneView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematicHandWithiPhoneView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematicHandWithiPhoneView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchematicHandWithiPhoneView()
{
  return &type metadata for SchematicHandWithiPhoneView;
}

uint64_t sub_10002BFA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100097008, 1);
}

uint64_t sub_10002BFB0@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  double v16;
  Swift::String v17;
  __int128 v18;
  Swift::String v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  double v65;
  double v66;
  char v67;
  char v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[328];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BYTE v106[7];
  uint64_t v107;
  char v108;
  _BYTE v109[7];
  uint64_t v110;
  uint64_t v111;
  double v112;
  char v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  _BYTE v120[7];
  _BYTE v121[7];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  char v135;
  char v136;
  _OWORD v137[12];
  uint64_t v138;
  _OWORD v139[3];
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;

  v86 = a2;
  v3 = (int *)type metadata accessor for CAImage(0);
  v4 = __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (char *)&v80 - v7;
  *(_QWORD *)&v80 = sub_100004B18(&qword_1000C8048);
  __chkstk_darwin(v80);
  v85 = (uint64_t)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100004B18(&qword_1000C8050);
  __chkstk_darwin(v82);
  v84 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100004B18(&qword_1000C8058);
  v11 = __chkstk_darwin(v83);
  v87 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v88 = (uint64_t)&v80 - v13;
  if (qword_1000C5DA0 != -1)
    swift_once(&qword_1000C5DA0, sub_100060B64);
  if (byte_1000DF5F8)
    v14 = 0x8000000100090A70;
  else
    v14 = 0x8000000100090A50;
  v15 = *a1;
  *(_QWORD *)&v90 = 0xD000000000000018;
  *((_QWORD *)&v90 + 1) = v14;
  v16 = v15 / 152.0;
  swift_bridgeObjectRetain(v14);
  v81 = a1;
  v17._countAndFlagsBits = 0x746867696C5FLL;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  v18 = v90;
  *(_QWORD *)&v90 = 0xD000000000000018;
  *((_QWORD *)&v90 + 1) = v14;
  swift_bridgeObjectRetain(v14);
  v19._countAndFlagsBits = 0x6B7261645FLL;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v14);
  v20 = v90;
  *v6 = swift_getKeyPath(&unk_100082600);
  v21 = sub_100004B18(&qword_1000C7180);
  swift_storeEnumTagMultiPayload(v6, v21, 0);
  v22 = (char *)v6 + v3[5];
  *(_QWORD *)v89 = 0;
  *(_QWORD *)&v89[8] = 0;
  v23 = sub_100004B18(&qword_1000C7C70);
  State.init(wrappedValue:)(v89, v23);
  v24 = v91;
  *(_OWORD *)v22 = v90;
  *((_QWORD *)v22 + 2) = v24;
  v25 = (_OWORD *)((char *)v6 + v3[7]);
  *(_OWORD *)((char *)v6 + v3[6]) = v18;
  *v25 = v20;
  v26 = sub_1000198B4((uint64_t)v6, (uint64_t)v8);
  v27 = static Alignment.center.getter(v26);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(v139, *(_QWORD *)&v15, 0, v15 / 152.0 * 333.0, 0, v27, v28);
  v29 = v85;
  sub_10001986C((uint64_t)v8, v85);
  v30 = (_OWORD *)(v29 + *(int *)(v80 + 36));
  v31 = v139[1];
  *v30 = v139[0];
  v30[1] = v31;
  v30[2] = v139[2];
  sub_10002CE94((uint64_t)v8);
  v32 = sub_100004B18(&qword_1000C8060);
  v33 = swift_allocObject(v32, 64, 7);
  *(_OWORD *)(v33 + 16) = xmmword_100081E60;
  v34 = static Color.clear.getter();
  v35 = Gradient.Stop.init(color:location:)(v34, 0.0);
  *(_QWORD *)(v33 + 32) = v35;
  *(_QWORD *)(v33 + 40) = v36;
  v37 = static Color.red.getter(v35);
  *(_QWORD *)(v33 + 48) = Gradient.Stop.init(color:location:)(v37, 0.4);
  *(_QWORD *)(v33 + 56) = v38;
  v39 = static UnitPoint.bottom.getter();
  v41 = v40;
  v42 = static UnitPoint.top.getter();
  v44 = v43;
  Gradient.init(stops:)(v33);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v140, v39, v41, v42, v44);
  v45 = v140;
  v80 = v141;
  v46 = v142;
  v47 = v143;
  v48 = v84;
  sub_100017F28(v29, v84, &qword_1000C8048);
  v49 = v48 + *(int *)(v82 + 36);
  *(_QWORD *)v49 = v45;
  *(_OWORD *)(v49 + 8) = v80;
  *(_QWORD *)(v49 + 24) = v46;
  *(_QWORD *)(v49 + 32) = v47;
  sub_100017AB4(v29, &qword_1000C8048);
  v50 = v87;
  sub_100017F28(v48, v87, &qword_1000C8050);
  v51 = v50 + *(int *)(v83 + 36);
  *(double *)v51 = v16 * -2.5;
  *(_QWORD *)(v51 + 8) = 0;
  sub_100017AB4(v48, &qword_1000C8050);
  v52 = v88;
  v53 = sub_10002CED0(v50, v88);
  v54 = static Color.white.getter(v53);
  v55 = static Alignment.center.getter(v54);
  *(_QWORD *)&v80 = v55;
  v82 = v56;
  v57 = (uint64_t)v81;
  v58 = sub_10002C914((uint64_t)v81, v54, (uint64_t)v137);
  v59 = static Alignment.center.getter(v58);
  _FrameLayout.init(width:height:alignment:)(&v144, 0x4041800000000000, 0, 0x4041800000000000, 0, v59, v60);
  v61 = v144;
  LOBYTE(v48) = v145;
  v62 = v147;
  v85 = v148;
  v83 = v146;
  v84 = v149;
  swift_release(v54);
  v131 = v137[9];
  v132 = v137[10];
  v133 = v137[11];
  v127 = v137[5];
  v128 = v137[6];
  v129 = v137[7];
  v130 = v137[8];
  v123 = v137[1];
  v124 = v137[2];
  v125 = v137[3];
  v126 = v137[4];
  v136 = v48;
  v135 = v62;
  v64 = *(_BYTE *)(v57 + 24);
  v134 = v138;
  v122 = v137[0];
  if ((v64 & 1) != 0)
    v65 = 0.0;
  else
    v65 = 10.0;
  if ((v64 & 1) != 0)
    v66 = v16;
  else
    v66 = 0.0;
  v67 = v62;
  v68 = v136;
  v69 = static UnitPoint.center.getter(v63);
  v71 = v70;
  sub_100017F28(v52, v50, &qword_1000C8058);
  v72 = v86;
  sub_100017F28(v50, v86, &qword_1000C8058);
  v73 = (void *)(v72 + *(int *)(sub_100004B18(&qword_1000C8068) + 48));
  v74 = v82;
  *(_QWORD *)v89 = v55;
  *(_QWORD *)&v89[8] = v82;
  *(_OWORD *)&v89[176] = v132;
  *(_OWORD *)&v89[192] = v133;
  *(_OWORD *)&v89[112] = v128;
  *(_OWORD *)&v89[128] = v129;
  *(_OWORD *)&v89[160] = v131;
  *(_OWORD *)&v89[144] = v130;
  *(_OWORD *)&v89[48] = v124;
  *(_OWORD *)&v89[64] = v125;
  *(_OWORD *)&v89[96] = v127;
  *(_OWORD *)&v89[80] = v126;
  *(_OWORD *)&v89[32] = v123;
  *(_OWORD *)&v89[16] = v122;
  *(_QWORD *)&v89[208] = v134;
  *(_QWORD *)&v89[216] = v61;
  v75 = v61;
  v89[224] = v68;
  *(_DWORD *)&v89[225] = *(_DWORD *)v121;
  *(_DWORD *)&v89[228] = *(_DWORD *)&v121[3];
  v76 = v83;
  v77 = v84;
  *(_QWORD *)&v89[232] = v83;
  v89[240] = v67;
  *(_DWORD *)&v89[241] = *(_DWORD *)v120;
  *(_DWORD *)&v89[244] = *(_DWORD *)&v120[3];
  v78 = v85;
  *(_QWORD *)&v89[248] = v85;
  *(_QWORD *)&v89[256] = v84;
  *(double *)&v89[264] = v65;
  v89[272] = 0;
  *(double *)&v89[280] = v66;
  *(double *)&v89[288] = v66;
  *(double *)&v89[296] = v69;
  *(_QWORD *)&v89[304] = v71;
  *(_QWORD *)&v89[312] = 0;
  *(double *)&v89[320] = v16 * -70.0;
  memcpy(v73, v89, 0x148uLL);
  sub_10002CF18(v89);
  sub_100017AB4(v88, &qword_1000C8058);
  *(_QWORD *)&v90 = v80;
  *((_QWORD *)&v90 + 1) = v74;
  v101 = v132;
  v102 = v133;
  v97 = v128;
  v98 = v129;
  v99 = v130;
  v100 = v131;
  v93 = v124;
  v94 = v125;
  v95 = v126;
  v96 = v127;
  v91 = v122;
  v92 = v123;
  v103 = v134;
  v104 = v75;
  v105 = v68;
  *(_DWORD *)v106 = *(_DWORD *)v121;
  *(_DWORD *)&v106[3] = *(_DWORD *)&v121[3];
  v107 = v76;
  v108 = v67;
  *(_DWORD *)v109 = *(_DWORD *)v120;
  *(_DWORD *)&v109[3] = *(_DWORD *)&v120[3];
  v110 = v78;
  v111 = v77;
  v112 = v65;
  v113 = 0;
  v114 = v66;
  v115 = v66;
  v116 = v69;
  v117 = v71;
  v118 = 0;
  v119 = v16 * -70.0;
  sub_10002CF98(&v90);
  return sub_100017AB4(v50, &qword_1000C8058);
}

void sub_10002C778(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;

  if (*a1 == 1)
  {
    if (qword_1000C5D80 != -1)
      swift_once(&qword_1000C5D80, sub_10003F290);
    v3 = *(_QWORD *)(qword_1000DF570 + 280);
    swift_retain(v3);
    v4 = sub_100022C38();
    swift_release(v3);
    if ((v4 & 1) != 0)
    {
      swift_bridgeObjectRelease(0xE700000000000000);
    }
    else
    {
      v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F74747562, 0xE600000000000000, 0x74756F656D6974, 0xE700000000000000, 0);
      swift_bridgeObjectRelease(0xE600000000000000);
      if ((v5 & 1) == 0)
        return;
    }
    v14 = *(_OWORD *)(a2 + 32);
    v13 = 1065353216;
    v6 = sub_100004B18(&qword_1000C8040);
    State.wrappedValue.setter(&v13, v6);
    v7 = *(_QWORD *)(qword_1000DF570 + 152);
    swift_retain(v7);
    v8 = sub_10002377C();
    swift_release(v7);
    v9 = v8 * 0.5;
    v10 = static Animation.linear(duration:)(v9);
    v11 = Animation.delay(_:)(v9);
    swift_release(v10);
    __chkstk_darwin(v12);
    withAnimation<A>(_:_:)(v11, sub_10002CE38);
    swift_release(v11);
  }
}

uint64_t sub_10002C914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[7];
  unsigned __int8 v71;
  _BYTE v72[7];
  unsigned __int8 v73;
  int v74;
  __int16 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  int v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _BYTE v104[7];
  uint64_t v105;
  char v106;
  _BYTE v107[7];
  uint64_t v108;
  uint64_t v109;

  v6 = sub_100004B18(&qword_1000C8070);
  __chkstk_darwin(v6);
  v8 = (char *)&KeyPath - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = *(_OWORD *)(a1 + 32);
  v9 = sub_100004B18(&qword_1000C8040);
  State.wrappedValue.getter(&v76, v9);
  v10 = *(float *)&v76;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v58, 1, 0, _swiftEmptyArrayStorage, 2.5, 10.0, 0.0);
  v11 = v58;
  v13 = v59;
  v12 = v60;
  v14 = v61;
  v56 = v62;
  v15 = v63;
  v16 = swift_retain(a2);
  v17 = static Alignment.center.getter(v16);
  v54 = v18;
  v55 = v17;
  v19 = static UnitPoint.center.getter(v17);
  v21 = v20;
  v23 = static Alignment.center.getter(v22);
  _FrameLayout.init(width:height:alignment:)(&v64, 0x403F000000000000, 0, 0x403F000000000000, 0, v23, v24);
  v25 = v64;
  v26 = v66;
  v50 = v66;
  v52 = v69;
  v53 = v68;
  v73 = v65;
  v71 = v67;
  v57 = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  v27 = static Font.Weight.bold.getter();
  v28 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 1, 1, v28);
  v51 = static Font.system(size:weight:design:)(*(_QWORD *)&v27, 0, v8, 15.0);
  sub_100017AB4((uint64_t)v8, &qword_1000C8070);
  KeyPath = swift_getKeyPath(&unk_100082630);
  v29 = swift_getKeyPath(&unk_100082660);
  v48 = v73;
  v49 = v71;
  *(_QWORD *)&v76 = 0;
  *((double *)&v76 + 1) = v10;
  *(_QWORD *)&v77 = v11;
  *((_QWORD *)&v77 + 1) = __PAIR64__(v12, v13);
  v30 = v12;
  *(_QWORD *)&v78 = v14;
  v32 = v55;
  v31 = v56;
  *((_QWORD *)&v78 + 1) = v56;
  *(_QWORD *)&v79 = v15;
  v33 = a2;
  *((_QWORD *)&v79 + 1) = a2;
  LOWORD(v80) = 256;
  *(_DWORD *)((char *)&v80 + 2) = v74;
  WORD3(v80) = v75;
  v34 = v54;
  *((_QWORD *)&v80 + 1) = v55;
  *(_QWORD *)&v81 = v54;
  *((_QWORD *)&v81 + 1) = 0xBFF921FB54442D18;
  *(double *)&v82 = v19;
  *((_QWORD *)&v82 + 1) = v21;
  *(_QWORD *)&v83 = v25;
  BYTE8(v83) = v73;
  *(_DWORD *)((char *)&v83 + 9) = *(_DWORD *)v72;
  HIDWORD(v83) = *(_DWORD *)&v72[3];
  *(_QWORD *)&v84 = v26;
  BYTE8(v84) = v71;
  *(_DWORD *)((char *)&v84 + 9) = *(_DWORD *)v70;
  HIDWORD(v84) = *(_DWORD *)&v70[3];
  v36 = v52;
  v35 = v53;
  *(_QWORD *)&v85 = v53;
  *((_QWORD *)&v85 + 1) = v52;
  v37 = v77;
  *(_OWORD *)a3 = v76;
  *(_OWORD *)(a3 + 16) = v37;
  v38 = v78;
  v39 = v79;
  v40 = v81;
  *(_OWORD *)(a3 + 64) = v80;
  *(_OWORD *)(a3 + 80) = v40;
  *(_OWORD *)(a3 + 32) = v38;
  *(_OWORD *)(a3 + 48) = v39;
  v41 = v82;
  v42 = v83;
  v43 = v85;
  *(_OWORD *)(a3 + 128) = v84;
  *(_OWORD *)(a3 + 144) = v43;
  *(_OWORD *)(a3 + 96) = v41;
  *(_OWORD *)(a3 + 112) = v42;
  v44 = KeyPath;
  *(_QWORD *)(a3 + 160) = v57;
  *(_QWORD *)(a3 + 168) = v44;
  *(_QWORD *)(a3 + 176) = v51;
  *(_QWORD *)(a3 + 184) = v29;
  *(_QWORD *)(a3 + 192) = v33;
  v45 = v33;
  swift_retain(v33);
  sub_10002D0C0((uint64_t)&v76);
  *(_QWORD *)&v86 = 0;
  *((double *)&v86 + 1) = v10;
  v87 = v11;
  v88 = v13;
  v89 = v30;
  v90 = v14;
  v91 = v31;
  v92 = v15;
  v93 = v45;
  v94 = 256;
  v95 = v74;
  v96 = v75;
  v97 = v32;
  v98 = v34;
  v99 = 0xBFF921FB54442D18;
  v100 = v19;
  v101 = v21;
  v102 = v25;
  v103 = v48;
  *(_DWORD *)&v104[3] = *(_DWORD *)&v72[3];
  *(_DWORD *)v104 = *(_DWORD *)v72;
  v105 = v50;
  v106 = v49;
  *(_DWORD *)v107 = *(_DWORD *)v70;
  *(_DWORD *)&v107[3] = *(_DWORD *)&v70[3];
  v108 = v35;
  v109 = v36;
  return sub_10002D0F4((uint64_t)&v86);
}

uint64_t sub_10002CCB0@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = sub_100004B18(&qword_1000C8028);
  v4 = __chkstk_darwin(v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = v1[1];
  *(_OWORD *)v15 = *v1;
  *(_OWORD *)&v15[16] = v7;
  v16 = v1[2];
  *v6 = static Alignment.center.getter(v4);
  v6[1] = v8;
  v9 = sub_100004B18(&qword_1000C8030);
  sub_10002BFB0((double *)v15, (uint64_t)v6 + *(int *)(v9 + 44));
  v10 = v15[24];
  v17 = *(_OWORD *)&v15[8];
  v18 = v16;
  v11 = (_OWORD *)swift_allocObject(&unk_1000B49D0, 64, 7);
  v12 = *(_OWORD *)&v15[16];
  v11[1] = *(_OWORD *)v15;
  v11[2] = v12;
  v11[3] = v16;
  sub_100017F28((uint64_t)v6, a1, &qword_1000C8028);
  v13 = a1 + *(int *)(sub_100004B18(&qword_1000C8038) + 36);
  *(_BYTE *)v13 = v10;
  *(_QWORD *)(v13 + 8) = sub_10002CE08;
  *(_QWORD *)(v13 + 16) = v11;
  sub_10002CE10((uint64_t)&v17);
  sub_10001C188((uint64_t)&v18);
  return sub_100017AB4((uint64_t)v6, &qword_1000C8028);
}

uint64_t sub_10002CDDC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10002CE08(_BYTE *a1)
{
  uint64_t v1;

  sub_10002C778(a1, v1 + 16);
}

uint64_t sub_10002CE10(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10002CE38()
{
  uint64_t v0;
  uint64_t v1;
  int v3;
  __int128 v4;

  v4 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 32);
  v3 = 0;
  v1 = sub_100004B18(&qword_1000C8040);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_10002CE94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CAImage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002CED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C8058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10002CF18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[7];
  v3 = a1[9];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[25];
  swift_retain(a1[26]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

_QWORD *sub_10002CF98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[7];
  v3 = a1[9];
  v4 = a1[22];
  v5 = a1[23];
  v6 = a1[24];
  v7 = a1[26];
  swift_release(a1[25]);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v6);
  swift_release(v7);
  return a1;
}

uint64_t sub_10002D020@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002D048@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002D070(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10002D098(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10002D0C0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
  swift_retain(v2);
  return a1;
}

uint64_t sub_10002D0F4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_release(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10002D12C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8078;
  if (!qword_1000C8078)
  {
    v1 = sub_100005F48(&qword_1000C8038);
    sub_10000AAFC(&qword_1000C8080, &qword_1000C8028, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_10000AAFC(&qword_1000C8088, &qword_1000C8090, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C8078);
  }
  return result;
}

uint64_t sub_10002D1CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = _sSo25CAMediaTimingFunctionNamea13PCViewServiceE8allCasesSayABGvgZ_0();
  *a1 = result;
  return result;
}

uint64_t sub_10002D1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002D398();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10002D24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002D398();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t _sSo25CAMediaTimingFunctionNamea13PCViewServiceE8allCasesSayABGvgZ_0()
{
  uint64_t v0;
  uint64_t v1;
  NSString *v2;
  NSString *v3;
  NSString *v4;
  NSString *v5;
  NSString *v6;

  v0 = sub_100004B18(&qword_1000C80A8);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100082690;
  *(_QWORD *)(v1 + 32) = kCAMediaTimingFunctionDefault;
  *(_QWORD *)(v1 + 40) = kCAMediaTimingFunctionEaseIn;
  *(_QWORD *)(v1 + 48) = kCAMediaTimingFunctionEaseInEaseOut;
  *(_QWORD *)(v1 + 56) = kCAMediaTimingFunctionEaseOut;
  *(_QWORD *)(v1 + 64) = kCAMediaTimingFunctionLinear;
  v2 = kCAMediaTimingFunctionDefault;
  v3 = kCAMediaTimingFunctionEaseIn;
  v4 = kCAMediaTimingFunctionEaseInEaseOut;
  v5 = kCAMediaTimingFunctionEaseOut;
  v6 = kCAMediaTimingFunctionLinear;
  return v1;
}

unint64_t sub_10002D34C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8098;
  if (!qword_1000C8098)
  {
    v1 = sub_100005F48(&qword_1000C80A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000C8098);
  }
  return result;
}

unint64_t sub_10002D398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C5EB8;
  if (!qword_1000C5EB8)
  {
    type metadata accessor for CAMediaTimingFunctionName(255);
    result = swift_getWitnessTable(&unk_10007F864, v1);
    atomic_store(result, (unint64_t *)&qword_1000C5EB8);
  }
  return result;
}

id sub_10002D3E0()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for VariableBlurView()), "init");
}

void sub_10002D400(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + OBJC_IVAR____TtC13PCViewService16VariableBlurView_blurRadius) = *v1;
  sub_10002D744();
}

uint64_t sub_10002D430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002DB58();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10002D480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002DB58();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10002D4D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002DB58();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

char *sub_10002D4F4()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  char *v4;
  id v5;
  void *v6;
  objc_super v8;

  v1 = OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer;
  v2 = objc_allocWithZone((Class)CABackdropLayer);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtC13PCViewService16VariableBlurView_blurRadius] = 0;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for VariableBlurView();
  v4 = (char *)objc_msgSendSuper2(&v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v5 = objc_msgSend(v4, "layer");
  v6 = *(void **)&v4[OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer];
  objc_msgSend(v5, "addSublayer:", v6);

  objc_msgSend(v4, "bounds");
  objc_msgSend(v6, "setFrame:");
  sub_10002D744();

  return v4;
}

id sub_10002D618(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  id v7;
  char *v8;
  id v9;
  void *v10;
  objc_super v12;

  v3 = OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer;
  v4 = objc_allocWithZone((Class)CABackdropLayer);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");
  *(_QWORD *)&v5[OBJC_IVAR____TtC13PCViewService16VariableBlurView_blurRadius] = 0;

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for VariableBlurView();
  v6 = objc_msgSendSuper2(&v12, "initWithCoder:", a1);
  v7 = v6;
  if (v6)
  {
    v8 = (char *)v6;
    v9 = objc_msgSend(v8, "layer");
    v10 = *(void **)&v8[OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer];
    objc_msgSend(v9, "addSublayer:", v10);

    objc_msgSend(v8, "bounds");
    objc_msgSend(v10, "setFrame:");
    sub_10002D744();

  }
  return v7;
}

void sub_10002D744()
{
  uint64_t v0;
  NSString v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  Class isa;
  NSString v10;
  id v11;
  NSString v12;
  Class v13;
  NSString v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class v19;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v1);

  v3 = objc_msgSend(v2, "CGImage");
  static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterVariableBlur);
  v5 = v4;
  v6 = objc_allocWithZone((Class)CAFilter);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend(v6, "initWithType:", v7);

  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", isa, v10);

  v11 = v3;
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", v11, v12);

  v13 = Bool._bridgeToObjectiveC()().super.super.isa;
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", v13, v14);

  v15 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer);
  v16 = sub_100004B18(&qword_1000C80E8);
  v17 = swift_allocObject(v16, 64, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100082750;
  *(_QWORD *)(v17 + 56) = sub_10002DAC4();
  *(_QWORD *)(v17 + 32) = v8;
  v18 = v8;
  v19 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v15, "setFilters:", v19);

}

id sub_10002DA64()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VariableBlurView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for VariableBlurView()
{
  return objc_opt_self(_TtC13PCViewService16VariableBlurView);
}

unint64_t sub_10002DAC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C80F0;
  if (!qword_1000C80F0)
  {
    v1 = objc_opt_self(CAFilter);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C80F0);
  }
  return result;
}

ValueMetadata *type metadata accessor for VariableBlur()
{
  return &type metadata for VariableBlur;
}

unint64_t sub_10002DB14()
{
  unint64_t result;

  result = qword_1000C80F8;
  if (!qword_1000C80F8)
  {
    result = swift_getWitnessTable(&unk_100082790, &type metadata for VariableBlur);
    atomic_store(result, (unint64_t *)&qword_1000C80F8);
  }
  return result;
}

unint64_t sub_10002DB58()
{
  unint64_t result;

  result = qword_1000C8100;
  if (!qword_1000C8100)
  {
    result = swift_getWitnessTable(&unk_1000827E0, &type metadata for VariableBlur);
    atomic_store(result, (unint64_t *)&qword_1000C8100);
  }
  return result;
}

__n128 initializeWithCopy for SimpleSpring(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for SimpleSpring(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SimpleSpring(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SimpleSpring()
{
  return &type metadata for SimpleSpring;
}

ValueMetadata *type metadata accessor for SpringState()
{
  return &type metadata for SpringState;
}

void **initializeBufferWithCopyOfBuffer for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for MRNowPlayingPlayerResponseWrapper(id *a1)
{

}

void **assignWithCopy for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for MRNowPlayingPlayerResponseWrapper()
{
  return &type metadata for MRNowPlayingPlayerResponseWrapper;
}

uint64_t sub_10002DCF0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_100004B18(&qword_1000C8128);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100006914(a1, v8);
  v10 = sub_10002E100();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys, &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys, v10, v8, v9);
  v13 = a2;
  sub_100004B18(&qword_1000C8118);
  sub_10002E144(&qword_1000C8130, (uint64_t)&unk_100080AC0);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10002DE04()
{
  return 0x6E6F70736552726DLL;
}

uint64_t sub_10002DE20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E6F70736552726DLL && a2 == 0xEA00000000006573)
  {
    result = swift_bridgeObjectRelease(0xEA00000000006573);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F70736552726DLL, 0xEA00000000006573, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10002DEC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002E100();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002DEE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002E100();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10002DF10@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10002DFC4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10002DF38(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10002DCF0(a1, *v1);
}

uint64_t sub_10002DF50(void **a1, void **a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;

  v2 = *a1;
  v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      sub_10002ADA8();
      v4 = v3;
      v5 = v2;
      v6 = static NSObject.== infix(_:_:)(v5, v4);

      if ((v6 & 1) != 0)
        return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

_QWORD *sub_10002DFC4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v3 = sub_100004B18(&qword_1000C8108);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_100006914(a1, v7);
  v10 = sub_10002E100();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys, &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_10000697C(a1);
  }
  else
  {
    v11 = sub_100004B18(&qword_1000C8118);
    sub_10002E144(&qword_1000C8120, (uint64_t)&unk_100080AE8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_10000697C(a1);
  }
  return v9;
}

unint64_t sub_10002E100()
{
  unint64_t result;

  result = qword_1000C8110;
  if (!qword_1000C8110)
  {
    result = swift_getWitnessTable(&unk_100082A20, &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8110);
  }
  return result;
}

uint64_t sub_10002E144(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100005F48(&qword_1000C8118);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10002E1C8 + 4 * asc_1000828A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10002E1E8 + 4 * byte_1000828A5[v4]))();
}

_BYTE *sub_10002E1C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10002E1E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002E1F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002E1F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10002E200(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10002E208(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MRNowPlayingPlayerResponseWrapper.CodingKeys()
{
  return &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys;
}

unint64_t sub_10002E228()
{
  unint64_t result;

  result = qword_1000C8138;
  if (!qword_1000C8138)
  {
    result = swift_getWitnessTable(&unk_1000829F8, &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8138);
  }
  return result;
}

unint64_t sub_10002E270()
{
  unint64_t result;

  result = qword_1000C8140;
  if (!qword_1000C8140)
  {
    result = swift_getWitnessTable(&unk_100082968, &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8140);
  }
  return result;
}

unint64_t sub_10002E2B8()
{
  unint64_t result;

  result = qword_1000C8148;
  if (!qword_1000C8148)
  {
    result = swift_getWitnessTable(&unk_100082990, &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8148);
  }
  return result;
}

id sub_10002E38C(void *a1)
{
  id v1;
  NSString v2;
  id v3;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "BOOLForKey:", v2);

  return v3;
}

void sub_10002E40C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  NSString v5;

  v4 = a1;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setBool:forKey:", a3, v5);

}

double sub_10002E4CC(void *a1)
{
  id v1;
  NSString v2;
  double v3;
  double v4;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "doubleForKey:", v2);
  v4 = v3;

  return v4;
}

void sub_10002E554(void *a1, double a2)
{
  id v3;
  NSString v4;

  v3 = a1;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setDouble:forKey:", v4, a2);

}

id sub_10002E61C(void *a1)
{
  id v1;
  NSString v2;
  id v3;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "integerForKey:", v2);

  return v3;
}

void sub_10002E69C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  NSString v5;

  v4 = a1;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setInteger:forKey:", a3, v5);

}

uint64_t sub_10002E708()
{
  uint64_t v0;
  id v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_10004FF28();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v3 = v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  sub_1000300B0(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002E7D0()
{
  return type metadata accessor for XPCConnectionManager(0);
}

uint64_t type metadata accessor for XPCConnectionManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C8198;
  if (!qword_1000C8198)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for XPCConnectionManager);
  return result;
}

uint64_t sub_10002E814(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100082AC8;
    v4[2] = &unk_100082AE0;
    v4[3] = &unk_100082AF8;
    v4[4] = &unk_100082AF8;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10002E8AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10002E8C4, 0, 0);
}

void sub_10002E8C4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;

  v1 = *(_QWORD *)(v0 + 56);
  _StringGuts.grow(_:)(35);
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0xE000000000000000;
  v2._object = (void *)0x8000000100090E00;
  v2._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy + 8);
  v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy + 16);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy);
  *(_QWORD *)(v0 + 24) = v3;
  *(_BYTE *)(v0 + 32) = v4;
  _print_unlocked<A, B>(_:_:)(v0 + 16, v0 + 40, &type metadata for XPCConnectionManager.ReconnectPolicy, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = sub_10004FF28();
  swift_bridgeObjectRetain(v5);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v6, "ulog:message:", 60, v7);
  swift_bridgeObjectRelease(v5);

  __asm { BR              X9 }
}

uint64_t sub_10002E9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSString v14;

  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries);
  if ((v5 & 0x8000000000000000) != 0 || v5 < v4)
  {
    sub_10002EB9C();
  }
  else
  {
    v6 = v3;
    v7 = sub_10003006C();
    v8 = swift_allocError(&type metadata for XPCConnectionManager.ManagerError, v7, 0, 0);
    *v9 = 2;
    swift_willThrow(v8);
    _StringGuts.grow(_:)(35);
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0xE000000000000000;
    v10._object = (void *)0x8000000100090E30;
    v10._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v10);
    *(_QWORD *)(v1 + 40) = v8;
    v11 = sub_100004B18(&qword_1000C6668);
    _print_unlocked<A, B>(_:_:)(v0, v2, v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v12 = *(_QWORD *)(v1 + 24);
    v13 = sub_10004FF28();
    swift_bridgeObjectRetain(v12);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    objc_msgSend(v13, *(SEL *)(v6 + 3552), 60, v14);

    swift_errorRelease(v8);
    swift_bridgeObjectRelease(v12);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10002EB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSString v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = v0;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries;
  if (__OFADD__(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries), 1))
  {
    __break(1u);
  }
  else
  {
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6 = sub_10004FF28();
    swift_bridgeObjectRetain(0x8000000100090DE0);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0x8000000100090DE0);
    objc_msgSend(v6, "ulog:message:", 40, v7);

    swift_bridgeObjectRelease(0x8000000100090DE0);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask) = 0;
    swift_release(v8);
    v9 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx;
    v10 = *(void **)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
    if (v10)
    {
      v11 = v10;
      v12 = sub_10004FF28();
      v13 = String._bridgeToObjectiveC()();
      objc_msgSend(v12, "ulog:message:", 40, v13);

      objc_msgSend(v11, "invalidate");
      v14 = *(void **)(v1 + v9);
      *(_QWORD *)(v1 + v9) = 0;

    }
    v15 = *(_QWORD *)(v1 + v2);
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (!v16)
    {
      *(_QWORD *)(v1 + v2) = v17;
      sub_10002F0CC();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_10002ED6C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;

  v2 = v1;
  v4 = sub_100004B18(&qword_1000C82F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  v7._object = (void *)0x8000000100090DC0;
  v7._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v7);
  Double.write<A>(to:)(&v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
  v8._countAndFlagsBits = 0x73646E6F63657320;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  v9 = v17;
  v10 = sub_10004FF28();
  swift_bridgeObjectRetain(v9);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v10, "ulog:message:", 40, v11);

  swift_bridgeObjectRelease(v9);
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
  v13 = swift_allocObject(&unk_1000B4F60, 24, 7);
  swift_weakInit(v13 + 16, v2);
  v14 = swift_allocObject(&unk_1000B5078, 48, 7);
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(double *)(v14 + 32) = a1;
  *(_QWORD *)(v14 + 40) = v13;
  return sub_10004B7B4((uint64_t)v6, (uint64_t)&unk_1000C8320, v14);
}

uint64_t sub_10002EF24(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 48) = a5;
  *(double *)(v5 + 40) = a1;
  return swift_task_switch(sub_10002EF40, 0, 0);
}

void sub_10002EF40()
{
  uint64_t v0;
  double v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(double *)(v0 + 40) * 1000000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19)
  {
    v2 = (unint64_t)v1;
    v3 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
    *(_QWORD *)(v0 + 56) = v3;
    *v3 = v0;
    v3[1] = sub_10002EFDC;
    static Task<>.sleep(nanoseconds:)(v2);
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_10002EFDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_10002F048, 0, 0);
}

uint64_t sub_10002F048()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;

  v1 = v0[8];
  static Task<>.checkCancellation()();
  if (v1)
  {
    v2 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v3 = v0[6] + 16;
    swift_beginAccess(v3, v0 + 2, 0, 0);
    Strong = swift_weakLoadStrong(v3);
    if (Strong)
    {
      v5 = Strong;
      sub_10002EB9C();
      swift_release(v5);
    }
    v2 = (uint64_t (*)(void))v0[1];
  }
  return v2();
}

uint64_t sub_10002F0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  NSString v12;
  uint64_t v13;
  id v14;
  NSString v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t (*v27)();
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t (*v34)();
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  id v39;
  NSString v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void **aBlock;
  unint64_t v46;
  uint64_t (*v47)();
  void *v48;
  void *v49;
  _QWORD *v50;

  v1 = v0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  aBlock = (void **)0xD000000000000022;
  v46 = 0x8000000100090D10;
  v2 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
  if (v3)
  {
    v44 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
    v4 = sub_10002FDF4();
    v5 = v3;
    v6 = String.init<A>(describing:)(&v44, v4);
    v8 = v7;
  }
  else
  {
    v8 = 0xE300000000000000;
    v6 = 7104878;
  }
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v8);
  v10 = v46;
  v11 = sub_10004FF28();
  swift_bridgeObjectRetain(v10);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v11, "ulog:message:", 40, v12);

  swift_bridgeObjectRelease(v10);
  v13 = *(_QWORD *)(v1 + v2);
  v14 = sub_10004FF28();
  if (v13)
  {
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "ulog:message:", 40, v15);

    v16 = 0;
LABEL_15:

    return v16;
  }
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "ulog:message:", 40, v17);

  v18 = v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate);
  if (Strong)
  {
    v20 = Strong;
    v21 = *(_QWORD *)(v18 + 8);
    ObjectType = swift_getObjectType(Strong);
    v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(ObjectType, v21);
    v24 = objc_msgSend(v23, "interruptionHandler");
    if (v24)
    {
      v25 = v24;
      v26 = swift_allocObject(&unk_1000B5000, 24, 7);
      *(_QWORD *)(v26 + 16) = v25;
      v27 = sub_100030288;
    }
    else
    {
      v27 = 0;
      v26 = 0;
    }
    v28 = (_QWORD *)swift_allocObject(&unk_1000B4F10, 40, 7);
    v28[2] = v1;
    v28[3] = v27;
    v28[4] = v26;
    v49 = sub_10002FD44;
    v50 = v28;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_100030320;
    v48 = &unk_1000B4F28;
    v29 = _Block_copy(&aBlock);
    v30 = v50;
    swift_retain(v1);
    v43 = (uint64_t)v27;
    sub_100007A80((uint64_t)v27, v26);
    swift_release(v30);
    objc_msgSend(v23, "setInterruptionHandler:", v29);
    _Block_release(v29);
    v31 = objc_msgSend(v23, "invalidationHandler");
    if (v31)
    {
      v32 = v31;
      v33 = swift_allocObject(&unk_1000B4FD8, 24, 7);
      *(_QWORD *)(v33 + 16) = v32;
      v34 = sub_10000AB6C;
    }
    else
    {
      v34 = 0;
      v33 = 0;
    }
    v35 = swift_allocObject(&unk_1000B4F60, 24, 7);
    swift_weakInit(v35 + 16, v1);
    v36 = (_QWORD *)swift_allocObject(&unk_1000B4F88, 40, 7);
    v36[2] = v35;
    v36[3] = v34;
    v36[4] = v33;
    v49 = sub_10002FDC4;
    v50 = v36;
    aBlock = _NSConcreteStackBlock;
    v46 = 1107296256;
    v47 = sub_100030320;
    v48 = &unk_1000B4FA0;
    v37 = _Block_copy(&aBlock);
    v38 = v50;
    sub_100007A80((uint64_t)v34, v33);
    swift_release(v38);
    objc_msgSend(v23, "setInvalidationHandler:", v37);
    _Block_release(v37);
    objc_msgSend(v23, "activate");
    v39 = sub_10004FF28();
    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v39, "ulog:message:", 40, v40);

    sub_100007A90(v43, v26);
    sub_100007A90((uint64_t)v34, v33);
    swift_unknownObjectRelease(v20, v41);
    v15 = *(NSString *)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v23;
    v16 = 1;
    goto LABEL_15;
  }
  return 2;
}

__n128 initializeBufferWithCopyOfBuffer for XPCConnectionManager.ReconnectPolicy(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for XPCConnectionManager.ReconnectPolicy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCConnectionManager.ReconnectPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10002F5DC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_10002F5F4(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionManager.ReconnectPolicy()
{
  return &type metadata for XPCConnectionManager.ReconnectPolicy;
}

uint64_t sub_10002F61C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v4 = sub_100004B18(&qword_1000C82F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = swift_allocObject(&unk_1000B4F60, 24, 7);
  swift_weakInit(v8 + 16, a1);
  v9 = (_QWORD *)swift_allocObject(&unk_1000B5028, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v8;
  v10 = sub_10002F8A4((uint64_t)v6, (uint64_t)&unk_1000C8300, (uint64_t)v9);
  result = swift_release(v10);
  if (a2)
    return a2(result);
  return result;
}

uint64_t sub_10002F710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch(sub_10002F728, 0, 0);
}

uint64_t sub_10002F728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = sub_10004FF28();
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v4, "ulog:message:", 40, v5);
    swift_release(v3);

  }
  v6 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess(v6, v0 + 40, 0, 0);
  v7 = swift_weakLoadStrong(v6);
  *(_QWORD *)(v0 + 72) = v7;
  if (!v7)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v8 = v7;
  v9 = (_QWORD *)swift_task_alloc(dword_1000C81AC);
  *(_QWORD *)(v0 + 80) = v9;
  *v9 = v0;
  v9[1] = sub_10002F854;
  v9[7] = v8;
  return swift_task_switch(sub_10002E8C4, 0, 0);
}

uint64_t sub_10002F854()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *v0;
  v2 = *(_QWORD *)(v5 + 72);
  v1 = *(_QWORD *)(v5 + 80);
  v3 = *v0;
  v5 = v3;
  swift_task_dealloc(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10002F8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10002FF04(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9, v13);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1000B5050, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000C8310, v16);
}

void sub_10002F9E8(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  id v6;
  NSString v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = sub_10004FF28();
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "ulog:message:", 40, v7);
    swift_release(v5);

  }
  if (a2)
    a2();
}

uint64_t sub_10002FAA4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10002FAEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  unint64_t v17;

  v1 = *v0;
  v2 = swift_retain(*v0);
  v3 = UUID.uuidString.getter(v2);
  v5 = v4;
  swift_release(v1);
  v6 = sub_10002FCB8(8, v3, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease(v5);
  v16 = 45;
  v17 = 0xE100000000000000;
  v15[0] = v6;
  v15[1] = v8;
  v15[2] = v10;
  v15[3] = v12;
  v13 = sub_100029338();
  String.append<A>(contentsOf:)(v15, &type metadata for Substring, v13);
  swift_bridgeObjectRelease(v12);
  return v16;
}

unint64_t sub_10002FBB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C82E0;
  if (!qword_1000C82E0)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1000C82E0);
  }
  return result;
}

uint64_t sub_10002FC08(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10002FC6C;
  return v6(a1);
}

uint64_t sub_10002FC6C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002FCB8(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

uint64_t sub_10002FD44()
{
  uint64_t v0;

  return sub_10002F61C(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_10002FD50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002FD60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002FD68()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002FD90()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10002FDC4()
{
  uint64_t v0;

  sub_10002F9E8(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_10002FDD0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10002FDF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C82E8;
  if (!qword_1000C82E8)
  {
    v1 = objc_opt_self(NSXPCConnection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C82E8);
  }
  return result;
}

uint64_t sub_10002FE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_10002FE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1000C82FC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10002FEBC;
  v3[8] = v2;
  return swift_task_switch(sub_10002F728, 0, 0);
}

uint64_t sub_10002FEBC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002FF04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000C82F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002FF44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002FF68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000C830C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100030278;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000C8308 + dword_1000C8308))(a1, v4);
}

uint64_t sub_10002FFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 40));
  return swift_deallocObject(v2, 48, 7);
}

uint64_t sub_100030004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc(dword_1000C831C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002FEBC;
  v4[6] = v3;
  v4[5] = v2;
  return swift_task_switch(sub_10002EF40, 0, 0);
}

unint64_t sub_10003006C()
{
  unint64_t result;

  result = qword_1000C8328;
  if (!qword_1000C8328)
  {
    result = swift_getWitnessTable(&unk_100082BE0, &type metadata for XPCConnectionManager.ManagerError);
    atomic_store(result, (unint64_t *)&qword_1000C8328);
  }
  return result;
}

uint64_t sub_1000300B0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCConnectionManager.ManagerError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCConnectionManager.ManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000301B0 + 4 * byte_100082A79[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000301E4 + 4 * byte_100082A74[v4]))();
}

uint64_t sub_1000301E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000301EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000301F4);
  return result;
}

uint64_t sub_100030200(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100030208);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003020C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100030214(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionManager.ManagerError()
{
  return &type metadata for XPCConnectionManager.ManagerError;
}

unint64_t sub_100030234()
{
  unint64_t result;

  result = qword_1000C8330;
  if (!qword_1000C8330)
  {
    result = swift_getWitnessTable(&unk_100082BB8, &type metadata for XPCConnectionManager.ManagerError);
    atomic_store(result, (unint64_t *)&qword_1000C8330);
  }
  return result;
}

uint64_t sub_10003028C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100082C40;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = &unk_100082C58;
    v4[4] = &unk_100082C58;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = &unk_100082C58;
    result = swift_initClassMetadata2(a1, 0, 7, v4, a1 + 128);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100030324(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100030350(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  char v33;

  v30 = a2;
  v3 = sub_100004B18(&qword_1000C8428);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000C8430);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000C8438);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004B18(&qword_1000C8440);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_100006914(a1, v16);
  v17 = sub_100031EAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for XPCConnectionEvent.CodingKeys, &type metadata for XPCConnectionEvent.CodingKeys, v17, v16, v15);
  if ((_BYTE)v30)
  {
    if (v30 == 1)
    {
      v32 = 1;
      v18 = sub_100031F34();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for XPCConnectionEvent.ConnectedCodingKeys, &v32, v12, &type metadata for XPCConnectionEvent.ConnectedCodingKeys, v18);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    }
    else
    {
      v33 = 2;
      v20 = sub_100031EF0();
      v21 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for XPCConnectionEvent.InvalidatedCodingKeys, &v33, v12, &type metadata for XPCConnectionEvent.InvalidatedCodingKeys, v20);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
    }
  }
  else
  {
    v31 = 0;
    v19 = sub_100031F78();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for XPCConnectionEvent.RequestedCodingKeys, &v31, v12, &type metadata for XPCConnectionEvent.RequestedCodingKeys, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v12);
}

uint64_t sub_1000305B4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x657463656E6E6F63;
  if (*v0 != 1)
    v1 = 0x6164696C61766E69;
  if (*v0)
    return v1;
  else
    return 0x6574736575716572;
}

uint64_t sub_100030618@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100031950(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003063C(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100030648(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031EAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030670(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031EAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030698(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031F34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000306C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031F34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000306E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031EF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030710(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031EF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030738(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031F78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030760(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031F78();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100030788@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100031AD4(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1000307B0(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_100030350(a1, *v1);
}

uint64_t sub_1000307C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t WitnessTable;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[4];
  uint64_t v16;
  unint64_t v17;

  v1 = *v0;
  WitnessTable = swift_getWitnessTable(&unk_100082DB8, *v0);
  v3 = sub_10007C700(v1, WitnessTable);
  v5 = v4;
  v6 = sub_10002FCB8(8, v3, v4);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  swift_bridgeObjectRelease(v5);
  v16 = 45;
  v17 = 0xE100000000000000;
  v15[0] = v6;
  v15[1] = v8;
  v15[2] = v10;
  v15[3] = v12;
  v13 = sub_100029338();
  String.append<A>(contentsOf:)(v15, &type metadata for Substring, v13);
  swift_bridgeObjectRelease(v12);
  return v16;
}

id sub_10003088C()
{
  uint64_t *v0;
  uint64_t *v1;
  _QWORD *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  NSString v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t *v23;
  void **aBlock;
  uint64_t v25;
  uint64_t (*v26)();
  void *v27;
  void *v28;
  _QWORD *v29;

  v1 = v0;
  v2 = (_QWORD *)*v0;
  sub_10003DDAC(0xD000000000000013, (void *)0x8000000100090F10, 0, *v0, (uint64_t)&off_1000B53B0);
  v3 = *(void **)((char *)v0 + qword_1000C8340);
  v23 = v1;
  if (v3)
  {
    v4 = v3;
  }
  else
  {
    v5 = *(uint64_t *)((char *)v1 + qword_1000DF568 + 8);
    v6 = objc_allocWithZone((Class)NSXPCConnection);
    swift_bridgeObjectRetain(v5);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    v4 = objc_msgSend(v6, "initWithMachServiceName:options:", v7, 0);

    v3 = 0;
  }
  v8 = (_QWORD *)swift_allocObject(&unk_1000B53F0, 72, 7);
  v22 = v2[10];
  v8[2] = v22;
  v9 = v2[11];
  v8[3] = v9;
  v10 = v2[12];
  v8[4] = v10;
  v11 = v2[13];
  v8[5] = v11;
  v12 = v2[14];
  v8[6] = v12;
  v13 = v2[15];
  v8[7] = v13;
  v8[8] = v2;
  v28 = sub_100031890;
  v29 = v8;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_100030320;
  v27 = &unk_1000B5408;
  v14 = _Block_copy(&aBlock);
  v15 = v29;
  v16 = v3;
  objc_msgSend(v4, "setInterruptionHandler:", v14, swift_release(v15).n128_f64[0]);
  _Block_release(v14);
  v17 = swift_allocObject(&unk_1000B5440, 24, 7);
  swift_weakInit(v17 + 16, v23);
  v18 = (_QWORD *)swift_allocObject(&unk_1000B5468, 80, 7);
  v18[2] = v22;
  v18[3] = v9;
  v18[4] = v10;
  v18[5] = v11;
  v18[6] = v12;
  v18[7] = v13;
  v18[8] = v17;
  v18[9] = v2;
  v28 = sub_10003193C;
  v29 = v18;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_100030320;
  v27 = &unk_1000B5480;
  v19 = _Block_copy(&aBlock);
  objc_msgSend(v4, "setInvalidationHandler:", v19, swift_release(v29).n128_f64[0]);
  _Block_release(v19);
  v20 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP13PCViewService15XPCLinkProtocol_);
  if (qword_1000C5DA8 != -1)
    swift_once(&qword_1000C5DA8, sub_100074070);
  objc_msgSend(v4, "_setQueue:", qword_1000DF618, v22);
  objc_msgSend(v4, "setExportedInterface:", v20);
  objc_msgSend(v4, "setExportedObject:", v23);
  objc_msgSend(v4, "setRemoteObjectInterface:", v20);

  return v4;
}

double sub_100030BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE v8[24];

  v2 = a1 + 16;
  sub_10003DC3C(0x61766E6920435058, (void *)0xEF6465746164696CLL, 0, a2, (uint64_t)&off_1000B53B0);
  swift_beginAccess(v2, v8, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(Strong + qword_1000C8350);
    swift_retain(v6);
    swift_release(v5);
    v7 = 2;
    PassthroughSubject.send(_:)(&v7);
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

uint64_t *sub_100030C60()
{
  uint64_t *v0;
  uint64_t *v1;
  char *v2;
  uint64_t v3;

  v1 = v0;
  sub_10003DDAC(0x74696E696544, (void *)0xE600000000000000, 0, *v0, (uint64_t)&off_1000B53B0);
  v2 = (char *)v0 + qword_1000DF560;
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v1 + qword_1000DF568 + 8));
  swift_release(*(uint64_t *)((char *)v1 + qword_1000C8338));

  swift_release(*(uint64_t *)((char *)v1 + qword_1000C8348));
  swift_release(*(uint64_t *)((char *)v1 + qword_1000C8350));
  swift_release(*(uint64_t *)((char *)v1 + qword_1000C8358));
  return v1;
}

uint64_t sub_100030D40()
{
  uint64_t v0;

  sub_100030C60();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

double sub_100030D64(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v5 = *v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = v2;
  sub_10003DDAC(0xD000000000000019, (void *)0x8000000100090FB0, 0, v5, (uint64_t)&off_1000B53B0);
  if (qword_1000C5DA8 != -1)
    swift_once(&qword_1000C5DA8, sub_100074070);
  v21 = qword_1000DF618;
  v12 = swift_allocObject(&unk_1000B5440, 24, 7);
  swift_weakInit(v12 + 16, v2);
  v13 = swift_allocObject(&unk_1000B54B8, 88, 7);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(v5 + 80);
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v5 + 96);
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v5 + 104);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(v5 + 120);
  *(_QWORD *)(v13 + 64) = v12;
  *(_QWORD *)(v13 + 72) = a1;
  *(_QWORD *)(v13 + 80) = a2;
  aBlock[4] = sub_100031FE8;
  v26 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100030320;
  aBlock[3] = &unk_1000B54D0;
  v14 = _Block_copy(aBlock);
  swift_retain(v12);
  v15 = sub_10000B554(a1, a2);
  static DispatchQoS.unspecified.getter(v15);
  v24 = _swiftEmptyArrayStorage;
  v16 = sub_100003E48((unint64_t *)&qword_1000C6450, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100004B18(&qword_1000C6458);
  v18 = sub_10003201C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v22);
  v19 = v26;
  swift_release(v12);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

double sub_100031004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t Strong;
  double result;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[24];

  v32 = a4;
  v33 = a6;
  v34 = a2;
  v35 = a3;
  v13 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v13);
  v14 = type metadata accessor for Optional(0, a5);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v29 - v16;
  v18 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(v15);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v43, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v29 = Strong;
    v30 = a9;
    v31 = a7;
    v23 = a8;
    sub_10004A81C(v34, v35, a5, a8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, a5);
    v24 = v29;
    v42 = v29;
    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v25._object = (void *)0x8000000100090FF0;
    v25._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v25);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v20, a5);
    v26 = v36;
    v27 = (void *)v37;
    v36 = v32;
    v37 = a5;
    v38 = v33;
    v39 = v31;
    v40 = v23;
    v41 = v30;
    v28 = type metadata accessor for XPCLink(0, (uint64_t)&v36);
    sub_10003DDAC(v26, v27, 0, v28, (uint64_t)&off_1000B53B0);
    swift_bridgeObjectRelease(v27);
    PassthroughSubject.send(_:)(v20);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, a5);
    *(_QWORD *)&result = swift_release(v24).n128_u64[0];
  }
  return result;
}

double sub_100031404(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10003162C(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_100030D64);
}

uint64_t type metadata accessor for XPCLink(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for XPCLink);
}

uint64_t sub_10003141C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + qword_1000DF560;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100031464()
{
  return sub_1000307C8();
}

void sub_100031488()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSData v7;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  void *v12;
  _QWORD v13[4];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, "remoteObjectProxy");
    _bridgeAnyObjectToAny(_:)(v13);
    swift_unknownObjectRelease(v3, v4);
    v5 = sub_100004B18(&qword_1000C8448);
    if (swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, v5, 6))
    {
      v6 = v12;
      v7.super.isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v6, "handleWithSerializedObject:", v7.super.isa);

      swift_unknownObjectRelease(v6, v8);
    }
    else
    {
      v10 = sub_10004FF28();
      v7.super.isa = (Class)String._bridgeToObjectiveC()();
      objc_msgSend(v10, "ulog:message:", 60, v7.super.isa);

    }
  }
  else
  {
    v9 = sub_10004FF28();
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "ulog:message:", 60, v11);

  }
}

double sub_10003162C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t, unint64_t))
{
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double result;

  v7 = a3;
  swift_retain(a1);
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v10 = v9;

  a4(v8, v10);
  sub_10000ABA8(v8, v10);
  *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent()
{
  return &type metadata for XPCConnectionEvent;
}

void **assignWithCopy for XPCLinkRole(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **assignWithTake for XPCLinkRole(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCLinkRole(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for XPCLinkRole(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_1000317C4(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000317DC(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for XPCLinkRole()
{
  return &type metadata for XPCLinkRole;
}

unint64_t sub_100031810()
{
  unint64_t result;

  result = qword_1000C83E0;
  if (!qword_1000C83E0)
  {
    result = swift_getWitnessTable(&unk_100082D50, &type metadata for XPCConnectionEvent);
    atomic_store(result, (unint64_t *)&qword_1000C83E0);
  }
  return result;
}

uint64_t sub_100031854()
{
  return sub_100003E48((unint64_t *)&qword_1000C82E0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100031880()
{
  uint64_t v0;

  return swift_deallocObject(v0, 72, 7);
}

void sub_100031890()
{
  uint64_t v0;

  sub_10003DE94(60, 0xD000000000000013, (void *)0x8000000100090F30, 0, *(_QWORD *)(v0 + 64), (uint64_t)&off_1000B53B0);
}

uint64_t sub_1000318DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000318EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000318F4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100031918()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 80, 7);
}

double sub_10003193C()
{
  uint64_t v0;

  return sub_100030BAC(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_100031950(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6574736575716572 && a2 == 0xE900000000000064)
  {
    v5 = 0xE900000000000064;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574736575716572, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657463656E6E6F63 && a2 == 0xE900000000000064)
  {
    v7 = 0xE900000000000064;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657463656E6E6F63, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6164696C61766E69 && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease(0xEB00000000646574);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6164696C61766E69, 0xEB00000000646574, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_100031AD4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  char v41;
  char v42;
  char v43;

  v37 = sub_100004B18(&qword_1000C83E8);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100004B18(&qword_1000C83F0);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004B18(&qword_1000C83F8);
  v4 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004B18(&qword_1000C8400);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1[3];
  v12 = a1[4];
  sub_100006914(a1, v11);
  v13 = sub_100031EAC();
  v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for XPCConnectionEvent.CodingKeys, &type metadata for XPCConnectionEvent.CodingKeys, v13, v11, v12);
  if (v14)
    goto LABEL_7;
  v31 = v4;
  v32 = v8;
  v15 = v39;
  v40 = a1;
  v16 = v10;
  v17 = KeyedDecodingContainer.allKeys.getter(v7);
  v18 = v17;
  v19 = v7;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = v17;
    v24 = type metadata accessor for DecodingError(0);
    swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
    v10 = v25;
    sub_100004B18(&qword_1000C7E90);
    *v10 = &type metadata for XPCConnectionEvent;
    v26 = KeyedDecodingContainer.codingPath.getter(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v10, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow(v27);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v19);
    a1 = v40;
LABEL_7:
    sub_10000697C(a1);
    return v10;
  }
  v10 = (_QWORD *)*(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if ((_DWORD)v10 == 1)
    {
      v42 = 1;
      v20 = sub_100031F34();
      v21 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for XPCConnectionEvent.ConnectedCodingKeys, &v42, v7, &type metadata for XPCConnectionEvent.ConnectedCodingKeys, v20);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v36);
    }
    else
    {
      v43 = 2;
      v30 = sub_100031EF0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for XPCConnectionEvent.InvalidatedCodingKeys, &v43, v7, &type metadata for XPCConnectionEvent.InvalidatedCodingKeys, v30);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v37);
    }
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v16, v19);
  }
  else
  {
    v41 = 0;
    v29 = sub_100031F78();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for XPCConnectionEvent.RequestedCodingKeys, &v41, v7, &type metadata for XPCConnectionEvent.RequestedCodingKeys, v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v34);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v7);
  }
  sub_10000697C(v40);
  return v10;
}

unint64_t sub_100031EAC()
{
  unint64_t result;

  result = qword_1000C8408;
  if (!qword_1000C8408)
  {
    result = swift_getWitnessTable(&unk_100083100, &type metadata for XPCConnectionEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8408);
  }
  return result;
}

unint64_t sub_100031EF0()
{
  unint64_t result;

  result = qword_1000C8410;
  if (!qword_1000C8410)
  {
    result = swift_getWitnessTable(&unk_1000830B0, &type metadata for XPCConnectionEvent.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8410);
  }
  return result;
}

unint64_t sub_100031F34()
{
  unint64_t result;

  result = qword_1000C8418;
  if (!qword_1000C8418)
  {
    result = swift_getWitnessTable(&unk_100083060, &type metadata for XPCConnectionEvent.ConnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8418);
  }
  return result;
}

unint64_t sub_100031F78()
{
  unint64_t result;

  result = qword_1000C8420;
  if (!qword_1000C8420)
  {
    result = swift_getWitnessTable(&unk_100083010, &type metadata for XPCConnectionEvent.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8420);
  }
  return result;
}

uint64_t sub_100031FBC()
{
  _QWORD *v0;

  swift_release(v0[8]);
  sub_10000ABA8(v0[9], v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

double sub_100031FE8()
{
  uint64_t *v0;

  return sub_100031004(v0[8], v0[9], v0[10], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

unint64_t sub_10003201C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6460;
  if (!qword_1000C6460)
  {
    v1 = sub_100005F48(&qword_1000C6458);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000C6460);
  }
  return result;
}

uint64_t _s13PCViewService18XPCConnectionEventOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000320B4 + 4 * byte_100082C25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000320E8 + 4 * byte_100082C20[v4]))();
}

uint64_t sub_1000320E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000320F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000320F8);
  return result;
}

uint64_t sub_100032104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003210CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100032110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100032118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.CodingKeys()
{
  return &type metadata for XPCConnectionEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.RequestedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.ConnectedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.ConnectedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.InvalidatedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.InvalidatedCodingKeys;
}

unint64_t sub_100032168()
{
  unint64_t result;

  result = qword_1000C8450;
  if (!qword_1000C8450)
  {
    result = swift_getWitnessTable(&unk_100082FE8, &type metadata for XPCConnectionEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8450);
  }
  return result;
}

unint64_t sub_1000321B0()
{
  unint64_t result;

  result = qword_1000C8458;
  if (!qword_1000C8458)
  {
    result = swift_getWitnessTable(&unk_100082F08, &type metadata for XPCConnectionEvent.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8458);
  }
  return result;
}

unint64_t sub_1000321F8()
{
  unint64_t result;

  result = qword_1000C8460;
  if (!qword_1000C8460)
  {
    result = swift_getWitnessTable(&unk_100082F30, &type metadata for XPCConnectionEvent.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8460);
  }
  return result;
}

unint64_t sub_100032240()
{
  unint64_t result;

  result = qword_1000C8468;
  if (!qword_1000C8468)
  {
    result = swift_getWitnessTable(&unk_100082EB8, &type metadata for XPCConnectionEvent.ConnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8468);
  }
  return result;
}

unint64_t sub_100032288()
{
  unint64_t result;

  result = qword_1000C8470;
  if (!qword_1000C8470)
  {
    result = swift_getWitnessTable(&unk_100082EE0, &type metadata for XPCConnectionEvent.ConnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8470);
  }
  return result;
}

unint64_t sub_1000322D0()
{
  unint64_t result;

  result = qword_1000C8478;
  if (!qword_1000C8478)
  {
    result = swift_getWitnessTable(&unk_100082E68, &type metadata for XPCConnectionEvent.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8478);
  }
  return result;
}

unint64_t sub_100032318()
{
  unint64_t result;

  result = qword_1000C8480;
  if (!qword_1000C8480)
  {
    result = swift_getWitnessTable(&unk_100082E90, &type metadata for XPCConnectionEvent.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8480);
  }
  return result;
}

unint64_t sub_100032360()
{
  unint64_t result;

  result = qword_1000C8488;
  if (!qword_1000C8488)
  {
    result = swift_getWitnessTable(&unk_100082F58, &type metadata for XPCConnectionEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8488);
  }
  return result;
}

unint64_t sub_1000323A8()
{
  unint64_t result;

  result = qword_1000C8490;
  if (!qword_1000C8490)
  {
    result = swift_getWitnessTable(&unk_100082F80, &type metadata for XPCConnectionEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8490);
  }
  return result;
}

uint64_t sub_100032408@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = swift_getKeyPath(&unk_100083198);
  v6 = sub_100004B18(&qword_1000C7180);
  swift_storeEnumTagMultiPayload(a1, v6, 0);
  v7 = (int *)type metadata accessor for CloseButtonView(0);
  v8 = v7[5];
  v9 = enum case for Color.RGBColorSpace.sRGB(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v10(v5, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  *(_QWORD *)((char *)a1 + v8) = Color.init(_:white:opacity:)(v5, 0.55, 1.0);
  v11 = v7[6];
  v10(v5, v9, v2);
  *(_QWORD *)((char *)a1 + v11) = Color.init(_:white:opacity:)(v5, 0.65, 1.0);
  v12 = v7[7];
  v10(v5, v9, v2);
  *(_QWORD *)((char *)a1 + v12) = Color.init(_:white:opacity:)(v5, 0.95, 1.0);
  v13 = v7[8];
  v10(v5, v9, v2);
  result = Color.init(_:white:opacity:)(v5, 0.2, 1.0);
  *(_QWORD *)((char *)a1 + v13) = result;
  return result;
}

uint64_t sub_100032574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;

  v3 = sub_100004B18(&qword_1000C8070);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v36 - v11;
  v13 = sub_100004B18(&qword_1000C8538);
  __chkstk_darwin(v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = Image.init(systemName:)(0xD000000000000011, 0x8000000100091010);
  static SymbolRenderingMode.palette.getter();
  v17 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
  v37 = Image.symbolRenderingMode(_:)(v15, v16);
  swift_release(v16);
  sub_100017AB4((uint64_t)v15, &qword_1000C8538);
  sub_100033094((uint64_t)v12);
  v36 = v7;
  v18 = *(uint64_t (**)(char *, uint64_t))(v7 + 88);
  v19 = v18(v12, v6);
  v20 = enum case for ColorScheme.light(_:);
  if (v19 == enum case for ColorScheme.light(_:))
  {
    v21 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CloseButtonView(0) + 20));
    swift_retain(v21);
  }
  else
  {
    v22 = v19;
    v23 = enum case for ColorScheme.dark(_:);
    v24 = type metadata accessor for CloseButtonView(0);
    if (v22 == v23)
    {
      v21 = *(_QWORD *)(v1 + *(int *)(v24 + 24));
      swift_retain(v21);
    }
    else
    {
      v21 = *(_QWORD *)(v1 + *(int *)(v24 + 20));
      v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      swift_retain(v21);
      v25(v12, v6);
    }
  }
  sub_100033094((uint64_t)v10);
  v26 = v18(v10, v6);
  if (v26 == v20)
  {
    v27 = *(int *)(type metadata accessor for CloseButtonView(0) + 28);
  }
  else
  {
    v28 = v26;
    v29 = enum case for ColorScheme.dark(_:);
    v30 = type metadata accessor for CloseButtonView(0);
    if (v28 != v29)
    {
      v31 = *(_QWORD *)(v1 + *(int *)(v30 + 28));
      v32 = *(void (**)(char *, uint64_t))(v36 + 8);
      swift_retain(v31);
      v32(v10, v6);
      goto LABEL_12;
    }
    v27 = *(int *)(v30 + 32);
  }
  v31 = *(_QWORD *)(v1 + v27);
  swift_retain(v31);
LABEL_12:
  v33 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v5, 1, 1, v33);
  v34 = static Font.system(size:weight:design:)(0, 1, v5, 30.0);
  sub_100017AB4((uint64_t)v5, &qword_1000C8070);
  result = swift_getKeyPath(&unk_100083238);
  *a1 = v37;
  a1[1] = v21;
  a1[2] = v31;
  a1[3] = result;
  a1[4] = v34;
  return result;
}

uint64_t sub_100032884()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000328A4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1000328C4(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ColorScheme(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.colorScheme.setter(v3);
}

uint64_t type metadata accessor for CloseButtonView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000C84F0;
  if (!qword_1000C84F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloseButtonView);
  return result;
}

uint64_t *sub_100032980(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_100004B18(&qword_1000C7180);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3[6];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v16;
    v17 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + v15) = v17;
    v18 = a3[7];
    v19 = a3[8];
    v20 = *(uint64_t *)((char *)a2 + v18);
    *(uint64_t *)((char *)v4 + v18) = v20;
    v12 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)v4 + v19) = v12;
    swift_retain(v16);
    swift_retain(v17);
    swift_retain(v20);
  }
  swift_retain(v12);
  return v4;
}

double sub_100032A8C(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = sub_100004B18(&qword_1000C7180);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[5]));
  swift_release(*(_QWORD *)((char *)a1 + a2[6]));
  swift_release(*(_QWORD *)((char *)a1 + a2[7]));
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[8])).n128_u64[0];
  return result;
}

uint64_t *sub_100032B20(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_100004B18(&qword_1000C7180);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a3[6];
  v14 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v14;
  v15 = *(uint64_t *)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = v15;
  v16 = a3[7];
  v17 = a3[8];
  v18 = *(uint64_t *)((char *)a2 + v16);
  *(uint64_t *)((char *)a1 + v16) = v18;
  v19 = *(uint64_t *)((char *)a2 + v17);
  *(uint64_t *)((char *)a1 + v17) = v19;
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v18);
  swift_retain(v19);
  return a1;
}

uint64_t *sub_100032C04(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_100017AB4((uint64_t)a1, &qword_1000C7180);
    v6 = sub_100004B18(&qword_1000C7180);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = *(uint64_t *)((char *)a2 + v12);
  v14 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = a3[6];
  v16 = *(uint64_t *)((char *)a2 + v15);
  v17 = *(uint64_t *)((char *)a1 + v15);
  *(uint64_t *)((char *)a1 + v15) = v16;
  swift_retain(v16);
  swift_release(v17);
  v18 = a3[7];
  v19 = *(uint64_t *)((char *)a2 + v18);
  v20 = *(uint64_t *)((char *)a1 + v18);
  *(uint64_t *)((char *)a1 + v18) = v19;
  swift_retain(v19);
  swift_release(v20);
  v21 = a3[8];
  v22 = *(uint64_t *)((char *)a2 + v21);
  v23 = *(uint64_t *)((char *)a1 + v21);
  *(uint64_t *)((char *)a1 + v21) = v22;
  swift_retain(v22);
  swift_release(v23);
  return a1;
}

char *sub_100032D2C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_100004B18(&qword_1000C7180);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  v9 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  return a1;
}

char *sub_100032DF0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_100017AB4((uint64_t)a1, &qword_1000C7180);
    v6 = sub_100004B18(&qword_1000C7180);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_release(v9);
  v10 = a3[6];
  v11 = *(_QWORD *)&a1[v10];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  swift_release(v11);
  v12 = a3[7];
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_release(v13);
  v14 = a3[8];
  v15 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_release(v15);
  return a1;
}

uint64_t sub_100032EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100032F00);
}

uint64_t sub_100032F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004B18(&qword_1000C7188);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100032F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100032F8C);
}

uint64_t sub_100032F8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004B18(&qword_1000C7188);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void sub_100033008(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_100018A0C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_100033084(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100097414, 1);
}

uint64_t sub_100033094@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000C7180);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100033784(v2, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = type metadata accessor for ColorScheme(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = *v10;
    v14 = static os_log_type_t.fault.getter();
    v15 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v15, v14))
    {
      v16 = swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v19 = v17;
      *(_DWORD *)v16 = 136315138;
      *(_QWORD *)(v16 + 4) = sub_1000332A0((char *)0x686353726F6C6F43, (char *)0xEB00000000656D65, &v19);
      _os_log_impl((void *)&_mh_execute_header, v15, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, v13);
    swift_release(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

char *sub_1000332A0(char *a1, char *a2, uint64_t *a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12[3];
  void *ObjectType;

  v6 = sub_100033370(v12, 0, 0, 1, (uint64_t)a1, (unint64_t)a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000ABEC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000ABEC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10000697C(v12);
  return v7;
}

char *sub_100033370(char **a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  char *result;
  uint64_t v10;
  char *v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          result = 0;
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (char *)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_10003346C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    result = (char *)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    result = (char *)_StringObject.sharedUTF8.getter(a5, a6);
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (char *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

char *sub_10003346C(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_100033500(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000335FC(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_1000335FC((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_100033500(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100033598(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100033598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100004B18(&qword_1000C8540);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1000335FC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000C8540);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1000336E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10003370C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100033734(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10003375C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100033784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C7180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000337D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8548;
  if (!qword_1000C8548)
  {
    v1 = sub_100005F48(&qword_1000C8550);
    sub_100033858();
    sub_10000AAFC(&qword_1000C8578, &qword_1000C8580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C8548);
  }
  return result;
}

unint64_t sub_100033858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8558;
  if (!qword_1000C8558)
  {
    v1 = sub_100005F48(&qword_1000C8560);
    sub_10000AAFC(&qword_1000C8568, &qword_1000C8570, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C8558);
  }
  return result;
}

uint64_t destroy for SchematicHandoffAnimationView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));

  swift_release(*(_QWORD *)(a1 + 48));
  return swift_release(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v5 = *(void **)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  v7 = v5;
  swift_retain(v4);
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = v7;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v10);
  swift_release(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_retain(v12);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);

  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematicHandoffAnimationView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematicHandoffAnimationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchematicHandoffAnimationView()
{
  return &type metadata for SchematicHandoffAnimationView;
}

_QWORD *sub_100033B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[480];
  _QWORD __src[60];
  _OWORD v31[38];

  v6 = static Alignment.top.getter(a1);
  v8 = v7;
  sub_100033D6C((unsigned __int8 *)a2, a1, __src);
  v9 = memcpy(v29, __src, sizeof(v29));
  v27 = v6;
  v28 = v8;
  v10 = static Alignment.center.getter(v9);
  sub_10002484C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v31, 0.0, 1, INFINITY, 0, v10, v11);
  sub_1000348C8(__src);
  v12 = static Animation.linear(duration:)(1.0);
  v13 = *(_DWORD *)(a2 + 32);
  v14 = sub_10003445C();
  v15 = *(_BYTE *)a2;
  v16 = sub_10003445C();
  v17 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(&v26, v17);
  v18 = v26;
  v19 = swift_allocObject(&unk_1000B5828, 88, 7);
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v19 + 64) = v20;
  *(_QWORD *)(v19 + 80) = *(_QWORD *)(a2 + 64);
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v19 + 32) = v21;
  v22 = swift_allocObject(&unk_1000B5850, 88, 7);
  v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v22 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v22 + 64) = v23;
  *(_QWORD *)(v22 + 80) = *(_QWORD *)(a2 + 64);
  v24 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v22 + 32) = v24;
  memcpy((void *)a3, v31, 0x260uLL);
  *(_QWORD *)(a3 + 608) = v12;
  *(_DWORD *)(a3 + 616) = v13;
  *(_QWORD *)(a3 + 624) = v14;
  *(_BYTE *)(a3 + 632) = v15;
  *(_QWORD *)(a3 + 640) = v16;
  *(_BYTE *)(a3 + 648) = v18;
  *(_QWORD *)(a3 + 656) = sub_100034914;
  *(_QWORD *)(a3 + 664) = v19;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_DWORD *)(a3 + 688) = v13;
  *(_QWORD *)(a3 + 696) = sub_100034920;
  *(_QWORD *)(a3 + 704) = v22;
  sub_10001C41C((_QWORD *)a2);
  return sub_10001C41C((_QWORD *)a2);
}

uint64_t sub_100033D6C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **, float);
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  _BOOL4 v70;
  void *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  _BYTE v83[7];
  _BYTE v84[7];
  _BYTE v85[7];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  _BYTE v96[24];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  _BYTE v108[24];
  _OWORD v109[30];
  _QWORD v110[3];
  char v111;
  _DWORD v112[3];
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  double v121;
  char v122;
  _BYTE v123[7];
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  __int128 v130;
  _QWORD v131[3];
  float v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  _BYTE v142[7];
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  __int128 v149;
  _QWORD v150[3];
  ValueMetadata *v151;
  _UNKNOWN **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  double v159[8];

  v81 = a2;
  v71 = a3;
  v4 = type metadata accessor for Color.RGBColorSpace(0);
  v78 = *(double *)(v4 - 8);
  v79 = v4;
  __chkstk_darwin(v4);
  *(_QWORD *)&v80 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v6 = *(_QWORD *)(qword_1000DF570 + 264);
  swift_retain(v6);
  v7 = sub_100020AA8();
  swift_release(v6);
  if ((v7 & 1) != 0)
    v8 = &type metadata for PerspectiveViewEffectProvider;
  else
    v8 = &type metadata for RegularViewEffectProvider;
  if ((v7 & 1) != 0)
    v9 = &off_1000B5958;
  else
    v9 = &off_1000B5970;
  v151 = v8;
  v152 = v9;
  v150[0] = 0x3FB999999999999ALL;
  sub_100006914(v150, (uint64_t)v8);
  v10 = *a1;
  if (v10 == 2)
  {
    v11 = 2;
  }
  else
  {
    v109[0] = *(_OWORD *)(a1 + 56);
    v12 = sub_100004B18(&qword_1000C7598);
    State.wrappedValue.getter(v110, v12);
    v11 = (v110[0] & 1) == 0;
  }
  v13 = *((float *)a1 + 8);
  v14 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **, float))sub_100034928;
  if ((v7 & 1) == 0)
    v14 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **, float))sub_100034B3C;
  v14(&v153, v11, v81, v8, v9, *((float *)a1 + 8));
  v15 = (uint64_t)v151;
  v16 = v152;
  sub_100006914(v150, (uint64_t)v151);
  if (v10 == 2)
  {
    v17 = 2;
  }
  else
  {
    v109[0] = *(_OWORD *)(a1 + 56);
    v18 = sub_100004B18(&qword_1000C7598);
    State.wrappedValue.getter(v110, v18);
    v17 = (v110[0] & 1) == 0;
  }
  v70 = v10 == 2;
  v19 = ((_QWORD *(*)(double *__return_ptr, uint64_t, uint64_t, uint64_t, _UNKNOWN **, float))v16[2])(v159, v17, v81, v15, v16, v13);
  v82 = GeometryProxy.size.getter(v19) * 0.4;
  v69 = GeometryProxy.size.getter(v20) * 0.3;
  v61 = *((_QWORD *)a1 + 1);
  v21 = v61;
  v22 = v80;
  (*(void (**)(double, _QWORD, uint64_t))(*(_QWORD *)&v78 + 104))(COERCE_DOUBLE(*(_QWORD *)&v80), enum case for Color.RGBColorSpace.sRGB(_:), v79);
  v23 = Color.init(_:red:green:blue:opacity:)(*(_QWORD *)&v22, 1.0, 1.0, 1.0, 1.0);
  v24 = v154;
  v81 = v153;
  v25 = v155;
  v59 = v155;
  v60 = v154;
  v73 = v156;
  v26 = v23;
  v27 = swift_retain(v23);
  v28 = static UnitPoint.center.getter(v27);
  v57 = v29;
  v58 = v28;
  v30 = v29;
  v31 = v157;
  v56 = v157;
  v80 = v158 * 0.0174532925;
  v78 = static UnitPoint.center.getter(v32);
  v79 = v33;
  v55 = v26;
  swift_release(v26);
  v34 = *((_QWORD *)a1 + 3);
  v68 = *((_QWORD *)a1 + 2);
  LODWORD(v110[0]) = 1065353216;
  swift_bridgeObjectRetain(v34);
  State.init(wrappedValue:)(v110, &type metadata for Float);
  v35 = v109[0];
  v36 = *((_QWORD *)&v109[0] + 1);
  v66 = v159[1];
  v67 = v159[0];
  v64 = v159[3];
  v65 = v159[2];
  swift_retain(*((_QWORD *)&v109[0] + 1));
  v37 = swift_bridgeObjectRetain(v34);
  v54 = static UnitPoint.center.getter(v37);
  v63 = v38;
  v62 = v13;
  v76 = v159[5] * 0.0174532925;
  v77 = v159[4];
  v40 = static UnitPoint.center.getter(v39);
  v74 = v41;
  v75 = v40;
  swift_release(v36);
  v42 = swift_bridgeObjectRelease(v34);
  v43 = static Alignment.center.getter(v42);
  sub_1000249F4(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v109[22], 0.0, 1, INFINITY, 0, v43, v44, 0, 1);
  *(double *)&v86 = v82;
  *((_QWORD *)&v86 + 1) = v21;
  *(_QWORD *)&v87 = v26;
  *((float *)&v87 + 2) = v13;
  *(_QWORD *)&v88 = v81;
  *((_QWORD *)&v88 + 1) = v24;
  *(_QWORD *)&v89 = v25;
  *((_QWORD *)&v89 + 1) = v73;
  *(_QWORD *)&v90 = v73;
  *((double *)&v90 + 1) = v28;
  *(_QWORD *)&v91 = v30;
  *((_QWORD *)&v91 + 1) = v31;
  LOBYTE(v92) = 0;
  DWORD1(v92) = *(_DWORD *)&v83[3];
  *(_DWORD *)((char *)&v92 + 1) = *(_DWORD *)v83;
  *((double *)&v92 + 1) = v80;
  v109[2] = v88;
  v109[1] = v87;
  v109[0] = v86;
  v109[5] = v91;
  v109[6] = v92;
  HIDWORD(v98) = *(_DWORD *)&v85[3];
  *(_DWORD *)((char *)&v98 + 9) = *(_DWORD *)v85;
  *(_DWORD *)((char *)&v104 + 1) = *(_DWORD *)v84;
  DWORD1(v104) = *(_DWORD *)&v84[3];
  v94 = 0;
  *(_QWORD *)&v95 = 0;
  v93 = 0x3FF0000000000000;
  *((double *)&v95 + 1) = v78;
  *(_QWORD *)v96 = v79;
  *(_OWORD *)&v96[8] = xmmword_1000819D0;
  v72 = xmmword_1000819D0;
  v45 = v69;
  *(double *)&v97 = v69;
  v46 = v68;
  *((_QWORD *)&v97 + 1) = v68;
  *(_QWORD *)&v98 = v34;
  LOBYTE(v21) = v70;
  BYTE8(v98) = v70;
  LODWORD(v28) = v35;
  LODWORD(v99) = v35;
  *((_QWORD *)&v99 + 1) = v36;
  v48 = v66;
  v47 = v67;
  *(double *)&v100 = v67;
  *((double *)&v100 + 1) = v66;
  v49 = *(_QWORD *)&v64;
  v50 = v65;
  *(double *)&v101 = v65;
  *((double *)&v101 + 1) = v64;
  v51 = v54;
  *(double *)&v102 = v64;
  *((double *)&v102 + 1) = v54;
  v52 = v63;
  *(_QWORD *)&v103 = v63;
  *((double *)&v103 + 1) = v77;
  LOBYTE(v104) = 0;
  *((double *)&v104 + 1) = v76;
  v105 = 0x3FF0000000000000;
  v106 = 0;
  *(_QWORD *)&v107 = 0;
  *((double *)&v107 + 1) = v75;
  *(_QWORD *)v108 = v74;
  *(_OWORD *)&v108[8] = xmmword_1000819D0;
  v109[3] = v89;
  v109[4] = v90;
  v109[8] = v95;
  v109[9] = *(_OWORD *)v96;
  v109[7] = 0x3FF0000000000000uLL;
  *(_OWORD *)((char *)&v109[18] + 8) = 0x3FF0000000000000uLL;
  *(_OWORD *)((char *)&v109[19] + 8) = v107;
  *(_OWORD *)((char *)&v109[20] + 8) = *(_OWORD *)v108;
  *(_OWORD *)((char *)&v109[16] + 8) = v103;
  *(_OWORD *)((char *)&v109[17] + 8) = v104;
  *(_OWORD *)((char *)&v109[14] + 8) = v101;
  *(_OWORD *)((char *)&v109[15] + 8) = v102;
  *(_OWORD *)((char *)&v109[10] + 8) = v97;
  *(_OWORD *)((char *)&v109[11] + 8) = v98;
  *(_OWORD *)((char *)&v109[12] + 8) = v99;
  v112[0] = *(_DWORD *)v85;
  *(_DWORD *)((char *)v112 + 3) = *(_DWORD *)&v85[3];
  *(_DWORD *)v123 = *(_DWORD *)v84;
  *(_DWORD *)&v123[3] = *(_DWORD *)&v84[3];
  *(_QWORD *)&v109[10] = 0x3FE0000000000000;
  *((_QWORD *)&v109[21] + 1) = 0x3FE0000000000000;
  *(_OWORD *)((char *)&v109[13] + 8) = v100;
  memcpy(v71, v109, 0x1E0uLL);
  *(double *)v110 = v45;
  v110[1] = v46;
  v110[2] = v34;
  v111 = v21;
  *(_DWORD *)((char *)&v112[1] + 3) = LODWORD(v28);
  v113 = v36;
  v114 = v47;
  v115 = v48;
  v116 = v50;
  v117 = v49;
  v118 = v49;
  v119 = v51;
  v120 = v52;
  v121 = v77;
  v122 = 0;
  v124 = v76;
  v126 = 0;
  v127 = 0;
  v125 = 0x3FF0000000000000;
  v128 = v75;
  v129 = v74;
  v130 = v72;
  sub_100034D2C((uint64_t)&v86);
  sub_100034D54((uint64_t)&v97);
  sub_100034D88((uint64_t)v110);
  *(double *)v131 = v82;
  v131[1] = v61;
  v131[2] = v55;
  v132 = v62;
  v133 = v81;
  v134 = v60;
  v135 = v59;
  v136 = v73;
  v137 = v73;
  v138 = v58;
  v139 = v57;
  v140 = v56;
  v141 = 0;
  *(_DWORD *)v142 = *(_DWORD *)v83;
  *(_DWORD *)&v142[3] = *(_DWORD *)&v83[3];
  v143 = v80;
  v144 = 0x3FF0000000000000;
  v145 = 0;
  v146 = 0;
  v147 = v78;
  v148 = v79;
  v149 = v72;
  sub_100034DBC((uint64_t)v131);
  return sub_10000697C(v150);
}

uint64_t sub_10003445C()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v0 = *(_QWORD *)(qword_1000DF570 + 168);
  swift_retain(v0);
  v1 = sub_10002377C();
  swift_release(v0);
  v2 = *(_QWORD *)(qword_1000DF570 + 176);
  swift_retain(v2);
  v3 = sub_10002377C();
  swift_release(v2);
  v4 = *(_QWORD *)(qword_1000DF570 + 184);
  swift_retain(v4);
  v5 = sub_10002377C();
  swift_release(v4);
  v6 = *(_QWORD *)(qword_1000DF570 + 192);
  swift_retain(v6);
  v7 = sub_10002377C();
  swift_release(v6);
  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(v1, v3, v5, v7);
}

void sub_100034540(uint64_t a1)
{
  uint64_t v2;
  char v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  __int128 aBlock;
  void (*v14)(uint64_t, void *);
  void *v15;
  void (*v16)(uint64_t);
  uint64_t v17;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v2 = *(_QWORD *)(qword_1000DF570 + 272);
  swift_retain(v2);
  v3 = sub_100020AA8();
  swift_release(v2);
  if ((v3 & 1) != 0)
  {
    v4 = (void *)objc_opt_self(NSTimer);
    v5 = swift_allocObject(&unk_1000B5878, 88, 7);
    v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v5 + 64) = v6;
    *(_QWORD *)(v5 + 80) = *(_QWORD *)(a1 + 64);
    v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v5 + 32) = v7;
    v16 = sub_100034C84;
    v17 = v5;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v14 = sub_1000486E8;
    v15 = &unk_1000B5890;
    v8 = _Block_copy(&aBlock);
    v9 = v17;
    sub_10001C41C((_QWORD *)a1);
    swift_release(v9);
    v10 = objc_msgSend(v4, "scheduledTimerWithTimeInterval:repeats:block:", 0, v8, 1.0);
    _Block_release(v8);
    aBlock = *(_OWORD *)(a1 + 40);
    v12 = v10;
    v11 = sub_100004B18(&qword_1000C8588);
    State.wrappedValue.setter(&v12, v11);
  }
}

void sub_1000346A8(float *a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  __int128 v4;
  id v5;

  if (*a1 > 0.5)
  {
    v4 = *(_OWORD *)(a2 + 40);
    v2 = sub_100004B18(&qword_1000C8588);
    State.wrappedValue.getter(&v5, v2);
    v3 = v5;
    objc_msgSend(v5, "invalidate", v4);

  }
}

void sub_100034710(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  uint64_t v9;
  id v10;
  __int128 v11;
  void (*v12)(uint64_t, void *);
  void *v13;
  uint64_t (*v14)();
  uint64_t v15;
  char v16;

  v11 = *(_OWORD *)(a2 + 56);
  v16 = 1;
  v3 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.setter(&v16, v3);
  v4 = (void *)objc_opt_self(NSTimer);
  v5 = swift_allocObject(&unk_1000B58C8, 88, 7);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 32) = v7;
  v14 = sub_100034CE4;
  v15 = v5;
  *(_QWORD *)&v11 = _NSConcreteStackBlock;
  *((_QWORD *)&v11 + 1) = 1107296256;
  v12 = sub_1000486E8;
  v13 = &unk_1000B58E0;
  v8 = _Block_copy(&v11);
  v9 = v15;
  sub_10001C41C((_QWORD *)a2);
  swift_release(v9);
  v10 = objc_msgSend(v4, "scheduledTimerWithTimeInterval:repeats:block:", 0, v8, 2.0);
  _Block_release(v8);

}

_QWORD *sub_100034830@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  uint64_t v10;

  v3 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v3;
  v10 = *(_QWORD *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v4;
  v5 = swift_allocObject(&unk_1000B5800, 88, 7);
  v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  *a1 = sub_1000348C0;
  a1[1] = v5;
  return sub_10001C41C(v9);
}

uint64_t sub_1000348AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000974B8, 1);
}

_QWORD *sub_1000348C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100033B84(a1, v2 + 16, a2);
}

_QWORD *sub_1000348C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[26];
  swift_bridgeObjectRelease(a1[23]);
  swift_release(v2);
  swift_release(v3);
  return a1;
}

void sub_100034914()
{
  uint64_t v0;

  sub_100034540(v0 + 16);
}

void sub_100034920(float *a1)
{
  uint64_t v1;

  sub_1000346A8(a1, v1 + 16);
}

void sub_100034928(char a1@<W0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  double *v3;
  double v7;
  double v8;
  float64x2_t v9;
  int64x2_t v10;
  float64x2_t v11;
  double v12;
  float64x2_t v13[3];
  __int128 v14;
  double v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v7 = *v3;
  GeometryProxy.size.getter();
  v9 = (float64x2_t)xmmword_100083290;
  if (a1)
  {
    if (a1 == 1)
    {
      v19 = 0;
      v20 = 0;
      v17 = 0;
      v18 = 0x3FF0000000000000;
      v21 = xmmword_1000832B0;
      v22 = 0;
      v14 = xmmword_100083290;
      v15 = v7 * v8;
      v16 = xmmword_1000832C0;
      sub_10000B64C((float64x2_t *)&v14, v13, a3);
      v9 = v13[0];
      v10 = (int64x2_t)v13[1];
      v11 = v13[2];
    }
    else
    {
      v12 = v7 * v8;
      v10 = vdupq_lane_s64(0x3FF2666666666666, 0);
      *(double *)v10.i64 = v12;
      v11 = (float64x2_t)xmmword_1000832A0;
    }
  }
  else
  {
    v10 = (int64x2_t)xmmword_100083280;
    v11 = 0uLL;
  }
  *a2 = v9;
  a2[1] = (float64x2_t)v10;
  a2[2] = v11;
}

void sub_100034A18(uint64_t a1@<X0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  double *v3;
  char v5;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v12;
  double v13;
  float64x2_t v18[3];
  __int128 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a1;
  v7 = *v3;
  GeometryProxy.size.getter(a1);
  v9 = v8 * 0.15;
  v10 = (float64x2_t)xmmword_100083290;
  if (v5)
  {
    if (v5 == 1)
    {
      v24 = xmmword_100083290;
      v25 = v9 + v8 * 0.35;
      v27 = 0;
      v28 = 0;
      v26 = 0x3FECCCCCCCCCCCCDLL;
      v19 = xmmword_100083290;
      v20 = v9 + (v7 + 0.05) * v8;
      v22 = 0;
      v23 = 0;
      v21 = 0x3FECCCCCCCCCCCCDLL;
      sub_10000B64C((float64x2_t *)&v19, v18, a3);
      v10 = v18[0];
      _Q1 = (int64x2_t)v18[1];
      v12 = v18[2];
    }
    else
    {
      v13 = v9 + v7 * v8;
      __asm { FMOV            V1.2D, #1.0 }
      *(double *)_Q1.i64 = v13;
      v12 = 0uLL;
    }
  }
  else
  {
    _Q1 = vdupq_lane_s64(0x3FE6666666666666, 0);
    *(double *)_Q1.i64 = v9;
    v12 = (float64x2_t)xmmword_1000832D0;
  }
  *a2 = v10;
  a2[1] = (float64x2_t)_Q1;
  a2[2] = v12;
}

double sub_100034B3C@<D0>(uint64_t a1@<X8>)
{
  double *v1;
  double v3;
  double result;
  double v5;

  v3 = *v1;
  GeometryProxy.size.getter();
  result = 1.0;
  *(_OWORD *)a1 = xmmword_100083290;
  *(double *)(a1 + 16) = v3 * v5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0x3FF0000000000000;
  return result;
}

void sub_100034B8C(uint64_t a1@<X0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  double *v3;
  char v5;
  double v7;
  double v8;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16[3];
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a1;
  v7 = *v3;
  GeometryProxy.size.getter(a1);
  __asm { FMOV            V0.2D, #1.0 }
  v14 = (float64x2_t)xmmword_100083290;
  v15 = 0uLL;
  if (v5)
  {
    if (v5 == 1)
    {
      v22 = xmmword_100083290;
      v23 = v8 * 0.9;
      v25 = 0;
      v26 = 0;
      v24 = 0x3FF0000000000000;
      v17 = xmmword_100083290;
      v18 = (v7 + 0.15) * v8;
      v20 = 0;
      v21 = 0;
      v19 = 0x3FF0000000000000;
      sub_10000B64C((float64x2_t *)&v17, v16, a3);
      v14 = v16[0];
      _Q0 = v16[1];
      v15 = v16[2];
    }
    else
    {
      _Q0.f64[0] = (v7 + 0.15) * v8;
    }
  }
  else
  {
    _Q0.f64[0] = (v7 + 0.15) * v8 + v8 * 0.1;
  }
  *a2 = v14;
  a2[1] = _Q0;
  a2[2] = v15;
}

void sub_100034C84(uint64_t a1)
{
  uint64_t v1;

  sub_100034710(a1, v1 + 16);
}

uint64_t sub_100034C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100034C9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100034CA8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100034CE4()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 72);
  v3 = 0;
  v1 = sub_100004B18(&qword_1000C7598);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_100034D2C(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_100034D54(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_retain(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_100034D88(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_release(v2);
  return a1;
}

uint64_t sub_100034DBC(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 16));
  return a1;
}

ValueMetadata *type metadata accessor for PerspectiveViewEffectProvider()
{
  return &type metadata for PerspectiveViewEffectProvider;
}

ValueMetadata *type metadata accessor for RegularViewEffectProvider()
{
  return &type metadata for RegularViewEffectProvider;
}

unint64_t sub_100034E08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C8590;
  if (!qword_1000C8590)
  {
    v1 = sub_100005F48(&qword_1000C8598);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C8590);
  }
  return result;
}

char *sub_100034E5C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  id v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *__dst;
  uint64_t v79;
  void *v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) == 0)
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 4);
        v8 = (void *)*((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 4) = v9;
        *((_QWORD *)a1 + 5) = v8;
        v10 = type metadata accessor for ActivityDisplayContext(0);
        v11 = *(int *)(v10 + 32);
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
        swift_bridgeObjectRetain(v9);
        v15 = v8;
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
        if (EnumCaseMultiPayload == 2)
        {
          v80 = (void *)v10;
          v83 = v14;
          v30 = *((_QWORD *)v13 + 1);
          *(_QWORD *)v12 = *(_QWORD *)v13;
          *((_QWORD *)v12 + 1) = v30;
          v31 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          v32 = &v12[v31];
          v33 = &v13[v31];
          v34 = type metadata accessor for Date(0);
          v35 = *(_QWORD *)(v34 - 8);
          v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
          swift_bridgeObjectRetain(v30);
          if (v36(v33, 1, v34))
          {
            v37 = sub_100004B18(&qword_1000C85A0);
            memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          }
          v14 = v83;
          swift_storeEnumTagMultiPayload(v12, v83, 2);
          v10 = (uint64_t)v80;
        }
        else
        {
          if (EnumCaseMultiPayload == 1)
          {
            v81 = (void *)v10;
            v84 = v14;
            v38 = *((_QWORD *)v13 + 1);
            *(_QWORD *)v12 = *(_QWORD *)v13;
            *((_QWORD *)v12 + 1) = v38;
            v39 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
            v40 = *(int *)(v39 + 20);
            __dst = &v12[v40];
            v79 = v39;
            v41 = &v13[v40];
            v42 = type metadata accessor for Date(0);
            v43 = *(_QWORD *)(v42 - 8);
            v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
            swift_bridgeObjectRetain(v38);
            if (v44(v41, 1, v42))
            {
              v45 = sub_100004B18(&qword_1000C85A0);
              memcpy(__dst, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v43 + 16))(__dst, v41, v42);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v42);
            }
            v10 = (uint64_t)v81;
            v46 = *(int *)(v79 + 24);
            v47 = &v12[v46];
            v48 = &v13[v46];
            v49 = *((_QWORD *)v48 + 1);
            *(_QWORD *)v47 = *(_QWORD *)v48;
            *((_QWORD *)v47 + 1) = v49;
            swift_bridgeObjectRetain(v49);
            v18 = v12;
            v14 = v84;
            v19 = v84;
            v20 = 1;
          }
          else
          {
            if (EnumCaseMultiPayload)
            {
              memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
              goto LABEL_27;
            }
            v17 = *((_QWORD *)v13 + 1);
            *(_QWORD *)v12 = *(_QWORD *)v13;
            *((_QWORD *)v12 + 1) = v17;
            swift_bridgeObjectRetain(v17);
            v18 = v12;
            v19 = v14;
            v20 = 0;
          }
          swift_storeEnumTagMultiPayload(v18, v19, v20);
        }
LABEL_27:
        v50 = *(int *)(v10 + 36);
        v51 = &a1[v50];
        v52 = &a2[v50];
        v53 = swift_getEnumCaseMultiPayload(v52, v14);
        if (v53 == 2)
        {
          v58 = *((_QWORD *)v52 + 1);
          *(_QWORD *)v51 = *(_QWORD *)v52;
          *((_QWORD *)v51 + 1) = v58;
          v59 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          v60 = &v51[v59];
          v61 = &v52[v59];
          v62 = type metadata accessor for Date(0);
          v63 = *(_QWORD *)(v62 - 8);
          v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
          swift_bridgeObjectRetain(v58);
          if (v64(v61, 1, v62))
          {
            v65 = sub_100004B18(&qword_1000C85A0);
            memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
          }
          v55 = v51;
          v56 = v14;
          v57 = 2;
        }
        else if (v53 == 1)
        {
          v85 = v14;
          v66 = *((_QWORD *)v52 + 1);
          *(_QWORD *)v51 = *(_QWORD *)v52;
          *((_QWORD *)v51 + 1) = v66;
          v67 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          v68 = *(int *)(v67 + 20);
          v82 = &v51[v68];
          v69 = &v52[v68];
          v70 = type metadata accessor for Date(0);
          v71 = *(_QWORD *)(v70 - 8);
          v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48);
          swift_bridgeObjectRetain(v66);
          if (v72(v69, 1, v70))
          {
            v73 = sub_100004B18(&qword_1000C85A0);
            memcpy(v82, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v82, v69, v70);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v82, 0, 1, v70);
          }
          v74 = *(int *)(v67 + 24);
          v75 = &v51[v74];
          v76 = &v52[v74];
          v77 = *((_QWORD *)v76 + 1);
          *(_QWORD *)v75 = *(_QWORD *)v76;
          *((_QWORD *)v75 + 1) = v77;
          swift_bridgeObjectRetain(v77);
          v55 = v51;
          v56 = v85;
          v57 = 1;
        }
        else
        {
          if (v53)
          {
            memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
LABEL_41:
            swift_storeEnumTagMultiPayload(a1, a3, 0);
            return a1;
          }
          v54 = *((_QWORD *)v52 + 1);
          *(_QWORD *)v51 = *(_QWORD *)v52;
          *((_QWORD *)v51 + 1) = v54;
          swift_bridgeObjectRetain(v54);
          v55 = v51;
          v56 = v14;
          v57 = 0;
        }
        swift_storeEnumTagMultiPayload(v55, v56, v57);
        goto LABEL_41;
      case 2u:
        v23 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v23;
        swift_bridgeObjectRetain(v23);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        return a1;
      case 3u:
        v24 = *(void **)a2;
        if (*(_QWORD *)a2 == 1)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          v28 = *((_QWORD *)a2 + 1);
          *(_QWORD *)a1 = v24;
          *((_QWORD *)a1 + 1) = v28;
          v29 = v24;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        return a1;
      case 4u:
        v25 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v26 = v25;
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        return a1;
      case 6u:
        v27 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v27);
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        return a1;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
    }
  }
  v21 = *(_QWORD *)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1 = (char *)(v21 + ((v6 + 16) & ~(unint64_t)v6));
  swift_retain(v21);
  return a1;
}

void sub_1000353E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + 32));

      v3 = type metadata accessor for ActivityDisplayContext(0);
      v4 = v2 + *(int *)(v3 + 32);
      v5 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
      if (EnumCaseMultiPayload == 2)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
        v10 = v4 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        v11 = type metadata accessor for Date(0);
        v12 = *(_QWORD *)(v11 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
          v13 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          v14 = v4 + *(int *)(v13 + 20);
          v15 = type metadata accessor for Date(0);
          v16 = *(_QWORD *)(v15 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
            (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
          v7 = *(_QWORD *)(v4 + *(int *)(v13 + 24) + 8);
        }
        else
        {
          if (EnumCaseMultiPayload)
            goto LABEL_17;
          v7 = *(_QWORD *)(v4 + 8);
        }
        swift_bridgeObjectRelease(v7);
      }
LABEL_17:
      v2 += *(int *)(v3 + 36);
      v17 = swift_getEnumCaseMultiPayload(v2, v5);
      switch(v17)
      {
        case 2:
          swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
          v18 = v2 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          v19 = type metadata accessor for Date(0);
          v20 = *(_QWORD *)(v19 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
            (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
          break;
        case 1:
          swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
          v21 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          v22 = v2 + *(int *)(v21 + 20);
          v23 = type metadata accessor for Date(0);
          v24 = *(_QWORD *)(v23 - 8);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
            (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
          v9 = *(void **)(v2 + *(int *)(v21 + 24) + 8);
          goto LABEL_21;
        case 0:
          goto LABEL_20;
      }
      return;
    case 2u:
LABEL_20:
      v9 = *(void **)(v2 + 8);
      goto LABEL_21;
    case 3u:
      v8 = *(void **)v2;
      if (*(_QWORD *)v2 == 1)
        return;
      goto LABEL_9;
    case 4u:
      v8 = *(void **)v2;
LABEL_9:

      return;
    case 6u:
      v9 = *(void **)v2;
LABEL_21:
      swift_bridgeObjectRelease(v9);
      return;
    default:
      return;
  }
}

char *sub_10003568C(char *a1, char *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *__dst;
  uint64_t v79;
  void *v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = a2[8];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 4);
      v6 = (void *)*((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 4) = v7;
      *((_QWORD *)a1 + 5) = v6;
      v8 = type metadata accessor for ActivityDisplayContext(0);
      v9 = *(int *)(v8 + 32);
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      swift_bridgeObjectRetain(v7);
      v13 = v6;
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
      if (EnumCaseMultiPayload == 2)
      {
        v80 = (void *)v8;
        v83 = v12;
        v29 = *((_QWORD *)v11 + 1);
        *(_QWORD *)v10 = *(_QWORD *)v11;
        *((_QWORD *)v10 + 1) = v29;
        v30 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        v31 = &v10[v30];
        v32 = &v11[v30];
        v33 = type metadata accessor for Date(0);
        v34 = *(_QWORD *)(v33 - 8);
        v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
        swift_bridgeObjectRetain(v29);
        if (v35(v32, 1, v33))
        {
          v36 = sub_100004B18(&qword_1000C85A0);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        }
        v12 = v83;
        swift_storeEnumTagMultiPayload(v10, v83, 2);
        v8 = (uint64_t)v80;
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          v81 = (void *)v8;
          v84 = v12;
          v37 = *((_QWORD *)v11 + 1);
          *(_QWORD *)v10 = *(_QWORD *)v11;
          *((_QWORD *)v10 + 1) = v37;
          v38 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          v39 = *(int *)(v38 + 20);
          __dst = &v10[v39];
          v79 = v38;
          v40 = &v11[v39];
          v41 = type metadata accessor for Date(0);
          v42 = *(_QWORD *)(v41 - 8);
          v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
          swift_bridgeObjectRetain(v37);
          if (v43(v40, 1, v41))
          {
            v44 = sub_100004B18(&qword_1000C85A0);
            memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dst, v40, v41);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v41);
          }
          v8 = (uint64_t)v81;
          v45 = *(int *)(v79 + 24);
          v46 = &v10[v45];
          v47 = &v11[v45];
          v48 = *((_QWORD *)v47 + 1);
          *(_QWORD *)v46 = *(_QWORD *)v47;
          *((_QWORD *)v46 + 1) = v48;
          swift_bridgeObjectRetain(v48);
          v16 = v10;
          v12 = v84;
          v17 = v84;
          v18 = 1;
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
            goto LABEL_24;
          }
          v15 = *((_QWORD *)v11 + 1);
          *(_QWORD *)v10 = *(_QWORD *)v11;
          *((_QWORD *)v10 + 1) = v15;
          swift_bridgeObjectRetain(v15);
          v16 = v10;
          v17 = v12;
          v18 = 0;
        }
        swift_storeEnumTagMultiPayload(v16, v17, v18);
      }
LABEL_24:
      v49 = *(int *)(v8 + 36);
      v50 = &a1[v49];
      v51 = &a2[v49];
      v52 = swift_getEnumCaseMultiPayload(v51, v12);
      if (v52 == 2)
      {
        v57 = *((_QWORD *)v51 + 1);
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *((_QWORD *)v50 + 1) = v57;
        v58 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        v59 = &v50[v58];
        v60 = &v51[v58];
        v61 = type metadata accessor for Date(0);
        v62 = *(_QWORD *)(v61 - 8);
        v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
        swift_bridgeObjectRetain(v57);
        if (v63(v60, 1, v61))
        {
          v64 = sub_100004B18(&qword_1000C85A0);
          memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
        }
        v54 = v50;
        v55 = v12;
        v56 = 2;
      }
      else if (v52 == 1)
      {
        v85 = v12;
        v65 = *((_QWORD *)v51 + 1);
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *((_QWORD *)v50 + 1) = v65;
        v66 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
        v67 = *(int *)(v66 + 20);
        v82 = &v50[v67];
        v68 = &v51[v67];
        v69 = type metadata accessor for Date(0);
        v70 = *(_QWORD *)(v69 - 8);
        v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
        swift_bridgeObjectRetain(v65);
        if (v71(v68, 1, v69))
        {
          v72 = sub_100004B18(&qword_1000C85A0);
          memcpy(v82, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v82, v68, v69);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v82, 0, 1, v69);
        }
        v73 = *(int *)(v66 + 24);
        v74 = &v50[v73];
        v75 = &v51[v73];
        v76 = *((_QWORD *)v75 + 1);
        *(_QWORD *)v74 = *(_QWORD *)v75;
        *((_QWORD *)v74 + 1) = v76;
        swift_bridgeObjectRetain(v76);
        v54 = v50;
        v55 = v85;
        v56 = 1;
      }
      else
      {
        if (v52)
        {
          memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
LABEL_38:
          v20 = a1;
          v21 = a3;
          v22 = 0;
          goto LABEL_39;
        }
        v53 = *((_QWORD *)v51 + 1);
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *((_QWORD *)v50 + 1) = v53;
        swift_bridgeObjectRetain(v53);
        v54 = v50;
        v55 = v12;
        v56 = 0;
      }
      swift_storeEnumTagMultiPayload(v54, v55, v56);
      goto LABEL_38;
    case 2u:
      v19 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v19;
      swift_bridgeObjectRetain(v19);
      v20 = a1;
      v21 = a3;
      v22 = 2;
      goto LABEL_39;
    case 3u:
      v23 = *(void **)a2;
      if (*(_QWORD *)a2 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v27 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = v23;
        *((_QWORD *)a1 + 1) = v27;
        v28 = v23;
      }
      v20 = a1;
      v21 = a3;
      v22 = 3;
      goto LABEL_39;
    case 4u:
      v24 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v25 = v24;
      v20 = a1;
      v21 = a3;
      v22 = 4;
      goto LABEL_39;
    case 6u:
      v26 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v26);
      v20 = a1;
      v21 = a3;
      v22 = 6;
LABEL_39:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      return a1;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
}

char *sub_100035BD8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  id v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v78;
  char *__dst;
  void *v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  if (a1 != a2)
  {
    sub_100018008((uint64_t)a1, type metadata accessor for ViewServiceInput);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *(_QWORD *)a2;
        a1[8] = a2[8];
        *(_QWORD *)a1 = v6;
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        v7 = *((_QWORD *)a2 + 4);
        *((_QWORD *)a1 + 4) = v7;
        v8 = (void *)*((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 5) = v8;
        v9 = type metadata accessor for ActivityDisplayContext(0);
        v10 = *(int *)(v9 + 32);
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
        swift_bridgeObjectRetain(v7);
        v14 = v8;
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
        if (EnumCaseMultiPayload == 2)
        {
          v80 = (void *)v9;
          v83 = v13;
          *(_QWORD *)v11 = *(_QWORD *)v12;
          v29 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v11 + 1) = v29;
          v30 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          v31 = &v11[v30];
          v32 = &v12[v30];
          v33 = type metadata accessor for Date(0);
          v34 = *(_QWORD *)(v33 - 8);
          v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
          swift_bridgeObjectRetain(v29);
          if (v35(v32, 1, v33))
          {
            v36 = sub_100004B18(&qword_1000C85A0);
            memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
          }
          v13 = v83;
          swift_storeEnumTagMultiPayload(v11, v83, 2);
          v9 = (uint64_t)v80;
        }
        else
        {
          if (EnumCaseMultiPayload == 1)
          {
            v81 = (void *)v9;
            v84 = v13;
            *(_QWORD *)v11 = *(_QWORD *)v12;
            v37 = *((_QWORD *)v12 + 1);
            *((_QWORD *)v11 + 1) = v37;
            v38 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
            v39 = *(int *)(v38 + 20);
            v78 = v38;
            __dst = &v11[v39];
            v40 = &v12[v39];
            v41 = type metadata accessor for Date(0);
            v42 = *(_QWORD *)(v41 - 8);
            v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
            swift_bridgeObjectRetain(v37);
            if (v43(v40, 1, v41))
            {
              v44 = sub_100004B18(&qword_1000C85A0);
              memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dst, v40, v41);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v41);
            }
            v9 = (uint64_t)v81;
            v45 = *(int *)(v78 + 24);
            v46 = &v11[v45];
            v47 = &v12[v45];
            *(_QWORD *)v46 = *(_QWORD *)v47;
            v48 = *((_QWORD *)v47 + 1);
            *((_QWORD *)v46 + 1) = v48;
            swift_bridgeObjectRetain(v48);
            v17 = v11;
            v13 = v84;
            v18 = v84;
            v19 = 1;
          }
          else
          {
            if (EnumCaseMultiPayload)
            {
              memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
              goto LABEL_25;
            }
            *(_QWORD *)v11 = *(_QWORD *)v12;
            v16 = *((_QWORD *)v12 + 1);
            *((_QWORD *)v11 + 1) = v16;
            swift_bridgeObjectRetain(v16);
            v17 = v11;
            v18 = v13;
            v19 = 0;
          }
          swift_storeEnumTagMultiPayload(v17, v18, v19);
        }
LABEL_25:
        v49 = *(int *)(v9 + 36);
        v50 = &a1[v49];
        v51 = &a2[v49];
        v52 = swift_getEnumCaseMultiPayload(v51, v13);
        if (v52 == 2)
        {
          *(_QWORD *)v50 = *(_QWORD *)v51;
          v57 = *((_QWORD *)v51 + 1);
          *((_QWORD *)v50 + 1) = v57;
          v58 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          v59 = &v50[v58];
          v60 = &v51[v58];
          v61 = type metadata accessor for Date(0);
          v62 = *(_QWORD *)(v61 - 8);
          v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
          swift_bridgeObjectRetain(v57);
          if (v63(v60, 1, v61))
          {
            v64 = sub_100004B18(&qword_1000C85A0);
            memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
          }
          v54 = v50;
          v55 = v13;
          v56 = 2;
        }
        else if (v52 == 1)
        {
          v85 = v13;
          *(_QWORD *)v50 = *(_QWORD *)v51;
          v65 = *((_QWORD *)v51 + 1);
          *((_QWORD *)v50 + 1) = v65;
          v66 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          v67 = *(int *)(v66 + 20);
          v82 = &v50[v67];
          v68 = &v51[v67];
          v69 = type metadata accessor for Date(0);
          v70 = *(_QWORD *)(v69 - 8);
          v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
          swift_bridgeObjectRetain(v65);
          if (v71(v68, 1, v69))
          {
            v72 = sub_100004B18(&qword_1000C85A0);
            memcpy(v82, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v82, v68, v69);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v82, 0, 1, v69);
          }
          v73 = *(int *)(v66 + 24);
          v74 = &v50[v73];
          v75 = &v51[v73];
          *(_QWORD *)v74 = *(_QWORD *)v75;
          v76 = *((_QWORD *)v75 + 1);
          *((_QWORD *)v74 + 1) = v76;
          swift_bridgeObjectRetain(v76);
          v54 = v50;
          v55 = v85;
          v56 = 1;
        }
        else
        {
          if (v52)
          {
            memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_39:
            v21 = a1;
            v22 = a3;
            v23 = 0;
            goto LABEL_40;
          }
          *(_QWORD *)v50 = *(_QWORD *)v51;
          v53 = *((_QWORD *)v51 + 1);
          *((_QWORD *)v50 + 1) = v53;
          swift_bridgeObjectRetain(v53);
          v54 = v50;
          v55 = v13;
          v56 = 0;
        }
        swift_storeEnumTagMultiPayload(v54, v55, v56);
        goto LABEL_39;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v20 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v20;
        swift_bridgeObjectRetain(v20);
        v21 = a1;
        v22 = a3;
        v23 = 2;
        goto LABEL_40;
      case 3u:
        v24 = *(void **)a2;
        if (*(_QWORD *)a2 == 1)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          *(_QWORD *)a1 = v24;
          *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
          v28 = v24;
        }
        v21 = a1;
        v22 = a3;
        v23 = 3;
        goto LABEL_40;
      case 4u:
        v25 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v26 = v25;
        v21 = a1;
        v22 = a3;
        v23 = 4;
        goto LABEL_40;
      case 6u:
        v27 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v27);
        v21 = a1;
        v22 = a3;
        v23 = 6;
LABEL_40:
        swift_storeEnumTagMultiPayload(v21, v22, v23);
        return a1;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t type metadata accessor for ViewServiceInput(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000C8618, (uint64_t)&nominal type descriptor for ViewServiceInput);
}

char *sub_1000361B0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *__dst;

  if (!swift_getEnumCaseMultiPayload(a2, a3))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[8] = a2[8];
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
    v6 = type metadata accessor for ActivityDisplayContext(0);
    v7 = *(int *)(v6 + 32);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v19 = &v8[v18];
      v20 = &v9[v18];
      v21 = type metadata accessor for Date(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = sub_100004B18(&qword_1000C85A0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      v24 = v8;
      v25 = v10;
      v26 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        goto LABEL_15;
      }
      *(_OWORD *)v8 = *(_OWORD *)v9;
      v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v13 = *(int *)(v12 + 20);
      v48 = v12;
      __dst = &v8[v13];
      v14 = &v9[v13];
      v15 = type metadata accessor for Date(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_100004B18(&qword_1000C85A0);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      *(_OWORD *)&v8[*(int *)(v48 + 24)] = *(_OWORD *)&v9[*(int *)(v48 + 24)];
      v24 = v8;
      v25 = v10;
      v26 = 1;
    }
    swift_storeEnumTagMultiPayload(v24, v25, v26);
LABEL_15:
    v27 = *(int *)(v6 + 36);
    v28 = &a1[v27];
    v29 = &a2[v27];
    v30 = swift_getEnumCaseMultiPayload(v29, v10);
    if (v30 == 2)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
      v38 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v39 = &v28[v38];
      v40 = &v29[v38];
      v41 = type metadata accessor for Date(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = sub_100004B18(&qword_1000C85A0);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      v44 = v28;
      v45 = v10;
      v46 = 2;
    }
    else
    {
      if (v30 != 1)
      {
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_27:
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        return a1;
      }
      *(_OWORD *)v28 = *(_OWORD *)v29;
      v31 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v32 = *(int *)(v31 + 20);
      v33 = &v28[v32];
      v34 = &v29[v32];
      v35 = type metadata accessor for Date(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = sub_100004B18(&qword_1000C85A0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      *(_OWORD *)&v28[*(int *)(v31 + 24)] = *(_OWORD *)&v29[*(int *)(v31 + 24)];
      v44 = v28;
      v45 = v10;
      v46 = 1;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
    goto LABEL_27;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *sub_1000365AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *__dst;

  if (a1 != a2)
  {
    sub_100018008((uint64_t)a1, type metadata accessor for ViewServiceInput);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    *a1 = *a2;
    *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
    a1[2] = a2[2];
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    a1[5] = a2[5];
    v6 = type metadata accessor for ActivityDisplayContext(0);
    v7 = *(int *)(v6 + 32);
    v8 = (_OWORD *)((char *)a1 + v7);
    v9 = (_OWORD *)((char *)a2 + v7);
    v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    if (EnumCaseMultiPayload == 2)
    {
      *v8 = *v9;
      v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v19 = (char *)v8 + v18;
      v20 = (char *)v9 + v18;
      v21 = type metadata accessor for Date(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = sub_100004B18(&qword_1000C85A0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      v24 = v8;
      v25 = v10;
      v26 = 2;
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
        goto LABEL_16;
      }
      *v8 = *v9;
      v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v13 = *(int *)(v12 + 20);
      v48 = v12;
      __dst = (char *)v8 + v13;
      v14 = (char *)v9 + v13;
      v15 = type metadata accessor for Date(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_100004B18(&qword_1000C85A0);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      *(_OWORD *)((char *)v8 + *(int *)(v48 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v48 + 24));
      v24 = v8;
      v25 = v10;
      v26 = 1;
    }
    swift_storeEnumTagMultiPayload(v24, v25, v26);
LABEL_16:
    v27 = *(int *)(v6 + 36);
    v28 = (_OWORD *)((char *)a1 + v27);
    v29 = (_OWORD *)((char *)a2 + v27);
    v30 = swift_getEnumCaseMultiPayload(v29, v10);
    if (v30 == 2)
    {
      *v28 = *v29;
      v38 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v39 = (char *)v28 + v38;
      v40 = (char *)v29 + v38;
      v41 = type metadata accessor for Date(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = sub_100004B18(&qword_1000C85A0);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      v44 = v28;
      v45 = v10;
      v46 = 2;
    }
    else
    {
      if (v30 != 1)
      {
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
LABEL_28:
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        return a1;
      }
      *v28 = *v29;
      v31 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v32 = *(int *)(v31 + 20);
      v33 = (char *)v28 + v32;
      v34 = (char *)v29 + v32;
      v35 = type metadata accessor for Date(0);
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = sub_100004B18(&qword_1000C85A0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      *(_OWORD *)((char *)v28 + *(int *)(v31 + 24)) = *(_OWORD *)((char *)v29 + *(int *)(v31 + 24));
      v44 = v28;
      v45 = v10;
      v46 = 1;
    }
    swift_storeEnumTagMultiPayload(v44, v45, v46);
    goto LABEL_28;
  }
  return a1;
}

uint64_t sub_1000369C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1000369CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1000369DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000369EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for ActivityDisplayContext(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100083638;
    v4[2] = &unk_100083650;
    v4[3] = &unk_100083668;
    v4[4] = &unk_100083680;
    v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 7, v4);
    return 0;
  }
  return result;
}

unint64_t sub_100036A94(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v38;
  char v39;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v21 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain(v21);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v22 = *(_QWORD *)a2;
      v23 = *(_QWORD *)(a2 + 8);
      v24 = *(_QWORD *)(a2 + 16);
      v25 = *(_QWORD *)(a2 + 24);
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_QWORD *)(a2 + 40);
      v28 = *(_QWORD *)(a2 + 48);
      v39 = *(_BYTE *)(a2 + 56);
      sub_100036D50(*(_QWORD *)a2, v23, v24, v25, v26, v27, v28, v39);
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v23;
      *(_QWORD *)(a1 + 16) = v24;
      *(_QWORD *)(a1 + 24) = v25;
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a1 + 40) = v27;
      *(_QWORD *)(a1 + 48) = v28;
      *(_BYTE *)(a1 + 56) = v39;
      v29 = *(int *)(sub_100004B18(&qword_1000C8660) + 48);
      v30 = a1 + v29;
      v31 = a2 + v29;
      v32 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v33 = *(int *)(sub_100004B18(&qword_1000C8658) + 48);
      v34 = a1 + v33;
      v35 = a2 + v33;
      v36 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *(_QWORD *)a2;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 16);
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      v14 = *(_QWORD *)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 48);
      v38 = *(_BYTE *)(a2 + 56);
      sub_100036CD8(*(_QWORD *)a2, v10, v11, v12, v13, v14, v15, v38);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v12;
      *(_QWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 48) = v15;
      *(_BYTE *)(a1 + 56) = v38;
      v16 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v16;
      swift_bridgeObjectRetain(v16);
      v17 = *(int *)(sub_100004B18(&qword_1000C8650) + 64);
      v18 = a1 + v17;
      v19 = a2 + v17;
      v20 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100036CD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  int v10;

  v10 = a8 >> 5;
  if (v10 == 2)
    return sub_100017F6C(result, a2, a3, a4, a5, a6, a7, a8 & 0x1F);
  if (v10 == 1)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a5);
  }
  else if (!(a8 >> 5))
  {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100036D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a8)
  {
    if (a8 != 1)
      return result;
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a3);
    a2 = a5;
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100036D9C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    sub_100036E60(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
    v5 = &qword_1000C8660;
LABEL_7:
    v4 = *(int *)(sub_100004B18(v5) + 48);
    goto LABEL_8;
  }
  if ((_DWORD)result == 1)
  {
    v5 = &qword_1000C8658;
    goto LABEL_7;
  }
  if ((_DWORD)result)
    return result;
  sub_1000173AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v4 = *(int *)(sub_100004B18(&qword_1000C8650) + 64);
LABEL_8:
  v6 = a1 + v4;
  v7 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

uint64_t sub_100036E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;

  if (a8)
  {
    if (a8 != 1)
      return result;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a5);
    a2 = a7;
  }
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100036EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v38 = a3;
    v20 = *(_QWORD *)a2;
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a2 + 16);
    v23 = *(_QWORD *)(a2 + 24);
    v24 = *(_QWORD *)(a2 + 32);
    v25 = *(_QWORD *)(a2 + 40);
    v26 = *(_QWORD *)(a2 + 48);
    v27 = *(_BYTE *)(a2 + 56);
    sub_100036D50(*(_QWORD *)a2, v21, v22, v23, v24, v25, v26, v27);
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = v22;
    *(_QWORD *)(a1 + 24) = v23;
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(a1 + 40) = v25;
    *(_QWORD *)(a1 + 48) = v26;
    *(_BYTE *)(a1 + 56) = v27;
    v28 = *(int *)(sub_100004B18(&qword_1000C8660) + 48);
    v29 = a1 + v28;
    v30 = a2 + v28;
    v31 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    swift_storeEnumTagMultiPayload(a1, v38, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v32 = *(int *)(sub_100004B18(&qword_1000C8658) + 48);
    v33 = a1 + v32;
    v34 = a2 + v32;
    v35 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v37 = a3;
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_BYTE *)(a2 + 56);
    sub_100036CD8(*(_QWORD *)a2, v8, v9, v10, v11, v12, v13, v14);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = v14;
    v15 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v15;
    swift_bridgeObjectRetain(v15);
    v16 = *(int *)(sub_100004B18(&qword_1000C8650) + 64);
    v17 = a1 + v16;
    v18 = a2 + v16;
    v19 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    swift_storeEnumTagMultiPayload(a1, v37, 0);
  }
  return a1;
}

uint64_t sub_1000370C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v35;
  char v36;

  if (a1 != a2)
  {
    sub_100018008(a1, type metadata accessor for ViewServiceOutput);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)(a2 + 8);
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 32);
      v24 = *(_QWORD *)(a2 + 40);
      v25 = *(_QWORD *)(a2 + 48);
      v36 = *(_BYTE *)(a2 + 56);
      sub_100036D50(*(_QWORD *)a2, v20, v21, v22, v23, v24, v25, v36);
      *(_QWORD *)a1 = v19;
      *(_QWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 16) = v21;
      *(_QWORD *)(a1 + 24) = v22;
      *(_QWORD *)(a1 + 32) = v23;
      *(_QWORD *)(a1 + 40) = v24;
      *(_QWORD *)(a1 + 48) = v25;
      *(_BYTE *)(a1 + 56) = v36;
      v26 = *(int *)(sub_100004B18(&qword_1000C8660) + 48);
      v27 = a1 + v26;
      v28 = a2 + v26;
      v29 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v30 = *(int *)(sub_100004B18(&qword_1000C8658) + 48);
      v31 = a1 + v30;
      v32 = a2 + v30;
      v33 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      v12 = *(_QWORD *)(a2 + 40);
      v13 = *(_QWORD *)(a2 + 48);
      v35 = *(_BYTE *)(a2 + 56);
      sub_100036CD8(*(_QWORD *)a2, v8, v9, v10, v11, v12, v13, v35);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 48) = v13;
      *(_BYTE *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      v14 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v14;
      swift_bridgeObjectRetain(v14);
      v15 = *(int *)(sub_100004B18(&qword_1000C8650) + 64);
      v16 = a1 + v15;
      v17 = a2 + v15;
      v18 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t type metadata accessor for ViewServiceOutput(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000C86D8, (uint64_t)&nominal type descriptor for ViewServiceOutput);
}

_OWORD *sub_100037318(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v12 = a2[1];
    *a1 = *a2;
    a1[1] = v12;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    v13 = *(int *)(sub_100004B18(&qword_1000C8660) + 48);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v17 = *(int *)(sub_100004B18(&qword_1000C8658) + 48);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    a1[4] = a2[4];
    v8 = *(int *)(sub_100004B18(&qword_1000C8650) + 64);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_OWORD *sub_1000374A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100018008((uint64_t)a1, type metadata accessor for ViewServiceOutput);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      v13 = *(int *)(sub_100004B18(&qword_1000C8660) + 48);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v17 = *(int *)(sub_100004B18(&qword_1000C8658) + 48);
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      a1[4] = a2[4];
      v8 = *(int *)(sub_100004B18(&qword_1000C8650) + 64);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100037640(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  _QWORD v8[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3(v7, "9", &unk_100083650, v4);
    v8[0] = v7;
    swift_getTupleTypeLayout2(v6, &unk_1000836D0, v4);
    v8[1] = v6;
    swift_getTupleTypeLayout2(v5, &unk_1000836E8, v4);
    v8[2] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v8);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CardMode(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    if (v6 >= 3)
      v7 = v6 - 2;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100037754 + 4 * byte_10008352C[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for CardMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100037800 + 4 * byte_100083536[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100037834 + 4 * byte_100083531[v5]))();
}

uint64_t sub_100037834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003783C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100037844);
  return result;
}

uint64_t sub_100037850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100037858);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10003785C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100037870(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

_BYTE *sub_100037884(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 2;
  return result;
}

ValueMetadata *type metadata accessor for CardMode()
{
  return &type metadata for CardMode;
}

uint64_t sub_1000378A4(char a1)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  if (a1 == 3)
    return 0x726F737365636361;
  if (a1 == 4)
    return 1701602409;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x736F6C4365766F6DLL;
    else
      v3 = 0x6574656C706D6F63;
    if (a1 == 1)
      v4 = 0xEA00000000007265;
    else
      v4 = 0xE800000000000000;
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6F72746E69;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 10528;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0xD000000000000015;
}

uint64_t sub_1000379C4(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v33 = a2;
  v3 = sub_100004B18(&qword_1000C8930);
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  __chkstk_darwin(v3);
  v27 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000C8938);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000C8940);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004B18(&qword_1000C8948);
  v32 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_100006914(a1, v16);
  v17 = sub_10003BEB4();
  v18 = v15;
  v19 = v33;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CardMode.CodingKeys, &type metadata for CardMode.CodingKeys, v17, v16, v18);
  if (v19 == 4)
  {
    v37 = 2;
    v21 = sub_10003BEF8();
    v22 = v27;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CardMode.IdleCodingKeys, &v37, v12, &type metadata for CardMode.IdleCodingKeys, v21);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  }
  if (v19 == 3)
  {
    v34 = 0;
    v20 = sub_10003BFC4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CardMode.AccessoryViewCodingKeys, &v34, v12, &type metadata for CardMode.AccessoryViewCodingKeys, v20);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v12);
  }
  v36 = 1;
  v24 = sub_10003BF3C();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CardMode.EducationViewCodingKeys, &v36, v12, &type metadata for CardMode.EducationViewCodingKeys, v24);
  v35 = v19;
  sub_10003C008();
  v25 = v31;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v35);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v12);
}

uint64_t sub_100037C80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BFC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100037CA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BFC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100037CD0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F69746163756465;
  if (*v0 != 1)
    v1 = 1701602409;
  if (*v0)
    return v1;
  else
    return 0x726F737365636361;
}

uint64_t sub_100037D30@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003B8FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100037D54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BEB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100037D7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BEB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100037DAC()
{
  return 12383;
}

uint64_t sub_100037DBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BF3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100037DE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BF3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100037E0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BEF8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100037E34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003BEF8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100037E5C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10003BA6C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100037E84(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_1000379C4(a1, *v1);
}

uint64_t sub_100037E9C()
{
  char *v0;

  return sub_1000378A4(*v0);
}

BOOL sub_100037EA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 4)
    return v3 == 4;
  if (v2 == 3)
    return v3 == 3;
  if ((v3 - 3) < 2)
    return 0;
  return v2 == v3;
}

uint64_t sub_100037EF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100037F34 + 4 * byte_10008353B[a1]))(0xD000000000000016, 0x8000000100091070);
}

uint64_t sub_100037F34()
{
  return 0x65646F4D64726163;
}

uint64_t sub_100037F4C()
{
  return 0x7373696D736964;
}

unint64_t sub_100037F64()
{
  return 0xD000000000000013;
}

uint64_t sub_100037F80()
{
  return 0x6E6F70736552726DLL;
}

uint64_t sub_100037F9C()
{
  return 1735289200;
}

uint64_t sub_100037FAC()
{
  return 0x73736572676F7270;
}

uint64_t sub_100037FC4()
{
  uint64_t v0;

  return v0 + 19;
}

void sub_100037FDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD v22[2];
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v2 = sub_100004B18(&qword_1000C87B8);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v42 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004B18(&qword_1000C87C0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v39 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100004B18(&qword_1000C87C8);
  v34 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v32 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004B18(&qword_1000C87D0);
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  __chkstk_darwin(v7);
  v35 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100004B18(&qword_1000C87D8);
  v31 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v30 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004B18(&qword_1000C87E0);
  v28 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100004B18(&qword_1000C87E8);
  v25 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v24 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004B18(&qword_1000C87F0);
  v22[1] = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v12 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v12);
  v13 = type metadata accessor for ViewServiceInput(0);
  __chkstk_darwin(v13);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100004B18(&qword_1000C87F8);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v19 = a1[4];
  sub_100006914(a1, v18);
  v20 = sub_10003B258();
  v46 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewServiceInput.CodingKeys, &type metadata for ViewServiceInput.CodingKeys, v20, v18, v19);
  sub_100017FC4(v48, (uint64_t)v15, type metadata accessor for ViewServiceInput);
  v21 = (char *)sub_100038364 + 4 * word_100083544[swift_getEnumCaseMultiPayload(v15, v13)];
  __asm { BR              X10 }
}

uint64_t sub_100038364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100017264(v2, v1, type metadata accessor for ActivityDisplayContext);
  *(_BYTE *)(v3 - 104) = 0;
  v4 = sub_10003B500();
  v6 = *(_QWORD *)(v3 - 136);
  v5 = *(_QWORD *)(v3 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys, v3 - 104, v5, &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys, v4);
  sub_100003E48(&qword_1000C8810, type metadata accessor for ActivityDisplayContext, (uint64_t)&unk_10008693C);
  v7 = *(_QWORD *)(v3 - 320);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 328) + 8))(v0, v7);
  sub_100018008(v1, type metadata accessor for ActivityDisplayContext);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 8))(v6, v5);
}

uint64_t sub_100038858@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[9];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;

  v77 = a2;
  v3 = sub_100004B18(&qword_1000C8710);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  __chkstk_darwin(v3);
  v70 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100004B18(&qword_1000C8718);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v69 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100004B18(&qword_1000C8720);
  v58 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v68 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100004B18(&qword_1000C8728);
  v60 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v76 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100004B18(&qword_1000C8730);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v67 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100004B18(&qword_1000C8738);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v66 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004B18(&qword_1000C8740);
  v53 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v65 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100004B18(&qword_1000C8748);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v74 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100004B18(&qword_1000C8750);
  v72 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for ViewServiceInput(0);
  v14 = __chkstk_darwin(v73);
  v49[8] = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v49[6] = (char *)v49 - v17;
  v18 = __chkstk_darwin(v16);
  v49[7] = (char *)v49 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)v49 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)v49 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)v49 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)v49 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)v49 - v32;
  v34 = a1[3];
  v35 = a1[4];
  v79 = a1;
  sub_100006914(a1, v34);
  v36 = sub_10003B258();
  v75 = v13;
  v37 = v80;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewServiceInput.CodingKeys, &type metadata for ViewServiceInput.CodingKeys, v36, v34, v35);
  if (!v37)
  {
    v49[1] = v28;
    v49[2] = v25;
    v49[4] = v31;
    v49[3] = v22;
    v80 = 0;
    v38 = v73;
    v49[5] = v33;
    v39 = v78;
    v40 = v75;
    v41 = KeyedDecodingContainer.allKeys.getter(v78);
    v42 = v41;
    if (*(_QWORD *)(v41 + 16) == 1)
    {
      v49[0] = v41;
      __asm { BR              X10 }
    }
    v43 = type metadata accessor for DecodingError(0);
    swift_allocError(v43, &protocol witness table for DecodingError, 0, 0);
    v45 = v44;
    sub_100004B18(&qword_1000C7E90);
    *v45 = v38;
    v46 = KeyedDecodingContainer.codingPath.getter(v39);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v46, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v47 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, enum case for DecodingError.typeMismatch(_:), v43);
    swift_willThrow(v47);
    swift_bridgeObjectRelease(v42);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v40, v39);
  }
  return sub_10000697C(v79);
}

uint64_t sub_1000395C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000395F8 + 4 * byte_100083564[a1]))(0x6E65764564726163, 0xE900000000000074);
}

uint64_t sub_1000395F8()
{
  return 0x64656873696E6966;
}

uint64_t sub_100039610()
{
  return 1735289200;
}

unint64_t sub_100039620()
{
  return 0xD000000000000012;
}

unint64_t sub_10003963C()
{
  return 0xD00000000000001CLL;
}

void sub_10003965C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v30 = sub_100004B18(&qword_1000C8898);
  v20[2] = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100004B18(&qword_1000C88A0);
  v20[0] = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v25 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004B18(&qword_1000C88A8);
  v22 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v21 = sub_100004B18(&qword_1000C88B0);
  v20[3] = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v28 = sub_100004B18(&qword_1000C88B8);
  v20[1] = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v26 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  v6 = __chkstk_darwin(v5);
  v31 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v24 = (char *)v20 - v9;
  __chkstk_darwin(v8);
  v32 = (char *)v20 - v10;
  v11 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004B18(&qword_1000C88C0);
  v33 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  sub_100006914(a1, v16);
  v18 = sub_10003B5CC();
  v38 = v15;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ViewServiceOutput.CodingKeys, &type metadata for ViewServiceOutput.CodingKeys, v18, v16, v17);
  sub_100017FC4(v36, (uint64_t)v13, type metadata accessor for ViewServiceOutput);
  v19 = (char *)sub_100039968 + 4 * word_10008356A[swift_getEnumCaseMultiPayload(v13, v11)];
  __asm { BR              X10 }
}

uint64_t sub_100039968()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *v0;
  v3 = v0[1];
  v4 = v0[3];
  *(_QWORD *)(v1 - 176) = v0[2];
  v5 = v0[4];
  v6 = v0[5];
  *(_QWORD *)(v1 - 232) = v0[6];
  *(_QWORD *)(v1 - 224) = v5;
  v7 = *((unsigned __int8 *)v0 + 56);
  *(_QWORD *)(v1 - 304) = v0[8];
  *(_QWORD *)(v1 - 296) = v0[9];
  v8 = sub_100004B18(&qword_1000C8650);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 200) + 32))(*(_QWORD *)(v1 - 216), (uint64_t)v0 + *(int *)(v8 + 64), *(_QWORD *)(v1 - 192));
  *(_BYTE *)(v1 - 152) = 0;
  v9 = sub_10003B7A8();
  v10 = *(_QWORD *)(v1 - 264);
  v11 = *(_QWORD *)(v1 - 160);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ViewServiceOutput.CardEventCodingKeys, v1 - 152, *(_QWORD *)(v1 - 168), &type metadata for ViewServiceOutput.CardEventCodingKeys, v9);
  *(_QWORD *)(v1 - 240) = v2;
  *(_QWORD *)(v1 - 152) = v2;
  *(_QWORD *)(v1 - 144) = v3;
  *(_QWORD *)(v1 - 256) = v3;
  v12 = *(_QWORD *)(v1 - 176);
  *(_QWORD *)(v1 - 136) = v12;
  *(_QWORD *)(v1 - 128) = v4;
  *(_QWORD *)(v1 - 272) = v4;
  v13 = *(_QWORD *)(v1 - 224);
  *(_QWORD *)(v1 - 120) = v13;
  *(_QWORD *)(v1 - 112) = v6;
  *(_QWORD *)(v1 - 280) = v6;
  v14 = *(_QWORD *)(v1 - 232);
  *(_QWORD *)(v1 - 104) = v14;
  *(_DWORD *)(v1 - 288) = v7;
  *(_BYTE *)(v1 - 96) = v7;
  *(_BYTE *)(v1 - 65) = 0;
  sub_10003B8B8();
  v15 = *(_QWORD *)(v1 - 248);
  v16 = *(_QWORD *)(v1 - 184);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v1 - 152);
  if (v16)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v1 - 296));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v10, v15);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 - 200) + 8))(*(_QWORD *)(v1 - 216), *(_QWORD *)(v1 - 192));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 208) + 8))(v11, *(_QWORD *)(v1 - 168));
    return sub_1000173AC(*(_QWORD *)(v1 - 240), *(_QWORD *)(v1 - 256), v12, *(_QWORD *)(v1 - 272), v13, *(_QWORD *)(v1 - 280), v14, *(_DWORD *)(v1 - 288));
  }
  else
  {
    sub_1000173AC(*(_QWORD *)(v1 - 240), *(_QWORD *)(v1 - 256), v12, *(_QWORD *)(v1 - 272), v13, *(_QWORD *)(v1 - 280), v14, *(_DWORD *)(v1 - 288));
    *(_BYTE *)(v1 - 152) = 1;
    v18 = *(_QWORD *)(v1 - 296);
    KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)(v1 - 304), v18, v1 - 152, v15);
    swift_bridgeObjectRelease(v18);
    *(_BYTE *)(v1 - 152) = 2;
    sub_100003E48(&qword_1000C88D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v19 = *(_QWORD *)(v1 - 216);
    v20 = *(_QWORD *)(v1 - 192);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
    v21 = *(_QWORD *)(v1 - 168);
    v22 = *(_QWORD *)(v1 - 160);
    v23 = *(_QWORD *)(v1 - 200);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 328) + 8))(v10, v15);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v19, v20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 208) + 8))(v22, v21);
  }
}

uint64_t sub_10003A05C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[12];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v42 = a2;
  v40 = sub_100004B18(&qword_1000C8818);
  v38[8] = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v49 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100004B18(&qword_1000C8820);
  v38[7] = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v48 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100004B18(&qword_1000C8828);
  v38[11] = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v44 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004B18(&qword_1000C8830);
  v38[9] = *(_QWORD *)(v6 - 8);
  v38[10] = v6;
  __chkstk_darwin(v6);
  v43 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100004B18(&qword_1000C8838);
  v38[6] = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v45 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100004B18(&qword_1000C8840);
  v50 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ViewServiceOutput(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v38 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)v38 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)v38 - v21;
  v23 = a1[3];
  v24 = a1[4];
  v51 = a1;
  sub_100006914(a1, v23);
  v25 = sub_10003B5CC();
  v26 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ViewServiceOutput.CodingKeys, &type metadata for ViewServiceOutput.CodingKeys, v25, v23, v24);
  if (!v26)
  {
    v38[1] = v17;
    v38[2] = v14;
    v38[5] = 0;
    v38[3] = v20;
    v38[4] = v22;
    v52 = v11;
    v27 = v50;
    v28 = v46;
    v29 = KeyedDecodingContainer.allKeys.getter(v46);
    v30 = v29;
    if (*(_QWORD *)(v29 + 16) == 1)
      __asm { BR              X10 }
    v31 = v10;
    v32 = type metadata accessor for DecodingError(0);
    swift_allocError(v32, &protocol witness table for DecodingError, 0, 0);
    v34 = v33;
    sub_100004B18(&qword_1000C7E90);
    *v34 = v52;
    v35 = KeyedDecodingContainer.codingPath.getter(v28);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v35, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v36 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, enum case for DecodingError.typeMismatch(_:), v32);
    swift_willThrow(v36);
    swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v28);
  }
  return sub_10000697C(v51);
}

uint64_t sub_10003AB00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B500();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AB28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B500();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AB50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B478();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AB78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B478();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003ABA0()
{
  unsigned __int8 *v0;

  return sub_100037EF8(*v0);
}

uint64_t sub_10003ABA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003D4C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003ABCC(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10003ABD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B258();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AC00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B258();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AC28()
{
  return 0x6E6F73616572;
}

uint64_t sub_10003AC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73616572, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10003ACC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B434();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003ACF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B434();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AD18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B3AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AD40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B3AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AD68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B368();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AD90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B368();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003ADB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B29C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003ADE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B29C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AE08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B324();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AE30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B324();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AE58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10003AED4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B2E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AEFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B2E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003AF24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100038858(a1, a2);
}

void sub_10003AF38(_QWORD *a1)
{
  sub_100037FDC(a1);
}

uint64_t sub_10003AF4C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F73616572;
  if (*v0 != 1)
    v1 = 0x6D617473656D6974;
  if (*v0)
    return v1;
  else
    return 12383;
}

uint64_t sub_10003AF9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003D7F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003AFC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B7A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003AFE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B7A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B010()
{
  unsigned __int8 *v0;

  return sub_1000395C0(*v0);
}

uint64_t sub_10003B018@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003D938(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003B03C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10003B048(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B5CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003B070(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B5CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B098(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B764();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003B0C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B764();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B0E8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D617473656D6974;
  else
    return 12383;
}

uint64_t sub_10003B11C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003DB44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003B140(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B610();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003B168(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B610();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B190(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B720();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003B1B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B720();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B1E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B698();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003B208(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003B698();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003B230@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003A05C(a1, a2);
}

void sub_10003B244(_QWORD *a1)
{
  sub_10003965C(a1);
}

unint64_t sub_10003B258()
{
  unint64_t result;

  result = qword_1000C8758;
  if (!qword_1000C8758)
  {
    result = swift_getWitnessTable(&unk_100084B94, &type metadata for ViewServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8758);
  }
  return result;
}

unint64_t sub_10003B29C()
{
  unint64_t result;

  result = qword_1000C8760;
  if (!qword_1000C8760)
  {
    result = swift_getWitnessTable(&unk_100084B44, &type metadata for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8760);
  }
  return result;
}

unint64_t sub_10003B2E0()
{
  unint64_t result;

  result = qword_1000C8768;
  if (!qword_1000C8768)
  {
    result = swift_getWitnessTable(&unk_100084AF4, &type metadata for ViewServiceInput.ProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8768);
  }
  return result;
}

unint64_t sub_10003B324()
{
  unint64_t result;

  result = qword_1000C8770;
  if (!qword_1000C8770)
  {
    result = swift_getWitnessTable(&unk_100084AA4, &type metadata for ViewServiceInput.PingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8770);
  }
  return result;
}

unint64_t sub_10003B368()
{
  unint64_t result;

  result = qword_1000C8778;
  if (!qword_1000C8778)
  {
    result = swift_getWitnessTable(&unk_100084A54, &type metadata for ViewServiceInput.MrResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8778);
  }
  return result;
}

unint64_t sub_10003B3AC()
{
  unint64_t result;

  result = qword_1000C8780;
  if (!qword_1000C8780)
  {
    result = swift_getWitnessTable(&unk_100084A04, &type metadata for ViewServiceInput.MediaTransferStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8780);
  }
  return result;
}

unint64_t sub_10003B3F0()
{
  unint64_t result;

  result = qword_1000C8788;
  if (!qword_1000C8788)
  {
    result = swift_getWitnessTable(&unk_100081F04, &type metadata for MediaTransferStatus);
    atomic_store(result, (unint64_t *)&qword_1000C8788);
  }
  return result;
}

unint64_t sub_10003B434()
{
  unint64_t result;

  result = qword_1000C8790;
  if (!qword_1000C8790)
  {
    result = swift_getWitnessTable(&unk_1000849B4, &type metadata for ViewServiceInput.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8790);
  }
  return result;
}

unint64_t sub_10003B478()
{
  unint64_t result;

  result = qword_1000C8798;
  if (!qword_1000C8798)
  {
    result = swift_getWitnessTable(&unk_100084964, &type metadata for ViewServiceInput.CardModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8798);
  }
  return result;
}

unint64_t sub_10003B4BC()
{
  unint64_t result;

  result = qword_1000C87A0;
  if (!qword_1000C87A0)
  {
    result = swift_getWitnessTable(&unk_100083784, &type metadata for CardMode);
    atomic_store(result, (unint64_t *)&qword_1000C87A0);
  }
  return result;
}

unint64_t sub_10003B500()
{
  unint64_t result;

  result = qword_1000C87A8;
  if (!qword_1000C87A8)
  {
    result = swift_getWitnessTable(&unk_100084914, &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C87A8);
  }
  return result;
}

unint64_t sub_10003B544()
{
  unint64_t result;

  result = qword_1000C8800;
  if (!qword_1000C8800)
  {
    result = swift_getWitnessTable(&unk_100081EDC, &type metadata for MediaTransferStatus);
    atomic_store(result, (unint64_t *)&qword_1000C8800);
  }
  return result;
}

unint64_t sub_10003B588()
{
  unint64_t result;

  result = qword_1000C8808;
  if (!qword_1000C8808)
  {
    result = swift_getWitnessTable(&unk_10008375C, &type metadata for CardMode);
    atomic_store(result, (unint64_t *)&qword_1000C8808);
  }
  return result;
}

unint64_t sub_10003B5CC()
{
  unint64_t result;

  result = qword_1000C8848;
  if (!qword_1000C8848)
  {
    result = swift_getWitnessTable(&unk_1000848C4, &type metadata for ViewServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8848);
  }
  return result;
}

unint64_t sub_10003B610()
{
  unint64_t result;

  result = qword_1000C8850;
  if (!qword_1000C8850)
  {
    result = swift_getWitnessTable(&unk_100084874, &type metadata for ViewServiceOutput.NearbySharingInteractionViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8850);
  }
  return result;
}

unint64_t sub_10003B654()
{
  unint64_t result;

  result = qword_1000C8858;
  if (!qword_1000C8858)
  {
    result = swift_getWitnessTable(&unk_10008A15C, &type metadata for NearbySharingInteractionViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000C8858);
  }
  return result;
}

unint64_t sub_10003B698()
{
  unint64_t result;

  result = qword_1000C8868;
  if (!qword_1000C8868)
  {
    result = swift_getWitnessTable(&unk_100084824, &type metadata for ViewServiceOutput.XpcConnectionEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8868);
  }
  return result;
}

unint64_t sub_10003B6DC()
{
  unint64_t result;

  result = qword_1000C8870;
  if (!qword_1000C8870)
  {
    result = swift_getWitnessTable(&unk_100082CE8, &type metadata for XPCConnectionEvent);
    atomic_store(result, (unint64_t *)&qword_1000C8870);
  }
  return result;
}

unint64_t sub_10003B720()
{
  unint64_t result;

  result = qword_1000C8878;
  if (!qword_1000C8878)
  {
    result = swift_getWitnessTable(&unk_1000847D4, &type metadata for ViewServiceOutput.PingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8878);
  }
  return result;
}

unint64_t sub_10003B764()
{
  unint64_t result;

  result = qword_1000C8880;
  if (!qword_1000C8880)
  {
    result = swift_getWitnessTable(&unk_100084784, &type metadata for ViewServiceOutput.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8880);
  }
  return result;
}

unint64_t sub_10003B7A8()
{
  unint64_t result;

  result = qword_1000C8888;
  if (!qword_1000C8888)
  {
    result = swift_getWitnessTable(&unk_100084734, &type metadata for ViewServiceOutput.CardEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8888);
  }
  return result;
}

unint64_t sub_10003B7EC()
{
  unint64_t result;

  result = qword_1000C8890;
  if (!qword_1000C8890)
  {
    result = swift_getWitnessTable(&unk_100089570, &type metadata for CardEvent);
    atomic_store(result, (unint64_t *)&qword_1000C8890);
  }
  return result;
}

unint64_t sub_10003B830()
{
  unint64_t result;

  result = qword_1000C88C8;
  if (!qword_1000C88C8)
  {
    result = swift_getWitnessTable(&unk_10008A134, &type metadata for NearbySharingInteractionViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000C88C8);
  }
  return result;
}

unint64_t sub_10003B874()
{
  unint64_t result;

  result = qword_1000C88D8;
  if (!qword_1000C88D8)
  {
    result = swift_getWitnessTable(&unk_100082CC0, &type metadata for XPCConnectionEvent);
    atomic_store(result, (unint64_t *)&qword_1000C88D8);
  }
  return result;
}

unint64_t sub_10003B8B8()
{
  unint64_t result;

  result = qword_1000C88E0;
  if (!qword_1000C88E0)
  {
    result = swift_getWitnessTable(&unk_100089548, &type metadata for CardEvent);
    atomic_store(result, (unint64_t *)&qword_1000C88E0);
  }
  return result;
}

uint64_t sub_10003B8FC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0x726F737365636361 && a2 == 0xED00007765695679)
  {
    v4 = 0xED00007765695679;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00007765695679, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x6F69746163756465 && a2 == 0xED0000776569566ELL)
  {
    v6 = 0xED0000776569566ELL;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746163756465, 0xED0000776569566ELL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 1701602409 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1701602409, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10003BA6C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v31 = sub_100004B18(&qword_1000C88E8);
  v33 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100004B18(&qword_1000C88F0);
  v34 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v36 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004B18(&qword_1000C88F8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000C8900);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v37 = a1;
  sub_100006914(a1, v12);
  v14 = sub_10003BEB4();
  v15 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CardMode.CodingKeys, &type metadata for CardMode.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v38 = v4;
    v16 = v36;
    v17 = v9;
    v18 = KeyedDecodingContainer.allKeys.getter(v8);
    v19 = v18;
    if (*(_QWORD *)(v18 + 16) == 1)
    {
      if (*(_BYTE *)(v18 + 32))
      {
        if (*(_BYTE *)(v18 + 32) == 1)
        {
          BYTE1(v40) = 1;
          v20 = sub_10003BF3C();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CardMode.EducationViewCodingKeys, (char *)&v40 + 1, v8, &type metadata for CardMode.EducationViewCodingKeys, v20);
          sub_10003BF80();
          v21 = v32;
          KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for EducationViewState);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v21);
          swift_bridgeObjectRelease(v19);
          (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
          v7 = v40;
        }
        else
        {
          BYTE2(v40) = 2;
          v28 = sub_10003BEF8();
          v29 = v35;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CardMode.IdleCodingKeys, (char *)&v40 + 2, v8, &type metadata for CardMode.IdleCodingKeys, v28);
          (*(void (**)(char *, uint64_t))(v33 + 8))(v29, v31);
          swift_bridgeObjectRelease(v19);
          (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
          v7 = 4;
        }
      }
      else
      {
        v39 = 0;
        v27 = sub_10003BFC4();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CardMode.AccessoryViewCodingKeys, &v39, v8, &type metadata for CardMode.AccessoryViewCodingKeys, v27);
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v38);
        swift_bridgeObjectRelease(v19);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
        v7 = 3;
      }
    }
    else
    {
      v7 = type metadata accessor for DecodingError(0);
      swift_allocError(v7, &protocol witness table for DecodingError, 0, 0);
      v22 = v19;
      v24 = v23;
      sub_100004B18(&qword_1000C7E90);
      *v24 = &type metadata for CardMode;
      v25 = KeyedDecodingContainer.codingPath.getter(v8);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v25, 0xD00000000000002BLL, 0x80000001000907B0, 0);
      v26 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v7);
      swift_willThrow(v26);
      swift_bridgeObjectRelease(v22);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v8);
    }
  }
  sub_10000697C(v37);
  return v7;
}

unint64_t sub_10003BEB4()
{
  unint64_t result;

  result = qword_1000C8908;
  if (!qword_1000C8908)
  {
    result = swift_getWitnessTable(&unk_1000846E4, &type metadata for CardMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8908);
  }
  return result;
}

unint64_t sub_10003BEF8()
{
  unint64_t result;

  result = qword_1000C8910;
  if (!qword_1000C8910)
  {
    result = swift_getWitnessTable(&unk_100084694, &type metadata for CardMode.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8910);
  }
  return result;
}

unint64_t sub_10003BF3C()
{
  unint64_t result;

  result = qword_1000C8918;
  if (!qword_1000C8918)
  {
    result = swift_getWitnessTable(&unk_100084644, &type metadata for CardMode.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8918);
  }
  return result;
}

unint64_t sub_10003BF80()
{
  unint64_t result;

  result = qword_1000C8920;
  if (!qword_1000C8920)
  {
    result = swift_getWitnessTable(&unk_10008739C, &type metadata for EducationViewState);
    atomic_store(result, (unint64_t *)&qword_1000C8920);
  }
  return result;
}

unint64_t sub_10003BFC4()
{
  unint64_t result;

  result = qword_1000C8928;
  if (!qword_1000C8928)
  {
    result = swift_getWitnessTable(&unk_1000845F4, &type metadata for CardMode.AccessoryViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8928);
  }
  return result;
}

unint64_t sub_10003C008()
{
  unint64_t result;

  result = qword_1000C8950;
  if (!qword_1000C8950)
  {
    result = swift_getWitnessTable(&unk_100087374, &type metadata for EducationViewState);
    atomic_store(result, (unint64_t *)&qword_1000C8950);
  }
  return result;
}

ValueMetadata *type metadata accessor for CardMode.CodingKeys()
{
  return &type metadata for CardMode.CodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.AccessoryViewCodingKeys()
{
  return &type metadata for CardMode.AccessoryViewCodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.EducationViewCodingKeys()
{
  return &type metadata for CardMode.EducationViewCodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.IdleCodingKeys()
{
  return &type metadata for CardMode.IdleCodingKeys;
}

uint64_t getEnumTagSinglePayload for ViewServiceOutput.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewServiceOutput.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10003C174 + 4 * byte_10008357E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10003C1A8 + 4 * byte_100083579[v4]))();
}

uint64_t sub_10003C1A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C1B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C1B8);
  return result;
}

uint64_t sub_10003C1C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C1CCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10003C1D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C1D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.CodingKeys()
{
  return &type metadata for ViewServiceOutput.CodingKeys;
}

uint64_t _s13PCViewService8CardModeO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10003C240 + 4 * byte_100083588[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003C274 + 4 * byte_100083583[v4]))();
}

uint64_t sub_10003C274(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C27C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C284);
  return result;
}

uint64_t sub_10003C290(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C298);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003C29C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C2A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.CardEventCodingKeys()
{
  return &type metadata for ViewServiceOutput.CardEventCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.FinishedCodingKeys()
{
  return &type metadata for ViewServiceOutput.FinishedCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.PingCodingKeys()
{
  return &type metadata for ViewServiceOutput.PingCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.XpcConnectionEventCodingKeys()
{
  return &type metadata for ViewServiceOutput.XpcConnectionEventCodingKeys;
}

uint64_t _s13PCViewService17ViewServiceOutputO28XpcConnectionEventCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003C340 + 4 * byte_100083592[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003C374 + 4 * byte_10008358D[v4]))();
}

uint64_t sub_10003C374(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C37C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C384);
  return result;
}

uint64_t sub_10003C390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C398);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003C39C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C3A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.NearbySharingInteractionViewCodingKeys()
{
  return &type metadata for ViewServiceOutput.NearbySharingInteractionViewCodingKeys;
}

uint64_t getEnumTagSinglePayload for ViewServiceInput.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ViewServiceInput.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10003C49C + 4 * byte_10008359C[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10003C4D0 + 4 * byte_100083597[v4]))();
}

uint64_t sub_10003C4D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C4D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003C4E0);
  return result;
}

uint64_t sub_10003C4EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003C4F4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10003C4F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003C500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceInput.CodingKeys()
{
  return &type metadata for ViewServiceInput.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.ActivityDisplayContextCodingKeys()
{
  return &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.CardModeCodingKeys()
{
  return &type metadata for ViewServiceInput.CardModeCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.DismissCodingKeys()
{
  return &type metadata for ViewServiceInput.DismissCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.MediaTransferStatusCodingKeys()
{
  return &type metadata for ViewServiceInput.MediaTransferStatusCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.MrResponseCodingKeys()
{
  return &type metadata for ViewServiceInput.MrResponseCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.PingCodingKeys()
{
  return &type metadata for ViewServiceInput.PingCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.ProgressCodingKeys()
{
  return &type metadata for ViewServiceInput.ProgressCodingKeys;
}

uint64_t _s13PCViewService8CardModeO23EducationViewCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003C5CC + 4 * byte_1000835A1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003C5EC + 4 * byte_1000835A6[v4]))();
}

_BYTE *sub_10003C5CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003C5EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003C5F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003C5FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003C604(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003C60C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys()
{
  return &type metadata for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys;
}

unint64_t sub_10003C62C()
{
  unint64_t result;

  result = qword_1000C8958;
  if (!qword_1000C8958)
  {
    result = swift_getWitnessTable(&unk_100083AE4, &type metadata for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8958);
  }
  return result;
}

unint64_t sub_10003C674()
{
  unint64_t result;

  result = qword_1000C8960;
  if (!qword_1000C8960)
  {
    result = swift_getWitnessTable(&unk_100083B9C, &type metadata for ViewServiceInput.ProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8960);
  }
  return result;
}

unint64_t sub_10003C6BC()
{
  unint64_t result;

  result = qword_1000C8968;
  if (!qword_1000C8968)
  {
    result = swift_getWitnessTable(&unk_100083CA4, &type metadata for ViewServiceInput.MrResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8968);
  }
  return result;
}

unint64_t sub_10003C704()
{
  unint64_t result;

  result = qword_1000C8970;
  if (!qword_1000C8970)
  {
    result = swift_getWitnessTable(&unk_100083D5C, &type metadata for ViewServiceInput.MediaTransferStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8970);
  }
  return result;
}

unint64_t sub_10003C74C()
{
  unint64_t result;

  result = qword_1000C8978;
  if (!qword_1000C8978)
  {
    result = swift_getWitnessTable(&unk_100083E14, &type metadata for ViewServiceInput.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8978);
  }
  return result;
}

unint64_t sub_10003C794()
{
  unint64_t result;

  result = qword_1000C8980;
  if (!qword_1000C8980)
  {
    result = swift_getWitnessTable(&unk_100083ECC, &type metadata for ViewServiceInput.CardModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8980);
  }
  return result;
}

unint64_t sub_10003C7DC()
{
  unint64_t result;

  result = qword_1000C8988;
  if (!qword_1000C8988)
  {
    result = swift_getWitnessTable(&unk_100083F84, &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8988);
  }
  return result;
}

unint64_t sub_10003C824()
{
  unint64_t result;

  result = qword_1000C8990;
  if (!qword_1000C8990)
  {
    result = swift_getWitnessTable(&unk_10008403C, &type metadata for ViewServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8990);
  }
  return result;
}

unint64_t sub_10003C86C()
{
  unint64_t result;

  result = qword_1000C8998;
  if (!qword_1000C8998)
  {
    result = swift_getWitnessTable(&unk_1000840F4, &type metadata for ViewServiceOutput.NearbySharingInteractionViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8998);
  }
  return result;
}

unint64_t sub_10003C8B4()
{
  unint64_t result;

  result = qword_1000C89A0;
  if (!qword_1000C89A0)
  {
    result = swift_getWitnessTable(&unk_1000841AC, &type metadata for ViewServiceOutput.XpcConnectionEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89A0);
  }
  return result;
}

unint64_t sub_10003C8FC()
{
  unint64_t result;

  result = qword_1000C89A8;
  if (!qword_1000C89A8)
  {
    result = swift_getWitnessTable(&unk_100084304, &type metadata for ViewServiceOutput.CardEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89A8);
  }
  return result;
}

unint64_t sub_10003C944()
{
  unint64_t result;

  result = qword_1000C89B0;
  if (!qword_1000C89B0)
  {
    result = swift_getWitnessTable(&unk_1000843BC, &type metadata for ViewServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89B0);
  }
  return result;
}

unint64_t sub_10003C98C()
{
  unint64_t result;

  result = qword_1000C89B8;
  if (!qword_1000C89B8)
  {
    result = swift_getWitnessTable(&unk_1000844C4, &type metadata for CardMode.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89B8);
  }
  return result;
}

unint64_t sub_10003C9D4()
{
  unint64_t result;

  result = qword_1000C89C0;
  if (!qword_1000C89C0)
  {
    result = swift_getWitnessTable(&unk_1000845CC, &type metadata for CardMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89C0);
  }
  return result;
}

unint64_t sub_10003CA1C()
{
  unint64_t result;

  result = qword_1000C89C8;
  if (!qword_1000C89C8)
  {
    result = swift_getWitnessTable(&unk_1000844EC, &type metadata for CardMode.AccessoryViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89C8);
  }
  return result;
}

unint64_t sub_10003CA64()
{
  unint64_t result;

  result = qword_1000C89D0;
  if (!qword_1000C89D0)
  {
    result = swift_getWitnessTable(&unk_100084514, &type metadata for CardMode.AccessoryViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89D0);
  }
  return result;
}

unint64_t sub_10003CAAC()
{
  unint64_t result;

  result = qword_1000C89D8;
  if (!qword_1000C89D8)
  {
    result = swift_getWitnessTable(&unk_100084434, &type metadata for CardMode.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89D8);
  }
  return result;
}

unint64_t sub_10003CAF4()
{
  unint64_t result;

  result = qword_1000C89E0;
  if (!qword_1000C89E0)
  {
    result = swift_getWitnessTable(&unk_10008445C, &type metadata for CardMode.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89E0);
  }
  return result;
}

unint64_t sub_10003CB3C()
{
  unint64_t result;

  result = qword_1000C89E8;
  if (!qword_1000C89E8)
  {
    result = swift_getWitnessTable(&unk_1000843E4, &type metadata for CardMode.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89E8);
  }
  return result;
}

unint64_t sub_10003CB84()
{
  unint64_t result;

  result = qword_1000C89F0;
  if (!qword_1000C89F0)
  {
    result = swift_getWitnessTable(&unk_10008440C, &type metadata for CardMode.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89F0);
  }
  return result;
}

unint64_t sub_10003CBCC()
{
  unint64_t result;

  result = qword_1000C89F8;
  if (!qword_1000C89F8)
  {
    result = swift_getWitnessTable(&unk_10008453C, &type metadata for CardMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C89F8);
  }
  return result;
}

unint64_t sub_10003CC14()
{
  unint64_t result;

  result = qword_1000C8A00;
  if (!qword_1000C8A00)
  {
    result = swift_getWitnessTable(&unk_100084564, &type metadata for CardMode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A00);
  }
  return result;
}

unint64_t sub_10003CC5C()
{
  unint64_t result;

  result = qword_1000C8A08;
  if (!qword_1000C8A08)
  {
    result = swift_getWitnessTable(&unk_100084274, &type metadata for ViewServiceOutput.CardEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A08);
  }
  return result;
}

unint64_t sub_10003CCA4()
{
  unint64_t result;

  result = qword_1000C8A10;
  if (!qword_1000C8A10)
  {
    result = swift_getWitnessTable(&unk_10008429C, &type metadata for ViewServiceOutput.CardEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A10);
  }
  return result;
}

unint64_t sub_10003CCEC()
{
  unint64_t result;

  result = qword_1000C8A18;
  if (!qword_1000C8A18)
  {
    result = swift_getWitnessTable(&unk_100084224, &type metadata for ViewServiceOutput.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A18);
  }
  return result;
}

unint64_t sub_10003CD34()
{
  unint64_t result;

  result = qword_1000C8A20;
  if (!qword_1000C8A20)
  {
    result = swift_getWitnessTable(&unk_10008424C, &type metadata for ViewServiceOutput.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A20);
  }
  return result;
}

unint64_t sub_10003CD7C()
{
  unint64_t result;

  result = qword_1000C8A28;
  if (!qword_1000C8A28)
  {
    result = swift_getWitnessTable(&unk_1000841D4, &type metadata for ViewServiceOutput.PingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A28);
  }
  return result;
}

unint64_t sub_10003CDC4()
{
  unint64_t result;

  result = qword_1000C8A30;
  if (!qword_1000C8A30)
  {
    result = swift_getWitnessTable(&unk_1000841FC, &type metadata for ViewServiceOutput.PingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A30);
  }
  return result;
}

unint64_t sub_10003CE0C()
{
  unint64_t result;

  result = qword_1000C8A38;
  if (!qword_1000C8A38)
  {
    result = swift_getWitnessTable(&unk_10008411C, &type metadata for ViewServiceOutput.XpcConnectionEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A38);
  }
  return result;
}

unint64_t sub_10003CE54()
{
  unint64_t result;

  result = qword_1000C8A40;
  if (!qword_1000C8A40)
  {
    result = swift_getWitnessTable(&unk_100084144, &type metadata for ViewServiceOutput.XpcConnectionEventCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A40);
  }
  return result;
}

unint64_t sub_10003CE9C()
{
  unint64_t result;

  result = qword_1000C8A48;
  if (!qword_1000C8A48)
  {
    result = swift_getWitnessTable(&unk_100084064, &type metadata for ViewServiceOutput.NearbySharingInteractionViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A48);
  }
  return result;
}

unint64_t sub_10003CEE4()
{
  unint64_t result;

  result = qword_1000C8A50;
  if (!qword_1000C8A50)
  {
    result = swift_getWitnessTable(&unk_10008408C, &type metadata for ViewServiceOutput.NearbySharingInteractionViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A50);
  }
  return result;
}

unint64_t sub_10003CF2C()
{
  unint64_t result;

  result = qword_1000C8A58;
  if (!qword_1000C8A58)
  {
    result = swift_getWitnessTable(&unk_10008432C, &type metadata for ViewServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A58);
  }
  return result;
}

unint64_t sub_10003CF74()
{
  unint64_t result;

  result = qword_1000C8A60;
  if (!qword_1000C8A60)
  {
    result = swift_getWitnessTable(&unk_100084354, &type metadata for ViewServiceOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A60);
  }
  return result;
}

unint64_t sub_10003CFBC()
{
  unint64_t result;

  result = qword_1000C8A68;
  if (!qword_1000C8A68)
  {
    result = swift_getWitnessTable(&unk_100083EF4, &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A68);
  }
  return result;
}

unint64_t sub_10003D004()
{
  unint64_t result;

  result = qword_1000C8A70;
  if (!qword_1000C8A70)
  {
    result = swift_getWitnessTable(&unk_100083F1C, &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A70);
  }
  return result;
}

unint64_t sub_10003D04C()
{
  unint64_t result;

  result = qword_1000C8A78;
  if (!qword_1000C8A78)
  {
    result = swift_getWitnessTable(&unk_100083E3C, &type metadata for ViewServiceInput.CardModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A78);
  }
  return result;
}

unint64_t sub_10003D094()
{
  unint64_t result;

  result = qword_1000C8A80;
  if (!qword_1000C8A80)
  {
    result = swift_getWitnessTable(&unk_100083E64, &type metadata for ViewServiceInput.CardModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A80);
  }
  return result;
}

unint64_t sub_10003D0DC()
{
  unint64_t result;

  result = qword_1000C8A88;
  if (!qword_1000C8A88)
  {
    result = swift_getWitnessTable(&unk_100083D84, &type metadata for ViewServiceInput.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A88);
  }
  return result;
}

unint64_t sub_10003D124()
{
  unint64_t result;

  result = qword_1000C8A90;
  if (!qword_1000C8A90)
  {
    result = swift_getWitnessTable(&unk_100083DAC, &type metadata for ViewServiceInput.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A90);
  }
  return result;
}

unint64_t sub_10003D16C()
{
  unint64_t result;

  result = qword_1000C8A98;
  if (!qword_1000C8A98)
  {
    result = swift_getWitnessTable(&unk_100083CCC, &type metadata for ViewServiceInput.MediaTransferStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8A98);
  }
  return result;
}

unint64_t sub_10003D1B4()
{
  unint64_t result;

  result = qword_1000C8AA0;
  if (!qword_1000C8AA0)
  {
    result = swift_getWitnessTable(&unk_100083CF4, &type metadata for ViewServiceInput.MediaTransferStatusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AA0);
  }
  return result;
}

unint64_t sub_10003D1FC()
{
  unint64_t result;

  result = qword_1000C8AA8;
  if (!qword_1000C8AA8)
  {
    result = swift_getWitnessTable(&unk_100083C14, &type metadata for ViewServiceInput.MrResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AA8);
  }
  return result;
}

unint64_t sub_10003D244()
{
  unint64_t result;

  result = qword_1000C8AB0;
  if (!qword_1000C8AB0)
  {
    result = swift_getWitnessTable(&unk_100083C3C, &type metadata for ViewServiceInput.MrResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AB0);
  }
  return result;
}

unint64_t sub_10003D28C()
{
  unint64_t result;

  result = qword_1000C8AB8;
  if (!qword_1000C8AB8)
  {
    result = swift_getWitnessTable(&unk_100083BC4, &type metadata for ViewServiceInput.PingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AB8);
  }
  return result;
}

unint64_t sub_10003D2D4()
{
  unint64_t result;

  result = qword_1000C8AC0;
  if (!qword_1000C8AC0)
  {
    result = swift_getWitnessTable(&unk_100083BEC, &type metadata for ViewServiceInput.PingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AC0);
  }
  return result;
}

unint64_t sub_10003D31C()
{
  unint64_t result;

  result = qword_1000C8AC8;
  if (!qword_1000C8AC8)
  {
    result = swift_getWitnessTable(&unk_100083B0C, &type metadata for ViewServiceInput.ProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AC8);
  }
  return result;
}

unint64_t sub_10003D364()
{
  unint64_t result;

  result = qword_1000C8AD0;
  if (!qword_1000C8AD0)
  {
    result = swift_getWitnessTable(&unk_100083B34, &type metadata for ViewServiceInput.ProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AD0);
  }
  return result;
}

unint64_t sub_10003D3AC()
{
  unint64_t result;

  result = qword_1000C8AD8;
  if (!qword_1000C8AD8)
  {
    result = swift_getWitnessTable(&unk_100083A54, &type metadata for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AD8);
  }
  return result;
}

unint64_t sub_10003D3F4()
{
  unint64_t result;

  result = qword_1000C8AE0;
  if (!qword_1000C8AE0)
  {
    result = swift_getWitnessTable(&unk_100083A7C, &type metadata for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AE0);
  }
  return result;
}

unint64_t sub_10003D43C()
{
  unint64_t result;

  result = qword_1000C8AE8;
  if (!qword_1000C8AE8)
  {
    result = swift_getWitnessTable(&unk_100083FAC, &type metadata for ViewServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AE8);
  }
  return result;
}

unint64_t sub_10003D484()
{
  unint64_t result;

  result = qword_1000C8AF0;
  if (!qword_1000C8AF0)
  {
    result = swift_getWitnessTable(&unk_100083FD4, &type metadata for ViewServiceInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000C8AF0);
  }
  return result;
}

uint64_t sub_10003D4C8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0xD000000000000016 && a2 == 0x8000000100091070)
  {
    v4 = 0x8000000100091070;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100091070, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x65646F4D64726163 && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D64726163, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x7373696D736964 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7373696D736964, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0xD000000000000013)
  {
    v8 = 0x8000000100091090;
    if (a2 == 0x8000000100091090)
      goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100091090, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0x6E6F70736552726DLL && a2 == 0xEA00000000006573)
  {
    v9 = 0xEA00000000006573;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F70736552726DLL, 0xEA00000000006573, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 1735289200 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1735289200, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73736572676F7270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0xD000000000000026 && a2 == 0x80000001000910B0)
  {
    swift_bridgeObjectRelease(0x80000001000910B0);
    return 7;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026, 0x80000001000910B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_10003D7F8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73616572, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease(0xE900000000000070);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10003D938(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x6E65764564726163 && a2 == 0xE900000000000074)
  {
    v5 = 0xE900000000000074;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65764564726163, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656873696E6966, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1735289200 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1735289200, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x80000001000910E0;
    if (a2 == 0x80000001000910E0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000910E0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100091100)
  {
    swift_bridgeObjectRelease(0x8000000100091100);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100091100, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10003DB44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease(0xE900000000000070);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_10003DC3C(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  sub_10003DE94(40, a1, a2, a3, a4, a5);
}

id sub_10003DC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;

  (*(void (**)(void))(a2 + 24))();
  v3 = v2;
  v4 = objc_allocWithZone((Class)CULogHandle);
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v7 = objc_msgSend(v4, "initWithSubsystem:category:", v5, v6);

  return v7;
}

uint64_t sub_10003DCFC(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C6118);
}

uint64_t sub_10003DD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;

  v4 = sub_10003E0F0(a1, a2);
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v9 = v8;
  swift_bridgeObjectRetain(v6);
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v9);
  return v4;
}

uint64_t sub_10003DDA0()
{
  return 0;
}

void sub_10003DDAC(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  sub_10003DDD8(40, a1, a2, a3, a4, a5);
}

uint64_t sub_10003DDCC(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C61C8);
}

void sub_10003DDD8(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;

  if ((a4 & 1) != 0)
    v11 = sub_10003E1E4(a5, a6);
  else
    v11 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  v12 = v11;
  sub_10003E434(a2, a3, a5, a6);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v12, "ulog:message:", a1, v15);

}

void sub_10003DE94(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;

  if ((a4 & 1) != 0)
    v11 = sub_10003E144(a5, a6);
  else
    v11 = sub_10003E054(a5, a6);
  v12 = v11;
  sub_10003E434(a2, a3, a5, a6);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v12, "ulog:message:", a1, v15);

}

uint64_t sub_10003DF3C(uint64_t a1)
{
  uint64_t MetatypeMetadata;
  uint64_t v3;

  v3 = a1;
  MetatypeMetadata = swift_getMetatypeMetadata();
  return String.init<A>(describing:)(&v3, MetatypeMetadata);
}

uint64_t sub_10003DF6C(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C8B30);
}

uint64_t sub_10003DF7C(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C8B38);
}

uint64_t sub_10003DF8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = a1;
  v1 = sub_100004B18(&qword_1000C8B28);
  v2 = String.init<A>(describing:)(&v15, v1);
  v4 = v3;
  v5 = sub_10003E348(60, 0xE100000000000000, v2, v3);
  if ((v6 & 1) == 0)
  {
    v7 = String.subscript.getter(15, v5, v2, v4);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease(v4);
    v2 = static String._fromSubstring(_:)(v7, v9, v11, v13);
    swift_bridgeObjectRelease(v13);
  }
  return v2;
}

id sub_10003E054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;

  sub_10003E0F0(a1, a2);
  v3 = v2;
  v4 = objc_allocWithZone((Class)CULogHandle);
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v7 = objc_msgSend(v4, "initWithSubsystem:category:", v5, v6);

  return v7;
}

uint64_t sub_10003E0F0(uint64_t a1, uint64_t a2)
{
  uint64_t MetatypeMetadata;
  uint64_t v5;

  if (((*(uint64_t (**)(void))(a2 + 8))() & 1) != 0)
    return sub_10003E288(a1);
  v5 = a1;
  MetatypeMetadata = swift_getMetatypeMetadata(a1);
  return String.init<A>(describing:)(&v5, MetatypeMetadata);
}

id sub_10003E144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;

  sub_10003E0F0(a1, a2);
  v3 = v2;
  v4 = objc_allocWithZone((Class)CULogHandle);
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v7 = objc_msgSend(v4, "initWithSubsystem:category:logFlags:", v5, v6, 0x10000000);

  return v7;
}

id sub_10003E1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;

  (*(void (**)(void))(a2 + 24))();
  v3 = v2;
  v4 = objc_allocWithZone((Class)CULogHandle);
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v7 = objc_msgSend(v4, "initWithSubsystem:category:logFlags:", v5, v6, 0x10000000);

  return v7;
}

uint64_t sub_10003E288(uint64_t a1)
{
  uint64_t MetatypeMetadata;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = a1;
  MetatypeMetadata = swift_getMetatypeMetadata(a1);
  v2 = String.init<A>(describing:)(&v15, MetatypeMetadata);
  v4 = v3;
  v5 = sub_10003E348(60, 0xE100000000000000, v2, v3);
  if ((v6 & 1) == 0)
  {
    v7 = String.subscript.getter(15, v5, v2, v4);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease(v4);
    v2 = static String._fromSubstring(_:)(v7, v9, v11, v13);
    swift_bridgeObjectRelease(v13);
  }
  return v2;
}

unint64_t sub_10003E348(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v9 = 4 * v4;
  v10 = 15;
  while (1)
  {
    v11 = String.subscript.getter(v10, a3, a4);
    v13 = v12;
    if (v11 == a1 && v12 == a2)
      break;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a1, a2, 0);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) != 0)
      return v10;
    v10 = String.index(after:)(v10, a3, a4);
    if (v9 == v10 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease(a2);
  return v10;
}

uint64_t sub_10003E434(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v12;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  if (v7)
    v8 = v6;
  else
    v8 = 0;
  if (v7)
    v9 = v7;
  else
    v9 = 0xE000000000000000;
  v12 = v8;
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  return v12;
}

uint64_t sub_10003E4B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = a1;
  v1 = sub_100004B18(&qword_1000C8B20);
  v2 = String.init<A>(describing:)(&v15, v1);
  v4 = v3;
  v5 = sub_10003E348(60, 0xE100000000000000, v2, v3);
  if ((v6 & 1) == 0)
  {
    v7 = String.subscript.getter(15, v5, v2, v4);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease(v4);
    v2 = static String._fromSubstring(_:)(v7, v9, v11, v13);
    swift_bridgeObjectRelease(v13);
  }
  return v2;
}

uint64_t sub_10003E580(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C8B08);
}

uint64_t sub_10003E590(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C8B00);
}

uint64_t sub_10003E5A0(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C8AF8);
}

uint64_t sub_10003E5AC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = a1;
  v3 = sub_100004B18(a3);
  v4 = String.init<A>(describing:)(&v17, v3);
  v6 = v5;
  v7 = sub_10003E348(60, 0xE100000000000000, v4, v5);
  if ((v8 & 1) == 0)
  {
    v9 = String.subscript.getter(15, v7, v4, v6);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    swift_bridgeObjectRelease(v6);
    v4 = static String._fromSubstring(_:)(v9, v11, v13, v15);
    swift_bridgeObjectRelease(v15);
  }
  return v4;
}

uint64_t sub_10003E674(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C6120);
}

uint64_t sub_10003E684(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = a1;
  v1 = sub_100004B18(&qword_1000C8B10);
  v2 = String.init<A>(describing:)(&v15, v1);
  v4 = v3;
  v5 = sub_10003E348(60, 0xE100000000000000, v2, v3);
  if ((v6 & 1) == 0)
  {
    v7 = String.subscript.getter(15, v5, v2, v4);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease(v4);
    v2 = static String._fromSubstring(_:)(v7, v9, v11, v13);
    swift_bridgeObjectRelease(v13);
  }
  return v2;
}

uint64_t sub_10003E750(uint64_t a1, uint64_t a2)
{
  return sub_10003E5AC(a1, a2, &qword_1000C8B18);
}

void sub_10003E75C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10003E79C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003E808 + 4 * byte_100084C05[a2]))(0x746867696CLL);
}

uint64_t sub_10003E808(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746867696CLL && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746867696CLL, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_10003E8BC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10003E90C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003E978 + 4 * byte_100084C0F[a2]))(0x656369766564);
}

uint64_t sub_10003E978(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656369766564 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656369766564, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_10003EA18(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x74756F656D6974;
  else
    v3 = 0x6E6F74747562;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x74756F656D6974;
  else
    v5 = 0x6E6F74747562;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003EAB8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x737569646172;
  else
    v3 = 0x656C797473;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x737569646172;
  else
    v5 = 0x656C797473;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003EB54(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x72656E6E6162;
  else
    v3 = 0x6572757472657061;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x72656E6E6162;
  else
    v5 = 0x6572757472657061;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003EBF4(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000014;
  else
    v3 = 0x74696D69786F7270;
  if (v2)
    v4 = 0xED00006472614379;
  else
    v4 = 0x800000010008EE70;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000014;
  else
    v5 = 0x74696D69786F7270;
  if ((a2 & 1) != 0)
    v6 = 0x800000010008EE70;
  else
    v6 = 0xED00006472614379;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10003ECA8(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10003ECF8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656369766564, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_10003ED70(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10003EDB0(uint64_t a1)
{
  String.hash(into:)(a1, 0x656369766564, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_10003EE14(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10003EE60()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x656369766564, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10003EED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004B18(&qword_1000CB008);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100043FE4(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10003EFE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  char v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100004B18(qword_1000CB010);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (id *)(a1 + 40);
  while (1)
  {
    v7 = *(_BYTE *)v6;
    v8 = *(v6 - 1);
    result = sub_100044078((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    *(_BYTE *)(v4[7] + result) = v7;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10003F0E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for SharingDefaults()
{
  return objc_opt_self(_TtC13PCViewService15SharingDefaults);
}

_QWORD *sub_10003F130()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  return v0;
}

uint64_t sub_10003F1BC()
{
  uint64_t v0;

  sub_10003F130();
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for BannerDefaults()
{
  return objc_opt_self(_TtC13PCViewService14BannerDefaults);
}

uint64_t sub_10003F1FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_10003F250()
{
  uint64_t v0;

  sub_10003F1FC();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for NearbydDefaults()
{
  return objc_opt_self(_TtC13PCViewService15NearbydDefaults);
}

_QWORD *sub_10003F290()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for Defaults();
  v1 = swift_allocObject(v0, 1488, 7);
  result = sub_1000407D4();
  qword_1000DF570 = v1;
  return result;
}

uint64_t sub_10003F2C8(char *a1, char *a2)
{
  return sub_10003EA18(*a1, *a2);
}

Swift::Int sub_10003F2D4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x74756F656D6974;
  else
    v2 = 0x6E6F74747562;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10003F350(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x74756F656D6974;
  else
    v2 = 0x6E6F74747562;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10003F3A8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x74756F656D6974;
  else
    v3 = 0x6E6F74747562;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003F420@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000B2328;
  return sub_10003F8C0(v2, a1, a2);
}

void sub_10003F42C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6E6F74747562;
  if (*v1)
    v2 = 0x74756F656D6974;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10003F468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100044658();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003F4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100044658();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10003F510(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B2198;
}

uint64_t sub_10003F520(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003F554 + 4 * byte_100084C23[a1]))(0x7974697669746361, 0xE800000000000000);
}

uint64_t sub_10003F554()
{
  return 0x656369766564;
}

unint64_t sub_10003F568()
{
  return 0xD000000000000012;
}

uint64_t sub_10003F5A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003F5D8 + 4 * byte_100084C28[a1]))(0x7974697669746361, 0xE800000000000000);
}

uint64_t sub_10003F5D8()
{
  return 0x656369766564;
}

unint64_t sub_10003F5EC()
{
  return 0xD000000000000012;
}

void sub_10003F628(char *a1)
{
  sub_10003E8BC(*a1);
}

void sub_10003F634()
{
  char *v0;

  sub_10003ECA8(*v0);
}

void sub_10003F63C(uint64_t a1)
{
  char *v1;

  sub_10003ED70(a1, *v1);
}

void sub_10003F644(uint64_t a1)
{
  char *v1;

  sub_10003EE14(a1, *v1);
}

unint64_t sub_10003F64C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000B2378;
  result = sub_100044548(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10003F680@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10003F5A4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10003F6A8(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B21C0;
}

uint64_t sub_10003F6B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100044614();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003F714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100044614();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10003F760()
{
  unsigned __int8 *v0;

  return sub_10003F520(*v0);
}

uint64_t sub_10003F768(char *a1, char *a2)
{
  return sub_10003EAB8(*a1, *a2);
}

Swift::Int sub_10003F774()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x737569646172;
  else
    v2 = 0x656C797473;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10003F7EC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x737569646172;
  else
    v2 = 0x656C797473;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10003F840(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x737569646172;
  else
    v3 = 0x656C797473;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003F8B4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000B2410;
  return sub_10003F8C0(v2, a1, a2);
}

uint64_t sub_10003F8C0@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_10003F918(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656C797473;
  if (*v1)
    v2 = 0x737569646172;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10003F950(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B2170;
}

uint64_t sub_10003F960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000445D0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003F9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000445D0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10003FA08(char *a1)
{
  sub_10003E75C(*a1);
}

void sub_10003FA14()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10003FA58()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746867696CLL, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_10003FAD0()
{
  __asm { BR              X10 }
}

uint64_t sub_10003FB04(uint64_t a1)
{
  String.hash(into:)(a1, 0x746867696CLL, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_10003FB68(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10003FBA8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746867696CLL, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10003FC20@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_1000B2460;
  result = sub_100044548(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_10003FC54()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10003FC7C + 4 * byte_100084C3C[*v0]))();
}

void sub_10003FC7C(_QWORD *a1@<X8>)
{
  *a1 = 0x746867696CLL;
  a1[1] = 0xE500000000000000;
}

void sub_10003FC94(_QWORD *a1@<X8>)
{
  *a1 = 0x6D756964656DLL;
  a1[1] = 0xE600000000000000;
}

void sub_10003FCAC(_QWORD *a1@<X8>)
{
  *a1 = 0x7976616568;
  a1[1] = 0xE500000000000000;
}

void sub_10003FCC4(_QWORD *a1@<X8>)
{
  *a1 = 0x6469676972;
  a1[1] = 0xE500000000000000;
}

void sub_10003FCDC(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B21E8;
}

uint64_t sub_10003FCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004458C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10003FD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004458C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10003FD94()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003FDBC + 4 * byte_100084C41[*v0]))(1952870259, 0xE400000000000000);
}

uint64_t sub_10003FDBC()
{
  return 0x746867696CLL;
}

uint64_t sub_10003FDD0()
{
  return 0x6D756964656DLL;
}

uint64_t sub_10003FDE4()
{
  return 0x7976616568;
}

uint64_t sub_10003FDF8()
{
  return 0x6469676972;
}

_QWORD *sub_10003FE0C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_release(v0[23]);
  swift_release(v0[24]);
  swift_release(v0[25]);
  swift_release(v0[26]);
  swift_release(v0[27]);
  swift_release(v0[28]);
  swift_release(v0[29]);
  swift_release(v0[30]);
  swift_release(v0[31]);
  swift_release(v0[32]);
  swift_release(v0[33]);
  swift_release(v0[34]);
  swift_release(v0[35]);
  swift_release(v0[36]);
  swift_release(v0[37]);
  swift_release(v0[38]);
  swift_release(v0[39]);
  swift_release(v0[40]);
  swift_release(v0[41]);
  swift_release(v0[42]);
  swift_release(v0[43]);
  swift_release(v0[44]);
  swift_release(v0[45]);
  swift_release(v0[46]);
  swift_release(v0[47]);
  swift_release(v0[48]);
  swift_release(v0[49]);
  swift_release(v0[50]);
  swift_release(v0[51]);
  swift_release(v0[52]);
  swift_release(v0[53]);
  swift_release(v0[54]);
  swift_release(v0[55]);
  swift_release(v0[56]);
  swift_release(v0[57]);
  swift_release(v0[58]);
  swift_release(v0[59]);
  swift_release(v0[60]);
  swift_release(v0[61]);
  swift_release(v0[62]);
  swift_release(v0[63]);
  swift_release(v0[64]);
  swift_release(v0[65]);
  swift_release(v0[66]);
  swift_release(v0[67]);
  swift_release(v0[68]);
  swift_release(v0[69]);
  swift_release(v0[70]);
  swift_release(v0[71]);
  swift_release(v0[72]);
  swift_release(v0[73]);
  swift_release(v0[74]);
  swift_release(v0[75]);
  swift_release(v0[76]);
  swift_release(v0[77]);
  swift_release(v0[78]);
  swift_release(v0[79]);
  swift_release(v0[80]);
  swift_release(v0[81]);
  swift_release(v0[82]);
  swift_release(v0[83]);
  swift_release(v0[84]);
  swift_release(v0[85]);
  swift_release(v0[86]);
  swift_release(v0[87]);
  swift_release(v0[88]);
  swift_release(v0[89]);
  swift_release(v0[90]);
  swift_release(v0[91]);
  swift_release(v0[92]);
  swift_release(v0[93]);
  swift_release(v0[94]);
  swift_release(v0[95]);
  swift_release(v0[96]);
  swift_release(v0[97]);
  swift_release(v0[98]);
  swift_release(v0[99]);
  swift_release(v0[100]);
  swift_release(v0[101]);
  swift_release(v0[102]);
  swift_release(v0[103]);
  swift_release(v0[104]);
  swift_release(v0[105]);
  swift_release(v0[106]);
  swift_release(v0[107]);
  swift_release(v0[108]);
  swift_release(v0[109]);
  swift_release(v0[110]);
  swift_release(v0[111]);
  swift_release(v0[112]);
  swift_release(v0[113]);
  swift_release(v0[114]);
  swift_release(v0[115]);
  swift_release(v0[116]);
  swift_release(v0[117]);
  swift_release(v0[118]);
  swift_release(v0[119]);
  swift_release(v0[120]);
  swift_release(v0[121]);
  swift_release(v0[122]);
  swift_release(v0[123]);
  swift_release(v0[124]);
  swift_release(v0[125]);
  swift_release(v0[126]);
  swift_release(v0[127]);
  swift_release(v0[128]);
  swift_release(v0[129]);
  swift_release(v0[130]);
  swift_release(v0[131]);
  swift_release(v0[132]);
  swift_release(v0[133]);
  swift_release(v0[134]);
  swift_release(v0[135]);
  swift_release(v0[136]);
  swift_release(v0[137]);
  swift_release(v0[138]);
  swift_release(v0[139]);
  swift_release(v0[140]);
  swift_release(v0[141]);
  swift_release(v0[142]);
  swift_release(v0[143]);
  swift_release(v0[144]);
  swift_release(v0[145]);
  swift_release(v0[146]);
  swift_release(v0[147]);
  swift_release(v0[148]);
  swift_release(v0[149]);
  swift_release(v0[150]);
  swift_release(v0[151]);
  swift_release(v0[152]);
  swift_release(v0[153]);
  swift_release(v0[154]);
  swift_release(v0[155]);
  swift_release(v0[156]);
  swift_release(v0[157]);
  swift_release(v0[158]);
  swift_release(v0[159]);
  swift_release(v0[160]);
  swift_release(v0[161]);
  swift_release(v0[162]);
  swift_release(v0[163]);
  swift_release(v0[164]);
  swift_release(v0[165]);
  swift_release(v0[166]);
  swift_release(v0[167]);
  swift_release(v0[168]);
  swift_release(v0[169]);
  swift_release(v0[170]);
  swift_release(v0[171]);
  swift_release(v0[172]);
  swift_release(v0[173]);
  swift_release(v0[174]);
  swift_release(v0[175]);
  swift_release(v0[176]);
  swift_release(v0[177]);
  swift_release(v0[178]);
  swift_release(v0[179]);
  swift_release(v0[180]);
  swift_release(v0[181]);
  swift_release(v0[182]);
  swift_release(v0[183]);
  swift_release(v0[184]);
  swift_release(v0[185]);
  return v0;
}

uint64_t sub_1000403E0()
{
  uint64_t v0;

  sub_10003FE0C();
  return swift_deallocClassInstance(v0, 1488, 7);
}

uint64_t type metadata accessor for Defaults()
{
  return objc_opt_self(_TtC13PCViewService8Defaults);
}

ValueMetadata *type metadata accessor for Defaults.HapticFeedbackStyle()
{
  return &type metadata for Defaults.HapticFeedbackStyle;
}

ValueMetadata *type metadata accessor for Defaults.BlurInitType()
{
  return &type metadata for Defaults.BlurInitType;
}

uint64_t _s13PCViewService8DefaultsC16ApertureViewTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100040498 + 4 * byte_100084C4B[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000404CC + 4 * byte_100084C46[v4]))();
}

uint64_t sub_1000404CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000404D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000404DCLL);
  return result;
}

uint64_t sub_1000404E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000404F0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000404F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000404FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Defaults.ApertureViewType()
{
  return &type metadata for Defaults.ApertureViewType;
}

uint64_t _s13PCViewService8DefaultsC15ContinueTriggerOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100040564 + 4 * byte_100084C55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100040598 + 4 * byte_100084C50[v4]))();
}

uint64_t sub_100040598(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000405A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000405A8);
  return result;
}

uint64_t sub_1000405B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000405BCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000405C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000405C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Defaults.ContinueTrigger()
{
  return &type metadata for Defaults.ContinueTrigger;
}

uint64_t sub_1000405E4()
{
  return sub_10004074C(&qword_1000CAF28, &qword_1000CAF30);
}

unint64_t sub_10004060C()
{
  unint64_t result;

  result = qword_1000CAF38;
  if (!qword_1000CAF38)
  {
    result = swift_getWitnessTable(&unk_100085494, &type metadata for Defaults.ContinueTrigger);
    atomic_store(result, (unint64_t *)&qword_1000CAF38);
  }
  return result;
}

uint64_t sub_100040650()
{
  return sub_10004074C(&qword_1000CAF40, &qword_1000CAF48);
}

unint64_t sub_100040678()
{
  unint64_t result;

  result = qword_1000CAF50;
  if (!qword_1000CAF50)
  {
    result = swift_getWitnessTable(&unk_1000855E4, &type metadata for Defaults.ApertureViewType);
    atomic_store(result, (unint64_t *)&qword_1000CAF50);
  }
  return result;
}

uint64_t sub_1000406BC()
{
  return sub_10004074C(&qword_1000CAF58, &qword_1000CAF60);
}

unint64_t sub_1000406E4()
{
  unint64_t result;

  result = qword_1000CAF68;
  if (!qword_1000CAF68)
  {
    result = swift_getWitnessTable(&unk_10008570C, &type metadata for Defaults.BlurInitType);
    atomic_store(result, (unint64_t *)&qword_1000CAF68);
  }
  return result;
}

uint64_t sub_100040728()
{
  return sub_10004074C(&qword_1000CAF70, &qword_1000CAF78);
}

uint64_t sub_10004074C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005F48(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100040790()
{
  unint64_t result;

  result = qword_1000CAF80;
  if (!qword_1000CAF80)
  {
    result = swift_getWitnessTable(&unk_10008585C, &type metadata for Defaults.HapticFeedbackStyle);
    atomic_store(result, (unint64_t *)&qword_1000CAF80);
  }
  return result;
}

_QWORD *sub_1000407D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  id v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  CAMediaTimingFunctionName *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  CAMediaTimingFunctionName v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(char *, uint64_t, uint64_t, uint64_t);
  void (*v181)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void (*v297)(char *, uint64_t, uint64_t, uint64_t);
  NSString *v298;
  void (*v299)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v301;
  uint64_t v302;
  void (*v303)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v304;
  unint64_t v305;
  char *v306;
  unint64_t v307;
  void (*v308)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v309;
  uint64_t v310;
  void (*v311)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v312;
  unint64_t v313;
  CAMediaTimingFunctionName v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;

  v1 = sub_100004B18(&qword_1000C85A0);
  v2 = __chkstk_darwin(v1);
  v319 = (uint64_t)&v301 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v306 = (char *)&v301 - v4;
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v5 = (void *)qword_1000DF658;
  v6 = sub_100004B18(&qword_1000C7B18);
  v7 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 72) = 0;
  v328 = 0xD000000000000014;
  *(_QWORD *)(v7 + 24) = 0xD000000000000014;
  *(_QWORD *)(v7 + 32) = 0x8000000100092B30;
  *(_QWORD *)(v7 + 40) = v5;
  *(_BYTE *)(v7 + 48) = 0;
  v0[2] = v7;
  v8 = sub_100004B18(&qword_1000CAFA8);
  v9 = swift_allocObject(v8, 96, 7);
  *(_QWORD *)(v9 + 16) = 1685217635;
  *(_QWORD *)(v9 + 24) = 0xE400000000000000;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_QWORD *)(v9 + 32) = 0xD00000000000001CLL;
  *(_QWORD *)(v9 + 40) = 0x8000000100092B50;
  v326 = 0xD00000000000001CLL;
  *(_QWORD *)(v9 + 48) = v5;
  *(_BYTE *)(v9 + 56) = 0;
  v0[3] = v9;
  v10 = swift_allocObject(v8, 96, 7);
  *(_QWORD *)(v10 + 16) = 1685217635;
  *(_QWORD *)(v10 + 24) = 0xE400000000000000;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_QWORD *)(v10 + 32) = 0xD00000000000001CLL;
  *(_QWORD *)(v10 + 40) = 0x8000000100092B70;
  *(_QWORD *)(v10 + 48) = v5;
  *(_BYTE *)(v10 + 56) = 0;
  v0[4] = v10;
  v11 = swift_allocObject(v8, 96, 7);
  *(_QWORD *)(v11 + 16) = 1701736302;
  *(_QWORD *)(v11 + 24) = 0xE400000000000000;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_QWORD *)(v11 + 32) = 0xD000000000000023;
  *(_QWORD *)(v11 + 40) = 0x8000000100092B90;
  v314 = (CAMediaTimingFunctionName)0xD000000000000023;
  *(_QWORD *)(v11 + 48) = v5;
  *(_BYTE *)(v11 + 56) = 0;
  v0[5] = v11;
  v12 = swift_allocObject(v8, 96, 7);
  *(_QWORD *)(v12 + 16) = 1701736302;
  *(_QWORD *)(v12 + 24) = 0xE400000000000000;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_QWORD *)(v12 + 32) = 0xD000000000000023;
  *(_QWORD *)(v12 + 40) = 0x8000000100092BC0;
  *(_QWORD *)(v12 + 48) = v5;
  *(_BYTE *)(v12 + 56) = 0;
  v0[6] = v12;
  v13 = swift_allocObject(v8, 96, 7);
  *(_QWORD *)(v13 + 16) = 1685217635;
  *(_QWORD *)(v13 + 24) = 0xE400000000000000;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_QWORD *)(v13 + 32) = 0xD000000000000018;
  *(_QWORD *)(v13 + 40) = 0x8000000100092BF0;
  *(_QWORD *)(v13 + 48) = v5;
  *(_BYTE *)(v13 + 56) = 0;
  v0[7] = v13;
  v14 = swift_allocObject(v8, 96, 7);
  *(_QWORD *)(v14 + 16) = 1685217635;
  *(_QWORD *)(v14 + 24) = 0xE400000000000000;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_QWORD *)(v14 + 32) = 0xD000000000000018;
  *(_QWORD *)(v14 + 40) = 0x8000000100092C10;
  v312 = 0xD000000000000018;
  *(_QWORD *)(v14 + 48) = v5;
  *(_BYTE *)(v14 + 56) = 0;
  v0[8] = v14;
  v15 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  *(_BYTE *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 24) = 0xD000000000000016;
  *(_QWORD *)(v15 + 32) = 0x8000000100092C30;
  *(_QWORD *)(v15 + 40) = v5;
  *(_BYTE *)(v15 + 48) = 0;
  v0[9] = v15;
  v16 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 64) = 0;
  *(_BYTE *)(v16 + 72) = 0;
  v323 = 0xD000000000000017;
  *(_QWORD *)(v16 + 24) = 0xD000000000000017;
  *(_QWORD *)(v16 + 32) = 0x8000000100092C50;
  *(_QWORD *)(v16 + 40) = v5;
  *(_BYTE *)(v16 + 48) = 0;
  v0[10] = v16;
  v17 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v17 + 16) = 1;
  *(_QWORD *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 64) = 0;
  *(_BYTE *)(v17 + 72) = 0;
  v322 = 0xD00000000000001DLL;
  *(_QWORD *)(v17 + 24) = 0xD00000000000001DLL;
  *(_QWORD *)(v17 + 32) = 0x8000000100092C70;
  *(_QWORD *)(v17 + 40) = v5;
  *(_BYTE *)(v17 + 48) = 0;
  v0[11] = v17;
  v18 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v18 + 16) = 1;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_BYTE *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 24) = 0xD00000000000002ALL;
  *(_QWORD *)(v18 + 32) = 0x8000000100092C90;
  *(_QWORD *)(v18 + 40) = v5;
  *(_BYTE *)(v18 + 48) = 0;
  v0[12] = v18;
  v19 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 64) = 0;
  *(_BYTE *)(v19 + 72) = 0;
  *(_QWORD *)(v19 + 24) = 0xD000000000000012;
  *(_QWORD *)(v19 + 32) = 0x8000000100092CC0;
  v320 = 0xD000000000000012;
  *(_QWORD *)(v19 + 40) = v5;
  *(_BYTE *)(v19 + 48) = 0;
  v0[13] = v19;
  v20 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 56) = 0;
  *(_QWORD *)(v20 + 64) = 0;
  *(_BYTE *)(v20 + 72) = 0;
  *(_QWORD *)(v20 + 24) = 0xD000000000000011;
  *(_QWORD *)(v20 + 32) = 0x8000000100092CE0;
  *(_QWORD *)(v20 + 40) = v5;
  *(_BYTE *)(v20 + 48) = 0;
  v0[14] = v20;
  v21 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v21 + 16) = 1;
  *(_QWORD *)(v21 + 56) = 0;
  *(_QWORD *)(v21 + 64) = 0;
  *(_BYTE *)(v21 + 72) = 0;
  *(_QWORD *)(v21 + 24) = 0xD000000000000011;
  *(_QWORD *)(v21 + 32) = 0x8000000100092D00;
  *(_QWORD *)(v21 + 40) = v5;
  *(_BYTE *)(v21 + 48) = 0;
  v0[15] = v21;
  v22 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 64) = 0;
  *(_BYTE *)(v22 + 72) = 0;
  strcpy((char *)(v22 + 24), "debugModifiers");
  *(_BYTE *)(v22 + 39) = -18;
  *(_QWORD *)(v22 + 40) = v5;
  *(_BYTE *)(v22 + 48) = 0;
  v0[16] = v22;
  v23 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v23 + 16) = 1;
  *(_QWORD *)(v23 + 56) = 0;
  *(_QWORD *)(v23 + 64) = 0;
  *(_BYTE *)(v23 + 72) = 0;
  v316 = 0xD000000000000010;
  *(_QWORD *)(v23 + 24) = 0xD000000000000010;
  *(_QWORD *)(v23 + 32) = 0x8000000100092D20;
  *(_QWORD *)(v23 + 40) = v5;
  *(_BYTE *)(v23 + 48) = 0;
  v0[17] = v23;
  v24 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v24 + 16) = 1;
  *(_QWORD *)(v24 + 56) = 0;
  *(_QWORD *)(v24 + 64) = 0;
  *(_BYTE *)(v24 + 72) = 0;
  *(_QWORD *)(v24 + 24) = 0xD000000000000016;
  *(_QWORD *)(v24 + 32) = 0x8000000100092D40;
  v329 = 0xD000000000000016;
  *(_QWORD *)(v24 + 40) = v5;
  *(_BYTE *)(v24 + 48) = 0;
  v0[18] = v24;
  v25 = v5;
  v26 = sub_100004B18(&qword_1000C7E60);
  v27 = swift_allocObject(v26, 80, 7);
  *(_QWORD *)(v27 + 64) = 0;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 16) = 0x4020000000000000;
  *(_QWORD *)(v27 + 24) = 0xD000000000000020;
  *(_QWORD *)(v27 + 32) = 0x8000000100092D60;
  *(_QWORD *)(v27 + 40) = v5;
  *(_BYTE *)(v27 + 48) = 0;
  v0[19] = v27;
  v28 = v25;
  v327 = sub_100004B18(&qword_1000C7CB0);
  v29 = swift_allocObject(v327, 80, 7);
  *(_QWORD *)(v29 + 64) = 0;
  *(_QWORD *)(v29 + 72) = 0;
  *(_QWORD *)(v29 + 56) = 0;
  *(_OWORD *)(v29 + 16) = xmmword_1000858B0;
  *(_QWORD *)(v29 + 32) = 0x8000000100092D90;
  *(_QWORD *)(v29 + 40) = v5;
  *(_BYTE *)(v29 + 48) = 0;
  v0[20] = v29;
  v30 = swift_allocObject(v26, 80, 7);
  *(_QWORD *)(v30 + 64) = 0;
  *(_QWORD *)(v30 + 72) = 0;
  *(_QWORD *)(v30 + 56) = 0;
  v321 = 0xD000000000000013;
  *(_QWORD *)(v30 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v30 + 24) = 0xD000000000000013;
  *(_QWORD *)(v30 + 32) = 0x8000000100092DB0;
  *(_QWORD *)(v30 + 40) = v5;
  *(_BYTE *)(v30 + 48) = 0;
  v0[21] = v30;
  v31 = swift_allocObject(v26, 80, 7);
  *(_QWORD *)(v31 + 64) = 0;
  *(_QWORD *)(v31 + 72) = 0;
  *(_QWORD *)(v31 + 56) = 0;
  *(_QWORD *)(v31 + 16) = 0x403E000000000000;
  *(_QWORD *)(v31 + 24) = 0xD000000000000018;
  *(_QWORD *)(v31 + 32) = 0x8000000100092DD0;
  *(_QWORD *)(v31 + 40) = v5;
  *(_BYTE *)(v31 + 48) = 0;
  v0[22] = v31;
  v310 = v26;
  v32 = swift_allocObject(v26, 80, 7);
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 72) = 0;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 16) = 0x4024000000000000;
  *(_QWORD *)(v32 + 24) = 0xD000000000000016;
  *(_QWORD *)(v32 + 32) = 0x8000000100092DF0;
  *(_QWORD *)(v32 + 40) = v5;
  *(_BYTE *)(v32 + 48) = 0;
  v0[23] = v32;
  v33 = swift_allocObject(v26, 80, 7);
  *(_QWORD *)(v33 + 64) = 0;
  *(_QWORD *)(v33 + 72) = 0;
  *(_QWORD *)(v33 + 56) = 0;
  v305 = 0xD00000000000001ELL;
  *(_QWORD *)(v33 + 16) = 0;
  *(_QWORD *)(v33 + 24) = 0xD00000000000001ELL;
  *(_QWORD *)(v33 + 32) = 0x8000000100092E10;
  *(_QWORD *)(v33 + 40) = v5;
  *(_BYTE *)(v33 + 48) = 0;
  v0[24] = v33;
  v34 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v34 + 16) = 1;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 64) = 0;
  *(_BYTE *)(v34 + 72) = 0;
  v318 = 0xD00000000000001ALL;
  *(_QWORD *)(v34 + 24) = 0xD00000000000001ALL;
  *(_QWORD *)(v34 + 32) = 0x8000000100092E30;
  *(_QWORD *)(v34 + 40) = v5;
  *(_BYTE *)(v34 + 48) = 0;
  v0[25] = v34;
  v35 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v35 + 16) = 0;
  *(_QWORD *)(v35 + 56) = 0;
  *(_QWORD *)(v35 + 64) = 0;
  *(_BYTE *)(v35 + 72) = 0;
  *(_QWORD *)(v35 + 24) = 0xD000000000000012;
  *(_QWORD *)(v35 + 32) = 0x8000000100092E50;
  *(_QWORD *)(v35 + 40) = v5;
  *(_BYTE *)(v35 + 48) = 0;
  v0[26] = v35;
  v36 = v28;
  v37 = sub_100004B18(&qword_1000CAFB0);
  v38 = swift_allocObject(v37, 73, 7);
  *(_BYTE *)(v38 + 16) = 2;
  *(_QWORD *)(v38 + 56) = 0;
  *(_QWORD *)(v38 + 64) = 0;
  *(_BYTE *)(v38 + 72) = 0;
  v313 = 0xD000000000000022;
  *(_QWORD *)(v38 + 24) = 0xD000000000000022;
  *(_QWORD *)(v38 + 32) = 0x8000000100092E70;
  *(_QWORD *)(v38 + 40) = v5;
  *(_BYTE *)(v38 + 48) = 0;
  v0[27] = v38;
  v39 = swift_allocObject(v37, 73, 7);
  *(_BYTE *)(v39 + 16) = 2;
  *(_QWORD *)(v39 + 56) = 0;
  *(_QWORD *)(v39 + 64) = 0;
  *(_BYTE *)(v39 + 72) = 0;
  *(_QWORD *)(v39 + 24) = v323;
  *(_QWORD *)(v39 + 32) = 0x8000000100092EA0;
  *(_QWORD *)(v39 + 40) = v5;
  *(_BYTE *)(v39 + 48) = 0;
  v0[28] = v39;
  v315 = v37;
  v40 = swift_allocObject(v37, 73, 7);
  *(_BYTE *)(v40 + 16) = 2;
  *(_QWORD *)(v40 + 56) = 0;
  *(_QWORD *)(v40 + 64) = 0;
  *(_BYTE *)(v40 + 72) = 0;
  v325 = 0xD000000000000019;
  *(_QWORD *)(v40 + 24) = 0xD000000000000019;
  *(_QWORD *)(v40 + 32) = 0x8000000100092EC0;
  *(_QWORD *)(v40 + 40) = v5;
  *(_BYTE *)(v40 + 48) = 0;
  v0[29] = v40;
  v41 = swift_allocObject(v37, 73, 7);
  *(_BYTE *)(v41 + 16) = 2;
  *(_QWORD *)(v41 + 56) = 0;
  *(_QWORD *)(v41 + 64) = 0;
  *(_BYTE *)(v41 + 72) = 0;
  *(_QWORD *)(v41 + 24) = 0xD000000000000020;
  *(_QWORD *)(v41 + 32) = 0x8000000100092EE0;
  *(_QWORD *)(v41 + 40) = v5;
  *(_BYTE *)(v41 + 48) = 0;
  v0[30] = v41;
  v42 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 56) = 0;
  *(_QWORD *)(v42 + 64) = 0;
  *(_BYTE *)(v42 + 72) = 0;
  v324 = 0xD00000000000001BLL;
  *(_QWORD *)(v42 + 24) = 0xD00000000000001BLL;
  *(_QWORD *)(v42 + 32) = 0x8000000100092F10;
  *(_QWORD *)(v42 + 40) = v5;
  *(_BYTE *)(v42 + 48) = 0;
  v0[31] = v42;
  v43 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v43 + 16) = 1;
  *(_QWORD *)(v43 + 56) = 0;
  *(_QWORD *)(v43 + 64) = 0;
  *(_BYTE *)(v43 + 72) = 0;
  *(_QWORD *)(v43 + 24) = 0xD000000000000020;
  *(_QWORD *)(v43 + 32) = 0x8000000100092F30;
  *(_QWORD *)(v43 + 40) = v5;
  *(_BYTE *)(v43 + 48) = 0;
  v0[32] = v43;
  v44 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v44 + 16) = 0;
  *(_QWORD *)(v44 + 56) = 0;
  *(_QWORD *)(v44 + 64) = 0;
  *(_BYTE *)(v44 + 72) = 0;
  v307 = 0xD000000000000024;
  *(_QWORD *)(v44 + 24) = 0xD000000000000024;
  *(_QWORD *)(v44 + 32) = 0x8000000100092F60;
  *(_QWORD *)(v44 + 40) = v5;
  *(_BYTE *)(v44 + 48) = 0;
  v0[33] = v44;
  v45 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v45 + 16) = 0;
  *(_QWORD *)(v45 + 56) = 0;
  *(_QWORD *)(v45 + 64) = 0;
  *(_BYTE *)(v45 + 72) = 0;
  *(_QWORD *)(v45 + 24) = v326;
  *(_QWORD *)(v45 + 32) = 0x8000000100092F90;
  *(_QWORD *)(v45 + 40) = v5;
  *(_BYTE *)(v45 + 48) = 0;
  v0[34] = v45;
  v46 = v36;
  v47 = sub_100004B18(&qword_1000C7CF0);
  v48 = swift_allocObject(v47, 73, 7);
  *(_BYTE *)(v48 + 16) = 0;
  *(_QWORD *)(v48 + 56) = 0;
  *(_QWORD *)(v48 + 64) = 0;
  *(_BYTE *)(v48 + 72) = 0;
  *(_QWORD *)(v48 + 24) = 0x65756E69746E6F63;
  *(_QWORD *)(v48 + 32) = 0xEF72656767697254;
  *(_QWORD *)(v48 + 40) = v5;
  *(_BYTE *)(v48 + 48) = 0;
  v0[35] = v48;
  v49 = swift_allocObject(v327, 80, 7);
  *(_QWORD *)(v49 + 56) = 0;
  *(_QWORD *)(v49 + 64) = 0;
  *(_QWORD *)(v49 + 72) = 0;
  *(_OWORD *)(v49 + 16) = xmmword_1000858C0;
  *(_QWORD *)(v49 + 32) = 0x8000000100092FB0;
  *(_QWORD *)(v49 + 40) = v5;
  *(_BYTE *)(v49 + 48) = 0;
  v0[36] = v49;
  v50 = v46;
  v51 = sub_10003EED8((uint64_t)&_swiftEmptyArrayStorage);
  v52 = sub_100004B18(&qword_1000CAFB8);
  v53 = swift_allocObject(v52, 80, 7);
  *(_QWORD *)(v53 + 56) = 0;
  *(_QWORD *)(v53 + 64) = 0;
  *(_QWORD *)(v53 + 72) = 0;
  *(_QWORD *)(v53 + 16) = v51;
  *(_QWORD *)(v53 + 24) = 0x6761735564726163;
  *(_QWORD *)(v53 + 32) = 0xEA00000000007365;
  *(_QWORD *)(v53 + 40) = v5;
  *(_BYTE *)(v53 + 48) = 0;
  v0[37] = v53;
  v54 = v50;
  v55 = sub_10003EED8((uint64_t)&_swiftEmptyArrayStorage);
  v56 = swift_allocObject(v52, 80, 7);
  *(_QWORD *)(v56 + 56) = 0;
  *(_QWORD *)(v56 + 64) = 0;
  *(_QWORD *)(v56 + 72) = 0;
  *(_QWORD *)(v56 + 16) = v55;
  *(_QWORD *)(v56 + 24) = 0x67617355746E6968;
  *(_QWORD *)(v56 + 32) = 0xEA00000000007365;
  *(_QWORD *)(v56 + 40) = v5;
  *(_BYTE *)(v56 + 48) = 0;
  v0[38] = v56;
  v57 = v54;
  v58 = sub_10003EED8((uint64_t)&_swiftEmptyArrayStorage);
  v59 = swift_allocObject(v52, 80, 7);
  *(_QWORD *)(v59 + 56) = 0;
  *(_QWORD *)(v59 + 64) = 0;
  *(_QWORD *)(v59 + 72) = 0;
  v60 = v328;
  *(_QWORD *)(v59 + 16) = v58;
  *(_QWORD *)(v59 + 24) = v60;
  *(_QWORD *)(v59 + 32) = 0x8000000100092FE0;
  *(_QWORD *)(v59 + 40) = v5;
  *(_BYTE *)(v59 + 48) = 0;
  v0[39] = v59;
  v61 = v57;
  v62 = sub_10003EED8((uint64_t)&_swiftEmptyArrayStorage);
  v63 = swift_allocObject(v52, 80, 7);
  *(_QWORD *)(v63 + 56) = 0;
  *(_QWORD *)(v63 + 64) = 0;
  *(_QWORD *)(v63 + 72) = 0;
  *(_QWORD *)(v63 + 16) = v62;
  strcpy((char *)(v63 + 24), "transferUsages");
  *(_BYTE *)(v63 + 39) = -18;
  *(_QWORD *)(v63 + 40) = v5;
  *(_BYTE *)(v63 + 48) = 0;
  v0[40] = v63;
  v64 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v64 + 16) = 0;
  *(_QWORD *)(v64 + 56) = 0;
  *(_QWORD *)(v64 + 64) = 0;
  *(_BYTE *)(v64 + 72) = 0;
  v65 = v329;
  *(_QWORD *)(v64 + 24) = v329;
  *(_QWORD *)(v64 + 32) = 0x8000000100093000;
  *(_QWORD *)(v64 + 40) = v5;
  *(_BYTE *)(v64 + 48) = 0;
  v0[41] = v64;
  v66 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v66 + 16) = 0;
  *(_QWORD *)(v66 + 56) = 0;
  *(_QWORD *)(v66 + 64) = 0;
  *(_BYTE *)(v66 + 72) = 0;
  *(_QWORD *)(v66 + 24) = v65;
  *(_QWORD *)(v66 + 32) = 0x8000000100093020;
  *(_QWORD *)(v66 + 40) = v5;
  *(_BYTE *)(v66 + 48) = 0;
  v0[42] = v66;
  v309 = v6;
  v67 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v67 + 16) = 0;
  *(_QWORD *)(v67 + 56) = 0;
  *(_QWORD *)(v67 + 64) = 0;
  *(_BYTE *)(v67 + 72) = 0;
  *(_QWORD *)(v67 + 24) = v325;
  *(_QWORD *)(v67 + 32) = 0x8000000100093040;
  *(_QWORD *)(v67 + 40) = v5;
  *(_BYTE *)(v67 + 48) = 0;
  v0[43] = v67;
  v68 = swift_allocObject(v6, 73, 7);
  *(_BYTE *)(v68 + 16) = 0;
  *(_QWORD *)(v68 + 56) = 0;
  *(_QWORD *)(v68 + 64) = 0;
  *(_BYTE *)(v68 + 72) = 0;
  *(_QWORD *)(v68 + 24) = v320;
  *(_QWORD *)(v68 + 32) = 0x8000000100093060;
  *(_QWORD *)(v68 + 40) = v5;
  *(_BYTE *)(v68 + 48) = 0;
  v0[44] = v68;
  v69 = type metadata accessor for Date(0);
  v308 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56);
  v70 = (uint64_t)v306;
  v308(v306, 1, 1, v69);
  v71 = v319;
  sub_10004469C(v70, v319);
  v72 = v61;
  sub_1000446E4(v70);
  v73 = sub_100004B18(&qword_1000CAFC0);
  v74 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v75 = v74 + *(_QWORD *)(*(_QWORD *)v74 + 136);
  v76 = sub_100004B18(&qword_1000CAFC8);
  v303 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56);
  v302 = v76;
  v303(v75, 1, 1, v76);
  sub_100044724(v71, v74 + *(_QWORD *)(*(_QWORD *)v74 + 104));
  v77 = (_QWORD *)(v74 + *(_QWORD *)(*(_QWORD *)v74 + 112));
  v317 = 0xD000000000000015;
  *v77 = 0xD000000000000015;
  v77[1] = 0x8000000100093080;
  *(_QWORD *)(v74 + *(_QWORD *)(*(_QWORD *)v74 + 120)) = v5;
  *(_BYTE *)(v74 + *(_QWORD *)(*(_QWORD *)v74 + 128)) = 0;
  v0[45] = v74;
  v78 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v308;
  v308((char *)v70, 1, 1, v69);
  sub_10004469C(v70, v71);
  v79 = qword_1000DF658;
  v80 = (id)qword_1000DF658;
  sub_1000446E4(v70);
  v81 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v82 = v303;
  v303(v81 + *(_QWORD *)(*(_QWORD *)v81 + 136), 1, 1, v76);
  v83 = v319;
  sub_100044724(v319, v81 + *(_QWORD *)(*(_QWORD *)v81 + 104));
  v84 = (unint64_t *)(v81 + *(_QWORD *)(*(_QWORD *)v81 + 112));
  *v84 = v329;
  v84[1] = 0x80000001000930A0;
  *(_QWORD *)(v81 + *(_QWORD *)(*(_QWORD *)v81 + 120)) = v79;
  *(_BYTE *)(v81 + *(_QWORD *)(*(_QWORD *)v81 + 128)) = 0;
  v0[46] = v81;
  v85 = v69;
  v304 = v69;
  v78(v70, 1, 1, v69);
  v86 = v78;
  sub_10004469C(v70, v83);
  v87 = qword_1000DF658;
  v88 = (id)qword_1000DF658;
  sub_1000446E4(v70);
  v89 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v90 = v302;
  v91 = v82;
  v82(v89 + *(_QWORD *)(*(_QWORD *)v89 + 136), 1, 1, v302);
  v92 = v319;
  sub_100044724(v319, v89 + *(_QWORD *)(*(_QWORD *)v89 + 104));
  v93 = (_QWORD *)(v89 + *(_QWORD *)(*(_QWORD *)v89 + 112));
  *v93 = 0xD000000000000011;
  v93[1] = 0x80000001000930C0;
  *(_QWORD *)(v89 + *(_QWORD *)(*(_QWORD *)v89 + 120)) = v87;
  *(_BYTE *)(v89 + *(_QWORD *)(*(_QWORD *)v89 + 128)) = 0;
  v0[47] = v89;
  v86(v70, 1, 1, v85);
  sub_10004469C(v70, v92);
  v94 = qword_1000DF658;
  v95 = (id)qword_1000DF658;
  sub_1000446E4(v70);
  v96 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v97 = v90;
  v91(v96 + *(_QWORD *)(*(_QWORD *)v96 + 136), 1, 1, v90);
  v98 = v92;
  sub_100044724(v92, v96 + *(_QWORD *)(*(_QWORD *)v96 + 104));
  v99 = (CAMediaTimingFunctionName *)(v96 + *(_QWORD *)(*(_QWORD *)v96 + 112));
  *v99 = v314;
  v99[1] = (CAMediaTimingFunctionName)0x80000001000930E0;
  *(_QWORD *)(v96 + *(_QWORD *)(*(_QWORD *)v96 + 120)) = v94;
  *(_BYTE *)(v96 + *(_QWORD *)(*(_QWORD *)v96 + 128)) = 0;
  v0[48] = v96;
  v100 = (void *)qword_1000DF658;
  v101 = v310;
  v102 = swift_allocObject(v310, 80, 7);
  *(_QWORD *)(v102 + 56) = 0;
  *(_QWORD *)(v102 + 64) = 0;
  *(_QWORD *)(v102 + 72) = 0;
  v311 = (void (*)(char *, uint64_t, uint64_t, uint64_t))0xD00000000000001FLL;
  *(_QWORD *)(v102 + 16) = 0x40F5180000000000;
  *(_QWORD *)(v102 + 24) = 0xD00000000000001FLL;
  *(_QWORD *)(v102 + 32) = 0x8000000100093110;
  *(_QWORD *)(v102 + 40) = v100;
  *(_BYTE *)(v102 + 48) = 0;
  v0[49] = v102;
  v308((char *)v70, 1, 1, v304);
  sub_10004469C(v70, v98);
  v103 = v100;
  sub_1000446E4(v70);
  v104 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v91(v104 + *(_QWORD *)(*(_QWORD *)v104 + 136), 1, 1, v97);
  sub_100044724(v98, v104 + *(_QWORD *)(*(_QWORD *)v104 + 104));
  v105 = (unint64_t *)(v104 + *(_QWORD *)(*(_QWORD *)v104 + 112));
  v106 = v305;
  *v105 = v305;
  v105[1] = 0x8000000100093130;
  *(_QWORD *)(v104 + *(_QWORD *)(*(_QWORD *)v104 + 120)) = v100;
  *(_BYTE *)(v104 + *(_QWORD *)(*(_QWORD *)v104 + 128)) = 0;
  v0[50] = v104;
  v107 = (void *)qword_1000DF658;
  v108 = swift_allocObject(v327, 80, 7);
  *(_QWORD *)(v108 + 56) = 0;
  *(_QWORD *)(v108 + 64) = 0;
  *(_QWORD *)(v108 + 72) = 0;
  *(_OWORD *)(v108 + 16) = xmmword_1000858D0;
  *(_QWORD *)(v108 + 32) = 0x8000000100093150;
  *(_QWORD *)(v108 + 40) = v107;
  *(_BYTE *)(v108 + 48) = 0;
  v0[51] = v108;
  v109 = swift_allocObject(v315, 73, 7);
  *(_BYTE *)(v109 + 16) = 1;
  *(_QWORD *)(v109 + 56) = 0;
  *(_QWORD *)(v109 + 64) = 0;
  *(_BYTE *)(v109 + 72) = 0;
  *(_QWORD *)(v109 + 24) = v318;
  *(_QWORD *)(v109 + 32) = 0x8000000100093170;
  *(_QWORD *)(v109 + 40) = v107;
  *(_BYTE *)(v109 + 48) = 0;
  v0[52] = v109;
  v110 = v101;
  v111 = swift_allocObject(v101, 80, 7);
  *(_QWORD *)(v111 + 56) = 0;
  *(_QWORD *)(v111 + 64) = 0;
  *(_QWORD *)(v111 + 72) = 0;
  v112 = v321;
  *(_QWORD *)(v111 + 16) = 0xBFF0000000000000;
  *(_QWORD *)(v111 + 24) = v112;
  *(_QWORD *)(v111 + 32) = 0x8000000100093190;
  *(_QWORD *)(v111 + 40) = v107;
  *(_BYTE *)(v111 + 48) = 0;
  v0[53] = v111;
  v113 = swift_allocObject(v101, 80, 7);
  *(_QWORD *)(v113 + 56) = 0;
  *(_QWORD *)(v113 + 64) = 0;
  *(_QWORD *)(v113 + 72) = 0;
  v114 = v328;
  *(_QWORD *)(v113 + 16) = 0xBFF0000000000000;
  *(_QWORD *)(v113 + 24) = v114;
  *(_QWORD *)(v113 + 32) = 0x80000001000931B0;
  *(_QWORD *)(v113 + 40) = v107;
  *(_BYTE *)(v113 + 48) = 0;
  v0[54] = v113;
  v115 = sub_100004B18(&qword_1000CAFD0);
  v116 = swift_allocObject(v115, 73, 7);
  *(_BYTE *)(v116 + 16) = 0;
  *(_QWORD *)(v116 + 56) = 0;
  *(_QWORD *)(v116 + 64) = 0;
  *(_BYTE *)(v116 + 72) = 0;
  v117 = v323;
  *(_QWORD *)(v116 + 24) = v323;
  *(_QWORD *)(v116 + 32) = 0x80000001000931D0;
  *(_QWORD *)(v116 + 40) = v107;
  *(_BYTE *)(v116 + 48) = 0;
  v0[55] = v116;
  v118 = swift_allocObject(v115, 73, 7);
  *(_BYTE *)(v118 + 16) = 1;
  *(_QWORD *)(v118 + 56) = 0;
  *(_QWORD *)(v118 + 64) = 0;
  *(_BYTE *)(v118 + 72) = 0;
  v119 = v312;
  *(_QWORD *)(v118 + 24) = v312;
  *(_QWORD *)(v118 + 32) = 0x80000001000931F0;
  *(_QWORD *)(v118 + 40) = v107;
  *(_BYTE *)(v118 + 48) = 0;
  v0[56] = v118;
  v120 = swift_allocObject(v115, 73, 7);
  *(_BYTE *)(v120 + 16) = 2;
  *(_QWORD *)(v120 + 56) = 0;
  *(_QWORD *)(v120 + 64) = 0;
  *(_BYTE *)(v120 + 72) = 0;
  *(_QWORD *)(v120 + 24) = v117;
  *(_QWORD *)(v120 + 32) = 0x8000000100093210;
  v121 = v117;
  *(_QWORD *)(v120 + 40) = v107;
  *(_BYTE *)(v120 + 48) = 0;
  v0[57] = v120;
  v122 = v107;
  v123 = sub_100004B18(&qword_1000C7C80);
  v124 = swift_allocObject(v123, 96, 7);
  *(_QWORD *)(v124 + 16) = 0;
  *(_QWORD *)(v124 + 24) = 0;
  *(_OWORD *)(v124 + 64) = 0u;
  *(_OWORD *)(v124 + 80) = 0u;
  *(_QWORD *)(v124 + 32) = 0xD000000000000011;
  *(_QWORD *)(v124 + 40) = 0x8000000100093230;
  *(_QWORD *)(v124 + 48) = v107;
  *(_BYTE *)(v124 + 56) = 0;
  v0[58] = v124;
  v319 = v123;
  v125 = swift_allocObject(v123, 96, 7);
  *(_QWORD *)(v125 + 16) = 0;
  *(_QWORD *)(v125 + 24) = 0;
  *(_OWORD *)(v125 + 64) = 0u;
  *(_OWORD *)(v125 + 80) = 0u;
  *(_QWORD *)(v125 + 32) = v329;
  *(_QWORD *)(v125 + 40) = 0x8000000100093250;
  *(_QWORD *)(v125 + 48) = v107;
  *(_BYTE *)(v125 + 56) = 0;
  v0[59] = v125;
  v126 = swift_allocObject(v123, 96, 7);
  *(_QWORD *)(v126 + 16) = 0;
  *(_QWORD *)(v126 + 24) = 0;
  *(_OWORD *)(v126 + 64) = 0u;
  *(_OWORD *)(v126 + 80) = 0u;
  *(_QWORD *)(v126 + 32) = v121;
  *(_QWORD *)(v126 + 40) = 0x8000000100093270;
  *(_QWORD *)(v126 + 48) = v107;
  *(_BYTE *)(v126 + 56) = 0;
  v0[60] = v126;
  v127 = v309;
  v128 = swift_allocObject(v309, 73, 7);
  *(_BYTE *)(v128 + 16) = 0;
  *(_QWORD *)(v128 + 56) = 0;
  *(_QWORD *)(v128 + 64) = 0;
  *(_BYTE *)(v128 + 72) = 0;
  *(_QWORD *)(v128 + 24) = 0xD000000000000025;
  *(_QWORD *)(v128 + 32) = 0x8000000100093290;
  *(_QWORD *)(v128 + 40) = v107;
  *(_BYTE *)(v128 + 48) = 0;
  v0[61] = v128;
  v129 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v129 + 16) = 0;
  *(_QWORD *)(v129 + 56) = 0;
  *(_QWORD *)(v129 + 64) = 0;
  *(_BYTE *)(v129 + 72) = 0;
  v130 = v326;
  *(_QWORD *)(v129 + 24) = v326;
  *(_QWORD *)(v129 + 32) = 0x80000001000932C0;
  *(_QWORD *)(v129 + 40) = v107;
  *(_BYTE *)(v129 + 48) = 0;
  v0[62] = v129;
  v131 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v131 + 16) = 0;
  *(_QWORD *)(v131 + 56) = 0;
  *(_QWORD *)(v131 + 64) = 0;
  *(_BYTE *)(v131 + 72) = 0;
  *(_QWORD *)(v131 + 24) = v311;
  *(_QWORD *)(v131 + 32) = 0x80000001000932E0;
  *(_QWORD *)(v131 + 40) = v107;
  *(_BYTE *)(v131 + 48) = 0;
  v0[63] = v131;
  v132 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v132 + 16) = 0;
  *(_QWORD *)(v132 + 56) = 0;
  *(_QWORD *)(v132 + 64) = 0;
  *(_BYTE *)(v132 + 72) = 0;
  *(_QWORD *)(v132 + 24) = 0xD000000000000011;
  *(_QWORD *)(v132 + 32) = 0x8000000100093300;
  *(_QWORD *)(v132 + 40) = v107;
  *(_BYTE *)(v132 + 48) = 0;
  v0[64] = v132;
  v133 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v133 + 16) = 0;
  *(_QWORD *)(v133 + 56) = 0;
  *(_QWORD *)(v133 + 64) = 0;
  *(_BYTE *)(v133 + 72) = 0;
  strcpy((char *)(v133 + 24), "skipHomeCard");
  *(_BYTE *)(v133 + 37) = 0;
  *(_WORD *)(v133 + 38) = -5120;
  *(_QWORD *)(v133 + 40) = v107;
  *(_BYTE *)(v133 + 48) = 0;
  v0[65] = v133;
  v134 = swift_allocObject(v110, 80, 7);
  *(_QWORD *)(v134 + 56) = 0;
  *(_QWORD *)(v134 + 64) = 0;
  *(_QWORD *)(v134 + 72) = 0;
  *(_QWORD *)(v134 + 16) = 0x4020000000000000;
  *(_QWORD *)(v134 + 24) = v112;
  *(_QWORD *)(v134 + 32) = 0x8000000100093320;
  *(_QWORD *)(v134 + 40) = v107;
  *(_BYTE *)(v134 + 48) = 0;
  v0[66] = v134;
  v135 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v135 + 16) = 0;
  *(_QWORD *)(v135 + 56) = 0;
  *(_QWORD *)(v135 + 64) = 0;
  *(_BYTE *)(v135 + 72) = 0;
  *(_QWORD *)(v135 + 24) = v112;
  *(_QWORD *)(v135 + 32) = 0x8000000100093340;
  *(_QWORD *)(v135 + 40) = v107;
  *(_BYTE *)(v135 + 48) = 0;
  v0[67] = v135;
  v136 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v136 + 16) = 0;
  *(_QWORD *)(v136 + 56) = 0;
  *(_QWORD *)(v136 + 64) = 0;
  *(_BYTE *)(v136 + 72) = 0;
  *(_QWORD *)(v136 + 24) = v324;
  *(_QWORD *)(v136 + 32) = 0x8000000100093360;
  *(_QWORD *)(v136 + 40) = v107;
  *(_BYTE *)(v136 + 48) = 0;
  v0[68] = v136;
  v137 = v110;
  v138 = swift_allocObject(v110, 80, 7);
  *(_QWORD *)(v138 + 56) = 0;
  *(_QWORD *)(v138 + 64) = 0;
  *(_QWORD *)(v138 + 72) = 0;
  *(_QWORD *)(v138 + 16) = 0x3FE0000000000000;
  *(_QWORD *)(v138 + 24) = v106;
  *(_QWORD *)(v138 + 32) = 0x8000000100093380;
  *(_QWORD *)(v138 + 40) = v107;
  *(_BYTE *)(v138 + 48) = 0;
  v0[69] = v138;
  v139 = v122;
  v140 = sub_100004B18(&qword_1000C7BD8);
  v141 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v141 + 56) = 0;
  *(_QWORD *)(v141 + 64) = 0;
  *(_QWORD *)(v141 + 72) = 0;
  *(_QWORD *)(v141 + 16) = 0x3FB999999999999ALL;
  *(_QWORD *)(v141 + 24) = v130;
  *(_QWORD *)(v141 + 32) = 0x80000001000933A0;
  *(_QWORD *)(v141 + 40) = v107;
  *(_BYTE *)(v141 + 48) = 0;
  v0[70] = v141;
  v142 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v142 + 56) = 0;
  *(_QWORD *)(v142 + 64) = 0;
  *(_QWORD *)(v142 + 72) = 0;
  v143 = v322;
  *(_QWORD *)(v142 + 16) = 0x3FB999999999999ALL;
  *(_QWORD *)(v142 + 24) = v143;
  *(_QWORD *)(v142 + 32) = 0x80000001000933C0;
  *(_QWORD *)(v142 + 40) = v107;
  *(_BYTE *)(v142 + 48) = 0;
  v0[71] = v142;
  v144 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v144 + 56) = 0;
  *(_QWORD *)(v144 + 64) = 0;
  *(_QWORD *)(v144 + 72) = 0;
  v145 = v313;
  *(_QWORD *)(v144 + 16) = 0x3FF3333333333333;
  *(_QWORD *)(v144 + 24) = v145;
  *(_QWORD *)(v144 + 32) = 0x80000001000933E0;
  *(_QWORD *)(v144 + 40) = v107;
  *(_BYTE *)(v144 + 48) = 0;
  v0[72] = v144;
  v146 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v146 + 56) = 0;
  *(_QWORD *)(v146 + 64) = 0;
  *(_QWORD *)(v146 + 72) = 0;
  v147 = v314;
  *(_QWORD *)(v146 + 16) = 0xBFF4000000000000;
  *(_QWORD *)(v146 + 24) = v147;
  *(_QWORD *)(v146 + 32) = 0x8000000100093410;
  *(_QWORD *)(v146 + 40) = v107;
  *(_BYTE *)(v146 + 48) = 0;
  v0[73] = v146;
  v148 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v148 + 56) = 0;
  *(_QWORD *)(v148 + 64) = 0;
  *(_QWORD *)(v148 + 72) = 0;
  *(_QWORD *)(v148 + 16) = 0x4039000000000000;
  *(_QWORD *)(v148 + 24) = 0xD000000000000021;
  *(_QWORD *)(v148 + 32) = 0x8000000100093440;
  *(_QWORD *)(v148 + 40) = v107;
  *(_BYTE *)(v148 + 48) = 0;
  v0[74] = v148;
  v149 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v149 + 56) = 0;
  *(_QWORD *)(v149 + 64) = 0;
  *(_QWORD *)(v149 + 72) = 0;
  *(_QWORD *)(v149 + 16) = 0x4039000000000000;
  *(_QWORD *)(v149 + 24) = v145;
  *(_QWORD *)(v149 + 32) = 0x8000000100093470;
  *(_QWORD *)(v149 + 40) = v107;
  *(_BYTE *)(v149 + 48) = 0;
  v0[75] = v149;
  v150 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v150 + 56) = 0;
  *(_QWORD *)(v150 + 64) = 0;
  *(_QWORD *)(v150 + 72) = 0;
  v151 = v317;
  *(_QWORD *)(v150 + 16) = 0;
  *(_QWORD *)(v150 + 24) = v151;
  *(_QWORD *)(v150 + 32) = 0x80000001000934A0;
  *(_QWORD *)(v150 + 40) = v107;
  *(_BYTE *)(v150 + 48) = 0;
  v0[76] = v150;
  v308 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v139;
  v152 = sub_100004B18(&qword_1000C7CC8);
  v153 = swift_allocObject(v152, 73, 7);
  *(_BYTE *)(v153 + 16) = 1;
  *(_QWORD *)(v153 + 56) = 0;
  *(_QWORD *)(v153 + 64) = 0;
  *(_BYTE *)(v153 + 72) = 0;
  *(_QWORD *)(v153 + 24) = v316;
  *(_QWORD *)(v153 + 32) = 0x80000001000934C0;
  *(_QWORD *)(v153 + 40) = v107;
  *(_BYTE *)(v153 + 48) = 0;
  v0[77] = v153;
  v154 = swift_allocObject(v327, 80, 7);
  *(_QWORD *)(v154 + 56) = 0;
  *(_QWORD *)(v154 + 64) = 0;
  *(_QWORD *)(v154 + 72) = 0;
  *(_OWORD *)(v154 + 16) = xmmword_1000858E0;
  *(_QWORD *)(v154 + 32) = 0xED0000656C797453;
  *(_QWORD *)(v154 + 40) = v107;
  *(_BYTE *)(v154 + 48) = 0;
  v0[78] = v154;
  v155 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v155 + 56) = 0;
  *(_QWORD *)(v155 + 64) = 0;
  *(_QWORD *)(v155 + 72) = 0;
  *(_QWORD *)(v155 + 16) = 0x4030000000000000;
  strcpy((char *)(v155 + 24), "cardBlurRadius");
  *(_BYTE *)(v155 + 39) = -18;
  *(_QWORD *)(v155 + 40) = v107;
  *(_BYTE *)(v155 + 48) = 0;
  v0[79] = v155;
  v156 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v156 + 16) = 0;
  *(_QWORD *)(v156 + 56) = 0;
  *(_QWORD *)(v156 + 64) = 0;
  *(_BYTE *)(v156 + 72) = 0;
  *(_QWORD *)(v156 + 24) = v119;
  *(_QWORD *)(v156 + 32) = 0x80000001000934E0;
  v157 = v119;
  *(_QWORD *)(v156 + 40) = v107;
  *(_BYTE *)(v156 + 48) = 0;
  v0[80] = v156;
  v158 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v158 + 56) = 0;
  *(_QWORD *)(v158 + 64) = 0;
  *(_QWORD *)(v158 + 72) = 0;
  v159 = v328;
  *(_QWORD *)(v158 + 16) = 0x4034000000000000;
  *(_QWORD *)(v158 + 24) = v159;
  *(_QWORD *)(v158 + 32) = 0x8000000100093500;
  *(_QWORD *)(v158 + 40) = v107;
  *(_BYTE *)(v158 + 48) = 0;
  v0[81] = v158;
  v160 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v160 + 56) = 0;
  *(_QWORD *)(v160 + 64) = 0;
  *(_QWORD *)(v160 + 72) = 0;
  v161 = v329;
  *(_QWORD *)(v160 + 16) = 0x4034000000000000;
  *(_QWORD *)(v160 + 24) = v161;
  *(_QWORD *)(v160 + 32) = 0x8000000100093520;
  *(_QWORD *)(v160 + 40) = v107;
  *(_BYTE *)(v160 + 48) = 0;
  v0[82] = v160;
  v162 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v162 + 16) = 1;
  *(_QWORD *)(v162 + 56) = 0;
  *(_QWORD *)(v162 + 64) = 0;
  *(_BYTE *)(v162 + 72) = 0;
  v163 = v325;
  *(_QWORD *)(v162 + 24) = v325;
  *(_QWORD *)(v162 + 32) = 0x8000000100093540;
  *(_QWORD *)(v162 + 40) = v107;
  *(_BYTE *)(v162 + 48) = 0;
  v0[83] = v162;
  v164 = swift_allocObject(v137, 80, 7);
  *(_QWORD *)(v164 + 56) = 0;
  *(_QWORD *)(v164 + 64) = 0;
  *(_QWORD *)(v164 + 72) = 0;
  v165 = v320;
  *(_QWORD *)(v164 + 16) = 0x3FD3333333333333;
  *(_QWORD *)(v164 + 24) = v165;
  *(_QWORD *)(v164 + 32) = 0x8000000100093560;
  *(_QWORD *)(v164 + 40) = v107;
  *(_BYTE *)(v164 + 48) = 0;
  v0[84] = v164;
  v166 = swift_allocObject(v137, 80, 7);
  *(_QWORD *)(v166 + 56) = 0;
  *(_QWORD *)(v166 + 64) = 0;
  *(_QWORD *)(v166 + 72) = 0;
  *(_QWORD *)(v166 + 16) = 0x3FF4CCCCCCCCCCCDLL;
  *(_QWORD *)(v166 + 24) = 0x617078456C6C6970;
  *(_QWORD *)(v166 + 32) = 0xEF656C616353646ELL;
  *(_QWORD *)(v166 + 40) = v107;
  *(_BYTE *)(v166 + 48) = 0;
  v0[85] = v166;
  v314 = kCAMediaTimingFunctionEaseOut;
  v308 = v308;
  v167 = sub_100004B18(&qword_1000CAFD8);
  v168 = swift_allocObject(v167, 80, 7);
  *(_QWORD *)(v168 + 56) = 0;
  *(_QWORD *)(v168 + 64) = 0;
  *(_QWORD *)(v168 + 72) = 0;
  v169 = v326;
  *(_QWORD *)(v168 + 16) = kCAMediaTimingFunctionEaseOut;
  *(_QWORD *)(v168 + 24) = v169;
  *(_QWORD *)(v168 + 32) = 0x8000000100093580;
  *(_QWORD *)(v168 + 40) = v107;
  *(_BYTE *)(v168 + 48) = 0;
  v0[86] = v168;
  v170 = sub_100004B18(&qword_1000CAFE0);
  v171 = swift_allocObject(v170, 73, 7);
  *(_BYTE *)(v171 + 16) = 1;
  *(_QWORD *)(v171 + 56) = 0;
  *(_QWORD *)(v171 + 64) = 0;
  *(_BYTE *)(v171 + 72) = 0;
  *(_QWORD *)(v171 + 24) = v159;
  *(_QWORD *)(v171 + 32) = 0x80000001000935A0;
  *(_QWORD *)(v171 + 40) = v107;
  *(_BYTE *)(v171 + 48) = 0;
  v0[87] = v171;
  v172 = swift_allocObject(v170, 73, 7);
  *(_BYTE *)(v172 + 16) = 0;
  *(_QWORD *)(v172 + 56) = 0;
  *(_QWORD *)(v172 + 64) = 0;
  *(_BYTE *)(v172 + 72) = 0;
  *(_QWORD *)(v172 + 24) = 0xD000000000000011;
  *(_QWORD *)(v172 + 32) = 0x80000001000935C0;
  *(_QWORD *)(v172 + 40) = v107;
  *(_BYTE *)(v172 + 48) = 0;
  v0[88] = v172;
  v173 = sub_100004B18(&qword_1000CAFE8);
  v174 = swift_allocObject(v173, 73, 7);
  *(_BYTE *)(v174 + 16) = 0;
  *(_QWORD *)(v174 + 56) = 0;
  *(_QWORD *)(v174 + 64) = 0;
  *(_BYTE *)(v174 + 72) = 0;
  *(_QWORD *)(v174 + 24) = v163;
  *(_QWORD *)(v174 + 32) = 0x80000001000935E0;
  *(_QWORD *)(v174 + 40) = v107;
  *(_BYTE *)(v174 + 48) = 0;
  v0[89] = v174;
  v175 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v175 + 16) = 1;
  *(_QWORD *)(v175 + 56) = 0;
  *(_QWORD *)(v175 + 64) = 0;
  *(_BYTE *)(v175 + 72) = 0;
  *(_QWORD *)(v175 + 24) = v157;
  *(_QWORD *)(v175 + 32) = 0x8000000100093600;
  *(_QWORD *)(v175 + 40) = v107;
  *(_BYTE *)(v175 + 48) = 0;
  v0[90] = v175;
  v176 = swift_allocObject(v137, 80, 7);
  *(_QWORD *)(v176 + 56) = 0;
  *(_QWORD *)(v176 + 64) = 0;
  *(_QWORD *)(v176 + 72) = 0;
  *(_QWORD *)(v176 + 16) = 0;
  *(_QWORD *)(v176 + 24) = v159;
  *(_QWORD *)(v176 + 32) = 0x8000000100093620;
  *(_QWORD *)(v176 + 40) = v107;
  *(_BYTE *)(v176 + 48) = 0;
  v0[91] = v176;
  v177 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v177 + 16) = 0;
  *(_QWORD *)(v177 + 56) = 0;
  *(_QWORD *)(v177 + 64) = 0;
  *(_BYTE *)(v177 + 72) = 0;
  *(_QWORD *)(v177 + 24) = v311;
  *(_QWORD *)(v177 + 32) = 0x8000000100093640;
  *(_QWORD *)(v177 + 40) = v107;
  *(_BYTE *)(v177 + 48) = 0;
  v0[92] = v177;
  v178 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v178 + 16) = 1;
  *(_QWORD *)(v178 + 56) = 0;
  *(_QWORD *)(v178 + 64) = 0;
  *(_BYTE *)(v178 + 72) = 0;
  *(_QWORD *)(v178 + 24) = v165;
  *(_QWORD *)(v178 + 32) = 0x8000000100093660;
  *(_QWORD *)(v178 + 40) = v107;
  *(_BYTE *)(v178 + 48) = 0;
  v0[93] = v178;
  v179 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v179 + 16) = 1;
  *(_QWORD *)(v179 + 56) = 0;
  *(_QWORD *)(v179 + 64) = 0;
  *(_BYTE *)(v179 + 72) = 0;
  *(_QWORD *)(v179 + 24) = v321;
  *(_QWORD *)(v179 + 32) = 0x8000000100093680;
  *(_QWORD *)(v179 + 40) = v107;
  *(_BYTE *)(v179 + 48) = 0;
  v0[94] = v179;
  v180 = v308;
  v181 = (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_100004B18(&qword_1000CAFF0);
  v308 = v181;
  v182 = swift_allocObject(v181, 76, 7);
  *(_DWORD *)(v182 + 16) = 1041865114;
  *(_QWORD *)(v182 + 56) = 0;
  *(_QWORD *)(v182 + 64) = 0;
  *(_DWORD *)(v182 + 72) = 0;
  *(_QWORD *)(v182 + 24) = v159;
  *(_QWORD *)(v182 + 32) = 0x80000001000936A0;
  *(_QWORD *)(v182 + 40) = v107;
  *(_BYTE *)(v182 + 48) = 0;
  v0[95] = v182;
  v183 = swift_allocObject(v181, 76, 7);
  *(_DWORD *)(v183 + 16) = 0;
  *(_QWORD *)(v183 + 56) = 0;
  *(_QWORD *)(v183 + 64) = 0;
  *(_DWORD *)(v183 + 72) = 0;
  *(_QWORD *)(v183 + 24) = v159;
  *(_QWORD *)(v183 + 32) = 0x80000001000936C0;
  *(_QWORD *)(v183 + 40) = v107;
  *(_BYTE *)(v183 + 48) = 0;
  v0[96] = v183;
  v311 = v180;
  v184 = sub_100004B18(&qword_1000CAFF8);
  v185 = swift_allocObject(v184, 73, 7);
  *(_BYTE *)(v185 + 16) = 4;
  *(_QWORD *)(v185 + 56) = 0;
  *(_QWORD *)(v185 + 64) = 0;
  *(_BYTE *)(v185 + 72) = 0;
  *(_QWORD *)(v185 + 24) = 0xD000000000000011;
  *(_QWORD *)(v185 + 32) = 0x80000001000936E0;
  *(_QWORD *)(v185 + 40) = v107;
  *(_BYTE *)(v185 + 48) = 0;
  v0[97] = v185;
  v186 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v186 + 56) = 0;
  *(_QWORD *)(v186 + 64) = 0;
  *(_QWORD *)(v186 + 72) = 0;
  v187 = v317;
  *(_QWORD *)(v186 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v186 + 24) = v187;
  *(_QWORD *)(v186 + 32) = 0x8000000100093700;
  *(_QWORD *)(v186 + 40) = v107;
  *(_BYTE *)(v186 + 48) = 0;
  v0[98] = v186;
  v188 = swift_allocObject(v184, 73, 7);
  *(_BYTE *)(v188 + 16) = 3;
  *(_QWORD *)(v188 + 56) = 0;
  *(_QWORD *)(v188 + 64) = 0;
  *(_BYTE *)(v188 + 72) = 0;
  *(_QWORD *)(v188 + 24) = 0xD000000000000011;
  *(_QWORD *)(v188 + 32) = 0x8000000100093720;
  *(_QWORD *)(v188 + 40) = v107;
  *(_BYTE *)(v188 + 48) = 0;
  v0[99] = v188;
  v189 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v189 + 56) = 0;
  *(_QWORD *)(v189 + 64) = 0;
  *(_QWORD *)(v189 + 72) = 0;
  *(_QWORD *)(v189 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v189 + 24) = v187;
  *(_QWORD *)(v189 + 32) = 0x8000000100093740;
  *(_QWORD *)(v189 + 40) = v107;
  *(_BYTE *)(v189 + 48) = 0;
  v0[100] = v189;
  v190 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v190 + 16) = 0;
  *(_QWORD *)(v190 + 56) = 0;
  *(_QWORD *)(v190 + 64) = 0;
  *(_BYTE *)(v190 + 72) = 0;
  *(_QWORD *)(v190 + 24) = 0xD000000000000027;
  *(_QWORD *)(v190 + 32) = 0x8000000100093760;
  *(_QWORD *)(v190 + 40) = v107;
  *(_BYTE *)(v190 + 48) = 0;
  v0[101] = v190;
  v191 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v191 + 16) = 0;
  *(_QWORD *)(v191 + 56) = 0;
  *(_QWORD *)(v191 + 64) = 0;
  *(_BYTE *)(v191 + 72) = 0;
  *(_QWORD *)(v191 + 24) = 0xD000000000000032;
  *(_QWORD *)(v191 + 32) = 0x8000000100093790;
  *(_QWORD *)(v191 + 40) = v107;
  *(_BYTE *)(v191 + 48) = 0;
  v0[102] = v191;
  v192 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v192 + 16) = 0;
  *(_QWORD *)(v192 + 56) = 0;
  *(_QWORD *)(v192 + 64) = 0;
  *(_BYTE *)(v192 + 72) = 0;
  *(_QWORD *)(v192 + 24) = v325;
  *(_QWORD *)(v192 + 32) = 0x80000001000937D0;
  *(_QWORD *)(v192 + 40) = v107;
  *(_BYTE *)(v192 + 48) = 0;
  v0[103] = v192;
  v193 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v193 + 16) = 1;
  *(_QWORD *)(v193 + 56) = 0;
  *(_QWORD *)(v193 + 64) = 0;
  *(_BYTE *)(v193 + 72) = 0;
  v194 = v323;
  *(_QWORD *)(v193 + 24) = v323;
  *(_QWORD *)(v193 + 32) = 0x80000001000937F0;
  *(_QWORD *)(v193 + 40) = v107;
  *(_BYTE *)(v193 + 48) = 0;
  v0[104] = v193;
  v195 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v195 + 16) = 0;
  *(_QWORD *)(v195 + 56) = 0;
  *(_QWORD *)(v195 + 64) = 0;
  *(_BYTE *)(v195 + 72) = 0;
  *(_QWORD *)(v195 + 24) = v187;
  *(_QWORD *)(v195 + 32) = 0x8000000100093810;
  *(_QWORD *)(v195 + 40) = v107;
  *(_BYTE *)(v195 + 48) = 0;
  v0[105] = v195;
  v196 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v196 + 16) = 0;
  *(_QWORD *)(v196 + 56) = 0;
  *(_QWORD *)(v196 + 64) = 0;
  *(_BYTE *)(v196 + 72) = 0;
  *(_QWORD *)(v196 + 24) = v324;
  *(_QWORD *)(v196 + 32) = 0x8000000100093830;
  *(_QWORD *)(v196 + 40) = v107;
  *(_BYTE *)(v196 + 48) = 0;
  v0[106] = v196;
  v197 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v197 + 16) = 0;
  *(_QWORD *)(v197 + 56) = 0;
  *(_QWORD *)(v197 + 64) = 0;
  *(_BYTE *)(v197 + 72) = 0;
  *(_QWORD *)(v197 + 24) = v194;
  *(_QWORD *)(v197 + 32) = 0x8000000100093850;
  *(_QWORD *)(v197 + 40) = v107;
  *(_BYTE *)(v197 + 48) = 0;
  v0[107] = v197;
  v198 = v310;
  v199 = swift_allocObject(v310, 80, 7);
  *(_QWORD *)(v199 + 56) = 0;
  *(_QWORD *)(v199 + 64) = 0;
  *(_QWORD *)(v199 + 72) = 0;
  *(_QWORD *)(v199 + 16) = 0;
  *(_QWORD *)(v199 + 24) = 0xD000000000000011;
  *(_QWORD *)(v199 + 32) = 0x8000000100093870;
  *(_QWORD *)(v199 + 40) = v107;
  *(_BYTE *)(v199 + 48) = 0;
  v0[108] = v199;
  v200 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v200 + 16) = 0;
  *(_QWORD *)(v200 + 56) = 0;
  *(_QWORD *)(v200 + 64) = 0;
  *(_BYTE *)(v200 + 72) = 0;
  *(_QWORD *)(v200 + 24) = v318;
  *(_QWORD *)(v200 + 32) = 0x8000000100090BC0;
  *(_QWORD *)(v200 + 40) = v107;
  *(_BYTE *)(v200 + 48) = 0;
  v0[109] = v200;
  v201 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v201 + 16) = 0;
  *(_QWORD *)(v201 + 56) = 0;
  *(_QWORD *)(v201 + 64) = 0;
  *(_BYTE *)(v201 + 72) = 0;
  *(_QWORD *)(v201 + 24) = v329;
  *(_QWORD *)(v201 + 32) = 0x8000000100090BE0;
  *(_QWORD *)(v201 + 40) = v107;
  *(_BYTE *)(v201 + 48) = 0;
  v0[110] = v201;
  v202 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v202 + 16) = 0;
  *(_QWORD *)(v202 + 56) = 0;
  *(_QWORD *)(v202 + 64) = 0;
  *(_BYTE *)(v202 + 72) = 0;
  *(_QWORD *)(v202 + 24) = 0xD000000000000011;
  *(_QWORD *)(v202 + 32) = 0x8000000100093890;
  *(_QWORD *)(v202 + 40) = v107;
  *(_BYTE *)(v202 + 48) = 0;
  v0[111] = v202;
  v203 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v203 + 56) = 0;
  *(_QWORD *)(v203 + 64) = 0;
  *(_QWORD *)(v203 + 72) = 0;
  *(_QWORD *)(v203 + 16) = 0;
  *(_QWORD *)(v203 + 24) = 0x706C416567646162;
  *(_QWORD *)(v203 + 32) = 0xEF6E696765426168;
  *(_QWORD *)(v203 + 40) = v107;
  *(_BYTE *)(v203 + 48) = 0;
  v0[112] = v203;
  v204 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v204 + 56) = 0;
  *(_QWORD *)(v204 + 64) = 0;
  *(_QWORD *)(v204 + 72) = 0;
  *(_QWORD *)(v204 + 16) = 0x3FF0000000000000;
  strcpy((char *)(v204 + 24), "badgeAlphaEnd");
  *(_WORD *)(v204 + 38) = -4864;
  *(_QWORD *)(v204 + 40) = v107;
  *(_BYTE *)(v204 + 48) = 0;
  v0[113] = v204;
  v205 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v205 + 56) = 0;
  *(_QWORD *)(v205 + 64) = 0;
  *(_QWORD *)(v205 + 72) = 0;
  *(_QWORD *)(v205 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v205 + 24) = 0x6C65446567646162;
  *(_QWORD *)(v205 + 32) = 0xEA00000000007961;
  *(_QWORD *)(v205 + 40) = v107;
  *(_BYTE *)(v205 + 48) = 0;
  v0[114] = v205;
  v206 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v206 + 56) = 0;
  *(_QWORD *)(v206 + 64) = 0;
  *(_QWORD *)(v206 + 72) = 0;
  *(_QWORD *)(v206 + 16) = 0x3FF0000000000000;
  strcpy((char *)(v206 + 24), "badgeDuration");
  *(_WORD *)(v206 + 38) = -4864;
  *(_QWORD *)(v206 + 40) = v107;
  *(_BYTE *)(v206 + 48) = 0;
  v0[115] = v206;
  v207 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v207 + 56) = 0;
  *(_QWORD *)(v207 + 64) = 0;
  *(_QWORD *)(v207 + 72) = 0;
  *(_QWORD *)(v207 + 16) = 0x3FE999999999999ALL;
  *(_QWORD *)(v207 + 24) = 0x6163536567646162;
  v305 = 0xEF6E69676542656CLL;
  *(_QWORD *)(v207 + 32) = 0xEF6E69676542656CLL;
  *(_QWORD *)(v207 + 40) = v107;
  *(_BYTE *)(v207 + 48) = 0;
  v0[116] = v207;
  v208 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v208 + 56) = 0;
  *(_QWORD *)(v208 + 64) = 0;
  *(_QWORD *)(v208 + 72) = 0;
  *(_QWORD *)(v208 + 16) = 0x3FF0000000000000;
  strcpy((char *)(v208 + 24), "badgeScaleEnd");
  v304 = 0xED0000646E45656CLL;
  *(_WORD *)(v208 + 38) = -4864;
  *(_QWORD *)(v208 + 40) = v107;
  *(_BYTE *)(v208 + 48) = 0;
  v0[117] = v208;
  v209 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v209 + 56) = 0;
  *(_QWORD *)(v209 + 64) = 0;
  *(_QWORD *)(v209 + 72) = 0;
  *(_QWORD *)(v209 + 16) = 0;
  strcpy((char *)(v209 + 24), "blurAlphaBegin");
  *(_BYTE *)(v209 + 39) = -18;
  *(_QWORD *)(v209 + 40) = v107;
  *(_BYTE *)(v209 + 48) = 0;
  v0[118] = v209;
  v210 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v210 + 56) = 0;
  *(_QWORD *)(v210 + 64) = 0;
  *(_QWORD *)(v210 + 72) = 0;
  *(_QWORD *)(v210 + 16) = 0x3FE0000000000000;
  strcpy((char *)(v210 + 24), "blurAlphaEnd");
  *(_BYTE *)(v210 + 37) = 0;
  *(_WORD *)(v210 + 38) = -5120;
  *(_QWORD *)(v210 + 40) = v107;
  *(_BYTE *)(v210 + 48) = 0;
  v0[119] = v210;
  v211 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v211 + 56) = 0;
  *(_QWORD *)(v211 + 64) = 0;
  *(_QWORD *)(v211 + 72) = 0;
  *(_QWORD *)(v211 + 16) = 0x402E000000000000;
  *(_QWORD *)(v211 + 24) = 0x6772614D72756C62;
  *(_QWORD *)(v211 + 32) = 0xEA00000000006E69;
  *(_QWORD *)(v211 + 40) = v107;
  *(_BYTE *)(v211 + 48) = 0;
  v0[120] = v211;
  v212 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v212 + 56) = 0;
  *(_QWORD *)(v212 + 64) = 0;
  *(_QWORD *)(v212 + 72) = 0;
  *(_QWORD *)(v212 + 16) = 0x3FE0000000000000;
  *(_QWORD *)(v212 + 24) = 0x6964615272756C62;
  *(_QWORD *)(v212 + 32) = 0xEA00000000007375;
  *(_QWORD *)(v212 + 40) = v107;
  *(_BYTE *)(v212 + 48) = 0;
  v0[121] = v212;
  v311 = v311;
  v306 = (char *)sub_100004B18(&qword_1000CB000);
  v213 = swift_allocObject(v306, 89, 7);
  *(_QWORD *)(v213 + 16) = 0;
  *(_BYTE *)(v213 + 24) = 1;
  *(_QWORD *)(v213 + 64) = 0;
  *(_QWORD *)(v213 + 72) = 0;
  *(_QWORD *)(v213 + 80) = 0;
  *(_BYTE *)(v213 + 88) = 0;
  *(_QWORD *)(v213 + 32) = v324;
  *(_QWORD *)(v213 + 40) = 0x80000001000938B0;
  *(_QWORD *)(v213 + 48) = v107;
  *(_BYTE *)(v213 + 56) = 0;
  v0[122] = v213;
  v214 = v319;
  v215 = swift_allocObject(v319, 96, 7);
  *(_QWORD *)(v215 + 16) = 0;
  *(_QWORD *)(v215 + 24) = 0;
  *(_OWORD *)(v215 + 64) = 0u;
  *(_OWORD *)(v215 + 80) = 0u;
  v216 = v329;
  *(_QWORD *)(v215 + 32) = v329;
  *(_QWORD *)(v215 + 40) = 0x80000001000938D0;
  *(_QWORD *)(v215 + 48) = v107;
  *(_BYTE *)(v215 + 56) = 0;
  v0[123] = v215;
  v217 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v217 + 56) = 0;
  *(_QWORD *)(v217 + 64) = 0;
  *(_QWORD *)(v217 + 72) = 0;
  *(_QWORD *)(v217 + 16) = 0;
  *(_QWORD *)(v217 + 24) = 0x706C416569766F6DLL;
  *(_QWORD *)(v217 + 32) = 0xEF6E696765426168;
  *(_QWORD *)(v217 + 40) = v107;
  *(_BYTE *)(v217 + 48) = 0;
  v0[124] = v217;
  v218 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v218 + 56) = 0;
  *(_QWORD *)(v218 + 64) = 0;
  *(_QWORD *)(v218 + 72) = 0;
  *(_QWORD *)(v218 + 16) = 0x3FF0000000000000;
  strcpy((char *)(v218 + 24), "movieAlphaEnd");
  *(_WORD *)(v218 + 38) = -4864;
  *(_QWORD *)(v218 + 40) = v107;
  *(_BYTE *)(v218 + 48) = 0;
  v0[125] = v218;
  v219 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v219 + 56) = 0;
  *(_QWORD *)(v219 + 64) = 0;
  *(_QWORD *)(v219 + 72) = 0;
  *(_QWORD *)(v219 + 16) = 0x3FE0000000000000;
  v220 = v320;
  *(_QWORD *)(v219 + 24) = v320;
  *(_QWORD *)(v219 + 32) = 0x80000001000938F0;
  *(_QWORD *)(v219 + 40) = v107;
  *(_BYTE *)(v219 + 48) = 0;
  v0[126] = v219;
  v221 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v221 + 56) = 0;
  *(_QWORD *)(v221 + 64) = 0;
  *(_QWORD *)(v221 + 72) = 0;
  *(_QWORD *)(v221 + 16) = 0x3FB999999999999ALL;
  *(_QWORD *)(v221 + 24) = 0x6163536569766F6DLL;
  *(_QWORD *)(v221 + 32) = v305;
  *(_QWORD *)(v221 + 40) = v107;
  *(_BYTE *)(v221 + 48) = 0;
  v0[127] = v221;
  v222 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v222 + 56) = 0;
  *(_QWORD *)(v222 + 64) = 0;
  *(_QWORD *)(v222 + 72) = 0;
  *(_QWORD *)(v222 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v222 + 24) = 0x6163536569766F6DLL;
  *(_QWORD *)(v222 + 32) = v304;
  *(_QWORD *)(v222 + 40) = v107;
  *(_BYTE *)(v222 + 48) = 0;
  v0[128] = v222;
  v223 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v223 + 56) = 0;
  *(_QWORD *)(v223 + 64) = 0;
  *(_QWORD *)(v223 + 72) = 0;
  *(_QWORD *)(v223 + 16) = 0x4024000000000000;
  *(_QWORD *)(v223 + 24) = v220;
  *(_QWORD *)(v223 + 32) = 0x8000000100093910;
  *(_QWORD *)(v223 + 40) = v107;
  *(_BYTE *)(v223 + 48) = 0;
  v0[129] = v223;
  v224 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v224 + 56) = 0;
  *(_QWORD *)(v224 + 64) = 0;
  *(_QWORD *)(v224 + 72) = 0;
  *(_QWORD *)(v224 + 16) = 0xC039000000000000;
  *(_QWORD *)(v224 + 24) = 0x6461506569766F6DLL;
  *(_QWORD *)(v224 + 32) = 0xEF706F54676E6964;
  *(_QWORD *)(v224 + 40) = v107;
  *(_BYTE *)(v224 + 48) = 0;
  v0[130] = v224;
  v225 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v225 + 56) = 0;
  *(_QWORD *)(v225 + 64) = 0;
  *(_QWORD *)(v225 + 72) = 0;
  *(_QWORD *)(v225 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v225 + 24) = v216;
  *(_QWORD *)(v225 + 32) = 0x8000000100093930;
  *(_QWORD *)(v225 + 40) = v107;
  *(_BYTE *)(v225 + 48) = 0;
  v0[131] = v225;
  v226 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v226 + 56) = 0;
  *(_QWORD *)(v226 + 64) = 0;
  *(_QWORD *)(v226 + 72) = 0;
  *(_QWORD *)(v226 + 16) = 0x4049000000000000;
  *(_QWORD *)(v226 + 24) = v216;
  *(_QWORD *)(v226 + 32) = 0x8000000100093950;
  *(_QWORD *)(v226 + 40) = v107;
  *(_BYTE *)(v226 + 48) = 0;
  v0[132] = v226;
  v227 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v227 + 56) = 0;
  *(_QWORD *)(v227 + 64) = 0;
  *(_QWORD *)(v227 + 72) = 0;
  v228 = v328;
  *(_QWORD *)(v227 + 16) = 0;
  *(_QWORD *)(v227 + 24) = v228;
  *(_QWORD *)(v227 + 32) = 0x8000000100093970;
  *(_QWORD *)(v227 + 40) = v107;
  *(_BYTE *)(v227 + 48) = 0;
  v0[133] = v227;
  v229 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v229 + 56) = 0;
  *(_QWORD *)(v229 + 64) = 0;
  *(_QWORD *)(v229 + 72) = 0;
  *(_QWORD *)(v229 + 16) = 0x4014000000000000;
  *(_QWORD *)(v229 + 24) = 0xD000000000000011;
  *(_QWORD *)(v229 + 32) = 0x8000000100093990;
  *(_QWORD *)(v229 + 40) = v107;
  *(_BYTE *)(v229 + 48) = 0;
  v0[134] = v229;
  v230 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v230 + 16) = 0;
  *(_QWORD *)(v230 + 56) = 0;
  *(_QWORD *)(v230 + 64) = 0;
  *(_BYTE *)(v230 + 72) = 0;
  *(_QWORD *)(v230 + 24) = 0x49556775626564;
  *(_QWORD *)(v230 + 32) = 0xE700000000000000;
  *(_QWORD *)(v230 + 40) = v107;
  *(_BYTE *)(v230 + 48) = 0;
  v0[135] = v230;
  v231 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v231 + 16) = 0;
  *(_QWORD *)(v231 + 56) = 0;
  *(_QWORD *)(v231 + 64) = 0;
  *(_BYTE *)(v231 + 72) = 0;
  *(_QWORD *)(v231 + 24) = 0x655265726F6E6769;
  *(_QWORD *)(v231 + 32) = 0xEA00000000006C61;
  *(_QWORD *)(v231 + 40) = v107;
  *(_BYTE *)(v231 + 48) = 0;
  v0[136] = v231;
  v232 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v232 + 56) = 0;
  *(_QWORD *)(v232 + 64) = 0;
  *(_QWORD *)(v232 + 72) = 0;
  *(_QWORD *)(v232 + 16) = 0x3FF3333333333333;
  *(_QWORD *)(v232 + 24) = v228;
  *(_QWORD *)(v232 + 32) = 0x80000001000939B0;
  *(_QWORD *)(v232 + 40) = v107;
  *(_BYTE *)(v232 + 48) = 0;
  v0[137] = v232;
  v233 = swift_allocObject(v140, 80, 7);
  *(_QWORD *)(v233 + 56) = 0;
  *(_QWORD *)(v233 + 64) = 0;
  *(_QWORD *)(v233 + 72) = 0;
  v234 = v317;
  *(_QWORD *)(v233 + 16) = 0x4049000000000000;
  *(_QWORD *)(v233 + 24) = v234;
  *(_QWORD *)(v233 + 32) = 0x80000001000939D0;
  *(_QWORD *)(v233 + 40) = v107;
  *(_BYTE *)(v233 + 48) = 0;
  v0[138] = v233;
  v235 = swift_allocObject(v214, 96, 7);
  *(_QWORD *)(v235 + 16) = 0;
  *(_QWORD *)(v235 + 24) = 0;
  *(_OWORD *)(v235 + 64) = 0u;
  *(_OWORD *)(v235 + 80) = 0u;
  *(_QWORD *)(v235 + 32) = 0x497070416F6D6544;
  *(_QWORD *)(v235 + 40) = 0xEB000000006E6F63;
  *(_QWORD *)(v235 + 48) = v107;
  *(_BYTE *)(v235 + 56) = 0;
  v0[139] = v235;
  v236 = swift_allocObject(v306, 89, 7);
  *(_QWORD *)(v236 + 16) = 0;
  *(_BYTE *)(v236 + 24) = 1;
  *(_QWORD *)(v236 + 64) = 0;
  *(_QWORD *)(v236 + 72) = 0;
  *(_QWORD *)(v236 + 80) = 0;
  *(_BYTE *)(v236 + 88) = 0;
  *(_QWORD *)(v236 + 32) = 0x67616D496F6D6544;
  *(_QWORD *)(v236 + 40) = 0xE900000000000065;
  *(_QWORD *)(v236 + 48) = v107;
  *(_BYTE *)(v236 + 56) = 0;
  v0[140] = v236;
  v237 = swift_allocObject(v214, 96, 7);
  *(_QWORD *)(v237 + 16) = 0;
  *(_QWORD *)(v237 + 24) = 0;
  *(_OWORD *)(v237 + 64) = 0u;
  *(_OWORD *)(v237 + 80) = 0u;
  *(_QWORD *)(v237 + 32) = 0x656D614E6F6D6544;
  *(_QWORD *)(v237 + 40) = 0xE800000000000000;
  *(_QWORD *)(v237 + 48) = v107;
  *(_BYTE *)(v237 + 56) = 0;
  v0[141] = v237;
  v238 = swift_allocObject(v214, 96, 7);
  *(_QWORD *)(v238 + 16) = 0;
  *(_QWORD *)(v238 + 24) = 0;
  *(_OWORD *)(v238 + 64) = 0u;
  *(_OWORD *)(v238 + 80) = 0u;
  *(_QWORD *)(v238 + 32) = 0x746275536F6D6544;
  *(_QWORD *)(v238 + 40) = 0xEB00000000747865;
  *(_QWORD *)(v238 + 48) = v107;
  *(_BYTE *)(v238 + 56) = 0;
  v0[142] = v238;
  v239 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v239 + 16) = 0;
  *(_QWORD *)(v239 + 56) = 0;
  *(_QWORD *)(v239 + 64) = 0;
  *(_BYTE *)(v239 + 72) = 0;
  *(_QWORD *)(v239 + 24) = v307;
  *(_QWORD *)(v239 + 32) = 0x80000001000939F0;
  *(_QWORD *)(v239 + 40) = v107;
  *(_BYTE *)(v239 + 48) = 0;
  v0[143] = v239;
  v240 = swift_allocObject(v214, 96, 7);
  *(_QWORD *)(v240 + 16) = 0;
  *(_QWORD *)(v240 + 24) = 0;
  *(_OWORD *)(v240 + 64) = 0u;
  *(_OWORD *)(v240 + 80) = 0u;
  *(_QWORD *)(v240 + 32) = v313;
  *(_QWORD *)(v240 + 40) = 0x8000000100093A20;
  *(_QWORD *)(v240 + 48) = v107;
  *(_BYTE *)(v240 + 56) = 0;
  v0[144] = v240;
  v241 = swift_allocObject(v327, 80, 7);
  *(_QWORD *)(v241 + 56) = 0;
  *(_QWORD *)(v241 + 64) = 0;
  *(_QWORD *)(v241 + 72) = 0;
  *(_OWORD *)(v241 + 16) = xmmword_1000858F0;
  *(_QWORD *)(v241 + 32) = 0xEB00000000657672;
  *(_QWORD *)(v241 + 40) = v107;
  *(_BYTE *)(v241 + 48) = 0;
  v0[145] = v241;
  v242 = swift_allocObject(v127, 73, 7);
  *(_BYTE *)(v242 + 16) = 1;
  *(_QWORD *)(v242 + 56) = 0;
  *(_QWORD *)(v242 + 64) = 0;
  *(_BYTE *)(v242 + 72) = 0;
  *(_QWORD *)(v242 + 24) = v220;
  *(_QWORD *)(v242 + 32) = 0x8000000100093A50;
  *(_QWORD *)(v242 + 40) = v107;
  *(_BYTE *)(v242 + 48) = 0;
  v0[146] = v242;
  v243 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v243 + 56) = 0;
  *(_QWORD *)(v243 + 64) = 0;
  *(_QWORD *)(v243 + 72) = 0;
  *(_QWORD *)(v243 + 16) = 0x404E000000000000;
  *(_QWORD *)(v243 + 24) = 0x7246636974706168;
  *(_QWORD *)(v243 + 32) = 0xEF79636E65757165;
  *(_QWORD *)(v243 + 40) = v107;
  *(_BYTE *)(v243 + 48) = 0;
  v0[147] = v243;
  v244 = v308;
  v245 = swift_allocObject(v308, 76, 7);
  *(_DWORD *)(v245 + 16) = 1059481190;
  *(_QWORD *)(v245 + 56) = 0;
  *(_QWORD *)(v245 + 64) = 0;
  *(_DWORD *)(v245 + 72) = 0;
  *(_QWORD *)(v245 + 24) = v220;
  *(_QWORD *)(v245 + 32) = 0x8000000100093A70;
  *(_QWORD *)(v245 + 40) = v107;
  *(_BYTE *)(v245 + 48) = 0;
  v0[148] = v245;
  v246 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v246 + 16) = 0;
  *(_QWORD *)(v246 + 56) = 0;
  *(_QWORD *)(v246 + 64) = 0;
  *(_DWORD *)(v246 + 72) = 0;
  *(_QWORD *)(v246 + 24) = v220;
  *(_QWORD *)(v246 + 32) = 0x8000000100093A90;
  *(_QWORD *)(v246 + 40) = v107;
  *(_BYTE *)(v246 + 48) = 0;
  v0[149] = v246;
  v247 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v247 + 16) = 1041865114;
  *(_QWORD *)(v247 + 56) = 0;
  *(_QWORD *)(v247 + 64) = 0;
  *(_DWORD *)(v247 + 72) = 0;
  v248 = v316;
  *(_QWORD *)(v247 + 24) = v316;
  *(_QWORD *)(v247 + 32) = 0x8000000100093AB0;
  *(_QWORD *)(v247 + 40) = v107;
  *(_BYTE *)(v247 + 48) = 0;
  v0[150] = v247;
  v249 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v249 + 16) = 1041865114;
  *(_QWORD *)(v249 + 56) = 0;
  *(_QWORD *)(v249 + 64) = 0;
  *(_DWORD *)(v249 + 72) = 0;
  *(_QWORD *)(v249 + 24) = v248;
  *(_QWORD *)(v249 + 32) = 0x8000000100093AD0;
  *(_QWORD *)(v249 + 40) = v107;
  *(_BYTE *)(v249 + 48) = 0;
  v0[151] = v249;
  v250 = v198;
  v251 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v251 + 56) = 0;
  *(_QWORD *)(v251 + 64) = 0;
  *(_QWORD *)(v251 + 72) = 0;
  *(_QWORD *)(v251 + 16) = 0x3FD3333333333333;
  strcpy((char *)(v251 + 24), "hapticOffset");
  *(_BYTE *)(v251 + 37) = 0;
  *(_WORD *)(v251 + 38) = -5120;
  *(_QWORD *)(v251 + 40) = v107;
  *(_BYTE *)(v251 + 48) = 0;
  v0[152] = v251;
  v252 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v252 + 56) = 0;
  *(_QWORD *)(v252 + 64) = 0;
  *(_QWORD *)(v252 + 72) = 0;
  v253 = v321;
  *(_QWORD *)(v252 + 16) = 0x3FEAF5C28F5C28F6;
  *(_QWORD *)(v252 + 24) = v253;
  *(_QWORD *)(v252 + 32) = 0x8000000100093AF0;
  *(_QWORD *)(v252 + 40) = v107;
  *(_BYTE *)(v252 + 48) = 0;
  v0[153] = v252;
  v254 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v254 + 56) = 0;
  *(_QWORD *)(v254 + 64) = 0;
  *(_QWORD *)(v254 + 72) = 0;
  v255 = v326;
  *(_QWORD *)(v254 + 16) = 0x3FB0000000000000;
  *(_QWORD *)(v254 + 24) = v255;
  *(_QWORD *)(v254 + 32) = 0x8000000100093B10;
  *(_QWORD *)(v254 + 40) = v107;
  *(_BYTE *)(v254 + 48) = 0;
  v0[154] = v254;
  v256 = swift_allocObject(v198, 80, 7);
  *(_QWORD *)(v256 + 56) = 0;
  *(_QWORD *)(v256 + 64) = 0;
  *(_QWORD *)(v256 + 72) = 0;
  v257 = v328;
  *(_QWORD *)(v256 + 16) = 0x3FD999999999999ALL;
  *(_QWORD *)(v256 + 24) = v257;
  *(_QWORD *)(v256 + 32) = 0x8000000100093B30;
  *(_QWORD *)(v256 + 40) = v107;
  *(_BYTE *)(v256 + 48) = 0;
  v0[155] = v256;
  v258 = swift_allocObject(v250, 80, 7);
  *(_QWORD *)(v258 + 56) = 0;
  *(_QWORD *)(v258 + 64) = 0;
  *(_QWORD *)(v258 + 72) = 0;
  v259 = v322;
  *(_QWORD *)(v258 + 16) = 0x3FC0000000000000;
  *(_QWORD *)(v258 + 24) = v259;
  *(_QWORD *)(v258 + 32) = 0x8000000100093B50;
  *(_QWORD *)(v258 + 40) = v107;
  *(_BYTE *)(v258 + 48) = 0;
  v0[156] = v258;
  v260 = swift_allocObject(v250, 80, 7);
  *(_QWORD *)(v260 + 56) = 0;
  *(_QWORD *)(v260 + 64) = 0;
  *(_QWORD *)(v260 + 72) = 0;
  v261 = v324;
  *(_QWORD *)(v260 + 16) = 0;
  *(_QWORD *)(v260 + 24) = v261;
  *(_QWORD *)(v260 + 32) = 0x8000000100093B70;
  *(_QWORD *)(v260 + 40) = v107;
  *(_BYTE *)(v260 + 48) = 0;
  v0[157] = v260;
  v262 = v309;
  v263 = swift_allocObject(v309, 73, 7);
  *(_BYTE *)(v263 + 16) = 0;
  *(_QWORD *)(v263 + 56) = 0;
  *(_QWORD *)(v263 + 64) = 0;
  *(_BYTE *)(v263 + 72) = 0;
  *(_QWORD *)(v263 + 24) = v220;
  *(_QWORD *)(v263 + 32) = 0x8000000100093B90;
  *(_QWORD *)(v263 + 40) = v107;
  *(_BYTE *)(v263 + 48) = 0;
  v0[158] = v263;
  v264 = v262;
  v265 = swift_allocObject(v262, 73, 7);
  *(_BYTE *)(v265 + 16) = 1;
  *(_QWORD *)(v265 + 56) = 0;
  *(_QWORD *)(v265 + 64) = 0;
  *(_BYTE *)(v265 + 72) = 0;
  *(_QWORD *)(v265 + 24) = 0x6D53676E69727073;
  *(_QWORD *)(v265 + 32) = 0xEF676E6968746F6FLL;
  *(_QWORD *)(v265 + 40) = v107;
  *(_BYTE *)(v265 + 48) = 0;
  v0[159] = v265;
  v266 = swift_allocObject(v262, 73, 7);
  *(_BYTE *)(v266 + 16) = 0;
  *(_QWORD *)(v266 + 56) = 0;
  *(_QWORD *)(v266 + 64) = 0;
  *(_BYTE *)(v266 + 72) = 0;
  *(_QWORD *)(v266 + 24) = v323;
  *(_QWORD *)(v266 + 32) = 0x8000000100093BB0;
  *(_QWORD *)(v266 + 40) = v107;
  *(_BYTE *)(v266 + 48) = 0;
  v0[160] = v266;
  v267 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v267 + 16) = 1082130432;
  *(_QWORD *)(v267 + 56) = 0;
  *(_QWORD *)(v267 + 64) = 0;
  *(_DWORD *)(v267 + 72) = 0;
  v268 = v312;
  *(_QWORD *)(v267 + 24) = v312;
  *(_QWORD *)(v267 + 32) = 0x8000000100093BD0;
  *(_QWORD *)(v267 + 40) = v107;
  *(_BYTE *)(v267 + 48) = 0;
  v0[161] = v267;
  v269 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v269 + 16) = 1050253722;
  *(_QWORD *)(v269 + 56) = 0;
  *(_QWORD *)(v269 + 64) = 0;
  *(_DWORD *)(v269 + 72) = 0;
  *(_QWORD *)(v269 + 24) = v253;
  *(_QWORD *)(v269 + 32) = 0x8000000100093BF0;
  *(_QWORD *)(v269 + 40) = v107;
  *(_BYTE *)(v269 + 48) = 0;
  v0[162] = v269;
  v270 = v315;
  v271 = swift_allocObject(v315, 73, 7);
  *(_BYTE *)(v271 + 16) = 2;
  *(_QWORD *)(v271 + 56) = 0;
  *(_QWORD *)(v271 + 64) = 0;
  *(_BYTE *)(v271 + 72) = 0;
  strcpy((char *)(v271 + 24), "forceResponder");
  *(_BYTE *)(v271 + 39) = -18;
  *(_QWORD *)(v271 + 40) = v107;
  *(_BYTE *)(v271 + 48) = 0;
  v0[163] = v271;
  v272 = swift_allocObject(v262, 73, 7);
  *(_BYTE *)(v272 + 16) = 0;
  *(_QWORD *)(v272 + 56) = 0;
  *(_QWORD *)(v272 + 64) = 0;
  *(_BYTE *)(v272 + 72) = 0;
  *(_QWORD *)(v272 + 24) = v268;
  *(_QWORD *)(v272 + 32) = 0x8000000100093C10;
  *(_QWORD *)(v272 + 40) = v107;
  *(_BYTE *)(v272 + 48) = 0;
  v0[164] = v272;
  v273 = swift_allocObject(v262, 73, 7);
  *(_BYTE *)(v273 + 16) = 1;
  *(_QWORD *)(v273 + 56) = 0;
  *(_QWORD *)(v273 + 64) = 0;
  *(_BYTE *)(v273 + 72) = 0;
  *(_QWORD *)(v273 + 24) = v257;
  *(_QWORD *)(v273 + 32) = 0x8000000100093C30;
  *(_QWORD *)(v273 + 40) = v107;
  *(_BYTE *)(v273 + 48) = 0;
  v0[165] = v273;
  v274 = swift_allocObject(v262, 73, 7);
  *(_BYTE *)(v274 + 16) = 1;
  *(_QWORD *)(v274 + 56) = 0;
  *(_QWORD *)(v274 + 64) = 0;
  *(_BYTE *)(v274 + 72) = 0;
  *(_QWORD *)(v274 + 24) = 0x45676E69676E6172;
  *(_QWORD *)(v274 + 32) = 0xEF646563726F666ELL;
  *(_QWORD *)(v274 + 40) = v107;
  *(_BYTE *)(v274 + 48) = 0;
  v0[166] = v274;
  v275 = swift_allocObject(v270, 73, 7);
  *(_BYTE *)(v275 + 16) = 2;
  *(_QWORD *)(v275 + 56) = 0;
  *(_QWORD *)(v275 + 64) = 0;
  *(_BYTE *)(v275 + 72) = 0;
  *(_QWORD *)(v275 + 24) = v261;
  *(_QWORD *)(v275 + 32) = 0x8000000100093C50;
  *(_QWORD *)(v275 + 40) = v107;
  *(_BYTE *)(v275 + 48) = 0;
  v0[167] = v275;
  v276 = swift_allocObject(v319, 96, 7);
  *(_QWORD *)(v276 + 16) = 0;
  *(_QWORD *)(v276 + 24) = 0;
  *(_OWORD *)(v276 + 64) = 0u;
  *(_OWORD *)(v276 + 80) = 0u;
  *(_QWORD *)(v276 + 32) = 0xD000000000000011;
  *(_QWORD *)(v276 + 40) = 0x8000000100093C70;
  *(_QWORD *)(v276 + 48) = v107;
  *(_BYTE *)(v276 + 56) = 0;
  v0[168] = v276;
  v277 = swift_allocObject(v262, 73, 7);
  *(_BYTE *)(v277 + 16) = 1;
  *(_QWORD *)(v277 + 56) = 0;
  *(_QWORD *)(v277 + 64) = 0;
  *(_BYTE *)(v277 + 72) = 0;
  strcpy((char *)(v277 + 24), "allowRetries");
  *(_BYTE *)(v277 + 37) = 0;
  *(_WORD *)(v277 + 38) = -5120;
  *(_QWORD *)(v277 + 40) = v107;
  *(_BYTE *)(v277 + 48) = 0;
  v0[169] = v277;
  v278 = v327;
  v279 = swift_allocObject(v327, 80, 7);
  *(_QWORD *)(v279 + 56) = 0;
  *(_QWORD *)(v279 + 64) = 0;
  *(_QWORD *)(v279 + 72) = 0;
  *(_OWORD *)(v279 + 16) = xmmword_100085900;
  *(_QWORD *)(v279 + 32) = 0x8000000100090C60;
  *(_QWORD *)(v279 + 40) = v107;
  *(_BYTE *)(v279 + 48) = 0;
  v0[170] = v279;
  v280 = swift_allocObject(v278, 80, 7);
  *(_QWORD *)(v280 + 56) = 0;
  *(_QWORD *)(v280 + 64) = 0;
  *(_QWORD *)(v280 + 72) = 0;
  *(_OWORD *)(v280 + 16) = xmmword_100085910;
  *(_QWORD *)(v280 + 32) = 0x8000000100090C80;
  *(_QWORD *)(v280 + 40) = v107;
  *(_BYTE *)(v280 + 48) = 0;
  v0[171] = v280;
  v281 = swift_allocObject(v250, 80, 7);
  *(_QWORD *)(v281 + 56) = 0;
  *(_QWORD *)(v281 + 64) = 0;
  *(_QWORD *)(v281 + 72) = 0;
  v282 = v322;
  *(_QWORD *)(v281 + 16) = 0;
  *(_QWORD *)(v281 + 24) = v282;
  *(_QWORD *)(v281 + 32) = 0x8000000100093C90;
  *(_QWORD *)(v281 + 40) = v107;
  *(_BYTE *)(v281 + 48) = 0;
  v0[172] = v281;
  v283 = swift_allocObject(v264, 73, 7);
  *(_BYTE *)(v283 + 16) = 0;
  *(_QWORD *)(v283 + 56) = 0;
  *(_QWORD *)(v283 + 64) = 0;
  *(_BYTE *)(v283 + 72) = 0;
  *(_QWORD *)(v283 + 24) = 0x44676E69676E6172;
  *(_QWORD *)(v283 + 32) = 0xEF64656C62617369;
  *(_QWORD *)(v283 + 40) = v107;
  *(_BYTE *)(v283 + 48) = 0;
  v0[173] = v283;
  v284 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v284 + 16) = 1092616192;
  *(_QWORD *)(v284 + 56) = 0;
  *(_QWORD *)(v284 + 64) = 0;
  *(_DWORD *)(v284 + 72) = 0;
  *(_QWORD *)(v284 + 24) = 0xD000000000000011;
  *(_QWORD *)(v284 + 32) = 0x8000000100093CB0;
  *(_QWORD *)(v284 + 40) = v107;
  *(_BYTE *)(v284 + 48) = 0;
  v0[174] = v284;
  v285 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v285 + 16) = 1092616192;
  *(_QWORD *)(v285 + 56) = 0;
  *(_QWORD *)(v285 + 64) = 0;
  *(_DWORD *)(v285 + 72) = 0;
  *(_QWORD *)(v285 + 24) = 0x6E61747369447462;
  *(_QWORD *)(v285 + 32) = 0xEF656772614C6563;
  *(_QWORD *)(v285 + 40) = v107;
  *(_BYTE *)(v285 + 48) = 0;
  v0[175] = v285;
  v286 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v286 + 16) = 1056964608;
  *(_QWORD *)(v286 + 56) = 0;
  *(_QWORD *)(v286 + 64) = 0;
  *(_DWORD *)(v286 + 72) = 0;
  *(_QWORD *)(v286 + 24) = v268;
  *(_QWORD *)(v286 + 32) = 0x8000000100093CD0;
  *(_QWORD *)(v286 + 40) = v107;
  *(_BYTE *)(v286 + 48) = 0;
  v0[176] = v286;
  v287 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v287 + 16) = 1033476506;
  *(_QWORD *)(v287 + 56) = 0;
  *(_QWORD *)(v287 + 64) = 0;
  *(_DWORD *)(v287 + 72) = 0;
  v288 = v329;
  *(_QWORD *)(v287 + 24) = v329;
  *(_QWORD *)(v287 + 32) = 0x8000000100090C20;
  *(_QWORD *)(v287 + 40) = v107;
  *(_BYTE *)(v287 + 48) = 0;
  v0[177] = v287;
  v289 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v289 + 16) = 1040522936;
  *(_QWORD *)(v289 + 56) = 0;
  *(_QWORD *)(v289 + 64) = 0;
  *(_DWORD *)(v289 + 72) = 0;
  *(_QWORD *)(v289 + 24) = v257;
  *(_QWORD *)(v289 + 32) = 0x8000000100090C40;
  *(_QWORD *)(v289 + 40) = v107;
  *(_BYTE *)(v289 + 48) = 0;
  v0[178] = v289;
  v290 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v290 + 16) = 0x40000000;
  *(_QWORD *)(v290 + 56) = 0;
  *(_QWORD *)(v290 + 64) = 0;
  *(_DWORD *)(v290 + 72) = 0;
  *(_QWORD *)(v290 + 24) = v318;
  *(_QWORD *)(v290 + 32) = 0x8000000100093CF0;
  *(_QWORD *)(v290 + 40) = v107;
  *(_BYTE *)(v290 + 48) = 0;
  v0[179] = v290;
  v291 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v291 + 16) = 0x40000000;
  *(_QWORD *)(v291 + 56) = 0;
  *(_QWORD *)(v291 + 64) = 0;
  *(_DWORD *)(v291 + 72) = 0;
  *(_QWORD *)(v291 + 24) = v268;
  *(_QWORD *)(v291 + 32) = 0x8000000100093D10;
  *(_QWORD *)(v291 + 40) = v107;
  *(_BYTE *)(v291 + 48) = 0;
  v0[180] = v291;
  v292 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v292 + 16) = 1067450368;
  *(_QWORD *)(v292 + 56) = 0;
  *(_QWORD *)(v292 + 64) = 0;
  *(_DWORD *)(v292 + 72) = 0;
  *(_QWORD *)(v292 + 24) = v261;
  *(_QWORD *)(v292 + 32) = 0x8000000100093D30;
  *(_QWORD *)(v292 + 40) = v107;
  *(_BYTE *)(v292 + 48) = 0;
  v0[181] = v292;
  v293 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v293 + 16) = 1067450368;
  *(_QWORD *)(v293 + 56) = 0;
  *(_QWORD *)(v293 + 64) = 0;
  *(_DWORD *)(v293 + 72) = 0;
  *(_QWORD *)(v293 + 24) = v325;
  *(_QWORD *)(v293 + 32) = 0x8000000100093D50;
  *(_QWORD *)(v293 + 40) = v107;
  *(_BYTE *)(v293 + 48) = 0;
  v0[182] = v293;
  v294 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v294 + 16) = 1050253722;
  *(_QWORD *)(v294 + 56) = 0;
  *(_QWORD *)(v294 + 64) = 0;
  *(_DWORD *)(v294 + 72) = 0;
  *(_QWORD *)(v294 + 24) = v288;
  *(_QWORD *)(v294 + 32) = 0x8000000100093D70;
  *(_QWORD *)(v294 + 40) = v107;
  *(_BYTE *)(v294 + 48) = 0;
  v0[183] = v294;
  v295 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v295 + 16) = 1052266988;
  *(_QWORD *)(v295 + 56) = 0;
  *(_QWORD *)(v295 + 64) = 0;
  *(_DWORD *)(v295 + 72) = 0;
  *(_QWORD *)(v295 + 24) = v257;
  *(_QWORD *)(v295 + 32) = 0x8000000100093D90;
  *(_QWORD *)(v295 + 40) = v107;
  *(_BYTE *)(v295 + 48) = 0;
  v0[184] = v295;
  v296 = swift_allocObject(v244, 76, 7);
  *(_DWORD *)(v296 + 16) = 1056964608;
  *(_QWORD *)(v296 + 56) = 0;
  *(_QWORD *)(v296 + 64) = 0;
  *(_DWORD *)(v296 + 72) = 0;
  *(_QWORD *)(v296 + 24) = 0xD000000000000011;
  *(_QWORD *)(v296 + 32) = 0x8000000100093DB0;
  *(_QWORD *)(v296 + 40) = v107;
  *(_BYTE *)(v296 + 48) = 0;
  v0[185] = v296;
  v297 = v311;
  v298 = v314;
  v299 = v297;
  return v0;
}

unint64_t sub_100043FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100044128(a1, a2, v5);
}

unint64_t sub_100044048(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100044208(a1, v4);
}

unint64_t sub_100044078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000442CC(a1, v4);
}

unint64_t sub_1000440A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_1000443D4(a1, v7);
}

unint64_t sub_100044128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100044208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000447A8(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10000AB74((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1000442CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10004476C();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1000443D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100044548(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 5)
    return 5;
  else
    return v5;
}

unint64_t sub_10004458C()
{
  unint64_t result;

  result = qword_1000CAF88;
  if (!qword_1000CAF88)
  {
    result = swift_getWitnessTable(&unk_1000857E4, &type metadata for Defaults.HapticFeedbackStyle);
    atomic_store(result, (unint64_t *)&qword_1000CAF88);
  }
  return result;
}

unint64_t sub_1000445D0()
{
  unint64_t result;

  result = qword_1000CAF90;
  if (!qword_1000CAF90)
  {
    result = swift_getWitnessTable(&unk_100085694, &type metadata for Defaults.BlurInitType);
    atomic_store(result, (unint64_t *)&qword_1000CAF90);
  }
  return result;
}

unint64_t sub_100044614()
{
  unint64_t result;

  result = qword_1000CAF98;
  if (!qword_1000CAF98)
  {
    result = swift_getWitnessTable(&unk_10008556C, &type metadata for Defaults.ApertureViewType);
    atomic_store(result, (unint64_t *)&qword_1000CAF98);
  }
  return result;
}

unint64_t sub_100044658()
{
  unint64_t result;

  result = qword_1000CAFA0;
  if (!qword_1000CAFA0)
  {
    result = swift_getWitnessTable(&unk_10008541C, &type metadata for Defaults.ContinueTrigger);
    atomic_store(result, (unint64_t *)&qword_1000CAFA0);
  }
  return result;
}

uint64_t sub_10004469C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C85A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000446E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000C85A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100044724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C85A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004476C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C72B0;
  if (!qword_1000C72B0)
  {
    v1 = objc_opt_self(UIView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000C72B0);
  }
  return result;
}

uint64_t sub_1000447A8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000447E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100044860@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t sub_100044880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t MetatypeMetadata;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD v15[2];

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin();
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = v3;
  MetatypeMetadata = swift_getMetatypeMetadata(v3);
  v7 = String.init<A>(describing:)(v15, MetatypeMetadata);
  v9 = v8;
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  v10._countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 16))(v5, v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v5, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v15[0];
}

char *sub_100044990()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  swift_release(*((_QWORD *)v0 + 2));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 96)]);
  return v0;
}

uint64_t sub_1000449D4()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  swift_release(*((_QWORD *)v0 + 2));
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))(&v0[*(_QWORD *)(*(_QWORD *)v0 + 96)]);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for Publishing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishing);
}

uint64_t sub_100044A30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[8];

  v14[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v14[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2 = *(_QWORD *)(a1 + 80);
  v3 = type metadata accessor for AnyPublisher(255, v2, &type metadata for Never, &protocol witness table for Never);
  v4 = type metadata accessor for Optional(255, v2);
  v5 = type metadata accessor for CurrentValueSubject(255, v4, &type metadata for Never, &protocol witness table for Never);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v5);
  v10 = v3;
  v11 = type metadata accessor for Publishers.Map(255, v5, v3, WitnessTable);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v3);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v11);
  v7 = type metadata accessor for Publishers.SwitchToLatest(255, &v10);
  result = type metadata accessor for Optional(319, v7);
  if (v9 <= 0x3F)
  {
    v14[2] = *(_QWORD *)(result - 8) + 64;
    v14[3] = "\b";
    v14[4] = &unk_1000859A8;
    v14[5] = &unk_1000859C0;
    v14[6] = "\b";
    v14[7] = "\b";
    return swift_initClassMetadata2(a1, 0, 8, v14, a1 + 88);
  }
  return result;
}

uint64_t sub_100044B8C()
{
  return sub_100044880();
}

uint64_t sub_100044BAC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  _BYTE v21[24];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = type metadata accessor for AnyPublisher(255, v4, &type metadata for Never, &protocol witness table for Never);
  v6 = type metadata accessor for Optional(255, v4);
  v7 = type metadata accessor for CurrentValueSubject(255, v6, &type metadata for Never, &protocol witness table for Never);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v7);
  v22 = v5;
  v23 = type metadata accessor for Publishers.Map(255, v7, v5, WitnessTable);
  v24 = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v5);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v23);
  v9 = type metadata accessor for Publishers.SwitchToLatest(255, &v22);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v12);
  v16 = &v21[-v15 - 8];
  v17 = (char *)v1 + *(_QWORD *)(v3 + 104);
  swift_beginAccess(v17, &v22, 0, 0);
  (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
  v18 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(a1, v16, v9);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v16, v10);
  sub_100044DE0(v1);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(v14, a1, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v9);
  swift_beginAccess(v17, v21, 33, 0);
  (*(void (**)(char *, _BYTE *, uint64_t))(v11 + 40))(v17, v14, v10);
  return swift_endAccess(v21);
}

uint64_t sub_100044DE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(*a1 + 80);
  v3 = type metadata accessor for Optional(255, v2);
  v4 = type metadata accessor for CurrentValueSubject(255, v3, &type metadata for Never, &protocol witness table for Never);
  v5 = type metadata accessor for AnyPublisher(255, v2, &type metadata for Never, &protocol witness table for Never);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v4);
  v7 = type metadata accessor for Publishers.Map(0, v4, v5, WitnessTable);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - v9;
  v11 = a1[2];
  v16 = a1[3];
  swift_retain(v16);
  swift_retain(v11);
  Publisher.map<A>(_:)(sub_10004581C, v11, v4, v5, WitnessTable);
  swift_release(v11);
  swift_release(v16);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v7);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v5);
  Publisher<>.switchToLatest()(v7, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100044F64@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;

  v26 = a1;
  v27 = a3;
  v24 = a2;
  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + class metadata base offset for CurrentValueSubject);
  v5 = type metadata accessor for Just(0, v4);
  v25 = *(_QWORD *)(v5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v7 = (char *)&v23 - v6;
  v8 = type metadata accessor for Optional(0, v4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  v12 = (char *)&v23 - v11;
  v13 = *(_QWORD *)(v4 - 8);
  v14 = __chkstk_darwin(v10);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v26, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v28 = v24;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v3);
    result = Publisher.eraseToAnyPublisher()(v3, WitnessTable);
    v21 = result;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, v4);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v4);
    Just.init(_:)(v16, v4);
    v22 = swift_getWitnessTable(&protocol conformance descriptor for Just<A>, v5);
    v21 = Publisher.eraseToAnyPublisher()(v5, v22);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v4);
  }
  *v27 = v21;
  return result;
}

uint64_t sub_100045170()
{
  return CurrentValueSubject.value.getter();
}

uint64_t sub_100045190()
{
  return CurrentValueSubject.value.getter();
}

uint64_t sub_1000451B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v8 = type metadata accessor for AnyPublisher(255, v7, &type metadata for Never, &protocol witness table for Never);
  v9 = type metadata accessor for Optional(255, v7);
  v10 = type metadata accessor for CurrentValueSubject(255, v9, &type metadata for Never, &protocol witness table for Never);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v10);
  v18 = v8;
  v19 = type metadata accessor for Publishers.Map(255, v10, v8, WitnessTable);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v8);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v19);
  v12 = type metadata accessor for Publishers.SwitchToLatest(0, &v18);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v18 - v14;
  sub_100044BAC((uint64_t)&v18 - v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>, v12);
  dispatch thunk of Publisher.receive<A>(subscriber:)(a1, a2, a3, v12, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_100045318()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t MetatypeMetadata;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v1 = *v0;
  v2 = *(_QWORD *)(v1 + 80);
  v38 = type metadata accessor for Optional(0, v2);
  v3 = *(_QWORD *)(v38 - 8);
  v4 = __chkstk_darwin(v38);
  v6 = (uint64_t *)((char *)&v37 - v5);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = __chkstk_darwin(v4);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v37 - v11;
  v13 = sub_100004B18(&qword_1000CB118);
  v14 = (char *)swift_allocObject(v13, 64, 7);
  *((_OWORD *)v14 + 1) = xmmword_100081E60;
  v39 = v1;
  MetatypeMetadata = swift_getMetatypeMetadata(v1);
  *((_QWORD *)v14 + 4) = String.init<A>(describing:)(&v39, MetatypeMetadata);
  *((_QWORD *)v14 + 5) = v16;
  v39 = 0;
  v40 = 0xE000000000000000;
  v17._countAndFlagsBits = 0x3D65756C6176;
  v17._object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  CurrentValueSubject.value.getter(v12, v18);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v12, v2);
  v19 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v20 = v19(v12, v2);
  v21 = v40;
  *((_QWORD *)v14 + 6) = v39;
  *((_QWORD *)v14 + 7) = v21;
  CurrentValueSubject.value.getter(v6, v20);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2) == 1)
  {
    (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v38);
  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 32))(v10, v6, v2);
    v39 = 0;
    v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v22._countAndFlagsBits = 0x656469727265766FLL;
    v22._object = (void *)0xEE003D65756C6156;
    String.append(_:)(v22);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v10, v2);
    v23 = v39;
    v24 = v40;
    v26 = *((_QWORD *)v14 + 2);
    v25 = *((_QWORD *)v14 + 3);
    if (v26 >= v25 >> 1)
      v14 = sub_10005CEC0((char *)(v25 > 1), v26 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v26 + 1;
    v27 = &v14[16 * v26];
    *((_QWORD *)v27 + 4) = v23;
    *((_QWORD *)v27 + 5) = v24;
    v19(v10, v2);
  }
  v39 = (uint64_t)v14;
  v28 = sub_100004B18(&qword_1000CB120);
  v29 = sub_1000457D0();
  v30 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v28, v29);
  v32 = v31;
  swift_bridgeObjectRelease(v14);
  v39 = 60;
  v40 = 0xE100000000000000;
  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease(v32);
  v34 = v40;
  swift_bridgeObjectRetain(v40);
  v35._countAndFlagsBits = 62;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v34);
  return v39;
}

_QWORD *sub_1000455EC()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *v0;
  swift_release(v0[2]);
  swift_release(v0[3]);
  v2 = (char *)v0 + *(_QWORD *)(*v0 + 104);
  v3 = *(_QWORD *)(v1 + 80);
  v4 = type metadata accessor for AnyPublisher(255, v3, &type metadata for Never, &protocol witness table for Never);
  v5 = type metadata accessor for Optional(255, v3);
  v6 = type metadata accessor for CurrentValueSubject(255, v5, &type metadata for Never, &protocol witness table for Never);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v6);
  v11 = v4;
  v12 = type metadata accessor for Publishers.Map(255, v6, v4, WitnessTable);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v4);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v12);
  v8 = type metadata accessor for Publishers.SwitchToLatest(255, &v11);
  v9 = type metadata accessor for Optional(0, v8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v2, v9);

  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 128) + 8));
  swift_release(*(_QWORD *)((char *)v0 + *(_QWORD *)(*v0 + 144)));
  return v0;
}

uint64_t sub_100045754()
{
  uint64_t v0;

  sub_1000455EC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for Publishing2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Publishing2);
}

uint64_t sub_100045784()
{
  return sub_100045318();
}

uint64_t sub_1000457A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000451B0(a1, a2, a3);
}

void *sub_1000457C4()
{
  return &protocol witness table for Never;
}

unint64_t sub_1000457D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB128;
  if (!qword_1000CB128)
  {
    v1 = sub_100005F48(&qword_1000CB120);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000CB128);
  }
  return result;
}

uint64_t sub_10004581C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;

  return sub_100044F64(a1, v2, a2);
}

void *initializeWithCopy for CompoundSpring(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t getEnumTagSinglePayload for CompoundSpring(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 368))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CompoundSpring(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 368) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CompoundSpring()
{
  return &type metadata for CompoundSpring;
}

uint64_t *sub_1000458E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_100045970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1000459B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_100045A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

uint64_t sub_100045A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100045ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_100045B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100045B4C);
}

uint64_t sub_100045B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100045BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100045BE0);
}

uint64_t sub_100045BE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for ActivityIcon(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000CB188, (uint64_t)&nominal type descriptor for ActivityIcon);
}

uint64_t sub_100045C6C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100045CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (**v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (**v46)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  _OWORD v58[3];

  v2 = v1;
  v54 = a1;
  v3 = (int *)type metadata accessor for ActivityIconView(0);
  v53 = *((_QWORD *)v3 - 1);
  v51 = *(_QWORD *)(v53 + 64);
  __chkstk_darwin(v3);
  v49 = (uint64_t)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v5);
  v52 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004B18(&qword_1000CB280);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_100004B18(&qword_1000CB288);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004B18(&qword_1000CB290);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004B18(&qword_1000CB298);
  v16 = __chkstk_darwin(v50);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v9 = static Alignment.center.getter(v16);
  v9[1] = v19;
  v20 = sub_100004B18(&qword_1000CB2A0);
  v21 = sub_100046110(v2, (uint64_t)v9 + *(int *)(v20 + 44));
  v22 = *(_QWORD *)(v2 + v3[5]);
  v23 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(v58, v22, 0, v22, 0, v23, v24);
  sub_100017F28((uint64_t)v9, (uint64_t)v12, &qword_1000CB280);
  v25 = &v12[*(int *)(v10 + 36)];
  v26 = v58[1];
  *(_OWORD *)v25 = v58[0];
  *((_OWORD *)v25 + 1) = v26;
  *((_OWORD *)v25 + 2) = v58[2];
  v27 = sub_100017AB4((uint64_t)v9, &qword_1000CB280);
  v28 = static Animation.easeOut(duration:)(v27, *(double *)(v2 + v3[7]) - *(double *)(v2 + v3[6]));
  v29 = v2 + v3[12];
  v30 = *(_BYTE *)v29;
  v31 = *(_QWORD *)(v29 + 8);
  v55 = v30;
  v56 = v31;
  v32 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(&v57, v32);
  LOBYTE(v3) = v57;
  sub_100017F28((uint64_t)v12, (uint64_t)v15, &qword_1000CB288);
  v33 = &v15[*(int *)(v13 + 36)];
  *(_QWORD *)v33 = v28;
  v33[8] = (char)v3;
  sub_100017AB4((uint64_t)v12, &qword_1000CB288);
  v34 = sub_100004B18(&qword_1000CB1C0);
  v35 = (uint64_t)v52;
  v48 = v2;
  Binding.wrappedValue.getter(v34);
  v36 = v49;
  sub_100017FC4(v2, v49, type metadata accessor for ActivityIconView);
  v37 = *(unsigned __int8 *)(v53 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = v38 + v51;
  v40 = v37 | 7;
  v41 = swift_allocObject(&unk_1000B6958, v38 + v51, v37 | 7);
  sub_100047680(v36, v41 + v38);
  v42 = (uint64_t)&v18[*(int *)(v50 + 36)];
  sub_100017FC4(v35, v42, type metadata accessor for ActivityIcon);
  v43 = (uint64_t (**)(uint64_t))(v42 + *(int *)(sub_100004B18(&qword_1000CB2A8) + 36));
  *v43 = sub_1000476C4;
  v43[1] = (uint64_t (*)(uint64_t))v41;
  sub_100017F28((uint64_t)v15, (uint64_t)v18, &qword_1000CB290);
  sub_100018008(v35, type metadata accessor for ActivityIcon);
  sub_100017AB4((uint64_t)v15, &qword_1000CB290);
  sub_100017FC4(v48, v36, type metadata accessor for ActivityIconView);
  v44 = swift_allocObject(&unk_1000B6980, v39, v40);
  sub_100047680(v36, v44 + v38);
  v45 = v54;
  sub_100017F28((uint64_t)v18, v54, &qword_1000CB298);
  v46 = (uint64_t (**)())(v45 + *(int *)(sub_100004B18(&qword_1000CB2B0) + 36));
  *v46 = sub_1000477FC;
  v46[1] = (uint64_t (*)())v44;
  v46[2] = 0;
  v46[3] = 0;
  return sub_100017AB4((uint64_t)v18, &qword_1000CB298);
}

uint64_t sub_100046110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a2;
  v3 = sub_100004B18(&qword_1000CB2C0);
  v4 = __chkstk_darwin(v3);
  v33 = (uint64_t)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v32 = (uint64_t)&v32 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = (int *)type metadata accessor for ActivityIconView(0);
  v14 = (uint64_t *)(a1 + v13[10]);
  v16 = *v14;
  v15 = v14[1];
  v35 = v16;
  v36 = v15;
  v17 = sub_100004B18(&qword_1000CB2B8);
  State.wrappedValue.getter(&v37, v17);
  v18 = v37;
  v19 = a1 + v13[12];
  v21 = *(_QWORD *)(v19 + 8);
  LOBYTE(v35) = *(_BYTE *)v19;
  v20 = v35;
  v36 = v21;
  v22 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(&v37, v22);
  sub_100046364(v18, v37, (uint64_t)v12);
  swift_release(v18);
  v23 = (uint64_t *)(a1 + v13[11]);
  v25 = *v23;
  v24 = v23[1];
  v35 = v25;
  v36 = v24;
  State.wrappedValue.getter(&v37, v17);
  v26 = v37;
  LOBYTE(v35) = v20;
  v36 = v21;
  State.wrappedValue.getter(&v37, v22);
  sub_100046364(v26, (v37 & 1) == 0, (uint64_t)v10);
  swift_release(v26);
  v27 = v32;
  sub_100017F28((uint64_t)v12, v32, &qword_1000CB2C0);
  v28 = v33;
  sub_100017F28((uint64_t)v10, v33, &qword_1000CB2C0);
  v29 = v34;
  sub_100017F28(v27, v34, &qword_1000CB2C0);
  v30 = sub_100004B18(&qword_1000CB2C8);
  sub_100017F28(v28, v29 + *(int *)(v30 + 48), &qword_1000CB2C0);
  sub_100017AB4((uint64_t)v10, &qword_1000CB2C0);
  sub_100017AB4((uint64_t)v12, &qword_1000CB2C0);
  sub_100017AB4(v28, &qword_1000CB2C0);
  return sub_100017AB4(v27, &qword_1000CB2C0);
}

uint64_t sub_100046364@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  char *v34;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a2;
  v43 = a1;
  v45 = a3;
  v40 = sub_100004B18(&qword_1000CB2D0);
  __chkstk_darwin(v40);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v6);
  v8 = (double *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_100004B18(&qword_1000CB2D8);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_100004B18(&qword_1000CB2E0);
  __chkstk_darwin(v38);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100004B18(&qword_1000CB2E8);
  __chkstk_darwin(v39);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100004B18(&qword_1000CB2C0);
  __chkstk_darwin(v41);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = (int *)type metadata accessor for ActivityIconView(0);
  v18 = v37[5];
  v44 = v3;
  v19 = *(double *)(v3 + v18) * 0.25;
  v20 = (char *)v8 + *(int *)(v6 + 20);
  v21 = enum case for RoundedCornerStyle.continuous(_:);
  v22 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
  *v8 = v19;
  v8[1] = v19;
  sub_100017FC4((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v5[*(int *)(v40 + 36)] = 256;
  v23 = *(int *)(v9 + 36);
  v24 = v42;
  sub_100017F28((uint64_t)v5, (uint64_t)v11 + v23, &qword_1000CB2D0);
  v25 = v43;
  *v11 = v43;
  swift_retain(v25);
  sub_100017AB4((uint64_t)v5, &qword_1000CB2D0);
  sub_100018008((uint64_t)v8, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v26 = 0;
  v27 = 1.0;
  if ((v24 & 1) != 0)
    v28 = 1.0;
  else
    v28 = 0.0;
  sub_100017F28((uint64_t)v11, (uint64_t)v13, &qword_1000CB2D8);
  *(double *)&v13[*(int *)(v38 + 36)] = v28;
  v29 = sub_100017AB4((uint64_t)v11, &qword_1000CB2D8);
  if ((v24 & 1) == 0)
    v27 = *(double *)(v44 + v37[9]);
  v30 = static UnitPoint.center.getter(v29);
  v32 = v31;
  sub_100017F28((uint64_t)v13, (uint64_t)v15, &qword_1000CB2E0);
  v33 = (double *)&v15[*(int *)(v39 + 36)];
  *v33 = v27;
  v33[1] = v27;
  v33[2] = v30;
  *((_QWORD *)v33 + 3) = v32;
  sub_100017AB4((uint64_t)v13, &qword_1000CB2E0);
  if ((v24 & 1) == 0)
    v26 = *(_QWORD *)(v44 + v37[8]);
  sub_100017F28((uint64_t)v15, (uint64_t)v17, &qword_1000CB2E8);
  v34 = &v17[*(int *)(v41 + 36)];
  *(_QWORD *)v34 = v26;
  v34[8] = 0;
  sub_100017AB4((uint64_t)v15, &qword_1000CB2E8);
  return sub_100018064((uint64_t)v17, v45, &qword_1000CB2C0);
}

uint64_t sub_1000466E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void ***v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void **aBlock;
  uint64_t v54;
  uint64_t (*v55)();
  void *v56;
  uint64_t (*v57)();
  uint64_t v58;
  uint64_t v59;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v50 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  __chkstk_darwin(v6);
  v47 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ActivityIconView(0);
  v46 = *((_QWORD *)v8 - 1);
  v9 = *(_QWORD *)(v46 + 64);
  __chkstk_darwin(v8);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v46 - v15;
  v17 = v1 + v8[12];
  v18 = *(_BYTE *)v17;
  v19 = *(_QWORD *)(v17 + 8);
  LOBYTE(aBlock) = v18;
  v54 = v19;
  v20 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(&v59, v20);
  v21 = v59;
  v22 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  v23 = *(_QWORD *)(a1 + v22);
  if (v21 == 1)
  {
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + v22);
    }
    else
    {
      v24 = AnyView.init<A>(_:)(0, &type metadata for EmptyView, &protocol witness table for EmptyView);
      v23 = 0;
    }
    v25 = v8[11];
  }
  else
  {
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + v22);
    }
    else
    {
      v24 = AnyView.init<A>(_:)(0, &type metadata for EmptyView, &protocol witness table for EmptyView);
      v23 = 0;
    }
    v25 = v8[10];
  }
  v26 = (void ***)(v2 + v25);
  v28 = *v26;
  v27 = (uint64_t)v26[1];
  aBlock = v28;
  v54 = v27;
  v59 = v24;
  swift_retain(v23);
  v29 = sub_100004B18(&qword_1000CB2B8);
  State.wrappedValue.setter(&v59, v29);
  v30 = sub_10001A940();
  v31 = (void *)static OS_dispatch_queue.main.getter(v30);
  static DispatchTime.now()();
  + infix(_:_:)(v14, *(double *)(v2 + v8[6]));
  v32 = *(void (**)(char *, uint64_t))(v11 + 8);
  v32(v14, v10);
  sub_100017FC4(v2, (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActivityIconView);
  v33 = *(unsigned __int8 *)(v46 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = swift_allocObject(&unk_1000B69A8, v34 + v9, v33 | 7);
  sub_100047680((uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v35 + v34);
  v57 = sub_10004780C;
  v58 = v35;
  aBlock = _NSConcreteStackBlock;
  v54 = 1107296256;
  v55 = sub_100030320;
  v56 = &unk_1000B69C0;
  v36 = _Block_copy(&aBlock);
  swift_release(v58);
  v37 = v47;
  static DispatchQoS.unspecified.getter(v38);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v39 = sub_10004786C();
  v40 = sub_100004B18(&qword_1000C6458);
  v41 = sub_10000AAFC((unint64_t *)&qword_1000C6460, &qword_1000C6458, (uint64_t)&protocol conformance descriptor for [A]);
  v42 = v50;
  v43 = v40;
  v44 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v43, v41, v52, v39);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v37, v42, v36);
  _Block_release(v36);

  (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v44);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v49);
  return ((uint64_t (*)(char *, uint64_t))v32)(v16, v10);
}

uint64_t sub_100046AA8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v0 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100004B18(&qword_1000CB1C0);
  Binding.wrappedValue.getter(v3);
  sub_1000466E0((uint64_t)v2);
  return sub_100018008((uint64_t)v2, type metadata accessor for ActivityIcon);
}

double sub_100046B34(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  _BYTE v6[9];
  uint64_t v7;
  uint64_t v8;

  v1 = (char *)(a1 + *(int *)(type metadata accessor for ActivityIconView(0) + 48));
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  swift_retain(v3);
  v4 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(&v8, v4);
  v6[1] = v2;
  v7 = v3;
  v6[0] = (v8 & 1) == 0;
  State.wrappedValue.setter(v6, v4);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_100046BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_100018064(a1, a2, &qword_1000CB1C0);
  v5 = (int *)type metadata accessor for ActivityIconView(0);
  *(double *)(a2 + v5[5]) = a3;
  *(_QWORD *)(a2 + v5[6]) = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)(a2 + v5[7]) = 0x3FD3333333333333;
  *(_QWORD *)(a2 + v5[8]) = 0x4024000000000000;
  *(_QWORD *)(a2 + v5[9]) = 0x3FB999999999999ALL;
  v6 = (_QWORD *)(a2 + v5[10]);
  v14 = AnyView.init<A>(_:)(v5, &type metadata for EmptyView, &protocol witness table for EmptyView);
  v7 = State.init(wrappedValue:)(&v14, &type metadata for AnyView);
  v8 = v16;
  *v6 = v15;
  v6[1] = v8;
  v9 = (_QWORD *)(a2 + v5[11]);
  v14 = AnyView.init<A>(_:)(v7, &type metadata for EmptyView, &protocol witness table for EmptyView);
  State.init(wrappedValue:)(&v14, &type metadata for AnyView);
  v10 = v16;
  *v9 = v15;
  v9[1] = v10;
  v11 = a2 + v5[12];
  LOBYTE(v14) = 1;
  result = State.init(wrappedValue:)(&v14, &type metadata for Bool);
  v13 = v16;
  *(_BYTE *)v11 = v15;
  *(_QWORD *)(v11 + 8) = v13;
  return result;
}

uint64_t type metadata accessor for ActivityIconView(uint64_t a1)
{
  return sub_10000565C(a1, (uint64_t *)&unk_1000CB220, (uint64_t)&nominal type descriptor for ActivityIconView);
}

uint64_t *sub_100046D40(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    a1[1] = v8;
    swift_retain(v4);
    swift_retain(v8);
    v9 = *(int *)(sub_100004B18(&qword_1000CB1C0) + 32);
    v10 = (char *)v7 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
    v14 = *(_QWORD *)&v11[v13];
    *(_QWORD *)&v10[v13] = v14;
    v15 = a3[6];
    *(uint64_t *)((char *)v7 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    v16 = a3[8];
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v7 + v16) = *(uint64_t *)((char *)a2 + v16);
    v17 = a3[10];
    *(uint64_t *)((char *)v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v18 = (uint64_t *)((char *)v7 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = *v19;
    v21 = v19[1];
    *v18 = *v19;
    v18[1] = v21;
    v22 = a3[11];
    v23 = a3[12];
    v24 = (uint64_t *)((char *)v7 + v22);
    v25 = (uint64_t *)((char *)a2 + v22);
    v26 = *v25;
    v27 = v25[1];
    *v24 = *v25;
    v24[1] = v27;
    v28 = (char *)v7 + v23;
    v29 = (char *)a2 + v23;
    *v28 = *v29;
    v4 = *((_QWORD *)v29 + 1);
    *((_QWORD *)v28 + 1) = v4;
    swift_retain(v14);
    swift_retain(v20);
    swift_retain(v21);
    swift_retain(v26);
    swift_retain(v27);
  }
  swift_retain(v4);
  return v7;
}

double sub_100046EA8(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  double result;

  swift_release(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(sub_100004B18(&qword_1000CB1C0) + 32);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for ActivityIcon(0);
  swift_release(*(_QWORD *)&v4[*(int *)(v6 + 20)]);
  v7 = (_QWORD *)((char *)a1 + a2[10]);
  swift_release(*v7);
  swift_release(v7[1]);
  v8 = (_QWORD *)((char *)a1 + a2[11]);
  swift_release(*v8);
  swift_release(v8[1]);
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + a2[12] + 8)).n128_u64[0];
  return result;
}

uint64_t *sub_100046F60(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_retain(v6);
  swift_retain(v7);
  v8 = *(int *)(sub_100004B18(&qword_1000CB1C0) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  v13 = *(_QWORD *)&v10[v12];
  *(_QWORD *)&v9[v12] = v13;
  v14 = a3[6];
  *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
  *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  v15 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  v16 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = *v18;
  v20 = v18[1];
  *v17 = *v18;
  v17[1] = v20;
  v21 = a3[11];
  v22 = a3[12];
  v23 = (uint64_t *)((char *)a1 + v21);
  v24 = (uint64_t *)((char *)a2 + v21);
  v25 = *v24;
  v26 = v24[1];
  *v23 = *v24;
  v23[1] = v26;
  v27 = (char *)a1 + v22;
  v28 = (char *)a2 + v22;
  *v27 = *v28;
  v29 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v27 + 1) = v29;
  swift_retain(v13);
  swift_retain(v19);
  swift_retain(v20);
  swift_retain(v25);
  swift_retain(v26);
  swift_retain(v29);
  return a1;
}

uint64_t *sub_100047094(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(sub_100004B18(&qword_1000CB1C0) + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  v15 = *(_QWORD *)&v11[v14];
  v16 = *(_QWORD *)&v12[v14];
  *(_QWORD *)&v11[v14] = v16;
  swift_retain(v16);
  swift_release(v15);
  *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v17 = a3[10];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(uint64_t *)((char *)a2 + v17);
  v21 = *(uint64_t *)((char *)a1 + v17);
  *(uint64_t *)((char *)a1 + v17) = v20;
  swift_retain(v20);
  swift_release(v21);
  v22 = *((_QWORD *)v18 + 1);
  v23 = *((_QWORD *)v19 + 1);
  *((_QWORD *)v18 + 1) = v23;
  swift_retain(v23);
  swift_release(v22);
  v24 = a3[11];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = *(uint64_t *)((char *)a2 + v24);
  v28 = *(uint64_t *)((char *)a1 + v24);
  *(uint64_t *)((char *)a1 + v24) = v27;
  swift_retain(v27);
  swift_release(v28);
  v29 = *((_QWORD *)v25 + 1);
  v30 = *((_QWORD *)v26 + 1);
  *((_QWORD *)v25 + 1) = v30;
  swift_retain(v30);
  swift_release(v29);
  v31 = a3[12];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  *v32 = *v33;
  v34 = *((_QWORD *)v32 + 1);
  v35 = *((_QWORD *)v33 + 1);
  *((_QWORD *)v32 + 1) = v35;
  swift_retain(v35);
  swift_release(v34);
  return a1;
}

_QWORD *sub_100047238(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(sub_100004B18(&qword_1000CB1C0) + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = type metadata accessor for ActivityIcon(0);
  *(_QWORD *)&v8[*(int *)(v11 + 20)] = *(_QWORD *)&v9[*(int *)(v11 + 20)];
  v12 = a3[6];
  *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  v15 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

uint64_t *sub_100047314(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(sub_100004B18(&qword_1000CB1C0) + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  v13 = *(_QWORD *)&v9[v12];
  *(_QWORD *)&v9[v12] = *(_QWORD *)&v10[v12];
  swift_release(v13);
  v14 = a3[6];
  *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
  *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  v15 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  v16 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *(uint64_t *)((char *)a1 + v16);
  *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
  swift_release(v19);
  v20 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_release(v20);
  v21 = a3[11];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(uint64_t *)((char *)a1 + v21);
  *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
  swift_release(v24);
  v25 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  swift_release(v25);
  v26 = a3[12];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  *v27 = *v28;
  v29 = *((_QWORD *)v27 + 1);
  *((_QWORD *)v27 + 1) = *((_QWORD *)v28 + 1);
  swift_release(v29);
  return a1;
}

uint64_t sub_10004746C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047478);
}

uint64_t sub_100047478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100004B18(&qword_1000CB1C0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000474F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047504);
}

uint64_t sub_100047504(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100004B18(&qword_1000CB1C0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  return result;
}

void sub_100047580(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  sub_100047614(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = &unk_100085B38;
    v4[7] = &unk_100085B38;
    v4[8] = &unk_100085B50;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

void sub_100047614(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000CB230)
  {
    v2 = type metadata accessor for ActivityIcon(255);
    v3 = type metadata accessor for Binding(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000CB230);
  }
}

uint64_t sub_100047668(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100099888, 1);
}

uint64_t sub_100047680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ActivityIconView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000476C4(uint64_t a1)
{
  type metadata accessor for ActivityIconView(0);
  return sub_1000466E0(a1);
}

uint64_t sub_100047708()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (int *)type metadata accessor for ActivityIconView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 8));
  v8 = v7 + *(int *)(sub_100004B18(&qword_1000CB1C0) + 32);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = type metadata accessor for ActivityIcon(0);
  swift_release(*(_QWORD *)(v8 + *(int *)(v10 + 20)));
  v11 = (_QWORD *)(v7 + v1[10]);
  swift_release(*v11);
  swift_release(v11[1]);
  v12 = (_QWORD *)(v7 + v1[11]);
  swift_release(*v12);
  swift_release(v12[1]);
  swift_release(*(_QWORD *)(v7 + v1[12] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000477FC()
{
  return sub_100047818((uint64_t (*)(uint64_t))sub_100046AA8);
}

uint64_t sub_10004780C()
{
  return sub_100047818((uint64_t (*)(uint64_t))sub_100046B34);
}

uint64_t sub_100047818(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ActivityIconView(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100047854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100047864(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10004786C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6450;
  if (!qword_1000C6450)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000C6450);
  }
  return result;
}

unint64_t sub_1000478B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB2F0;
  if (!qword_1000CB2F0)
  {
    v1 = sub_100005F48(&qword_1000CB2B0);
    sub_100047924();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB2F0);
  }
  return result;
}

unint64_t sub_100047924()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB2F8;
  if (!qword_1000CB2F8)
  {
    v1 = sub_100005F48(&qword_1000CB298);
    sub_1000479A8();
    sub_10000AAFC(&qword_1000CB318, &qword_1000CB2A8, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB2F8);
  }
  return result;
}

unint64_t sub_1000479A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB300;
  if (!qword_1000CB300)
  {
    v1 = sub_100005F48(&qword_1000CB290);
    sub_100047A2C();
    sub_10000AAFC(&qword_1000C7E18, &qword_1000C7E20, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB300);
  }
  return result;
}

unint64_t sub_100047A2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB308;
  if (!qword_1000CB308)
  {
    v1 = sub_100005F48(&qword_1000CB288);
    sub_10000AAFC(&qword_1000CB310, &qword_1000CB280, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB308);
  }
  return result;
}

uint64_t sub_100047AB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100085C78);
  v4 = v0;
  v2 = sub_100047E28();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100047B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100047B58()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100085C50);
  v4 = v0;
  v2 = sub_100047E28();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_100047BC8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100085C50);
  v8 = v3;
  v5 = sub_100047E28();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 40);
  *a2 = v6;
  return swift_retain(v6);
}

double sub_100047C40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100085C50);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100047E28();
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100047E70, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100047CE0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100047D48()
{
  return type metadata accessor for NearbySharingInteractionViewModel(0);
}

uint64_t type metadata accessor for NearbySharingInteractionViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CB350;
  if (!qword_1000CB350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbySharingInteractionViewModel);
  return result;
}

uint64_t sub_100047D8C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100085C18;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_100047E28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB490;
  if (!qword_1000CB490)
  {
    v1 = type metadata accessor for NearbySharingInteractionViewModel(255);
    result = swift_getWitnessTable(&unk_100085C30, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB490);
  }
  return result;
}

uint64_t sub_100047E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

uint64_t destroy for NearbySharingInteractionView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s13PCViewService28NearbySharingInteractionViewVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for NearbySharingInteractionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

_QWORD *assignWithTake for NearbySharingInteractionView(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionView()
{
  return &type metadata for NearbySharingInteractionView;
}

uint64_t sub_10004803C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000999B4, 1);
}

uint64_t sub_10004804C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49;

  v6 = sub_100004B18(&qword_1000CB4A0);
  v48 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v47 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v46 = (char *)&v40 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v40 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v40 - v14;
  v16 = LocalizedStringKey.init(stringLiteral:)(0x62657720646E6553, 0xED00003F6B6E696CLL);
  v17 = Text.init(_:tableName:bundle:comment:)(v16);
  v43 = v18;
  v44 = v17;
  v45 = v19;
  v21 = v20 & 1;
  v22 = swift_allocObject(&unk_1000B6AC0, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  swift_retain(a2);
  swift_retain(a1);
  v23 = sub_100004B18(&qword_1000CB4A8);
  v24 = sub_1000485E8();
  v42 = v15;
  Button.init(action:label:)(sub_1000485CC, v22, sub_100048388, 0, v23, v24);
  v25 = swift_allocObject(&unk_1000B6AE8, 32, 7);
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = a2;
  swift_retain(a1);
  swift_retain(a2);
  v41 = v13;
  Button.init(action:label:)(sub_10004867C, v25, sub_10004845C, 0, v23, v24);
  LOBYTE(v24) = v21;
  v49 = v21;
  v26 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v27 = v46;
  v26(v46, v15, v6);
  v28 = v47;
  v26(v47, v13, v6);
  v30 = v44;
  v29 = v45;
  v31 = a3;
  *a3 = v44;
  v32 = v43;
  v31[1] = v43;
  *((_BYTE *)v31 + 16) = v24;
  v31[3] = v29;
  v33 = sub_100004B18(&qword_1000CB4B8);
  v26((char *)v31 + *(int *)(v33 + 48), v27, v6);
  v26((char *)v31 + *(int *)(v33 + 64), v28, v6);
  v34 = v30;
  v35 = v30;
  v36 = v32;
  sub_10001ED34(v35, v32, v24);
  swift_bridgeObjectRetain(v29);
  v37 = v34;
  sub_10001ED34(v34, v36, v24);
  v38 = *(void (**)(char *, uint64_t))(v48 + 8);
  swift_bridgeObjectRetain(v29);
  v38(v41, v6);
  v38(v42, v6);
  sub_10001ED1C(v37, v36, v24);
  swift_bridgeObjectRelease(v29);
  v38(v28, v6);
  v38(v27, v6);
  sub_10001ED1C(v37, v36, v49);
  return swift_bridgeObjectRelease(v29);
}

double sub_100048388@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100048470(a1).n128_u64[0];
  return result;
}

double sub_100048398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  unint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  *(_QWORD *)&v11 = a2;
  v4 = sub_100004B18(&qword_1000CB4C0);
  State.wrappedValue.getter(&v15, v4);
  v5 = v15;
  KeyPath = swift_getKeyPath(&unk_100085C50);
  v10 = v5;
  v7 = sub_100047E28();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(_QWORD *)(v5 + 40);
  swift_retain(v8);
  swift_release(v5);
  v10 = a3;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 2;
  PassthroughSubject.send(_:)(&v10);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

double sub_10004845C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_100048470(a1).n128_u64[0];
  return result;
}

__n128 sub_100048470@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  _OWORD v16[9];

  v2 = LocalizedStringKey.init(stringLiteral:)();
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Alignment.center.getter(v3);
  sub_100024B9C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 40.0, 0, v10, v11, v3, v5, v9, v7);
  sub_10001ED1C(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v12 = v16[7];
  *(_OWORD *)(a1 + 96) = v16[6];
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = v16[8];
  v13 = v16[3];
  *(_OWORD *)(a1 + 32) = v16[2];
  *(_OWORD *)(a1 + 48) = v13;
  v14 = v16[5];
  *(_OWORD *)(a1 + 64) = v16[4];
  *(_OWORD *)(a1 + 80) = v14;
  result = (__n128)v16[1];
  *(_OWORD *)a1 = v16[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100048570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  v4 = v2[1];
  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v6 = sub_100004B18(&qword_1000CB498);
  return sub_10004804C(v5, v4, (uint64_t *)(a2 + *(int *)(v6 + 44)));
}

double sub_1000485CC()
{
  uint64_t v0;

  return sub_100048398(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 2);
}

unint64_t sub_1000485E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB4B0;
  if (!qword_1000CB4B0)
  {
    v1 = sub_100005F48(&qword_1000CB4A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB4B0);
  }
  return result;
}

uint64_t sub_100048650()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

double sub_10004867C()
{
  uint64_t v0;

  return sub_100048398(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 3);
}

unint64_t sub_10004869C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB4C8;
  if (!qword_1000CB4C8)
  {
    v1 = sub_100005F48(&qword_1000CB4D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB4C8);
  }
  return result;
}

void sub_1000486E8(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_100048738@<X0>(__int128 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  char v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char v85;
  _OWORD v86[11];
  uint64_t v87;
  _OWORD __src[20];
  _OWORD v89[11];
  uint64_t v90;
  _QWORD v91[2];
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  uint64_t (*v110)();
  uint64_t v111;
  char v112;
  __int128 v113;
  char v114;
  uint64_t v115;

  v3 = *((_QWORD *)a1 + 3);
  *(_QWORD *)&__src[0] = *((_QWORD *)a1 + 2);
  *((_QWORD *)&__src[0] + 1) = v3;
  v4 = sub_10001C564();
  swift_bridgeObjectRetain(v3);
  v5 = Text.init<A>(_:)(__src, &type metadata for String, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.title.getter();
  v13 = Text.font(_:)(v12, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_release(v12);
  sub_10001ED1C(v5, v7, v11);
  swift_bridgeObjectRelease(v9);
  v20 = Text.bold()(v13, v15, v17 & 1, v19);
  v59 = v21;
  v60 = v20;
  v23 = v22;
  v58 = v24;
  sub_10001ED1C(v13, v15, v17 & 1);
  swift_bridgeObjectRelease(v19);
  KeyPath = swift_getKeyPath(&unk_100085DD8);
  v56 = swift_getKeyPath(&unk_100085E08);
  v55 = swift_getKeyPath(&unk_100085E38);
  v25 = static Edge.Set.leading.getter(v55);
  v26 = v25;
  v27 = static Edge.Set.trailing.getter(v25);
  v28 = Edge.Set.init(rawValue:)(0);
  v29 = Edge.Set.init(rawValue:)(v28);
  if (Edge.Set.init(rawValue:)(v29 & v26) != v26)
    v28 = Edge.Set.init(rawValue:)(v28 | v26);
  v30 = Edge.Set.init(rawValue:)(v28);
  if (Edge.Set.init(rawValue:)(v30 & v27) == v27)
    v54 = v28;
  else
    v54 = Edge.Set.init(rawValue:)(v28 | v27);
  v31 = EdgeInsets.init(_all:)(44.0);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v76 = v23 & 1;
  v75 = 0;
  v74 = 0;
  v38 = *((_QWORD *)a1 + 4);
  v107 = *a1;
  v39 = *((_QWORD *)&v107 + 1);
  v40 = swift_getKeyPath(&unk_100085E68);
  v41 = swift_getKeyPath(&unk_100085E90);
  swift_bridgeObjectRetain(v38);
  sub_10001C188((uint64_t)&v107);
  static Published.subscript.getter(__src, v39, v40, v41);
  swift_release(v40);
  swift_release(v41);
  sub_10001C1BC((uint64_t)&v107);
  v42 = __src[0];
  __src[0] = *(__int128 *)((char *)a1 + 40);
  swift_retain(v39);
  v43 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(v89, v43);
  v44 = v89[0];
  *(_QWORD *)&v89[0] = 0;
  State.init(wrappedValue:)(v89, &type metadata for CGFloat);
  v45 = __src[0];
  LOBYTE(v89[0]) = 0;
  v46 = State.init(wrappedValue:)(v89, &type metadata for Bool);
  v47 = *((_QWORD *)&__src[0] + 1);
  v108 = v38;
  v109 = v42;
  v110 = sub_100049664;
  v111 = v39;
  v112 = v44;
  v113 = v45;
  v114 = __src[0];
  v115 = *((_QWORD *)&__src[0] + 1);
  v48 = static Alignment.center.getter(v46);
  sub_100024D7C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v62, 0.0, 1, 0.0, 1, v48, v49);
  swift_bridgeObjectRelease(v38);
  sub_100007A90((uint64_t)sub_100049664, v39);
  swift_release(*((_QWORD *)&v45 + 1));
  swift_release(v47);
  v52 = v75;
  v53 = v76;
  *(_QWORD *)&v77 = v60;
  *((_QWORD *)&v77 + 1) = v59;
  LOBYTE(v78) = v76;
  *((_QWORD *)&v78 + 1) = v58;
  *(_QWORD *)&v79 = KeyPath;
  BYTE8(v79) = 1;
  *(_QWORD *)&v80 = v56;
  *((_QWORD *)&v80 + 1) = 3;
  LOBYTE(v81) = v75;
  *((_QWORD *)&v81 + 1) = v55;
  *(_QWORD *)&v82 = 0x3FE6666666666666;
  BYTE8(v82) = v54;
  *(double *)&v83 = v31;
  *((_QWORD *)&v83 + 1) = v33;
  *(_QWORD *)&v84 = v35;
  *((_QWORD *)&v84 + 1) = v37;
  v86[8] = v70;
  v86[9] = v71;
  v86[10] = v72;
  v86[4] = v66;
  v86[5] = v67;
  v86[6] = v68;
  v86[7] = v69;
  v86[0] = v62;
  v86[1] = v63;
  v86[2] = v64;
  v86[3] = v65;
  __src[6] = v83;
  __src[7] = v84;
  __src[2] = v79;
  __src[3] = v80;
  __src[4] = v81;
  __src[5] = v82;
  __src[0] = v77;
  __src[1] = v78;
  *(_OWORD *)((char *)&__src[16] + 8) = v70;
  *(_OWORD *)((char *)&__src[17] + 8) = v71;
  *(_OWORD *)((char *)&__src[18] + 8) = v72;
  *(_OWORD *)((char *)&__src[12] + 8) = v66;
  *(_OWORD *)((char *)&__src[13] + 8) = v67;
  *(_OWORD *)((char *)&__src[14] + 8) = v68;
  *(_OWORD *)((char *)&__src[15] + 8) = v69;
  *(_OWORD *)((char *)&__src[8] + 8) = v62;
  *(_OWORD *)((char *)&__src[9] + 8) = v63;
  *(_OWORD *)((char *)&__src[10] + 8) = v64;
  v50 = v74;
  v85 = v74;
  v87 = v73;
  LOBYTE(__src[8]) = v74;
  *((_QWORD *)&__src[19] + 1) = v73;
  *(_OWORD *)((char *)&__src[11] + 8) = v65;
  memcpy(a2, __src, 0x140uLL);
  v89[8] = v70;
  v89[9] = v71;
  v89[10] = v72;
  v90 = v73;
  v89[4] = v66;
  v89[5] = v67;
  v89[6] = v68;
  v89[7] = v69;
  v89[0] = v62;
  v89[1] = v63;
  v89[2] = v64;
  v89[3] = v65;
  sub_100049668((uint64_t)&v77);
  sub_100029510(v86);
  sub_1000496D4(v89);
  v91[0] = v60;
  v91[1] = v59;
  v92 = v53;
  v93 = v58;
  v94 = KeyPath;
  v95 = 1;
  v96 = v56;
  v97 = 3;
  v98 = v52;
  v99 = v55;
  v100 = 0x3FE6666666666666;
  v101 = v54;
  v102 = v31;
  v103 = v33;
  v104 = v35;
  v105 = v37;
  v106 = v50;
  return sub_100049734((uint64_t)v91);
}

void sub_100048CFC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  uint64_t v9;

  v2 = (void *)objc_opt_self(NSTimer);
  v3 = swift_allocObject(&unk_1000B6C40, 72, 7);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v3 + 64) = *(_QWORD *)(a1 + 48);
  v8[4] = sub_100049504;
  v9 = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000486E8;
  v8[3] = &unk_1000B6C58;
  v5 = _Block_copy(v8);
  v6 = v9;
  sub_100017570((_QWORD *)a1);
  swift_release(v6);
  v7 = objc_msgSend(v2, "scheduledTimerWithTimeInterval:repeats:block:", 0, v5, 0.5);
  _Block_release(v5);

}

_QWORD *sub_100048DF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _BYTE __src[320];
  _BYTE v14[336];

  v4 = *(_OWORD *)(v2 + 16);
  v9 = *(_OWORD *)v2;
  v10 = v4;
  v11 = *(_OWORD *)(v2 + 32);
  v12 = *(_QWORD *)(v2 + 48);
  v5 = static HorizontalAlignment.center.getter(a1);
  sub_100048738(&v9, __src);
  v14[328] = 0;
  memcpy(&v14[7], __src, 0x140uLL);
  v6 = swift_allocObject(&unk_1000B6C18, 72, 7);
  v7 = v10;
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v11;
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0x4028000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  memcpy((void *)(a2 + 17), v14, 0x147uLL);
  *(_QWORD *)(a2 + 344) = sub_1000494BC;
  *(_QWORD *)(a2 + 352) = v6;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  return sub_100017570(&v9);
}

uint64_t sub_100048ED0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100048EF8(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_100048F1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100048F4C(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100048F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t result;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;

  v4 = type metadata accessor for HandoffFeatureEducationViewModel(0);
  v5 = sub_1000491EC();
  v6 = ObservedObject.init(wrappedValue:)(a1, v4, v5);
  v40 = v7;
  v41 = v6;
  v8 = (void *)objc_opt_self(PCLocalizedString);
  v9 = objc_msgSend(v8, "localizedStringForKey:", 15);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v38 = v11;
  v39 = v10;

  v43 = &_swiftEmptyArrayStorage;
  sub_10004EE04(0, 3, 0);
  v12 = &_swiftEmptyArrayStorage;
  v13 = objc_msgSend(v8, "localizedStringForKey:", 16);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v18 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
  v17 = *((_QWORD *)&_swiftEmptyArrayStorage + 3);
  if (v18 >= v17 >> 1)
  {
    sub_10004EE04((_QWORD *)(v17 > 1), v18 + 1, 1);
    v12 = v43;
  }
  v12[2] = v18 + 1;
  v19 = (char *)&v12[3 * v18];
  v19[32] = 0;
  *((_QWORD *)v19 + 5) = v14;
  *((_QWORD *)v19 + 6) = v16;
  v20 = objc_msgSend(v8, "localizedStringForKey:", 17);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v25 = v12[2];
  v24 = v12[3];
  if (v25 >= v24 >> 1)
  {
    sub_10004EE04((_QWORD *)(v24 > 1), v25 + 1, 1);
    v12 = v43;
  }
  v12[2] = v25 + 1;
  v26 = (char *)&v12[3 * v25];
  v26[32] = 1;
  *((_QWORD *)v26 + 5) = v21;
  *((_QWORD *)v26 + 6) = v23;
  v27 = objc_msgSend(v8, "localizedStringForKey:", 18);
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  v32 = v12[2];
  v31 = v12[3];
  if (v32 >= v31 >> 1)
    sub_10004EE04((_QWORD *)(v31 > 1), v32 + 1, 1);
  v33 = (char *)v43;
  v43[2] = v32 + 1;
  v34 = &v33[24 * v32];
  v34[32] = 2;
  *((_QWORD *)v34 + 5) = v28;
  *((_QWORD *)v34 + 6) = v30;
  v42 = 0;
  result = State.init(wrappedValue:)(&v42, &type metadata for Bool);
  v36 = (char)v43;
  v37 = v44;
  *(_QWORD *)a2 = v41;
  *(_QWORD *)(a2 + 8) = v40;
  *(_QWORD *)(a2 + 16) = v39;
  *(_QWORD *)(a2 + 24) = v38;
  *(_QWORD *)(a2 + 32) = v33;
  *(_BYTE *)(a2 + 40) = v36;
  *(_QWORD *)(a2 + 48) = v37;
  return result;
}

unint64_t sub_1000491EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C6E38;
  if (!qword_1000C6E38)
  {
    v1 = type metadata accessor for HandoffFeatureEducationViewModel(255);
    result = swift_getWitnessTable(&unk_100081680, v1);
    atomic_store(result, (unint64_t *)&qword_1000C6E38);
  }
  return result;
}

uint64_t destroy for HandoffFeatureEducationViewHeader(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for HandoffFeatureEducationViewHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for HandoffFeatureEducationViewHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

__n128 initializeWithTake for CodableError(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HandoffFeatureEducationViewHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for HandoffFeatureEducationViewHeader(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandoffFeatureEducationViewHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeatureEducationViewHeader()
{
  return &type metadata for HandoffFeatureEducationViewHeader;
}

uint64_t sub_1000494A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100099A38, 1);
}

void sub_1000494BC()
{
  uint64_t v0;

  sub_100048CFC(v0 + 16);
}

uint64_t sub_1000494C8()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100049504()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 56);
  v3 = 1;
  v1 = sub_100004B18(&qword_1000C7598);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_100049550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100049560(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100049568@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100049590(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_1000495B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000495E4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_100049610(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100049638(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_100049668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 72);
  sub_10001ED34(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

_QWORD *sub_1000496D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  swift_bridgeObjectRelease(*a1);
  sub_100007A90(v2, v3);
  swift_release(v4);
  swift_release(v5);
  return a1;
}

uint64_t sub_100049734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 72);
  sub_10001ED1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_1000497A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB4D8;
  if (!qword_1000CB4D8)
  {
    v1 = sub_100005F48(&qword_1000CB4E0);
    sub_100049810();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB4D8);
  }
  return result;
}

unint64_t sub_100049810()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CB4E8;
  if (!qword_1000CB4E8)
  {
    v1 = sub_100005F48(&qword_1000CB4F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CB4E8);
  }
  return result;
}

Swift::UInt64 sub_10004985C()
{
  uint64_t v0;
  Swift::UInt64 result;
  unint64_t v2;
  unint64_t v3;
  double v4;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0 || (*(_BYTE *)(v0 + 48) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 16))
      return 0x646570706F7473;
    else
      return 0x676E696E6E7572;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 24);
    v3 = *(_QWORD *)(v0 + 40);
    result = v3 - v2;
    if (v3 < v2)
    {
      __break(1u);
    }
    else
    {
      v4 = UpTicksToSecondsF(_:)(result);
      return sub_100074A24(v4);
    }
  }
  return result;
}

uint64_t sub_1000498D0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 49, 7);
}

uint64_t type metadata accessor for Stopwatch()
{
  return objc_opt_self(_TtC13PCViewService9Stopwatch);
}

uint64_t storeEnumTagSinglePayload for Stopwatch.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10004994C + 4 * byte_100085EB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100049980 + 4 * byte_100085EB0[v4]))();
}

uint64_t sub_100049980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049990);
  return result;
}

uint64_t sub_10004999C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000499A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000499A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000499B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Stopwatch.State()
{
  return &type metadata for Stopwatch.State;
}

uint64_t sub_1000499CC()
{
  _BYTE *v0;

  if (*v0)
    return 0x646570706F7473;
  else
    return 0x676E696E6E7572;
}

unint64_t sub_100049A04()
{
  unint64_t result;

  result = qword_1000CB610;
  if (!qword_1000CB610)
  {
    result = swift_getWitnessTable(&unk_100085F6C, &type metadata for Stopwatch.State);
    atomic_store(result, (unint64_t *)&qword_1000CB610);
  }
  return result;
}

Swift::UInt64 sub_100049A48()
{
  return sub_10004985C();
}

uint64_t sub_100049A68(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  NSString v24;
  void *v26;
  uint64_t v27;
  unint64_t v28;

  v4 = v3;
  UUID.init()();
  v8 = qword_1000C8338;
  v9 = sub_100004B18(&qword_1000CB870);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  *(_QWORD *)(v3 + v8) = PassthroughSubject.init()();
  *(_QWORD *)(v3 + qword_1000C8348) = 0;
  v10 = qword_1000C8350;
  v11 = sub_100004B18(&qword_1000CB878);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v3 + v10) = PassthroughSubject.init()();
  *(_QWORD *)(v3 + qword_1000C8358) = 0;
  *(_QWORD *)(v3 + qword_1000C8340) = a1;
  v12 = (uint64_t *)(v3 + qword_1000DF568);
  *v12 = a2;
  v12[1] = (uint64_t)a3;
  v27 = 0;
  v28 = 0xE000000000000000;
  v13 = a1;
  swift_bridgeObjectRetain(a3);
  _StringGuts.grow(_:)(29);
  v14._countAndFlagsBits = 0x6F72203A74696E49;
  v14._object = (void *)0xEB000000003D656CLL;
  String.append(_:)(v14);
  v26 = a1;
  _print_unlocked<A, B>(_:_:)(&v26, &v27, &type metadata for XPCLinkRole, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15._countAndFlagsBits = 0x65536863616D202CLL;
  v15._object = (void *)0xEE003D6563697672;
  String.append(_:)(v15);
  v16._countAndFlagsBits = a2;
  v16._object = a3;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(a3);
  v17 = v28;
  sub_10001FD24();
  v19 = v18;
  v20 = objc_allocWithZone((Class)CULogHandle);
  v21 = String._bridgeToObjectiveC()();
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v23 = objc_msgSend(v20, "initWithSubsystem:category:", v21, v22);

  swift_bridgeObjectRetain(v17);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v23, "ulog:message:", 40, v24);
  swift_bridgeObjectRelease(v17);

  return v4;
}

uint64_t sub_100049CDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientModel()
{
  return objc_opt_self(_TtC13PCViewService52NearbySharingInteractionAlertDaemonBridgeClientModel);
}

uint64_t type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientState()
{
  return objc_opt_self(_TtC13PCViewService52NearbySharingInteractionAlertDaemonBridgeClientState);
}

uint64_t *sub_100049D40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  v6 = sub_100004B18(&qword_1000CB868);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v2[4] = sub_100049A68(0, 0xD000000000000031, (void *)0x8000000100094150);
  v2[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1000B6DB8);
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_100049DEC()
{
  _QWORD *v0;
  id v1;
  NSString v2;

  v1 = sub_100053544();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClient()
{
  return objc_opt_self(_TtC13PCViewService47NearbySharingInteractionAlertDaemonBridgeClient);
}

void sub_100049E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[3];

  v1 = v0;
  v2 = sub_100004B18(&qword_1000CB880);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100053544();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

  v27[0] = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v8 = v27[0];
  v9 = swift_allocObject(&unk_1000B6DF8, 24, 7);
  swift_weakInit(v9 + 16, v1);
  swift_retain(v8);
  v10 = sub_100004B18(&qword_1000CB888);
  v11 = sub_10000AAFC(&qword_1000CB890, &qword_1000CB888, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v12 = Publisher<>.sink(receiveValue:)(sub_10004A804, v9, v10, v11);
  swift_release(v9);
  swift_release(v27[0]);
  swift_beginAccess(v1 + 40, v27, 33, 0);
  AnyCancellable.store(in:)(v1 + 40);
  swift_endAccess(v27);
  swift_release(v12);
  v13 = *(_QWORD *)(v1 + 32);
  v14 = sub_10004B8E0();
  v27[0] = v14;
  v15 = sub_100004B18(&qword_1000CB898);
  v16 = sub_10000AAFC(&qword_1000CB8A0, &qword_1000CB898, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_10001A504, 0, v15, v16);
  swift_release(v14);
  v17 = swift_allocObject(&unk_1000B6DF8, 24, 7);
  swift_weakInit(v17 + 16, v1);
  v18 = sub_10000AAFC(&qword_1000CB8A8, &qword_1000CB880, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v19 = Publisher<>.sink(receiveValue:)(sub_10004A80C, v17, v2, v18);
  swift_release(v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess(v1 + 40, v27, 33, 0);
  AnyCancellable.store(in:)(v1 + 40);
  swift_endAccess(v27);
  swift_release(v19);
  v27[0] = *(_QWORD *)(v13 + qword_1000C8338);
  v20 = sub_100004B18(&qword_1000CB870);
  v21 = sub_10000AAFC(&qword_1000CB8B0, &qword_1000CB870, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v27[0] = Publisher.eraseToAnyPublisher()(v20, v21);
  v22 = swift_allocObject(&unk_1000B6DF8, 24, 7);
  swift_weakInit(v22 + 16, v1);
  v23 = sub_100004B18(&qword_1000CB8B8);
  v24 = sub_10000AAFC(&qword_1000CB8C0, &qword_1000CB8B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v25 = Publisher<>.sink(receiveValue:)(sub_10004A814, v22, v23, v24);
  swift_release(v22);
  swift_release(v27[0]);
  swift_beginAccess(v1 + 40, v27, 33, 0);
  AnyCancellable.store(in:)(v1 + 40);
  swift_endAccess(v27);
  swift_release(v25);
  sub_10004B994();
}

uint64_t sub_10004A230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v4 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  a2 += 16;
  v13 = *(_BYTE *)(a1 + 56);
  swift_beginAccess(a2, v22, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v15 = result;
    v20 = v4;
    v16 = *(_QWORD *)(result + 32);
    swift_retain(v16);
    swift_release(v15);
    sub_100004B18(&qword_1000C8660);
    v17 = v21;
    *(_QWORD *)v6 = v21;
    *((_QWORD *)v6 + 1) = v7;
    *((_QWORD *)v6 + 2) = v8;
    *((_QWORD *)v6 + 3) = v9;
    *((_QWORD *)v6 + 4) = v10;
    *((_QWORD *)v6 + 5) = v11;
    *((_QWORD *)v6 + 6) = v12;
    v6[56] = v13;
    v18 = sub_100036D50(v17, v7, v8, v9, v10, v11, v12, v13);
    static Date.now.getter(v18);
    swift_storeEnumTagMultiPayload(v6, v20, 2);
    sub_10004B518((uint64_t)v6);
    swift_release(v16);
    return sub_100018008((uint64_t)v6, type metadata accessor for ViewServiceOutput);
  }
  return result;
}

uint64_t sub_10004A390(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v4 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v13, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(result + 32);
    swift_retain(v10);
    swift_release(v9);
    v11 = sub_100004B18(&qword_1000C8658);
    *v6 = v7;
    Date.init()(v11);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    sub_10004B518((uint64_t)v6);
    swift_release(v10);
    return sub_100018008((uint64_t)v6, type metadata accessor for ViewServiceOutput);
  }
  return result;
}

uint64_t sub_10004A490(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10004A4EC(a1);
    return swift_release(v5);
  }
  return result;
}

void sub_10004A4EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  id v8;
  NSString v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = type metadata accessor for ViewServiceInput(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0xE000000000000000;
  v5._countAndFlagsBits = 0xD00000000000001ALL;
  v5._object = (void *)0x8000000100094190;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x3D7475706E69203ALL;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)(a1, &v12, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = v13;
  v8 = sub_100053544();
  swift_bridgeObjectRetain(v7);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v8, "ulog:message:", 40, v9);
  swift_bridgeObjectRelease(v7);

  sub_10004A79C(a1, (uint64_t)v4);
  v10 = (char *)sub_10004A634 + 4 * byte_100085FC0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

void sub_10004A634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  NSString v9;

  sub_100018008(v2, type metadata accessor for ViewServiceInput);
  *(_QWORD *)(v4 - 88) = 0;
  *(_QWORD *)(v4 - 80) = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v5 = *(_QWORD *)(v4 - 80);
  *(_QWORD *)(v4 - 88) = *(_QWORD *)(v4 - 88);
  *(_QWORD *)(v4 - 80) = v5;
  v6._object = (void *)0x80000001000941B0;
  v6._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)(v0, v4 - 88, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = *(_QWORD *)(v4 - 80);
  v8 = sub_100053544();
  swift_bridgeObjectRetain(v7);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v8, *(SEL *)(v3 + 3552), 60, v9);
  swift_bridgeObjectRelease(v7);

}

void sub_10004A754()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = *(_QWORD *)(v0 + 24);
  swift_beginAccess(v4 + 16, v2 - 88, 0, 0);
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain(v5);
  v6 = swift_bridgeObjectRetain(v3);
  sub_1000504A0(v6);
  swift_release(v5);
  swift_bridgeObjectRelease(v3);
  JUMPOUT(0x10004A738);
}

uint64_t sub_10004A79C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ViewServiceInput(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A7E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004A804(uint64_t a1)
{
  uint64_t v1;

  return sub_10004A230(a1, v1);
}

uint64_t sub_10004A80C(char *a1)
{
  uint64_t v1;

  return sub_10004A390(a1, v1);
}

uint64_t sub_10004A814(uint64_t a1)
{
  uint64_t v1;

  return sub_10004A490(a1, v1);
}

uint64_t sub_10004A81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(a3, a1, a2, a3, a4);
  return swift_release(v9);
}

uint64_t sub_10004A8B4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000861E8);
  v8 = v3;
  v5 = sub_100003E48((unint64_t *)&qword_1000CB490, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_100085C30);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10004A944(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000861E8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100003E48((unint64_t *)&qword_1000CB490, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_100085C30);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10004B1DC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10004A9FC()
{
  uint64_t v0;
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24), v1);
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for NearbySharingInteractionViewPresenterModel()
{
  return objc_opt_self(_TtC13PCViewService42NearbySharingInteractionViewPresenterModel);
}

uint64_t type metadata accessor for NearbySharingInteractionViewPresenterState()
{
  return objc_opt_self(_TtC13PCViewService42NearbySharingInteractionViewPresenterState);
}

_QWORD *sub_10004AA70()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[4];
  if (v1)
  {
    v2 = (_QWORD *)v0[4];
  }
  else
  {
    v3 = v0;
    v4 = *(_QWORD *)(v0[2] + 32);
    v5 = swift_retain(v4);
    v6 = CurrentValueSubject.value.getter(&v13, v5);
    v7 = v13;
    if (v13)
    {
      swift_release(v4);
    }
    else
    {
      CurrentValueSubject.value.getter(&v14, v6);
      swift_release(v4);
      v7 = v14;
    }
    v8 = *(_QWORD *)(v0[3] + 16);
    v9 = type metadata accessor for NearbySharingInteractionViewModel(0);
    v2 = (_QWORD *)swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v10 = swift_retain(v8);
    ObservationRegistrar.init()(v10);
    v2[2] = 0x706F6F625FLL;
    v2[3] = 0xE500000000000000;
    v2[4] = v7;
    v2[5] = v8;
    v11 = v3[4];
    v3[4] = v2;
    swift_retain(v2);
    swift_release(v11);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t *sub_10004AB74(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  v2[4] = 0;
  v2[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1000B6E18);
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_10004ABD8()
{
  _QWORD *v0;
  id v1;
  NSString v2;

  v1 = sub_100053558();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for NearbySharingInteractionViewPresenter()
{
  return objc_opt_self(_TtC13PCViewService37NearbySharingInteractionViewPresenter);
}

uint64_t sub_10004AC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE v36[56];
  char v37;

  v1 = v0;
  v2 = sub_100004B18(&qword_1000C6F18);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000CBB90);
  v6 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  v34 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100053558();
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "ulog:message:", 40, v10);

  v11 = *(_QWORD *)(v1 + 16);
  objc_msgSend(*(id *)(v11 + 24), "setDesiredHardwareButtonEvents:", 16);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_QWORD *)(v12 + 16);
  memset(v36, 0, sizeof(v36));
  v37 = 2;
  swift_retain(v13);
  PassthroughSubject.send(_:)(v36);
  swift_release(v13);
  v35 = sub_10004AA70();
  v14 = type metadata accessor for NearbySharingInteractionViewModel(0);
  State.init(wrappedValue:)(&v35, v14);
  v15 = *(_OWORD *)v36;
  v16 = objc_allocWithZone((Class)sub_100004B18(&qword_1000CBB98));
  *(_OWORD *)v36 = v15;
  swift_retain(*((_QWORD *)&v15 + 1));
  swift_retain(v15);
  v17 = (void *)UIHostingController.init(rootView:)(v36);
  v32 = v17;
  v18 = *(id *)(v11 + 16);
  sub_100009C84(v17, 0);

  v19 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)v36 = 1;
  memset(&v36[8], 0, 48);
  v37 = 2;
  swift_retain(v19);
  PassthroughSubject.send(_:)(v36);
  swift_release(v19);
  *(_QWORD *)v36 = *(_QWORD *)(v11 + 32);
  v20 = *(_QWORD *)v36;
  v21 = sub_10001A940();
  v22 = swift_retain(v20);
  v35 = (_QWORD *)static OS_dispatch_queue.main.getter(v22);
  v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v4, 1, 1, v23);
  v24 = sub_100004B18(&qword_1000CBBA0);
  v25 = sub_10000AAFC(&qword_1000CBBA8, &qword_1000CBBA0, (uint64_t)&unk_100085A10);
  v26 = sub_100003E48((unint64_t *)&qword_1000C6F80, (uint64_t (*)(uint64_t))sub_10001A940, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v35, v4, v24, v21, v25, v26);
  sub_10004B150((uint64_t)v4);

  swift_release(*(_QWORD *)v36);
  v27 = swift_allocObject(&unk_1000B6E58, 24, 7);
  swift_weakInit(v27 + 16, v1);
  v28 = sub_10000AAFC(qword_1000CBBB0, &qword_1000CBB90, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v29 = v33;
  v30 = Publisher<>.sink(receiveValue:)(sub_10004B1B4, v27, v33, v28);
  swift_release(v27);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v29);
  v1 += 40;
  swift_beginAccess(v1, v36, 33, 0);
  AnyCancellable.store(in:)(v1);
  swift_endAccess(v36);
  swift_release(*((_QWORD *)&v15 + 1));
  swift_release(v15);

  return swift_release(v30);
}

uint64_t sub_10004B028(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD v9[6];
  _QWORD *v10;
  _BYTE v11[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = sub_10004AA70();
    swift_release(v5);
    KeyPath = swift_getKeyPath(&unk_1000861E8);
    __chkstk_darwin(KeyPath);
    v9[2] = v6;
    v9[3] = v2;
    v10 = v6;
    v8 = sub_100003E48((unint64_t *)&qword_1000CB490, type metadata accessor for NearbySharingInteractionViewModel, (uint64_t)&unk_100085C30);
    swift_bridgeObjectRetain(v2);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10004B1C4, v9, (char *)&type metadata for () + 8, v8);
    swift_release(v6);
    swift_release(KeyPath);
    return swift_bridgeObjectRelease(v2);
  }
  return result;
}

uint64_t sub_10004B150(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000C6F18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004B190()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004B1B4(uint64_t *a1)
{
  uint64_t v1;

  return sub_10004B028(a1, v1);
}

uint64_t sub_10004B1C4()
{
  uint64_t v0;

  return sub_100047B20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004B1DC()
{
  return sub_10004B1C4();
}

uint64_t sub_10004B1F0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, qword_1000DF578 + a1 + 16);
}

uint64_t sub_10004B230(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  uint64_t v5;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = sub_10004B49C(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)((char *)v2 + qword_1000DF578) - 8) + 8))(a1);
  return v5;
}

uint64_t sub_10004B290()
{
  return 1;
}

uint64_t sub_10004B298()
{
  return 1;
}

void *sub_10004B2A0(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_10004B2E0(a1, a2);
}

void *sub_10004B2E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  uint64_t v13;

  v5 = *(_QWORD *)((swift_isaMask & *v2) + qword_1000DF578);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *))(v6 + 16))((char *)&v13 - v7);
  v9 = (void *)UIHostingController.init(coder:rootView:)(a1, v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v11 = v9;
  v10(a2, v5);
  if (v9)

  return v9;
}

id sub_10004B3A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v6;
  id v7;
  objc_super v9;

  v6 = (objc_class *)type metadata accessor for LockscreenViewableUIHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF578), *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF578 + 8), a4);
  v9.receiver = v4;
  v9.super_class = v6;
  v7 = objc_msgSendSuper2(&v9, "initWithCoder:", a1);

  return v7;
}

id sub_10004B414(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  return sub_10004B3A0(v3, v4, v5, v6);
}

id sub_10004B438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for LockscreenViewableUIHostingController(0, *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF578), *(_QWORD *)((swift_isaMask & *v4) + qword_1000DF578 + 8), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

uint64_t type metadata accessor for LockscreenViewableUIHostingController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LockscreenViewableUIHostingController);
}

uint64_t sub_10004B49C(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v5;

  __chkstk_darwin(a1);
  v2 = (char *)&v5 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v5 - v1);
  return UIHostingController.init(rootView:)(v2);
}

uint64_t sub_10004B518(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v2 = v1;
  v26 = a1;
  v4 = type metadata accessor for ViewServiceOutput(0);
  v27 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v27 + 64);
  __chkstk_darwin(v4);
  v6 = sub_100004B18(&qword_1000C82F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = 0;
  v29 = 0xE000000000000000;
  v9._countAndFlagsBits = 0x293A5F28646E6573;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3D7475706E69203ALL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)(a1, &v28, v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11 = v29;
  sub_10001FD24();
  v13 = v12;
  v14 = objc_allocWithZone((Class)CULogHandle);
  v15 = String._bridgeToObjectiveC()();
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v17 = objc_msgSend(v14, "initWithSubsystem:category:", v15, v16);

  swift_bridgeObjectRetain(v11);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v17, "ulog:message:", 40, v18);
  swift_bridgeObjectRelease(v11);

  v19 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  v20 = swift_allocObject(&unk_1000B6FE0, 24, 7);
  swift_weakInit(v20 + 16, v2);
  sub_100017FC4(v26, (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ViewServiceOutput);
  v21 = *(unsigned __int8 *)(v27 + 80);
  v22 = (v21 + 40) & ~v21;
  v23 = (_QWORD *)swift_allocObject(&unk_1000B7008, v22 + v5, v21 | 7);
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = v20;
  sub_100017264((uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v23 + v22, type metadata accessor for ViewServiceOutput);
  v24 = sub_10004B7B4((uint64_t)v8, (uint64_t)&unk_1000CBF40, (uint64_t)v23);
  return swift_release(v24);
}

uint64_t sub_10004B7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10002FF04(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9, v13);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10004B8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = qword_1000C8358;
  v2 = *(_QWORD *)(v0 + qword_1000C8358);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + qword_1000C8358);
  }
  else
  {
    v4 = v0;
    v5 = sub_100004B18(&qword_1000CB878);
    v6 = sub_10000AAFC(&qword_1000CBF50, &qword_1000CB878, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v3 = Publisher.eraseToAnyPublisher()(v5, v6);
    v7 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v7);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

void sub_10004B994()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  NSString v6;

  sub_10001FD24();
  v1 = v0;
  v2 = objc_allocWithZone((Class)CULogHandle);
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v5 = objc_msgSend(v2, "initWithSubsystem:category:", v3, v4);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "ulog:message:", 40, v6);

  sub_10004BA70();
}

void sub_10004BA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;
  NSString v7;

  sub_10001FD24();
  v2 = v1;
  v3 = objc_allocWithZone((Class)CULogHandle);
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v6 = objc_msgSend(v3, "initWithSubsystem:category:", v4, v5);

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

  sub_10004BB80();
  if (!*(_QWORD *)(v0 + qword_1000C8340))
    sub_10004BCCC();
}

uint64_t sub_10004BB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;
  NSString v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;

  v1 = v0;
  sub_10001FD24();
  v3 = v2;
  v4 = objc_allocWithZone((Class)CULogHandle);
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v7 = objc_msgSend(v4, "initWithSubsystem:category:", v5, v6);

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "ulog:message:", 40, v8);

  v9 = sub_100079E74();
  LODWORD(v7) = sub_10002F0CC();
  result = swift_release(v9);
  if ((_DWORD)v7 == 1 && !*(_QWORD *)(v1 + qword_1000C8340))
  {
    sub_10004BCCC();
    v11 = *(_QWORD *)(v1 + qword_1000C8350);
    v12 = 0;
    swift_retain(v11);
    PassthroughSubject.send(_:)(&v12);
    return swift_release(v11);
  }
  return result;
}

void sub_10004BCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  NSString v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  NSString v18;
  id v19;
  NSString v20;
  void *v21;
  Class isa;
  uint64_t v23;

  v0 = type metadata accessor for String.Encoding(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001FD24();
  v5 = v4;
  v6 = objc_allocWithZone((Class)CULogHandle);
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v9 = objc_msgSend(v6, "initWithSubsystem:category:", v7, v8);

  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "ulog:message:", 40, v10);

  static String.Encoding.ascii.getter();
  v11 = String.data(using:allowLossyConversion:)(v3, 0, 1735289200, 0xE400000000000000);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v13 >> 60 == 15)
  {
    sub_10001FD24();
    v15 = v14;
    v16 = objc_allocWithZone((Class)CULogHandle);
    v17 = String._bridgeToObjectiveC()();
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v19 = objc_msgSend(v16, "initWithSubsystem:category:", v17, v18);

    v20 = String._bridgeToObjectiveC()();
    objc_msgSend(v19, "ulog:message:", 60, v20);

  }
  else
  {
    v21 = (void *)sub_100079E74();
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v21, "handleWithSerializedObject:", isa);
    swift_release(v21);

    sub_10004CCD0(v11, v13);
  }
}

uint64_t sub_10004BF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return swift_task_switch(sub_10004BF40, 0, 0);
}

uint64_t sub_10004BF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  Class isa;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(v0 + 48);
    v6 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v7 = JSONEncoder.init()();
    v8 = type metadata accessor for ViewServiceOutput(0);
    v9 = sub_10004CE70();
    v10 = dispatch thunk of JSONEncoder.encode<A>(_:)(v5, v8, v9);
    v12 = v11;
    swift_release(v7);
    sub_10004BB80();
    v13 = (void *)sub_100079E74();
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v13, "handleWithSerializedObject:", isa);

    swift_release(v13);
    sub_10000ABA8(v10, v12);
    v3 = swift_release(v4);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
}

uint64_t type metadata accessor for ClassicCardAlertDaemonBridgeClientModel()
{
  return objc_opt_self(_TtC13PCViewService39ClassicCardAlertDaemonBridgeClientModel);
}

uint64_t sub_10004C08C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ClassicCardAlertDaemonBridgeClientState()
{
  return objc_opt_self(_TtC13PCViewService39ClassicCardAlertDaemonBridgeClientState);
}

uint64_t *sub_10004C0F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  v6 = sub_100004B18(&qword_1000CB868);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v2[4] = sub_100049A68(0, 0xD000000000000031, (void *)0x8000000100094150);
  v2[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1000B6F50);
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_10004C1A4()
{
  _QWORD *v0;
  id v1;
  NSString v2;

  v1 = sub_1000534F4();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ClassicCardAlertDaemonBridgeClient()
{
  return objc_opt_self(_TtC13PCViewService34ClassicCardAlertDaemonBridgeClient);
}

void sub_10004C250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[3];

  v1 = v0;
  v2 = sub_100004B18(&qword_1000CB880);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000534F4();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

  v28[0] = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v8 = v28[0];
  v9 = swift_allocObject(&unk_1000B6F90, 24, 7);
  swift_weakInit(v9 + 16, v1);
  v10 = swift_allocObject(&unk_1000B6FB8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10004CC58;
  *(_QWORD *)(v10 + 24) = v9;
  swift_retain(v8);
  v11 = sub_100004B18(&qword_1000CBF28);
  v12 = sub_10000AAFC(&qword_1000CBF30, &qword_1000CBF28, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v13 = Publisher<>.sink(receiveValue:)(sub_10004CC84, v10, v11, v12);
  swift_release(v10);
  swift_release(v28[0]);
  swift_beginAccess(v1 + 40, v28, 33, 0);
  AnyCancellable.store(in:)(v1 + 40);
  swift_endAccess(v28);
  swift_release(v13);
  v14 = *(_QWORD *)(v1 + 32);
  v15 = sub_10004B8E0();
  v28[0] = v15;
  v16 = sub_100004B18(&qword_1000CB898);
  v17 = sub_10000AAFC(&qword_1000CB8A0, &qword_1000CB898, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_10001A504, 0, v16, v17);
  swift_release(v15);
  v18 = swift_allocObject(&unk_1000B6F90, 24, 7);
  swift_weakInit(v18 + 16, v1);
  v19 = sub_10000AAFC(&qword_1000CB8A8, &qword_1000CB880, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v20 = Publisher<>.sink(receiveValue:)(sub_10004A80C, v18, v2, v19);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess(v1 + 40, v28, 33, 0);
  AnyCancellable.store(in:)(v1 + 40);
  swift_endAccess(v28);
  swift_release(v20);
  v28[0] = *(_QWORD *)(v14 + qword_1000C8338);
  v21 = sub_100004B18(&qword_1000CB870);
  v22 = sub_10000AAFC(&qword_1000CB8B0, &qword_1000CB870, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v28[0] = Publisher.eraseToAnyPublisher()(v21, v22);
  v23 = swift_allocObject(&unk_1000B6F90, 24, 7);
  swift_weakInit(v23 + 16, v1);
  v24 = sub_100004B18(&qword_1000CB8B8);
  v25 = sub_10000AAFC(&qword_1000CB8C0, &qword_1000CB8B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v26 = Publisher<>.sink(receiveValue:)(sub_10004CCC8, v23, v24, v25);
  swift_release(v23);
  swift_release(v28[0]);
  swift_beginAccess(v1 + 40, v28, 33, 0);
  AnyCancellable.store(in:)(v1 + 40);
  swift_endAccess(v28);
  swift_release(v26);
  sub_10004B994();
}

uint64_t sub_10004C60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];

  v8 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a4 += 16;
  swift_beginAccess(a4, v16, 0, 0);
  result = swift_weakLoadStrong(a4);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)(result + 32);
    swift_retain(v13);
    swift_release(v12);
    sub_100004B18(&qword_1000C8650);
    sub_10004CEB8(a1, (uint64_t)v10);
    *((_QWORD *)v10 + 8) = a2;
    *((_QWORD *)v10 + 9) = a3;
    sub_10004CEF4(a1);
    v14 = swift_bridgeObjectRetain(a3);
    Date.init()(v14);
    swift_storeEnumTagMultiPayload(v10, v8, 0);
    sub_10004B518((uint64_t)v10);
    swift_release(v13);
    return sub_100018008((uint64_t)v10, type metadata accessor for ViewServiceOutput);
  }
  return result;
}

uint64_t sub_10004C738(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10004C794(a1);
    return swift_release(v5);
  }
  return result;
}

void sub_10004C794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  id v12;
  NSString v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = type metadata accessor for ActivityDisplayContext(0);
  v3 = __chkstk_darwin(v2);
  v4 = __chkstk_darwin(v3);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for ViewServiceInput(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  v17 = 0xE000000000000000;
  v9._countAndFlagsBits = 0xD00000000000001ALL;
  v9._object = (void *)0x8000000100094190;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0x3D7475706E69203ALL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)(a1, &v16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v11 = v17;
  v12 = sub_1000534F4();
  swift_bridgeObjectRetain(v11);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  objc_msgSend(v12, "ulog:message:", 40, v13);
  swift_bridgeObjectRelease(v11);

  sub_100017FC4(a1, (uint64_t)v8, type metadata accessor for ViewServiceInput);
  v14 = (char *)sub_10004C974 + 4 * byte_100086270[swift_getEnumCaseMultiPayload(v8, v6)];
  __asm { BR              X10 }
}

uint64_t sub_10004C974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_100017264(v4, v3, type metadata accessor for ActivityDisplayContext);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 128) + 24);
  sub_100017FC4(v3, v1, type metadata accessor for ActivityDisplayContext);
  swift_beginAccess(v6 + 16, v5 - 120, 0, 0);
  v7 = *(_QWORD *)(v6 + 16);
  sub_100017FC4(v1, v2, type metadata accessor for ActivityDisplayContext);
  sub_100017FC4(v2, v0, type metadata accessor for ActivityDisplayContext);
  swift_retain(v7);
  sub_100050854(v0);
  sub_100018008(v2, type metadata accessor for ActivityDisplayContext);
  swift_release(v7);
  sub_100018008(v1, type metadata accessor for ActivityDisplayContext);
  return sub_100018008(v3, type metadata accessor for ActivityDisplayContext);
}

void sub_10004CB7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  id v7;
  NSString v8;

  swift_bridgeObjectRelease(*v2);
  *(_QWORD *)(v3 - 120) = 0;
  *(_QWORD *)(v3 - 112) = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v4 = *(_QWORD *)(v3 - 112);
  *(_QWORD *)(v3 - 120) = *(_QWORD *)(v3 - 120);
  *(_QWORD *)(v3 - 112) = v4;
  v5._object = (void *)0x80000001000941B0;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)(v0, v3 - 120, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6 = *(_QWORD *)(v3 - 112);
  v7 = sub_1000534F4();
  swift_bridgeObjectRetain(v6);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v7, "ulog:message:", 40, v8);
  swift_bridgeObjectRelease(v6);

  JUMPOUT(0x10004CB58);
}

uint64_t sub_10004CC34()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004CC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10004C60C(a1, a2, a3, v3);
}

uint64_t sub_10004CC60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004CC84(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(_BYTE *, _QWORD, _QWORD);
  _BYTE v5[64];

  v3 = *(uint64_t (**)(_BYTE *, _QWORD, _QWORD))(v1 + 16);
  sub_10004CEB8(a1, (uint64_t)v5);
  return v3(v5, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t sub_10004CCC8(uint64_t a1)
{
  uint64_t v1;

  return sub_10004C738(a1, v1);
}

uint64_t sub_10004CCD0(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000ABA8(result, a2);
  return result;
}

uint64_t sub_10004CCE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for ViewServiceOutput(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16), v6);
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_100036E60(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_BYTE *)(v7 + 56));
      v10 = &qword_1000C8660;
LABEL_7:
      v9 = *(int *)(sub_100004B18(v10) + 48);
      goto LABEL_8;
    case 1:
      v10 = &qword_1000C8658;
      goto LABEL_7;
    case 0:
      sub_1000173AC(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48), *(_BYTE *)(v7 + 56));
      swift_bridgeObjectRelease(*(_QWORD *)(v7 + 72));
      v9 = *(int *)(sub_100004B18(&qword_1000C8650) + 64);
LABEL_8:
      v11 = v7 + v9;
      v12 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
      break;
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10004CDF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ViewServiceOutput(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1000CBF3C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10002FEBC;
  v5[5] = v3;
  v5[6] = v4;
  return swift_task_switch(sub_10004BF40, 0, 0);
}

unint64_t sub_10004CE70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBF48;
  if (!qword_1000CBF48)
  {
    v1 = type metadata accessor for ViewServiceOutput(255);
    result = swift_getWitnessTable(&unk_1000837AC, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBF48);
  }
  return result;
}

uint64_t sub_10004CEB8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for HomeAccessoryViewEvent(a2, a1);
  return a2;
}

uint64_t sub_10004CEF4(uint64_t a1)
{
  sub_100036CD8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return a1;
}

_QWORD *sub_10004CF2C(uint64_t a1, int a2, void *a3, unint64_t a4, void *a5, float a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  id v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  _BYTE v33[24];

  v7 = v6;
  v31 = a2;
  v32 = a1;
  v13 = type metadata accessor for ActivityDisplayContext(0);
  v14 = __chkstk_darwin(v13);
  v16 = &v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14);
  v18 = &v30[-v17];
  v19 = sub_100004B18(&qword_1000C6D20);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v6[5] = sub_100013618(0, 0, 0, 0, 0, 0);
  v20 = (uint64_t **)(v6 + 5);
  v21 = sub_100004B18(&qword_1000CBF58);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v6[7] = PassthroughSubject.init()();
  sub_100017FC4(a1, (uint64_t)v18, type metadata accessor for ActivityDisplayContext);
  swift_beginAccess(v6 + 2, v33, 33, 0);
  sub_100017FC4((uint64_t)v18, (uint64_t)v16, type metadata accessor for ActivityDisplayContext);
  v22 = sub_100004B18(&qword_1000C6F70);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = sub_100013CA4((uint64_t)v16, 0, 0, 0, 0, 0);
  sub_100018008((uint64_t)v18, type metadata accessor for ActivityDisplayContext);
  v7[2] = v23;
  swift_endAccess(v33);
  swift_beginAccess(v7 + 3, v33, 33, 0);
  v24 = sub_100004B18(&qword_1000C7018);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v7[3] = sub_100014698(v31, 0, 0, 0, 0, 0);
  swift_endAccess(v33);
  swift_beginAccess(v7 + 4, v33, 33, 0);
  v25 = sub_100004B18(&qword_1000C6FC0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  sub_100018044(a3);
  v7[4] = sub_100014CF4(a3, a4, 0, 0, 0, 0, 0);
  swift_endAccess(v33);
  swift_beginAccess(v7 + 5, v33, 33, 0);
  v26 = *v20;
  v27 = a5;
  swift_release(v26);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  *v20 = sub_100013618(a5, 0, 0, 0, 0, 0);
  swift_endAccess(v33);
  swift_beginAccess(v7 + 6, v33, 33, 0);
  v28 = sub_100004B18(&qword_1000C6FE0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v7[6] = sub_1000153CC(0, 0, 0, a6, 0, 0);
  swift_endAccess(v33);
  sub_100018008(v32, type metadata accessor for ActivityDisplayContext);
  return v7;
}

_QWORD *sub_10004D268(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v12 = _swiftEmptyArrayStorage;
    sub_10004ED94(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4;
      KeyPath = swift_getKeyPath(&unk_1000863C0);
      v11[0] = v5;
      swift_bridgeObjectRetain(v5);
      swift_getAtKeyPath(v11, KeyPath);
      swift_bridgeObjectRelease(v5);
      swift_release(KeyPath);
      v7 = v11[1];
      v12 = v2;
      v9 = v2[2];
      v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_10004ED94((char *)(v8 > 1), v9 + 1, 1);
        v2 = v12;
      }
      v2[2] = v9 + 1;
      v2[v9 + 4] = v7;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_10004D378(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10004ED94(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v12 = *(_OWORD *)(v4 - 3);
      v6 = *(v4 - 1);
      v5 = *v4;
      KeyPath = swift_getKeyPath(&unk_1000863F0);
      v13 = v12;
      v14 = v6;
      v15 = v5;
      swift_bridgeObjectRetain(v5);
      swift_getAtKeyPath(&v13, KeyPath);
      swift_bridgeObjectRelease(v5);
      swift_release(KeyPath);
      v8 = v16;
      v17 = v2;
      v10 = v2[2];
      v9 = v2[3];
      if (v10 >= v9 >> 1)
      {
        sub_10004ED94((char *)(v9 > 1), v10 + 1, 1);
        v2 = v17;
      }
      v2[2] = v10 + 1;
      v2[v10 + 4] = v8;
      v4 += 4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_10004D498(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t inited;
  char *v9;
  int64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64x2_t v23;
  int64x2_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int8x16_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64x2_t v55;
  int64x2_t *v56;
  unint64_t v57;
  int64x2_t v58;
  int8x16_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t *v62;
  int64_t v63;
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  int64x2_t v82;
  int64x2_t *v83;
  unint64_t v84;
  int64x2_t v85;
  int8x16_t v86;
  uint64_t v87;
  unint64_t v88;
  int64_t *v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _BYTE v115[16];
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  int64_t v122;
  unint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[16];
  __int128 v133;
  _QWORD v134[4];
  char v135[56];

  v5 = v4;
  LODWORD(v123) = a4;
  *(_QWORD *)&v125 = a3;
  v126 = a1;
  v7 = sub_100004B18(&qword_1000CBF60);
  inited = swift_initStackObject(v7, v135);
  *(_OWORD *)(inited + 16) = xmmword_100081E60;
  v9 = (char *)v5[2];
  v10 = v5[4];
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = v10;
  v124 = a2;
  if (!v9)
  {
    swift_bridgeObjectRetain(v10);
    v11 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain_n(v9, 2);
  v11 = sub_10005CFC0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v13 = *((_QWORD *)v11 + 2);
  v12 = *((_QWORD *)v11 + 3);
  v14 = v13 + 1;
  if (v13 >= v12 >> 1)
    goto LABEL_97;
  while (1)
  {
    *((_QWORD *)v11 + 2) = v14;
    *(_QWORD *)&v11[8 * v13 + 32] = v9;
LABEL_5:
    v15 = (char *)_swiftEmptyArrayStorage;
    v122 = v10;
    if (v10)
    {
      swift_bridgeObjectRetain(v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = sub_10005CFC0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v17 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      if (v17 >= v16 >> 1)
        v11 = sub_10005CFC0((char *)(v16 > 1), v17 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v17 + 1;
      *(_QWORD *)&v11[8 * v17 + 32] = v10;
    }
    swift_release(inited);
    v14 = v5[3];
    v127 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v11);
    sub_10004F484(v11);
    v121 = v14;
    sub_10004F484((char *)v14);
    swift_bridgeObjectRelease(v11);
    v11 = v127;
    v10 = *((_QWORD *)v127 + 2);
    if (!v10)
      break;
    v120 = v5;
    v127 = (char *)_swiftEmptyArrayStorage;
    sub_10004ED94(0, v10, 0);
    v15 = v127;
    v18 = v11 + 32;
    v14 = *((_QWORD *)v127 + 2);
    do
    {
      v19 = *(_QWORD *)(*(_QWORD *)v18 + 16);
      v127 = v15;
      v20 = *((_QWORD *)v15 + 3);
      v13 = v14 + 1;
      if (v14 >= v20 >> 1)
      {
        sub_10004ED94((char *)(v20 > 1), v14 + 1, 1);
        v15 = v127;
      }
      *((_QWORD *)v15 + 2) = v13;
      *(_QWORD *)&v15[8 * v14 + 32] = v19;
      v18 += 8;
      ++v14;
      --v10;
    }
    while (v10);
    v5 = v120;
LABEL_18:
    inited = *((_QWORD *)v15 + 4);
    v21 = v13 - 1;
    if (v13 == 1)
      goto LABEL_28;
    if (v21 >= 4)
    {
      v22 = v21 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v23 = vdupq_n_s64(inited);
      v24 = (int64x2_t *)(v15 + 56);
      v25 = v21 & 0xFFFFFFFFFFFFFFFCLL;
      v26 = v23;
      do
      {
        v23 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v23, v24[-1]), (int8x16_t)v23, (int8x16_t)v24[-1]);
        v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v26, *v24), (int8x16_t)v26, *(int8x16_t *)v24);
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      v27 = vbslq_s8((int8x16_t)vcgtq_s64(v23, v26), (int8x16_t)v23, (int8x16_t)v26);
      v28 = vextq_s8(v27, v27, 8uLL).u64[0];
      inited = (uint64_t)vbsl_s8((int8x8_t)vcgtd_s64(v27.i64[0], v28), *(int8x8_t *)v27.i8, (int8x8_t)v28);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_28;
    }
    else
    {
      v22 = 1;
    }
    v29 = v13 - v22;
    v30 = (uint64_t *)&v15[8 * v22 + 32];
    do
    {
      v32 = *v30++;
      v31 = v32;
      if (inited <= v32)
        inited = v31;
      --v29;
    }
    while (v29);
LABEL_28:
    swift_bridgeObjectRelease(v15);
    if ((inited & 0x8000000000000000) == 0)
      goto LABEL_29;
LABEL_96:
    __break(1u);
LABEL_97:
    v11 = sub_10005CFC0((char *)(v12 > 1), v14, 1, v11);
  }
  v13 = _swiftEmptyArrayStorage[2];
  if (v13)
    goto LABEL_18;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  inited = 0;
LABEL_29:
  v33 = sub_10004F714(0, inited, (uint64_t)v11, v125, v123 & 1);
  swift_bridgeObjectRelease(v11);
  v133 = xmmword_100086380;
  v34 = sub_100004B18(&qword_1000CBF68);
  v35 = swift_initStackObject(v34, &v131);
  v125 = xmmword_100082750;
  *(_OWORD *)(v35 + 16) = xmmword_100082750;
  v37 = *v5;
  v36 = v5[1];
  *(_QWORD *)(v35 + 32) = *v5;
  *(_QWORD *)(v35 + 40) = v36;
  if (v36)
  {
    v123 = 0;
    v38 = v33;
    v39 = v9;
    v40 = v34;
    swift_bridgeObjectRetain_n(v36, 2);
    v41 = sub_10005CEC0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v43 = *((_QWORD *)v41 + 2);
    v42 = *((_QWORD *)v41 + 3);
    v5 = (_QWORD *)(v43 + 1);
    if (v43 >= v42 >> 1)
      v41 = sub_10005CEC0((char *)(v42 > 1), v43 + 1, 1, v41);
    *((_QWORD *)v41 + 2) = v5;
    v44 = &v41[16 * v43];
    *((_QWORD *)v44 + 4) = v37;
    *((_QWORD *)v44 + 5) = v36;
    v34 = v40;
    v9 = v39;
    v33 = v38;
  }
  else
  {
    v41 = (char *)_swiftEmptyArrayStorage;
  }
  swift_release(v35);
  v134[0] = v41;
  v45 = swift_initStackObject(v34, &v130);
  v46 = v45;
  *(_OWORD *)(v45 + 16) = v125;
  v47 = v124;
  if (!v9)
  {
    *(_QWORD *)(v45 + 32) = 0;
    *(_QWORD *)(v45 + 40) = 0;
    v9 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_55;
  }
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v33);
  v48 = sub_10004E308((uint64_t)v9, v33);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v9);
  v49 = sub_10004D268((uint64_t)v48);
  v50 = v49[2];
  if (v50)
  {
    v51 = v49[4];
    v52 = v50 - 1;
    if (v50 != 1)
    {
      if (v50 >= 5)
      {
        v53 = v52 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v55 = vdupq_n_s64(v51);
        v56 = (int64x2_t *)(v49 + 7);
        v57 = v52 & 0xFFFFFFFFFFFFFFFCLL;
        v58 = v55;
        do
        {
          v55 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v55, v56[-1]), (int8x16_t)v55, (int8x16_t)v56[-1]);
          v58 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v58, *v56), (int8x16_t)v58, *(int8x16_t *)v56);
          v56 += 2;
          v57 -= 4;
        }
        while (v57);
        v59 = vbslq_s8((int8x16_t)vcgtq_s64(v55, v58), (int8x16_t)v55, (int8x16_t)v58);
        v60 = vextq_s8(v59, v59, 8uLL).u64[0];
        v51 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v59.i64[0], v60), *(int8x8_t *)v59.i8, (int8x8_t)v60);
        if (v52 != (v52 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_45;
      }
      else
      {
        v53 = 1;
LABEL_45:
        v61 = v50 - v53;
        v62 = &v49[v53 + 4];
        do
        {
          v64 = *v62++;
          v63 = v64;
          if (v51 <= v64)
            v51 = v63;
          --v61;
        }
        while (v61);
      }
    }
    v54 = swift_bridgeObjectRelease(v49);
    if (v51 < 0)
    {
      __break(1u);
      goto LABEL_99;
    }
  }
  else
  {
    v54 = swift_bridgeObjectRelease(v49);
    v51 = 0;
  }
  v123 = v34;
  v127 = 0;
  v128 = v51;
  __chkstk_darwin(v54);
  v116 = v48;
  v117 = v33;
  v118 = v126;
  v119 = v47;
  v66 = sub_100004B18(&qword_1000C77D8);
  v67 = sub_10004FB3C();
  v5 = (_QWORD *)Sequence.flatMap<A>(_:)(sub_10004FD60, v115, v66, &type metadata for String, v67);
  swift_bridgeObjectRelease(v48);
  v127 = (char *)v5;
  v68 = sub_100004B18(&qword_1000CB120);
  v69 = sub_1000457D0();
  v51 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v68, v69);
  v48 = v70;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(v46 + 32) = v51;
  *(_QWORD *)(v46 + 40) = v48;
  if (!v48)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_54;
  }
  swift_bridgeObjectRetain(v48);
  v9 = sub_10005CEC0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v34 = *((_QWORD *)v9 + 2);
  v65 = *((_QWORD *)v9 + 3);
  v5 = (_QWORD *)(v34 + 1);
  if (v34 >= v65 >> 1)
    goto LABEL_100;
  while (2)
  {
    *((_QWORD *)v9 + 2) = v5;
    v71 = &v9[16 * v34];
    *((_QWORD *)v71 + 4) = v51;
    *((_QWORD *)v71 + 5) = v48;
LABEL_54:
    v34 = v123;
LABEL_55:
    swift_bridgeObjectRelease(v46);
    v134[1] = v9;
    v72 = v121;
    swift_bridgeObjectRetain(v121);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v47);
    v73 = sub_10004F868(v72, v33, v126, v47);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v47);
    v134[2] = v73;
    v74 = swift_initStackObject(v34, &v129);
    v46 = v74;
    *(_OWORD *)(v74 + 16) = v125;
    v75 = v122;
    if (!v122)
    {
      v80 = (_QWORD *)(v74 + 32);
      swift_bridgeObjectRelease(v33);
      *v80 = 0;
      *(_QWORD *)(v46 + 40) = 0;
      goto LABEL_74;
    }
    swift_bridgeObjectRetain(v122);
    swift_bridgeObjectRetain(v33);
    v48 = sub_10004E308(v75, v33);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v75);
    v76 = sub_10004D268((uint64_t)v48);
    v77 = v76[2];
    if (v77)
    {
      v51 = v76[4];
      v78 = v77 - 1;
      if (v77 != 1)
      {
        if (v77 >= 5)
        {
          v79 = v78 & 0xFFFFFFFFFFFFFFFCLL | 1;
          v82 = vdupq_n_s64(v51);
          v83 = (int64x2_t *)(v76 + 7);
          v84 = v78 & 0xFFFFFFFFFFFFFFFCLL;
          v85 = v82;
          do
          {
            v82 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v82, v83[-1]), (int8x16_t)v82, (int8x16_t)v83[-1]);
            v85 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v85, *v83), (int8x16_t)v85, *(int8x16_t *)v83);
            v83 += 2;
            v84 -= 4;
          }
          while (v84);
          v86 = vbslq_s8((int8x16_t)vcgtq_s64(v82, v85), (int8x16_t)v82, (int8x16_t)v85);
          v87 = vextq_s8(v86, v86, 8uLL).u64[0];
          v51 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v86.i64[0], v87), *(int8x8_t *)v86.i8, (int8x8_t)v87);
          if (v78 != (v78 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_65;
        }
        else
        {
          v79 = 1;
LABEL_65:
          v88 = v77 - v79;
          v89 = &v76[v79 + 4];
          do
          {
            v91 = *v89++;
            v90 = v91;
            if (v51 <= v91)
              v51 = v90;
            --v88;
          }
          while (v88);
        }
      }
      v81 = swift_bridgeObjectRelease(v76);
      if ((v51 & 0x8000000000000000) == 0)
        goto LABEL_70;
LABEL_99:
      __break(1u);
LABEL_100:
      v9 = sub_10005CEC0((char *)(v65 > 1), (int64_t)v5, 1, v9);
      continue;
    }
    break;
  }
  v81 = swift_bridgeObjectRelease(v76);
  v51 = 0;
LABEL_70:
  v127 = 0;
  v128 = v51;
  __chkstk_darwin(v81);
  v116 = v48;
  v117 = v33;
  v118 = v126;
  v119 = v47;
  v92 = sub_100004B18(&qword_1000C77D8);
  v93 = sub_10004FB3C();
  v94 = Sequence.flatMap<A>(_:)(sub_10004FB20, v115, v92, &type metadata for String, v93);
  swift_bridgeObjectRelease(v48);
  v127 = (char *)v94;
  v95 = sub_100004B18(&qword_1000CB120);
  v96 = sub_1000457D0();
  v97 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v95, v96);
  v99 = v98;
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v94);
  *(_QWORD *)(v46 + 32) = v97;
  *(_QWORD *)(v46 + 40) = v99;
  if (!v99)
  {
LABEL_74:
    v100 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_75;
  }
  swift_bridgeObjectRetain(v99);
  v100 = sub_10005CEC0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  v102 = *((_QWORD *)v100 + 2);
  v101 = *((_QWORD *)v100 + 3);
  if (v102 >= v101 >> 1)
    v100 = sub_10005CEC0((char *)(v101 > 1), v102 + 1, 1, v100);
  *((_QWORD *)v100 + 2) = v102 + 1;
  v103 = &v100[16 * v102];
  *((_QWORD *)v103 + 4) = v97;
  *((_QWORD *)v103 + 5) = v99;
LABEL_75:
  inited = (uint64_t)v134;
  swift_bridgeObjectRelease(v46);
  v134[3] = v100;
  v14 = (unint64_t)_swiftEmptyArrayStorage;
  v10 = 32;
  v5 = v132;
  v11 = (char *)&type metadata for String;
  while (2)
  {
    v104 = *(_QWORD *)&v132[v10];
    v13 = *(_QWORD *)(v104 + 16);
    v9 = *(char **)(v14 + 16);
    v105 = &v9[v13];
    if (__OFADD__(v9, v13))
    {
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    swift_bridgeObjectRetain(*(_QWORD *)&v132[v10]);
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(v14);
    if ((_DWORD)isUniquelyReferenced_nonNull_native && (uint64_t)v105 <= *(_QWORD *)(v14 + 24) >> 1)
    {
      v12 = *(_QWORD *)(v104 + 16);
      if (!v12)
      {
LABEL_76:
        if (v13)
          goto LABEL_93;
        goto LABEL_77;
      }
    }
    else
    {
      if ((uint64_t)v9 <= (uint64_t)v105)
        v107 = (int64_t)&v9[v13];
      else
        v107 = (int64_t)v9;
      v14 = (unint64_t)sub_10005CEC0(isUniquelyReferenced_nonNull_native, v107, 1, (char *)v14);
      v12 = *(_QWORD *)(v104 + 16);
      if (!v12)
        goto LABEL_76;
    }
    v12 = *(_QWORD *)(v14 + 16);
    if ((uint64_t)((*(_QWORD *)(v14 + 24) >> 1) - v12) < (uint64_t)v13)
      goto LABEL_94;
    swift_arrayInitWithCopy(v14 + 16 * v12 + 32, v104 + 32, v13, &type metadata for String);
    if (v13)
    {
      v108 = *(_QWORD *)(v14 + 16);
      v109 = __OFADD__(v108, v13);
      v12 = v108 + v13;
      if (v109)
        goto LABEL_95;
      *(_QWORD *)(v14 + 16) = v12;
    }
LABEL_77:
    swift_bridgeObjectRelease(v104);
    v10 += 8;
    if (v10 != 64)
      continue;
    break;
  }
  v110 = v133;
  v111 = sub_100004B18(&qword_1000CB120);
  swift_arrayDestroy(v134, v110, v111);
  v127 = (char *)v14;
  v112 = sub_1000457D0();
  v113 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v111, v112);
  swift_bridgeObjectRelease(v14);
  return v113;
}

char *sub_10004DF40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, char a4@<W3>, int64_t *a5@<X8>)
{
  char v5;
  int64_t v6;
  int64_t *v7;
  int64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64x2_t v38;
  int64x2_t *v39;
  unint64_t v40;
  int64x2_t v41;
  int8x16_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t *v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t *v50;
  char v51;

  v5 = a4;
  v6 = a3;
  v7 = a5;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v49 = a3;
    v50 = a5;
    v51 = a4;
    v10 = *a1;
    sub_10004EDCC(0, v8, 0);
    v11 = a2 + 32;
    do
    {
      v12 = 0;
      v13 = 0xE000000000000000;
      if ((v10 & 0x8000000000000000) == 0 && v10 < *(_QWORD *)(*(_QWORD *)v11 + 16))
      {
        v14 = *(_QWORD *)v11 + 16 * v10;
        v12 = *(_QWORD *)(v14 + 32);
        v13 = *(_QWORD *)(v14 + 40);
        swift_bridgeObjectRetain(v13);
      }
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      v17 = v16 + 1;
      if (v16 >= v15 >> 1)
        sub_10004EDCC((char *)(v15 > 1), v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v17;
      v18 = &_swiftEmptyArrayStorage[2 * v16];
      v18[4] = v12;
      v18[5] = v13;
      v11 += 8;
      --v8;
    }
    while (v8);
    goto LABEL_12;
  }
  v17 = _swiftEmptyArrayStorage[2];
  if (!v17)
  {
    v21 = (char *)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
LABEL_29:
    v33 = sub_10004D378((uint64_t)v21);
    swift_bridgeObjectRelease(v21);
    v34 = v33[2];
    if (v34)
    {
      v35 = v33[4];
      v36 = v34 - 1;
      if (v34 != 1)
      {
        if (v34 < 5)
        {
          v37 = 1;
          goto LABEL_37;
        }
        v37 = v36 & 0xFFFFFFFFFFFFFFFCLL | 1;
        v38 = vdupq_n_s64(v35);
        v39 = (int64x2_t *)(v33 + 7);
        v40 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        v41 = v38;
        do
        {
          v38 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v38, v39[-1]), (int8x16_t)v38, (int8x16_t)v39[-1]);
          v41 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v41, *v39), (int8x16_t)v41, *(int8x16_t *)v39);
          v39 += 2;
          v40 -= 4;
        }
        while (v40);
        v42 = vbslq_s8((int8x16_t)vcgtq_s64(v38, v41), (int8x16_t)v38, (int8x16_t)v41);
        v43 = vextq_s8(v42, v42, 8uLL).u64[0];
        v35 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v42.i64[0], v43), *(int8x8_t *)v42.i8, (int8x8_t)v43);
        if (v36 != (v36 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_37:
          v44 = v34 - v37;
          v45 = &v33[v37 + 4];
          do
          {
            v47 = *v45++;
            v46 = v47;
            if (v35 <= v47)
              v35 = v46;
            --v44;
          }
          while (v44);
        }
      }
    }
    else
    {
      v35 = 0;
    }
    result = (char *)swift_bridgeObjectRelease(v33);
    if (v35 >= v6)
      v48 = v6;
    else
      v48 = v35;
    if ((v5 & 1) != 0)
      v48 = v35;
    *v7 = v48;
    return result;
  }
  v49 = a3;
  v50 = a5;
  v51 = a4;
LABEL_12:
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v19 = sub_10001C564();
  v20 = &_swiftEmptyArrayStorage[5];
  v21 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v22 = *v20;
    swift_bridgeObjectRetain(*v20);
    v23 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v19);
    result = (char *)swift_bridgeObjectRelease(v22);
    v25 = *(_QWORD *)(v23 + 16);
    v26 = *((_QWORD *)v21 + 2);
    v27 = v26 + v25;
    if (__OFADD__(v26, v25))
      break;
    result = (char *)swift_isUniquelyReferenced_nonNull_native(v21);
    if ((_DWORD)result && v27 <= *((_QWORD *)v21 + 3) >> 1)
    {
      if (*(_QWORD *)(v23 + 16))
        goto LABEL_24;
    }
    else
    {
      if (v26 <= v27)
        v28 = v26 + v25;
      else
        v28 = v26;
      result = sub_10005D1E0(result, v28, 1, v21);
      v21 = result;
      if (*(_QWORD *)(v23 + 16))
      {
LABEL_24:
        v29 = *((_QWORD *)v21 + 2);
        if ((*((_QWORD *)v21 + 3) >> 1) - v29 < v25)
          goto LABEL_50;
        result = (char *)swift_arrayInitWithCopy(&v21[32 * v29 + 32], v23 + 32, v25, &type metadata for Substring);
        if (v25)
        {
          v30 = *((_QWORD *)v21 + 2);
          v31 = __OFADD__(v30, v25);
          v32 = v30 + v25;
          if (v31)
            goto LABEL_51;
          *((_QWORD *)v21 + 2) = v32;
        }
        goto LABEL_14;
      }
    }
    if (v25)
      goto LABEL_49;
LABEL_14:
    v20 += 2;
    swift_bridgeObjectRelease(v23);
    if (!--v17)
    {
      swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
      v5 = v51;
      v6 = v49;
      v7 = v50;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_10004E2A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  swift_bridgeObjectRetain(v6);
  v7 = Substring.distance(from:to:)(v3, v4, v3, v4, v5, v6);
  result = swift_bridgeObjectRelease(v6);
  *a2 = v7;
  return result;
}

_QWORD *sub_10004E308(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  char *v21;
  _QWORD *v22;
  int64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  _QWORD *v54;
  int64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  _BYTE v71[16];
  _QWORD **v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v79 = a2[2];
  if (v79 >= v4)
    v5 = v4;
  else
    v5 = v79;
  v90 = _swiftEmptyArrayStorage;
  sub_10004EDB0(0, v5, 0);
  v6 = _swiftEmptyArrayStorage;
  v80 = v3;
  v81 = v5;
  v74 = a2;
  v78 = v4;
  if (!v5)
  {
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(a2);
    v38 = 0;
    v9 = v79;
LABEL_25:
    if (v4 <= v9)
    {
      result = v74;
LABEL_50:
      swift_bridgeObjectRelease(result);
      swift_bridgeObjectRelease(v3);
      return v6;
    }
    result = v74;
    v75 = v74 + 4;
    v76 = v3 + 32;
    if (v38 <= (uint64_t)v9)
      v39 = (_QWORD *)v9;
    else
      v39 = (_QWORD *)v38;
    v77 = v39;
    while (1)
    {
      if (v38 == v4)
        goto LABEL_54;
      if (v38 == v9)
        goto LABEL_50;
      if ((_QWORD *)v38 == v77)
        goto LABEL_55;
      v84 = v6;
      v40 = (_QWORD *)(v76 + 16 * v38);
      v41 = (_QWORD *)*v40;
      v42 = (_QWORD *)v40[1];
      v81 = v38;
      v43 = v75[v38];
      v85 = v41;
      v86 = v42;
      v44 = sub_10001C564();
      swift_bridgeObjectRetain(v42);
      result = (_QWORD *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v44);
      v89 = _swiftEmptyArrayStorage;
      v45 = result[2];
      v83 = v42;
      if (v45)
      {
        if (!v43)
          goto LABEL_56;
        v82 = result;
        v46 = result + 7;
        do
        {
          v47 = (_QWORD *)*(v46 - 2);
          v49 = *(v46 - 1);
          v50 = *v46;
          v85 = (_QWORD *)*(v46 - 3);
          v48 = v85;
          v86 = v47;
          v87 = v49;
          v88 = v50;
          swift_bridgeObjectRetain(v50);
          v51 = Substring.distance(from:to:)(v48, v47, v48, v47, v49, v50);
          __chkstk_darwin(v51);
          v72 = &v85;
          v73 = v43;
          v53 = sub_10004E96C((_QWORD *(*)(__int128 *__return_ptr, int64_t *))sub_10004FD74, (uint64_t)v71, 0, v52, v43);
          swift_bridgeObjectRelease(v50);
          sub_10004F56C(v53);
          v46 += 4;
          --v45;
        }
        while (v45);
        swift_bridgeObjectRelease(v82);
        v54 = v89;
        v3 = v80;
        v55 = v89[2];
        if (v55)
        {
LABEL_38:
          v85 = _swiftEmptyArrayStorage;
          sub_10004EDCC(0, v55, 0);
          v56 = v85;
          v82 = v54;
          v57 = v54 + 7;
          do
          {
            v59 = *(v57 - 3);
            v58 = *(v57 - 2);
            v60 = *(v57 - 1);
            v61 = *v57;
            swift_bridgeObjectRetain(*v57);
            v62 = static String._fromSubstring(_:)(v59, v58, v60, v61);
            v64 = v63;
            swift_bridgeObjectRelease(v61);
            v85 = v56;
            v66 = v56[2];
            v65 = v56[3];
            if (v66 >= v65 >> 1)
            {
              sub_10004EDCC((char *)(v65 > 1), v66 + 1, 1);
              v56 = v85;
            }
            v56[2] = v66 + 1;
            v67 = &v56[2 * v66];
            v67[4] = v62;
            v67[5] = v64;
            v57 += 4;
            --v55;
          }
          while (v55);
          swift_bridgeObjectRelease(v83);
          swift_bridgeObjectRelease(v82);
          v3 = v80;
          goto LABEL_45;
        }
      }
      else
      {
        swift_bridgeObjectRelease(result);
        v54 = _swiftEmptyArrayStorage;
        v55 = _swiftEmptyArrayStorage[2];
        if (v55)
          goto LABEL_38;
      }
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v54);
      v56 = _swiftEmptyArrayStorage;
LABEL_45:
      v6 = v84;
      v90 = v84;
      v69 = v84[2];
      v68 = v84[3];
      v70 = v81;
      if (v69 >= v68 >> 1)
      {
        sub_10004EDB0((_QWORD *)(v68 > 1), v69 + 1, 1);
        v70 = v81;
        v6 = v90;
      }
      v38 = v70 + 1;
      v6[2] = v69 + 1;
      v6[v69 + 4] = v56;
      v4 = v78;
      v9 = v79;
      result = v74;
      if (v38 == v78)
        goto LABEL_50;
    }
  }
  v75 = a2 + 4;
  v76 = v3 + 32;
  swift_bridgeObjectRetain(v3);
  result = (_QWORD *)swift_bridgeObjectRetain(a2);
  v8 = 0;
  v9 = v79;
  while (v8 != v4)
  {
    if (v8 == v9)
      goto LABEL_52;
    v83 = (_QWORD *)v8;
    v84 = v6;
    v10 = *(_QWORD **)(v76 + 16 * v8 + 8);
    v11 = v75[v8];
    v85 = *(_QWORD **)(v76 + 16 * v8);
    v86 = v10;
    v12 = sub_10001C564();
    swift_bridgeObjectRetain(v10);
    result = (_QWORD *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v12);
    v89 = _swiftEmptyArrayStorage;
    v13 = result[2];
    v82 = v10;
    if (v13)
    {
      if (!v11)
        goto LABEL_53;
      v77 = result;
      v14 = result + 7;
      do
      {
        v15 = (_QWORD *)*(v14 - 2);
        v17 = *(v14 - 1);
        v18 = *v14;
        v85 = (_QWORD *)*(v14 - 3);
        v16 = v85;
        v86 = v15;
        v87 = v17;
        v88 = v18;
        swift_bridgeObjectRetain(v18);
        v19 = Substring.distance(from:to:)(v16, v15, v16, v15, v17, v18);
        __chkstk_darwin(v19);
        v72 = &v85;
        v73 = v11;
        v21 = sub_10004E96C((_QWORD *(*)(__int128 *__return_ptr, int64_t *))sub_10004FCD8, (uint64_t)v71, 0, v20, v11);
        swift_bridgeObjectRelease(v18);
        sub_10004F56C(v21);
        v14 += 4;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease(v77);
      v22 = v89;
      v3 = v80;
      v23 = v89[2];
      if (v23)
      {
LABEL_13:
        v85 = _swiftEmptyArrayStorage;
        sub_10004EDCC(0, v23, 0);
        v24 = v85;
        v77 = v22;
        v25 = v22 + 7;
        do
        {
          v27 = *(v25 - 3);
          v26 = *(v25 - 2);
          v28 = *(v25 - 1);
          v29 = *v25;
          swift_bridgeObjectRetain(*v25);
          v30 = static String._fromSubstring(_:)(v27, v26, v28, v29);
          v32 = v31;
          swift_bridgeObjectRelease(v29);
          v85 = v24;
          v34 = v24[2];
          v33 = v24[3];
          if (v34 >= v33 >> 1)
          {
            sub_10004EDCC((char *)(v33 > 1), v34 + 1, 1);
            v24 = v85;
          }
          v24[2] = v34 + 1;
          v35 = &v24[2 * v34];
          v35[4] = v30;
          v35[5] = v32;
          v25 += 4;
          --v23;
        }
        while (v23);
        swift_bridgeObjectRelease(v77);
        v3 = v80;
        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRelease(result);
      v22 = _swiftEmptyArrayStorage;
      v23 = _swiftEmptyArrayStorage[2];
      if (v23)
        goto LABEL_13;
    }
    swift_bridgeObjectRelease(v22);
    v24 = _swiftEmptyArrayStorage;
LABEL_20:
    result = (_QWORD *)swift_bridgeObjectRelease(v82);
    v6 = v84;
    v90 = v84;
    v37 = v84[2];
    v36 = v84[3];
    if (v37 >= v36 >> 1)
    {
      result = sub_10004EDB0((_QWORD *)(v36 > 1), v37 + 1, 1);
      v6 = v90;
    }
    v8 = (uint64_t)v83 + 1;
    v6[2] = v37 + 1;
    v6[v37 + 4] = v24;
    v38 = v81;
    v4 = v78;
    v9 = v79;
    if (v8 == v81)
      goto LABEL_25;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

char *sub_10004E96C(_QWORD *(*a1)(__int128 *__return_ptr, int64_t *), uint64_t a2, int64_t a3, int64_t a4, uint64_t a5)
{
  uint64_t v5;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  _BOOL4 v11;
  BOOL v12;
  char *result;
  _QWORD *v14;
  BOOL v15;
  int64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  BOOL v23;
  int64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  BOOL v31;
  __int128 v32;
  __int128 v33;
  int64_t v34;
  int64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v7 = a4;
  v8 = a3;
  v9 = 0;
  v10 = a3;
  while (1)
  {
    v11 = v10 <= a4;
    if (a5 > 0)
      v11 = v10 >= a4;
    if (v11)
      break;
    v12 = __OFADD__(v10, a5);
    v10 += a5;
    if (v12)
      v10 = (v10 >> 63) ^ 0x8000000000000000;
    v12 = __OFADD__(v9++, 1);
    if (v12)
    {
      __break(1u);
      break;
    }
  }
  v41 = _swiftEmptyArrayStorage;
  result = sub_10004EE20(0, v9, 0);
  v14 = _swiftEmptyArrayStorage;
  v34 = v7;
  if (v9)
  {
    while (1)
    {
      v15 = v8 <= v7;
      if (a5 > 0)
        v15 = v8 >= v7;
      if (v15)
        break;
      if (__OFADD__(v8, a5))
        v16 = ((v8 + a5) >> 63) ^ 0x8000000000000000;
      else
        v16 = v8 + a5;
      v36 = v8;
      v37 = 0;
      result = (char *)a1(&v38, &v36);
      if (v5)
        goto LABEL_36;
      v17 = v38;
      v19 = v39;
      v18 = v40;
      v41 = v14;
      v21 = v14[2];
      v20 = v14[3];
      if (v21 >= v20 >> 1)
      {
        v32 = v38;
        result = sub_10004EE20((char *)(v20 > 1), v21 + 1, 1);
        v17 = v32;
        v14 = v41;
      }
      v14[2] = v21 + 1;
      v22 = &v14[4 * v21];
      *((_OWORD *)v22 + 2) = v17;
      v22[6] = v19;
      v22[7] = v18;
      v8 = v16;
      --v9;
      v7 = v34;
      if (!v9)
        goto LABEL_23;
    }
    __break(1u);
  }
  else
  {
    v16 = v8;
LABEL_23:
    v23 = v16 <= v7;
    if (a5 > 0)
      v23 = v16 >= v7;
    if (!v23)
    {
      while (1)
      {
        v24 = __OFADD__(v16, a5) ? ((v16 + a5) >> 63) ^ 0x8000000000000000 : v16 + a5;
        v36 = v16;
        a1(&v38, &v36);
        if (v5)
          break;
        v25 = v38;
        v26 = v39;
        v27 = v40;
        v41 = v14;
        v29 = v14[2];
        v28 = v14[3];
        if (v29 >= v28 >> 1)
        {
          v33 = v38;
          sub_10004EE20((char *)(v28 > 1), v29 + 1, 1);
          v25 = v33;
          v7 = v34;
          v14 = v41;
        }
        v14[2] = v29 + 1;
        v30 = &v14[4 * v29];
        *((_OWORD *)v30 + 2) = v25;
        v30[6] = v26;
        v30[7] = v27;
        v31 = v24 <= v7;
        if (a5 > 0)
          v31 = v24 >= v7;
        v16 = v24;
        if (v31)
          return (char *)v14;
      }
LABEL_36:
      swift_release(v14);
    }
    return (char *)v14;
  }
  return result;
}

uint64_t sub_10004EBC4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  swift_bridgeObjectRetain(a1);
  v8 = sub_10004FBB4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10004FBA8);
  swift_bridgeObjectRelease(a1);
  v9 = sub_100004B18(&qword_1000CB120);
  v10 = sub_1000457D0();
  v11 = BidirectionalCollection<>.joined(separator:)(a2, a3, v9, v10);
  v13 = v12;
  result = swift_bridgeObjectRelease(v8);
  *a4 = v11;
  a4[1] = v13;
  return result;
}

unint64_t sub_10004EC90(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::String v12;
  Swift::String v13;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = result;
  if (*(_QWORD *)(a3 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a3 + 8 * result + 32);
  v9 = 0xE000000000000000;
  if ((a4 & 0x8000000000000000) == 0 && *(_QWORD *)(a2 + 16) > a4)
  {
    v10 = a2 + 16 * a4;
    v7 = *(_QWORD *)(v10 + 32);
    v9 = *(_QWORD *)(v10 + 40);
    swift_bridgeObjectRetain(v9);
  }
  if (*(_QWORD *)(a5 + 16) - 1 <= v5)
    return v7;
  result = String.count.getter(v7, v9);
  v11 = v8 - result;
  if (!__OFSUB__(v8, result))
  {
    if (v11 >= 1)
    {
      v12._countAndFlagsBits = 32;
      v12._object = (void *)0xE100000000000000;
      v13 = String.init(repeating:count:)(v12, v11);
      swift_bridgeObjectRetain(v9);
      String.append(_:)(v13);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v13._object);
    }
    return v7;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10004ED8C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

char *sub_10004ED94(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10004EE3C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_10004EDB0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_10004EF34(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10004EDCC(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10004F054(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10004EDE8(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10004F154(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_10004EE04(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_10004F24C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10004EE20(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_10004F384(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_10004EE3C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CBF90);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_10004EF34(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CBF80);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4])
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100004B18(&qword_1000CB120);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_release(a4);
  return v11;
}

char *sub_10004F054(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CB118);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_release(a4);
  return v11;
}

char *sub_10004F154(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CBFA8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_release(a4);
  return v11;
}

_QWORD *sub_10004F24C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CBF98);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[3 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    v14 = sub_100004B18(&qword_1000CBFA0);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v14);
  }
  swift_release(a4);
  return v11;
}

char *sub_10004F384(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CBF78);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for Substring);
  }
  swift_release(a4);
  return v11;
}

char *sub_10004F484(char *result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *((_QWORD *)result + 2);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_10005CFC0(result, v11, 1, v3);
  v3 = result;
  if (!*((_QWORD *)v6 + 2))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)swift_arrayInitWithCopy(&v3[8 * v7 + 32], v6 + 32, v2, &type metadata for TableFormatter.Row);
  if (!v2)
  {
LABEL_14:
    result = (char *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = *((_QWORD *)v3 + 2);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *((_QWORD *)v3 + 2) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *sub_10004F56C(char *result)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *((_QWORD *)result + 2);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)result && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*((_QWORD *)v6 + 2))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = sub_10005D1E0(result, v11, 1, v3);
  v3 = result;
  if (!*((_QWORD *)v6 + 2))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)swift_arrayInitWithCopy(&v3[32 * v7 + 32], v6 + 32, v2, &type metadata for Substring);
  if (!v2)
  {
LABEL_14:
    result = (char *)swift_bridgeObjectRelease(v6);
    *v1 = v3;
    return result;
  }
  v8 = *((_QWORD *)v3 + 2);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *((_QWORD *)v3 + 2) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_10004F654@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = Substring.index(_:offsetBy:)(v6, *a1, v6, v7, v8, v9);
  result = Substring.index(_:offsetBy:limitedBy:)(v10, a3, v7, v6, v7, v8, v9);
  if ((v12 & 1) != 0)
    v13 = v7;
  else
    v13 = result;
  if (v13 >> 14 < v10 >> 14)
  {
    __break(1u);
  }
  else
  {
    result = Substring.subscript.getter(v10);
    *a4 = result;
    a4[1] = v14;
    a4[2] = v15;
    a4[3] = v16;
  }
  return result;
}

char *sub_10004F714(char *result, uint64_t a2, uint64_t a3, int64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v20;
  int64_t v21;
  _QWORD *v22;

  v6 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = v5;
  v8 = _swiftEmptyArrayStorage;
  if (!v6)
    return (char *)v8;
  v11 = result;
  v22 = _swiftEmptyArrayStorage;
  result = sub_10004ED94(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v17 = a5 & 1;
    v8 = v22;
    if (a2 <= (uint64_t)v11)
      v12 = v11;
    else
      v12 = (char *)a2;
    v13 = (uint64_t)v11;
    while (a2 != v13)
    {
      v20 = v13;
      result = sub_10004DF40(&v20, a3, a4, v17, &v21);
      if (v7)
      {
        swift_release(v8);
        return (char *)v8;
      }
      v7 = 0;
      v14 = v21;
      v22 = v8;
      v16 = v8[2];
      v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        result = sub_10004ED94((char *)(v15 > 1), v16 + 1, 1);
        v8 = v22;
      }
      v8[2] = v16 + 1;
      v8[v16 + 4] = v14;
      if (a2 < (uint64_t)v11)
        goto LABEL_19;
      if (v12 == (char *)v13)
        goto LABEL_20;
      if (a2 == ++v13)
        return (char *)v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10004F868(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64x2_t v17;
  int64x2_t *v18;
  unint64_t v19;
  int64x2_t v20;
  int8x16_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t *v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD v38[7];
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  _QWORD *v46;

  v41 = a3;
  v42 = a4;
  v43 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = _swiftEmptyArrayStorage;
  if (!v4)
    return (uint64_t)v5;
  v46 = _swiftEmptyArrayStorage;
  sub_10004EDCC(0, v4, 0);
  v7 = 0;
  v5 = _swiftEmptyArrayStorage;
  v39 = v4;
  v40 = a1 + 32;
  while (1)
  {
    v8 = *(_QWORD *)(v40 + 8 * v7);
    swift_bridgeObjectRetain(v8);
    v9 = v43;
    swift_bridgeObjectRetain(v43);
    v10 = sub_10004E308(v8, v9);
    swift_bridgeObjectRelease(v9);
    v11 = sub_10004D268((uint64_t)v10);
    v12 = v11[2];
    if (v12)
      break;
    result = swift_bridgeObjectRelease(v11);
    v13 = 0;
LABEL_16:
    v44 = 0;
    v45 = v13;
    __chkstk_darwin(result);
    v38[2] = v10;
    v38[3] = v43;
    v38[4] = v41;
    v38[5] = v42;
    v27 = sub_100004B18(&qword_1000C77D8);
    v28 = sub_10004FB3C();
    v29 = Sequence.flatMap<A>(_:)(sub_10004FD60, v38, v27, &type metadata for String, v28);
    swift_bridgeObjectRelease(v10);
    v44 = v29;
    v30 = sub_100004B18(&qword_1000CB120);
    v31 = sub_1000457D0();
    v32 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v30, v31);
    v34 = v33;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v29);
    v46 = v5;
    v36 = v5[2];
    v35 = v5[3];
    if (v36 >= v35 >> 1)
    {
      sub_10004EDCC((char *)(v35 > 1), v36 + 1, 1);
      v5 = v46;
    }
    ++v7;
    v5[2] = v36 + 1;
    v37 = &v5[2 * v36];
    v37[4] = v32;
    v37[5] = v34;
    if (v7 == v39)
      return (uint64_t)v5;
  }
  v13 = v11[4];
  v14 = v12 - 1;
  if (v12 != 1)
  {
    if (v12 >= 5)
    {
      v15 = v14 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v17 = vdupq_n_s64(v13);
      v18 = (int64x2_t *)(v11 + 7);
      v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v17;
      do
      {
        v17 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v17, v18[-1]), (int8x16_t)v17, (int8x16_t)v18[-1]);
        v20 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v20, *v18), (int8x16_t)v20, *(int8x16_t *)v18);
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      v21 = vbslq_s8((int8x16_t)vcgtq_s64(v17, v20), (int8x16_t)v17, (int8x16_t)v20);
      v22 = vextq_s8(v21, v21, 8uLL).u64[0];
      v13 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v21.i64[0], v22), *(int8x8_t *)v21.i8, (int8x8_t)v22);
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_15;
    }
    else
    {
      v15 = 1;
    }
    v23 = v12 - v15;
    v24 = &v11[v15 + 4];
    do
    {
      v26 = *v24++;
      v25 = v26;
      if (v13 <= v26)
        v13 = v25;
      --v23;
    }
    while (v23);
  }
LABEL_15:
  result = swift_bridgeObjectRelease(v11);
  if ((v13 & 0x8000000000000000) == 0)
    goto LABEL_16;
  __break(1u);
  return result;
}

uint64_t sub_10004FB20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_10004EBC4(v1[2], v1[4], v1[5], a1);
}

unint64_t sub_10004FB3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CBF70;
  if (!qword_1000CBF70)
  {
    v1 = sub_100005F48(&qword_1000C77D8);
    sub_10001ECD8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CBF70);
  }
  return result;
}

unint64_t sub_10004FBA8(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10004EC90(a1, a2, v2[2], v2[3], v2[4]);
}

_QWORD *sub_10004FBB4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  sub_10004EDCC(0, 0, 0);
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v14 = a1;
  if (v3)
  {
    v4 = 0;
    v5 = a1 + 32;
    do
    {
      v6 = *(_QWORD *)(v5 + 8 * v4);
      swift_bridgeObjectRetain(v6);
      v7 = a2(v4, v6);
      v9 = v8;
      swift_bridgeObjectRelease(v6);
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_10004EDCC((char *)(v10 > 1), v11 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease(v14);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10004FCC8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 16);
  return result;
}

uint64_t sub_10004FCD8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10004F654(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_10004FCF8()
{
  unint64_t result;

  result = qword_1000CBF88;
  if (!qword_1000CBF88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_1000CBF88);
  }
  return result;
}

ValueMetadata *type metadata accessor for TableFormatter()
{
  return &type metadata for TableFormatter;
}

ValueMetadata *type metadata accessor for TableFormatter.Row()
{
  return &type metadata for TableFormatter.Row;
}

uint64_t sub_10004FD60@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004FB20(a1);
}

uint64_t sub_10004FD74@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10004FCD8(a1, a2);
}

id sub_10004FD88()
{
  return sub_10004FDEC(type metadata accessor for ActivityDisplayContext.CallDisplayContext, &qword_1000C8B00);
}

id sub_10004FD9C()
{
  return sub_10004FDEC(type metadata accessor for ActivityDisplayContext.TimerDisplayContext, &qword_1000C8AF8);
}

id sub_10004FDB0()
{
  return sub_10004FDEC(type metadata accessor for ActivityDisplayContext, &qword_1000C8B08);
}

id sub_10004FDC4()
{
  return sub_10004FDEC(type metadata accessor for CAImage, &qword_1000C8B30);
}

id sub_10004FDD8()
{
  return sub_10004FDEC(type metadata accessor for MovieView, &qword_1000C61C8);
}

id sub_10004FDEC(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t v22;

  v22 = a1(0);
  v3 = sub_100004B18(a2);
  v4 = String.init<A>(describing:)(&v22, v3);
  v6 = v5;
  v7 = sub_10003E348(60, 0xE100000000000000, v4, v5);
  if ((v8 & 1) == 0)
  {
    v9 = String.subscript.getter(15, v7, v4, v6);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    swift_bridgeObjectRelease(v6);
    static String._fromSubstring(_:)(v9, v11, v13, v15);
    v6 = v16;
    swift_bridgeObjectRelease(v15);
  }
  v17 = objc_allocWithZone((Class)CULogHandle);
  v18 = String._bridgeToObjectiveC()();
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v20 = objc_msgSend(v17, "initWithSubsystem:category:", v18, v19);

  return v20;
}

id sub_10004FF28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  unint64_t v31;
  id v32;
  NSString v33;
  NSString v34;
  id v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v1 = v0;
  v37 = type metadata accessor for XPCConnectionManager(0);
  v2 = sub_100004B18(&qword_1000CC250);
  v3 = String.init<A>(describing:)(&v37, v2);
  v5 = v4;
  v6 = sub_10003E348(60, 0xE100000000000000, v3, v4);
  if ((v7 & 1) == 0)
  {
    v8 = String.subscript.getter(15, v6, v3, v5);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease(v5);
    v3 = static String._fromSubstring(_:)(v8, v10, v12, v14);
    v5 = v15;
    swift_bridgeObjectRelease(v14);
  }
  v16 = swift_retain(v1);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  swift_release(v1);
  v20 = sub_10002FCB8(8, v17, v19);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_bridgeObjectRelease(v19);
  v41 = 45;
  v42 = 0xE100000000000000;
  v37 = v20;
  v38 = v22;
  v39 = v24;
  v40 = v26;
  v27 = sub_100029338();
  String.append<A>(contentsOf:)(&v37, &type metadata for Substring, v27);
  swift_bridgeObjectRelease(v26);
  v28 = v41;
  v29 = (void *)v42;
  v37 = v3;
  v38 = v5;
  swift_bridgeObjectRetain(v5);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v29);
  v31 = v38;
  v32 = objc_allocWithZone((Class)CULogHandle);
  v33 = String._bridgeToObjectiveC()();
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  v35 = objc_msgSend(v32, "initWithSubsystem:category:", v33, v34);

  return v35;
}

void sub_10005012C(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  NSString v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  Class isa;
  NSString v31;
  __int128 v32[3];
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v2 = v1;
  v37 = a1;
  CurrentValueSubject.send(_:)(&v37);
  v4 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128) + 8);
  if (v4)
  {
    v5 = a1 & 1;
    LOBYTE(v34) = a1 & 1;
    swift_bridgeObjectRetain(v4);
    v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v34, &type metadata for Bool);
    v7 = objc_opt_self(NSNull);
    v8 = swift_dynamicCastObjCClass(v6, v7);
    swift_unknownObjectRelease(v6, v9);
    v10 = *v2;
    if (v8)
    {
      v11 = *(void **)((char *)v2 + *(_QWORD *)(v10 + 112));
      if (v11)
      {
        v12 = v11;
        v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v12, "removeObjectForKey:", v13);

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease(v4);
      return;
    }
    if ((*((_BYTE *)v2 + *(_QWORD *)(v10 + 120)) & 1) == 0)
    {
      v14 = *(void **)((char *)v2 + *(_QWORD *)(v10 + 112));
      if (v14)
      {
        LOBYTE(v34) = v5;
        v15 = v14;
        v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v34, &type metadata for Bool);
        v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v15, "setValue:forKey:", v16, v17);

        swift_unknownObjectRelease(v16, v18);
        return;
      }
      goto LABEL_8;
    }
    v33 = v5;
    v19 = sub_100004B18(&qword_1000C6D58);
    if (swift_dynamicCast(v32, &v33, &type metadata for Bool, v19, 6))
    {
      sub_100053580(v32, &v34);
      v20 = v35;
      v21 = v36;
      sub_100006914(&v34, v35);
      v22 = sub_10007C384(v20, v21);
      v26 = v22;
      v27 = v23;
      v28 = *(void **)((char *)v2 + *(_QWORD *)(*v2 + 112));
      if (v28)
      {
        v29 = v28;
        isa = Data._bridgeToObjectiveC()().super.isa;
        v31 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v29, "setValue:forKey:", isa, v31);
        sub_10000ABA8(v26, v27);

      }
      else
      {
        sub_10000ABA8(v22, v23);
        swift_bridgeObjectRelease(v4);
      }
      sub_10000697C(&v34);
    }
    else
    {
      memset(v32, 0, sizeof(v32));
      swift_bridgeObjectRelease(v4);
      sub_100053428((uint64_t)v32);
      v24 = sub_10005365C(&qword_1000CC230, &qword_1000CC238);
      v25 = String._bridgeToObjectiveC()();
      objc_msgSend(v24, "ulog:message:", 60, v25);

    }
  }
}

void sub_1000504A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  Class isa;
  NSString v30;
  uint64_t v31;
  __int128 v32[3];
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v37 = a1;
  CurrentValueSubject.send(_:)(&v37);
  v4 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128) + 8);
  if (!v4)
    goto LABEL_9;
  *(_QWORD *)&v34 = a1;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(a1);
  v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v34, &type metadata for NearbySharingInteractionDisplayContext);
  v6 = objc_opt_self(NSNull);
  v7 = swift_dynamicCastObjCClass(v5, v6);
  swift_unknownObjectRelease(v5, v8);
  v9 = *v2;
  if (v7)
  {
    v10 = *(void **)((char *)v2 + *(_QWORD *)(v9 + 112));
    if (v10)
    {
      v11 = v10;
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      objc_msgSend(v11, "removeObjectForKey:", v12);
      swift_bridgeObjectRelease(a1);

      return;
    }
LABEL_8:
    swift_bridgeObjectRelease(v4);
LABEL_9:
    v18 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v18);
    return;
  }
  if ((*((_BYTE *)v2 + *(_QWORD *)(v9 + 120)) & 1) == 0)
  {
    v13 = *(void **)((char *)v2 + *(_QWORD *)(v9 + 112));
    if (v13)
    {
      *(_QWORD *)&v34 = a1;
      swift_bridgeObjectRetain(a1);
      v14 = v13;
      v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v34, &type metadata for NearbySharingInteractionDisplayContext);
      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      objc_msgSend(v14, "setValue:forKey:", v15, v16);
      swift_bridgeObjectRelease(a1);

      swift_unknownObjectRelease(v15, v17);
      return;
    }
    goto LABEL_8;
  }
  v33 = a1;
  swift_bridgeObjectRetain(a1);
  v19 = sub_100004B18(&qword_1000C6D58);
  if (!swift_dynamicCast(v32, &v33, &type metadata for NearbySharingInteractionDisplayContext, v19, 6))
  {
    memset(v32, 0, sizeof(v32));
    swift_bridgeObjectRelease(v4);
    sub_100053428((uint64_t)v32);
    v22 = sub_10005365C(&qword_1000CBBA0, &qword_1000CC2E8);
    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v22, "ulog:message:", 60, v23);

    v18 = v37;
    goto LABEL_10;
  }
  sub_100053580(v32, &v34);
  v20 = v35;
  v21 = v36;
  sub_100006914(&v34, v35);
  v24 = sub_10007C384(v20, v21);
  v26 = v25;
  v27 = *(void **)((char *)v2 + *(_QWORD *)(*v2 + 112));
  if (v27)
  {
    v28 = v27;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    objc_msgSend(v28, "setValue:forKey:", isa, v30);
    sub_10000ABA8(v24, v26);

    v31 = v37;
  }
  else
  {
    swift_bridgeObjectRelease(v37);
    sub_10000ABA8(v24, v26);
    v31 = v4;
  }
  swift_bridgeObjectRelease(v31);
  sub_10000697C(&v34);
}

uint64_t sub_100050854(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSString v18;
  void *v20;
  id v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  Class isa;
  NSString v34;
  _BYTE v35[16];
  __int128 v36[3];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for ActivityDisplayContext(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v35[-v8];
  CurrentValueSubject.send(_:)(a1);
  v10 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128) + 8);
  if (!v10)
    return sub_100018008(a1, type metadata accessor for ActivityDisplayContext);
  sub_100017FC4(a1, (uint64_t)v9, type metadata accessor for ActivityDisplayContext);
  swift_bridgeObjectRetain(v10);
  v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v9, v4);
  v12 = objc_opt_self(NSNull);
  v13 = swift_dynamicCastObjCClass(v11, v12);
  swift_unknownObjectRelease(v11, v14);
  v15 = *v2;
  if (v13)
  {
    v16 = *(void **)((char *)v2 + *(_QWORD *)(v15 + 112));
    if (v16)
    {
      v17 = v16;
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v10);
      objc_msgSend(v17, "removeObjectForKey:", v18);
LABEL_5:

      return sub_100018008(a1, type metadata accessor for ActivityDisplayContext);
    }
LABEL_10:
    sub_100018008(a1, type metadata accessor for ActivityDisplayContext);
    return swift_bridgeObjectRelease(v10);
  }
  if ((*((_BYTE *)v2 + *(_QWORD *)(v15 + 120)) & 1) == 0)
  {
    v20 = *(void **)((char *)v2 + *(_QWORD *)(v15 + 112));
    if (v20)
    {
      sub_100017FC4(a1, (uint64_t)v9, type metadata accessor for ActivityDisplayContext);
      v21 = v20;
      v22 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v9, v4);
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v10);
      objc_msgSend(v21, "setValue:forKey:", v22, v23);

      swift_unknownObjectRelease(v22, v24);
      return sub_100018008(a1, type metadata accessor for ActivityDisplayContext);
    }
    goto LABEL_10;
  }
  sub_100017FC4(a1, (uint64_t)v7, type metadata accessor for ActivityDisplayContext);
  v25 = sub_100004B18(&qword_1000C6D58);
  if (!swift_dynamicCast(v36, v7, v4, v25, 6))
  {
    memset(v36, 0, sizeof(v36));
    swift_bridgeObjectRelease(v10);
    sub_100053428((uint64_t)v36);
    v17 = sub_10005365C(&qword_1000C6F70, &qword_1000CC2C0);
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "ulog:message:", 60, v18);
    goto LABEL_5;
  }
  sub_100053580(v36, &v37);
  v26 = v38;
  v27 = v39;
  sub_100006914(&v37, v38);
  v28 = sub_10007C384(v26, v27);
  v30 = v29;
  v31 = *(void **)((char *)v2 + *(_QWORD *)(*v2 + 112));
  if (v31)
  {
    v32 = v31;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    objc_msgSend(v32, "setValue:forKey:", isa, v34);
    sub_10000ABA8(v28, v30);

    sub_100018008(a1, type metadata accessor for ActivityDisplayContext);
  }
  else
  {
    sub_100018008(a1, type metadata accessor for ActivityDisplayContext);
    sub_10000ABA8(v28, v30);
    swift_bridgeObjectRelease(v10);
  }
  return sub_10000697C(&v37);
}

void sub_100050C90(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  Class isa;
  NSString v30;
  __int128 v31[3];
  char v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v2 = v1;
  v36 = a1;
  CurrentValueSubject.send(_:)(&v36);
  v4 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128) + 8);
  if (v4)
  {
    LOBYTE(v33) = a1;
    swift_bridgeObjectRetain(v4);
    v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v33, &type metadata for CardMode);
    v6 = objc_opt_self(NSNull);
    v7 = swift_dynamicCastObjCClass(v5, v6);
    swift_unknownObjectRelease(v5, v8);
    v9 = *v2;
    if (v7)
    {
      v10 = *(void **)((char *)v2 + *(_QWORD *)(v9 + 112));
      if (v10)
      {
        v11 = v10;
        v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v11, "removeObjectForKey:", v12);

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease(v4);
      return;
    }
    if ((*((_BYTE *)v2 + *(_QWORD *)(v9 + 120)) & 1) == 0)
    {
      v13 = *(void **)((char *)v2 + *(_QWORD *)(v9 + 112));
      if (v13)
      {
        LOBYTE(v33) = a1;
        v14 = v13;
        v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v33, &type metadata for CardMode);
        v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v14, "setValue:forKey:", v15, v16);

        swift_unknownObjectRelease(v15, v17);
        return;
      }
      goto LABEL_8;
    }
    v32 = a1;
    v18 = sub_100004B18(&qword_1000C6D58);
    if (swift_dynamicCast(v31, &v32, &type metadata for CardMode, v18, 6))
    {
      sub_100053580(v31, &v33);
      v19 = v34;
      v20 = v35;
      sub_100006914(&v33, v34);
      v21 = sub_10007C384(v19, v20);
      v25 = v21;
      v26 = v22;
      v27 = *(void **)((char *)v2 + *(_QWORD *)(*v2 + 112));
      if (v27)
      {
        v28 = v27;
        isa = Data._bridgeToObjectiveC()().super.isa;
        v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v28, "setValue:forKey:", isa, v30);
        sub_10000ABA8(v25, v26);

      }
      else
      {
        sub_10000ABA8(v21, v22);
        swift_bridgeObjectRelease(v4);
      }
      sub_10000697C(&v33);
    }
    else
    {
      memset(v31, 0, sizeof(v31));
      swift_bridgeObjectRelease(v4);
      sub_100053428((uint64_t)v31);
      v23 = sub_10005365C(&qword_1000C7018, &qword_1000CC2C8);
      v24 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "ulog:message:", 60, v24);

    }
  }
}

void sub_100051000(void *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSString v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  Class isa;
  NSString v30;
  __int128 v31[3];
  _QWORD v32[2];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  id v36[2];

  v3 = v2;
  v36[0] = a1;
  v36[1] = a2;
  CurrentValueSubject.send(_:)(v36);
  v6 = *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 128) + 8);
  if (!v6)
    goto LABEL_9;
  *(_QWORD *)&v33 = a1;
  *((_QWORD *)&v33 + 1) = a2;
  swift_bridgeObjectRetain(v6);
  sub_100018044(a1);
  v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v33, &type metadata for MediaTransferStatus);
  v8 = objc_opt_self(NSNull);
  v9 = swift_dynamicCastObjCClass(v7, v8);
  swift_unknownObjectRelease(v7, v10);
  v11 = *v3;
  if (v9)
  {
    v12 = *(void **)((char *)v3 + *(_QWORD *)(v11 + 112));
    if (v12)
    {
      v13 = v12;
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      objc_msgSend(v13, "removeObjectForKey:", v14);

LABEL_8:
LABEL_9:
      sub_100013C94(a1);
      return;
    }
LABEL_10:
    sub_100013C94(a1);
    swift_bridgeObjectRelease(v6);
    return;
  }
  if ((*((_BYTE *)v3 + *(_QWORD *)(v11 + 120)) & 1) == 0)
  {
    v15 = *(void **)((char *)v3 + *(_QWORD *)(v11 + 112));
    if (v15)
    {
      *(_QWORD *)&v33 = a1;
      *((_QWORD *)&v33 + 1) = a2;
      sub_100018044(a1);
      v16 = v15;
      v17 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v33, &type metadata for MediaTransferStatus);
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      objc_msgSend(v16, "setValue:forKey:", v17, v14);

      swift_unknownObjectRelease(v17, v18);
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  v32[0] = a1;
  v32[1] = a2;
  sub_100018044(a1);
  v19 = sub_100004B18(&qword_1000C6D58);
  if (swift_dynamicCast(v31, v32, &type metadata for MediaTransferStatus, v19, 6))
  {
    sub_100053580(v31, &v33);
    v20 = v34;
    v21 = v35;
    sub_100006914(&v33, v34);
    v24 = sub_10007C384(v20, v21);
    v26 = v25;
    v27 = *(void **)((char *)v3 + *(_QWORD *)(*v3 + 112));
    if (v27)
    {
      v28 = v27;
      isa = Data._bridgeToObjectiveC()().super.isa;
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      objc_msgSend(v28, "setValue:forKey:", isa, v30);
      sub_10000ABA8(v24, v26);

      sub_100013C94(v36[0]);
    }
    else
    {
      sub_100013C94(v36[0]);
      sub_10000ABA8(v24, v26);
      swift_bridgeObjectRelease(v6);
    }
    sub_10000697C(&v33);
  }
  else
  {
    memset(v31, 0, sizeof(v31));
    swift_bridgeObjectRelease(v6);
    sub_100053428((uint64_t)v31);
    v22 = sub_10005365C(&qword_1000C6FC0, &qword_1000CC2D0);
    v23 = String._bridgeToObjectiveC()();
    objc_msgSend(v22, "ulog:message:", 60, v23);

    sub_100013C94(v36[0]);
  }
}

void sub_1000513CC(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSString v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  id v31;
  Class isa;
  NSString v33;
  __int128 v34[3];
  void *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  id v39;

  v2 = v1;
  v39 = a1;
  CurrentValueSubject.send(_:)(&v39);
  v4 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128) + 8);
  if (!v4)
  {

    return;
  }
  *(_QWORD *)&v36 = a1;
  v5 = a1;
  swift_bridgeObjectRetain(v4);
  v6 = sub_100004B18(&qword_1000C6D50);
  v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v36, v6);
  v8 = objc_opt_self(NSNull);
  v9 = swift_dynamicCastObjCClass(v7, v8);
  swift_unknownObjectRelease(v7, v10);
  v11 = *v2;
  if (v9)
  {
    v12 = *(void **)((char *)v2 + *(_QWORD *)(v11 + 112));
    if (v12)
    {
      v13 = v12;
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      objc_msgSend(v13, "removeObjectForKey:", v14);

      return;
    }
LABEL_9:
    swift_bridgeObjectRelease(v4);

    return;
  }
  if ((*((_BYTE *)v2 + *(_QWORD *)(v11 + 120)) & 1) == 0)
  {
    v15 = *(void **)((char *)v2 + *(_QWORD *)(v11 + 112));
    if (v15)
    {
      *(_QWORD *)&v36 = a1;
      v16 = v5;
      v17 = v15;
      v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v36, v6);
      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      objc_msgSend(v17, "setValue:forKey:", v18, v19);

      swift_unknownObjectRelease(v18, v20);
      return;
    }
    goto LABEL_9;
  }
  v35 = a1;
  v21 = v5;
  v22 = sub_100004B18(&qword_1000C6D58);
  if (swift_dynamicCast(v34, &v35, v6, v22, 6))
  {
    sub_100053580(v34, &v36);
    v23 = v37;
    v24 = v38;
    sub_100006914(&v36, v37);
    v27 = sub_10007C384(v23, v24);
    v29 = v28;
    v30 = *(void **)((char *)v2 + *(_QWORD *)(*v2 + 112));
    if (v30)
    {
      v31 = v30;
      isa = Data._bridgeToObjectiveC()().super.isa;
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      objc_msgSend(v31, "setValue:forKey:", isa, v33);
      sub_10000ABA8(v27, v29);

    }
    else
    {

      sub_10000ABA8(v27, v29);
      swift_bridgeObjectRelease(v4);
    }
    sub_10000697C(&v36);
  }
  else
  {
    memset(v34, 0, sizeof(v34));
    swift_bridgeObjectRelease(v4);
    sub_100053428((uint64_t)v34);
    v25 = sub_10005365C(&qword_1000C6D20, &qword_1000CC2D8);
    v26 = String._bridgeToObjectiveC()();
    objc_msgSend(v25, "ulog:message:", 60, v26);

  }
}

void sub_100051788(float a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  Class isa;
  NSString v30;
  __int128 v31[3];
  float v32;
  float v33[6];
  uint64_t v34;
  uint64_t v35;
  float v36;

  v2 = v1;
  v36 = a1;
  CurrentValueSubject.send(_:)(&v36);
  v4 = *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128) + 8);
  if (v4)
  {
    v33[0] = a1;
    swift_bridgeObjectRetain(v4);
    v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v33, &type metadata for Float);
    v6 = objc_opt_self(NSNull);
    v7 = swift_dynamicCastObjCClass(v5, v6);
    swift_unknownObjectRelease(v5, v8);
    v9 = *v2;
    if (v7)
    {
      v10 = *(void **)((char *)v2 + *(_QWORD *)(v9 + 112));
      if (v10)
      {
        v11 = v10;
        v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v11, "removeObjectForKey:", v12);

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease(v4);
      return;
    }
    if ((*((_BYTE *)v2 + *(_QWORD *)(v9 + 120)) & 1) == 0)
    {
      v13 = *(void **)((char *)v2 + *(_QWORD *)(v9 + 112));
      if (v13)
      {
        v33[0] = a1;
        v14 = v13;
        v15 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v33, &type metadata for Float);
        v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v14, "setValue:forKey:", v15, v16);

        swift_unknownObjectRelease(v15, v17);
        return;
      }
      goto LABEL_8;
    }
    v32 = a1;
    v18 = sub_100004B18(&qword_1000C6D58);
    if (swift_dynamicCast(v31, &v32, &type metadata for Float, v18, 6))
    {
      sub_100053580(v31, v33);
      v19 = v34;
      v20 = v35;
      sub_100006914(v33, v34);
      v21 = sub_10007C384(v19, v20);
      v25 = v21;
      v26 = v22;
      v27 = *(void **)((char *)v2 + *(_QWORD *)(*v2 + 112));
      if (v27)
      {
        v28 = v27;
        isa = Data._bridgeToObjectiveC()().super.isa;
        v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v4);
        objc_msgSend(v28, "setValue:forKey:", isa, v30);
        sub_10000ABA8(v25, v26);

      }
      else
      {
        sub_10000ABA8(v21, v22);
        swift_bridgeObjectRelease(v4);
      }
      sub_10000697C(v33);
    }
    else
    {
      memset(v31, 0, sizeof(v31));
      swift_bridgeObjectRelease(v4);
      sub_100053428((uint64_t)v31);
      v23 = sub_10005365C(&qword_1000C6FE0, &qword_1000CC2E0);
      v24 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "ulog:message:", 60, v24);

    }
  }
}

uint64_t *sub_100051B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge);
  if (v2)
  {
    v3 = *(uint64_t **)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge);
  }
  else
  {
    v4 = v0;
    v5 = sub_100051BAC();
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_daemonBridgeState);
    v7 = type metadata accessor for ClassicCardAlertDaemonBridgeClient();
    swift_allocObject(v7, 48, 7);
    swift_retain(v6);
    v3 = sub_10004C0F8(v5, v6);
    v8 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v8);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_100051BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel);
  }
  else
  {
    v4 = v0;
    v5 = sub_100004B18(&qword_1000CC2B0);
    v6 = sub_10000AAFC(&qword_1000CC2B8, &qword_1000CC2B0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v7 = Publisher.eraseToAnyPublisher()(v5, v6);
    v8 = type metadata accessor for ClassicCardAlertDaemonBridgeClientModel();
    v3 = swift_allocObject(v8, 24, 7);
    *(_QWORD *)(v3 + 16) = v7;
    v9 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v9);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

id sub_100051C80()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v1 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter);
  }
  else
  {
    v4 = v0;
    v5 = sub_100051D30();
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_cardPresenterState);
    v7 = objc_allocWithZone((Class)type metadata accessor for CardPresenter(0));
    swift_retain(v6);
    v8 = sub_100016EB4(v5, v6);
    swift_release(v5);
    swift_release(v6);
    v9 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v8;
    v3 = v8;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

uint64_t sub_100051D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];
  char v40[24];
  char v41[24];
  char v42[32];

  v1 = v0;
  v2 = _s8CardInfoOMa(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel);
  if (v6)
  {
    v7 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel);
  }
  else
  {
    v8 = v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_context;
    v9 = (int *)type metadata accessor for ClassicCardViewServiceContext(0);
    sub_100017FC4(v8 + v9[8], (uint64_t)v4, _s8CardInfoOMa);
    v10 = *(_QWORD *)(v8 + v9[9]);
    v35 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_host);
    v36 = v10;
    v11 = v8 + v9[7];
    v12 = *(void **)v11;
    v33 = *(_QWORD *)(v11 + 8);
    v34 = (uint64_t)v12;
    v13 = *(char **)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_rootViewController);
    swift_unknownObjectRetain(v35);
    sub_100018044(v12);
    v32 = sub_10000A6B4();
    v31 = v14;
    v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment__isActive);
    v15 = v29;
    v16 = *(_QWORD **)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_daemonBridgeState);
    swift_beginAccess(v16 + 2, v42, 0, 0);
    v17 = v16[2];
    swift_beginAccess(v16 + 3, v41, 0, 0);
    v18 = v16[3];
    swift_beginAccess(v16 + 4, v40, 0, 0);
    v19 = v16[4];
    swift_beginAccess(v16 + 5, v39, 0, 0);
    v20 = v16[5];
    swift_beginAccess(v16 + 6, v38, 0, 0);
    v21 = v16[6];
    v37 = *(_QWORD *)&v13[OBJC_IVAR___MainViewController_homeGestureEventSubject];
    v30 = v13;
    swift_retain(v15);
    swift_retain(v17);
    swift_retain(v18);
    swift_retain(v19);
    swift_retain(v20);
    swift_retain(v21);
    v22 = sub_100004B18(&qword_1000C6688);
    v23 = sub_10000AAFC(&qword_1000CC298, &qword_1000C6688, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v24 = Publisher.eraseToAnyPublisher()(v22, v23);
    v25 = type metadata accessor for CardPresenterModel(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v7 = sub_10000C194((uint64_t)v4, v36, v35, v34, v33, v32, v31, (uint64_t)v30, v29, v17, v18, v19, v20, v21, v24);
    v26 = *(_QWORD *)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v7;
    swift_retain(v7);
    swift_release(v26);
    v6 = 0;
  }
  swift_retain(v6);
  return v7;
}

uint64_t sub_100051FEC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  int *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t KeyPath;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;

  v6 = v5;
  v85 = a3;
  v86 = a5;
  v10 = *(_QWORD *)v5;
  v77 = sub_100004B18(&qword_1000CC2F8);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v74 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004B18(&qword_1000CC300);
  v78 = *(_QWORD *)(v12 - 8);
  v79 = v12;
  __chkstk_darwin(v12);
  v76 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v14);
  v82 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000C5DA8 != -1)
    swift_once(&qword_1000C5DA8, sub_100074070);
  v16 = (void *)qword_1000DF618;
  *(_QWORD *)(v5 + 16) = qword_1000DF618;
  *(_QWORD *)(v5 + 56) = &_swiftEmptySetSingleton;
  v81 = v5 + 56;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  UUID.init()(v16);
  v17 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment__isActive;
  v18 = sub_100004B18(&qword_1000CC230);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(v5 + v17) = sub_100013028(1, 0, 0, 0, 0, 0);
  v19 = (uint64_t *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler);
  *v19 = 0;
  v19[1] = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel) = 0;
  v20 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_cardPresenterState;
  v21 = type metadata accessor for CardPresenterState();
  v22 = swift_allocObject(v21, 32, 7);
  v23 = sub_100004B18(&qword_1000CC2B0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)(v22 + 16) = PassthroughSubject.init()();
  v80 = sub_100004B18(&qword_1000CBF58);
  swift_allocObject(v80, *(unsigned int *)(v80 + 48), *(unsigned __int16 *)(v80 + 52));
  *(_QWORD *)(v22 + 24) = PassthroughSubject.init()();
  *(_QWORD *)(v5 + v20) = v22;
  v87 = 0;
  v88 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v24._countAndFlagsBits = 0x6F63203A74696E49;
  v24._object = (void *)0xEE003D747865746ELL;
  String.append(_:)(v24);
  v25 = (int *)type metadata accessor for ClassicCardViewServiceContext(0);
  _print_unlocked<A, B>(_:_:)(a1, &v87, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v26 = v88;
  sub_10003DC3C(v87, v88, 0, v10, (uint64_t)&off_1000B70C0);
  swift_bridgeObjectRelease(v26);
  sub_100017FC4(a1, v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_context, type metadata accessor for ClassicCardViewServiceContext);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_host) = a2;
  v28 = v85;
  v27 = v86;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_rootViewController) = v85;
  v29 = *v19;
  v30 = v19[1];
  *v19 = a4;
  v19[1] = v27;
  v84 = a2;
  swift_unknownObjectRetain(a2);
  v31 = v28;
  v83 = a4;
  sub_100007A80(a4, v27);
  sub_100007A90(v29, v30);
  v32 = (uint64_t)v82;
  sub_100017FC4(a1, (uint64_t)v82, type metadata accessor for ActivityDisplayContext);
  v33 = a1 + v25[7];
  v34 = *(void **)v33;
  v35 = *(_QWORD *)(v33 + 8);
  v36 = v25[5];
  v37 = *(void **)(a1 + v25[6]);
  v85 = (void *)a1;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + v36);
  v38 = type metadata accessor for ClassicCardAlertDaemonBridgeClientState();
  swift_allocObject(v38, 64, 7);
  sub_100018044(v34);
  v39 = v37;
  v40 = sub_10004CF2C(v32, (int)v25, v34, v35, v37, 0.0);

  sub_100013C94(v34);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_daemonBridgeState) = v40;
  v41 = v40[7];
  v87 = v41;
  v42 = swift_allocObject(&unk_1000B7110, 24, 7);
  swift_weakInit(v42 + 16, v6);
  v43 = sub_10000AAFC(&qword_1000CC308, &qword_1000CBF58, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain(v41);
  v44 = v80;
  v45 = Publisher<>.sink(receiveValue:)(sub_100053790, v42, v80, v43);
  swift_release(v42);
  swift_release(v87);
  v46 = v81;
  swift_beginAccess(v81, &v87, 33, 0);
  AnyCancellable.store(in:)(v46);
  swift_endAccess(&v87);
  swift_release(v45);
  v82 = v31;
  v47 = *(_QWORD *)&v31[OBJC_IVAR___MainViewController_backlightLuminanceBecameReducedSubject];
  v48 = v46;
  v87 = v47;
  v49 = swift_allocObject(&unk_1000B7110, 24, 7);
  swift_weakInit(v49 + 16, v6);
  v50 = swift_allocObject(&unk_1000B7188, 32, 7);
  *(_QWORD *)(v50 + 16) = sub_1000537B0;
  *(_QWORD *)(v50 + 24) = v49;
  swift_retain(v47);
  v51 = sub_100004B18(&qword_1000C6688);
  v52 = sub_10000AAFC(&qword_1000CC298, &qword_1000C6688, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v53 = Publisher<>.sink(receiveValue:)(sub_1000537DC, v50, v51, v52);
  swift_release(v50);
  swift_release(v87);
  swift_beginAccess(v48, &v87, 33, 0);
  AnyCancellable.store(in:)(v48);
  swift_endAccess(&v87);
  swift_release(v53);
  v87 = *(_QWORD *)(*(_QWORD *)(v6 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_cardPresenterState)
                  + 24);
  v54 = v87;
  v55 = swift_allocObject(&unk_1000B7110, 24, 7);
  swift_weakInit(v55 + 16, v6);
  swift_retain(v54);
  v56 = Publisher<>.sink(receiveValue:)(sub_1000537E4, v55, v44, v43);
  swift_release(v55);
  swift_release(v87);
  swift_beginAccess(v48, &v87, 33, 0);
  AnyCancellable.store(in:)(v48);
  swift_endAccess(&v87);
  swift_release(v56);
  v57 = sub_100051B00();
  sub_10004C250();
  swift_release(v57);
  v58 = sub_100051C80();
  sub_10000CB2C();

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v59 = *(_QWORD *)(qword_1000DF570 + 880);
  swift_retain(v59);
  sub_100079CAC(0);
  swift_release(v59);
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  v61 = v84;
  v60 = (uint64_t)v85;
  v62 = v86;
  v63 = v83;
  if (qword_1000DF658)
  {
    KeyPath = swift_getKeyPath(&unk_100086598);
    v65 = v74;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 5);
    swift_release(KeyPath);
    v66 = sub_10000AAFC(&qword_1000CC310, &qword_1000CC2F8, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    v68 = v76;
    v67 = v77;
    Publisher.filter(_:)(sub_1000059A0, 0, v77, v66);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v67);
    v69 = sub_10000AAFC(qword_1000CC318, &qword_1000CC300, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v70 = v79;
    v71 = Publisher<>.sink(receiveValue:)(sub_10005290C, 0, v79, v69);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v68, v70);
    swift_beginAccess(v48, &v87, 33, 0);
    AnyCancellable.store(in:)(v48);
    swift_endAccess(&v87);
    swift_release(v71);
  }
  sub_100007A90(v63, v62);
  swift_unknownObjectRelease(v61, v72);

  sub_100018008(v60, type metadata accessor for ClassicCardViewServiceContext);
  return v6;
}

uint64_t sub_100052830(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_100052F50(0xD00000000000001CLL, (void *)0x8000000100094680);
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_10005289C(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  v4 = *a1;
  v5 = a1[1];
  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    a3(v4, v5);
    return swift_release(v8);
  }
  return result;
}

void sub_10005290C()
{
  uint64_t v0;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v0 = *(_QWORD *)(qword_1000DF570 + 880);
  swift_retain(v0);
  sub_100079CAC(0);
  swift_release(v0);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x8000000100086560, "PCViewService/ClassicCardAlertEnvironment.swift", 47, 2, 117, 0);
  __break(1u);
}

uint64_t sub_1000529B0()
{
  uint64_t v0;
  id v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_10004FDEC(type metadata accessor for ClassicCardAlertEnvironment, &qword_1000CC218);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  sub_100052C78();
  sub_100007A90(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_100007A90(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  v3 = v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment__isActive));
  sub_100018008(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_context, type metadata accessor for ClassicCardViewServiceContext);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_host), v5);

  sub_100007A90(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler), *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler + 8));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_daemonBridgeState));

  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_cardPresenterState));
  return v0;
}

uint64_t sub_100052B2C()
{
  uint64_t v0;

  sub_1000529B0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100052B50()
{
  return type metadata accessor for ClassicCardAlertEnvironment(0);
}

uint64_t type metadata accessor for ClassicCardAlertEnvironment(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CC008;
  if (!qword_1000CC008)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClassicCardAlertEnvironment);
  return result;
}

uint64_t sub_100052B94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[16];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = &unk_1000864A0;
  v5[2] = &unk_1000864A0;
  v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = type metadata accessor for ClassicCardViewServiceContext(319);
    if (v4 <= 0x3F)
    {
      v5[6] = *(_QWORD *)(result - 8) + 64;
      v5[7] = &unk_1000864B8;
      v5[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[9] = &unk_1000864A0;
      v5[10] = &unk_1000864D0;
      v5[11] = &unk_1000864D0;
      v5[12] = (char *)&value witness table for Builtin.NativeObject + 64;
      v5[13] = &unk_1000864D0;
      v5[14] = &unk_1000864D0;
      v5[15] = (char *)&value witness table for Builtin.NativeObject + 64;
      return swift_updateClassMetadata2(a1, 256, 16, v5, a1 + 80);
    }
  }
  return result;
}

void sub_100052C78()
{
  id v0;
  NSString v1;
  uint64_t *v2;
  id v3;
  NSString v4;
  id v5;
  id v6;
  NSString v7;

  v0 = sub_10004FDEC(type metadata accessor for ClassicCardAlertEnvironment, &qword_1000CC218);
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "ulog:message:", 40, v1);

  v2 = sub_100051B00();
  v3 = sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for ClassicCardAlertDaemonBridgeClient, &qword_1000CC290);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "ulog:message:", 40, v4);

  sub_10007A07C();
  swift_release(v2);
  v5 = sub_100051C80();
  v6 = sub_10004FDEC(type metadata accessor for CardPresenter, &qword_1000CC288);
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

}

id sub_100052DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  id v10;
  NSString v11;

  v3 = v2;
  String.append(_:)(*(Swift::String *)&a1);
  v4 = sub_10004FDEC(type metadata accessor for ClassicCardAlertEnvironment, &qword_1000CC218);
  swift_bridgeObjectRetain(0x8000000100094600);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100094600);
  objc_msgSend(v4, "ulog:message:", 40, v5, 0xD00000000000001ALL);
  swift_bridgeObjectRelease(0x8000000100094600);

  v6 = *(void (**)(uint64_t))(v3 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler);
  if (v6)
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler + 8);
    v8 = swift_retain(v7);
    v6(v8);
    return (id)sub_100007A90((uint64_t)v6, v7);
  }
  else
  {
    v10 = sub_10004FDEC(type metadata accessor for ClassicCardAlertEnvironment, &qword_1000CC218);
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "ulog:message:", 60, v11);

    return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_host), "invalidate");
  }
}

uint64_t sub_100052F50(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  unint64_t v13;
  id v14;
  NSString v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  void **aBlock;
  unint64_t v30;
  uint64_t (*v31)();
  void *v32;
  void (*v33)();
  _QWORD *v34;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = (void **)0xD00000000000001DLL;
  v30 = 0x80000001000945E0;
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  v13 = v30;
  v14 = sub_10004FDEC(type metadata accessor for ClassicCardAlertEnvironment, &qword_1000CC218);
  swift_bridgeObjectRetain(v13);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v14, "ulog:message:", 40, v15);
  swift_bridgeObjectRelease(v13);

  v16 = sub_10001A940();
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_1000B7110, 24, 7);
  swift_weakInit(v18 + 16, v3);
  v19 = (_QWORD *)swift_allocObject(&unk_1000B7138, 40, 7);
  v19[2] = v18;
  v19[3] = a1;
  v19[4] = a2;
  v33 = sub_100053624;
  v34 = v19;
  aBlock = _NSConcreteStackBlock;
  v30 = 1107296256;
  v31 = sub_100030320;
  v32 = &unk_1000B7150;
  v20 = _Block_copy(&aBlock);
  v21 = v34;
  swift_bridgeObjectRetain(a2);
  v22 = swift_release(v21);
  static DispatchQoS.unspecified.getter(v22);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v23 = sub_100003E48((unint64_t *)&qword_1000C6450, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100004B18(&qword_1000C6458);
  v25 = sub_10000AAFC((unint64_t *)&qword_1000C6460, &qword_1000C6458, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v24, v25, v6, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v27);
}

void sub_100053214(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  id v8;
  _BYTE v9[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = Strong;
    v8 = sub_100051C80();
    swift_release(v7);
    sub_1000117CC(a2, a3, 0, 0);

  }
}

uint64_t sub_100053298()
{
  return sub_1000532B8();
}

uint64_t sub_1000532B8()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v10 = 2112829;
  v11 = 0xE300000000000000;
  v9 = type metadata accessor for ClassicCardAlertEnvironment(0);
  v0 = sub_100004B18(&qword_1000CC218);
  v1._countAndFlagsBits = String.init<A>(describing:)(&v9, v0);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0x3D64690A3D3D20;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100003E48(&qword_1000CC220, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  return v10;
}

uint64_t sub_1000533A0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double sub_1000533E8(char a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment__isActive);
  swift_retain(v3);
  sub_10005012C(a1);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_100053428(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000CC228);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100053468()
{
  return sub_1000051B0((uint64_t)&type metadata for HomePodMovieManager, &qword_1000C6118);
}

id sub_10005347C()
{
  return sub_1000051B0((uint64_t)&type metadata for CAPackageImage, &qword_1000C8B38);
}

id sub_100053490()
{
  return sub_1000051B0((uint64_t)&type metadata for HomeAccessoryView, &qword_1000C8B18);
}

id sub_1000534A4()
{
  return sub_1000051B0((uint64_t)&type metadata for SchematicHandoffAnimationView, &qword_1000C8B28);
}

id sub_1000534B8()
{
  return sub_1000051B0((uint64_t)&type metadata for HandoffFeatureEducationViewHeader, &qword_1000C8B20);
}

id sub_1000534CC()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for PCActivityAssetType, &qword_1000C8B10);
}

id sub_1000534E0()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for MainViewController, &qword_1000CC2A0);
}

id sub_1000534F4()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for ClassicCardAlertDaemonBridgeClient, &qword_1000CC290);
}

id sub_100053508()
{
  return sub_10004FDEC(type metadata accessor for CardPresenter, &qword_1000CC288);
}

id sub_10005351C()
{
  return sub_10005365C(&qword_1000C6D78, &qword_1000CC2A8);
}

id sub_100053530()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for HomeAccessoryViewHandle, &qword_1000CC278);
}

id sub_100053544()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClient, &qword_1000CC258);
}

id sub_100053558()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for NearbySharingInteractionViewPresenter, &qword_1000CC248);
}

id sub_10005356C()
{
  return sub_10004FDEC(type metadata accessor for NearbySharingInteractionAlertEnvironment, &qword_1000CC240);
}

_OWORD *sub_100053580(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

id sub_100053598()
{
  return sub_10004FDEC(type metadata accessor for ProximityCardHeaderViewModel, &qword_1000CC260);
}

id sub_1000535AC()
{
  return sub_10005365C(&qword_1000CC268, &qword_1000CC270);
}

id sub_1000535C0()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for ArtworkAnimation, &qword_1000CC280);
}

uint64_t sub_1000535D4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000535F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100053624()
{
  uint64_t v0;

  sub_100053214(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100053630(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100053640(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_100053648()
{
  return sub_10004FDEC((uint64_t (*)(_QWORD))type metadata accessor for AppDelegate, &qword_1000CC2F0);
}

id sub_10005365C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t v22;

  v22 = sub_100004B18(a1);
  v3 = sub_100004B18(a2);
  v4 = String.init<A>(describing:)(&v22, v3);
  v6 = v5;
  v7 = sub_10003E348(60, 0xE100000000000000, v4, v5);
  if ((v8 & 1) == 0)
  {
    v9 = String.subscript.getter(15, v7, v4, v6);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    swift_bridgeObjectRelease(v6);
    static String._fromSubstring(_:)(v9, v11, v13, v15);
    v6 = v16;
    swift_bridgeObjectRelease(v15);
  }
  v17 = objc_allocWithZone((Class)CULogHandle);
  v18 = String._bridgeToObjectiveC()();
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v20 = objc_msgSend(v17, "initWithSubsystem:category:", v18, v19);

  return v20;
}

uint64_t sub_100053790(uint64_t *a1)
{
  uint64_t v1;

  return sub_10005289C(a1, v1, (void (*)(uint64_t, uint64_t))sub_100052F50);
}

uint64_t sub_1000537B0()
{
  uint64_t v0;

  return sub_100052830(v0);
}

uint64_t sub_1000537B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000537DC(uint64_t a1)
{
  uint64_t v1;

  return sub_10000E9EC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000537E4(uint64_t *a1)
{
  uint64_t v1;

  return sub_10005289C(a1, v1, (void (*)(uint64_t, uint64_t))sub_100052DE4);
}

const char *sub_100053804()
{
  return "forceKillPCViewService";
}

uint64_t sub_100053818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[3];

  v7[0] = (char *)&value witness table for () + 64;
  result = type metadata accessor for Loader.State(319, *(_QWORD *)(a1 + 80), a3, a4);
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    v7[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_initClassMetadata2(a1, 0, 3, v7, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_1000538A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = v4;
  v6 = *(_QWORD *)(*v4 + 80);
  v7 = type metadata accessor for Loader(0, v6, a3, a4);
  sub_10003DDAC(0x74696E696544, (void *)0xE600000000000000, 0, v7, (uint64_t)&off_1000B7310);
  swift_release(v4[3]);
  v8 = (char *)v5 + *(_QWORD *)(*v5 + 96);
  v11 = type metadata accessor for Loader.State(0, v6, v9, v10);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 + 104)));
  return v5;
}

uint64_t sub_100053958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1000538A4(a1, a2, a3, a4);
  return swift_deallocClassInstance(v4, *(unsigned int *)(*(_QWORD *)v4 + 48), *(unsigned __int16 *)(*(_QWORD *)v4 + 52));
}

uint64_t type metadata accessor for Loader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Loader);
}

uint64_t type metadata accessor for Loader.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Loader.State);
}

uint64_t sub_100053994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_10005399C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

uint64_t *sub_1000539F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain(v17);
  }
  return a1;
}

uint64_t sub_100053B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_100053BE8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_100053CD8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_100053E28(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_100053F18(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_100054068(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 1)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  v12 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_29;
  v13 = 8 * v7;
  if (v7 <= 3)
  {
    v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v7);
      if (!v14)
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_29;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_29:
      if (v6)
      {
        v18 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v18 >= 3)
          return v18 - 2;
        else
          return 0;
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_29;
LABEL_20:
  v16 = (v14 - 1) << v13;
  if (v7 > 3)
    v16 = 0;
  if ((_DWORD)v7)
  {
    if (v7 <= 3)
      v17 = v7;
    else
      v17 = 4;
    __asm { BR              X12 }
  }
  return v6 + v16 + 1;
}

void sub_1000541FC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 1)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  v13 = a3 >= v8;
  v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      v17 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v17))
      {
        v15 = &dword_100000004;
      }
      else if (v17 >= 0x100)
      {
        v15 = 2;
      }
      else
      {
        v15 = v17 > 1;
      }
    }
    else
    {
      v15 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v15 = 0;
  }
  if (v8 < a2)
  {
    v16 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v18 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v18;
          *((_BYTE *)a1 + 2) = BYTE2(v18);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v18;
        }
        else
        {
          *(_BYTE *)a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_100054418(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_10005442C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

uint64_t sub_100054440()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t result;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v0 = *(_QWORD *)(qword_1000DF570 + 592);
  swift_retain(v0);
  v1 = sub_1000215CC();
  swift_release(v0);
  v2 = *(_QWORD *)(qword_1000DF570 + 576);
  swift_retain(v2);
  v3 = sub_1000215CC();
  swift_release(v2);
  v4 = *(_QWORD *)(qword_1000DF570 + 560);
  swift_retain(v4);
  v5 = sub_1000215CC();
  swift_release(v4);
  v6 = *(_QWORD *)(qword_1000DF570 + 608);
  swift_retain(v6);
  v7 = sub_1000215CC();
  result = swift_release(v6);
  *(double *)&xmmword_1000DF5B8 = v1;
  *((double *)&xmmword_1000DF5B8 + 1) = v3;
  qword_1000DF5C8 = *(_QWORD *)&v5;
  unk_1000DF5D0 = *(_QWORD *)&v7;
  return result;
}

uint64_t sub_100054524()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t result;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v0 = *(_QWORD *)(qword_1000DF570 + 600);
  swift_retain(v0);
  v1 = sub_1000215CC();
  swift_release(v0);
  v2 = *(_QWORD *)(qword_1000DF570 + 584);
  swift_retain(v2);
  v3 = sub_1000215CC();
  swift_release(v2);
  v4 = *(_QWORD *)(qword_1000DF570 + 568);
  swift_retain(v4);
  v5 = sub_1000215CC();
  swift_release(v4);
  v6 = *(_QWORD *)(qword_1000DF570 + 608);
  swift_retain(v6);
  v7 = sub_1000215CC();
  result = swift_release(v6);
  *(double *)&xmmword_1000DF5D8 = v1;
  *((double *)&xmmword_1000DF5D8 + 1) = v3;
  qword_1000DF5E8 = *(_QWORD *)&v5;
  unk_1000DF5F0 = *(_QWORD *)&v7;
  return result;
}

uint64_t sub_100054608()
{
  uint64_t v0;
  id v1;
  NSString v2;

  v1 = sub_1000535C0();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for ArtworkAnimation()
{
  return objc_opt_self(_TtC13PCViewService16ArtworkAnimation);
}

void sub_1000546B4()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  __int128 v4;
  Swift::String v5;
  __int128 v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  id v27;
  Class isa;
  Class v29;
  id v30;
  id v31;
  double v32;
  _OWORD v33[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v1 = v0;
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v33[0] = v34;
  v2._countAndFlagsBits = 0x2865726170657270;
  v2._object = (void *)0xE900000000000029;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x662E666C6573203ALL;
  v3._object = (void *)0xEC0000003D6D6F72;
  String.append(_:)(v3);
  v4 = *(_OWORD *)(v0 + 72);
  v34 = *(_OWORD *)(v0 + 56);
  v35 = v4;
  _print_unlocked<A, B>(_:_:)(&v34, v33, &type metadata for ArtworkAnimationState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._countAndFlagsBits = 0x742E666C6573202CLL;
  v5._object = (void *)0xEA00000000003D6FLL;
  String.append(_:)(v5);
  v6 = *(_OWORD *)(v0 + 104);
  v34 = *(_OWORD *)(v0 + 88);
  v35 = v6;
  _print_unlocked<A, B>(_:_:)(&v34, v33, &type metadata for ArtworkAnimationState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = *((_QWORD *)&v33[0] + 1);
  v8 = sub_1000535C0();
  swift_bridgeObjectRetain(v7);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  objc_msgSend(v8, "ulog:message:", 40, v9);
  swift_bridgeObjectRelease(v7);

  v10 = objc_msgSend(*(id *)(v1 + 16), "scrollView");
  objc_msgSend(v10, "setClipsToBounds:", 0);

  v11 = *(void **)(v1 + 32);
  if (v11)
  {
    v12 = (void *)objc_opt_self(UIColor);
    v13 = v11;
    v14 = objc_msgSend(v12, "clearColor");
    objc_msgSend(v13, "setBackgroundColor:", v14);

  }
  v15 = objc_msgSend(*(id *)(v1 + 16), "view", v33[0]);
  if (v15)
  {
    v16 = v15;
    v17 = *(id *)(v1 + 24);
    v18 = sub_1000759CC((uint64_t)v17);

    v19 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 120) = v18;
    swift_bridgeObjectRelease(v19);
    v20 = objc_msgSend(*(id *)(v1 + 24), "layer");
    v21 = sub_100004B18(&qword_1000C80E8);
    v22 = swift_allocObject(v21, 64, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100082750;
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterGaussianBlur);
    v24 = v23;
    v25 = objc_allocWithZone((Class)CAFilter);
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    v27 = objc_msgSend(v25, "initWithType:", v26);

    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v27, "setValue:forKey:", isa, kCAFilterInputRadius);

    *(_QWORD *)(v22 + 56) = sub_10000AA28(0, (unint64_t *)&qword_1000C80F0, CAFilter_ptr);
    *(_QWORD *)(v22 + 32) = v27;
    v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    objc_msgSend(v20, "setFilters:", v29);

    v30 = objc_msgSend(*(id *)(v1 + 24), "layer");
    sub_100055358(&v34, *(CGFloat *)(v1 + 72), *(double *)(v1 + 64));
    v33[0] = v34;
    v33[1] = v35;
    v33[2] = v36;
    v33[3] = v37;
    v33[4] = v38;
    v33[5] = v39;
    v33[6] = v40;
    v33[7] = v41;
    objc_msgSend(v30, "setTransform:", v33);

    v31 = objc_msgSend(*(id *)(v1 + 24), "layer");
    v32 = *(double *)(v1 + 80);
    *(float *)&v32 = v32;
    objc_msgSend(v31, "setOpacity:", v32);

  }
  else
  {
    __break(1u);
  }
}

void sub_100054AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  id v10;
  NSString v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  __int128 v21;
  id v22;
  Class isa;
  Class v24;
  id v25;
  NSString v26;
  id v27;
  Class v28;
  Class v29;
  id v30;
  NSString v31;
  id v32;
  Class v33;
  Class v34;
  id v35;
  NSString v36;
  __int128 v37[8];
  __int128 aBlock;
  uint64_t (*v39)();
  void *v40;
  void (*v41)();
  _QWORD *v42;

  v3 = v2;
  *(_QWORD *)&aBlock = 0;
  *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  v6._countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x8000000100094750;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x642E666C6573203ALL;
  v7._object = (void *)0xED00003D79616C65;
  String.append(_:)(v7);
  Double.write<A>(to:)(&aBlock, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v2 + 40));
  v8._object = (void *)0x8000000100094770;
  v8._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  Double.write<A>(to:)(&aBlock, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v2 + 48));
  v9 = *((_QWORD *)&aBlock + 1);
  v10 = sub_1000535C0();
  swift_bridgeObjectRetain(v9);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v10, "ulog:message:", 40, v11);
  swift_bridgeObjectRelease(v9);

  v12 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v12, "begin");
  v13 = (_QWORD *)swift_allocObject(&unk_1000B7410, 40, 7);
  v13[2] = v3;
  v13[3] = a1;
  v13[4] = a2;
  v41 = sub_1000555C4;
  v42 = v13;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v39 = sub_100030320;
  v40 = &unk_1000B7428;
  v14 = _Block_copy(&aBlock);
  v15 = v42;
  swift_retain(v3);
  sub_100007A80(a1, a2);
  swift_release(v15);
  objc_msgSend(v12, "setCompletionBlock:", v14);
  _Block_release(v14);
  if (qword_1000C5D98 != -1)
    swift_once(&qword_1000C5D98, sub_100055538);
  objc_msgSend(v12, "setAnimationTimingFunction:", qword_1000CC420);
  *(_QWORD *)&aBlock = 0x2E737265746C6966;
  *((_QWORD *)&aBlock + 1) = 0xE800000000000000;
  v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterGaussianBlur);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterInputRadius);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21 = aBlock;
  sub_10000AA28(0, &qword_1000CC5E8, CABasicAnimation_ptr);
  v22 = sub_10005502C(*(double *)(v3 + 48), *(double *)(v3 + 40), v21, *((uint64_t *)&v21 + 1));
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v22, "setFromValue:", isa);

  v24 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v22, "setToValue:", v24);

  v25 = objc_msgSend(*(id *)(v3 + 24), "layer");
  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v25, "addAnimation:forKey:", v22, v26);

  v27 = sub_10005502C(*(double *)(v3 + 48), *(double *)(v3 + 40), 0x726F66736E617274, 0xE90000000000006DLL);
  sub_100055358(v37, *(CGFloat *)(v3 + 72), *(double *)(v3 + 64));
  v28 = CATransform3D._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setFromValue:", v28);

  sub_100055358(&aBlock, *(CGFloat *)(v3 + 104), *(double *)(v3 + 96));
  v29 = CATransform3D._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setToValue:", v29);

  v30 = objc_msgSend(*(id *)(v3 + 24), "layer");
  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "addAnimation:forKey:", v27, v31);

  v32 = sub_10005502C(*(double *)(v3 + 48), *(double *)(v3 + 40), 0x7974696361706FLL, 0xE700000000000000);
  v33 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v32, "setFromValue:", v33);

  v34 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v32, "setToValue:", v34);

  v35 = objc_msgSend(*(id *)(v3 + 24), "layer");
  v36 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "addAnimation:forKey:", v32, v36);

  objc_msgSend(v12, "commit");
}

id sub_10005502C(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *ObjCClassFromMetadata;
  NSString v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v4);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v10 = objc_msgSend(ObjCClassFromMetadata, "animationWithKeyPath:", v9);

  v11 = v10;
  objc_msgSend(v11, "setDuration:", a1);
  objc_msgSend(v11, "setFillMode:", kCAFillModeForwards);
  objc_msgSend(v11, "setRemovedOnCompletion:", 0);
  v12 = (void *)objc_opt_self(CAMediaTimingFunction);
  v13 = v11;
  v14 = objc_msgSend(v12, "functionWithName:", kCAMediaTimingFunctionEaseOut);
  objc_msgSend(v13, "setTimingFunction:", v14);

  objc_msgSend(v13, "setBeginTime:", CACurrentMediaTime() + a2);
  return v13;
}

void sub_100055174()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  id v18;
  double v19;
  _OWORD v20[8];

  v1 = v0;
  v2 = sub_1000535C0();
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "ulog:message:", 40, v3);

  objc_msgSend(*(id *)(v1 + 16), "externalAnimationsEnded");
  v4 = *(void **)(v1 + 32);
  if (v4)
  {
    v5 = (void *)objc_opt_self(UIColor);
    v6 = v4;
    v7 = objc_msgSend(v5, "systemBackgroundColor");
    objc_msgSend(v6, "setBackgroundColor:", v7);

  }
  v8 = objc_msgSend(*(id *)(v1 + 16), "view");
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)(v1 + 120);
    v11 = *(id *)(v1 + 24);
    swift_bridgeObjectRetain(v10);
    sub_100075D1C((uint64_t)v11, v10);

    swift_bridgeObjectRelease(v10);
    v12 = objc_msgSend(*(id *)(v1 + 24), "layer");
    objc_msgSend(v12, "setFilters:", 0);

    v13 = objc_msgSend(*(id *)(v1 + 24), "layer");
    v14 = *(_OWORD *)&CATransform3DIdentity.m13;
    v20[0] = *(_OWORD *)&CATransform3DIdentity.m11;
    v20[1] = v14;
    v15 = *(_OWORD *)&CATransform3DIdentity.m23;
    v20[2] = *(_OWORD *)&CATransform3DIdentity.m21;
    v20[3] = v15;
    v16 = *(_OWORD *)&CATransform3DIdentity.m33;
    v20[4] = *(_OWORD *)&CATransform3DIdentity.m31;
    v20[5] = v16;
    v17 = *(_OWORD *)&CATransform3DIdentity.m43;
    v20[6] = *(_OWORD *)&CATransform3DIdentity.m41;
    v20[7] = v17;
    objc_msgSend(v13, "setTransform:", v20);

    v18 = objc_msgSend(*(id *)(v1 + 24), "layer");
    LODWORD(v19) = 1.0;
    objc_msgSend(v18, "setOpacity:", v19);

  }
  else
  {
    __break(1u);
  }
}

CGFloat sub_100055358@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  CGFloat m43;
  CGFloat m44;
  id v9;
  double v10;
  Swift::String v11;
  void *object;
  CGFloat m12;
  id v14;
  NSString v15;
  double v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CGFloat result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  CATransform3D v40;
  CATransform3D b;
  CATransform3D a;

  v4 = v3;
  CATransform3DMakeScale(&a, a2, a2, 1.0);
  v38 = *(_OWORD *)&a.m13;
  v39 = *(_OWORD *)&a.m11;
  v36 = *(_OWORD *)&a.m23;
  v37 = *(_OWORD *)&a.m21;
  v34 = *(_OWORD *)&a.m33;
  v35 = *(_OWORD *)&a.m31;
  v33 = *(_OWORD *)&a.m41;
  m43 = a.m43;
  m44 = a.m44;
  v9 = objc_msgSend(*(id *)(v3 + 24), "center");
  a.m11 = 1.28513257e-27;
  a.m12 = -5.98008217e197;
  v11._countAndFlagsBits = Double.description.getter(v9, v10 * a3);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  m12 = a.m12;
  v14 = sub_1000535C0();
  swift_bridgeObjectRetain(*(_QWORD *)&m12);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(*(_QWORD *)&m12);
  objc_msgSend(v14, "ulog:message:", 40, v15);
  swift_bridgeObjectRelease(*(_QWORD *)&m12);

  objc_msgSend(*(id *)(v4 + 24), "center");
  CATransform3DMakeTranslation(&a, 0.0, v16 * a3, 0.0);
  v17 = *(_OWORD *)&a.m11;
  v18 = *(_OWORD *)&a.m13;
  v19 = *(_OWORD *)&a.m21;
  v20 = *(_OWORD *)&a.m23;
  v21 = *(_OWORD *)&a.m31;
  v22 = *(_OWORD *)&a.m33;
  v23 = *(_OWORD *)&a.m41;
  v24 = *(_OWORD *)&a.m43;
  *(_OWORD *)&a.m11 = v39;
  *(_OWORD *)&a.m13 = v38;
  *(_OWORD *)&a.m21 = v37;
  *(_OWORD *)&a.m23 = v36;
  *(_OWORD *)&a.m31 = v35;
  *(_OWORD *)&a.m33 = v34;
  *(_OWORD *)&a.m41 = v33;
  a.m43 = m43;
  a.m44 = m44;
  *(_OWORD *)&b.m11 = v17;
  *(_OWORD *)&b.m13 = v18;
  *(_OWORD *)&b.m21 = v19;
  *(_OWORD *)&b.m23 = v20;
  *(_OWORD *)&b.m31 = v21;
  *(_OWORD *)&b.m33 = v22;
  *(_OWORD *)&b.m41 = v23;
  *(_OWORD *)&b.m43 = v24;
  CATransform3DConcat(&v40, &a, &b);
  result = v40.m11;
  v26 = *(_OWORD *)&v40.m13;
  v27 = *(_OWORD *)&v40.m21;
  v28 = *(_OWORD *)&v40.m23;
  v29 = *(_OWORD *)&v40.m31;
  v30 = *(_OWORD *)&v40.m33;
  v31 = *(_OWORD *)&v40.m41;
  v32 = *(_OWORD *)&v40.m43;
  *a1 = *(_OWORD *)&v40.m11;
  a1[1] = v26;
  a1[2] = v27;
  a1[3] = v28;
  a1[4] = v29;
  a1[5] = v30;
  a1[6] = v31;
  a1[7] = v32;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkAnimationState()
{
  return &type metadata for ArtworkAnimationState;
}

id sub_100055538()
{
  id v0;
  double v1;
  double v2;
  double v3;
  double v4;
  id result;

  v0 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v1) = 1046227190;
  LODWORD(v2) = 1058810102;
  LODWORD(v3) = 1052099215;
  LODWORD(v4) = 1.0;
  result = objc_msgSend(v0, "initWithControlPoints::::", v1, v2, v3, v4);
  qword_1000CC420 = (uint64_t)result;
  return result;
}

uint64_t sub_100055590()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000555C4()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 24);
  sub_100055174();
  if (v1)
    v1();
}

uint64_t sub_100055600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100055610(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t destroy for SchematicHomePodView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_release(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematicHomePodView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 28))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematicHomePodView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchematicHomePodView()
{
  return &type metadata for SchematicHomePodView;
}

uint64_t sub_1000557AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009A370, 1);
}

uint64_t sub_1000557BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, float a5@<S1>)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  double v35;
  double v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  char v43;
  uint64_t v44;
  char v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];
  __int128 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;

  v59 = a2;
  v9 = (int *)type metadata accessor for CAImage(0);
  v10 = __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  v14 = (char *)&v56 - v13;
  v15 = sub_100004B18(&qword_1000C8048);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v56 - v19;
  v58 = a3;
  v21 = 0x80000001000947D0;
  v22 = 0xD000000000000011;
  switch(a1)
  {
    case 1:
    case 6:
    case 8:
      break;
    case 3:
      v21 = 0xEC00000065756C62;
      goto LABEL_7;
    case 4:
      v23 = 0x776F6C6C6579;
      goto LABEL_6;
    case 5:
      v23 = 0x65676E61726FLL;
LABEL_6:
      v21 = v23 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
LABEL_7:
      v22 = 0x5F646F70656D6F68;
      break;
    default:
      v22 = 0x5F646F70656D6F68;
      v21 = 0xED00006574696877;
      break;
  }
  *v12 = swift_getKeyPath(&unk_100086758);
  v24 = sub_100004B18(&qword_1000C7180);
  swift_storeEnumTagMultiPayload(v12, v24, 0);
  v25 = (char *)v12 + v9[5];
  v60[0] = 0uLL;
  v26 = sub_100004B18(&qword_1000C7C70);
  State.init(wrappedValue:)(v60, v26);
  v27 = v62;
  *(_OWORD *)v25 = v61;
  *((_QWORD *)v25 + 2) = v27;
  v28 = (_QWORD *)((char *)v12 + v9[7]);
  *v28 = 0;
  v28[1] = 0;
  v29 = (_QWORD *)((char *)v12 + v9[6]);
  *v29 = v22;
  v29[1] = v21;
  v30 = sub_1000198B4((uint64_t)v12, (uint64_t)v14);
  v31 = static Alignment.center.getter(v30);
  _FrameLayout.init(width:height:alignment:)(v60, *(_QWORD *)&a4, 0, *(_QWORD *)&a4, 0, v31, v32);
  sub_10001986C((uint64_t)v14, (uint64_t)v18);
  v33 = &v18[*(int *)(v15 + 36)];
  v34 = v60[1];
  *(_OWORD *)v33 = v60[0];
  *((_OWORD *)v33 + 1) = v34;
  *((_OWORD *)v33 + 2) = v60[2];
  sub_10002CE94((uint64_t)v14);
  sub_100055CB8((uint64_t)v18, (uint64_t)v20);
  v35 = a4 / 176.0;
  v36 = a4 / 176.0 * 40.0;
  if (v36 > v35 * 50.0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (a5 > 0.0)
  {
    if (a5 >= 1.0)
      v36 = v35 * 50.0;
    else
      v36 = v35 * 50.0 * a5 + v36 * (float)(1.0 - a5);
  }
  KeyPath = swift_getKeyPath(&unk_100086788);
  v38 = swift_retain(v59);
  v39 = static Alignment.center.getter(v38);
  _FrameLayout.init(width:height:alignment:)(&v61, *(_QWORD *)&v36, 0, *(_QWORD *)&v36, 0, v39, v40);
  v41 = v35 * 10.0;
  v42 = v35 * 20.0;
  if (v35 * 10.0 > v35 * 20.0)
  {
LABEL_21:
    __break(1u);
    JUMPOUT(0x100055C24);
  }
  v57 = v61;
  v43 = BYTE8(v61);
  v44 = v62;
  v45 = v63;
  v46 = a5;
  v47 = v64;
  v48 = v65;
  if (a5 > 0.0)
  {
    v49 = (uint64_t)v18;
    if (a5 >= 1.0)
      v41 = v42;
    else
      v41 = v42 * v46 + v41 * (float)(1.0 - a5);
  }
  else
  {
    v49 = (uint64_t)v18;
  }
  v50 = static Animation.linear(duration:)(1.0);
  v51 = (uint64_t)v20;
  sub_100055D08((uint64_t)v20, v49);
  v52 = v58;
  sub_100055D08(v49, v58);
  v53 = v52 + *(int *)(sub_100004B18(&qword_1000CC5F8) + 48);
  v54 = v59;
  *(_QWORD *)v53 = KeyPath;
  *(_QWORD *)(v53 + 8) = v54;
  *(_QWORD *)(v53 + 16) = v57;
  *(_BYTE *)(v53 + 24) = v43;
  *(_QWORD *)(v53 + 32) = v44;
  *(_BYTE *)(v53 + 40) = v45;
  *(_QWORD *)(v53 + 48) = v47;
  *(_QWORD *)(v53 + 56) = v48;
  *(double *)(v53 + 64) = v46;
  *(double *)(v53 + 72) = v46;
  *(double *)(v53 + 80) = v41;
  *(_BYTE *)(v53 + 88) = 0;
  *(_QWORD *)(v53 + 96) = v50;
  *(float *)(v53 + 104) = a5;
  swift_retain(KeyPath);
  swift_retain(v54);
  swift_retain(v50);
  sub_100055D50(v51);
  swift_release(v50);
  swift_release(v54);
  swift_release(KeyPath);
  return sub_100055D50(v49);
}

uint64_t sub_100055C48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(double *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(float *)(v2 + 24);
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v8;
  v9 = sub_100004B18(&qword_1000CC5F0);
  return sub_1000557BC(v5, v6, (uint64_t)a2 + *(int *)(v9 + 44), v4, v7);
}

uint64_t sub_100055CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C8048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100004B18(&qword_1000C8048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055D50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000C8048);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100055D94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CC600;
  if (!qword_1000CC600)
  {
    v1 = sub_100005F48(&qword_1000CC608);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CC600);
  }
  return result;
}

uint64_t *sub_100055DE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain(v5);
    if (v11(v8, 1, v9))
    {
      v12 = sub_100004B18(&qword_1000C85A0);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t sub_100055ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_100055F54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain(v4);
  if (v10(v7, 1, v8))
  {
    v11 = sub_100004B18(&qword_1000C85A0);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *sub_100056020(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100004B18(&qword_1000C85A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

_OWORD *sub_100056148(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_100004B18(&qword_1000C85A0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *sub_100056204(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100004B18(&qword_1000C85A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_10005631C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100056328);
}

uint64_t sub_10005632C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056338);
}

uint64_t type metadata accessor for ActivityDisplayContext.TimerDisplayContext(uint64_t a1)
{
  return sub_10000565C(a1, (uint64_t *)&unk_1000CC668, (uint64_t)&nominal type descriptor for ActivityDisplayContext.TimerDisplayContext);
}

void sub_100056350(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100086828;
  sub_1000563C4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_1000563C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000CC678)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000CC678);
  }
}

uint64_t *sub_100056418(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11))
    {
      v14 = sub_100004B18(&qword_1000C85A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain(v19);
  }
  return v4;
}

uint64_t sub_100056538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_1000565BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100004B18(&qword_1000C85A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 24);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  return a1;
}

_QWORD *sub_1000566B0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100004B18(&qword_1000C85A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 24);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

_OWORD *sub_10005680C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100004B18(&qword_1000C85A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1000568E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100004B18(&qword_1000C85A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = *(int *)(a3 + 24);
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t sub_100056A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100056A2C);
}

uint64_t sub_100056A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100004B18(&qword_1000C85A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_100056ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056AC8);
}

uint64_t sub_100056ACC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_100004B18(&qword_1000C85A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ActivityDisplayContext.CallDisplayContext(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000CC700, (uint64_t)&nominal type descriptor for ActivityDisplayContext.CallDisplayContext);
}

void sub_100056B58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100086828;
  sub_1000563C4(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100086828;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t *sub_100056BCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for Date(0);
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain(v12);
      if (v18(v15, 1, v16))
      {
        v19 = sub_100004B18(&qword_1000C85A0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      v21 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v22 = *(int *)(v21 + 20);
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = type metadata accessor for Date(0);
      v26 = *(_QWORD *)(v25 - 8);
      v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain(v20);
      if (v27(v24, 1, v25))
      {
        v28 = sub_100004B18(&qword_1000C85A0);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      v29 = *(int *)(v21 + 24);
      v30 = (uint64_t *)((char *)a1 + v29);
      v31 = (uint64_t *)((char *)a2 + v29);
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      swift_bridgeObjectRetain(v32);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100056E0C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v5 = a1 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v6 = type metadata accessor for Date(0);
      v7 = *(_QWORD *)(v6 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      break;
    case 1:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      v8 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v9 = a1 + *(int *)(v8 + 20);
      v10 = type metadata accessor for Date(0);
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      v4 = *(_QWORD *)(a1 + *(int *)(v8 + 24) + 8);
      return swift_bridgeObjectRelease(v4);
    case 0:
      v4 = *(_QWORD *)(a1 + 8);
      return swift_bridgeObjectRelease(v4);
  }
  return result;
}

_QWORD *sub_100056F2C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = type metadata accessor for Date(0);
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain(v11);
      if (v17(v14, 1, v15))
      {
        v18 = sub_100004B18(&qword_1000C85A0);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_14;
    case 1:
      v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      v20 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v21 = *(int *)(v20 + 20);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for Date(0);
      v25 = *(_QWORD *)(v24 - 8);
      v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_bridgeObjectRetain(v19);
      if (v26(v23, 1, v24))
      {
        v27 = sub_100004B18(&qword_1000C85A0);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      v28 = *(int *)(v20 + 24);
      v29 = (_QWORD *)((char *)a1 + v28);
      v30 = (_QWORD *)((char *)a2 + v28);
      v31 = v30[1];
      *v29 = *v30;
      v29[1] = v31;
      swift_bridgeObjectRetain(v31);
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_14;
    case 0:
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_14:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *sub_10005713C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  if (a1 != a2)
  {
    sub_100018008((uint64_t)a1, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *a1 = *a2;
        v11 = a2[1];
        a1[1] = v11;
        v12 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        v13 = (char *)a1 + v12;
        v14 = (char *)a2 + v12;
        v15 = type metadata accessor for Date(0);
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
        swift_bridgeObjectRetain(v11);
        if (v17(v14, 1, v15))
        {
          v18 = sub_100004B18(&qword_1000C85A0);
          memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_15;
      case 1:
        *a1 = *a2;
        v19 = a2[1];
        a1[1] = v19;
        v20 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
        v21 = *(int *)(v20 + 20);
        v22 = (char *)a1 + v21;
        v23 = (char *)a2 + v21;
        v24 = type metadata accessor for Date(0);
        v25 = *(_QWORD *)(v24 - 8);
        v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
        swift_bridgeObjectRetain(v19);
        if (v26(v23, 1, v24))
        {
          v27 = sub_100004B18(&qword_1000C85A0);
          memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        }
        v28 = *(int *)(v20 + 24);
        v29 = (_QWORD *)((char *)a1 + v28);
        v30 = (_QWORD *)((char *)a2 + v28);
        *v29 = *v30;
        v31 = v30[1];
        v29[1] = v31;
        swift_bridgeObjectRetain(v31);
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_15;
      case 0:
        *a1 = *a2;
        v7 = a2[1];
        a1[1] = v7;
        swift_bridgeObjectRetain(v7);
        v8 = a1;
        v9 = a3;
        v10 = 0;
LABEL_15:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for ActivityDisplayContext.DynamicTextScheme(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000CC7B0, (uint64_t)&nominal type descriptor for ActivityDisplayContext.DynamicTextScheme);
}

_OWORD *sub_100057398(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    v14 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Date(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_100004B18(&qword_1000C85A0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = a1;
    v21 = a3;
    v22 = 2;
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v7 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v8 = *(int *)(v7 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100004B18(&qword_1000C85A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
    v20 = a1;
    v21 = a3;
    v22 = 1;
LABEL_12:
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_100057564(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    sub_100018008((uint64_t)a1, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      v14 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for Date(0);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = sub_100004B18(&qword_1000C85A0);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v20 = a1;
      v21 = a3;
      v22 = 2;
      goto LABEL_13;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v7 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v8 = *(int *)(v7 + 20);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Date(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_100004B18(&qword_1000C85A0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
      v20 = a1;
      v21 = a3;
      v22 = 1;
LABEL_13:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100057748(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_100086878;
  result = type metadata accessor for ActivityDisplayContext.CallDisplayContext(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000577D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *__dst;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
    return v4;
  }
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  v7 = a2[4];
  v8 = (void *)a2[5];
  v9 = *(int *)(a3 + 32);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)((char *)a2 + v9);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain(v7);
  v13 = v8;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
  if (EnumCaseMultiPayload == 2)
  {
    v69 = v12;
    v21 = v11[1];
    *v10 = *v11;
    v10[1] = v21;
    v22 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v23 = (char *)v10 + v22;
    v24 = (char *)v11 + v22;
    v25 = type metadata accessor for Date(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain(v21);
    if (v27(v24, 1, v25))
    {
      v28 = sub_100004B18(&qword_1000C85A0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v12 = v69;
    v16 = v10;
    v17 = v69;
    v18 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v70 = v12;
    v29 = v11[1];
    *v10 = *v11;
    v10[1] = v29;
    v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v31 = *(int *)(v30 + 20);
    v67 = v30;
    __dst = (char *)v10 + v31;
    v32 = (char *)v11 + v31;
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_bridgeObjectRetain(v29);
    if (v35(v32, 1, v33))
    {
      v36 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
    }
    v37 = *(int *)(v67 + 24);
    v38 = (_QWORD *)((char *)v10 + v37);
    v39 = (_QWORD *)((char *)v11 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain(v40);
    v16 = v10;
    v12 = v70;
    v17 = v70;
    v18 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      goto LABEL_18;
    }
    v15 = v11[1];
    *v10 = *v11;
    v10[1] = v15;
    swift_bridgeObjectRetain(v15);
    v16 = v10;
    v17 = v12;
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v17, v18);
LABEL_18:
  v41 = *(int *)(a3 + 36);
  v42 = (_QWORD *)((char *)v4 + v41);
  v43 = (uint64_t *)((char *)a2 + v41);
  v44 = swift_getEnumCaseMultiPayload(v43, v12);
  if (v44 == 2)
  {
    v46 = v43[1];
    *v42 = *v43;
    v42[1] = v46;
    v47 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v48 = (char *)v42 + v47;
    v49 = (char *)v43 + v47;
    v50 = type metadata accessor for Date(0);
    v51 = *(_QWORD *)(v50 - 8);
    v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain(v46);
    if (v52(v49, 1, v50))
    {
      v53 = sub_100004B18(&qword_1000C85A0);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    swift_storeEnumTagMultiPayload(v42, v12, 2);
  }
  else if (v44 == 1)
  {
    v71 = v12;
    v54 = v43[1];
    *v42 = *v43;
    v42[1] = v54;
    v55 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v56 = *(int *)(v55 + 20);
    v57 = (char *)v42 + v56;
    v58 = (char *)v43 + v56;
    v59 = type metadata accessor for Date(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
    swift_bridgeObjectRetain(v54);
    if (v61(v58, 1, v59))
    {
      v62 = sub_100004B18(&qword_1000C85A0);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v57, v58, v59);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
    }
    v63 = *(int *)(v55 + 24);
    v64 = (_QWORD *)((char *)v42 + v63);
    v65 = (_QWORD *)((char *)v43 + v63);
    v66 = v65[1];
    *v64 = *v65;
    v64[1] = v66;
    swift_bridgeObjectRetain(v66);
    swift_storeEnumTagMultiPayload(v42, v71, 1);
  }
  else if (v44)
  {
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v45 = v43[1];
    *v42 = *v43;
    v42[1] = v45;
    swift_bridgeObjectRetain(v45);
    swift_storeEnumTagMultiPayload(v42, v12, 0);
  }
  return v4;
}

uint64_t sub_100057C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));

  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v5);
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
    v8 = v4 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v4 + 8));
      v11 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v12 = v4 + *(int *)(v11 + 20);
      v13 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      v7 = *(_QWORD *)(v4 + *(int *)(v11 + 24) + 8);
    }
    else
    {
      if (EnumCaseMultiPayload)
        goto LABEL_11;
      v7 = *(_QWORD *)(v4 + 8);
    }
    swift_bridgeObjectRelease(v7);
  }
LABEL_11:
  v15 = a1 + *(int *)(a2 + 36);
  result = swift_getEnumCaseMultiPayload(v15, v5);
  switch((_DWORD)result)
  {
    case 2:
      swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
      v18 = v15 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v19 = type metadata accessor for Date(0);
      v20 = *(_QWORD *)(v19 - 8);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
      if (!(_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      break;
    case 1:
      swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
      v21 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v22 = v15 + *(int *)(v21 + 20);
      v23 = type metadata accessor for Date(0);
      v24 = *(_QWORD *)(v23 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
      v17 = *(_QWORD *)(v15 + *(int *)(v21 + 24) + 8);
      return swift_bridgeObjectRelease(v17);
    case 0:
      v17 = *(_QWORD *)(v15 + 8);
      return swift_bridgeObjectRelease(v17);
  }
  return result;
}

uint64_t sub_100057EA0(uint64_t a1, uint64_t a2, int *a3)
{
  int *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  int EnumCaseMultiPayload;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v67;
  char *__dst;
  int *v69;
  int *v70;
  char *v71;

  v3 = a3;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a3[8];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain(v6);
  v12 = v7;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
  if (EnumCaseMultiPayload == 2)
  {
    v69 = v3;
    v18 = v10[1];
    *v9 = *v10;
    v9[1] = v18;
    v19 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v20 = (char *)v9 + v19;
    v21 = (char *)v10 + v19;
    v22 = type metadata accessor for Date(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain(v18);
    if (v24(v21, 1, v22))
    {
      v25 = sub_100004B18(&qword_1000C85A0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    swift_storeEnumTagMultiPayload(v9, v11, 2);
    v3 = v69;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v70 = v3;
      v26 = v10[1];
      *v9 = *v10;
      v9[1] = v26;
      v27 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v28 = *(int *)(v27 + 20);
      v67 = v27;
      __dst = (char *)v9 + v28;
      v29 = (char *)v10 + v28;
      v30 = type metadata accessor for Date(0);
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
      swift_bridgeObjectRetain(v26);
      if (v32(v29, 1, v30))
      {
        v33 = sub_100004B18(&qword_1000C85A0);
        memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
      }
      v3 = v70;
      v34 = *(int *)(v67 + 24);
      v35 = (_QWORD *)((char *)v9 + v34);
      v36 = (_QWORD *)((char *)v10 + v34);
      v37 = v36[1];
      *v35 = *v36;
      v35[1] = v37;
      swift_bridgeObjectRetain(v37);
      v15 = v9;
      v16 = v11;
      v17 = 1;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
        goto LABEL_15;
      }
      v14 = v10[1];
      *v9 = *v10;
      v9[1] = v14;
      swift_bridgeObjectRetain(v14);
      v15 = v9;
      v16 = v11;
      v17 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v16, v17);
  }
LABEL_15:
  v38 = v3[9];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (_QWORD *)(a2 + v38);
  v41 = swift_getEnumCaseMultiPayload(v40, v11);
  switch(v41)
  {
    case 2:
      v46 = v40[1];
      *v39 = *v40;
      v39[1] = v46;
      v47 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v48 = (char *)v39 + v47;
      v49 = (char *)v40 + v47;
      v50 = type metadata accessor for Date(0);
      v51 = *(_QWORD *)(v50 - 8);
      v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
      swift_bridgeObjectRetain(v46);
      if (v52(v49, 1, v50))
      {
        v53 = sub_100004B18(&qword_1000C85A0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v48, v49, v50);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      v43 = v39;
      v44 = v11;
      v45 = 2;
      goto LABEL_28;
    case 1:
      v54 = v40[1];
      *v39 = *v40;
      v39[1] = v54;
      v55 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v56 = *(int *)(v55 + 20);
      v71 = (char *)v39 + v56;
      v57 = (char *)v40 + v56;
      v58 = type metadata accessor for Date(0);
      v59 = *(_QWORD *)(v58 - 8);
      v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
      swift_bridgeObjectRetain(v54);
      if (v60(v57, 1, v58))
      {
        v61 = sub_100004B18(&qword_1000C85A0);
        memcpy(v71, v57, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v71, v57, v58);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v71, 0, 1, v58);
      }
      v62 = *(int *)(v55 + 24);
      v63 = (_QWORD *)((char *)v39 + v62);
      v64 = (_QWORD *)((char *)v40 + v62);
      v65 = v64[1];
      *v63 = *v64;
      v63[1] = v65;
      swift_bridgeObjectRetain(v65);
      v43 = v39;
      v44 = v11;
      v45 = 1;
      goto LABEL_28;
    case 0:
      v42 = v40[1];
      *v39 = *v40;
      v39[1] = v42;
      swift_bridgeObjectRetain(v42);
      v43 = v39;
      v44 = v11;
      v45 = 0;
LABEL_28:
      swift_storeEnumTagMultiPayload(v43, v44, v45);
      return a1;
  }
  memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  return a1;
}

uint64_t sub_1000582F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  char *__dst;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  v7 = a2[4];
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(void **)(a1 + 40);
  v10 = (void *)a2[5];
  *(_QWORD *)(a1 + 40) = v10;
  v11 = v10;

  if ((uint64_t *)a1 == a2)
    return a1;
  v12 = *(int *)(a3 + 32);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  sub_100018008(a1 + v12, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v15 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v73 = v15;
      *v13 = *v14;
      v21 = v14[1];
      v13[1] = v21;
      v22 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v23 = (char *)v13 + v22;
      v24 = (char *)v14 + v22;
      v25 = type metadata accessor for Date(0);
      v26 = *(_QWORD *)(v25 - 8);
      v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain(v21);
      if (v27(v24, 1, v25))
      {
        v28 = sub_100004B18(&qword_1000C85A0);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      v15 = v73;
      v18 = v13;
      v19 = v73;
      v20 = 2;
      goto LABEL_15;
    case 1:
      v74 = v15;
      *v13 = *v14;
      v29 = v14[1];
      v13[1] = v29;
      v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v31 = *(int *)(v30 + 20);
      __dst = (char *)v13 + v31;
      v72 = v30;
      v32 = (char *)v14 + v31;
      v33 = type metadata accessor for Date(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain(v29);
      if (v35(v32, 1, v33))
      {
        v36 = sub_100004B18(&qword_1000C85A0);
        memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      }
      v37 = *(int *)(v72 + 24);
      v38 = (_QWORD *)((char *)v13 + v37);
      v39 = (_QWORD *)((char *)v14 + v37);
      *v38 = *v39;
      v40 = v39[1];
      v38[1] = v40;
      swift_bridgeObjectRetain(v40);
      v18 = v13;
      v15 = v74;
      v19 = v74;
      v20 = 1;
      goto LABEL_15;
    case 0:
      *v13 = *v14;
      v17 = v14[1];
      v13[1] = v17;
      swift_bridgeObjectRetain(v17);
      v18 = v13;
      v19 = v15;
      v20 = 0;
LABEL_15:
      swift_storeEnumTagMultiPayload(v18, v19, v20);
      goto LABEL_16;
  }
  memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
LABEL_16:
  v41 = *(int *)(a3 + 36);
  v42 = (_QWORD *)(a1 + v41);
  v43 = (uint64_t *)((char *)a2 + v41);
  sub_100018008(a1 + v41, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v44 = swift_getEnumCaseMultiPayload(v43, v15);
  switch(v44)
  {
    case 2:
      *v42 = *v43;
      v49 = v43[1];
      v42[1] = v49;
      v50 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v51 = (char *)v42 + v50;
      v52 = (char *)v43 + v50;
      v53 = type metadata accessor for Date(0);
      v54 = *(_QWORD *)(v53 - 8);
      v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
      swift_bridgeObjectRetain(v49);
      if (v55(v52, 1, v53))
      {
        v56 = sub_100004B18(&qword_1000C85A0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
      v46 = v42;
      v47 = v15;
      v48 = 2;
      goto LABEL_29;
    case 1:
      v75 = v15;
      *v42 = *v43;
      v57 = v43[1];
      v42[1] = v57;
      v58 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v59 = *(int *)(v58 + 20);
      v60 = (char *)v42 + v59;
      v61 = (char *)v43 + v59;
      v62 = type metadata accessor for Date(0);
      v63 = *(_QWORD *)(v62 - 8);
      v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
      swift_bridgeObjectRetain(v57);
      if (v64(v61, 1, v62))
      {
        v65 = sub_100004B18(&qword_1000C85A0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      }
      v66 = *(int *)(v58 + 24);
      v67 = (_QWORD *)((char *)v42 + v66);
      v68 = (_QWORD *)((char *)v43 + v66);
      *v67 = *v68;
      v69 = v68[1];
      v67[1] = v69;
      swift_bridgeObjectRetain(v69);
      v46 = v42;
      v47 = v75;
      v48 = 1;
      goto LABEL_29;
    case 0:
      *v42 = *v43;
      v45 = v43[1];
      v42[1] = v45;
      swift_bridgeObjectRetain(v45);
      v46 = v42;
      v47 = v15;
      v48 = 0;
LABEL_29:
      swift_storeEnumTagMultiPayload(v46, v47, v48);
      return a1;
  }
  memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  return a1;
}

uint64_t sub_1000587CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *__dst;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 32);
  v7 = (_OWORD *)(a1 + v6);
  v8 = (_OWORD *)(a2 + v6);
  v9 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  if (EnumCaseMultiPayload == 2)
  {
    *v7 = *v8;
    v17 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v18 = (char *)v7 + v17;
    v19 = (char *)v8 + v17;
    v20 = type metadata accessor for Date(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = sub_100004B18(&qword_1000C85A0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v23 = v7;
    v24 = v9;
    v25 = 2;
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      goto LABEL_13;
    }
    *v7 = *v8;
    v11 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v12 = *(int *)(v11 + 20);
    __dst = (char *)v7 + v12;
    v13 = (char *)v8 + v12;
    v14 = type metadata accessor for Date(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(__dst, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    *(_OWORD *)((char *)v7 + *(int *)(v11 + 24)) = *(_OWORD *)((char *)v8 + *(int *)(v11 + 24));
    v23 = v7;
    v24 = v9;
    v25 = 1;
  }
  swift_storeEnumTagMultiPayload(v23, v24, v25);
LABEL_13:
  v26 = *(int *)(a3 + 36);
  v27 = (_OWORD *)(a1 + v26);
  v28 = (_OWORD *)(a2 + v26);
  v29 = swift_getEnumCaseMultiPayload(v28, v9);
  if (v29 == 2)
  {
    *v27 = *v28;
    v37 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v38 = (char *)v27 + v37;
    v39 = (char *)v28 + v37;
    v40 = type metadata accessor for Date(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = sub_100004B18(&qword_1000C85A0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v43 = v27;
    v44 = v9;
    v45 = 2;
    goto LABEL_24;
  }
  if (v29 == 1)
  {
    *v27 = *v28;
    v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v31 = *(int *)(v30 + 20);
    v32 = (char *)v27 + v31;
    v33 = (char *)v28 + v31;
    v34 = type metadata accessor for Date(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_100004B18(&qword_1000C85A0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    *(_OWORD *)((char *)v27 + *(int *)(v30 + 24)) = *(_OWORD *)((char *)v28 + *(int *)(v30 + 24));
    v43 = v27;
    v44 = v9;
    v45 = 1;
LABEL_24:
    swift_storeEnumTagMultiPayload(v43, v44, v45);
    return a1;
  }
  memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  return a1;
}

uint64_t sub_100058B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *__dst;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  if (a1 == a2)
    return a1;
  v8 = *(int *)(a3 + 32);
  v9 = (_OWORD *)(a1 + v8);
  v10 = (_OWORD *)(a2 + v8);
  sub_100018008(a1 + v8, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v11);
  if (EnumCaseMultiPayload == 2)
  {
    *v9 = *v10;
    v19 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v20 = (char *)v9 + v19;
    v21 = (char *)v10 + v19;
    v22 = type metadata accessor for Date(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_100004B18(&qword_1000C85A0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v25 = v9;
    v26 = v11;
    v27 = 2;
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *v9 = *v10;
    v13 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v14 = *(int *)(v13 + 20);
    __dst = (char *)v9 + v14;
    v15 = (char *)v10 + v14;
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    *(_OWORD *)((char *)v9 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)v10 + *(int *)(v13 + 24));
    v25 = v9;
    v26 = v11;
    v27 = 1;
LABEL_13:
    swift_storeEnumTagMultiPayload(v25, v26, v27);
    goto LABEL_14;
  }
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
LABEL_14:
  v28 = *(int *)(a3 + 36);
  v29 = (_OWORD *)(a1 + v28);
  v30 = (_OWORD *)(a2 + v28);
  sub_100018008(a1 + v28, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v31 = swift_getEnumCaseMultiPayload(v30, v11);
  if (v31 == 2)
  {
    *v29 = *v30;
    v39 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v40 = (char *)v29 + v39;
    v41 = (char *)v30 + v39;
    v42 = type metadata accessor for Date(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = sub_100004B18(&qword_1000C85A0);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = v29;
    v46 = v11;
    v47 = 2;
    goto LABEL_25;
  }
  if (v31 == 1)
  {
    *v29 = *v30;
    v32 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v33 = *(int *)(v32 + 20);
    v34 = (char *)v29 + v33;
    v35 = (char *)v30 + v33;
    v36 = type metadata accessor for Date(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      v38 = sub_100004B18(&qword_1000C85A0);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
    *(_OWORD *)((char *)v29 + *(int *)(v32 + 24)) = *(_OWORD *)((char *)v30 + *(int *)(v32 + 24));
    v45 = v29;
    v46 = v11;
    v47 = 1;
LABEL_25:
    swift_storeEnumTagMultiPayload(v45, v46, v47);
    return a1;
  }
  memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  return a1;
}

uint64_t sub_100058F74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100058F80);
}

uint64_t sub_100058F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100058FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059008);
}

uint64_t sub_100059008(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ActivityDisplayContext(uint64_t a1)
{
  return sub_10000565C(a1, qword_1000CC840, (uint64_t)&nominal type descriptor for ActivityDisplayContext);
}

uint64_t sub_100059090(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];
  uint64_t v5;
  uint64_t v6;

  v4[0] = "\t";
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_100086878;
  v4[3] = &unk_1000868D0;
  result = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100059124(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t DynamicType;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE v44[16];
  _OWORD v45[3];
  _QWORD v46[2];
  _QWORD v47[4];
  Swift::String v48;
  __int128 v49;
  __int128 v50;
  Swift::String v51;

  v2 = type metadata accessor for Mirror(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v44[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48._countAndFlagsBits = type metadata accessor for ActivityDisplayContext(0);
  v6 = sub_100004B18(&qword_1000C8B08);
  countAndFlagsBits = String.init<A>(describing:)(&v48, v6);
  v9 = v8;
  v51._countAndFlagsBits = countAndFlagsBits;
  v51._object = v8;
  v10 = a1[3];
  v11 = sub_100006914(a1, v10);
  DynamicType = swift_getDynamicType(v11, v10, 1);
  if (swift_isClassType())
    v13 = DynamicType;
  else
    v13 = 0;
  if (v13)
  {
    v14 = a1[3];
    v15 = sub_100006914(a1, v14);
    v16 = *(_QWORD *)(v14 - 8);
    __chkstk_darwin(v15);
    v18 = &v44[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v16 + 16))(v18);
    v19 = _bridgeAnythingToObjectiveC<A>(_:)(v18, v14);
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v14);
    swift_unknownObjectRelease(v19, v20);
    v48._countAndFlagsBits = 0;
    v48._object = (void *)0xE000000000000000;
    v21._countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    *(_QWORD *)&v45[0] = v19;
    _print_unlocked<A, B>(_:_:)(v45, &v48, &type metadata for UnsafeMutableRawPointer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    object = v48._object;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(object);
    v9 = v51._object;
    countAndFlagsBits = v51._countAndFlagsBits;
  }
  v48._countAndFlagsBits = 60;
  v48._object = (void *)0xE100000000000000;
  v23._countAndFlagsBits = countAndFlagsBits;
  v23._object = v9;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v9);
  v24 = v48._object;
  swift_bridgeObjectRetain(v48._object);
  v25._countAndFlagsBits = 62;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v51 = v48;
  sub_10000ABEC((uint64_t)a1, (uint64_t)&v48);
  v26 = Mirror.init(reflecting:)(&v48);
  v27 = Mirror.children.getter(v26);
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v28 = swift_retain(v27);
  v29 = dispatch thunk of _AnySequenceBox._makeIterator()(v28);
  v30 = swift_release(v27);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v48, v30);
  if (*((_QWORD *)&v50 + 1))
  {
    v31 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v45[0] = v48;
      v45[1] = v49;
      v45[2] = v50;
      sub_100059540((uint64_t *)v45);
      v33 = v32;
      sub_100017AB4((uint64_t)v45, &qword_1000CC9C8);
      if (v33)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
          v31 = sub_10005CFC0(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
        v36 = *((_QWORD *)v31 + 2);
        v35 = *((_QWORD *)v31 + 3);
        if (v36 >= v35 >> 1)
          v31 = sub_10005CFC0((char *)(v35 > 1), v36 + 1, 1, v31);
        *((_QWORD *)v31 + 2) = v36 + 1;
        *(_QWORD *)&v31[8 * v36 + 32] = v33;
      }
      dispatch thunk of _AnyIteratorBoxBase.next()(&v48, v34);
    }
    while (*((_QWORD *)&v50 + 1));
  }
  else
  {
    v31 = (char *)_swiftEmptyArrayStorage;
  }
  swift_release(v27);
  swift_release(v29);
  v37 = v51._object;
  v48 = v51;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v31;
  *(_QWORD *)&v50 = 0;
  v38 = sub_10004D498(2128928, 0xE300000000000000, 0, 1);
  v40 = v39;
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v37);
  v47[2] = v38;
  v47[3] = v40;
  v47[0] = 10;
  v47[1] = 0xE100000000000000;
  v46[0] = 2105354;
  v46[1] = 0xE300000000000000;
  v41 = sub_10005CD40();
  v42 = sub_10005CD84();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)(v45, v47, v46, 0x7FFFFFFFFFFFFFFFLL, &type metadata for String, &type metadata for String, &type metadata for String, v41, v42, v42, &protocol witness table for Character);
  swift_bridgeObjectRelease(v40);
  return *(_QWORD *)&v45[0];
}

double sub_100059540(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *object;
  Swift::String v11;
  Swift::Bool v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  _BYTE v29[40];
  _QWORD v30[5];
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _QWORD v40[4];

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t)(a1 + 2);
  *(_QWORD *)&v39 = *a1;
  *((_QWORD *)&v39 + 1) = v3;
  sub_10000ABEC((uint64_t)(a1 + 2), (uint64_t)v40);
  if (v3)
  {
    *(_QWORD *)&v33 = v2;
    *((_QWORD *)&v33 + 1) = v3;
    v30[0] = 0xD000000000000012;
    v30[1] = 0x80000001000947F0;
    v5 = sub_10005CD84();
    Collection<>.trimmingPrefix<A>(_:)(v36, v30, &type metadata for String, &type metadata for String, v5, &protocol witness table for String, &protocol witness table for Character);
    sub_10000697C(v40);
    v6 = v37;
    v7 = static String._fromSubstring(_:)(v36[0], v36[1], v36[2], v37);
    v9 = v8;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    sub_10000697C(v40);
    v9 = 0xE100000000000000;
    v7 = 63;
  }
  object = String.lowercased()()._object;
  v11._countAndFlagsBits = 0x736B736174;
  v11._object = (void *)0xE500000000000000;
  v12 = String.hasSuffix(_:)(v11);
  swift_bridgeObjectRelease(object);
  if (v12)
  {
    v39 = *(_OWORD *)a1;
    sub_10000ABEC(v4, (uint64_t)v40);
    v13 = sub_100004B18(&qword_1000CC9E8);
    if (swift_dynamicCast(&v33, v40, (char *)&type metadata for Any + 8, v13, 6))
    {
      sub_100028E28(&v33, (uint64_t)v36);
      *(_QWORD *)&v39 = 40;
      *((_QWORD *)&v39 + 1) = 0xE100000000000000;
      v14 = v37;
      v15 = v38;
      sub_100006914(v36, v37);
      *(_QWORD *)&v33 = dispatch thunk of Collection.count.getter(v14, v15);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v17 = v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(v17);
      v18._countAndFlagsBits = 41;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      v20 = *((_QWORD *)&v39 + 1);
      v19 = v39;
LABEL_14:
      sub_10000697C(v36);
      goto LABEL_15;
    }
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    sub_100017AB4((uint64_t)&v33, &qword_1000CC9F0);
  }
  v39 = *(_OWORD *)a1;
  sub_10000ABEC(v4, (uint64_t)v40);
  v21 = sub_100004B18(&qword_1000CC9D8);
  if (swift_dynamicCast(&v33, v40, (char *)&type metadata for Any + 8, v21, 6))
  {
    sub_100028E28(&v33, (uint64_t)v36);
    v31 = 0;
    v32 = 0xE000000000000000;
    sub_10000B410((uint64_t)v36, (uint64_t)&v39);
    sub_100017F28((uint64_t)&v39, (uint64_t)&v33, &qword_1000CC9E0);
    if (*((_QWORD *)&v34 + 1))
    {
      sub_100028E28(&v33, (uint64_t)v30);
      sub_10000B410((uint64_t)v30, (uint64_t)v29);
      v22 = String.init<A>(describing:)(v29, v21);
      v24 = v23;
      sub_10000697C(v30);
    }
    else
    {
      v24 = (void *)0xE300000000000000;
      v22 = 7104878;
    }
    sub_100017AB4((uint64_t)&v39, &qword_1000CC9E0);
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v19 = v31;
    v20 = v32;
    goto LABEL_14;
  }
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  sub_100017AB4((uint64_t)&v33, &qword_1000CC9E0);
  *(_QWORD *)&v39 = 0;
  *((_QWORD *)&v39 + 1) = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)(v4, &v39, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v20 = *((_QWORD *)&v39 + 1);
  v19 = v39;
LABEL_15:
  v26 = sub_100004B18(&qword_1000CB118);
  v27 = swift_allocObject(v26, 64, 7);
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v27 + 16) = xmmword_100081E60;
  *(_QWORD *)(v27 + 32) = v7;
  *(_QWORD *)(v27 + 40) = v9;
  *(_QWORD *)(v27 + 48) = v19;
  *(_QWORD *)(v27 + 56) = v20;
  return result;
}

void sub_1000598D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActivityDisplayContext(0);
  sub_100017FC4(v0 + *(int *)(v6 + 32), (uint64_t)v5, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v7 = (char *)&loc_1000599C8 + dword_100059AB4[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_1000599D8()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_100059AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017FC4(v0, (uint64_t)v5, v6);
  v7 = (char *)sub_100059BC0 + 4 * byte_1000867C0[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_100059BC0()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_100059C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  int EnumCaseMultiPayload;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];

  v1 = v0;
  v2 = sub_100004B18(&qword_1000CCA08);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004B18(&qword_1000CCA10);
  __chkstk_darwin(v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004B18(&qword_1000CCA18);
  v52 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  __chkstk_darwin(v9);
  v51 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000CCA20);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  v50 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v50 + 64);
  v16 = __chkstk_darwin(v14);
  v17 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v49 - v18;
  v56 = v1;
  sub_100017FC4(v1, (uint64_t)&v49 - v18, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v14);
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (!EnumCaseMultiPayload)
      sub_100018008((uint64_t)v19, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    sub_100059AC4();
    v57[0] = v44;
    v57[1] = v45;
    v46 = sub_100004B18(&qword_1000C7C70);
    Just.init(_:)(v57, v46);
    v47 = sub_10000AAFC(&qword_1000CCA60, &qword_1000CCA08, (uint64_t)&protocol conformance descriptor for Just<A>);
    v43 = Publisher.eraseToAnyPublisher()(v2, v47);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    sub_100018008((uint64_t)v19, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    sub_10005D2E0();
    v22 = v13;
    v23 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v24 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
    v25 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v23, NSRunLoopCommonModes, v8, 1.0);

    sub_100017AB4((uint64_t)v8, &qword_1000CCA10);
    v57[0] = v25;
    v26 = type metadata accessor for NSTimer.TimerPublisher(0);
    v27 = sub_100003E48(&qword_1000CCA30, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
    v28 = ConnectablePublisher.autoconnect()(v26, v27);
    swift_release(v25);
    v57[0] = v28;
    v29 = sub_100004B18(&qword_1000CCA38);
    v30 = type metadata accessor for Date(0);
    v31 = swift_allocObject(v29, ((*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) | 7);
    *(_OWORD *)(v31 + 16) = xmmword_100082750;
    Date.init()(v31);
    v32 = sub_100004B18(&qword_1000CCA40);
    v33 = sub_10000AAFC(&qword_1000CCA48, &qword_1000CCA40, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
    v34 = v51;
    Publisher.prepend(_:)(v31, v32, v33);
    swift_release(v28);
    swift_bridgeObjectRelease(v31);
    sub_100017FC4(v56, (uint64_t)v17, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    v35 = *(unsigned __int8 *)(v50 + 80);
    v36 = (v35 + 16) & ~v35;
    v37 = swift_allocObject(&unk_1000B7600, v36 + v15, v35 | 7);
    sub_100017264((uint64_t)v17, v37 + v36, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    v38 = sub_100004B18(&qword_1000C7C70);
    v39 = sub_10000AAFC(&qword_1000CCA50, &qword_1000CCA18, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
    v40 = v53;
    Publisher.map<A>(_:)(sub_10005D460, v37, v53, v38, v39);
    swift_release(v37);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v40);
    v41 = sub_10000AAFC(&qword_1000CCA58, &qword_1000CCA20, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v42 = v55;
    v43 = Publisher.eraseToAnyPublisher()(v55, v41);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v22, v42);
  }
  return v43;
}

uint64_t sub_10005A12C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v4 = a1[1];
  if (v4)
  {
    v5 = *a1;
    v6 = v4;
  }
  else
  {
    v7 = objc_msgSend((id)objc_opt_self(PCLocalizedString), "localizedStringForKey:", 9);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v6 = v8;

    v4 = 0;
  }
  *a2 = v5;
  a2[1] = v6;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10005A1A8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;

  v3 = v1;
  v5 = sub_100004B18(&qword_1000CC990);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100006914(a1, v9);
  v11 = sub_10005CCFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.CodingKeys, &type metadata for ActivityDisplayContext.CodingKeys, v11, v9, v10);
  v12 = *((_BYTE *)v3 + 8);
  v22 = *v3;
  v23 = v12;
  v24 = 0;
  type metadata accessor for PCActivityType(0);
  v14 = v13;
  v15 = sub_100003E48(&qword_1000CC998, (uint64_t (*)(uint64_t))type metadata accessor for PCActivityType, (uint64_t)&protocol conformance descriptor for PCActivityType);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v24, v5, v14, v15);
  if (!v2)
  {
    v22 = v3[2];
    v24 = 1;
    type metadata accessor for PCActivityAssetType(0);
    sub_100003E48(&qword_1000CC9A0, (uint64_t (*)(uint64_t))type metadata accessor for PCActivityAssetType, (uint64_t)&protocol conformance descriptor for PCActivityAssetType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v16 = v3[3];
    v17 = v3[4];
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    v22 = v3[5];
    v24 = 3;
    sub_100004B18(&qword_1000CC978);
    sub_10000AAFC(&qword_1000CC9A8, &qword_1000CC978, (uint64_t)&unk_100080AC0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22);
    v18 = type metadata accessor for ActivityDisplayContext(0);
    v19 = (uint64_t)v3 + *(int *)(v18 + 32);
    LOBYTE(v22) = 4;
    type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    sub_100003E48(&qword_1000CC9B0, type metadata accessor for ActivityDisplayContext.DynamicTextScheme, (uint64_t)&unk_10008698C);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19);
    v20 = (uint64_t)v3 + *(int *)(v18 + 36);
    LOBYTE(v22) = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10005A46C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;

  v38 = a2;
  v3 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  v4 = __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v36 - v7);
  v40 = sub_100004B18(&qword_1000CC958);
  v9 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v12);
  v41 = a1;
  v42 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42[5] = 0;
  v15 = a1[3];
  v14 = a1[4];
  sub_100006914(a1, v15);
  v16 = sub_10005CCFC();
  v39 = v11;
  v17 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.CodingKeys, &type metadata for ActivityDisplayContext.CodingKeys, v16, v15, v14);
  if (v17)
  {
    v26 = v42;
    sub_10000697C(v41);

  }
  else
  {
    v37 = v8;
    v18 = v9;
    v43 = v3;
    type metadata accessor for PCActivityType(0);
    v20 = v19;
    v46 = 0;
    v21 = sub_100003E48(&qword_1000CC968, (uint64_t (*)(uint64_t))type metadata accessor for PCActivityType, (uint64_t)&protocol conformance descriptor for PCActivityType);
    v22 = v20;
    v23 = v40;
    v24 = v20;
    v25 = v39;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v44, v22, &v46, v40, v24, v21);
    v27 = v45;
    v28 = (uint64_t)v42;
    *v42 = v44;
    *(_BYTE *)(v28 + 8) = v27;
    type metadata accessor for PCActivityAssetType(0);
    v30 = v29;
    v46 = 1;
    sub_100003E48(&qword_1000CC970, (uint64_t (*)(uint64_t))type metadata accessor for PCActivityAssetType, (uint64_t)&protocol conformance descriptor for PCActivityAssetType);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v30);
    *(_QWORD *)(v28 + 16) = v44;
    LOBYTE(v44) = 2;
    *(_QWORD *)(v28 + 24) = KeyedDecodingContainer.decode(_:forKey:)(&v44, v23);
    *(_QWORD *)(v28 + 32) = v31;
    v32 = sub_100004B18(&qword_1000CC978);
    v46 = 3;
    sub_10000AAFC(&qword_1000CC980, &qword_1000CC978, (uint64_t)&unk_100080AE8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v32);
    *(_QWORD *)(v28 + 40) = v44;
    LOBYTE(v44) = 4;
    v33 = sub_100003E48(&qword_1000CC988, type metadata accessor for ActivityDisplayContext.DynamicTextScheme, (uint64_t)&unk_1000869B4);
    v34 = v37;
    v35 = v43;
    v36 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v43);
    sub_100017264((uint64_t)v34, v28 + *(int *)(v12 + 32), type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    LOBYTE(v44) = 5;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v35);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v23);
    sub_100017264((uint64_t)v6, v28 + *(int *)(v12 + 36), type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    sub_100017FC4(v28, v38, type metadata accessor for ActivityDisplayContext);
    sub_10000697C(v41);
    sub_100018008(v28, type metadata accessor for ActivityDisplayContext);
  }
}

uint64_t sub_10005A8C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005A8FC + 4 * byte_1000867C4[*v0]))(0x7974697669746361, 0xEC00000065707954);
}

uint64_t sub_10005A8FC()
{
  return 0x7079547465737361;
}

uint64_t sub_10005A918()
{
  return 0x614E656369766564;
}

uint64_t sub_10005A934()
{
  return 0x6461654864726163;
}

unint64_t sub_10005A958()
{
  return 0xD000000000000014;
}

uint64_t sub_10005A974()
{
  return 0x74786554746E6968;
}

uint64_t sub_10005A998@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005E044(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005A9BC(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10005A9C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CCFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005A9F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CCFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005AA18(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10005A46C(a1, a2);
}

uint64_t sub_10005AA2C(_QWORD *a1)
{
  return sub_10005A1A8(a1);
}

uint64_t sub_10005AA40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[4];

  v5[3] = a1;
  v2 = sub_1000177DC(v5);
  sub_100017FC4(v1, (uint64_t)v2, type metadata accessor for ActivityDisplayContext);
  v3 = sub_100059124(v5);
  sub_10000697C(v5);
  return v3;
}

uint64_t sub_10005AAA0(uint64_t a1)
{
  uint64_t result;

  result = sub_100003E48(&qword_1000CC888, type metadata accessor for ActivityDisplayContext, (uint64_t)&unk_1000868F8);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10005AADC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  void (*v22)(char *, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  id v31;
  NSString v32;
  uint64_t *v33;
  _QWORD v35[2];

  v1 = v0;
  v2 = sub_100004B18(&qword_1000C85A0);
  __chkstk_darwin(v2);
  v4 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v35 - v10;
  v12 = v1[1];
  if (!v12)
  {
    v17 = sub_10004FD88();
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "ulog:message:", 60, v18);

    v19 = *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 24);
LABEL_9:
    v33 = (uint64_t *)((char *)v1 + v19);
    v30 = *v33;
    swift_bridgeObjectRetain(v33[1]);
    return v30;
  }
  v13 = *v1;
  v14 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  sub_100017F28((uint64_t)v1 + *(int *)(v14 + 20), (uint64_t)v4, &qword_1000C85A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100017AB4((uint64_t)v4, &qword_1000C85A0);
    v15 = sub_10004FD88();
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "ulog:message:", 60, v16);

LABEL_8:
    v19 = *(int *)(v14 + 24);
    goto LABEL_9;
  }
  v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  Date.init()(v20);
  v21 = Date.timeIntervalSince(_:)(v11);
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v22(v9, v5);
  v23 = objc_msgSend((id)objc_opt_self(PCActivityUtility), "formattedDurationFor:", v21);
  if (!v23)
  {
    v31 = sub_10004FD88();
    v32 = String._bridgeToObjectiveC()();
    objc_msgSend(v31, "ulog:message:", 60, v32);

    v22(v11, v5);
    goto LABEL_8;
  }
  v24 = v23;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v27 = v26;

  v35[0] = v13;
  v35[1] = v12;
  swift_bridgeObjectRetain(v12);
  v28._countAndFlagsBits = 2108704;
  v28._object = (void *)0xE300000000000000;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v25;
  v29._object = v27;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v27);
  v30 = v35[0];
  v22(v11, v5);
  return v30;
}

uint64_t sub_10005ADF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  double v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  id v32;
  NSString v33;
  id v35;
  NSString v36;
  _QWORD v37[2];

  v1 = v0;
  v2 = sub_100004B18(&qword_1000C85A0);
  __chkstk_darwin(v2);
  v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v37 - v10;
  v12 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  sub_100017F28((uint64_t)v1 + *(int *)(v12 + 20), (uint64_t)v4, &qword_1000C85A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100017AB4((uint64_t)v4, &qword_1000C85A0);
    v13 = sub_10004FD9C();
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "ulog:message:", 60, v14);

LABEL_3:
    v15 = *v1;
    swift_bridgeObjectRetain(v1[1]);
    return v15;
  }
  v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  Date.init()(v16);
  v17 = static Date.> infix(_:_:)(v11, v9);
  v18 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v19 = v18(v9, v5);
  if ((v17 & 1) == 0)
  {
    v32 = sub_10004FD9C();
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v32, "ulog:message:", 60, v33);

    v18(v11, v5);
    return 0;
  }
  v20 = Date.timeIntervalSinceNow.getter(v19);
  v21 = objc_msgSend((id)objc_opt_self(PCActivityUtility), "formattedDurationFor:", v20);
  if (!v21)
  {
    v35 = sub_10004FD9C();
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "ulog:message:", 60, v36);

    v18(v11, v5);
    goto LABEL_3;
  }
  v22 = v21;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v25 = v24;

  v37[0] = 0;
  v37[1] = 0xE000000000000000;
  v26 = (void *)v1[1];
  if (v26)
    v27 = *v1;
  else
    v27 = 0;
  if (v26)
    v28 = v26;
  else
    v28 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v26);
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._countAndFlagsBits = 2108704;
  v30._object = (void *)0xE300000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v23;
  v31._object = v25;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v25);
  v15 = v37[0];
  v18(v11, v5);
  return v15;
}

void sub_10005B130(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  uint64_t v10;

  v3 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017FC4(a2, (uint64_t)v7, v8);
  v9 = (char *)sub_10005B234 + 4 * byte_1000867CA[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

void sub_10005B234()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
}

void sub_10005B2C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD v19[4];
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = sub_100004B18(&qword_1000CC920);
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  __chkstk_darwin(v2);
  v27 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v25);
  v26 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000CC928);
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  __chkstk_darwin(v5);
  v22 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v20);
  v21 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000CC930);
  v19[2] = *(_QWORD *)(v8 - 8);
  v19[3] = v8;
  __chkstk_darwin(v8);
  v19[1] = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004B18(&qword_1000CC938);
  __chkstk_darwin(v10);
  v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v11);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000CC940);
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  __chkstk_darwin(v14);
  v16 = a1[3];
  v15 = a1[4];
  sub_100006914(a1, v16);
  v17 = sub_10005CBA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys, &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys, v17, v16, v15);
  sub_100017FC4(v32, (uint64_t)v13, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v18 = (char *)sub_10005B544 + 4 * byte_1000867CE[swift_getEnumCaseMultiPayload(v13, v11)];
  __asm { BR              X10 }
}

uint64_t sub_10005B544()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *v0;
  v4 = v0[1];
  *(_BYTE *)(v2 - 67) = 1;
  v5 = sub_10005CC74();
  v6 = *(_QWORD *)(v2 - 216);
  v7 = *(_QWORD *)(v2 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys, v2 - 67, v7, &type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys, v5);
  v8 = v3;
  v9 = *(_QWORD *)(v2 - 200);
  KeyedEncodingContainer.encode(_:forKey:)(v8, v4, v10, v9);
  swift_bridgeObjectRelease(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8))(v6, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v1, v7);
}

uint64_t sub_10005B7AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[5];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  v42 = a2;
  v38 = sub_100004B18(&qword_1000CC8C0);
  v41 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v47 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004B18(&qword_1000CC8C8);
  v40 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v44 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100004B18(&qword_1000CC8D0);
  v39 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v46 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004B18(&qword_1000CC8D8);
  v35[3] = *(_QWORD *)(v6 - 8);
  v35[4] = v6;
  __chkstk_darwin(v6);
  v43 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100004B18(&qword_1000CC8E0);
  v45 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v35 - v15;
  v17 = __chkstk_darwin(v14);
  __chkstk_darwin(v17);
  v19 = (char *)v35 - v18;
  v21 = a1[3];
  v20 = a1[4];
  v50 = a1;
  sub_100006914(a1, v21);
  v22 = sub_10005CBA8();
  v48 = v9;
  v23 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys, &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys, v22, v21, v20);
  if (!v23)
  {
    v35[0] = v16;
    v35[1] = v13;
    v35[2] = v19;
    v51 = v10;
    v24 = v48;
    v25 = v49;
    v26 = KeyedDecodingContainer.allKeys.getter(v49);
    v27 = v26;
    if (*(_QWORD *)(v26 + 16) == 1)
      __asm { BR              X10 }
    v28 = v25;
    v29 = type metadata accessor for DecodingError(0);
    swift_allocError(v29, &protocol witness table for DecodingError, 0, 0);
    v31 = v30;
    sub_100004B18(&qword_1000C7E90);
    *v31 = v51;
    v32 = KeyedDecodingContainer.codingPath.getter(v28);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v32, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v33 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for DecodingError.typeMismatch(_:), v29);
    swift_willThrow(v33);
    swift_bridgeObjectRelease(v27);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v24, v28);
  }
  return sub_10000697C(v50);
}

uint64_t sub_10005BEFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CC30();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005BF24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CC30();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005BF4C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005BF74 + 4 * byte_1000867D6[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_10005BF74()
{
  return 0x636974617473;
}

uint64_t sub_10005BF88()
{
  return 1819042147;
}

uint64_t sub_10005BF94()
{
  return 0x72656D6974;
}

uint64_t sub_10005BFA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005E334(a1, a2);
  *a3 = result;
  return result;
}

void sub_10005BFCC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10005BFD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CBA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C000(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CBA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CCB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CCB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C078(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CC74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C0A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CC74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C0C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CBEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C0F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CBEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C118@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005B7AC(a1, a2);
}

void sub_10005C12C(_QWORD *a1)
{
  sub_10005B2C0(a1);
}

uint64_t sub_10005C140(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_100004B18(&qword_1000CC8B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100006914(a1, v9);
  v11 = sub_10005CB64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys, &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v25 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    v14 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v15 = (char *)v3 + *(int *)(v14 + 20);
    v24 = 1;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100003E48(&qword_1000C88D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v24, v5, v16, v17);
    v18 = (uint64_t *)((char *)v3 + *(int *)(v14 + 24));
    v19 = *v18;
    v20 = v18[1];
    v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005C2C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;

  v32 = a2;
  v3 = sub_100004B18(&qword_1000C85A0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_100004B18(&qword_1000CC8A8);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v9);
  v11 = (uint64_t *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v13 = a1[4];
  sub_100006914(a1, v12);
  v14 = sub_10005CB64();
  v34 = v8;
  v15 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys, &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys, v14, v12, v13);
  if (v15)
    return sub_10000697C(a1);
  v16 = v6;
  v31 = v11;
  v38 = 0;
  v17 = v33;
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v33);
  v19 = v31;
  *v31 = v18;
  v19[1] = v20;
  v21 = type metadata accessor for Date(0);
  v37 = 1;
  v22 = sub_100003E48(&qword_1000C8860, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v5, v21, &v37, v17, v21, v22);
  sub_100044724((uint64_t)v5, (uint64_t)v31 + *(int *)(v9 + 20));
  v36 = 2;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v36, v17);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v17);
  v27 = (uint64_t)v31;
  v26 = v32;
  v28 = (uint64_t *)((char *)v31 + *(int *)(v9 + 24));
  *v28 = v23;
  v28[1] = v25;
  sub_100017FC4(v27, v26, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
  sub_10000697C(a1);
  return sub_100018008(v27, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
}

uint64_t sub_10005C590()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7461447472617473;
  if (*v0 != 1)
    v1 = 0x656C746974;
  if (*v0)
    return v1;
  else
    return 0x4E79616C70736964;
}

uint64_t sub_10005C5F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005E4BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005C618(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005C640(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005C668@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005C2C8(a1, a2);
}

uint64_t sub_10005C67C(_QWORD *a1)
{
  return sub_10005C140(a1);
}

uint64_t sub_10005C690(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_100004B18(&qword_1000CC8A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100006914(a1, v9);
  v11 = sub_10005CB20();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys, &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    v14 = (char *)v3 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for Date(0);
    v16 = sub_100003E48(&qword_1000C88D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005C7E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char v26;

  v22 = a2;
  v4 = sub_100004B18(&qword_1000C85A0);
  __chkstk_darwin(v4);
  v23 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100004B18(&qword_1000CC890);
  v6 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v9);
  v11 = (_QWORD **)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v13 = a1[4];
  sub_100006914(a1, v12);
  v14 = sub_10005CB20();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys, &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys, v14, v12, v13);
  if (v2)
    return sub_10000697C(a1);
  v21 = a1;
  v16 = v23;
  v15 = v24;
  v26 = 0;
  *v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v24);
  v11[1] = v17;
  v18 = type metadata accessor for Date(0);
  v25 = 1;
  v19 = sub_100003E48(&qword_1000C8860, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, v18, &v25, v15, v18, v19);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
  sub_100044724((uint64_t)v16, (uint64_t)v11 + *(int *)(v9 + 20));
  sub_100017FC4((uint64_t)v11, v22, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
  sub_10000697C(v21);
  return sub_100018008((uint64_t)v11, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
}

uint64_t sub_10005CA40()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574614465726966;
  else
    return 0x4E79616C70736964;
}

uint64_t sub_10005CA84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005E62C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005CAA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005CAD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005CB20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005CAF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005C7E4(a1, a2);
}

uint64_t sub_10005CB0C(_QWORD *a1)
{
  return sub_10005C690(a1);
}

unint64_t sub_10005CB20()
{
  unint64_t result;

  result = qword_1000CC898;
  if (!qword_1000CC898)
  {
    result = swift_getWitnessTable(&unk_100087278, &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC898);
  }
  return result;
}

unint64_t sub_10005CB64()
{
  unint64_t result;

  result = qword_1000CC8B0;
  if (!qword_1000CC8B0)
  {
    result = swift_getWitnessTable(&unk_100087228, &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC8B0);
  }
  return result;
}

unint64_t sub_10005CBA8()
{
  unint64_t result;

  result = qword_1000CC8E8;
  if (!qword_1000CC8E8)
  {
    result = swift_getWitnessTable(&unk_1000871D8, &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC8E8);
  }
  return result;
}

unint64_t sub_10005CBEC()
{
  unint64_t result;

  result = qword_1000CC8F0;
  if (!qword_1000CC8F0)
  {
    result = swift_getWitnessTable(&unk_100087188, &type metadata for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC8F0);
  }
  return result;
}

unint64_t sub_10005CC30()
{
  unint64_t result;

  result = qword_1000CC900;
  if (!qword_1000CC900)
  {
    result = swift_getWitnessTable(&unk_100087138, &type metadata for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC900);
  }
  return result;
}

unint64_t sub_10005CC74()
{
  unint64_t result;

  result = qword_1000CC910;
  if (!qword_1000CC910)
  {
    result = swift_getWitnessTable(&unk_1000870E8, &type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC910);
  }
  return result;
}

unint64_t sub_10005CCB8()
{
  unint64_t result;

  result = qword_1000CC918;
  if (!qword_1000CC918)
  {
    result = swift_getWitnessTable(&unk_100087098, &type metadata for ActivityDisplayContext.DynamicTextScheme.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC918);
  }
  return result;
}

unint64_t sub_10005CCFC()
{
  unint64_t result;

  result = qword_1000CC960;
  if (!qword_1000CC960)
  {
    result = swift_getWitnessTable(&unk_100087048, &type metadata for ActivityDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CC960);
  }
  return result;
}

unint64_t sub_10005CD40()
{
  unint64_t result;

  result = qword_1000CC9B8;
  if (!qword_1000CC9B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000CC9B8);
  }
  return result;
}

unint64_t sub_10005CD84()
{
  unint64_t result;

  result = qword_1000CC9C0;
  if (!qword_1000CC9C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000CC9C0);
  }
  return result;
}

char *sub_10005CDC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CCA68);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005CEC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CB118);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for String);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005CFC0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CC9D0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for TableFormatter.Row);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

_QWORD *sub_10005D0C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CC9F8);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[2 * v8 + 4])
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
  }
  else
  {
    v15 = sub_100004B18(&qword_1000CCA00);
    swift_arrayInitWithCopy(v11 + 4, a4 + 4, v8, v15);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10005D1E0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100004B18(&qword_1000CBF78);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14, v15, v8, &type metadata for Substring);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unint64_t sub_10005D2E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCA28;
  if (!qword_1000CCA28)
  {
    v1 = objc_opt_self(NSTimer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000CCA28);
  }
  return result;
}

uint64_t sub_10005D31C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      v9 = v6 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v10 = type metadata accessor for Date(0);
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      break;
    case 1:
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v13 = v6 + *(int *)(v12 + 20);
      v14 = type metadata accessor for Date(0);
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      v8 = *(_QWORD *)(v6 + *(int *)(v12 + 24) + 8);
      goto LABEL_10;
    case 0:
      v8 = *(_QWORD *)(v6 + 8);
LABEL_10:
      swift_bridgeObjectRelease(v8);
      break;
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10005D460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0) - 8)
                          + 80);
  sub_10005B130(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t getEnumTagSinglePayload for ActivityDisplayContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivityDisplayContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10005D588 + 4 * byte_1000867DF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10005D5BC + 4 * byte_1000867DA[v4]))();
}

uint64_t sub_10005D5BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D5C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005D5CCLL);
  return result;
}

uint64_t sub_10005D5D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005D5E0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10005D5E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D5EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ActivityDisplayContext.DynamicTextScheme.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivityDisplayContext.DynamicTextScheme.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10005D6E4 + 4 * byte_1000867E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10005D718 + 4 * byte_1000867E4[v4]))();
}

uint64_t sub_10005D718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005D728);
  return result;
}

uint64_t sub_10005D734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005D73CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10005D740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.NoneCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys;
}

uint64_t _s13PCViewService22ActivityDisplayContextV17DynamicTextSchemeO16StaticCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10005D7D8 + 4 * byte_1000867EE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10005D7F8 + 4 * byte_1000867F3[v4]))();
}

_BYTE *sub_10005D7D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10005D7F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005D800(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005D808(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005D810(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005D818(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ActivityDisplayContext.CallDisplayContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10005D880 + 4 * byte_1000867FD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10005D8B4 + 4 * byte_1000867F8[v4]))();
}

uint64_t sub_10005D8B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D8BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005D8C4);
  return result;
}

uint64_t sub_10005D8D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005D8D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10005D8DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D8E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.CallDisplayContext.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ActivityDisplayContext.TimerDisplayContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10005D94C + 4 * byte_100086807[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10005D980 + 4 * byte_100086802[v4]))();
}

uint64_t sub_10005D980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005D990);
  return result;
}

uint64_t sub_10005D99C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005D9A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10005D9A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005D9B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.TimerDisplayContext.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys;
}

unint64_t sub_10005D9D0()
{
  unint64_t result;

  result = qword_1000CCA70;
  if (!qword_1000CCA70)
  {
    result = swift_getWitnessTable(&unk_100086B80, &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCA70);
  }
  return result;
}

unint64_t sub_10005DA18()
{
  unint64_t result;

  result = qword_1000CCA78;
  if (!qword_1000CCA78)
  {
    result = swift_getWitnessTable(&unk_100086C38, &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCA78);
  }
  return result;
}

unint64_t sub_10005DA60()
{
  unint64_t result;

  result = qword_1000CCA80;
  if (!qword_1000CCA80)
  {
    result = swift_getWitnessTable(&unk_100086CF0, &type metadata for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCA80);
  }
  return result;
}

unint64_t sub_10005DAA8()
{
  unint64_t result;

  result = qword_1000CCA88;
  if (!qword_1000CCA88)
  {
    result = swift_getWitnessTable(&unk_100086DA8, &type metadata for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCA88);
  }
  return result;
}

unint64_t sub_10005DAF0()
{
  unint64_t result;

  result = qword_1000CCA90;
  if (!qword_1000CCA90)
  {
    result = swift_getWitnessTable(&unk_100086E60, &type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCA90);
  }
  return result;
}

unint64_t sub_10005DB38()
{
  unint64_t result;

  result = qword_1000CCA98;
  if (!qword_1000CCA98)
  {
    result = swift_getWitnessTable(&unk_100086F68, &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCA98);
  }
  return result;
}

unint64_t sub_10005DB80()
{
  unint64_t result;

  result = qword_1000CCAA0;
  if (!qword_1000CCAA0)
  {
    result = swift_getWitnessTable(&unk_100087020, &type metadata for ActivityDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAA0);
  }
  return result;
}

unint64_t sub_10005DBC8()
{
  unint64_t result;

  result = qword_1000CCAA8;
  if (!qword_1000CCAA8)
  {
    result = swift_getWitnessTable(&unk_100086F90, &type metadata for ActivityDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAA8);
  }
  return result;
}

unint64_t sub_10005DC10()
{
  unint64_t result;

  result = qword_1000CCAB0;
  if (!qword_1000CCAB0)
  {
    result = swift_getWitnessTable(&unk_100086FB8, &type metadata for ActivityDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAB0);
  }
  return result;
}

unint64_t sub_10005DC58()
{
  unint64_t result;

  result = qword_1000CCAB8;
  if (!qword_1000CCAB8)
  {
    result = swift_getWitnessTable(&unk_100086E88, &type metadata for ActivityDisplayContext.DynamicTextScheme.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAB8);
  }
  return result;
}

unint64_t sub_10005DCA0()
{
  unint64_t result;

  result = qword_1000CCAC0;
  if (!qword_1000CCAC0)
  {
    result = swift_getWitnessTable(&unk_100086EB0, &type metadata for ActivityDisplayContext.DynamicTextScheme.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAC0);
  }
  return result;
}

unint64_t sub_10005DCE8()
{
  unint64_t result;

  result = qword_1000CCAC8;
  if (!qword_1000CCAC8)
  {
    result = swift_getWitnessTable(&unk_100086DD0, &type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAC8);
  }
  return result;
}

unint64_t sub_10005DD30()
{
  unint64_t result;

  result = qword_1000CCAD0;
  if (!qword_1000CCAD0)
  {
    result = swift_getWitnessTable(&unk_100086DF8, &type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAD0);
  }
  return result;
}

unint64_t sub_10005DD78()
{
  unint64_t result;

  result = qword_1000CCAD8;
  if (!qword_1000CCAD8)
  {
    result = swift_getWitnessTable(&unk_100086D18, &type metadata for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAD8);
  }
  return result;
}

unint64_t sub_10005DDC0()
{
  unint64_t result;

  result = qword_1000CCAE0;
  if (!qword_1000CCAE0)
  {
    result = swift_getWitnessTable(&unk_100086D40, &type metadata for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAE0);
  }
  return result;
}

unint64_t sub_10005DE08()
{
  unint64_t result;

  result = qword_1000CCAE8;
  if (!qword_1000CCAE8)
  {
    result = swift_getWitnessTable(&unk_100086C60, &type metadata for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAE8);
  }
  return result;
}

unint64_t sub_10005DE50()
{
  unint64_t result;

  result = qword_1000CCAF0;
  if (!qword_1000CCAF0)
  {
    result = swift_getWitnessTable(&unk_100086C88, &type metadata for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAF0);
  }
  return result;
}

unint64_t sub_10005DE98()
{
  unint64_t result;

  result = qword_1000CCAF8;
  if (!qword_1000CCAF8)
  {
    result = swift_getWitnessTable(&unk_100086ED8, &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCAF8);
  }
  return result;
}

unint64_t sub_10005DEE0()
{
  unint64_t result;

  result = qword_1000CCB00;
  if (!qword_1000CCB00)
  {
    result = swift_getWitnessTable(&unk_100086F00, &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB00);
  }
  return result;
}

unint64_t sub_10005DF28()
{
  unint64_t result;

  result = qword_1000CCB08;
  if (!qword_1000CCB08)
  {
    result = swift_getWitnessTable(&unk_100086BA8, &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB08);
  }
  return result;
}

unint64_t sub_10005DF70()
{
  unint64_t result;

  result = qword_1000CCB10;
  if (!qword_1000CCB10)
  {
    result = swift_getWitnessTable(&unk_100086BD0, &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB10);
  }
  return result;
}

unint64_t sub_10005DFB8()
{
  unint64_t result;

  result = qword_1000CCB18;
  if (!qword_1000CCB18)
  {
    result = swift_getWitnessTable(&unk_100086AF0, &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB18);
  }
  return result;
}

unint64_t sub_10005E000()
{
  unint64_t result;

  result = qword_1000CCB20;
  if (!qword_1000CCB20)
  {
    result = swift_getWitnessTable(&unk_100086B18, &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB20);
  }
  return result;
}

uint64_t sub_10005E044(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x7974697669746361 && a2 == 0xEC00000065707954)
  {
    v5 = 0xEC00000065707954;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974697669746361, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7079547465737361 && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079547465737361, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x614E656369766564 && a2 == 0xEA0000000000656DLL)
  {
    v8 = 0xEA0000000000656DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E656369766564, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6461654864726163 && a2 == 0xEF6567616D497265)
  {
    v9 = 0xEF6567616D497265;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6461654864726163, 0xEF6567616D497265, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000014)
  {
    v10 = 0x80000001000948A0;
    if (a2 == 0x80000001000948A0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000948A0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x74786554746E6968 && a2 == 0xEE00656D65686353)
  {
    swift_bridgeObjectRelease(0xEE00656D65686353);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74786554746E6968, 0xEE00656D65686353, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_10005E334(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x636974617473 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636974617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1819042147 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1819042147, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x72656D6974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72656D6974, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10005E4BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    v5 = 0xEB00000000656D61;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461447472617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10005E62C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    v5 = 0xEB00000000656D61;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E79616C70736964, 0xEB00000000656D61, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574614465726966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574614465726966, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

ValueMetadata *type metadata accessor for EducationViewEvent()
{
  return &type metadata for EducationViewEvent;
}

ValueMetadata *type metadata accessor for EducationViewState()
{
  return &type metadata for EducationViewState;
}

uint64_t *sub_10005E758@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_10005E770(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_10005E77C(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B2120;
}

uint64_t sub_10005E78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10005F458();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10005E7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10005F458();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10005E834()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x736F6C4365766F6DLL;
  if (*v0 != 1)
    v1 = 0x6574656C706D6F63;
  if (*v0)
    return v1;
  else
    return 0x6F72746E69;
}

unint64_t sub_10005E894()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CCB28;
  if (!qword_1000CCB28)
  {
    v1 = sub_100005F48(&qword_1000CCB30);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000CCB28);
  }
  return result;
}

unint64_t sub_10005E8E4()
{
  unint64_t result;

  result = qword_1000CCB38;
  if (!qword_1000CCB38)
  {
    result = swift_getWitnessTable(&unk_100087324, &type metadata for EducationViewState);
    atomic_store(result, (unint64_t *)&qword_1000CCB38);
  }
  return result;
}

uint64_t sub_10005E928(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  char v33;

  v30 = a2;
  v3 = sub_100004B18(&qword_1000CCB88);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000CCB90);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000CCB98);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100004B18(&qword_1000CCBA0);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_100006914(a1, v16);
  v17 = sub_10005F348();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for EducationViewEvent.CodingKeys, &type metadata for EducationViewEvent.CodingKeys, v17, v16, v15);
  if ((_BYTE)v30)
  {
    if (v30 == 1)
    {
      v32 = 1;
      v18 = sub_10005F3D0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for EducationViewEvent.ContinueTimeoutCodingKeys, &v32, v12, &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys, v18);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    }
    else
    {
      v33 = 2;
      v20 = sub_10005F38C();
      v21 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys, &v33, v12, &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys, v20);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
    }
  }
  else
  {
    v31 = 0;
    v19 = sub_10005F414();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for EducationViewEvent.ContinueTappedCodingKeys, &v31, v12, &type metadata for EducationViewEvent.ContinueTappedCodingKeys, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v12);
}

uint64_t sub_10005EB8C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 == 1)
    v1 = 0x65756E69746E6F63;
  if (*v0)
    return v1;
  else
    return 0x65756E69746E6F63;
}

uint64_t sub_10005EBF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005EDE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005EC18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F348();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005EC40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F348();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005EC68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F414();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005EC90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F414();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005ECB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F3D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005ECE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F3D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005ED08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F38C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005ED30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005F38C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10005ED58@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10005EF70(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_10005ED80(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_10005E928(a1, *v1);
}

unint64_t sub_10005ED9C()
{
  unint64_t result;

  result = qword_1000CCB40;
  if (!qword_1000CCB40)
  {
    result = swift_getWitnessTable(&unk_100087474, &type metadata for EducationViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000CCB40);
  }
  return result;
}

uint64_t sub_10005EDE0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65756E69746E6F63 && a2 == 0xEE00646570706154)
  {
    v5 = 0xEE00646570706154;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756E69746E6F63, 0xEE00646570706154, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65756E69746E6F63 && a2 == 0xEF74756F656D6954)
  {
    v7 = 0xEF74756F656D6954;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65756E69746E6F63, 0xEF74756F656D6954, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000001000948C0)
  {
    swift_bridgeObjectRelease(0x80000001000948C0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001000948C0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_10005EF70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  char v41;
  char v42;
  char v43;

  v37 = sub_100004B18(&qword_1000CCB48);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100004B18(&qword_1000CCB50);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100004B18(&qword_1000CCB58);
  v4 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004B18(&qword_1000CCB60);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1[3];
  v12 = a1[4];
  sub_100006914(a1, v11);
  v13 = sub_10005F348();
  v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for EducationViewEvent.CodingKeys, &type metadata for EducationViewEvent.CodingKeys, v13, v11, v12);
  if (v14)
    goto LABEL_7;
  v31 = v4;
  v32 = v8;
  v15 = v39;
  v40 = a1;
  v16 = v10;
  v17 = KeyedDecodingContainer.allKeys.getter(v7);
  v18 = v17;
  v19 = v7;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = v17;
    v24 = type metadata accessor for DecodingError(0);
    swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
    v10 = v25;
    sub_100004B18(&qword_1000C7E90);
    *v10 = &type metadata for EducationViewEvent;
    v26 = KeyedDecodingContainer.codingPath.getter(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v10, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow(v27);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v19);
    a1 = v40;
LABEL_7:
    sub_10000697C(a1);
    return v10;
  }
  v10 = (_QWORD *)*(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if ((_DWORD)v10 == 1)
    {
      v42 = 1;
      v20 = sub_10005F3D0();
      v21 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for EducationViewEvent.ContinueTimeoutCodingKeys, &v42, v7, &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys, v20);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v36);
    }
    else
    {
      v43 = 2;
      v30 = sub_10005F38C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys, &v43, v7, &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys, v30);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v37);
    }
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v16, v19);
  }
  else
  {
    v41 = 0;
    v29 = sub_10005F414();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for EducationViewEvent.ContinueTappedCodingKeys, &v41, v7, &type metadata for EducationViewEvent.ContinueTappedCodingKeys, v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v34);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v7);
  }
  sub_10000697C(v40);
  return v10;
}

unint64_t sub_10005F348()
{
  unint64_t result;

  result = qword_1000CCB68;
  if (!qword_1000CCB68)
  {
    result = swift_getWitnessTable(&unk_100087858, &type metadata for EducationViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB68);
  }
  return result;
}

unint64_t sub_10005F38C()
{
  unint64_t result;

  result = qword_1000CCB70;
  if (!qword_1000CCB70)
  {
    result = swift_getWitnessTable(&unk_100087808, &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB70);
  }
  return result;
}

unint64_t sub_10005F3D0()
{
  unint64_t result;

  result = qword_1000CCB78;
  if (!qword_1000CCB78)
  {
    result = swift_getWitnessTable(&unk_1000877B8, &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB78);
  }
  return result;
}

unint64_t sub_10005F414()
{
  unint64_t result;

  result = qword_1000CCB80;
  if (!qword_1000CCB80)
  {
    result = swift_getWitnessTable(&unk_100087768, &type metadata for EducationViewEvent.ContinueTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCB80);
  }
  return result;
}

unint64_t sub_10005F458()
{
  unint64_t result;

  result = qword_1000CCBA8;
  if (!qword_1000CCBA8)
  {
    result = swift_getWitnessTable(&unk_1000873FC, &type metadata for EducationViewState);
    atomic_store(result, (unint64_t *)&qword_1000CCBA8);
  }
  return result;
}

uint64_t _s13PCViewService18EducationViewStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10005F4E8 + 4 * byte_1000872D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10005F51C + 4 * byte_1000872D0[v4]))();
}

uint64_t sub_10005F51C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005F52CLL);
  return result;
}

uint64_t sub_10005F538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005F540);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10005F544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005F54C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EducationViewEvent.CodingKeys()
{
  return &type metadata for EducationViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.ContinueTappedCodingKeys()
{
  return &type metadata for EducationViewEvent.ContinueTappedCodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.ContinueTimeoutCodingKeys()
{
  return &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.SubtitleSwipedBackCodingKeys()
{
  return &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys;
}

unint64_t sub_10005F59C()
{
  unint64_t result;

  result = qword_1000CCBB0;
  if (!qword_1000CCBB0)
  {
    result = swift_getWitnessTable(&unk_100087740, &type metadata for EducationViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBB0);
  }
  return result;
}

unint64_t sub_10005F5E4()
{
  unint64_t result;

  result = qword_1000CCBB8;
  if (!qword_1000CCBB8)
  {
    result = swift_getWitnessTable(&unk_100087660, &type metadata for EducationViewEvent.ContinueTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBB8);
  }
  return result;
}

unint64_t sub_10005F62C()
{
  unint64_t result;

  result = qword_1000CCBC0;
  if (!qword_1000CCBC0)
  {
    result = swift_getWitnessTable(&unk_100087688, &type metadata for EducationViewEvent.ContinueTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBC0);
  }
  return result;
}

unint64_t sub_10005F674()
{
  unint64_t result;

  result = qword_1000CCBC8;
  if (!qword_1000CCBC8)
  {
    result = swift_getWitnessTable(&unk_100087610, &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBC8);
  }
  return result;
}

unint64_t sub_10005F6BC()
{
  unint64_t result;

  result = qword_1000CCBD0;
  if (!qword_1000CCBD0)
  {
    result = swift_getWitnessTable(&unk_100087638, &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBD0);
  }
  return result;
}

unint64_t sub_10005F704()
{
  unint64_t result;

  result = qword_1000CCBD8;
  if (!qword_1000CCBD8)
  {
    result = swift_getWitnessTable(&unk_1000875C0, &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBD8);
  }
  return result;
}

unint64_t sub_10005F74C()
{
  unint64_t result;

  result = qword_1000CCBE0;
  if (!qword_1000CCBE0)
  {
    result = swift_getWitnessTable(&unk_1000875E8, &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBE0);
  }
  return result;
}

unint64_t sub_10005F794()
{
  unint64_t result;

  result = qword_1000CCBE8;
  if (!qword_1000CCBE8)
  {
    result = swift_getWitnessTable(&unk_1000876B0, &type metadata for EducationViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBE8);
  }
  return result;
}

unint64_t sub_10005F7DC()
{
  unint64_t result;

  result = qword_1000CCBF0;
  if (!qword_1000CCBF0)
  {
    result = swift_getWitnessTable(&unk_1000876D8, &type metadata for EducationViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCBF0);
  }
  return result;
}

uint64_t Publisher.conditionalDebounce<A>(for:tolerance:scheduler:options:when:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t WitnessTable;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;

  v76 = a6;
  v77 = a9;
  v78 = a7;
  v74 = a4;
  v75 = a5;
  v73 = a3;
  v68 = a2;
  v65 = a1;
  v71 = a11;
  v63 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a11, a8, &protocol requirements base descriptor for Scheduler, &associated type descriptor for Scheduler.SchedulerOptions);
  v83 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v81 = *(_QWORD *)(v83 - 8);
  v72 = *(_QWORD *)(v81 + 64);
  v13 = __chkstk_darwin(v83);
  v82 = (char *)&v56 - v14;
  v79 = *(_QWORD *)(a8 - 8);
  v70 = *(_QWORD *)(v79 + 64);
  __chkstk_darwin(v13);
  v80 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness(255, a11, a8, &protocol requirements base descriptor for Scheduler, &associated type descriptor for Scheduler.SchedulerTimeType);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a11, a8, v16, &protocol requirements base descriptor for Scheduler, &associated conformance descriptor for Scheduler.Scheduler.SchedulerTimeType: Strideable);
  v18 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, v16, &protocol requirements base descriptor for Strideable, &associated type descriptor for Strideable.Stride);
  v19 = type metadata accessor for Optional(0, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v60 = v19;
  v21 = *(_QWORD *)(v20 + 64);
  v22 = v20;
  v23 = __chkstk_darwin(v19);
  v25 = (char *)&v56 - v24;
  v61 = (char *)&v56 - v24;
  v26 = *(_QWORD *)(v18 - 8);
  v58 = v18;
  v27 = *(_QWORD *)(v26 + 64);
  __chkstk_darwin(v23);
  v29 = (char *)&v56 - v28;
  v59 = (char *)&v56 - v28;
  v62 = a10;
  v30 = v78;
  v31 = swift_getAssociatedTypeWitness(255, a10, v78, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v66 = type metadata accessor for AnyPublisher(255, v31, &type metadata for Never, &protocol witness table for Never);
  v67 = type metadata accessor for Publishers.Map(0, v30, v66, a10);
  v69 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v64 = (char *)&v56 - v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v65, v18);
  v57 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, v68, v19);
  v33 = v79;
  v34 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v80, v73, v63);
  v35 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v82, v74, v83);
  v36 = *(unsigned __int8 *)(v26 + 80);
  v37 = (v36 + 64) & ~v36;
  v38 = *(unsigned __int8 *)(v22 + 80);
  v39 = (v27 + v38 + v37) & ~v38;
  v40 = *(unsigned __int8 *)(v33 + 80);
  v41 = (v21 + v40 + v39) & ~v40;
  v42 = *(unsigned __int8 *)(v35 + 80);
  v43 = (v70 + v42 + v41) & ~v42;
  v44 = (char *)swift_allocObject(&unk_1000B7DF8, v43 + v72, v36 | v40 | v38 | v42 | 7);
  v45 = v78;
  *((_QWORD *)v44 + 2) = v78;
  *((_QWORD *)v44 + 3) = v34;
  v46 = v34;
  v47 = v62;
  v48 = v71;
  *((_QWORD *)v44 + 4) = v62;
  *((_QWORD *)v44 + 5) = v48;
  v49 = v76;
  *((_QWORD *)v44 + 6) = v75;
  *((_QWORD *)v44 + 7) = v49;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v44[v37], v59, v58);
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(&v44[v39], v61, v60);
  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(&v44[v41], v80, v46);
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(&v44[v43], v82, v83);
  swift_retain(v49);
  v50 = v64;
  v51 = v66;
  Publisher.map<A>(_:)(sub_1000600C0, v44, v45, v66, v47);
  swift_release(v44);
  v52 = v67;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v67);
  v54 = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v51);
  Publisher<>.switchToLatest()(v52, WitnessTable, v54);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v50, v52);
}

uint64_t sub_10005FC9C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t *v36;
  _QWORD v37[4];

  v32 = a5;
  v33 = a6;
  v31 = a4;
  v29 = a3;
  v34 = a2;
  v36 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a10, a7, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v15 = (char *)&v27 - v14;
  v16 = type metadata accessor for Just(0, AssociatedTypeWitness);
  v35 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v27 - v17;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Just<A>, v16);
  v37[0] = v16;
  v37[1] = a9;
  v28 = a9;
  v37[2] = WitnessTable;
  v37[3] = a11;
  v30 = a11;
  v20 = type metadata accessor for Publishers.Delay(0, v37);
  v27 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v22 = (char *)&v27 - v21;
  v23 = v34(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, AssociatedTypeWitness);
  Just.init(_:)(v15, AssociatedTypeWitness);
  if ((v23 & 1) != 0)
  {
    Publisher.delay<A>(for:tolerance:scheduler:options:)(v29, v31, v32, v33, v16, v28, WitnessTable, v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v16);
    v24 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Delay<A, B>, v20);
    v25 = Publisher.eraseToAnyPublisher()(v20, v24);
    result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v22, v20);
  }
  else
  {
    v25 = Publisher.eraseToAnyPublisher()(v16, WitnessTable);
    result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, v16);
  }
  *v36 = v25;
  return result;
}

uint64_t sub_10005FEBC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  char *v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *((_QWORD *)v0 + 3);
  v2 = *((_QWORD *)v0 + 5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, v1, &protocol requirements base descriptor for Scheduler, &associated type descriptor for Scheduler.SchedulerTimeType);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for Scheduler, &associated conformance descriptor for Scheduler.Scheduler.SchedulerTimeType: Strideable);
  v5 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for Strideable, &associated type descriptor for Strideable.Stride);
  v6 = *(_QWORD *)(v5 - 8);
  v25 = *(unsigned __int8 *)(v6 + 80);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(type metadata accessor for Optional(0, v5) - 8);
  v9 = (((v25 + 64) & ~v25) + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v1 - 8);
  v23 = *(unsigned __int8 *)(v10 + 80);
  v24 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v9 + *(_QWORD *)(v8 + 64) + v23) & ~v23;
  v12 = *(_QWORD *)(v10 + 64);
  v13 = swift_getAssociatedTypeWitness(255, v2, v1, &protocol requirements base descriptor for Scheduler, &associated type descriptor for Scheduler.SchedulerOptions);
  v14 = *(_QWORD *)(type metadata accessor for Optional(0, v13) - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v21 = v11;
  v16 = (v11 + v12 + v15) & ~v15;
  v22 = *(_QWORD *)(v14 + 64);
  swift_release(*((_QWORD *)v0 + 7));
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(&v0[(v25 + 64) & ~v25], v5);
  v18 = &v0[v9];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, v5))
    v17(v18, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(&v0[v21], v1);
  v19 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(&v0[v16], 1, v13))
    (*(void (**)(char *, uint64_t))(v19 + 8))(&v0[v16], v13);
  return swift_deallocObject(v0, v16 + v22, v25 | v24 | v23 | v15 | 7);
}

uint64_t sub_1000600C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;

  v4 = *(_QWORD *)(v2 + 24);
  v22 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 32);
  v5 = *(_QWORD *)(v2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v4, &protocol requirements base descriptor for Scheduler, &associated type descriptor for Scheduler.SchedulerTimeType);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &protocol requirements base descriptor for Scheduler, &associated conformance descriptor for Scheduler.Scheduler.SchedulerTimeType: Strideable);
  v9 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for Strideable, &associated type descriptor for Strideable.Stride);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(_QWORD *)(type metadata accessor for Optional(0, v9) - 8);
  v14 = (v11 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v4 - 8);
  v16 = (v14 + *(_QWORD *)(v13 + 64) + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 64);
  v18 = swift_getAssociatedTypeWitness(255, v5, v4, &protocol requirements base descriptor for Scheduler, &associated type descriptor for Scheduler.SchedulerOptions);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Optional(0, v18) - 8) + 80);
  return sub_10005FC9C(a1, *(uint64_t (**)(uint64_t))(v2 + 48), v2 + v11, v2 + v14, v2 + v16, v2 + ((v16 + v17 + v19) & ~v19), v22, a2, v4, v6, v5);
}

uint64_t sub_100060228(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t AssociatedConformanceWitness;

  v1 = *a1;
  v2 = a1[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2, *a1, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v4 = type metadata accessor for AnyPublisher(255, AssociatedTypeWitness, &type metadata for Never, &protocol witness table for Never);
  v13 = v4;
  v14 = swift_getAssociatedTypeWitness(255, v2, v1, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Failure);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyPublisher<A, B>, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v1, v14, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
  v5 = type metadata accessor for Publishers.SetFailureType(255, &v13);
  v6 = type metadata accessor for Publishers.Map(255, v1, v4, v2);
  v7 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v6);
  v8 = type metadata accessor for Publishers.Map(255, v6, v5, v7);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.SetFailureType<A, B>, v5);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v8);
  v13 = v5;
  v14 = v8;
  WitnessTable = v9;
  AssociatedConformanceWitness = v10;
  v11 = type metadata accessor for Publishers.SwitchToLatest(255, &v13);
  return swift_getWitnessTable(&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>, v11);
}

ValueMetadata *type metadata accessor for ViewServiceExperienceType()
{
  return &type metadata for ViewServiceExperienceType;
}

uint64_t _s13PCViewService21HandoffExperienceTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000603F4 + 4 * byte_1000878C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100060428 + 4 * byte_1000878C0[v4]))();
}

uint64_t sub_100060428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100060438);
  return result;
}

uint64_t sub_100060444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006044CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100060450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HandoffExperienceType()
{
  return &type metadata for HandoffExperienceType;
}

uint64_t sub_100060474(char *a1, char *a2)
{
  return sub_10003EB54(*a1, *a2);
}

Swift::Int sub_100060480()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x72656E6E6162;
  else
    v2 = 0x6572757472657061;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000604FC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x72656E6E6162;
  else
    v2 = 0x6572757472657061;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100060554(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x72656E6E6162;
  else
    v3 = 0x6572757472657061;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000605CC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000B24F8;
  return sub_10003F8C0(v2, a1, a2);
}

void sub_1000605D8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6572757472657061;
  if (*v1)
    v2 = 0x72656E6E6162;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_100060614(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B2148;
}

uint64_t sub_100060624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100060B20();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100060680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100060B20();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000606CC()
{
  _BYTE *v0;

  if (*v0)
    return 0x2063697373616C43;
  else
    return 0x6572757472657041;
}

uint64_t sub_100060710()
{
  return sub_10004074C(&qword_1000CCBF8, &qword_1000CCC00);
}

unint64_t sub_100060738()
{
  unint64_t result;

  result = qword_1000CCC08;
  if (!qword_1000CCC08)
  {
    result = swift_getWitnessTable(&unk_100087A40, &type metadata for HandoffExperienceType);
    atomic_store(result, (unint64_t *)&qword_1000CCC08);
  }
  return result;
}

uint64_t sub_10006077C(char *a1, char *a2)
{
  return sub_10003EBF4(*a1, *a2);
}

Swift::Int sub_100060788()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0x74696D69786F7270;
  if (v1)
    v3 = 0x800000010008EE70;
  else
    v3 = 0xED00006472614379;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100060818(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0x74696D69786F7270;
  if (*v1)
    v3 = 0x800000010008EE70;
  else
    v3 = 0xED00006472614379;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100060884(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0xD000000000000014;
  else
    v3 = 0x74696D69786F7270;
  if (v2)
    v4 = 0x800000010008EE70;
  else
    v4 = 0xED00006472614379;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100060910@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1000B2548;
  return sub_10003F8C0(v2, a1, a2);
}

void sub_10006091C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x74696D69786F7270;
  if (*v1)
    v2 = 0xD000000000000014;
  v3 = 0x800000010008EE70;
  if (!*v1)
    v3 = 0xED00006472614379;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10006096C(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B20F8;
}

uint64_t sub_10006097C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100060ADC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000609D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100060ADC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100060A24()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x74696D69786F7270;
}

uint64_t sub_100060A70()
{
  return sub_10004074C(&qword_1000CCC10, &qword_1000CCC18);
}

unint64_t sub_100060A98()
{
  unint64_t result;

  result = qword_1000CCC20;
  if (!qword_1000CCC20)
  {
    result = swift_getWitnessTable(&unk_100087B90, &type metadata for ViewServiceExperienceType);
    atomic_store(result, (unint64_t *)&qword_1000CCC20);
  }
  return result;
}

unint64_t sub_100060ADC()
{
  unint64_t result;

  result = qword_1000CCC28;
  if (!qword_1000CCC28)
  {
    result = swift_getWitnessTable(&unk_100087B18, &type metadata for ViewServiceExperienceType);
    atomic_store(result, (unint64_t *)&qword_1000CCC28);
  }
  return result;
}

unint64_t sub_100060B20()
{
  unint64_t result;

  result = qword_1000CCC30;
  if (!qword_1000CCC30)
  {
    result = swift_getWitnessTable(&unk_1000879C8, &type metadata for HandoffExperienceType);
    atomic_store(result, (unint64_t *)&qword_1000CCC30);
  }
  return result;
}

uint64_t sub_100060B64()
{
  uint64_t result;

  result = SBUIIsSystemApertureEnabled();
  byte_1000DF5F8 = result;
  return result;
}

uint64_t sub_100060B80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;

  v44 = sub_100004B18(&qword_1000CCD20);
  v39 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100004B18(&qword_1000CCD28);
  v3 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v48 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  v6 = __chkstk_darwin(v5);
  v49 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - v8;
  v10 = _s8CardInfoOMa(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004B18(&qword_1000CCD30);
  v46 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  sub_100006914(a1, v17);
  v18 = sub_100061CBC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s8CardInfoO10CodingKeysON, &_s8CardInfoO10CodingKeysON, v18, v17, v16);
  sub_100061DCC(v47, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    v19 = v39;
    v21 = *(_QWORD *)v12;
    v20 = *((_QWORD *)v12 + 1);
    v22 = *((_QWORD *)v12 + 2);
    v23 = *((_QWORD *)v12 + 3);
    v55 = 1;
    v24 = sub_100061D00();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s8CardInfoO20MediaRouteCodingKeysON, &v55, v13, &_s8CardInfoO20MediaRouteCodingKeysON, v24);
    v54 = 0;
    v25 = v45;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v20, &v54, v44);
    if (v25)
    {
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v20);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v43, v44);
    }
    else
    {
      swift_bridgeObjectRelease(v20);
      v53 = 1;
      v35 = v43;
      v36 = v44;
      KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v53, v44);
      swift_bridgeObjectRelease(v23);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v35, v36);
    }
  }
  else
  {
    v47 = v3;
    v26 = &v12[*(int *)(sub_100004B18(&qword_1000CCC38) + 48)];
    v27 = v40;
    v28 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v29 = v12;
    v30 = v41;
    v28(v9, v29, v41);
    v28(v49, v26, v30);
    v52 = 0;
    v31 = sub_100061D88();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s8CardInfoO17HomekitCodingKeysON, &v52, v13, &_s8CardInfoO17HomekitCodingKeysON, v31);
    v51 = 0;
    sub_100061E10(&qword_1000CCD38, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = v42;
    v33 = v45;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v9);
    if (!v33)
    {
      v50 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)(v49);
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v32);
    v34 = *(void (**)(char *, uint64_t))(v27 + 8);
    v34(v49, v30);
    v34(v9, v30);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v15, v13);
}

uint64_t sub_100060F6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;

  v60 = a2;
  v67 = sub_100004B18(&qword_1000CCCE8);
  v62 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v64 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100004B18(&qword_1000CCCF0);
  v61 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v66 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000CCCF8);
  v65 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = _s8CardInfoOMa(0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v9);
  v14 = (uint64_t *)((char *)&v56 - v13);
  __chkstk_darwin(v12);
  v16 = (char *)&v56 - v15;
  v17 = a1[3];
  v18 = a1[4];
  v68 = a1;
  sub_100006914(a1, v17);
  v19 = sub_100061CBC();
  v20 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s8CardInfoO10CodingKeysON, &_s8CardInfoO10CodingKeysON, v19, v17, v18);
  if (!v20)
  {
    v57 = v11;
    v58 = v16;
    v59 = v14;
    v22 = v66;
    v21 = v67;
    v69 = v8;
    v23 = KeyedDecodingContainer.allKeys.getter(v5);
    v24 = v23;
    v25 = v5;
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      if ((*(_BYTE *)(v23 + 32) & 1) != 0)
      {
        v75 = 1;
        v26 = sub_100061D00();
        v27 = v64;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s8CardInfoO20MediaRouteCodingKeysON, &v75, v25, &_s8CardInfoO20MediaRouteCodingKeysON, v26);
        v74 = 0;
        v28 = v21;
        v29 = v27;
        v40 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v21);
        v42 = v41;
        v73 = 1;
        v47 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v21);
        v48 = v29;
        v50 = v49;
        (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v28);
        swift_bridgeObjectRelease(v24);
        (*(void (**)(char *, uint64_t))(v65 + 8))(v7, v25);
        v51 = v57;
        *v57 = v40;
        v51[1] = v42;
        v51[2] = v47;
        v51[3] = v50;
        v52 = v51;
        v53 = v69;
        v54 = 1;
      }
      else
      {
        v72 = 0;
        v35 = sub_100061D88();
        v36 = v22;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&_s8CardInfoO17HomekitCodingKeysON, &v72, v25, &_s8CardInfoO17HomekitCodingKeysON, v35);
        v67 = v25;
        v37 = type metadata accessor for UUID(0);
        v71 = 0;
        sub_100061E10(&qword_1000CCD18, (uint64_t)&protocol conformance descriptor for UUID);
        v51 = v59;
        v38 = v36;
        v39 = v63;
        KeyedDecodingContainer.decode<A>(_:forKey:)(v59, v37);
        v44 = (uint64_t *)((char *)v51 + *(int *)(sub_100004B18(&qword_1000CCC38) + 48));
        v70 = 1;
        KeyedDecodingContainer.decode<A>(_:forKey:)(v44, v37);
        v45 = v39;
        v46 = v65;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v38, v45);
        swift_bridgeObjectRelease(v24);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v7, v67);
        v52 = v51;
        v53 = v69;
        v54 = 0;
      }
      swift_storeEnumTagMultiPayload(v52, v53, v54);
      v55 = (uint64_t)v58;
      sub_100061D44((uint64_t)v51, (uint64_t)v58);
      sub_100061D44(v55, v60);
    }
    else
    {
      v30 = type metadata accessor for DecodingError(0);
      swift_allocError(v30, &protocol witness table for DecodingError, 0, 0);
      v32 = v31;
      sub_100004B18(&qword_1000C7E90);
      *v32 = v69;
      v33 = KeyedDecodingContainer.codingPath.getter(v25);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v33, 0xD00000000000002BLL, 0x80000001000907B0, 0);
      v34 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, enum case for DecodingError.typeMismatch(_:), v30);
      swift_willThrow(v34);
      swift_bridgeObjectRelease(v24);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v7, v25);
    }
  }
  return sub_10000697C(v68);
}

uint64_t sub_1000614E4()
{
  _BYTE *v0;

  if (*v0)
    return 0x756F52616964656DLL;
  else
    return 0x74696B656D6F68;
}

uint64_t sub_100061524@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000621C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100061548(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061CBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061570(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061CBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100061598()
{
  _BYTE *v0;

  if (*v0)
    return 0x4449656D6F68;
  else
    return 0x726F737365636361;
}

uint64_t sub_1000615D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000622C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000615FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061D88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100061624(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061D88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006164C()
{
  _BYTE *v0;

  if (*v0)
    return 1701667182;
  else
    return 25705;
}

uint64_t sub_100061674@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000623C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100061698(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061D00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000616C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100061D00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000616E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100060F6C(a1, a2);
}

uint64_t sub_1000616FC(_QWORD *a1)
{
  return sub_100060B80(a1);
}

uint64_t *sub_100061710(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[2];
      v9 = a2[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      v14 = type metadata accessor for UUID(0);
      v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(a1, a2, v14);
      v16 = sub_100004B18(&qword_1000CCC38);
      v15((uint64_t *)((char *)a1 + *(int *)(v16 + 48)), (uint64_t *)((char *)a2 + *(int *)(v16 + 48)), v14);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100061808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v4 = type metadata accessor for UUID(0);
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
    v6(a1, v4);
    v5 = a1 + *(int *)(sub_100004B18(&qword_1000CCC38) + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(v5, v4);
  }
}

_QWORD *sub_100061898(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[2];
    v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    v9 = a1;
    v10 = a3;
    v11 = 1;
  }
  else
  {
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(a1, a2, v12);
    v14 = sub_100004B18(&qword_1000CCC38);
    v13((_QWORD *)((char *)a1 + *(int *)(v14 + 48)), (_QWORD *)((char *)a2 + *(int *)(v14 + 48)), v12);
    v9 = a1;
    v10 = a3;
    v11 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v10, v11);
  return a1;
}

_QWORD *sub_100061964(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v13;

  if (a1 != a2)
  {
    sub_100061A50((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = a2[1];
      a1[1] = v6;
      a1[2] = a2[2];
      v7 = a2[3];
      a1[3] = v7;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      v8 = a1;
      v9 = a3;
      v10 = 1;
    }
    else
    {
      v11 = type metadata accessor for UUID(0);
      v12 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      v13 = sub_100004B18(&qword_1000CCC38);
      v12((_QWORD *)((char *)a1 + *(int *)(v13 + 48)), (_QWORD *)((char *)a2 + *(int *)(v13 + 48)), v11);
      v8 = a1;
      v9 = a3;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100061A50(uint64_t a1)
{
  uint64_t v2;

  v2 = _s8CardInfoOMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s8CardInfoOMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CCCB0;
  if (!qword_1000CCCB0)
    return swift_getSingletonMetadata(a1, &_s8CardInfoOMn);
  return result;
}

char *sub_100061AC8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    v8 = sub_100004B18(&qword_1000CCC38);
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

char *sub_100061B7C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;

  if (a1 != a2)
  {
    sub_100061A50((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for UUID(0);
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      v8 = sub_100004B18(&qword_1000CCC38);
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100061C40(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, *(_QWORD *)(result - 8) + 64);
    v5[0] = v4;
    v5[1] = " ";
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v5);
    return 0;
  }
  return result;
}

unint64_t sub_100061CBC()
{
  unint64_t result;

  result = qword_1000CCD00;
  if (!qword_1000CCD00)
  {
    result = swift_getWitnessTable(&unk_100087F90, &_s8CardInfoO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD00);
  }
  return result;
}

unint64_t sub_100061D00()
{
  unint64_t result;

  result = qword_1000CCD08;
  if (!qword_1000CCD08)
  {
    result = swift_getWitnessTable(&unk_100087F40, &_s8CardInfoO20MediaRouteCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD08);
  }
  return result;
}

uint64_t sub_100061D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8CardInfoOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100061D88()
{
  unint64_t result;

  result = qword_1000CCD10;
  if (!qword_1000CCD10)
  {
    result = swift_getWitnessTable(&unk_100087EF0, &_s8CardInfoO17HomekitCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD10);
  }
  return result;
}

uint64_t sub_100061DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8CardInfoOMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100061E10(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *_s8CardInfoO10CodingKeysOMa()
{
  return &_s8CardInfoO10CodingKeysON;
}

ValueMetadata *_s8CardInfoO17HomekitCodingKeysOMa()
{
  return &_s8CardInfoO17HomekitCodingKeysON;
}

uint64_t _s8CardInfoO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100061EC0 + 4 * byte_100087BC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100061EF4 + 4 * byte_100087BC0[v4]))();
}

uint64_t sub_100061EF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061EFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100061F04);
  return result;
}

uint64_t sub_100061F10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100061F18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100061F1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061F24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8CardInfoO20MediaRouteCodingKeysOMa()
{
  return &_s8CardInfoO20MediaRouteCodingKeysON;
}

unint64_t sub_100061F44()
{
  unint64_t result;

  result = qword_1000CCD40;
  if (!qword_1000CCD40)
  {
    result = swift_getWitnessTable(&unk_100087D58, &_s8CardInfoO20MediaRouteCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD40);
  }
  return result;
}

unint64_t sub_100061F8C()
{
  unint64_t result;

  result = qword_1000CCD48;
  if (!qword_1000CCD48)
  {
    result = swift_getWitnessTable(&unk_100087E10, &_s8CardInfoO17HomekitCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD48);
  }
  return result;
}

unint64_t sub_100061FD4()
{
  unint64_t result;

  result = qword_1000CCD50;
  if (!qword_1000CCD50)
  {
    result = swift_getWitnessTable(&unk_100087EC8, &_s8CardInfoO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD50);
  }
  return result;
}

unint64_t sub_10006201C()
{
  unint64_t result;

  result = qword_1000CCD58;
  if (!qword_1000CCD58)
  {
    result = swift_getWitnessTable(&unk_100087D80, &_s8CardInfoO17HomekitCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD58);
  }
  return result;
}

unint64_t sub_100062064()
{
  unint64_t result;

  result = qword_1000CCD60;
  if (!qword_1000CCD60)
  {
    result = swift_getWitnessTable(&unk_100087DA8, &_s8CardInfoO17HomekitCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD60);
  }
  return result;
}

unint64_t sub_1000620AC()
{
  unint64_t result;

  result = qword_1000CCD68;
  if (!qword_1000CCD68)
  {
    result = swift_getWitnessTable(&unk_100087CC8, &_s8CardInfoO20MediaRouteCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD68);
  }
  return result;
}

unint64_t sub_1000620F4()
{
  unint64_t result;

  result = qword_1000CCD70;
  if (!qword_1000CCD70)
  {
    result = swift_getWitnessTable(&unk_100087CF0, &_s8CardInfoO20MediaRouteCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD70);
  }
  return result;
}

unint64_t sub_10006213C()
{
  unint64_t result;

  result = qword_1000CCD78;
  if (!qword_1000CCD78)
  {
    result = swift_getWitnessTable(&unk_100087E38, &_s8CardInfoO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD78);
  }
  return result;
}

unint64_t sub_100062184()
{
  unint64_t result;

  result = qword_1000CCD80;
  if (!qword_1000CCD80)
  {
    result = swift_getWitnessTable(&unk_100087E60, &_s8CardInfoO10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1000CCD80);
  }
  return result;
}

uint64_t sub_1000621C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x74696B656D6F68 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74696B656D6F68, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x756F52616964656DLL && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease(0xEA00000000006574);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756F52616964656DLL, 0xEA00000000006574, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000622C4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x726F737365636361 && a2 == 0xEB00000000444979)
  {
    v5 = 0xEB00000000444979;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xEB00000000444979, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4449656D6F68 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4449656D6F68, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000623C4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10006248C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  __chkstk_darwin(a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v2, a1);
  return AnyView.init<A>(_:)(v6, a1, a2);
}

uint64_t AnyTransition.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100062574(a1);
  swift_bridgeObjectRelease(a1);
  return v2;
}

uint64_t sub_100062538@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100062574(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100062574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = static AnyTransition.identity.getter();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return v2;
  swift_retain(v2);
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  v6 = v3;
  do
  {
    v7 = v6;
    v8 = *(_QWORD *)(a1 + 8 * v5++ + 32);
    v9 = swift_retain(v8);
    v6 = AnyTransition.combined(with:)(v9, v6);
    swift_release(v7);
    swift_release(v8);
  }
  while (v4 != v5);
  swift_release(v3);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_10006262C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for DaemonError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for DaemonError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonError()
{
  return &type metadata for DaemonError;
}

uint64_t sub_100062788(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  char v20;

  v17 = a4;
  v8 = sub_100004B18(&qword_1000CCDA8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_100006914(a1, v12);
  v14 = sub_100062FB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DaemonError.CodingKeys, &type metadata for DaemonError.CodingKeys, v14, v12, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v8);
  if (!v4)
  {
    v19 = v17;
    v18 = 1;
    sub_10006303C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1000628C4()
{
  _BYTE *v0;

  if (*v0)
    return 1684957547;
  else
    return 1868983913;
}

uint64_t sub_1000628E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100062D38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006290C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062FB4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062934(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062FB4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006295C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062AB0();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100062984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100062AB0();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000629B0()
{
  uint64_t v0;

  return qword_100088390[*(char *)(v0 + 16)];
}

uint64_t sub_1000629C8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  v3._countAndFlagsBits = sub_100062AF4(*(_BYTE *)(v0 + 16));
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 656423463;
  v5._object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v2);
  v6._countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v2);
  v7._countAndFlagsBits = 39;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 39;
}

uint64_t sub_100062A64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_100062E08(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100062A90(_QWORD *a1)
{
  uint64_t v1;

  return sub_100062788(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

unint64_t sub_100062AB0()
{
  unint64_t result;

  result = qword_1000CCD88;
  if (!qword_1000CCD88)
  {
    result = swift_getWitnessTable(&unk_1000880DC, &type metadata for DaemonError);
    atomic_store(result, (unint64_t *)&qword_1000CCD88);
  }
  return result;
}

uint64_t sub_100062AF4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100062B2C + 4 * byte_100088028[a1]))(0xD000000000000010, 0x8000000100094960);
}

uint64_t sub_100062C28()
{
  return 0x6E776F6E6B6E55;
}

unint64_t sub_100062C60@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10006340C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100062C88()
{
  unsigned __int8 *v0;

  return sub_100062AF4(*v0);
}

uint64_t sub_100062C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000633C8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100062CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000633C8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100062D38(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1868983913 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1868983913, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1684957547, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100062E08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[14];
  uint64_t v14;

  v3 = sub_100004B18(&qword_1000CCD90);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  v8 = a1[4];
  sub_100006914(a1, v7);
  v9 = sub_100062FB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DaemonError.CodingKeys, &type metadata for DaemonError.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_10000697C(a1);
  }
  else
  {
    BYTE1(v14) = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v14 + 1, v3);
    v12 = v11;
    v13[13] = 1;
    sub_100062FF8();
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for DaemonError.Kind);
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    sub_10000697C(a1);
    swift_bridgeObjectRelease(v12);
  }
  return v8;
}

unint64_t sub_100062FB4()
{
  unint64_t result;

  result = qword_1000CCD98;
  if (!qword_1000CCD98)
  {
    result = swift_getWitnessTable(&unk_10008833C, &type metadata for DaemonError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCD98);
  }
  return result;
}

unint64_t sub_100062FF8()
{
  unint64_t result;

  result = qword_1000CCDA0;
  if (!qword_1000CCDA0)
  {
    result = swift_getWitnessTable(&unk_100088314, &type metadata for DaemonError.Kind);
    atomic_store(result, (unint64_t *)&qword_1000CCDA0);
  }
  return result;
}

unint64_t sub_10006303C()
{
  unint64_t result;

  result = qword_1000CCDB0;
  if (!qword_1000CCDB0)
  {
    result = swift_getWitnessTable(&unk_1000882EC, &type metadata for DaemonError.Kind);
    atomic_store(result, (unint64_t *)&qword_1000CCDB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DaemonError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000630CC + 4 * byte_10008803A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100063100 + 4 * byte_100088035[v4]))();
}

uint64_t sub_100063100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100063110);
  return result;
}

uint64_t sub_10006311C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100063124);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100063128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DaemonError.CodingKeys()
{
  return &type metadata for DaemonError.CodingKeys;
}

uint64_t getEnumTagSinglePayload for DaemonError.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonError.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_100063228 + 4 * byte_100088044[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10006325C + 4 * byte_10008803F[v4]))();
}

uint64_t sub_10006325C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100063264(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006326CLL);
  return result;
}

uint64_t sub_100063278(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100063280);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_100063284(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006328C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DaemonError.Kind()
{
  return &type metadata for DaemonError.Kind;
}

unint64_t sub_1000632AC()
{
  unint64_t result;

  result = qword_1000CCDB8;
  if (!qword_1000CCDB8)
  {
    result = swift_getWitnessTable(&unk_10008820C, &type metadata for DaemonError.Kind);
    atomic_store(result, (unint64_t *)&qword_1000CCDB8);
  }
  return result;
}

unint64_t sub_1000632F4()
{
  unint64_t result;

  result = qword_1000CCDC0;
  if (!qword_1000CCDC0)
  {
    result = swift_getWitnessTable(&unk_1000882C4, &type metadata for DaemonError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCDC0);
  }
  return result;
}

unint64_t sub_10006333C()
{
  unint64_t result;

  result = qword_1000CCDC8;
  if (!qword_1000CCDC8)
  {
    result = swift_getWitnessTable(&unk_100088234, &type metadata for DaemonError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCDC8);
  }
  return result;
}

unint64_t sub_100063384()
{
  unint64_t result;

  result = qword_1000CCDD0;
  if (!qword_1000CCDD0)
  {
    result = swift_getWitnessTable(&unk_10008825C, &type metadata for DaemonError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CCDD0);
  }
  return result;
}

unint64_t sub_1000633C8()
{
  unint64_t result;

  result = qword_1000CCDD8;
  if (!qword_1000CCDD8)
  {
    result = swift_getWitnessTable(&unk_100088194, &type metadata for DaemonError.Kind);
    atomic_store(result, (unint64_t *)&qword_1000CCDD8);
  }
  return result;
}

unint64_t sub_10006340C(unint64_t result)
{
  if (result >= 0xD)
    return 13;
  return result;
}

uint64_t sub_10006341C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_100063424()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v8;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = v0;
    v8 = *(id *)(v0 + 24);
    v4 = sub_100004B18(&qword_1000C7058);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v5 = v8;
    v2 = CurrentValueSubject.init(_:)(&v8);
    v6 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v2;
    swift_retain(v2);
    swift_release(v6);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_1000634B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = v0;
    v7 = *(_BYTE *)(v0 + 24);
    v4 = sub_100004B18(&qword_1000C6E08);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v2 = CurrentValueSubject.init(_:)(&v7);
    v5 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v2;
    swift_retain(v2);
    swift_release(v5);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

void *sub_100063540()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  NSString v8;
  unsigned int v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = v0;
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v2._countAndFlagsBits = 0x56746E6572727563;
  v2._object = (void *)0xEE00292865756C61;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x732E666C6573203ALL;
  v3._object = (void *)0xED00003D65746174;
  String.append(_:)(v3);
  v4 = *(_BYTE *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 32);
  LOBYTE(v13) = v4;
  v5 = sub_100004B18(&qword_1000CD128);
  _print_unlocked<A, B>(_:_:)(&v12, &v14, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6 = v15;
  v7 = sub_1000535AC();
  swift_bridgeObjectRetain(v6);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v7, "ulog:message:", 40, v8, v12, v13, v14);
  swift_bridgeObjectRelease(v6);

  v9 = *(unsigned __int8 *)(v1 + 40);
  if (v9 > 0xFD)
    return 0;
  v10 = *(void **)(v1 + 32);
  sub_1000177C4(v10, v9 & 1);
  return v10;
}

void sub_10006369C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100063710()
{
  uint64_t v0;

  sub_100061A50(v0 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel_cardInfo);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mediaTransferStatus));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mrResponse));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100063760()
{
  return type metadata accessor for HomeAccessoryViewHandleModel(0);
}

uint64_t type metadata accessor for HomeAccessoryViewHandleModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CCE18;
  if (!qword_1000CCE18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HomeAccessoryViewHandleModel);
  return result;
}

uint64_t sub_1000637A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = _s8CardInfoOMa(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for HomeAccessoryViewHandleState()
{
  return objc_opt_self(_TtC13PCViewService28HomeAccessoryViewHandleState);
}

uint64_t *sub_100063840(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  v6 = *v2;
  v3[4] = 0;
  v7 = sub_100004B18(&qword_1000CD140);
  v8 = swift_allocObject(v7, 32, 7);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v3[5] = v8;
  v3[6] = 0;
  v3[7] = 0;
  v3[8] = (uint64_t)&_swiftEmptySetSingleton;
  v3[9] = 0;
  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, v6, (uint64_t)&off_1000B85A8);
  v3[2] = a1;
  v3[3] = a2;
  return v3;
}

_QWORD *sub_1000638CC()
{
  _QWORD *v0;
  id v1;
  NSString v2;

  v1 = sub_100053530();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  sub_100007A90(v0[6], v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[9]);
  return v0;
}

uint64_t sub_100063968()
{
  uint64_t v0;

  sub_1000638CC();
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for HomeAccessoryViewHandle()
{
  return objc_opt_self(_TtC13PCViewService23HomeAccessoryViewHandle);
}

uint64_t sub_1000639A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[9];
  if (v1)
  {
    v2 = v0[9];
  }
  else
  {
    v3 = v0;
    v4 = *v0;
    v5 = swift_allocObject(&unk_1000B8610, 24, 7);
    swift_weakInit(v5 + 16, v3);
    v6 = swift_allocObject(&unk_1000B8638, 32, 7);
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v4;
    v7 = sub_100004B18(&qword_1000CC268);
    v2 = swift_allocObject(v7, 56, 7);
    v8 = *(_QWORD *)v2;
    *(_QWORD *)(v2 + 32) = 0;
    *(_BYTE *)(v2 + 40) = -1;
    *(_QWORD *)(v2 + 48) = &_swiftEmptyArrayStorage;
    sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, v8, (uint64_t)&off_1000B7310);
    *(_QWORD *)(v2 + 16) = sub_100065044;
    *(_QWORD *)(v2 + 24) = v6;
    v9 = v3[9];
    v3[9] = v2;
    swift_retain(v2);
    swift_release(v9);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_100063AA8(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[24];

  v8 = _s8CardInfoOMa(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_1000B8660, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  a3 += 16;
  swift_beginAccess(a3, v23, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v13 = Strong;
    sub_100061DCC(*(_QWORD *)(Strong + 16) + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel_cardInfo, (uint64_t)v10);
    v14 = swift_allocObject(&unk_1000B8610, 24, 7);
    swift_weakInit(v14 + 16, v13);
    v15 = (_QWORD *)swift_allocObject(&unk_1000B8688, 48, 7);
    v15[2] = v14;
    v15[3] = sub_10006504C;
    v15[4] = v11;
    v15[5] = a4;
    swift_retain(a2);
    swift_retain(v14);
    sub_100065430((uint64_t)v10, (uint64_t)sub_1000650B0, (uint64_t)v15);
    swift_release(v15);
    sub_100061A50((uint64_t)v10);
    swift_release(v14);
    return swift_release(v13);
  }
  else
  {
    swift_retain(a2);
    swift_release(v11);
    v17 = sub_10000B598();
    v18 = swift_allocError(&type metadata for DaemonError, v17, 0, 0);
    *(_QWORD *)v19 = 0;
    *(_QWORD *)(v19 + 8) = 0xE000000000000000;
    *(_BYTE *)(v19 + 16) = 9;
    v21 = v18;
    v22 = 1;
    a1(&v21);
    return swift_errorRelease(v18);
  }
}

void sub_100063C70(void *a1, char a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  id v13;
  NSString v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  NSString v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  NSString v30;
  uint64_t v31;
  void *v32;
  char v33;
  id v34;
  NSString v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  _BYTE v41[40];
  __int128 v42;
  uint64_t v43;
  _BYTE v44[24];
  _OWORD v45[2];
  uint64_t v46;
  __int128 v47;

  v10 = a3 + 16;
  swift_beginAccess(a3 + 16, v44, 0, 0);
  Strong = swift_weakLoadStrong(v10);
  if (!Strong)
  {
    v23 = sub_10000B598();
    v24 = swift_allocError(&type metadata for DaemonError, v23, 0, 0);
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0xE000000000000000;
    *(_BYTE *)(v25 + 16) = 9;
    a4(v24, 1);
    swift_errorRelease(v24);
    return;
  }
  v12 = Strong;
  if ((a2 & 1) != 0)
  {
    *(_QWORD *)v41 = 0;
    *(_QWORD *)&v41[8] = 0xE000000000000000;
    swift_errorRetain(a1);
    _StringGuts.grow(_:)(33);
    v26._countAndFlagsBits = 0xD00000000000001FLL;
    v26._object = (void *)0x8000000100094E00;
    String.append(_:)(v26);
    *(_QWORD *)&v45[0] = a1;
    v27 = sub_100004B18(&qword_1000C6668);
    _print_unlocked<A, B>(_:_:)(v45, v41, v27, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v28 = *(_QWORD *)&v41[8];
    v29 = sub_100053530();
    swift_bridgeObjectRetain(v28);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    objc_msgSend(v29, "ulog:message:", 40, v30);
    swift_bridgeObjectRelease(v28);

    v31 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16);
    sub_1000177C4(a1, 1);
    swift_retain(v31);
    sub_100074F9C((uint64_t)a1, v45);
    *(_OWORD *)v41 = v45[0];
    *(_OWORD *)&v41[16] = v45[1];
    *(_QWORD *)&v41[32] = v46;
    v42 = v47;
    LOBYTE(v43) = 0;
    PassthroughSubject.send(_:)(v41);
    swift_release(v31);
    sub_1000655C4(v45);
    swift_errorRetain(a1);
    a4((uint64_t)a1, 1);
    swift_release(v12);
    sub_1000177D0(a1, 1);
    v32 = a1;
    v33 = 1;
  }
  else
  {
    sub_1000177C4(a1, 0);
    v13 = sub_100053530();
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "ulog:message:", 40, v14);

    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 16);
    *(_QWORD *)v41 = 1;
    memset(&v41[8], 0, 32);
    v42 = 0u;
    LOBYTE(v43) = 2;
    swift_retain(v15);
    PassthroughSubject.send(_:)(v41);
    swift_release(v15);
    v16 = objc_msgSend(a1, "topViewController", *(_OWORD *)v41, *(_QWORD *)&v41[16], *(_OWORD *)&v41[24], v42, v43);
    if (!v16)
    {
      v34 = sub_100053530();
      v35 = String._bridgeToObjectiveC()();
      objc_msgSend(v34, "ulog:message:", 60, v35);

      v36 = sub_10000B598();
      v37 = swift_allocError(&type metadata for DaemonError, v36, 0, 0);
      *(_QWORD *)v38 = 0;
      *(_QWORD *)(v38 + 8) = 0xE000000000000000;
      *(_BYTE *)(v38 + 16) = 9;
      a4(v37, 1);
      swift_errorRelease(v37);
      sub_1000177D0(a1, 0);
      swift_release(v12);
      return;
    }
    v17 = v16;
    objc_msgSend(v16, "removeFromParentViewController");
    v18 = objc_msgSend((id)objc_opt_self(HUHomePodMediaUIVendor), "sharedInstance");
    v19 = objc_msgSend(v18, "nowPlayingViewController");

    if (v19)
    {
      v20 = swift_allocObject(&unk_1000B8610, 24, 7);
      swift_weakInit(v20 + 16, v12);
      v21 = swift_allocObject(&unk_1000B8728, 32, 7);
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = a6;
      *(_QWORD *)&v41[32] = sub_100065630;
      *(_QWORD *)&v42 = v21;
      *(_QWORD *)v41 = _NSConcreteStackBlock;
      *(_QWORD *)&v41[8] = 1107296256;
      *(_QWORD *)&v41[16] = sub_100064268;
      *(_QWORD *)&v41[24] = &unk_1000B8740;
      v22 = _Block_copy(v41);
      swift_release(v42);
      objc_msgSend(v19, "setCoordinatedDismissalBlock:", v22);
      _Block_release(v22);
    }
    else
    {
      v39 = sub_100053530();
      v19 = String._bridgeToObjectiveC()();
      objc_msgSend(v39, "ulog:message:", 60, v19);

    }
    v40 = v17;
    a4((uint64_t)v17, 0);

    swift_release(v12);
    v32 = a1;
    v33 = 0;
  }
  sub_1000177D0(v32, v33);
}

void sub_100064158(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  void (*v10)(uint64_t (*)(), uint64_t);
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v13, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong
    && (v9 = Strong,
        v10 = *(void (**)(uint64_t (*)(), uint64_t))(Strong + 48),
        v11 = *(_QWORD *)(Strong + 56),
        sub_100007A80((uint64_t)v10, v11),
        swift_release(v9),
        v10))
  {
    v12 = swift_allocObject(&unk_1000B87A0, 32, 7);
    *(_QWORD *)(v12 + 16) = a1;
    *(_QWORD *)(v12 + 24) = a2;
    sub_100007A80((uint64_t)a1, a2);
    v10(sub_100065694, v12);
    swift_release(v12);
    sub_100007A90((uint64_t)v10, v11);
  }
  else
  {
    sub_10003DE94(60, 0xD00000000000002CLL, (void *)0x8000000100094EC0, 0, a4, (uint64_t)&off_1000B85A8);
    if (a1)
      a1();
  }
}

uint64_t sub_100064268(uint64_t a1, void *aBlock)
{
  uint64_t v2;
  void (*v3)(void *, uint64_t);
  void *v4;
  uint64_t v5;

  v3 = *(void (**)(void *, uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = _Block_copy(aBlock);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1000B8778, 24, 7);
    *(_QWORD *)(v5 + 16) = v4;
    v4 = sub_10006565C;
  }
  else
  {
    v5 = 0;
  }
  swift_retain(v2);
  v3(v4, v5);
  sub_100007A90((uint64_t)v4, v5);
  return swift_release(v2);
}

void sub_1000642EC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  NSString v5;
  uint64_t v6;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  NSString v25;
  id v26;
  NSString v27;
  void *v28;
  id v29;
  unint64_t v30;

  v2 = v1;
  v4 = sub_100053530();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "ulog:message:", 40, v5);

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v6 = *(_QWORD *)(qword_1000DF570 + 512);
  swift_retain(v6);
  v7 = sub_100020AA8();
  swift_release(v6);
  if ((v7 & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v2 + 40) + 24))
  {
    v8 = sub_100053530();
    v25 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "ulog:message:", 40, v25, v25);
LABEL_6:

    return;
  }
  v9 = objc_msgSend((id)objc_opt_self(HUHomePodMediaUIVendor), "sharedInstance");
  v10 = objc_msgSend(v9, "nowPlayingViewController");

  if (!v10)
  {
    v8 = sub_100053530();
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "ulog:message:", 60, v27, v27);
    goto LABEL_6;
  }
  v11 = objc_allocWithZone((Class)MRUNowPlayingQueueHandoffCoordinator);
  v12 = a1;
  v13 = objc_msgSend(v11, "init");
  objc_msgSend(v13, "setResponse:", v12);
  objc_msgSend(v13, "setHideArtwork:", 0);

  v14 = *(_QWORD *)(v2 + 40);
  v15 = *(void **)(v14 + 24);
  *(_QWORD *)(v14 + 24) = v13;
  v16 = v13;
  swift_retain(v14);

  v17 = sub_100063424();
  v29 = *(id *)(v14 + 24);
  v18 = v29;
  CurrentValueSubject.send(_:)(&v29);
  swift_release(v14);

  swift_release(v17);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v19._countAndFlagsBits = 0xD000000000000033;
  v19._object = (void *)0x8000000100094CF0;
  String.append(_:)(v19);
  v28 = a1;
  v20 = sub_10000AA28(0, (unint64_t *)&qword_1000C7EE0, MRNowPlayingPlayerResponse_ptr);
  v21 = sub_100064FC8();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v28, v20, v21);
  v22 = v30;
  v23 = sub_100053530();
  swift_bridgeObjectRetain(v22);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  objc_msgSend(v23, "ulog:message:", 40, v24);
  swift_bridgeObjectRelease(v22);

  objc_msgSend(v10, "initiateQueueHandoffTansitionWithCoordinator:", v16);
  objc_msgSend(v16, "setupTransition");
  objc_msgSend(v16, "beginTransition");

}

void sub_100064680()
{
  uint64_t v0;
  id v1;
  NSString v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSString v10;
  id v11;

  v1 = sub_100053530();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v3 = *(void **)(*(_QWORD *)(v0 + 40) + 24);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v4, "endTransition");
    objc_msgSend(v4, "completeHandoff");
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(void **)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    swift_retain(v5);

    v7 = sub_100063424();
    v11 = *(id *)(v5 + 24);
    v8 = v11;
    CurrentValueSubject.send(_:)(&v11);

    swift_release(v5);
    swift_release(v7);
  }
  else
  {
    v9 = sub_100053530();
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "ulog:message:", 60, v10);

  }
}

void sub_1000647DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  NSString v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  NSString v11;

  v5 = *v2;
  v6 = sub_100053530();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

  v8 = v2[4];
  if (v8)
  {
    swift_retain(v2[4]);
    sub_10003DC3C(0xD00000000000001DLL, (void *)0x800000010008FDA0, 0, v5, (uint64_t)&off_1000B85A8);
    v9 = (_QWORD *)swift_allocObject(&unk_1000B85E8, 40, 7);
    v9[2] = a1;
    v9[3] = a2;
    v9[4] = v5;
    swift_retain(a2);
    sub_100054AC8((uint64_t)sub_100064F6C, (uint64_t)v9);
    swift_release(v8);
    swift_release(v9);
  }
  else
  {
    v10 = sub_100053530();
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "ulog:message:", 60, v11);

  }
}

void sub_100064950(char a1)
{
  uint64_t v1;
  char v2;
  id v3;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;

  v2 = a1 & 1;
  v3 = sub_100053530();
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "ulog:message:", 40, v4);

  v5 = sub_100064A5C(v2);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v5;
    swift_retain(v5);
    swift_release(v7);
    sub_1000546B4();
    swift_release(v6);
  }
  else
  {
    v8 = sub_100053530();
    v9 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "ulog:message:", 60, v9);

  }
}

uint64_t sub_100064A5C(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v24;
  id v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;

  v3 = *v1;
  v4 = sub_100053530();
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "ulog:message:", 40, v5);

  v6 = sub_1000639A8();
  v7 = sub_100063540();
  v9 = v8;
  v10 = ~v8;
  swift_release(v6);
  if (!v10)
    goto LABEL_10;
  if ((v9 & 1) != 0
    || (v11 = objc_opt_self(HUCardViewController), (v12 = swift_dynamicCastObjCClass(v7, v11)) == 0))
  {
    sub_100064F30(v7, v9);
LABEL_10:
    sub_10003DE94(60, 0xD000000000000016, (void *)0x8000000100094B00, 0, v3, (uint64_t)&off_1000B85A8);
    return 0;
  }
  v13 = v12;
  v14 = objc_msgSend((id)objc_opt_self(HUHomePodMediaUIVendor), "sharedInstance");
  v15 = objc_msgSend(v14, "nowPlayingViewController");

  if (!v15)
  {
    v26 = sub_100053530();
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v26, "ulog:message:", 60, v27);

    sub_100064F30(v7, v9);
    return 0;
  }
  sub_1000177C4(v7, 0);
  v16 = objc_msgSend(v15, "artworkView");
  v17 = type metadata accessor for ArtworkAnimation();
  v18 = swift_allocObject(v17, 128, 7);
  *(_QWORD *)(v18 + 32) = 0;
  *(_OWORD *)(v18 + 40) = xmmword_100088400;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v18 + 72) = _Q0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = 0;
  v30 = _Q0;
  *(_OWORD *)(v18 + 104) = _Q0;
  *(_QWORD *)(v18 + 120) = sub_10003EFE8((uint64_t)&_swiftEmptyArrayStorage);
  *(_QWORD *)(v18 + 16) = v13;
  *(_QWORD *)(v18 + 24) = v16;
  *(_QWORD *)(v18 + 32) = 0;
  if ((a1 & 1) != 0)
  {
    if (qword_1000C5D90 != -1)
      swift_once(&qword_1000C5D90, sub_100054524);
    v24 = &xmmword_1000DF5D8;
  }
  else
  {
    if (qword_1000C5D88 != -1)
      swift_once(&qword_1000C5D88, sub_100054440);
    v24 = &xmmword_1000DF5B8;
  }
  v28 = *((_QWORD *)v24 + 2);
  v29 = *((_QWORD *)v24 + 3);
  *(_OWORD *)(v18 + 56) = *v24;
  *(_QWORD *)(v18 + 72) = v28;
  *(_QWORD *)(v18 + 80) = v29;
  sub_100064F30(v7, v9);

  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 96) = 0;
  *(_OWORD *)(v18 + 104) = v30;
  return v18;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewManager()
{
  return &type metadata for HomeAccessoryViewManager;
}

void sub_100064D44(void *a1, char a2, void (*a3)(void *, uint64_t))
{
  uint64_t v6;
  id v7;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v6 = 1;
  }
  else
  {
    v7 = a1;
    v6 = 0;
  }
  a3(a1, v6);
  sub_1000177D0(a1, a2 & 1);
}

void sub_100064DA0(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  id v6;
  NSString v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v6 = sub_10000519C();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

  if (a2)
  {
    swift_errorRetain(a2);
    a3(a2, 1);
    v8 = a2;
LABEL_7:
    swift_errorRelease(v8);
    return;
  }
  if (!a1)
  {
LABEL_6:
    v12 = sub_10000B598();
    v13 = swift_allocError(&type metadata for DaemonError, v12, 0, 0);
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0xE000000000000000;
    *(_BYTE *)(v14 + 16) = 9;
    a3(v13, 1);
    v8 = v13;
    goto LABEL_7;
  }
  v9 = objc_allocWithZone((Class)NSNull);
  v10 = a1;
  v11 = objc_msgSend(v9, "init");
  sub_10000AA28(0, &qword_1000CD138, NSObject_ptr);
  LOBYTE(v9) = static NSObject.== infix(_:_:)(v10, v11);

  if ((v9 & 1) != 0)
  {

    goto LABEL_6;
  }
  v15 = v10;
  a3((uint64_t)a1, 0);

}

void sub_100064F30(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_1000177D0(a1, a2 & 1);
}

uint64_t sub_100064F48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100064F6C()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(v0 + 16);
  sub_10003DC3C(0xD00000000000001ALL, (void *)0x800000010008FD50, 0, *(_QWORD *)(v0 + 32), (uint64_t)&off_1000B85A8);
  return v1();
}

unint64_t sub_100064FC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD130;
  if (!qword_1000CD130)
  {
    v1 = sub_10000AA28(255, (unint64_t *)&qword_1000C7EE0, MRNowPlayingPlayerResponse_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD130);
  }
  return result;
}

uint64_t sub_100065020()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100065044(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;

  return sub_100063AA8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10006504C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100065084()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000650B0(void *a1, char a2)
{
  uint64_t v2;

  sub_100063C70(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void sub_1000650C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSString v22;
  NSString v23;
  id v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  void *v27;
  Class isa;
  Class v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void **aBlock;
  unint64_t v39;
  void (*v40)(uint64_t, void *, void *);
  void *v41;
  void (*v42)(void *, uint64_t);
  uint64_t v43;

  v36 = a2;
  v37 = a3;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36 - v9;
  v11 = _s8CardInfoOMa(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = 0;
  v39 = 0xE000000000000000;
  v14._object = (void *)0x8000000100094D90;
  v14._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x3D6F666E69203ALL;
  v15._object = (void *)0xE700000000000000;
  String.append(_:)(v15);
  _print_unlocked<A, B>(_:_:)(a1, &aBlock, v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v16 = v39;
  v17 = sub_10000519C();
  swift_bridgeObjectRetain(v16);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  objc_msgSend(v17, "ulog:message:", 40, v18);
  swift_bridgeObjectRelease(v16);

  sub_100061DCC(a1, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    v19 = *((_QWORD *)v13 + 1);
    v20 = *((_QWORD *)v13 + 3);
    v21 = (void *)objc_opt_self(HUHomePodServiceDetails);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v24 = objc_msgSend(v21, "SAHomePodCardForMediaRoutingIdentifier:deviceName:mediaAccessoryItemType:", v22, v23, 2);

  }
  else
  {
    v25 = &v13[*(int *)(sub_100004B18(&qword_1000CCC38) + 48)];
    v26 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v26(v10, v13, v4);
    v26(v8, v25, v4);
    v27 = (void *)objc_opt_self(HUHomePodServiceDetails);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v29 = UUID._bridgeToObjectiveC()().super.isa;
    v24 = objc_msgSend(v27, "SAHomePodCardWithQuickControlsForDeviceUUID:inHomeWithUUID:", isa, v29);

    v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v8, v4);
    v30(v10, v4);
  }
  v31 = swift_allocObject(&unk_1000B86D8, 32, 7);
  v32 = v37;
  *(_QWORD *)(v31 + 16) = v36;
  *(_QWORD *)(v31 + 24) = v32;
  v42 = sub_1000655A4;
  v43 = v31;
  aBlock = _NSConcreteStackBlock;
  v39 = 1107296256;
  v40 = sub_10006369C;
  v41 = &unk_1000B86F0;
  v33 = _Block_copy(&aBlock);
  v34 = v43;
  swift_retain(v32);
  swift_release(v34);
  v35 = objc_msgSend(v24, "addCompletionBlock:", v33);
  _Block_release(v33);

}

uint64_t sub_100065430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v14 = 0;
  v15 = 0xE000000000000000;
  v6._object = (void *)0x8000000100094D70;
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x6E4964726163203ALL;
  v7._object = (void *)0xEB000000003D6F66;
  String.append(_:)(v7);
  v8 = _s8CardInfoOMa(0);
  _print_unlocked<A, B>(_:_:)(a1, &v14, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v15;
  v10 = sub_10000519C();
  swift_bridgeObjectRetain(v9);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v10, "ulog:message:", 40, v11, v14);
  swift_bridgeObjectRelease(v9);

  v12 = swift_allocObject(&unk_1000B86B0, 32, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  swift_retain(a3);
  sub_1000650C0(a1, (uint64_t)sub_100065598, v12);
  return swift_release(v12);
}

uint64_t sub_100065574()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100065598(void *a1, char a2)
{
  uint64_t v2;

  sub_100064D44(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16));
}

void sub_1000655A4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100064DA0(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000655AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000655BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_1000655C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[6];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_10006560C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100065630(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;

  sub_100064158(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100065638()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006565C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100065668()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100065694()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

_QWORD *sub_1000656D0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v90;
  uint64_t v92;
  char *__dst;
  int *__dsta;
  void *v95;
  void *v96;
  char *v97;
  uint64_t v98;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
    return v4;
  }
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  v8 = a2[4];
  v7 = (void *)a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = type metadata accessor for ActivityDisplayContext(0);
  v10 = *(int *)(v9 + 32);
  v11 = (_QWORD *)((char *)v4 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v13 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain(v8);
  v14 = v7;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
  v98 = v13;
  if (EnumCaseMultiPayload == 2)
  {
    v95 = (void *)v9;
    v21 = v12[1];
    *v11 = *v12;
    v11[1] = v21;
    v22 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v23 = (char *)v11 + v22;
    v24 = (char *)v12 + v22;
    v25 = type metadata accessor for Date(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain(v21);
    if (v27(v24, 1, v25))
    {
      v28 = sub_100004B18(&qword_1000C85A0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v9 = (uint64_t)v95;
    v13 = v98;
    v17 = v11;
    v18 = v98;
    v19 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v96 = (void *)v9;
    v29 = v12[1];
    *v11 = *v12;
    v11[1] = v29;
    v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v31 = *(int *)(v30 + 20);
    v92 = v30;
    __dst = (char *)v11 + v31;
    v32 = (char *)v12 + v31;
    v33 = type metadata accessor for Date(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    swift_bridgeObjectRetain(v29);
    if (v35(v32, 1, v33))
    {
      v36 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
    }
    v9 = (uint64_t)v96;
    v37 = *(int *)(v92 + 24);
    v38 = (_QWORD *)((char *)v11 + v37);
    v39 = (_QWORD *)((char *)v12 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain(v40);
    v17 = v11;
    v13 = v98;
    v18 = v98;
    v19 = 1;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      goto LABEL_17;
    }
    v16 = v12[1];
    *v11 = *v12;
    v11[1] = v16;
    swift_bridgeObjectRetain(v16);
    v17 = v11;
    v18 = v13;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
LABEL_17:
  v41 = *(int *)(v9 + 36);
  v42 = (_QWORD *)((char *)v4 + v41);
  v43 = (uint64_t *)((char *)a2 + v41);
  v44 = swift_getEnumCaseMultiPayload((char *)a2 + v41, v13);
  switch(v44)
  {
    case 2:
      v49 = v43[1];
      *v42 = *v43;
      v42[1] = v49;
      v50 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      v51 = (char *)v42 + v50;
      v52 = (char *)v43 + v50;
      v53 = type metadata accessor for Date(0);
      v54 = *(_QWORD *)(v53 - 8);
      v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
      swift_bridgeObjectRetain(v49);
      if (v55(v52, 1, v53))
      {
        v56 = sub_100004B18(&qword_1000C85A0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
      v47 = v98;
      v46 = v42;
      v48 = 2;
      goto LABEL_30;
    case 1:
      v57 = v43[1];
      *v42 = *v43;
      v42[1] = v57;
      v58 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v59 = *(int *)(v58 + 20);
      __dsta = (int *)v58;
      v97 = (char *)v42 + v59;
      v60 = (char *)v43 + v59;
      v61 = type metadata accessor for Date(0);
      v62 = *(_QWORD *)(v61 - 8);
      v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
      swift_bridgeObjectRetain(v57);
      if (v63(v60, 1, v61))
      {
        v64 = sub_100004B18(&qword_1000C85A0);
        memcpy(v97, v60, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v97, v60, v61);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v97, 0, 1, v61);
      }
      v65 = __dsta[6];
      v66 = (_QWORD *)((char *)v42 + v65);
      v67 = (_QWORD *)((char *)v43 + v65);
      v68 = v67[1];
      *v66 = *v67;
      v66[1] = v68;
      swift_bridgeObjectRetain(v68);
      v46 = v42;
      v47 = v98;
      v48 = 1;
      goto LABEL_30;
    case 0:
      v45 = v43[1];
      *v42 = *v43;
      v42[1] = v45;
      swift_bridgeObjectRetain(v45);
      v46 = v42;
      v47 = v13;
      v48 = 0;
LABEL_30:
      swift_storeEnumTagMultiPayload(v46, v47, v48);
      goto LABEL_31;
  }
  memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_31:
  v69 = a3[6];
  *((_BYTE *)v4 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v70 = *(void **)((char *)a2 + v69);
  *(_QWORD *)((char *)v4 + v69) = v70;
  v71 = a3[7];
  v72 = (char *)v4 + v71;
  v73 = (uint64_t)a2 + v71;
  v74 = *(void **)((char *)a2 + v71);
  v75 = v70;
  if (v74 == (void *)1)
  {
    *(_OWORD *)v72 = *(_OWORD *)v73;
  }
  else
  {
    v76 = *(_QWORD *)(v73 + 8);
    *(_QWORD *)v72 = v74;
    *((_QWORD *)v72 + 1) = v76;
    v77 = v74;
  }
  v78 = a3[8];
  v79 = (_QWORD *)((char *)v4 + v78);
  v80 = (uint64_t *)((char *)a2 + v78);
  v81 = _s8CardInfoOMa(0);
  if (swift_getEnumCaseMultiPayload(v80, v81) == 1)
  {
    v82 = v80[1];
    *v79 = *v80;
    v79[1] = v82;
    v83 = v80[2];
    v84 = v80[3];
    v79[2] = v83;
    v79[3] = v84;
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v84);
    v85 = v79;
    v86 = v81;
    v87 = 1;
  }
  else
  {
    v88 = type metadata accessor for UUID(0);
    v89 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v88 - 8) + 16);
    v89(v79, v80, v88);
    v90 = sub_100004B18(&qword_1000CCC38);
    v89((_QWORD *)((char *)v79 + *(int *)(v90 + 48)), (_QWORD *)((char *)v80 + *(int *)(v90 + 48)), v88);
    v85 = v79;
    v86 = v81;
    v87 = 0;
  }
  swift_storeEnumTagMultiPayload(v85, v86, v87);
  *(_QWORD *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return v4;
}

uint64_t sub_100065C60(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));

  v4 = type metadata accessor for ActivityDisplayContext(0);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v6);
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
    v9 = v5 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
      v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v13 = v5 + *(int *)(v12 + 20);
      v14 = type metadata accessor for Date(0);
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
      v8 = *(_QWORD *)(v5 + *(int *)(v12 + 24) + 8);
    }
    else
    {
      if (EnumCaseMultiPayload)
        goto LABEL_11;
      v8 = *(_QWORD *)(v5 + 8);
    }
    swift_bridgeObjectRelease(v8);
  }
LABEL_11:
  v16 = a1 + *(int *)(v4 + 36);
  v17 = swift_getEnumCaseMultiPayload(v16, v6);
  if (v17 == 2)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8));
    v19 = v16 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v20 = type metadata accessor for Date(0);
    v21 = *(_QWORD *)(v20 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }
  else
  {
    if (v17 == 1)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8));
      v22 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v23 = v16 + *(int *)(v22 + 20);
      v24 = type metadata accessor for Date(0);
      v25 = *(_QWORD *)(v24 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
      v18 = *(_QWORD *)(v16 + *(int *)(v22 + 24) + 8);
    }
    else
    {
      if (v17)
        goto LABEL_21;
      v18 = *(_QWORD *)(v16 + 8);
    }
    swift_bridgeObjectRelease(v18);
  }
LABEL_21:

  v26 = *(void **)(a1 + a2[7]);
  if (v26 != (void *)1)

  v27 = a1 + a2[8];
  v28 = _s8CardInfoOMa(0);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v27 + 8));
    return swift_bridgeObjectRelease(*(_QWORD *)(v27 + 24));
  }
  else
  {
    v30 = type metadata accessor for UUID(0);
    v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8);
    v32(v27, v30);
    v31 = v27 + *(int *)(sub_100004B18(&qword_1000CCC38) + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v32)(v31, v30);
  }
}

uint64_t sub_100065F54(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v88;
  uint64_t v90;
  char *__dst;
  char *__dsta;
  int *v93;
  int *v94;
  uint64_t v95;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  v8 = type metadata accessor for ActivityDisplayContext(0);
  v9 = *(int *)(v8 + 32);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain(v7);
  v13 = v6;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v12);
  v95 = v12;
  if (EnumCaseMultiPayload == 2)
  {
    v93 = a3;
    v16 = v11[1];
    *v10 = *v11;
    v10[1] = v16;
    v17 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v18 = (char *)v10 + v17;
    v19 = (char *)v11 + v17;
    v20 = type metadata accessor for Date(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain(v16);
    if (v22(v19, 1, v20))
    {
      v23 = sub_100004B18(&qword_1000C85A0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v12 = v95;
    v32 = v10;
    v33 = v95;
    v34 = 2;
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v93 = a3;
    v24 = v11[1];
    *v10 = *v11;
    v10[1] = v24;
    v25 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v26 = *(int *)(v25 + 20);
    v90 = v25;
    __dst = (char *)v10 + v26;
    v27 = (char *)v11 + v26;
    v28 = type metadata accessor for Date(0);
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain(v24);
    if (v30(v27, 1, v28))
    {
      v31 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    v12 = v95;
    v35 = *(int *)(v90 + 24);
    v36 = (_QWORD *)((char *)v10 + v35);
    v37 = (_QWORD *)((char *)v11 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain(v38);
    v32 = v10;
    v33 = v95;
    v34 = 1;
LABEL_14:
    swift_storeEnumTagMultiPayload(v32, v33, v34);
    a3 = v93;
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload)
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v15 = v11[1];
    *v10 = *v11;
    v10[1] = v15;
    swift_bridgeObjectRetain(v15);
    swift_storeEnumTagMultiPayload(v10, v12, 0);
  }
LABEL_15:
  v39 = *(int *)(v8 + 36);
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  v42 = swift_getEnumCaseMultiPayload(a2 + v39, v12);
  if (v42 == 2)
  {
    v47 = v41[1];
    *v40 = *v41;
    v40[1] = v47;
    v48 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v49 = (char *)v40 + v48;
    v50 = (char *)v41 + v48;
    v51 = type metadata accessor for Date(0);
    v52 = *(_QWORD *)(v51 - 8);
    v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    swift_bridgeObjectRetain(v47);
    if (v53(v50, 1, v51))
    {
      v54 = sub_100004B18(&qword_1000C85A0);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    v45 = v95;
    v44 = v40;
    v46 = 2;
  }
  else if (v42 == 1)
  {
    v94 = a3;
    v55 = v41[1];
    *v40 = *v41;
    v40[1] = v55;
    v56 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v57 = *(int *)(v56 + 20);
    __dsta = (char *)v40 + v57;
    v58 = (char *)v41 + v57;
    v59 = type metadata accessor for Date(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
    swift_bridgeObjectRetain(v55);
    if (v61(v58, 1, v59))
    {
      v62 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dsta, v58, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(__dsta, v58, v59);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(__dsta, 0, 1, v59);
    }
    a3 = v94;
    v63 = *(int *)(v56 + 24);
    v64 = (_QWORD *)((char *)v40 + v63);
    v65 = (_QWORD *)((char *)v41 + v63);
    v66 = v65[1];
    *v64 = *v65;
    v64[1] = v66;
    swift_bridgeObjectRetain(v66);
    v44 = v40;
    v45 = v95;
    v46 = 1;
  }
  else
  {
    if (v42)
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      goto LABEL_29;
    }
    v43 = v41[1];
    *v40 = *v41;
    v40[1] = v43;
    swift_bridgeObjectRetain(v43);
    v44 = v40;
    v45 = v12;
    v46 = 0;
  }
  swift_storeEnumTagMultiPayload(v44, v45, v46);
LABEL_29:
  v67 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v68 = *(void **)(a2 + v67);
  *(_QWORD *)(a1 + v67) = v68;
  v69 = a3[7];
  v70 = a1 + v69;
  v71 = a2 + v69;
  v72 = *(void **)(a2 + v69);
  v73 = v68;
  if (v72 == (void *)1)
  {
    *(_OWORD *)v70 = *(_OWORD *)v71;
  }
  else
  {
    v74 = *(_QWORD *)(v71 + 8);
    *(_QWORD *)v70 = v72;
    *(_QWORD *)(v70 + 8) = v74;
    v75 = v72;
  }
  v76 = a3[8];
  v77 = (_QWORD *)(a1 + v76);
  v78 = (_QWORD *)(a2 + v76);
  v79 = _s8CardInfoOMa(0);
  if (swift_getEnumCaseMultiPayload(v78, v79) == 1)
  {
    v80 = v78[1];
    *v77 = *v78;
    v77[1] = v80;
    v81 = v78[2];
    v82 = v78[3];
    v77[2] = v81;
    v77[3] = v82;
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v82);
    v83 = v77;
    v84 = v79;
    v85 = 1;
  }
  else
  {
    v86 = type metadata accessor for UUID(0);
    v87 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v86 - 8) + 16);
    v87(v77, v78, v86);
    v88 = sub_100004B18(&qword_1000CCC38);
    v87((_QWORD *)((char *)v77 + *(int *)(v88 + 48)), (_QWORD *)((char *)v78 + *(int *)(v88 + 48)), v86);
    v83 = v77;
    v84 = v79;
    v85 = 0;
  }
  swift_storeEnumTagMultiPayload(v83, v84, v85);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000664C4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v92;
  int *v94;
  char *v95;
  char *v96;
  char *__dst;
  int *__dsta;
  int *__dstb;
  uint64_t v100;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  v7 = a2[4];
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(void **)(a1 + 40);
  v10 = (void *)a2[5];
  *(_QWORD *)(a1 + 40) = v10;
  v11 = v10;

  v12 = type metadata accessor for ActivityDisplayContext(0);
  if ((uint64_t *)a1 == a2)
    goto LABEL_30;
  v13 = v12;
  v14 = *(int *)(v12 + 32);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  sub_100018008(a1 + v14, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v17 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
  v100 = v17;
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *v15 = *v16;
      v23 = v16[1];
      v15[1] = v23;
      v24 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      __dst = (char *)v15 + v24;
      v25 = (char *)v16 + v24;
      v26 = type metadata accessor for Date(0);
      v27 = *(_QWORD *)(v26 - 8);
      v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      swift_bridgeObjectRetain(v23);
      if (v28(v25, 1, v26))
      {
        v29 = sub_100004B18(&qword_1000C85A0);
        memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      v17 = v100;
      v20 = v15;
      v21 = v100;
      v22 = 2;
      goto LABEL_15;
    case 1:
      v94 = a3;
      *v15 = *v16;
      v30 = v16[1];
      v15[1] = v30;
      v31 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      v32 = *(int *)(v31 + 20);
      v95 = (char *)v15 + v32;
      __dsta = (int *)v31;
      v33 = (char *)v16 + v32;
      v34 = type metadata accessor for Date(0);
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      swift_bridgeObjectRetain(v30);
      if (v36(v33, 1, v34))
      {
        v37 = sub_100004B18(&qword_1000C85A0);
        memcpy(v95, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v95, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v95, 0, 1, v34);
      }
      v38 = __dsta[6];
      v39 = (_QWORD *)((char *)v15 + v38);
      v40 = (_QWORD *)((char *)v16 + v38);
      *v39 = *v40;
      v41 = v40[1];
      v39[1] = v41;
      swift_bridgeObjectRetain(v41);
      v17 = v100;
      swift_storeEnumTagMultiPayload(v15, v100, 1);
      a3 = v94;
      goto LABEL_16;
    case 0:
      *v15 = *v16;
      v19 = v16[1];
      v15[1] = v19;
      swift_bridgeObjectRetain(v19);
      v20 = v15;
      v21 = v17;
      v22 = 0;
LABEL_15:
      swift_storeEnumTagMultiPayload(v20, v21, v22);
      goto LABEL_16;
  }
  memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
LABEL_16:
  v42 = *(int *)(v13 + 36);
  v43 = (_QWORD *)(a1 + v42);
  v44 = (uint64_t *)((char *)a2 + v42);
  sub_100018008(a1 + v42, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v45 = swift_getEnumCaseMultiPayload(v44, v17);
  if (v45 == 2)
  {
    *v43 = *v44;
    v50 = v44[1];
    v43[1] = v50;
    v51 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v52 = (char *)v43 + v51;
    v53 = (char *)v44 + v51;
    v54 = type metadata accessor for Date(0);
    v55 = *(_QWORD *)(v54 - 8);
    v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
    swift_bridgeObjectRetain(v50);
    if (v56(v53, 1, v54))
    {
      v57 = sub_100004B18(&qword_1000C85A0);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    v48 = v100;
    v47 = v43;
    v49 = 2;
  }
  else if (v45 == 1)
  {
    *v43 = *v44;
    v58 = v44[1];
    v43[1] = v58;
    v59 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v60 = *(int *)(v59 + 20);
    v96 = (char *)v43 + v60;
    __dstb = (int *)v59;
    v61 = (char *)v44 + v60;
    v62 = type metadata accessor for Date(0);
    v63 = *(_QWORD *)(v62 - 8);
    v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
    swift_bridgeObjectRetain(v58);
    if (v64(v61, 1, v62))
    {
      v65 = sub_100004B18(&qword_1000C85A0);
      memcpy(v96, v61, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v96, v61, v62);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v96, 0, 1, v62);
    }
    v66 = __dstb[6];
    v67 = (_QWORD *)((char *)v43 + v66);
    v68 = (_QWORD *)((char *)v44 + v66);
    *v67 = *v68;
    v69 = v68[1];
    v67[1] = v69;
    swift_bridgeObjectRetain(v69);
    v47 = v43;
    v48 = v100;
    v49 = 1;
  }
  else
  {
    if (v45)
    {
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      goto LABEL_30;
    }
    *v43 = *v44;
    v46 = v44[1];
    v43[1] = v46;
    swift_bridgeObjectRetain(v46);
    v47 = v43;
    v48 = v17;
    v49 = 0;
  }
  swift_storeEnumTagMultiPayload(v47, v48, v49);
LABEL_30:
  *(_BYTE *)(a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
  v70 = a3[6];
  v71 = *(void **)(a1 + v70);
  v72 = *(void **)((char *)a2 + v70);
  *(_QWORD *)(a1 + v70) = v72;
  v73 = v72;

  v74 = a3[7];
  v75 = (_QWORD *)(a1 + v74);
  v76 = (uint64_t)a2 + v74;
  v77 = *(void **)(a1 + v74);
  v78 = *(void **)((char *)a2 + v74);
  if (v77 == (void *)1)
  {
    if (v78 != (void *)1)
    {
      *v75 = v78;
      v75[1] = *(_QWORD *)(v76 + 8);
      v79 = v78;
      if ((uint64_t *)a1 == a2)
        goto LABEL_43;
      goto LABEL_39;
    }
  }
  else
  {
    if (v78 != (void *)1)
    {
      *v75 = v78;
      v80 = v78;

      v75[1] = *(_QWORD *)(v76 + 8);
      if ((uint64_t *)a1 == a2)
        goto LABEL_43;
      goto LABEL_39;
    }
    sub_100066B34((uint64_t)v75);
  }
  *(_OWORD *)v75 = *(_OWORD *)v76;
  if ((uint64_t *)a1 == a2)
    goto LABEL_43;
LABEL_39:
  v81 = a3[8];
  v82 = (_QWORD *)(a1 + v81);
  v83 = (uint64_t *)((char *)a2 + v81);
  sub_100018008(a1 + v81, _s8CardInfoOMa);
  v84 = _s8CardInfoOMa(0);
  if (swift_getEnumCaseMultiPayload(v83, v84) == 1)
  {
    *v82 = *v83;
    v85 = v83[1];
    v82[1] = v85;
    v82[2] = v83[2];
    v86 = v83[3];
    v82[3] = v86;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v86);
    v87 = v82;
    v88 = v84;
    v89 = 1;
  }
  else
  {
    v90 = type metadata accessor for UUID(0);
    v91 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v90 - 8) + 16);
    v91(v82, v83, v90);
    v92 = sub_100004B18(&qword_1000CCC38);
    v91((_QWORD *)((char *)v82 + *(int *)(v92 + 48)), (_QWORD *)((char *)v83 + *(int *)(v92 + 48)), v90);
    v87 = v82;
    v88 = v84;
    v89 = 0;
  }
  swift_storeEnumTagMultiPayload(v87, v88, v89);
LABEL_43:
  *(_QWORD *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100066B34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100004B18(&qword_1000CD148);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100066B74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v55;
  char *__dst;
  char *__dsta;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = type metadata accessor for ActivityDisplayContext(0);
  v7 = *(int *)(v6 + 32);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
  if (EnumCaseMultiPayload == 2)
  {
    *v8 = *v9;
    v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v19 = (char *)v8 + v18;
    v20 = (char *)v9 + v18;
    v21 = type metadata accessor for Date(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100004B18(&qword_1000C85A0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = v8;
    v25 = v10;
    v26 = 2;
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      goto LABEL_13;
    }
    *v8 = *v9;
    v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v13 = *(int *)(v12 + 20);
    v55 = v12;
    __dst = (char *)v8 + v13;
    v14 = (char *)v9 + v13;
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)((char *)v8 + *(int *)(v55 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v55 + 24));
    v24 = v8;
    v25 = v10;
    v26 = 1;
  }
  swift_storeEnumTagMultiPayload(v24, v25, v26);
LABEL_13:
  v27 = *(int *)(v6 + 36);
  v28 = (_OWORD *)(a1 + v27);
  v29 = (_OWORD *)(a2 + v27);
  v30 = swift_getEnumCaseMultiPayload(a2 + v27, v10);
  if (v30 == 2)
  {
    *v28 = *v29;
    v37 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v38 = (char *)v28 + v37;
    v39 = (char *)v29 + v37;
    v40 = type metadata accessor for Date(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = sub_100004B18(&qword_1000C85A0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v43 = v28;
    v44 = v10;
    v45 = 2;
  }
  else
  {
    if (v30 != 1)
    {
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      goto LABEL_25;
    }
    *v28 = *v29;
    v31 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v32 = *(int *)(v31 + 20);
    __dsta = (char *)v28 + v32;
    v33 = (char *)v29 + v32;
    v34 = type metadata accessor for Date(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dsta, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(__dsta, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dsta, 0, 1, v34);
    }
    *(_OWORD *)((char *)v28 + *(int *)(v31 + 24)) = *(_OWORD *)((char *)v29 + *(int *)(v31 + 24));
    v43 = v28;
    v44 = v10;
    v45 = 1;
  }
  swift_storeEnumTagMultiPayload(v43, v44, v45);
LABEL_25:
  v46 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v46) = *(_QWORD *)(a2 + v46);
  v47 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v48 = (char *)(a1 + v47);
  v49 = (char *)(a2 + v47);
  v50 = _s8CardInfoOMa(0);
  if (swift_getEnumCaseMultiPayload(v49, v50))
  {
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = type metadata accessor for UUID(0);
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
    v52(v48, v49, v51);
    v53 = sub_100004B18(&qword_1000CCC38);
    v52(&v48[*(int *)(v53 + 48)], &v49[*(int *)(v53 + 48)], v51);
    swift_storeEnumTagMultiPayload(v48, v50, 0);
  }
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100066FF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v63;
  char *__dst;
  char *__dsta;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v8 = type metadata accessor for ActivityDisplayContext(0);
  if (a1 == a2)
    goto LABEL_26;
  v9 = v8;
  v10 = *(int *)(v8 + 32);
  v11 = (_OWORD *)(a1 + v10);
  v12 = (_OWORD *)(a2 + v10);
  sub_100018008(a1 + v10, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v13 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v13);
  if (EnumCaseMultiPayload == 2)
  {
    *v11 = *v12;
    v21 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v22 = (char *)v11 + v21;
    v23 = (char *)v12 + v21;
    v24 = type metadata accessor for Date(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_100004B18(&qword_1000C85A0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = v11;
    v28 = v13;
    v29 = 2;
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *v11 = *v12;
    v15 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v16 = *(int *)(v15 + 20);
    v63 = v15;
    __dst = (char *)v11 + v16;
    v17 = (char *)v12 + v16;
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *(_OWORD *)((char *)v11 + *(int *)(v63 + 24)) = *(_OWORD *)((char *)v12 + *(int *)(v63 + 24));
    v27 = v11;
    v28 = v13;
    v29 = 1;
LABEL_13:
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    goto LABEL_14;
  }
  memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
LABEL_14:
  v30 = *(int *)(v9 + 36);
  v31 = (_OWORD *)(a1 + v30);
  v32 = (_OWORD *)(a2 + v30);
  sub_100018008(a1 + v30, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  v33 = swift_getEnumCaseMultiPayload(v32, v13);
  if (v33 == 2)
  {
    *v31 = *v32;
    v40 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    v41 = (char *)v31 + v40;
    v42 = (char *)v32 + v40;
    v43 = type metadata accessor for Date(0);
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      v45 = sub_100004B18(&qword_1000C85A0);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
    v46 = v31;
    v47 = v13;
    v48 = 2;
  }
  else
  {
    if (v33 != 1)
    {
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      goto LABEL_26;
    }
    *v31 = *v32;
    v34 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v35 = *(int *)(v34 + 20);
    __dsta = (char *)v31 + v35;
    v36 = (char *)v32 + v35;
    v37 = type metadata accessor for Date(0);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = sub_100004B18(&qword_1000C85A0);
      memcpy(__dsta, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(__dsta, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dsta, 0, 1, v37);
    }
    *(_OWORD *)((char *)v31 + *(int *)(v34 + 24)) = *(_OWORD *)((char *)v32 + *(int *)(v34 + 24));
    v46 = v31;
    v47 = v13;
    v48 = 1;
  }
  swift_storeEnumTagMultiPayload(v46, v47, v48);
LABEL_26:
  v49 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v50 = *(void **)(a1 + v49);
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);

  v51 = a3[7];
  v52 = (_QWORD *)(a1 + v51);
  v53 = (_QWORD *)(a2 + v51);
  v54 = *(void **)(a1 + v51);
  if (v54 != (void *)1)
  {
    if (*v53 != 1)
    {
      *v52 = *v53;

      v52[1] = v53[1];
      if (a1 == a2)
        goto LABEL_35;
      goto LABEL_32;
    }
    sub_100066B34((uint64_t)v52);
  }
  *(_OWORD *)v52 = *(_OWORD *)v53;
  if (a1 == a2)
    goto LABEL_35;
LABEL_32:
  v55 = a3[8];
  v56 = (char *)(a1 + v55);
  v57 = (char *)(a2 + v55);
  sub_100018008(a1 + v55, _s8CardInfoOMa);
  v58 = _s8CardInfoOMa(0);
  if (swift_getEnumCaseMultiPayload(v57, v58))
  {
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    v59 = type metadata accessor for UUID(0);
    v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 32);
    v60(v56, v57, v59);
    v61 = sub_100004B18(&qword_1000CCC38);
    v60(&v56[*(int *)(v61 + 48)], &v57[*(int *)(v61 + 48)], v59);
    swift_storeEnumTagMultiPayload(v56, v58, 0);
  }
LABEL_35:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10006751C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100067528);
}

uint64_t sub_100067528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for ActivityDisplayContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    v11 = _s8CardInfoOMa(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v11);
  }
}

uint64_t sub_1000675DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000675E8);
}

uint64_t sub_1000675E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for ActivityDisplayContext(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
      return result;
    }
    v10 = _s8CardInfoOMa(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ClassicCardViewServiceContext(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CD1A8;
  if (!qword_1000CD1A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClassicCardViewServiceContext);
  return result;
}

uint64_t sub_1000676C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for ActivityDisplayContext(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100088550;
    v5[2] = &unk_100088568;
    v5[3] = &unk_100088580;
    result = _s8CardInfoOMa(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100067774(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000677B0 + 4 * byte_100088510[a1]))(0xD00000000000001DLL, 0x800000010008F930);
}

uint64_t sub_1000677B0()
{
  return 0x436C616974696E69;
}

unint64_t sub_1000677D4()
{
  return 0xD000000000000011;
}

uint64_t sub_1000677F0()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_100067808()
{
  return 0x6F666E4964726163;
}

uint64_t sub_100067820()
{
  return 0x7341656369766564;
}

uint64_t sub_100067844(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v15;
  char v16;

  v3 = v1;
  v5 = sub_100004B18(&qword_1000CD208);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100006914(a1, v9);
  v11 = sub_100068090();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ClassicCardViewServiceContext.CodingKeys, &type metadata for ClassicCardViewServiceContext.CodingKeys, v11, v9, v10);
  LOBYTE(v15) = 0;
  type metadata accessor for ActivityDisplayContext(0);
  sub_100003E48(&qword_1000C8810, type metadata accessor for ActivityDisplayContext, (uint64_t)&unk_10008693C);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3);
  if (!v2)
  {
    v12 = (int *)type metadata accessor for ClassicCardViewServiceContext(0);
    LOBYTE(v15) = *(_BYTE *)(v3 + v12[5]);
    v16 = 1;
    sub_10003B588();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v12[6]);
    v16 = 2;
    sub_100004B18(&qword_1000C8118);
    sub_10002E144(&qword_1000C8130, (uint64_t)&unk_100080AC0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
    v15 = *(_OWORD *)(v3 + v12[7]);
    v16 = 3;
    sub_10003B544();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
    v13 = v3 + v12[8];
    LOBYTE(v15) = 4;
    _s8CardInfoOMa(0);
    sub_100003E48(&qword_1000CD210, _s8CardInfoOMa, (uint64_t)&unk_100087C28);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13);
    *(_QWORD *)&v15 = *(_QWORD *)(v3 + v12[9]);
    v16 = 5;
    type metadata accessor for PCActivityAssetType(0);
    sub_100003E48(&qword_1000CC9A0, (uint64_t (*)(uint64_t))type metadata accessor for PCActivityAssetType, (uint64_t)&protocol conformance descriptor for PCActivityAssetType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100067B18(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  char v35;

  v26 = a2;
  v27 = _s8CardInfoOMa(0);
  __chkstk_darwin(v27);
  v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v5);
  v28 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_100004B18(&qword_1000CD1F0);
  v7 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for ClassicCardViewServiceContext(0);
  v31 = *(int *)(__chkstk_darwin(v10) + 24);
  v32 = (uint64_t)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v32 + v31) = 0;
  v12 = a1[3];
  v13 = a1[4];
  v30 = a1;
  sub_100006914(a1, v12);
  v14 = sub_100068090();
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClassicCardViewServiceContext.CodingKeys, &type metadata for ClassicCardViewServiceContext.CodingKeys, v14, v12, v13);
  if (v15)
  {
    v20 = v31;
    v19 = v32;
    sub_10000697C(v30);

  }
  else
  {
    v33 = v4;
    v16 = v7;
    LOBYTE(v34) = 0;
    sub_100003E48(&qword_1000C87B0, type metadata accessor for ActivityDisplayContext, (uint64_t)&unk_100086964);
    v17 = v28;
    v18 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v28, v5);
    v21 = v32;
    sub_100017264((uint64_t)v17, v32, type metadata accessor for ActivityDisplayContext);
    v35 = 1;
    sub_10003B4BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for CardMode);
    *(_BYTE *)(v21 + v10[5]) = v34;
    v22 = sub_100004B18(&qword_1000C8118);
    v35 = 2;
    sub_10002E144(&qword_1000C8120, (uint64_t)&unk_100080AE8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, v22);
    *(_QWORD *)(v21 + v31) = v34;
    v35 = 3;
    sub_10003B3F0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for MediaTransferStatus);
    *(_OWORD *)(v21 + v10[7]) = v34;
    LOBYTE(v34) = 4;
    sub_100003E48(&qword_1000CD200, _s8CardInfoOMa, (uint64_t)&unk_100087C50);
    v23 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v27);
    sub_100017264((uint64_t)v23, v21 + v10[8], _s8CardInfoOMa);
    type metadata accessor for PCActivityAssetType(0);
    v25 = v24;
    v35 = 5;
    sub_100003E48(&qword_1000CC970, (uint64_t (*)(uint64_t))type metadata accessor for PCActivityAssetType, (uint64_t)&protocol conformance descriptor for PCActivityAssetType);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, v25);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v18);
    *(_QWORD *)(v21 + v10[9]) = v34;
    sub_10000A8D4(v21, v26);
    sub_10000697C(v30);
    sub_100018008(v21, type metadata accessor for ClassicCardViewServiceContext);
  }
}

uint64_t sub_100067FEC()
{
  unsigned __int8 *v0;

  return sub_100067774(*v0);
}

uint64_t sub_100067FF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100068278(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100068018(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100068090();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100068040(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100068090();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100068068(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100067B18(a1, a2);
}

uint64_t sub_10006807C(_QWORD *a1)
{
  return sub_100067844(a1);
}

unint64_t sub_100068090()
{
  unint64_t result;

  result = qword_1000CD1F8;
  if (!qword_1000CD1F8)
  {
    result = swift_getWitnessTable(&unk_1000886AC, &type metadata for ClassicCardViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD1F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ClassicCardViewServiceContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100068120 + 4 * byte_10008851B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100068154 + 4 * byte_100088516[v4]))();
}

uint64_t sub_100068154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006815C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100068164);
  return result;
}

uint64_t sub_100068170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100068178);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10006817C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100068184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassicCardViewServiceContext.CodingKeys()
{
  return &type metadata for ClassicCardViewServiceContext.CodingKeys;
}

unint64_t sub_1000681A4()
{
  unint64_t result;

  result = qword_1000CD218;
  if (!qword_1000CD218)
  {
    result = swift_getWitnessTable(&unk_100088684, &type metadata for ClassicCardViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD218);
  }
  return result;
}

unint64_t sub_1000681EC()
{
  unint64_t result;

  result = qword_1000CD220;
  if (!qword_1000CD220)
  {
    result = swift_getWitnessTable(&unk_1000885F4, &type metadata for ClassicCardViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD220);
  }
  return result;
}

unint64_t sub_100068234()
{
  unint64_t result;

  result = qword_1000CD228;
  if (!qword_1000CD228)
  {
    result = swift_getWitnessTable(&unk_10008861C, &type metadata for ClassicCardViewServiceContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD228);
  }
  return result;
}

uint64_t sub_100068278(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD00000000000001DLL)
  {
    v4 = 0x800000010008F930;
    if (a2 == 0x800000010008F930)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x800000010008F930, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x436C616974696E69 && a2 == 0xEF65646F4D647261)
  {
    v6 = 0xEF65646F4D647261;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x436C616974696E69, 0xEF65646F4D647261, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100094EF0;
    if (a2 == 0x8000000100094EF0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100094EF0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010008F7B0)
  {
    v8 = 0x800000010008F7B0;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010008F7B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x6F666E4964726163 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E4964726163, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x7341656369766564 && a2 == 0xEF65707954746573)
  {
    swift_bridgeObjectRelease(0xEF65707954746573);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7341656369766564, 0xEF65707954746573, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t destroy for HomeAccessoryViewEvent(uint64_t a1)
{
  return sub_100017424(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_100017F6C(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_100017F6C(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  sub_100017424(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

__n128 initializeWithTake for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v4;
  sub_100017424(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HomeAccessoryViewEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeAccessoryViewEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = -(char)a2;
  }
  return result;
}

uint64_t sub_100068788(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 56) <= 1u)
    return *(unsigned __int8 *)(a1 + 56);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1000687A0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent()
{
  return &type metadata for HomeAccessoryViewEvent;
}

uint64_t sub_1000687D8()
{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  Swift::String v20;
  _OWORD v21[3];
  uint64_t v22;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v1 = v0;
  sub_10006A54C(v0, &v24);
  v2 = v25;
  v3 = v26;
  v4 = v27;
  sub_10006A54C(v1, &v28);
  if (v32)
  {
    v5 = v28;
    if (v32 == 1)
    {
      v6 = (void *)*((_QWORD *)&v28 + 1);
      *(_QWORD *)&v33 = 0;
      *((_QWORD *)&v33 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease(*((_QWORD *)&v33 + 1));
      *(_QWORD *)&v33 = 0xD000000000000012;
      *((_QWORD *)&v33 + 1) = 0x8000000100094F50;
      v7._countAndFlagsBits = v5;
      v7._object = v6;
      String.append(_:)(v7);
      v8._countAndFlagsBits = 10528;
      v8._object = (void *)0xE200000000000000;
      String.append(_:)(v8);
      return v33;
    }
    else
    {
      v17 = *((_QWORD *)&v29 + 1) | v29 | *((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v30 + 1) | v31 | (unint64_t)v28 | (unint64_t)v30 | v17)
      {
        v18 = *((_QWORD *)&v30 + 1) | v31 | v30 | v17;
        if ((_QWORD)v28 != 1 || v18)
        {
          if ((_QWORD)v28 != 2 || v18)
          {
            if ((_QWORD)v28 != 3 || v18)
            {
              if ((_QWORD)v28 == 4 && v18 == 0)
                return 0xD00000000000001DLL;
              else
                return 0xD000000000000014;
            }
            else
            {
              return 0x65746E6573657270;
            }
          }
          else
          {
            return 0x69746E6573657270;
          }
        }
        else
        {
          return 0x646564616F6CLL;
        }
      }
      else
      {
        return 0x6574736575716572;
      }
    }
  }
  else
  {
    v33 = v28;
    v34 = v29;
    v35 = v30;
    v36 = v31;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v3);
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(0xE000000000000000);
    strcpy((char *)v23, "failed( error=");
    HIBYTE(v23[1]) = -18;
    v21[0] = v33;
    v21[1] = v34;
    v21[2] = v35;
    v22 = v36;
    v10 = sub_10006A858();
    v11 = LocalizedError.errorDescription.getter(&type metadata for CodableError, v10);
    v13 = v12;
    sub_10006A89C((uint64_t)v1);
    if (v13)
    {
      *(_QWORD *)&v21[0] = v11;
      *((_QWORD *)&v21[0] + 1) = v13;
      v14 = String.init<A>(describing:)(v21, &type metadata for String);
      v16 = v15;
    }
    else
    {
      v16 = 0xE300000000000000;
      v14 = 7104878;
    }
    v19 = v16;
    String.append(_:)(*(Swift::String *)&v14);
    swift_bridgeObjectRelease(v16);
    v20._countAndFlagsBits = 10528;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    return v23[0];
  }
}

uint64_t sub_100068AA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100068AE0 + 4 * byte_100088700[a1]))(0x6574736575716572, 0xE900000000000064);
}

uint64_t sub_100068AE0()
{
  return 0x646564616F6CLL;
}

uint64_t sub_100068AF4()
{
  return 0x64656C696166;
}

uint64_t sub_100068B08()
{
  return 0x69746E6573657270;
}

uint64_t sub_100068B24()
{
  return 0x65746E6573657270;
}

uint64_t sub_100068B38()
{
  return 0x657373696D736964;
}

unint64_t sub_100068B4C()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_100068B70()
{
  return 0xD000000000000014;
}

uint64_t sub_100068B8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _OWORD v68[3];
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 *v79;

  v51 = sub_100004B18(&qword_1000CD2C8);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v49 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100004B18(&qword_1000CD2D0);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v46 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100004B18(&qword_1000CD2D8);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100004B18(&qword_1000CD2E0);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v52 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100004B18(&qword_1000CD2E8);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v55 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000CD2F0);
  v62 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100004B18(&qword_1000CD2F8);
  v59 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v58 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100004B18(&qword_1000CD300);
  v12 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100004B18(&qword_1000CD308);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_100006914(a1, v18);
  v19 = sub_10006A56C();
  v66 = v16;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HomeAccessoryViewEvent.CodingKeys, &type metadata for HomeAccessoryViewEvent.CodingKeys, v19, v18, v17);
  sub_10006A54C(v79, &v70);
  if (!v74)
  {
    v75 = v70;
    v76 = v71;
    v77 = v72;
    v78 = v73;
    LOBYTE(v68[0]) = 2;
    v28 = sub_10006A704();
    v23 = v67;
    v24 = v66;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.FailedCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.FailedCodingKeys, v28);
    v68[0] = v75;
    v68[1] = v76;
    v68[2] = v77;
    v69 = v78;
    sub_10006A814();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v68);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v10, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v24, v23);
  }
  v20 = v70;
  if (v74 == 1)
  {
    v21 = *((_QWORD *)&v70 + 1);
    LOBYTE(v68[0]) = 5;
    v22 = sub_10006A638();
    v23 = v67;
    v24 = v66;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.DismissedCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys, v22);
    v25 = v20;
    v26 = v64;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v21, v27, v64);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v5, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v24, v23);
  }
  v30 = *((_QWORD *)&v71 + 1) | v71 | *((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v72 + 1) | v73 | (unint64_t)v70 | (unint64_t)v72 | v30)
  {
    v31 = *((_QWORD *)&v72 + 1) | v73 | v72 | v30;
    if ((_QWORD)v70 != 1 || v31)
    {
      if ((_QWORD)v70 != 2 || v31)
      {
        if ((_QWORD)v70 != 3 || v31)
        {
          if ((_QWORD)v70 != 4 || v31)
          {
            LOBYTE(v68[0]) = 7;
            v43 = sub_10006A5B0();
            v44 = v49;
            v34 = v67;
            v35 = v66;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys, v43);
            (*(void (**)(char *, uint64_t))(v50 + 8))(v44, v51);
          }
          else
          {
            LOBYTE(v68[0]) = 6;
            v41 = sub_10006A5F4();
            v42 = v46;
            v34 = v67;
            v35 = v66;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys, v41);
            (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v48);
          }
        }
        else
        {
          LOBYTE(v68[0]) = 4;
          v39 = sub_10006A67C();
          v40 = v52;
          v34 = v67;
          v35 = v66;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.PresentedCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.PresentedCodingKeys, v39);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v40, v54);
        }
      }
      else
      {
        LOBYTE(v68[0]) = 3;
        v37 = sub_10006A6C0();
        v38 = v55;
        v34 = v67;
        v35 = v66;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.PresentingCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.PresentingCodingKeys, v37);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v57);
      }
    }
    else
    {
      LOBYTE(v68[0]) = 1;
      v32 = sub_10006A78C();
      v33 = v58;
      v34 = v67;
      v35 = v66;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.LoadedCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.LoadedCodingKeys, v32);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v33, v60);
    }
  }
  else
  {
    LOBYTE(v68[0]) = 0;
    v36 = sub_10006A7D0();
    v34 = v67;
    v35 = v66;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for HomeAccessoryViewEvent.RequestedCodingKeys, v68, v67, &type metadata for HomeAccessoryViewEvent.RequestedCodingKeys, v36);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v61);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v35, v34);
}

uint64_t sub_1000692F0()
{
  unsigned __int8 *v0;

  return sub_100068AA8(*v0);
}

uint64_t sub_1000692F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000697FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006931C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A56C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069344(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A56C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006936C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A5F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069394(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A5F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000693BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A5B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000693E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A5B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006940C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A638();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069434(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A638();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006945C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A704();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069484(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A704();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000694AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A78C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000694D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A78C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000694FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A67C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069524(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A67C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006954C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A6C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100069574(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A6C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006959C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A7D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000695C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006A7D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

_OWORD *sub_1000695EC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *result;
  __int128 v5[4];

  result = (_OWORD *)sub_100069B4C(a1, (uint64_t)v5);
  if (!v2)
    return sub_10006A54C(v5, a2);
  return result;
}

uint64_t sub_100069630(_QWORD *a1)
{
  __int128 *v1;
  _OWORD v4[4];

  sub_10006A54C(v1, v4);
  return sub_100068B8C(a1);
}

uint64_t sub_10006967C()
{
  __int128 *v0;
  _OWORD v2[4];

  sub_10006A54C(v0, v2);
  return sub_1000687D8();
}

BOOL sub_1000696B0(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((unsigned __int8 *)a2 + 56);
  if (*((_BYTE *)a1 + 56))
  {
    if (*((_BYTE *)a1 + 56) == 1)
      return v2 == 1;
    v4 = *a1;
    v3 = a1[1];
    v6 = *a2;
    v5 = a2[1];
    v8 = a2[2];
    v7 = a2[3];
    v10 = a2[4];
    v9 = a2[5];
    v11 = a2[6];
    v12 = a1[3];
    v13 = a1[4];
    v14 = a1[2];
    v15 = a1[5] | a1[6];
    v16 = v12 | v14 | v3;
    if (!(v15 | v4 | v13 | v16))
      return v2 == 2 && !(v8 | v5 | v6 | v7 | v10 | v9 | v11);
    v17 = v15 | v13 | v16;
    if (v4 != 1 || v17)
    {
      if (v4 != 2 || v17)
      {
        if (v4 != 3 || v17)
        {
          if (v4 != 4 || v17)
          {
            if (v2 != 2 || v6 != 5)
              return 0;
          }
          else if (v2 != 2 || v6 != 4)
          {
            return 0;
          }
        }
        else if (v2 != 2 || v6 != 3)
        {
          return 0;
        }
      }
      else if (v2 != 2 || v6 != 2)
      {
        return 0;
      }
    }
    else if (v2 != 2 || v6 != 1)
    {
      return 0;
    }
    if (!(v8 | v5 | v7 | v10 | v9 | v11))
      return 1;
  }
  else if (!*((_BYTE *)a2 + 56))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1000697FC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x6574736575716572 && a2 == 0xE900000000000064)
  {
    v5 = 0xE900000000000064;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574736575716572, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646564616F6CLL && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646564616F6CLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x64656C696166 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C696166, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL)
  {
    v9 = 0xEA0000000000676ELL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746E6573657270, 0xEA0000000000676ELL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064)
  {
    v10 = 0xE900000000000064;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6573657270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064)
  {
    v11 = 0xE900000000000064;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657373696D736964, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v12 = 0x8000000100094F30;
    if (a2 == 0x8000000100094F30)
      goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100094F30, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100094F10)
  {
    swift_bridgeObjectRelease(0x8000000100094F10);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100094F10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_100069B4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v45 = a2;
  v49 = sub_100004B18(&qword_1000CD230);
  v41 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v44 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100004B18(&qword_1000CD238);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4);
  v43 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100004B18(&qword_1000CD240);
  v30[3] = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v48 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100004B18(&qword_1000CD248);
  v32 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v47 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100004B18(&qword_1000CD250);
  v33 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v42 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100004B18(&qword_1000CD258);
  v34 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v46 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100004B18(&qword_1000CD260);
  v30[4] = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v10 = sub_100004B18(&qword_1000CD268);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004B18(&qword_1000CD270);
  v14 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v18 = a1[4];
  v51 = a1;
  sub_100006914(a1, v17);
  v19 = sub_10006A56C();
  v20 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HomeAccessoryViewEvent.CodingKeys, &type metadata for HomeAccessoryViewEvent.CodingKeys, v19, v17, v18);
  if (!v20)
  {
    v30[2] = v13;
    v30[0] = v11;
    v30[1] = v10;
    v52 = v14;
    v21 = KeyedDecodingContainer.allKeys.getter(v50);
    v22 = v21;
    if (*(_QWORD *)(v21 + 16) == 1)
      __asm { BR              X10 }
    v23 = type metadata accessor for DecodingError(0);
    swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
    v25 = v24;
    sub_100004B18(&qword_1000C7E90);
    *v25 = &type metadata for HomeAccessoryViewEvent;
    v26 = v50;
    v27 = KeyedDecodingContainer.codingPath.getter(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v27, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v28 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v23);
    swift_willThrow(v28);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v26);
  }
  return sub_10000697C(v51);
}

_OWORD *sub_10006A54C(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(__int128 *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

unint64_t sub_10006A56C()
{
  unint64_t result;

  result = qword_1000CD278;
  if (!qword_1000CD278)
  {
    result = swift_getWitnessTable(&unk_100088FA8, &type metadata for HomeAccessoryViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD278);
  }
  return result;
}

unint64_t sub_10006A5B0()
{
  unint64_t result;

  result = qword_1000CD280;
  if (!qword_1000CD280)
  {
    result = swift_getWitnessTable(&unk_100088F58, &type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD280);
  }
  return result;
}

unint64_t sub_10006A5F4()
{
  unint64_t result;

  result = qword_1000CD288;
  if (!qword_1000CD288)
  {
    result = swift_getWitnessTable(&unk_100088F08, &type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD288);
  }
  return result;
}

unint64_t sub_10006A638()
{
  unint64_t result;

  result = qword_1000CD290;
  if (!qword_1000CD290)
  {
    result = swift_getWitnessTable(&unk_100088EB8, &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD290);
  }
  return result;
}

unint64_t sub_10006A67C()
{
  unint64_t result;

  result = qword_1000CD298;
  if (!qword_1000CD298)
  {
    result = swift_getWitnessTable(&unk_100088E68, &type metadata for HomeAccessoryViewEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD298);
  }
  return result;
}

unint64_t sub_10006A6C0()
{
  unint64_t result;

  result = qword_1000CD2A0;
  if (!qword_1000CD2A0)
  {
    result = swift_getWitnessTable(&unk_100088E18, &type metadata for HomeAccessoryViewEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD2A0);
  }
  return result;
}

unint64_t sub_10006A704()
{
  unint64_t result;

  result = qword_1000CD2A8;
  if (!qword_1000CD2A8)
  {
    result = swift_getWitnessTable(&unk_100088DC8, &type metadata for HomeAccessoryViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD2A8);
  }
  return result;
}

unint64_t sub_10006A748()
{
  unint64_t result;

  result = qword_1000CD2B0;
  if (!qword_1000CD2B0)
  {
    result = swift_getWitnessTable(&unk_100089F48, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1000CD2B0);
  }
  return result;
}

unint64_t sub_10006A78C()
{
  unint64_t result;

  result = qword_1000CD2B8;
  if (!qword_1000CD2B8)
  {
    result = swift_getWitnessTable(&unk_100088D78, &type metadata for HomeAccessoryViewEvent.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD2B8);
  }
  return result;
}

unint64_t sub_10006A7D0()
{
  unint64_t result;

  result = qword_1000CD2C0;
  if (!qword_1000CD2C0)
  {
    result = swift_getWitnessTable(&unk_100088D28, &type metadata for HomeAccessoryViewEvent.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD2C0);
  }
  return result;
}

unint64_t sub_10006A814()
{
  unint64_t result;

  result = qword_1000CD310;
  if (!qword_1000CD310)
  {
    result = swift_getWitnessTable(&unk_100089F20, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1000CD310);
  }
  return result;
}

unint64_t sub_10006A858()
{
  unint64_t result;

  result = qword_1000CD318;
  if (!qword_1000CD318)
  {
    result = swift_getWitnessTable(&unk_100089ED8, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1000CD318);
  }
  return result;
}

uint64_t sub_10006A89C(uint64_t a1)
{
  sub_100017424(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return a1;
}

uint64_t storeEnumTagSinglePayload for HomeAccessoryViewEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10006A920 + 4 * byte_10008871D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10006A954 + 4 * byte_100088718[v4]))();
}

uint64_t sub_10006A954(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A95C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006A964);
  return result;
}

uint64_t sub_10006A970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006A978);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10006A97C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006A984(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.CodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.RequestedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.LoadedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.LoadedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.FailedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.PresentingCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.PresentedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.PresentedCodingKeys;
}

uint64_t _s13PCViewService22HomeAccessoryViewEventO16FailedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10006AA34 + 4 * byte_100088722[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10006AA54 + 4 * byte_100088727[v4]))();
}

_BYTE *sub_10006AA34(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10006AA54(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006AA5C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006AA64(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006AA6C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006AA74(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.DismissedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys;
}

unint64_t sub_10006AAB4()
{
  unint64_t result;

  result = qword_1000CD320;
  if (!qword_1000CD320)
  {
    result = swift_getWitnessTable(&unk_100088A50, &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD320);
  }
  return result;
}

unint64_t sub_10006AAFC()
{
  unint64_t result;

  result = qword_1000CD328;
  if (!qword_1000CD328)
  {
    result = swift_getWitnessTable(&unk_100088BA8, &type metadata for HomeAccessoryViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD328);
  }
  return result;
}

unint64_t sub_10006AB44()
{
  unint64_t result;

  result = qword_1000CD330;
  if (!qword_1000CD330)
  {
    result = swift_getWitnessTable(&unk_100088D00, &type metadata for HomeAccessoryViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD330);
  }
  return result;
}

unint64_t sub_10006AB8C()
{
  unint64_t result;

  result = qword_1000CD338;
  if (!qword_1000CD338)
  {
    result = swift_getWitnessTable(&unk_100088C20, &type metadata for HomeAccessoryViewEvent.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD338);
  }
  return result;
}

unint64_t sub_10006ABD4()
{
  unint64_t result;

  result = qword_1000CD340;
  if (!qword_1000CD340)
  {
    result = swift_getWitnessTable(&unk_100088C48, &type metadata for HomeAccessoryViewEvent.RequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD340);
  }
  return result;
}

unint64_t sub_10006AC1C()
{
  unint64_t result;

  result = qword_1000CD348;
  if (!qword_1000CD348)
  {
    result = swift_getWitnessTable(&unk_100088BD0, &type metadata for HomeAccessoryViewEvent.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD348);
  }
  return result;
}

unint64_t sub_10006AC64()
{
  unint64_t result;

  result = qword_1000CD350;
  if (!qword_1000CD350)
  {
    result = swift_getWitnessTable(&unk_100088BF8, &type metadata for HomeAccessoryViewEvent.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD350);
  }
  return result;
}

unint64_t sub_10006ACAC()
{
  unint64_t result;

  result = qword_1000CD358;
  if (!qword_1000CD358)
  {
    result = swift_getWitnessTable(&unk_100088B18, &type metadata for HomeAccessoryViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD358);
  }
  return result;
}

unint64_t sub_10006ACF4()
{
  unint64_t result;

  result = qword_1000CD360;
  if (!qword_1000CD360)
  {
    result = swift_getWitnessTable(&unk_100088B40, &type metadata for HomeAccessoryViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD360);
  }
  return result;
}

unint64_t sub_10006AD3C()
{
  unint64_t result;

  result = qword_1000CD368;
  if (!qword_1000CD368)
  {
    result = swift_getWitnessTable(&unk_100088AC8, &type metadata for HomeAccessoryViewEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD368);
  }
  return result;
}

unint64_t sub_10006AD84()
{
  unint64_t result;

  result = qword_1000CD370;
  if (!qword_1000CD370)
  {
    result = swift_getWitnessTable(&unk_100088AF0, &type metadata for HomeAccessoryViewEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD370);
  }
  return result;
}

unint64_t sub_10006ADCC()
{
  unint64_t result;

  result = qword_1000CD378;
  if (!qword_1000CD378)
  {
    result = swift_getWitnessTable(&unk_100088A78, &type metadata for HomeAccessoryViewEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD378);
  }
  return result;
}

unint64_t sub_10006AE14()
{
  unint64_t result;

  result = qword_1000CD380;
  if (!qword_1000CD380)
  {
    result = swift_getWitnessTable(&unk_100088AA0, &type metadata for HomeAccessoryViewEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD380);
  }
  return result;
}

unint64_t sub_10006AE5C()
{
  unint64_t result;

  result = qword_1000CD388;
  if (!qword_1000CD388)
  {
    result = swift_getWitnessTable(&unk_1000889C0, &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD388);
  }
  return result;
}

unint64_t sub_10006AEA4()
{
  unint64_t result;

  result = qword_1000CD390;
  if (!qword_1000CD390)
  {
    result = swift_getWitnessTable(&unk_1000889E8, &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD390);
  }
  return result;
}

unint64_t sub_10006AEEC()
{
  unint64_t result;

  result = qword_1000CD398;
  if (!qword_1000CD398)
  {
    result = swift_getWitnessTable(&unk_100088970, &type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD398);
  }
  return result;
}

unint64_t sub_10006AF34()
{
  unint64_t result;

  result = qword_1000CD3A0;
  if (!qword_1000CD3A0)
  {
    result = swift_getWitnessTable(&unk_100088998, &type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD3A0);
  }
  return result;
}

unint64_t sub_10006AF7C()
{
  unint64_t result;

  result = qword_1000CD3A8;
  if (!qword_1000CD3A8)
  {
    result = swift_getWitnessTable(&unk_100088920, &type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD3A8);
  }
  return result;
}

unint64_t sub_10006AFC4()
{
  unint64_t result;

  result = qword_1000CD3B0;
  if (!qword_1000CD3B0)
  {
    result = swift_getWitnessTable(&unk_100088948, &type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD3B0);
  }
  return result;
}

unint64_t sub_10006B00C()
{
  unint64_t result;

  result = qword_1000CD3B8;
  if (!qword_1000CD3B8)
  {
    result = swift_getWitnessTable(&unk_100088C70, &type metadata for HomeAccessoryViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD3B8);
  }
  return result;
}

unint64_t sub_10006B054()
{
  unint64_t result;

  result = qword_1000CD3C0;
  if (!qword_1000CD3C0)
  {
    result = swift_getWitnessTable(&unk_100088C98, &type metadata for HomeAccessoryViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD3C0);
  }
  return result;
}

uint64_t sub_10006B098(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = &unk_100089028;
  v2[2] = (char *)&value witness table for () + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 88);
}

id sub_10006B0F4()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  id v3;
  NSString v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = *(_QWORD *)&v0[qword_1000CD3D0 + 8];
  v3 = *(id *)&v0[qword_1000CD3C8];
  swift_bridgeObjectRetain(v2);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  objc_msgSend(v3, "removeObserver:forKeyPath:context:", v0, v4, 0);

  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, "dealloc");
}

id sub_10006B1AC(void *a1)
{
  id v1;

  v1 = a1;
  return sub_10006B0F4();
}

uint64_t sub_10006B1D0(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1000CD3D0 + 8));
  return swift_release(*(_QWORD *)(a1 + qword_1000CD3D8 + 8));
}

uint64_t sub_10006B220(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  _OWORD v21[2];

  if (a3)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v10 = v9;
    if (a4)
      goto LABEL_3;
LABEL_6:
    memset(v21, 0, sizeof(v21));
    v18 = a5;
    v19 = a1;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v17 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  v10 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  swift_unknownObjectRetain(a4);
  v11 = a5;
  v12 = a1;
  _bridgeAnyObjectToAny(_:)(v21);
  swift_unknownObjectRelease(a4, v13);
  if (!a5)
    goto LABEL_7;
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  v15 = v14;
  v16 = sub_10006B704();
  v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a5, v15, (char *)&type metadata for Any + 8, v16);

LABEL_8:
  sub_10006B350(v8, v10, (uint64_t)v21, v17);

  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v10);
  return sub_10000A9E8((uint64_t)v21);
}

void sub_10006B328()
{
  sub_10006B6D8();
}

uint64_t type metadata accessor for UserDefaultsObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UserDefaultsObserver);
}

uint64_t sub_10006B350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  NSString *v25;
  unint64_t v26;
  char v27;
  int v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;

  ObjectType = swift_getObjectType(v4);
  v9 = *(_QWORD *)((swift_isaMask & *v4) + 0x50);
  v38 = type metadata accessor for Optional(0, v9);
  v36 = *(_QWORD *)(v38 - 8);
  v10 = __chkstk_darwin(v38);
  v37 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  v15 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v12);
  v35 = (char *)&v35 - v16;
  *(_QWORD *)&v39 = v4;
  *(_QWORD *)&v41[0] = 0;
  *((_QWORD *)&v41[0] + 1) = 0xE000000000000000;
  v17._object = (void *)0x8000000100094FE0;
  v17._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x65676E616863203ALL;
  v18._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v18);
  v42 = a4;
  v19 = sub_100004B18(&qword_1000CD460);
  v20 = sub_10006B74C();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v42, v19, v20);
  v21 = *((_QWORD *)&v41[0] + 1);
  sub_10003DDD8(10, *(uint64_t *)&v41[0], *((void **)&v41[0] + 1), 0, ObjectType, (uint64_t)&off_1000B8D68);
  result = swift_bridgeObjectRelease(v21);
  if (a4 && a2)
  {
    if ((v23 = *(_QWORD *)((char *)v4 + qword_1000CD3D0), v24 = *(_QWORD *)((char *)v4 + qword_1000CD3D0 + 8),
                                                           v23 == a1)
      && v24 == a2
      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v23, v24, 0), (result & 1) != 0))
    {
      if (*(_QWORD *)(a4 + 16))
      {
        v25 = NSKeyValueChangeNewKey;
        v26 = sub_1000440A8((uint64_t)v25);
        if ((v27 & 1) != 0)
        {
          sub_10000ABEC(*(_QWORD *)(a4 + 56) + 32 * v26, (uint64_t)&v39);
        }
        else
        {
          v39 = 0u;
          v40 = 0u;
        }

        if (*((_QWORD *)&v40 + 1))
        {
          sub_10006B798(&v39, v41);
          sub_10000ABEC((uint64_t)v41, (uint64_t)&v39);
          v28 = swift_dynamicCast(v14, &v39, (char *)&type metadata for Any + 8, v9, 6);
          v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
          if (v28)
          {
            v29(v14, 0, 1, v9);
            v30 = v35;
            (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v35, v14, v9);
            v31 = v37;
            (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v37, v30, v9);
            v29(v31, 0, 1, v9);
            (*(void (**)(char *))((char *)v4 + qword_1000CD3D8))(v31);
            (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v38);
            (*(void (**)(char *, uint64_t))(v15 + 8))(v30, v9);
          }
          else
          {
            v29(v14, 1, 1, v9);
            v32 = *(void (**)(char *, uint64_t))(v36 + 8);
            v33 = v38;
            v32(v14, v38);
            v34 = v37;
            v29(v37, 1, 1, v9);
            (*(void (**)(char *))((char *)v4 + qword_1000CD3D8))(v34);
            v32(v34, v33);
          }
          return sub_10000697C(v41);
        }
      }
      else
      {
        v39 = 0u;
        v40 = 0u;
      }
      return sub_10000A9E8((uint64_t)&v39);
    }
  }
  return result;
}

void sub_10006B6D8()
{
  _swift_stdlib_reportUnimplementedInitializer("PCViewService.UserDefaultsObserver", 34, "init()", 6, 0);
  __break(1u);
}

unint64_t sub_10006B704()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C5F50;
  if (!qword_1000C5F50)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = swift_getWitnessTable(&unk_10007FDB0, v1);
    atomic_store(result, (unint64_t *)&qword_1000C5F50);
  }
  return result;
}

unint64_t sub_10006B74C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD468;
  if (!qword_1000CD468)
  {
    v1 = sub_100005F48(&qword_1000CD460);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1000CD468);
  }
  return result;
}

_OWORD *sub_10006B798(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10006B7A8@<X0>(_QWORD *a1@<X8>)
{
  return sub_10006B7D0((uint64_t)&unk_100089368, (uint64_t)&unk_100089390, a1);
}

uint64_t sub_10006B7BC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10006B7D0((uint64_t)&unk_100089290, (uint64_t)&unk_1000892B8, a1);
}

uint64_t sub_10006B7D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = swift_getKeyPath(a2);
  static Published.subscript.getter(a3, v3, KeyPath, v7);
  swift_release(KeyPath);
  return swift_release(v7);
}

uint64_t sub_10006B82C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100089320);
  v2 = swift_getKeyPath(&unk_100089348);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10006B89C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000892D8);
  v2 = swift_getKeyPath(&unk_100089300);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_10006B90C()
{
  return sub_100019EAC((uint64_t)&unk_100089248, (uint64_t)&unk_100089270);
}

uint64_t sub_10006B920()
{
  return sub_100019EAC((uint64_t)&unk_100089200, (uint64_t)&unk_100089228);
}

uint64_t sub_10006B934@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];

  v2 = sub_100004B18(&qword_1000CD7B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ActivityDisplayContext(0);
  v6 = sub_100059C4C();
  v12[1] = v6;
  v7 = sub_100004B18(&qword_1000CD7B8);
  v8 = sub_10000AAFC(&qword_1000CD7C0, &qword_1000CD7B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_10005A12C, 0, v7, &type metadata for String, v8);
  swift_release(v6);
  v9 = sub_10000AAFC(&qword_1000CD7C8, &qword_1000CD7B0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v10 = Publisher.eraseToAnyPublisher()(v2, v9);
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v10;
  return result;
}

uint64_t sub_10006BA6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  _QWORD v9[2];
  _BYTE v10[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    KeyPath = swift_getKeyPath(&unk_100089320);
    v8 = swift_getKeyPath(&unk_100089348);
    v9[0] = v3;
    v9[1] = v2;
    swift_bridgeObjectRetain(v2);
    return static Published.subscript.setter(v9, v6, KeyPath, v8);
  }
  return result;
}

id sub_10006BB08@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  *a2 = v2;
  return v2;
}

uint64_t sub_10006BB14(UIImage **a1, UIImage **a2)
{
  UIImage *v2;
  UIImage *v3;
  NSData *v4;
  NSData *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSData *v9;
  NSData *v10;
  unint64_t v11;
  unint64_t v12;
  char v14;
  char v15;

  v2 = *a1;
  v3 = *a2;
  if (v2 && (v4 = UIImagePNGRepresentation(v2)) != 0)
  {
    v5 = v4;
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    if (!v3)
      goto LABEL_9;
  }
  else
  {
    v6 = 0;
    v8 = 0xF000000000000000;
    if (!v3)
      goto LABEL_9;
  }
  v9 = UIImagePNGRepresentation(v3);
  if (v9)
  {
    v10 = v9;
    v3 = (UIImage *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    goto LABEL_10;
  }
  v3 = 0;
LABEL_9:
  v12 = 0xF000000000000000;
LABEL_10:
  if (v8 >> 60 == 15)
  {
    if (v12 >> 60 == 15)
      return 1;
    goto LABEL_14;
  }
  if (v12 >> 60 == 15)
  {
LABEL_14:
    sub_10004CCD0(v6, v8);
    sub_10004CCD0((uint64_t)v3, v12);
    return 0;
  }
  sub_100070214(v6, v8);
  sub_10006F5A8(v6, v8);
  v15 = v14;
  sub_10004CCD0((uint64_t)v3, v12);
  sub_10004CCD0(v6, v8);
  sub_10004CCD0(v6, v8);
  return v15 & 1;
}

uint64_t sub_10006BC4C(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  void *v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    KeyPath = swift_getKeyPath(&unk_1000892D8);
    v7 = swift_getKeyPath(&unk_100089300);
    v9 = v2;
    v8 = v2;
    return static Published.subscript.setter(&v9, v5, KeyPath, v7);
  }
  return result;
}

uint64_t sub_10006BCDC()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v1 = sub_100053598();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v3, "removeObserver:", v0);

  v4 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityDisplayContext;
  v5 = sub_100004B18(&qword_1000CD730);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__movie;
  v7 = sub_100004B18(&qword_1000CD738);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  sub_100007A90(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler), *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler + 8));
  v8 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__subtitle;
  v9 = sub_100004B18(&qword_1000CD740);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityImage;
  v11 = sub_100004B18(&qword_1000CD748);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__canShowActivityIcon;
  v13 = sub_100004B18(&qword_1000C7500);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__isOptimisticStateActive, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_tasks));
  return v0;
}

uint64_t sub_10006BE90()
{
  uint64_t v0;

  sub_10006BCDC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10006BEB4()
{
  return type metadata accessor for ProximityCardHeaderViewModel(0);
}

uint64_t type metadata accessor for ProximityCardHeaderViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CD4D0;
  if (!qword_1000CD4D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProximityCardHeaderViewModel);
  return result;
}

void sub_10006BEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t KeyPath;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  void *v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  id v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __CFString *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  unint64_t v54;
  id v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;

  v1 = v0;
  v2 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v2);
  v68 = (uint64_t *)((char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for AdjustedMovie(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v66 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v62 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v62 - v11;
  v13 = sub_100004B18(&qword_1000CD4F0);
  v14 = __chkstk_darwin(v13);
  v64 = (uint64_t)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v63 = (uint64_t)&v62 - v17;
  v18 = __chkstk_darwin(v16);
  v67 = (uint64_t *)((char *)&v62 - v19);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v62 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v62 - v24;
  __chkstk_darwin(v23);
  v27 = (uint64_t *)((char *)&v62 - v26);
  v70 = 0;
  v71 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(v71);
  v70 = 0xD000000000000022;
  v71 = 0x80000001000950C0;
  KeyPath = swift_getKeyPath(&unk_100089290);
  v29 = swift_getKeyPath(&unk_1000892B8);
  v69 = v1;
  static Published.subscript.getter(v27, v1, KeyPath, v29);
  swift_release(KeyPath);
  swift_release(v29);
  sub_100017F28((uint64_t)v27, (uint64_t)v25, &qword_1000CD4F0);
  v65 = v5;
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v30(v25, 1, v4) == 1)
  {
    v31 = (void *)0xE300000000000000;
    v32 = 7104878;
  }
  else
  {
    sub_10006F3DC((uint64_t)v25, (uint64_t)v12);
    sub_100017FC4((uint64_t)v12, (uint64_t)v10, type metadata accessor for AdjustedMovie);
    v32 = String.init<A>(describing:)(v10, v4);
    v31 = v33;
    sub_100018008((uint64_t)v12, type metadata accessor for AdjustedMovie);
  }
  sub_100017AB4((uint64_t)v27, &qword_1000CD4F0);
  v34._countAndFlagsBits = v32;
  v34._object = v31;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v31);
  v35 = v71;
  v36 = sub_100053598();
  swift_bridgeObjectRetain(v35);
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  objc_msgSend(v36, "ulog:message:", 40, v37);
  swift_bridgeObjectRelease(v35);

  v38 = swift_getKeyPath(&unk_100089290);
  v39 = swift_getKeyPath(&unk_1000892B8);
  v40 = v69;
  static Published.subscript.getter(v22, v69, v38, v39);
  swift_release(v38);
  swift_release(v39);
  LODWORD(v38) = v30(v22, 1, v4);
  sub_100017AB4((uint64_t)v22, &qword_1000CD4F0);
  if ((_DWORD)v38 == 1)
  {
    v41 = swift_getKeyPath(&unk_100089368);
    v42 = swift_getKeyPath(&unk_100089390);
    v43 = v68;
    static Published.subscript.getter(v68, v40, v41, v42);
    swift_release(v41);
    swift_release(v42);
    v44 = v43[2];
    sub_100018008((uint64_t)v43, type metadata accessor for ActivityDisplayContext);
    v45 = v67;
    sub_100004714(v44, v67);
    if (v30((char *)v45, 1, v4) == 1)
    {
      sub_100017AB4((uint64_t)v45, &qword_1000CD4F0);
      v70 = 0;
      v71 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease(v71);
      v70 = 0xD000000000000026;
      v71 = 0x80000001000950F0;
      v46 = swift_getKeyPath(&unk_100089368);
      v47 = swift_getKeyPath(&unk_100089390);
      static Published.subscript.getter(v43, v40, v46, v47);
      swift_release(v46);
      swift_release(v47);
      v48 = v43[2];
      sub_100018008((uint64_t)v43, type metadata accessor for ActivityDisplayContext);
      v49 = sub_10006F30C(v48);
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v52 = v51;

      v53._countAndFlagsBits = v50;
      v53._object = v52;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(v52);
      v54 = v71;
      v55 = sub_100053598();
      swift_bridgeObjectRetain(v54);
      v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v54);
      objc_msgSend(v55, "ulog:message:", 60, v56);
      swift_bridgeObjectRelease(v54);

    }
    else
    {
      v57 = v66;
      sub_10006F3DC((uint64_t)v45, v66);
      v58 = v63;
      sub_100017FC4(v57, v63, type metadata accessor for AdjustedMovie);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v58, 0, 1, v4);
      v59 = swift_getKeyPath(&unk_100089290);
      v60 = swift_getKeyPath(&unk_1000892B8);
      v61 = v64;
      sub_100017F28(v58, v64, &qword_1000CD4F0);
      swift_retain(v40);
      static Published.subscript.setter(v61, v40, v59, v60);
      sub_100017AB4(v58, &qword_1000CD4F0);
      sub_100018008(v57, type metadata accessor for AdjustedMovie);
    }
  }
}

void sub_10006C540(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t v14;
  char *v15;

  sub_1000708E4(319, &qword_1000CD4E0, type metadata accessor for ActivityDisplayContext, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100025338(319, &qword_1000CD4E8, &qword_1000CD4F0);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      v12[2] = &unk_1000890C0;
      sub_10001A8B4(319, &qword_1000CD4F8, (uint64_t)&type metadata for String);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_100025338(319, &qword_1000CD500, (uint64_t *)&unk_1000CD508);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          sub_10001A8B4(319, (unint64_t *)&qword_1000C7338, (uint64_t)&type metadata for Bool);
          if (v11 <= 0x3F)
          {
            v13 = *(_QWORD *)(v10 - 8) + 64;
            v14 = v13;
            v15 = (char *)&value witness table for Builtin.BridgeObject + 64;
            swift_updateClassMetadata2(a1, 256, 8, v12, a1 + 80);
          }
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for ProximityCardHeaderViewEvent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10006C6D4 + 4 * byte_100089085[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006C708 + 4 * byte_100089080[v4]))();
}

uint64_t sub_10006C708(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C710(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006C718);
  return result;
}

uint64_t sub_10006C724(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006C72CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006C730(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C738(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProximityCardHeaderViewEvent()
{
  return &type metadata for ProximityCardHeaderViewEvent;
}

unint64_t sub_10006C758()
{
  unint64_t result;

  result = qword_1000CD728;
  if (!qword_1000CD728)
  {
    result = swift_getWitnessTable(&unk_100089170, &type metadata for ProximityCardHeaderViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000CD728);
  }
  return result;
}

uint64_t sub_10006C79C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for ProximityCardHeaderViewModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006C7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_100089368);
  v5 = swift_getKeyPath(&unk_100089390);
  static Published.subscript.getter(v3, v0, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = v3[3];
  swift_bridgeObjectRetain(v3[4]);
  sub_100018008((uint64_t)v3, type metadata accessor for ActivityDisplayContext);
  return v6;
}

uint64_t sub_10006C8A4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_100089290);
  v4 = swift_getKeyPath(&unk_1000892B8);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_10006C908(uint64_t a1, uint64_t a2)
{
  return sub_10006C930(a1, a2, (uint64_t)&unk_100089248, (uint64_t)&unk_100089270);
}

uint64_t sub_10006C91C(uint64_t a1, uint64_t a2)
{
  return sub_10006C930(a1, a2, (uint64_t)&unk_100089200, (uint64_t)&unk_100089228);
}

uint64_t sub_10006C930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(a3);
  v7 = swift_getKeyPath(a4);
  static Published.subscript.getter(&v9, v4, KeyPath, v7);
  swift_release(KeyPath);
  swift_release(v7);
  return v9;
}

uint64_t sub_10006C99C(uint64_t result)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  v2 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler + 8);
    v4 = result & 1;
    swift_retain(v3);
    v2(v4);
    return sub_100007A90((uint64_t)v2, v3);
  }
  return result;
}

uint64_t sub_10006CA00(uint64_t a1)
{
  uint64_t result;

  result = sub_100003E48((unint64_t *)&unk_1000C6E80, type metadata accessor for ProximityCardHeaderViewModel, (uint64_t)&unk_1000891B4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10006CA3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017FC4(a1, (uint64_t)v4, type metadata accessor for ActivityIcon);
  v5 = sub_100004B18(qword_1000CD7D0);
  State.wrappedValue.setter(v4, v5);
  return sub_100018008(a1, type metadata accessor for ActivityIcon);
}

uint64_t sub_10006CAE8()
{
  uint64_t v0;

  v0 = sub_100004B18(qword_1000CD7D0);
  return State.projectedValue.getter(v0);
}

BOOL sub_10006CB20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = sub_100004B18(&qword_1000CD4F0);
  v5 = __chkstk_darwin(v4);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(v5);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = (char *)(v1 + *(int *)(a1 + 44));
  v12 = *v11;
  v13 = *((_QWORD *)v11 + 1);
  v24[8] = v12;
  v25 = v13;
  v14 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(&v26, v14);
  v15 = v26;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v2, a1);
  if (v15 == 1)
  {
    v16 = *((_QWORD *)v10 + 2);
    v18 = *(_QWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24);
    v19 = *(void (**)(uint64_t, uint64_t))(v17 + 40);
    swift_unknownObjectRetain(v16);
    v19(v18, v17);
    swift_unknownObjectRelease(v16, v20);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a1);
    v21 = type metadata accessor for AdjustedMovie(0);
    v22 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v7, 1, v21) != 1;
    sub_100017AB4((uint64_t)v7, &qword_1000CD4F0);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, a1);
    return 0;
  }
  return v22;
}

uint64_t sub_10006CCA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  v40 = a2;
  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000CD860);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100004B18(&qword_1000CD868);
  v11 = __chkstk_darwin(v39);
  v38 = (uint64_t)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v11);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v13 = sub_100004B18(&qword_1000CD870);
  v15 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  sub_10006CF30(v2, v15, v14, (uint64_t)&v10[*(int *)(v13 + 44)]);
  v16 = *(_QWORD *)(v2 + 16);
  v37 = v3;
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
  swift_unknownObjectRetain(v16);
  v35 = v17(v15, v14);
  swift_unknownObjectRelease(v16, v18);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v19 = v7;
  v36(v7, v3, a1);
  v20 = *(unsigned __int8 *)(v5 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = v21 + v6;
  v34 = v21 + v6;
  v23 = v20 | 7;
  v24 = swift_allocObject(&unk_1000B8F68, v22, v20 | 7);
  *(_QWORD *)(v24 + 16) = v15;
  *(_QWORD *)(v24 + 24) = v14;
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  v25(v24 + v21, v7, a1);
  v26 = v38;
  sub_100017F28((uint64_t)v10, v38, &qword_1000CD860);
  v27 = (uint64_t *)(v26 + *(int *)(v39 + 36));
  *v27 = v35;
  v27[1] = (uint64_t)sub_100070974;
  v27[2] = v24;
  sub_100017AB4((uint64_t)v10, &qword_1000CD860);
  v28 = v19;
  v36(v19, v37, a1);
  v29 = swift_allocObject(&unk_1000B8F90, v34, v23);
  *(_QWORD *)(v29 + 16) = v15;
  *(_QWORD *)(v29 + 24) = v14;
  v25(v29 + v21, v28, a1);
  v30 = v40;
  sub_100017F28(v26, v40, &qword_1000CD868);
  v31 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30
                                                                    + *(int *)(sub_100004B18(&qword_1000CD878) + 36));
  *v31 = sub_1000709B4;
  v31[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v29;
  v31[2] = 0;
  v31[3] = 0;
  return sub_100017AB4(v26, &qword_1000CD868);
}

uint64_t sub_10006CF30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  void *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[448];
  uint64_t v55[56];
  _BYTE v56[313];
  _BYTE v57[7];
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _BYTE v63[313];
  _BYTE v64[7];
  _BYTE v65[456];

  v52 = a4;
  v7 = sub_100004B18(&qword_1000CD890);
  v8 = __chkstk_darwin(v7);
  v53 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v52 - v10;
  v12 = sub_100004B18(&qword_1000CD898);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (uint64_t *)((char *)&v52 - v17);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v52 - v20;
  *v18 = static Alignment.bottomTrailing.getter(v19);
  v18[1] = v22;
  v23 = sub_100004B18(&qword_1000CD8A0);
  sub_10006D38C(a1, a2, a3, (uint64_t)v18 + *(int *)(v23 + 44));
  v24 = (uint64_t)v21;
  sub_100018064((uint64_t)v18, (uint64_t)v21, &qword_1000CD898);
  v26 = type metadata accessor for ProximityCardHeaderView(0, a2, a3, v25);
  sub_10006DB70(v26, (uint64_t)v65);
  v27 = memcpy(v63, v65, 0x131uLL);
  LOBYTE(a3) = static Edge.Set.leading.getter(v27);
  v28 = EdgeInsets.init(_all:)(-10.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v35 = memcpy(v56, v63, 0x131uLL);
  v63[312] = 0;
  v56[312] = a3;
  *(_DWORD *)v57 = *(_DWORD *)v64;
  *(_DWORD *)&v57[3] = *(_DWORD *)&v64[3];
  v58 = v28;
  v59 = v30;
  v60 = v32;
  v61 = v34;
  v62 = 0;
  v36 = static Color.blue.getter(v35);
  sub_100026E50(v36, 0, v65, 1.0);
  swift_release(v36);
  sub_100070A68((uint64_t)v63);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v37 = *(_QWORD *)(qword_1000DF570 + 496);
  swift_retain(v37);
  v38 = sub_100020AA8();
  swift_release(v37);
  if ((v38 & 1) != 0)
  {
    sub_10006DBF0(v26, v55);
    v39 = v55[0];
  }
  else
  {
    v39 = 0;
  }
  v40 = *(_QWORD *)(qword_1000DF570 + 544);
  swift_retain(v40);
  v41 = sub_100020AA8();
  swift_release(v40);
  if ((v41 & 1) != 0)
  {
    v42 = (uint64_t)v11;
    sub_10006DC8C(v26);
    v43 = sub_100004B18(&qword_1000CD8A8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v11, 0, 1, v43);
  }
  else
  {
    v44 = sub_100004B18(&qword_1000CD8A8);
    v42 = (uint64_t)v11;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v11, 1, 1, v44);
  }
  sub_100017F28((uint64_t)v21, (uint64_t)v15, &qword_1000CD898);
  v45 = v53;
  sub_100017F28(v42, v53, &qword_1000CD890);
  v46 = v52;
  sub_100017F28((uint64_t)v15, v52, &qword_1000CD898);
  v47 = v42;
  v48 = (int *)sub_100004B18(&qword_1000CD8B0);
  v49 = (void *)(v46 + v48[12]);
  memcpy(v54, v65, 0x1B9uLL);
  memcpy(v49, v65, 0x1B9uLL);
  v50 = v46 + v48[16];
  *(_QWORD *)v50 = 0;
  *(_BYTE *)(v50 + 8) = 1;
  *(_QWORD *)(v46 + v48[20]) = v39;
  sub_100017F28(v45, v46 + v48[24], &qword_1000CD890);
  sub_100070DB4((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100070BE4);
  swift_retain(v39);
  sub_100017AB4(v47, &qword_1000CD890);
  sub_100017AB4(v24, &qword_1000CD898);
  sub_100017AB4(v45, &qword_1000CD890);
  swift_release(v39);
  memcpy(v55, v65, 0x1B9uLL);
  sub_100070DB4((uint64_t)v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100070E68);
  return sub_100017AB4((uint64_t)v15, &qword_1000CD898);
}

uint64_t sub_10006D38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[3];

  v85 = a4;
  v7 = sub_100004B18(&qword_1000CB1C0);
  __chkstk_darwin(v7);
  v75 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ActivityIconView(0);
  __chkstk_darwin(v9);
  v79 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100004B18(&qword_1000C7DA0);
  __chkstk_darwin(v74);
  v78 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100004B18(&qword_1000C7D70);
  __chkstk_darwin(v76);
  v80 = (uint64_t)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004B18(&qword_1000CD8C8);
  v82 = *(_QWORD *)(v13 - 8);
  v83 = v13;
  __chkstk_darwin(v13);
  v77 = (uint64_t *)((char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100004B18(&qword_1000CD8D0);
  v16 = __chkstk_darwin(v15);
  v84 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v81 = (uint64_t)&v73 - v18;
  v19 = sub_100004B18(&qword_1000C7DE0);
  __chkstk_darwin(v19);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004B18(&qword_1000C7DB0);
  __chkstk_darwin(v22);
  v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100004B18(&qword_1000CD8D8);
  v26 = __chkstk_darwin(v25);
  v28 = (uint64_t *)((char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v30 = (char *)&v73 - v29;
  v32 = type metadata accessor for ProximityCardHeaderView(0, a2, a3, v31);
  v33 = sub_10006D924(v32, (uint64_t)v21);
  v34 = static Alignment.center.getter(v33);
  _FrameLayout.init(width:height:alignment:)(v86, 0x4051800000000000, 0, 0x4051800000000000, 0, v34, v35);
  sub_100017F28((uint64_t)v21, (uint64_t)v24, &qword_1000C7DE0);
  v36 = &v24[*(int *)(v22 + 36)];
  v37 = v86[1];
  *(_OWORD *)v36 = v86[0];
  *((_OWORD *)v36 + 1) = v37;
  *((_OWORD *)v36 + 2) = v86[2];
  v38 = (double *)a1;
  v39 = sub_100017AB4((uint64_t)v21, &qword_1000C7DE0);
  v40 = static Color.blue.getter(v39);
  sub_100027050(v40, 0, v28, 1.0);
  swift_release(v40);
  sub_100017AB4((uint64_t)v24, &qword_1000C7DB0);
  sub_100018064((uint64_t)v28, (uint64_t)v30, &qword_1000CD8D8);
  v41 = *(_QWORD *)(a1 + 16);
  v42 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 48);
  swift_unknownObjectRetain(v41);
  LOBYTE(v42) = v42(a2, a3);
  swift_unknownObjectRelease(v41, v43);
  if ((v42 & 1) != 0)
  {
    v44 = sub_100004B18(qword_1000CD7D0);
    v45 = (uint64_t)v75;
    State.projectedValue.getter(v44);
    v46 = v79;
    v47 = sub_100046BD4(v45, v79, *v38);
    v48 = static Edge.Set.all.getter(v47);
    v49 = EdgeInsets.init(_all:)(17.0);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v56 = v78;
    sub_100017FC4(v46, v78, type metadata accessor for ActivityIconView);
    v57 = v56 + *(int *)(v74 + 36);
    *(_BYTE *)v57 = v48;
    *(double *)(v57 + 8) = v49;
    *(_QWORD *)(v57 + 16) = v51;
    *(_QWORD *)(v57 + 24) = v53;
    *(_QWORD *)(v57 + 32) = v55;
    *(_BYTE *)(v57 + 40) = 0;
    sub_100018008(v46, type metadata accessor for ActivityIconView);
    v58 = v80;
    sub_100017F28(v56, v80, &qword_1000C7DA0);
    __asm { FMOV            V0.2D, #6.0 }
    *(_OWORD *)(v58 + *(int *)(v76 + 36)) = _Q0;
    v64 = sub_100017AB4(v56, &qword_1000C7DA0);
    v65 = static Color.blue.getter(v64);
    v66 = v77;
    sub_10002733C(v65, 0, v77, 1.0);
    swift_release(v65);
    sub_100017AB4(v58, &qword_1000C7D70);
    v67 = v81;
    sub_100018064((uint64_t)v66, v81, &qword_1000CD8C8);
    v68 = 0;
  }
  else
  {
    v68 = 1;
    v67 = v81;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v67, v68, 1, v83);
  sub_100017F28((uint64_t)v30, (uint64_t)v28, &qword_1000CD8D8);
  v69 = v84;
  sub_100017F28(v67, v84, &qword_1000CD8D0);
  v70 = v85;
  sub_100017F28((uint64_t)v28, v85, &qword_1000CD8D8);
  v71 = sub_100004B18(&qword_1000CD8E0);
  sub_100017F28(v69, v70 + *(int *)(v71 + 48), &qword_1000CD8D0);
  sub_100017AB4(v67, &qword_1000CD8D0);
  sub_100017AB4((uint64_t)v30, &qword_1000CD8D8);
  sub_100017AB4(v69, &qword_1000CD8D0);
  return sub_100017AB4((uint64_t)v28, &qword_1000CD8D8);
}

uint64_t sub_10006D924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;

  v28 = a2;
  v4 = sub_100004B18(&qword_1000C7E10);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100004B18(&qword_1000C7E00);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004B18(&qword_1000C7DF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004B18(&qword_1000C7DE0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Alignment.center.getter(v14);
  v6[1] = v17;
  v18 = sub_100004B18(&qword_1000CD8E8);
  sub_10006E0C0(v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (_QWORD *)((char *)v6 + *(int *)(v18 + 44)));
  v19 = 0.0;
  if (sub_10006CB20(a1))
    v20 = 0.0;
  else
    v20 = 10.0;
  sub_100017F28((uint64_t)v6, (uint64_t)v9, &qword_1000C7E10);
  v21 = &v9[*(int *)(v7 + 36)];
  *(double *)v21 = v20;
  v21[8] = 0;
  sub_100017AB4((uint64_t)v6, &qword_1000C7E10);
  if (sub_10006CB20(a1))
    v19 = 1.0;
  sub_100017F28((uint64_t)v9, (uint64_t)v12, &qword_1000C7E00);
  *(double *)&v12[*(int *)(v10 + 36)] = v19;
  v22 = sub_100017AB4((uint64_t)v9, &qword_1000C7E00);
  v23 = static Animation.default.getter(v22);
  v24 = sub_10006CB20(a1);
  sub_100017F28((uint64_t)v12, (uint64_t)v16, &qword_1000C7DF0);
  v25 = &v16[*(int *)(v13 + 36)];
  *(_QWORD *)v25 = v23;
  v25[8] = v24;
  sub_100017AB4((uint64_t)v12, &qword_1000C7DF0);
  return sub_100018064((uint64_t)v16, v28, &qword_1000C7DE0);
}

void *sub_10006DB70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[288];
  _BYTE __src[288];

  v5 = static HorizontalAlignment.leading.getter();
  sub_10006E538(v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v7);
  memcpy(&__src[7], v7, 0x119uLL);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return memcpy((void *)(a2 + 17), __src, 0x120uLL);
}

uint64_t sub_10006DBF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  v4 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 56);
  swift_unknownObjectRetain(v4);
  LOBYTE(v5) = v7(v6, v5);
  swift_unknownObjectRelease(v4, v8);
  if ((v5 & 1) != 0)
  {
    v9 = 0xD00000000000001BLL;
    v10 = 0x8000000100095140;
  }
  else
  {
    v10 = 0x8000000100095120;
    v9 = 0xD000000000000016;
  }
  result = Image.init(systemName:)(v9, v10);
  *a2 = result;
  return result;
}

uint64_t sub_10006DC8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  __chkstk_darwin(a1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = *(unsigned __int8 *)(v2 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(&unk_1000B8FB8, v6 + v3, v5 | 7);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v7 + v6, v4, a1);
  v8 = sub_100004B18(&qword_1000CD8B8);
  v9 = sub_100071174();
  return Button.init(action:label:)(sub_100071108, v7, sub_10006EA24, 0, v8, v9);
}

uint64_t sub_10006DD7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v10[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006DED4(a1, (uint64_t)v10);
  v5 = v11;
  if (v11)
  {
    v6 = v12;
    sub_100006914(v10, v11);
    v5 = sub_10006248C(v5, v6);
    v7 = sub_10000697C(v10);
  }
  else
  {
    v7 = sub_100017AB4((uint64_t)v10, &qword_1000C6E50);
  }
  UUID.init()(v7);
  *(_QWORD *)&v4[*(int *)(v2 + 20)] = v5;
  return sub_10006CA3C((uint64_t)v4);
}

uint64_t sub_10006DE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[9];
  uint64_t v12;

  v5 = type metadata accessor for ProximityCardHeaderView(0, a2, a3, a4);
  sub_10006DD7C(v5);
  v6 = (char *)(a1 + *(int *)(v5 + 44));
  v7 = *v6;
  v8 = *((_QWORD *)v6 + 1);
  v11[1] = v7;
  v12 = v8;
  v11[0] = 1;
  v9 = sub_100004B18(&qword_1000C7598);
  return State.wrappedValue.setter(v11, v9);
}

void sub_10006DED4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  double v15;
  UIImage *v16;
  UIImage *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  id v22;
  CGSize v23;

  v3 = v2;
  v6 = type metadata accessor for Image.ResizingMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v3 + 16);
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 32);
  swift_unknownObjectRetain(v10);
  v22 = (id)v13(v12, v11);
  swift_unknownObjectRelease(v10, v14);
  if (v22)
  {
    v15 = *(double *)v3;
    v23.width = *(CGFloat *)v3;
    v23.height = *(CGFloat *)v3;
    UIGraphicsBeginImageContextWithOptions(v23, 0, 0.0);
    objc_msgSend(v22, "drawInRect:", 0.0, 0.0, v15, v15);
    v16 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    if (v16)
    {
      v17 = v16;
      v18 = Image.init(uiImage:)();
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
      v19 = Image.resizable(capInsets:resizingMode:)(v9, v18, 0.0, 0.0, 0.0, 0.0);
      v20 = swift_release(v18);
      (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v20);
      *(_QWORD *)(a2 + 24) = sub_100004B18(&qword_1000CD880);
      *(_QWORD *)(a2 + 32) = sub_100070A04();

      *(_QWORD *)a2 = v19;
      *(_QWORD *)(a2 + 8) = 0;
      *(_WORD *)(a2 + 16) = 1;
    }
    else
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;

    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

_QWORD *sub_10006E0C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a4;
  v7 = sub_100004B18(&qword_1000CD8F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MovieView(0);
  __chkstk_darwin(v10);
  v63 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100004B18(&qword_1000C7E28);
  __chkstk_darwin(v60);
  v64 = (uint64_t)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004B18(&qword_1000CD8F8);
  v14 = __chkstk_darwin(v13);
  v62 = (uint64_t *)((char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  v65 = (uint64_t)&v60 - v16;
  v17 = sub_100004B18(&qword_1000CD4F0);
  __chkstk_darwin(v17);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AdjustedMovie(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v61 = (uint64_t)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (char *)(a1 + *(int *)(type metadata accessor for ProximityCardHeaderView(0, a2, a3, v23) + 44));
  v25 = *v24;
  v26 = *((_QWORD *)v24 + 1);
  v67 = v25;
  v68 = v26;
  v27 = sub_100004B18(&qword_1000C7598);
  State.wrappedValue.getter(&v69, v27);
  v28 = v66;
  if (v69 != 1)
    goto LABEL_4;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = *(void (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain(v29);
  v30(a2, a3);
  swift_unknownObjectRelease(v29, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_100017AB4((uint64_t)v19, &qword_1000CD4F0);
    v28 = v66;
LABEL_4:
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    v32 = sub_10007126C();
    return _ConditionalContent<>.init(storage:)(v28, v9, v13, &type metadata for EmptyView, v32, &protocol witness table for EmptyView);
  }
  v34 = (uint64_t)v19;
  v35 = v61;
  sub_10006F3DC(v34, v61);
  v36 = v63;
  v37 = sub_100017FC4(v35, v63, type metadata accessor for AdjustedMovie);
  v38 = static Edge.Set.leading.getter(v37);
  v39 = v38;
  v40 = static Edge.Set.trailing.getter(v38);
  v41 = Edge.Set.init(rawValue:)(0);
  v42 = Edge.Set.init(rawValue:)(v41);
  if (Edge.Set.init(rawValue:)(v42 & v39) != v39)
    v41 = Edge.Set.init(rawValue:)(v41 | v39);
  v43 = Edge.Set.init(rawValue:)(v41);
  v44 = v7;
  if (Edge.Set.init(rawValue:)(v43 & v40) != v40)
    LOBYTE(v41) = Edge.Set.init(rawValue:)(v41 | v40);
  v45 = v66;
  v46 = EdgeInsets.init(_all:)(-10.0);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = v64;
  sub_100017FC4(v36, v64, type metadata accessor for MovieView);
  v54 = v53 + *(int *)(v60 + 36);
  *(_BYTE *)v54 = v41;
  *(double *)(v54 + 8) = v46;
  *(_QWORD *)(v54 + 16) = v48;
  *(_QWORD *)(v54 + 24) = v50;
  *(_QWORD *)(v54 + 32) = v52;
  *(_BYTE *)(v54 + 40) = 0;
  v55 = sub_100018008(v36, type metadata accessor for MovieView);
  v56 = static Color.blue.getter(v55);
  v57 = v62;
  sub_100027628(v56, 0, v62, 1.0);
  swift_release(v56);
  sub_100017AB4(v53, &qword_1000C7E28);
  v58 = v65;
  sub_100018064((uint64_t)v57, v65, &qword_1000CD8F8);
  sub_100017F28(v58, (uint64_t)v9, &qword_1000CD8F8);
  swift_storeEnumTagMultiPayload(v9, v44, 0);
  v59 = sub_10007126C();
  _ConditionalContent<>.init(storage:)(v45, v9, v13, &type metadata for EmptyView, v59, &protocol witness table for EmptyView);
  sub_100017AB4(v58, &qword_1000CD8F8);
  return (_QWORD *)sub_100018008(v35, type metadata accessor for AdjustedMovie);
}

uint64_t sub_10006E538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v71;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[25];
  uint64_t v83;
  uint64_t KeyPath;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[25];
  _OWORD v93[7];
  _OWORD v94[2];
  _OWORD v95[7];
  _OWORD v96[2];
  _OWORD __src[18];
  _OWORD v98[7];
  _OWORD v99[2];
  _OWORD v100[7];
  _OWORD v101[3];

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  swift_unknownObjectRetain(v6);
  v8 = v7(a2, a3);
  v10 = v9;
  swift_unknownObjectRelease(v6, v9);
  *(_QWORD *)&__src[0] = v8;
  *((_QWORD *)&__src[0] + 1) = v10;
  v71 = sub_10001C564();
  v11 = Text.init<A>(_:)(__src, &type metadata for String, v71);
  v13 = v12;
  v15 = v14;
  v17 = v16 & 1;
  v18 = static Font.headline.getter();
  v19 = Text.font(_:)(v18, v11, v13, v17, v15);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  swift_release(v18);
  LOBYTE(v18) = v23 & 1;
  sub_10001ED1C(v11, v13, v17);
  v26 = swift_bridgeObjectRelease(v15);
  v27 = static Color.primary.getter(v26);
  v28 = Text.foregroundColor(_:)(v27, v19, v21, v23 & 1, v25);
  v30 = v29;
  LOBYTE(v13) = v31;
  v33 = v32;
  swift_release(v27);
  sub_10001ED1C(v19, v21, v18);
  swift_bridgeObjectRelease(v25);
  KeyPath = swift_getKeyPath(&unk_100089480);
  v34 = static Color.blue.getter(KeyPath);
  sub_100027914(v34, 0, (uint64_t)__src, 1.0);
  swift_release(v34);
  sub_10001ED1C(v28, v30, v13 & 1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v33);
  v91 = __src[6];
  *(_OWORD *)v92 = __src[7];
  *(_OWORD *)&v92[9] = *(_OWORD *)((char *)&__src[7] + 9);
  v87 = __src[2];
  v88 = __src[3];
  v89 = __src[4];
  v90 = __src[5];
  v85 = __src[0];
  v86 = __src[1];
  v35 = *(_QWORD *)(a1 + 16);
  v36 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  swift_unknownObjectRetain(v35);
  v37 = v36(a2, a3);
  v39 = v38;
  swift_unknownObjectRelease(v35, v38);
  *(_QWORD *)&__src[0] = v37;
  *((_QWORD *)&__src[0] + 1) = v39;
  v40 = Text.init<A>(_:)(__src, &type metadata for String, v71);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  v47 = static Font.headline.getter();
  v48 = Text.font(_:)(v47, v40, v42, v46, v44);
  v50 = v49;
  LOBYTE(v33) = v51;
  v53 = v52;
  swift_release(v47);
  LOBYTE(v47) = v33 & 1;
  sub_10001ED1C(v40, v42, v46);
  v54 = swift_bridgeObjectRelease(v44);
  v55 = static Color.secondary.getter(v54);
  v56 = Text.foregroundColor(_:)(v55, v48, v50, v33 & 1, v53);
  v58 = v57;
  LOBYTE(v46) = v59;
  v61 = v60;
  swift_release(v55);
  sub_10001ED1C(v48, v50, v47);
  swift_bridgeObjectRelease(v53);
  v83 = swift_getKeyPath(&unk_100089480);
  v62 = static Color.blue.getter(v83);
  sub_100027914(v62, 0, (uint64_t)__src, 1.0);
  swift_release(v62);
  sub_10001ED1C(v56, v58, v46 & 1);
  swift_release(v83);
  swift_bridgeObjectRelease(v61);
  v81 = __src[6];
  *(_OWORD *)v82 = __src[7];
  *(_OWORD *)&v82[9] = *(_OWORD *)((char *)&__src[7] + 9);
  v77 = __src[2];
  v78 = __src[3];
  v79 = __src[4];
  v80 = __src[5];
  v75 = __src[0];
  v76 = __src[1];
  v93[6] = v91;
  v94[0] = *(_OWORD *)v92;
  *(_OWORD *)((char *)v94 + 9) = *(_OWORD *)&v92[9];
  v93[2] = v87;
  v93[3] = v88;
  v93[4] = v89;
  v93[5] = v90;
  v93[0] = v85;
  v93[1] = v86;
  v63 = __src[6];
  v95[6] = __src[6];
  v96[0] = *(_OWORD *)v82;
  *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)&__src[7] + 9);
  v64 = __src[2];
  v65 = __src[3];
  v95[2] = __src[2];
  v95[3] = __src[3];
  v67 = __src[4];
  v66 = __src[5];
  v95[4] = __src[4];
  v95[5] = __src[5];
  v69 = __src[0];
  v68 = __src[1];
  v95[0] = __src[0];
  v95[1] = __src[1];
  __src[6] = v91;
  __src[7] = *(_OWORD *)v92;
  *(_OWORD *)((char *)&__src[7] + 9) = *(_OWORD *)&v92[9];
  __src[2] = v87;
  __src[3] = v88;
  __src[4] = v89;
  __src[5] = v90;
  __src[0] = v85;
  __src[1] = v86;
  *(_OWORD *)((char *)&__src[16] + 9) = *(_OWORD *)&v82[9];
  __src[15] = v63;
  __src[16] = *(_OWORD *)v82;
  __src[11] = v64;
  __src[12] = v65;
  __src[13] = v67;
  __src[14] = v66;
  __src[9] = v69;
  __src[10] = v68;
  memcpy(a4, __src, 0x119uLL);
  v98[6] = v81;
  v99[0] = *(_OWORD *)v82;
  *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v82[9];
  v98[2] = v77;
  v98[3] = v78;
  v98[5] = v80;
  v98[4] = v79;
  v98[1] = v76;
  v98[0] = v75;
  sub_100071208((uint64_t)v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000296D4);
  sub_100071208((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000296D4);
  sub_100071208((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100070B7C);
  v100[6] = v91;
  v101[0] = *(_OWORD *)v92;
  *(_OWORD *)((char *)v101 + 9) = *(_OWORD *)&v92[9];
  v100[2] = v87;
  v100[3] = v88;
  v100[4] = v89;
  v100[5] = v90;
  v100[0] = v85;
  v100[1] = v86;
  return sub_100071208((uint64_t)v100, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100070B7C);
}

uint64_t sub_10006EA24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = sub_100004B18(&qword_1000C8070);
  __chkstk_darwin(v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Image.init(systemName:)(0xD000000000000016, 0x8000000100095160);
  v6 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  v7 = static Font.system(size:weight:design:)(0, 1, v4, 30.0);
  sub_100017AB4((uint64_t)v4, &qword_1000C8070);
  result = swift_getKeyPath(&unk_100089450);
  *a1 = v5;
  a1[1] = result;
  a1[2] = v7;
  return result;
}

uint64_t sub_10006EB10@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10006EE08(a1, (uint64_t)&unk_100089368, (uint64_t)&unk_100089390, a2);
}

uint64_t sub_10006EB24(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = type metadata accessor for ActivityDisplayContext(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_100017FC4(a1, (uint64_t)&v14 - v8, type metadata accessor for ActivityDisplayContext);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_100089368);
  v12 = swift_getKeyPath(&unk_100089390);
  sub_100017FC4((uint64_t)v9, (uint64_t)v7, type metadata accessor for ActivityDisplayContext);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_100018008((uint64_t)v9, type metadata accessor for ActivityDisplayContext);
}

uint64_t sub_10006EC1C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100089320);
  v5 = swift_getKeyPath(&unk_100089348);
  static Published.subscript.getter(v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  v7 = v8[1];
  *a2 = v8[0];
  a2[1] = v7;
  return result;
}

uint64_t sub_10006EC98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_100089320);
  v6 = swift_getKeyPath(&unk_100089348);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t sub_10006ED18@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000892D8);
  v5 = swift_getKeyPath(&unk_100089300);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10006ED94(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000892D8);
  v5 = swift_getKeyPath(&unk_100089300);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_10006EE08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(a4, v6, KeyPath, v8);
  swift_release(KeyPath);
  return swift_release(v8);
}

uint64_t sub_10006EE6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_100004B18(&qword_1000CD4F0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v14 - v8;
  sub_100017F28(a1, (uint64_t)&v14 - v8, &qword_1000CD4F0);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_100089290);
  v12 = swift_getKeyPath(&unk_1000892B8);
  sub_100017F28((uint64_t)v9, (uint64_t)v7, &qword_1000CD4F0);
  swift_retain(v10);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_100017AB4((uint64_t)v9, &qword_1000CD4F0);
}

uint64_t sub_10006EF64@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100089248, (uint64_t)&unk_100089270, a2);
}

uint64_t sub_10006EF78(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100089248, (uint64_t)&unk_100089270);
}

uint64_t sub_10006EF8C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100089200, (uint64_t)&unk_100089228, a2);
}

uint64_t sub_10006EFA0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100089200, (uint64_t)&unk_100089228, a2);
}

uint64_t sub_10006EFC4(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100089200, (uint64_t)&unk_100089228);
}

uint64_t sub_10006EFD8(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100089200, (uint64_t)&unk_100089228);
}

uint64_t sub_10006EFFC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10001BD10(a1, (uint64_t)&unk_100089248, (uint64_t)&unk_100089270, a2);
}

uint64_t sub_10006F020(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10001BD88(a1, a2, a3, a4, (uint64_t)&unk_100089248, (uint64_t)&unk_100089270);
}

uint64_t sub_10006F044@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10006EE08(a1, (uint64_t)&unk_100089290, (uint64_t)&unk_1000892B8, a2);
}

uint64_t sub_10006F07C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10006EE08(a1, (uint64_t)&unk_100089368, (uint64_t)&unk_100089390, a2);
}

void sub_10006F0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10006F104(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10006F2E8);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

__CFString *sub_10006F30C(uint64_t a1)
{
  __CFString *v1;
  __CFString *v2;

  switch(a1)
  {
    case 1:
      v1 = CFSTR("miniDark");
      goto LABEL_11;
    case 2:
      v1 = CFSTR("miniLight");
      goto LABEL_11;
    case 3:
      v1 = CFSTR("FPO_B");
      goto LABEL_11;
    case 4:
      v1 = CFSTR("FPO_Y");
      goto LABEL_11;
    case 5:
      v1 = CFSTR("FPO_O");
      goto LABEL_11;
    case 6:
      v1 = CFSTR("b620Dark");
      goto LABEL_11;
    case 7:
      v1 = CFSTR("b620Light");
      goto LABEL_11;
    case 8:
      v1 = CFSTR("miniBasalt");
LABEL_11:
      v2 = v1;
      break;
    default:
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("? (%ld)"), a1));
      break;
  }
  return v1;
}

uint64_t sub_10006F3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AdjustedMovie(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006F420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_10006F0A4((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_10006F4F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10006F0A4(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_10006F5A8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10006F5F4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10006F628 + *((int *)qword_10006F800 + (v0 >> 62))))();
}

uint64_t sub_10006F638@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t *sub_10006F820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t KeyPath;
  uint64_t v73;
  id v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD v114[2];
  _QWORD v115[2];

  v4 = v3;
  v96 = a3;
  v95 = a2;
  v113 = a1;
  v94 = *v3;
  v5 = sub_100004B18(&qword_1000CD750);
  v6 = *(_QWORD *)(v5 - 8);
  v108 = v5;
  v109 = v6;
  __chkstk_darwin(v5);
  v106 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000CD758);
  v9 = *(_QWORD *)(v8 - 8);
  v110 = v8;
  v111 = v9;
  __chkstk_darwin(v8);
  v107 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000CD760);
  v12 = *(_QWORD *)(v11 - 8);
  v100 = v11;
  v101 = v12;
  __chkstk_darwin(v11);
  v112 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100004B18(&qword_1000CD768);
  v15 = *(_QWORD *)(v14 - 8);
  v102 = v14;
  v103 = v15;
  __chkstk_darwin(v14);
  v98 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004B18(&qword_1000CD770);
  v18 = *(_QWORD *)(v17 - 8);
  v104 = v17;
  v105 = v18;
  __chkstk_darwin(v17);
  v99 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for ActivityDisplayContext(0);
  v20 = __chkstk_darwin(v93);
  v92 = (uint64_t)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v91 = (uint64_t)&v86 - v22;
  v90 = sub_100004B18(&qword_1000C7500);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100004B18(&qword_1000CD748);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100004B18(&qword_1000CD738);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v29 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100004B18(&qword_1000CD4F0);
  v31 = __chkstk_darwin(v30);
  v33 = (char *)&v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  v35 = (char *)&v86 - v34;
  v36 = (char *)v3 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__movie;
  v37 = type metadata accessor for AdjustedMovie(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v35, 1, 1, v37);
  sub_100017F28((uint64_t)v35, (uint64_t)v33, &qword_1000CD4F0);
  Published.init(initialValue:)(v33, v30);
  sub_100017AB4((uint64_t)v35, &qword_1000CD4F0);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v36, v29, v26);
  v38 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler);
  *v38 = 0;
  v38[1] = 0;
  v39 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityImage;
  v115[0] = 0;
  v97 = sub_100004B18((uint64_t *)&unk_1000CD508);
  v40 = v86;
  Published.init(initialValue:)(v115, v97);
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v39, v40, v88);
  v41 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__canShowActivityIcon;
  LOBYTE(v115[0]) = 0;
  Published.init(initialValue:)(v115, &type metadata for Bool);
  v42 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
  v43 = v90;
  v42(v41, v24, v90);
  v44 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__isOptimisticStateActive;
  LOBYTE(v115[0]) = 0;
  Published.init(initialValue:)(v115, &type metadata for Bool);
  v42(v44, v24, v43);
  v45 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_tasks;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_tasks) = (uint64_t)&_swiftEmptySetSingleton;
  sub_10003DC3C(1953066569, (void *)0xE400000000000000, 0, v94, (uint64_t)&off_1000B8E78);
  v46 = v91;
  sub_100017FC4(v113, v91, type metadata accessor for ActivityDisplayContext);
  v47 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityDisplayContext;
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityDisplayContext, v115, 33, 0);
  v48 = v92;
  sub_100017FC4(v46, v92, type metadata accessor for ActivityDisplayContext);
  Published.init(initialValue:)(v48, v93);
  sub_100018008(v46, type metadata accessor for ActivityDisplayContext);
  swift_endAccess(v115);
  v49 = *v38;
  v50 = v38[1];
  v51 = v95;
  v52 = v96;
  *v38 = v95;
  v38[1] = v52;
  sub_100007A80(v51, v52);
  sub_100007A90(v49, v50);
  sub_1000598D8();
  v54 = v53;
  v56 = v55;
  swift_beginAccess((char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__subtitle, v115, 33, 0);
  v114[0] = v54;
  v114[1] = v56;
  Published.init(initialValue:)(v114, &type metadata for String);
  swift_endAccess(v115);
  swift_beginAccess(v47, v115, 33, 0);
  v96 = sub_100004B18(&qword_1000CD730);
  v57 = v112;
  ((void (*)(void))Published.projectedValue.getter)();
  swift_endAccess(v115);
  v58 = sub_100004B18(&qword_1000CD778);
  v59 = sub_10000AAFC(&qword_1000CD780, &qword_1000CD760, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v60 = v98;
  v61 = v100;
  Publisher.map<A>(_:)(sub_10006B934, 0, v100, v58, v59);
  v62 = *(void (**)(char *, uint64_t))(v101 + 8);
  v62(v57, v61);
  v63 = sub_10000AAFC(&qword_1000CD788, &qword_1000CD768, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v64 = sub_10000AAFC(&qword_1000CD790, &qword_1000CD778, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v65 = v99;
  v66 = v102;
  Publisher<>.switchToLatest()(v102, v63, v64);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v66);
  v67 = swift_allocObject(&unk_1000B8EB8, 24, 7);
  swift_weakInit(v67 + 16, v4);
  v68 = sub_10000AAFC(&qword_1000CD798, &qword_1000CD770, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v69 = v104;
  v70 = Publisher<>.sink(receiveValue:)(sub_100070204, v67, v104, v68);
  swift_release(v67);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v65, v69);
  swift_beginAccess(v45, v115, 33, 0);
  AnyCancellable.store(in:)(v45);
  swift_endAccess(v115);
  swift_release(v70);
  v71 = *(void **)(v113 + 40);
  KeyPath = swift_getKeyPath(&unk_1000892D8);
  v73 = swift_getKeyPath(&unk_100089300);
  v115[0] = v71;
  v74 = v71;
  swift_retain(v4);
  static Published.subscript.setter(v115, v4, KeyPath, v73);
  swift_beginAccess(v47, v115, 33, 0);
  v75 = v112;
  Published.projectedValue.getter(v96);
  swift_endAccess(v115);
  v76 = v106;
  Publisher.map<A>(_:)(sub_10006BB08, 0, v61, v97, v59);
  v62(v75, v61);
  v77 = sub_10000AAFC(&qword_1000CD7A0, &qword_1000CD750, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v79 = v107;
  v78 = v108;
  Publisher.removeDuplicates(by:)(sub_10006BB14, 0, v108, v77);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v76, v78);
  v80 = swift_allocObject(&unk_1000B8EB8, 24, 7);
  swift_weakInit(v80 + 16, v4);
  v81 = sub_10000AAFC(&qword_1000CD7A8, &qword_1000CD758, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v82 = v110;
  v83 = Publisher<>.sink(receiveValue:)(sub_10007020C, v80, v110, v81);
  swift_release(v80);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v79, v82);
  swift_beginAccess(v45, v115, 33, 0);
  AnyCancellable.store(in:)(v45);
  swift_endAccess(v115);
  swift_release(v83);
  sub_10006BEF8();
  v84 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v84, "addObserver:selector:name:object:", v4, "createMovieIfNeeded", kPCAssetManagerNotificationNameQueryDidComplete, 0);

  sub_100018008(v113, type metadata accessor for ActivityDisplayContext);
  return v4;
}

uint64_t sub_1000701E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100070204(uint64_t *a1)
{
  uint64_t v1;

  return sub_10006BA6C(a1, v1);
}

uint64_t sub_10007020C(void **a1)
{
  uint64_t v1;

  return sub_10006BC4C(a1, v1);
}

uint64_t sub_100070214(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000B554(result, a2);
  return result;
}

void sub_100070228(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_1000893C8;
  sub_1000708E4(319, &qword_1000CD858, type metadata accessor for ActivityIcon, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000890C0;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
  }
}

uint64_t *sub_1000702C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a2[2];
    a1[2] = v7;
    v8 = *(int *)(a3 + 40);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_unknownObjectRetain(v7);
    v12(v9, v10, v11);
    v13 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
    v14 = *(_QWORD *)&v10[v13];
    *(_QWORD *)&v9[v13] = v14;
    swift_retain(v14);
    v15 = *(int *)(sub_100004B18(qword_1000CD7D0) + 28);
    v16 = *(_QWORD *)&v10[v15];
    *(_QWORD *)&v9[v15] = v16;
    v17 = *(int *)(a3 + 44);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    *v18 = *v19;
    v20 = *((_QWORD *)v19 + 1);
    *((_QWORD *)v18 + 1) = v20;
    swift_retain(v16);
  }
  swift_retain(v20);
  return v4;
}

double sub_1000703D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  swift_unknownObjectRelease(*(_QWORD *)(a1 + 16), a2);
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = type metadata accessor for ActivityIcon(0);
  swift_release(*(_QWORD *)(v4 + *(int *)(v6 + 20)));
  v7 = sub_100004B18(qword_1000CD7D0);
  swift_release(*(_QWORD *)(v4 + *(int *)(v7 + 28)));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_10007045C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_unknownObjectRetain(v6);
  v11(v8, v9, v10);
  v12 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  v13 = *(_QWORD *)(v9 + v12);
  *(_QWORD *)(v8 + v12) = v13;
  swift_retain(v13);
  v14 = *(int *)(sub_100004B18(qword_1000CD7D0) + 28);
  v15 = *(_QWORD *)(v9 + v14);
  *(_QWORD *)(v8 + v14) = v15;
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)v17 = *(_BYTE *)v18;
  v19 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v17 + 8) = v19;
  swift_retain(v15);
  swift_retain(v19);
  return a1;
}

_QWORD *sub_10007053C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7, v8);
  v9 = *(int *)(a3 + 40);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  v14 = *(_QWORD *)&v10[v13];
  v15 = *(_QWORD *)&v11[v13];
  *(_QWORD *)&v10[v13] = v15;
  swift_retain(v15);
  swift_release(v14);
  v16 = *(int *)(sub_100004B18(qword_1000CD7D0) + 28);
  v17 = *(_QWORD *)&v10[v16];
  v18 = *(_QWORD *)&v11[v16];
  *(_QWORD *)&v10[v16] = v18;
  swift_retain(v18);
  swift_release(v17);
  v19 = *(int *)(a3 + 44);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *v20 = *v21;
  v22 = *((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v21 + 1);
  *((_QWORD *)v20 + 1) = v23;
  swift_retain(v23);
  swift_release(v22);
  return a1;
}

uint64_t sub_100070640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for ActivityIcon(0);
  *(_QWORD *)(v7 + *(int *)(v10 + 20)) = *(_QWORD *)(v8 + *(int *)(v10 + 20));
  v11 = sub_100004B18(qword_1000CD7D0);
  *(_QWORD *)(v7 + *(int *)(v11 + 28)) = *(_QWORD *)(v8 + *(int *)(v11 + 28));
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

_QWORD *sub_1000706EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a2[2];
  v7 = a1[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_unknownObjectRelease(v7, a2);
  v8 = *(int *)(a3 + 40);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  v13 = *(_QWORD *)&v9[v12];
  *(_QWORD *)&v9[v12] = *(_QWORD *)&v10[v12];
  swift_release(v13);
  v14 = *(int *)(sub_100004B18(qword_1000CD7D0) + 28);
  v15 = *(_QWORD *)&v9[v14];
  *(_QWORD *)&v9[v14] = *(_QWORD *)&v10[v14];
  swift_release(v15);
  v16 = *(int *)(a3 + 44);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *v17 = *v18;
  v19 = *((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_release(v19);
  return a1;
}

uint64_t sub_1000707C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000707D4);
}

uint64_t sub_1000707D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100004B18(qword_1000CD7D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_100070854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070860);
}

uint64_t sub_100070860(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100004B18(qword_1000CD7D0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ProximityCardHeaderView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ProximityCardHeaderView);
}

void sub_1000708E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_10007093C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10009AE40, 1);
}

uint64_t sub_100070974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = type metadata accessor for ProximityCardHeaderView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_10006DD7C(v5);
}

uint64_t sub_1000709B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProximityCardHeaderView(0, v5, v6, a4) - 8) + 80);
  return sub_10006DE64(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

unint64_t sub_100070A04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD888;
  if (!qword_1000CD888)
  {
    v1 = sub_100005F48(&qword_1000CD880);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD888);
  }
  return result;
}

uint64_t sub_100070A68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *(_QWORD *)(a1 + 168);
  v2 = *(_QWORD *)(a1 + 176);
  v3 = *(_QWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 200);
  v6 = *(_QWORD *)(a1 + 208);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(_QWORD *)(a1 + 224);
  v15 = *(_OWORD *)(a1 + 232);
  v13 = *(_OWORD *)(a1 + 264);
  v14 = *(_OWORD *)(a1 + 248);
  v12 = *(_OWORD *)(a1 + 280);
  v9 = *(_QWORD *)(a1 + 296);
  v10 = *(_BYTE *)(a1 + 304);
  sub_100070B7C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 160));
  sub_100070B7C(v16, v2, v3, v4, v5, v6, v7, v8, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_100070B7C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_10001ED1C(a1, a2, a3 & 1);
  if ((a18 & 1) == 0)
  {
    swift_release(a14);
    swift_bridgeObjectRelease(a12);
  }
  swift_release(a5);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100070BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  sub_1000296D4(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21 & 1);
  if ((a56 & 1) != 0)
    return sub_1000296D4(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
  sub_1000296D4(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
  swift_bridgeObjectRetain(a50);
  return swift_retain(a52);
}

uint64_t sub_100070DB4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;

  v16 = *(_BYTE *)(a1 + 440);
  v14 = *(_OWORD *)(a1 + 400);
  v15 = *(_OWORD *)(a1 + 416);
  v12 = *(_OWORD *)(a1 + 368);
  v13 = *(_OWORD *)(a1 + 384);
  v10 = *(_OWORD *)(a1 + 336);
  v11 = *(_OWORD *)(a1 + 352);
  v8 = *(_OWORD *)(a1 + 304);
  v9 = *(_OWORD *)(a1 + 320);
  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    v10,
    *((_QWORD *)&v10 + 1),
    v11,
    *((_QWORD *)&v11 + 1),
    v12,
    *((_QWORD *)&v12 + 1),
    v13,
    *((_QWORD *)&v13 + 1),
    v14,
    *((_QWORD *)&v14 + 1),
    v15,
    *((_QWORD *)&v15 + 1),
    *(_QWORD *)(a1 + 432),
    v16);
  return a1;
}

uint64_t sub_100070E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  sub_100070B7C(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21 & 1);
  if ((a56 & 1) != 0)
    return sub_100070B7C(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
  sub_100070B7C(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
  swift_release(a52);
  return swift_bridgeObjectRelease(a50);
}

uint64_t sub_10007103C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = type metadata accessor for ProximityCardHeaderView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  v11 = v4 + v8;
  swift_unknownObjectRelease(*(_QWORD *)(v4 + v8 + 16), v12);
  v13 = v11 + *(int *)(v5 + 40);
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = type metadata accessor for ActivityIcon(0);
  swift_release(*(_QWORD *)(v13 + *(int *)(v15 + 20)));
  v16 = sub_100004B18(qword_1000CD7D0);
  swift_release(*(_QWORD *)(v13 + *(int *)(v16 + 28)));
  swift_release(*(_QWORD *)(v11 + *(int *)(v5 + 44) + 8));
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_100071108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ProximityCardHeaderView(0, v5, v6, a4) - 8) + 80);
  v8 = *(_QWORD *)(v4 + ((v7 + 32) & ~v7) + 16);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 64);
  swift_unknownObjectRetain(v8);
  v9(1, v5, v6);
  return swift_unknownObjectRelease(v8, v10);
}

unint64_t sub_100071174()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD8C0;
  if (!qword_1000CD8C0)
  {
    v1 = sub_100005F48(&qword_1000CD8B8);
    sub_10000AAFC(&qword_1000C8578, &qword_1000C8580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD8C0);
  }
  return result;
}

uint64_t sub_100071208(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 136);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), v4);
  return a1;
}

unint64_t sub_10007126C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD900;
  if (!qword_1000CD900)
  {
    v1 = sub_100005F48(&qword_1000CD8F8);
    sub_1000712D8();
    sub_100029C78();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD900);
  }
  return result;
}

unint64_t sub_1000712D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000C7E40;
  if (!qword_1000C7E40)
  {
    v1 = sub_100005F48(&qword_1000C7E38);
    sub_100029C78();
    sub_10000AAFC(&qword_1000C7B08, &qword_1000C7B10, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000C7E40);
  }
  return result;
}

unint64_t sub_100071360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD908;
  if (!qword_1000CD908)
  {
    v1 = sub_100005F48(&qword_1000CD878);
    sub_1000713CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD908);
  }
  return result;
}

unint64_t sub_1000713CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CD910;
  if (!qword_1000CD910)
  {
    v1 = sub_100005F48(&qword_1000CD868);
    sub_10000AAFC(&qword_1000CD918, &qword_1000CD860, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_10000AAFC(&qword_1000CD920, &qword_1000CD928, (uint64_t)&protocol conformance descriptor for _ValueActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CD910);
  }
  return result;
}

uint64_t destroy for CardEvent(uint64_t a1)
{
  return sub_1000173AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for CardEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_100036CD8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for CardEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_100036CD8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  sub_1000173AC(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for CardEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int8 v13;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v4;
  sub_1000173AC(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3C && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 60);
  v3 = ((*(unsigned __int8 *)(a1 + 56) >> 5) & 0xFFFFFFC7 | (8 * ((*(unsigned __int8 *)(a1 + 56) >> 2) & 7))) ^ 0x3F;
  if (v3 >= 0x3B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CardEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3B)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 60;
    if (a3 >= 0x3C)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0x3C)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 48) = 0;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)result = 0u;
      *(_BYTE *)(result + 56) = 4 * (((-a2 >> 3) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1000716D4(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 56);
  v2 = (char)v1;
  v3 = v1 >> 5;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1000716F4(uint64_t result)
{
  *(_BYTE *)(result + 56) &= 0x1Fu;
  return result;
}

uint64_t sub_100071704(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(_BYTE *)(result + 56) = *(_BYTE *)(result + 56) & 3 | (32 * a2);
  }
  else
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_BYTE *)(result + 56) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardEvent()
{
  return &type metadata for CardEvent;
}

void sub_100071750()
{
  uint64_t v0;
  _QWORD v1[7];

  sub_10004CEB8(v0, (uint64_t)v1);
  __asm { BR              X11 }
}

uint64_t sub_100071794()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void *v5;

  *(_QWORD *)(v1 - 96) = 0;
  *(_QWORD *)(v1 - 88) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 - 88));
  *(_QWORD *)(v1 - 96) = 0xD000000000000012;
  *(_QWORD *)(v1 - 88) = 0x8000000100094F50;
  v2._countAndFlagsBits = v0;
  v2._object = v5;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 10528;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  return *(_QWORD *)(v1 - 96);
}

void sub_100071A84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[11];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE v23[192];
  uint64_t v24;

  v2 = sub_100004B18(&qword_1000CD9B0);
  v18 = *(_QWORD *)(v2 - 8);
  v19 = v2;
  __chkstk_darwin(v2);
  v16[10] = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100004B18(&qword_1000CD9B8);
  v16[9] = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v16[8] = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000CD9C0);
  v16[6] = *(_QWORD *)(v5 - 8);
  v16[7] = v5;
  __chkstk_darwin(v5);
  v16[5] = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100004B18(&qword_1000CD9C8);
  v16[3] = *(_QWORD *)(v7 - 8);
  v16[4] = v7;
  __chkstk_darwin(v7);
  v8 = sub_100004B18(&qword_1000CD9D0);
  v16[1] = *(_QWORD *)(v8 - 8);
  v16[2] = v8;
  __chkstk_darwin(v8);
  v16[0] = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100004B18(&qword_1000CD9D8);
  __chkstk_darwin(v10);
  v22 = sub_100004B18(&qword_1000CD9E0);
  v20 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_100006914(a1, v13);
  v15 = sub_100073450();
  v21 = v12;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CardEvent.CodingKeys, &type metadata for CardEvent.CodingKeys, v15, v13, v14);
  sub_10004CEB8(v24, (uint64_t)v23);
  __asm { BR              X11 }
}

uint64_t sub_100071CDC@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v1 + 264) = a1 & 0x1F;
  v4 = *(_QWORD *)(v1 + 216);
  *(_BYTE *)(v1 + 144) = 2;
  v5 = sub_1000735E8();
  v7 = *(_QWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CardEvent.DismissedCodingKeys, v1 + 144, v6, &type metadata for CardEvent.DismissedCodingKeys, v5);
  v8 = v2;
  v9 = *(_QWORD *)(v1 + 32);
  KeyedEncodingContainer.encode(_:forKey:)(v8, v4, v10, v9);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 24) + 8))(v3, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 112) + 8))(v7, v6);
}

uint64_t sub_100072048(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007351C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072070(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007351C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072098()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000720CC + 4 * byte_1000894BA[*v0]))(0x69746E6573657270, 0xEA0000000000676ELL);
}

uint64_t sub_1000720CC()
{
  return 0x65746E6573657270;
}

uint64_t sub_1000720FC()
{
  return 0x64656C696166;
}

uint64_t sub_100072110()
{
  return 0x726F737365636361;
}

uint64_t sub_100072138()
{
  return 0x6F69746163756465;
}

uint64_t sub_10007215C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100072828(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100072180(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073450();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000721A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073450();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000721D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000735E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000721F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000735E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072220(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073494();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072248(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073494();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072270(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000735A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072298(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000735A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000722C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007362C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000722E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007362C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072310(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073670();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072338(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100073670();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072360@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[64];

  result = sub_100072AE4(a1, (uint64_t)v5);
  if (!v2)
    return sub_10004CEB8((uint64_t)v5, a2);
  return result;
}

void sub_1000723A4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_10004CEB8(v1, (uint64_t)&v3);
  sub_100071A84(a1);
}

void sub_1000723F0()
{
  uint64_t v0;
  uint64_t v1;

  sub_10004CEB8(v0, (uint64_t)&v1);
  sub_100071750();
}

uint64_t sub_100072424(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE v5[64];
  _BYTE v6[64];

  sub_10004CEB8(a1, (uint64_t)v5);
  sub_10004CEB8(a2, (uint64_t)v6);
  sub_10007246C((uint64_t)v5);
  return v3 & 1;
}

void sub_10007246C(uint64_t a1)
{
  _QWORD v1[7];

  sub_10004CEB8(a1, (uint64_t)v1);
  __asm { BR              X11 }
}

BOOL sub_1000724B4()
{
  uint64_t v0;
  uint64_t v1;

  sub_10004CEB8(v0, v1 - 96);
  return *(unsigned __int8 *)(v1 - 40) < 0x20u;
}

uint64_t sub_100072828(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL)
  {
    v5 = 0xEA0000000000676ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746E6573657270, 0xEA0000000000676ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064)
  {
    v7 = 0xE900000000000064;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6573657270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064)
  {
    v8 = 0xE900000000000064;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657373696D736964, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x64656C696166 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C696166, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00007765695679)
  {
    v10 = 0xED00007765695679;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00007765695679, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6F69746163756465 && a2 == 0xED0000776569566ELL)
  {
    swift_bridgeObjectRelease(0xED0000776569566ELL);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746163756465, 0xED0000776569566ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100072AE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  _QWORD *v44;

  v38 = a2;
  v32 = sub_100004B18(&qword_1000CD930);
  v42 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v41 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100004B18(&qword_1000CD938);
  v35 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v40 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000CD940);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  __chkstk_darwin(v5);
  v36 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100004B18(&qword_1000CD948);
  v30 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v39 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100004B18(&qword_1000CD950);
  v27[4] = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v37 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100004B18(&qword_1000CD958);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = sub_100004B18(&qword_1000CD960);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  v44 = a1;
  sub_100006914(a1, v15);
  v17 = sub_100073450();
  v18 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CardEvent.CodingKeys, &type metadata for CardEvent.CodingKeys, v17, v15, v16);
  if (!v18)
  {
    v27[1] = v10;
    v27[2] = v9;
    *(_QWORD *)&v43 = v12;
    v27[3] = 0;
    v19 = KeyedDecodingContainer.allKeys.getter(v11);
    v20 = v19;
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X10 }
    v21 = type metadata accessor for DecodingError(0);
    swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v23 = v22;
    sub_100004B18(&qword_1000C7E90);
    *v23 = &type metadata for CardEvent;
    v24 = KeyedDecodingContainer.codingPath.getter(v11);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v24, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v25 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow(v25);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v11);
  }
  return sub_10000697C(v44);
}

unint64_t sub_100073450()
{
  unint64_t result;

  result = qword_1000CD968;
  if (!qword_1000CD968)
  {
    result = swift_getWitnessTable(&unk_100089C80, &type metadata for CardEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD968);
  }
  return result;
}

unint64_t sub_100073494()
{
  unint64_t result;

  result = qword_1000CD970;
  if (!qword_1000CD970)
  {
    result = swift_getWitnessTable(&unk_100089C30, &type metadata for CardEvent.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD970);
  }
  return result;
}

unint64_t sub_1000734D8()
{
  unint64_t result;

  result = qword_1000CD978;
  if (!qword_1000CD978)
  {
    result = swift_getWitnessTable(&unk_1000874EC, &type metadata for EducationViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000CD978);
  }
  return result;
}

unint64_t sub_10007351C()
{
  unint64_t result;

  result = qword_1000CD980;
  if (!qword_1000CD980)
  {
    result = swift_getWitnessTable(&unk_100089BE0, &type metadata for CardEvent.AccessoryViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD980);
  }
  return result;
}

unint64_t sub_100073560()
{
  unint64_t result;

  result = qword_1000CD988;
  if (!qword_1000CD988)
  {
    result = swift_getWitnessTable(&unk_1000887D0, &type metadata for HomeAccessoryViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000CD988);
  }
  return result;
}

unint64_t sub_1000735A4()
{
  unint64_t result;

  result = qword_1000CD990;
  if (!qword_1000CD990)
  {
    result = swift_getWitnessTable(&unk_100089B90, &type metadata for CardEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD990);
  }
  return result;
}

unint64_t sub_1000735E8()
{
  unint64_t result;

  result = qword_1000CD998;
  if (!qword_1000CD998)
  {
    result = swift_getWitnessTable(&unk_100089B40, &type metadata for CardEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD998);
  }
  return result;
}

unint64_t sub_10007362C()
{
  unint64_t result;

  result = qword_1000CD9A0;
  if (!qword_1000CD9A0)
  {
    result = swift_getWitnessTable(&unk_100089AF0, &type metadata for CardEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD9A0);
  }
  return result;
}

unint64_t sub_100073670()
{
  unint64_t result;

  result = qword_1000CD9A8;
  if (!qword_1000CD9A8)
  {
    result = swift_getWitnessTable(&unk_100089AA0, &type metadata for CardEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD9A8);
  }
  return result;
}

unint64_t sub_1000736B4()
{
  unint64_t result;

  result = qword_1000CD9E8;
  if (!qword_1000CD9E8)
  {
    result = swift_getWitnessTable(&unk_1000874C4, &type metadata for EducationViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000CD9E8);
  }
  return result;
}

unint64_t sub_1000736F8()
{
  unint64_t result;

  result = qword_1000CD9F0;
  if (!qword_1000CD9F0)
  {
    result = swift_getWitnessTable(&unk_1000887A8, &type metadata for HomeAccessoryViewEvent);
    atomic_store(result, (unint64_t *)&qword_1000CD9F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CardEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100073788 + 4 * byte_1000894D0[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000737BC + 4 * byte_1000894CB[v4]))();
}

uint64_t sub_1000737BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000737C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000737CCLL);
  return result;
}

uint64_t sub_1000737D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000737E0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000737E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000737EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CardEvent.CodingKeys()
{
  return &type metadata for CardEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.PresentingCodingKeys()
{
  return &type metadata for CardEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.PresentedCodingKeys()
{
  return &type metadata for CardEvent.PresentedCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.DismissedCodingKeys()
{
  return &type metadata for CardEvent.DismissedCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.FailedCodingKeys()
{
  return &type metadata for CardEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.AccessoryViewCodingKeys()
{
  return &type metadata for CardEvent.AccessoryViewCodingKeys;
}

uint64_t _s13PCViewService9CardEventO19DismissedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10007389C + 4 * byte_1000894D5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000738BC + 4 * byte_1000894DA[v4]))();
}

_BYTE *sub_10007389C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000738BC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000738C4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000738CC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000738D4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000738DC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CardEvent.EducationViewCodingKeys()
{
  return &type metadata for CardEvent.EducationViewCodingKeys;
}

unint64_t sub_1000738FC()
{
  unint64_t result;

  result = qword_1000CD9F8;
  if (!qword_1000CD9F8)
  {
    result = swift_getWitnessTable(&unk_1000896F8, &type metadata for CardEvent.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CD9F8);
  }
  return result;
}

unint64_t sub_100073944()
{
  unint64_t result;

  result = qword_1000CDA00;
  if (!qword_1000CDA00)
  {
    result = swift_getWitnessTable(&unk_1000897B0, &type metadata for CardEvent.AccessoryViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA00);
  }
  return result;
}

unint64_t sub_10007398C()
{
  unint64_t result;

  result = qword_1000CDA08;
  if (!qword_1000CDA08)
  {
    result = swift_getWitnessTable(&unk_100089868, &type metadata for CardEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA08);
  }
  return result;
}

unint64_t sub_1000739D4()
{
  unint64_t result;

  result = qword_1000CDA10;
  if (!qword_1000CDA10)
  {
    result = swift_getWitnessTable(&unk_100089920, &type metadata for CardEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA10);
  }
  return result;
}

unint64_t sub_100073A1C()
{
  unint64_t result;

  result = qword_1000CDA18;
  if (!qword_1000CDA18)
  {
    result = swift_getWitnessTable(&unk_100089A78, &type metadata for CardEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA18);
  }
  return result;
}

unint64_t sub_100073A64()
{
  unint64_t result;

  result = qword_1000CDA20;
  if (!qword_1000CDA20)
  {
    result = swift_getWitnessTable(&unk_100089998, &type metadata for CardEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA20);
  }
  return result;
}

unint64_t sub_100073AAC()
{
  unint64_t result;

  result = qword_1000CDA28;
  if (!qword_1000CDA28)
  {
    result = swift_getWitnessTable(&unk_1000899C0, &type metadata for CardEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA28);
  }
  return result;
}

unint64_t sub_100073AF4()
{
  unint64_t result;

  result = qword_1000CDA30;
  if (!qword_1000CDA30)
  {
    result = swift_getWitnessTable(&unk_100089948, &type metadata for CardEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA30);
  }
  return result;
}

unint64_t sub_100073B3C()
{
  unint64_t result;

  result = qword_1000CDA38;
  if (!qword_1000CDA38)
  {
    result = swift_getWitnessTable(&unk_100089970, &type metadata for CardEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA38);
  }
  return result;
}

unint64_t sub_100073B84()
{
  unint64_t result;

  result = qword_1000CDA40;
  if (!qword_1000CDA40)
  {
    result = swift_getWitnessTable(&unk_100089890, &type metadata for CardEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA40);
  }
  return result;
}

unint64_t sub_100073BCC()
{
  unint64_t result;

  result = qword_1000CDA48;
  if (!qword_1000CDA48)
  {
    result = swift_getWitnessTable(&unk_1000898B8, &type metadata for CardEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA48);
  }
  return result;
}

unint64_t sub_100073C14()
{
  unint64_t result;

  result = qword_1000CDA50;
  if (!qword_1000CDA50)
  {
    result = swift_getWitnessTable(&unk_1000897D8, &type metadata for CardEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA50);
  }
  return result;
}

unint64_t sub_100073C5C()
{
  unint64_t result;

  result = qword_1000CDA58;
  if (!qword_1000CDA58)
  {
    result = swift_getWitnessTable(&unk_100089800, &type metadata for CardEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA58);
  }
  return result;
}

unint64_t sub_100073CA4()
{
  unint64_t result;

  result = qword_1000CDA60;
  if (!qword_1000CDA60)
  {
    result = swift_getWitnessTable(&unk_100089720, &type metadata for CardEvent.AccessoryViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA60);
  }
  return result;
}

unint64_t sub_100073CEC()
{
  unint64_t result;

  result = qword_1000CDA68;
  if (!qword_1000CDA68)
  {
    result = swift_getWitnessTable(&unk_100089748, &type metadata for CardEvent.AccessoryViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA68);
  }
  return result;
}

unint64_t sub_100073D34()
{
  unint64_t result;

  result = qword_1000CDA70;
  if (!qword_1000CDA70)
  {
    result = swift_getWitnessTable(&unk_100089668, &type metadata for CardEvent.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA70);
  }
  return result;
}

unint64_t sub_100073D7C()
{
  unint64_t result;

  result = qword_1000CDA78;
  if (!qword_1000CDA78)
  {
    result = swift_getWitnessTable(&unk_100089690, &type metadata for CardEvent.EducationViewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA78);
  }
  return result;
}

unint64_t sub_100073DC4()
{
  unint64_t result;

  result = qword_1000CDA80;
  if (!qword_1000CDA80)
  {
    result = swift_getWitnessTable(&unk_1000899E8, &type metadata for CardEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA80);
  }
  return result;
}

unint64_t sub_100073E0C()
{
  unint64_t result;

  result = qword_1000CDA88;
  if (!qword_1000CDA88)
  {
    result = swift_getWitnessTable(&unk_100089A10, &type metadata for CardEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDA88);
  }
  return result;
}

BOOL sub_100073E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = enum case for DispatchTimeInterval.never(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchTimeInterval.never(_:), v4);
  v10 = static DispatchTimeInterval.== infix(_:_:)(a2, v7);
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) != 0)
    return 1;
  v9(v7, v8, v4);
  v13 = static DispatchTimeInterval.== infix(_:_:)(a1, v7);
  v11(v7, v4);
  if ((v13 & 1) != 0)
    return 0;
  v14 = sub_10007421C();
  return v14 >= sub_10007421C();
}

BOOL sub_100073F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = enum case for DispatchTimeInterval.never(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchTimeInterval.never(_:), v4);
  v10 = static DispatchTimeInterval.== infix(_:_:)(a1, v7);
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) != 0)
    return 1;
  v9(v7, v8, v4);
  v13 = static DispatchTimeInterval.== infix(_:_:)(a2, v7);
  v11(v7, v4);
  if ((v13 & 1) != 0)
    return 0;
  v14 = sub_10007421C();
  return v14 >= sub_10007421C();
}

uint64_t sub_100074070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A940();
  static DispatchQoS.default.getter();
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_100003E48(&qword_1000CDA98, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_100004B18(&qword_1000CDAA0);
  v12 = sub_10007474C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x756575516B726F77, 0xE900000000000065, v9, v6, v3, 0);
  qword_1000DF618 = result;
  return result;
}

uint64_t sub_10007421C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  LODWORD(result) = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if ((_DWORD)result == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    result = 1000000000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000000000) >> 64 == result >> 63)
      return result;
    __break(1u);
  }
  if ((_DWORD)result == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    result = 1000000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000000) >> 64 == result >> 63)
      return result;
    __break(1u);
  }
  if ((_DWORD)result == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    result = 1000 * *v5;
    if ((unsigned __int128)(*v5 * (__int128)1000) >> 64 == result >> 63)
      return result;
    __break(1u);
  }
  if ((_DWORD)result == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    return *v5;
  }
  else if ((_DWORD)result == enum case for DispatchTimeInterval.never(_:))
  {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100095200, "PCViewService/Dispatch+ProximityControl.swift", 45, 2, 55, 0);
    __break(1u);
  }
  return result;
}

BOOL static DispatchTimeInterval.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  char v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = enum case for DispatchTimeInterval.never(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for DispatchTimeInterval.never(_:), v4);
  v10 = static DispatchTimeInterval.== infix(_:_:)(a1, v7);
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if ((v10 & 1) != 0)
    return 0;
  v9(v7, v8, v4);
  v13 = static DispatchTimeInterval.== infix(_:_:)(a2, v7);
  v11(v7, v4);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_10007421C();
  return v14 < sub_10007421C();
}

uint64_t sub_100074510()
{
  return sub_100003E48(&qword_1000CDA90, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTimeInterval, (uint64_t)&protocol conformance descriptor for DispatchTimeInterval);
}

BOOL sub_10007453C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char v11;
  void (*v12)(char *, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = enum case for DispatchTimeInterval.never(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(char *, _QWORD))v10)(v8, enum case for DispatchTimeInterval.never(_:));
  v11 = static DispatchTimeInterval.== infix(_:_:)(a1, v8);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, a3);
  if ((v11 & 1) != 0)
    return 0;
  v10(v8, v9, a3);
  v14 = static DispatchTimeInterval.== infix(_:_:)(a2, v8);
  v12(v8, a3);
  if ((v14 & 1) != 0)
    return 1;
  v15 = sub_10007421C();
  return v15 < sub_10007421C();
}

BOOL sub_100074648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t);
  char v11;
  void (*v12)(char *, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = enum case for DispatchTimeInterval.never(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  ((void (*)(char *, _QWORD))v10)(v8, enum case for DispatchTimeInterval.never(_:));
  v11 = static DispatchTimeInterval.== infix(_:_:)(a2, v8);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, a3);
  if ((v11 & 1) != 0)
    return 0;
  v10(v8, v9, a3);
  v14 = static DispatchTimeInterval.== infix(_:_:)(a1, v8);
  v12(v8, a3);
  if ((v14 & 1) != 0)
    return 1;
  v15 = sub_10007421C();
  return v15 < sub_10007421C();
}

unint64_t sub_10007474C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CDAA8[0];
  if (!qword_1000CDAA8[0])
  {
    v1 = sub_100005F48(&qword_1000CDAA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, qword_1000CDAA8);
  }
  return result;
}

uint64_t sub_100074798(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100089D70, a1);
}

BOOL sub_1000747A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  Swift::Int v5;

  v4 = type metadata accessor for Weak(0, a3, a4, a4);
  v5 = sub_100074800(v4);
  return v5 == sub_100074800(v4);
}

Swift::Int sub_100074800(uint64_t a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  sub_100074850((uint64_t)v3, a1);
  return Hasher._finalize()();
}

BOOL sub_100074844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000747A8(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_100074850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  Swift::UInt v13;
  uint64_t v14;
  Swift::UInt v15;

  v4 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v3, v4, &protocol requirements base descriptor for Identifiable, &associated type descriptor for Identifiable.ID);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v14 - v7;
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v10 = Strong;
    v15 = Strong;
    dispatch thunk of Identifiable.id.getter(v4, v3);
    swift_unknownObjectRelease(v10, v11);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &protocol requirements base descriptor for Identifiable, &associated conformance descriptor for Identifiable.Identifiable.ID: Hashable);
    v13 = dispatch thunk of Hashable.hashValue.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  else
  {
    v15 = 0;
    swift_stdlib_random(&v15, 8);
    v13 = v15;
  }
  Hasher._combine(_:)(v13);
}

Swift::Int sub_10007497C(uint64_t a1, uint64_t a2)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  sub_100074850((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000728C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Weak);
}

uint64_t sub_1000749DC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000749FC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

uint64_t sub_100074A24(double a1)
{
  id v2;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v2, "setMaximumFractionDigits:", 3);
  if (a1 >= 0.001)
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", a1);
    v5 = objc_msgSend(v2, "stringFromNumber:", v4);

    if (v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      v10 = v6;
      v11 = v8;
      v9._countAndFlagsBits = 115;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
    }
    else
    {
      v10 = 0;
      v11 = 0xE000000000000000;
      Double.write<A>(to:)(&v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a1);
    }

    return v10;
  }
  else
  {

    return 0x736D31203CLL;
  }
}

uint64_t sub_100074B4C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  v5 = sub_100004B18(&qword_1000CDB48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100006914(a1, v9);
  v11 = sub_1000757A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CodableError.CodingKeys, &type metadata for CodableError.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v24, v5);
  if (!v2)
  {
    v13 = v3[1];
    v14 = v3[2];
    v23 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v23, v5);
    v15 = v3[3];
    v16 = v3[4];
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v22, v5);
    v17 = v3[5];
    v18 = v3[6];
    v21 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100074CB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100074CE4 + 4 * byte_100089E04[*v0]))(0x646F43726F727265, 0xE900000000000065);
}

uint64_t sub_100074CE4()
{
  return 0x6D6F44726F727265;
}

unint64_t sub_100074D04()
{
  return 0xD000000000000014;
}

unint64_t sub_100074D20()
{
  return 0xD000000000000016;
}

uint64_t sub_100074D40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100075378(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100074D64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000757A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100074D8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000757A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100074DB4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_100075548(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100074E00(_QWORD *a1)
{
  return sub_100074B4C(a1);
}

uint64_t sub_100074E14()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_100074E1C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000757E4();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100074E44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000757E4();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100074E6C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return sub_100074ED4(v5, v7) & 1;
}

uint64_t sub_100074ED4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*a1 != *a2)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  v7 = a2[2];
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = a1[3];
    v12 = a1[4];
    v13 = a2[3];
    v14 = a2[4];
    v15 = v11 == v13 && v12 == v14;
    if (v15
      || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0), result = 0, (v16 & 1) != 0))
    {
      v17 = a1[6];
      v18 = a2[6];
      if (v17)
      {
        if (v18)
        {
          v19 = a1[5];
          v20 = a2[5];
          if (v19 == v20 && v17 == v18)
            return 1;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v19, v17, v20, v18, 0) & 1) != 0)
            return 1;
        }
      }
      else if (!v18)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

void sub_100074F9C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  _QWORD v21[7];
  uint64_t v22;

  v22 = a1;
  swift_errorRetain();
  v4 = sub_100004B18(&qword_1000C6668);
  if ((swift_dynamicCast(v21, &v22, v4, &type metadata for CodableError, 6) & 1) != 0)
  {
    swift_errorRelease(a1);
    v5 = (id)v21[0];
    v6 = v21[1];
    v7 = v21[2];
    v8 = v21[3];
    v9 = v21[4];
    v10 = v21[5];
    v11 = v21[6];
  }
  else
  {
    v12 = (void *)_convertErrorToNSError(_:)(a1);
    v20 = objc_msgSend(v12, "code");
    v13 = objc_msgSend(v12, "domain");
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v7 = v14;

    v15 = objc_msgSend(v12, "localizedDescription");
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v9 = v16;

    v17 = objc_msgSend(v12, "localizedFailureReason");
    if (v17)
    {
      v18 = v17;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v11 = v19;
      swift_errorRelease(a1);

    }
    else
    {
      swift_errorRelease(a1);

      v10 = 0;
      v11 = 0;
    }
    v5 = v20;
  }
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  a2[4] = v9;
  a2[5] = v10;
  a2[6] = v11;
}

uint64_t destroy for CodableError(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for CodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *assignWithCopy for CodableError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  v8 = a2[6];
  v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for CodableError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableError()
{
  return &type metadata for CodableError;
}

unint64_t sub_100075334()
{
  unint64_t result;

  result = qword_1000CDB30;
  if (!qword_1000CDB30)
  {
    result = swift_getWitnessTable(&unk_100089E58, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1000CDB30);
  }
  return result;
}

uint64_t sub_100075378(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F43726F727265, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961)
  {
    v7 = 0xEB000000006E6961;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D6F44726F727265, 0xEB000000006E6961, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x8000000100095230;
    if (a2 == 0x8000000100095230)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100095230, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100095250)
  {
    swift_bridgeObjectRelease(0x8000000100095250);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100095250, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100075548@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v5 = sub_100004B18(&qword_1000CDB38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100006914(a1, v9);
  v11 = sub_1000757A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CodableError.CodingKeys, &type metadata for CodableError.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_10000697C(a1);
  v33 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  v32 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v15 = v14;
  v29 = v13;
  v31 = 2;
  swift_bridgeObjectRetain(v14);
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  v28 = v16;
  v30 = 3;
  swift_bridgeObjectRetain(v16);
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain(v19);
  sub_10000697C(a1);
  swift_bridgeObjectRelease(v19);
  v22 = v28;
  swift_bridgeObjectRelease(v28);
  result = swift_bridgeObjectRelease(v15);
  v24 = v29;
  *a2 = v12;
  a2[1] = v24;
  v25 = v27;
  a2[2] = v15;
  a2[3] = v25;
  a2[4] = v22;
  a2[5] = v21;
  a2[6] = v19;
  return result;
}

unint64_t sub_1000757A0()
{
  unint64_t result;

  result = qword_1000CDB40;
  if (!qword_1000CDB40)
  {
    result = swift_getWitnessTable(&unk_10008A034, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDB40);
  }
  return result;
}

unint64_t sub_1000757E4()
{
  unint64_t result;

  result = qword_1000CDB50;
  if (!qword_1000CDB50)
  {
    result = swift_getWitnessTable(&unk_100089E98, &type metadata for CodableError);
    atomic_store(result, (unint64_t *)&qword_1000CDB50);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CodableError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100075874 + 4 * byte_100089E0D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000758A8 + 4 * byte_100089E08[v4]))();
}

uint64_t sub_1000758A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000758B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000758B8);
  return result;
}

uint64_t sub_1000758C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000758CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000758D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000758D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodableError.CodingKeys()
{
  return &type metadata for CodableError.CodingKeys;
}

unint64_t sub_1000758F8()
{
  unint64_t result;

  result = qword_1000CDB58;
  if (!qword_1000CDB58)
  {
    result = swift_getWitnessTable(&unk_10008A00C, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDB58);
  }
  return result;
}

unint64_t sub_100075940()
{
  unint64_t result;

  result = qword_1000CDB60;
  if (!qword_1000CDB60)
  {
    result = swift_getWitnessTable(&unk_100089F7C, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDB60);
  }
  return result;
}

unint64_t sub_100075988()
{
  unint64_t result;

  result = qword_1000CDB68;
  if (!qword_1000CDB68)
  {
    result = swift_getWitnessTable(&unk_100089FA4, &type metadata for CodableError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDB68);
  }
  return result;
}

_QWORD *sub_1000759CC(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  void *v7;
  uint64_t v8;
  BOOL v9;
  id v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v2 = (_QWORD *)sub_10003EFE8((uint64_t)&_swiftEmptyArrayStorage);
  v3 = sub_100075F28(a1);
  if (!v3)
    return v2;
  v4 = v3;
  v32 = v3;
  v5 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFF8);
  if (v3 >> 62)
    goto LABEL_32;
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    if ((v3 & 0xC000000000000001) == 0)
      goto LABEL_5;
  }
  else
  {
LABEL_38:
    __break(1u);
  }
  result = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
LABEL_7:
  v7 = result;
  if (!v5[2])
    goto LABEL_51;
  do
  {
    sub_1000765B8(0, 1);

    a1 = v32;
    if (!(v32 >> 62))
    {
      v5 = *(_QWORD **)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v32);
      if (v5)
        goto LABEL_10;
LABEL_45:
      swift_bridgeObjectRelease_n(a1, 2);
      return v2;
    }
    while (2)
    {
      if (a1 < 0)
        v26 = a1;
      else
        v26 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(a1, 2);
      v5 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(a1);
      if (!v5)
        goto LABEL_45;
LABEL_10:
      v29 = a1;
      v30 = a1 & 0xC000000000000001;
      v8 = 4;
      while (1)
      {
        v4 = v8 - 4;
        if (!v30)
          break;
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1);
        v11 = v8 - 3;
        if (__OFADD__(v4, 1))
          goto LABEL_29;
LABEL_18:
        a1 = (uint64_t)v5;
        v5 = v10;
        v12 = objc_msgSend(v5, "clipsToBounds");
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
        v31 = v2;
        v4 = (uint64_t)v2;
        v15 = sub_100044078((uint64_t)v5);
        v16 = v2[2];
        v17 = (v14 & 1) == 0;
        v18 = v16 + v17;
        if (__OFADD__(v16, v17))
          goto LABEL_30;
        v19 = v14;
        if (v2[3] >= v18)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v2 = v31;
            if ((v14 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            v4 = (uint64_t)&v31;
            sub_100076418();
            v2 = v31;
            if ((v19 & 1) != 0)
              goto LABEL_11;
          }
        }
        else
        {
          sub_100076154(v18, isUniquelyReferenced_nonNull_native);
          v4 = (uint64_t)v31;
          v20 = sub_100044078((uint64_t)v5);
          if ((v19 & 1) != (v21 & 1))
            goto LABEL_48;
          v15 = v20;
          v2 = v31;
          if ((v19 & 1) != 0)
          {
LABEL_11:
            *(_BYTE *)(v2[7] + v15) = v12;
            goto LABEL_12;
          }
        }
        v2[(v15 >> 6) + 8] |= 1 << v15;
        *(_QWORD *)(v2[6] + 8 * v15) = v5;
        *(_BYTE *)(v2[7] + v15) = v12;
        v22 = v2[2];
        v23 = __OFADD__(v22, 1);
        v24 = v22 + 1;
        if (v23)
          goto LABEL_31;
        v2[2] = v24;
        v25 = v5;
LABEL_12:

        swift_bridgeObjectRelease(0x8000000000000000);
        objc_msgSend(v5, "setClipsToBounds:", 0);

        ++v8;
        v5 = (_QWORD *)a1;
        v9 = v11 == a1;
        a1 = v29;
        if (v9)
          goto LABEL_45;
      }
      v10 = *(id *)(a1 + 8 * v8);
      v11 = v8 - 3;
      if (!__OFADD__(v4, 1))
        goto LABEL_18;
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      if (v4 >= 0)
        v8 = (uint64_t)v5;
      else
        v8 = v4;
      if (_CocoaArrayWrapper.endIndex.getter(v8))
      {
        swift_bridgeObjectRetain(v4);
        a1 = _CocoaArrayWrapper.endIndex.getter(v8);
        swift_bridgeObjectRelease(v4);
        if (!a1)
        {
          __break(1u);
          goto LABEL_38;
        }
      }
      else
      {
        __break(1u);
LABEL_48:
        v27 = sub_10000AA28(0, (unint64_t *)&qword_1000C72B0, UIView_ptr);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v27);
        __break(1u);
      }
      if ((v4 & 0xC000000000000001) == 0)
      {
LABEL_5:
        if (!v5[2])
        {
          __break(1u);
          continue;
        }
        result = *(id *)(v4 + 32);
        goto LABEL_7;
      }
      break;
    }
    v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    swift_bridgeObjectRetain(v4);
    v28 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = (_QWORD *)swift_bridgeObjectRelease(v4);
  }
  while (v28);
LABEL_51:
  __break(1u);
  return result;
}

unint64_t sub_100075D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  result = sub_100075F28(a1);
  if (!result)
    return result;
  v5 = result;
  v16 = result;
  v6 = (_QWORD *)(result & 0xFFFFFFFFFFFFFF8);
  if (result >> 62)
    goto LABEL_21;
  if (!*(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_27;
  if ((result & 0xC000000000000001) != 0)
    goto LABEL_28;
LABEL_5:
  if (v6[2])
  {
    result = (unint64_t)*(id *)(v5 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_30:
  if (v2 < 0)
    v14 = v2;
  else
    v14 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v2, 2);
  v8 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v8)
    return swift_bridgeObjectRelease_n(v2, 3);
  while (1)
  {
    v9 = 4;
    v5 = 0;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_11:
      v10 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      goto LABEL_13;
    }
    while (1)
    {
      v10 = *(id *)(v2 + 8 * v9);
LABEL_13:
      v6 = v10;
      if (__OFADD__(v5, 1))
        break;
      if (*(_QWORD *)(a2 + 16))
      {
        v11 = sub_100044078((uint64_t)v10);
        if ((v12 & 1) != 0)
          objc_msgSend(v6, "setClipsToBounds:", *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v11));
      }

      if (v5 + 1 == v8)
        return swift_bridgeObjectRelease_n(v2, 3);
      v5 = ++v9 - 4;
      if ((v2 & 0xC000000000000001) != 0)
        goto LABEL_11;
    }
    __break(1u);
LABEL_21:
    v13 = v5 >= 0 ? v6 : (_QWORD *)v5;
    if (_CocoaArrayWrapper.endIndex.getter(v13))
      break;
    __break(1u);
LABEL_37:
    if ((v5 & 0xC000000000000001) == 0)
      goto LABEL_5;
    v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
    swift_bridgeObjectRetain(v5);
    v15 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease(v5);
    if (!v15)
      goto LABEL_39;
LABEL_8:
    sub_1000765B8(0, 1);

    v2 = v16;
    if (v16 >> 62)
      goto LABEL_30;
    v8 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v16, 2);
    if (!v8)
      return swift_bridgeObjectRelease_n(v2, 3);
  }
  swift_bridgeObjectRetain(v5);
  v2 = _CocoaArrayWrapper.endIndex.getter(v13);
  swift_bridgeObjectRelease(v5);
  if (v2)
    goto LABEL_37;
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
LABEL_7:
  v7 = (void *)result;
  if (v6[2])
    goto LABEL_8;
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100075F28(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  sub_10000AA28(0, &qword_1000CD138, NSObject_ptr);
  if ((static NSObject.== infix(_:_:)(v1, a1) & 1) != 0)
  {
    v4 = sub_100004B18(&qword_1000C6E00);
    v5 = swift_allocObject(v4, 40, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100081060;
    *(_QWORD *)(v5 + 32) = v1;
    v25 = v5;
    specialized Array._endMutation()(v5);
    v6 = v25;
    v7 = v2;
    return v6;
  }
  v8 = objc_msgSend(v1, "subviews");
  v9 = sub_10000AA28(0, (unint64_t *)&qword_1000C72B0, UIView_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  if (!((unint64_t)v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_5;
LABEL_12:
    swift_bridgeObjectRelease(v10);
    return 0;
  }
LABEL_18:
  if (v10 < 0)
    v24 = v10;
  else
    v24 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v11 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v10);
  if (!v11)
    goto LABEL_12;
LABEL_5:
  v12 = 4;
  while (1)
  {
    if ((v10 & 0xC000000000000001) != 0)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v10);
    else
      v13 = *(id *)(v10 + 8 * v12);
    v14 = v13;
    v15 = v12 - 3;
    if (__OFADD__(v12 - 4, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    v16 = sub_100075F28(a1);
    if (v16)
      break;

    ++v12;
    if (v15 == v11)
      goto LABEL_12;
  }
  v17 = v16;
  swift_bridgeObjectRelease(v10);
  v18 = v2;
  v19 = swift_bridgeObjectRetain(v17);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
  v21 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v21 >= v20 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
  specialized Array._endMutation()(v22);
  v6 = v17;

  swift_bridgeObjectRelease(v17);
  return v6;
}

Swift::Int sub_100076154(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  char v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100004B18(qword_1000CB010);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v3;
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_34;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_36;
      v24 = *(_QWORD *)(v35 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v34;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v24 = *(_QWORD *)(v35 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v15 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_34:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((a2 & 1) == 0)
      v32 = v30;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v18 == v27;
        if (v18 == v27)
          v18 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v29 == -1);
      v19 = __clz(__rbit64(~v29)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v30;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

id sub_100076418()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  char v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100004B18(qword_1000CB010);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v17 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v16;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v17;
    result = v16;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000765B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if (v5 < 0)
    v25 = v5;
  else
    v25 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_33;
LABEL_4:
  v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v5;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    if (v7 < 0)
      v27 = v7;
    else
      v27 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v12 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v7);
    v7 = *v3;
    goto LABEL_15;
  }
LABEL_36:
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v8 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v7);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_41;
LABEL_8:
  v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v7;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v7);
  v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v7);
  v14 = *v3;
  *v3 = v13;
  swift_bridgeObjectRelease(v14);
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v11 + 32;
  v16 = (char *)(v11 + 32 + 8 * v4);
  v17 = sub_10000AA28(0, (unint64_t *)&qword_1000C72B0, UIView_ptr);
  result = (void *)swift_arrayDestroy(v16, v5, v17);
  if (!v6)
    return (void *)specialized Array._endMutation()(result);
  v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v20 - v2;
    if (!__OFSUB__(v20, v2))
      goto LABEL_21;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v19 < 0)
    v28 = *v3;
  else
    v28 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v3);
  v29 = _CocoaArrayWrapper.endIndex.getter(v28);
  result = (void *)swift_bridgeObjectRelease(v19);
  v21 = v29 - v2;
  if (__OFSUB__(v29, v2))
    goto LABEL_51;
LABEL_21:
  v22 = (char *)(v15 + 8 * v2);
  if (v4 != v2 || v16 >= &v22[8 * v21])
    result = memmove(v16, v22, 8 * v21);
  v2 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
LABEL_52:
    if (v2 < 0)
      v30 = v2;
    else
      v30 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v31 = _CocoaArrayWrapper.endIndex.getter(v30);
    result = (void *)swift_bridgeObjectRelease(v2);
    v24 = v31 + v6;
    if (!__OFADD__(v31, v6))
      goto LABEL_26;
    goto LABEL_57;
  }
  v23 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v24 = v23 + v6;
  if (!__OFADD__(v23, v6))
  {
LABEL_26:
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v24;
    return (void *)specialized Array._endMutation()(result);
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t destroy for NearbySharingInteractionViewEvent(uint64_t a1)
{
  return sub_100036E60(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
}

uint64_t initializeWithCopy for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_100036D50(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_BYTE *)(a2 + 56);
  sub_100036D50(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v18 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v10;
  sub_100036E60(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_BYTE *)(a2 + 56);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v3;
  v13 = *(_BYTE *)(a1 + 56);
  *(_BYTE *)(a1 + 56) = v4;
  sub_100036E60(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent()
{
  return &type metadata for NearbySharingInteractionViewEvent;
}

uint64_t sub_100076A24()
{
  __int128 *v0;
  uint64_t countAndFlagsBits;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  _QWORD v11[2];
  Swift::String v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  Swift::String v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  sub_10006A54C(v0, &v12);
  countAndFlagsBits = v12._countAndFlagsBits;
  if (v16)
  {
    if (v16 == 1)
    {
      v17 = v12;
      v18 = v13;
      v19 = v14;
      v20 = v15;
      v11[0] = 0;
      v11[1] = 0xE000000000000000;
      v2._countAndFlagsBits = 0x202864656C696166;
      v2._object = (void *)0xE800000000000000;
      String.append(_:)(v2);
      v9[0] = v17;
      v9[1] = v18;
      v9[2] = v19;
      v10 = v20;
      _print_unlocked<A, B>(_:_:)(v9, v11, &type metadata for CodableError, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v3._countAndFlagsBits = 10528;
      v3._object = (void *)0xE200000000000000;
      String.append(_:)(v3);
      return v11[0];
    }
    else
    {
      v7 = *((_QWORD *)&v13 + 1) | v13 | (__int128)v12._object;
      if (*((_QWORD *)&v14 + 1) | v15 | v12._countAndFlagsBits | (unint64_t)v14 | v7)
      {
        v8 = *((_QWORD *)&v14 + 1) | v15 | v14 | v7;
        if (v12._countAndFlagsBits != 1 || v8)
        {
          if (v12._countAndFlagsBits == 2 && v8 == 0)
            return 0xD000000000000010;
          else
            return 0x61546C65636E6163;
        }
        else
        {
          return 0x65746E6573657270;
        }
      }
      else
      {
        return 0x69746E6573657270;
      }
    }
  }
  else
  {
    object = v12._object;
    v17._countAndFlagsBits = 0x657373696D736964;
    v17._object = (void *)0xEB00000000202864;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    v6._countAndFlagsBits = 10528;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    return v17._countAndFlagsBits;
  }
}

uint64_t sub_100076BF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 *v62;

  v41 = sub_100004B18(&qword_1000CDBE0);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v39 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100004B18(&qword_1000CDBE8);
  v37 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v36 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100004B18(&qword_1000CDBF0);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004B18(&qword_1000CDBF8);
  v46 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100004B18(&qword_1000CDC00);
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v42 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100004B18(&qword_1000CDC08);
  v10 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100004B18(&qword_1000CDC10);
  v49 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_100006914(a1, v16);
  v17 = sub_100078194();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionViewEvent.CodingKeys, &type metadata for NearbySharingInteractionViewEvent.CodingKeys, v17, v16, v15);
  sub_10006A54C(v62, &v53);
  v18 = v53;
  if (!v57)
  {
    v22 = *((_QWORD *)&v53 + 1);
    LOBYTE(v51[0]) = 2;
    v23 = sub_1000782A4();
    v20 = v50;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys, v51, v50, &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys, v23);
    KeyedEncodingContainer.encode(_:forKey:)(v18, v22, v24, v6);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v14, v20);
  }
  if (v57 == 1)
  {
    v58 = v53;
    v59 = v54;
    v60 = v55;
    v61 = v56;
    LOBYTE(v51[0]) = 3;
    v19 = sub_100078260();
    v20 = v50;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys, v51, v50, &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys, v19);
    v51[0] = v58;
    v51[1] = v59;
    v51[2] = v60;
    v52 = v61;
    sub_10006A814();
    v21 = v48;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v51);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v5, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v14, v20);
  }
  v26 = *((_QWORD *)&v54 + 1) | v54 | *((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v55 + 1) | v56 | (unint64_t)v53 | (unint64_t)v55 | v26)
  {
    v27 = *((_QWORD *)&v55 + 1) | v56 | v55 | v26;
    if ((_QWORD)v53 != 1 || v27)
    {
      if ((_QWORD)v53 != 2 || v27)
      {
        LOBYTE(v51[0]) = 5;
        v34 = sub_1000781D8();
        v35 = v39;
        v30 = v50;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys, v51, v50, &type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys, v34);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v41);
      }
      else
      {
        LOBYTE(v51[0]) = 4;
        v32 = sub_10007821C();
        v33 = v36;
        v30 = v50;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys, v51, v50, &type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys, v32);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v38);
      }
    }
    else
    {
      LOBYTE(v51[0]) = 1;
      v28 = sub_1000782E8();
      v29 = v42;
      v30 = v50;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys, v51, v50, &type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys, v28);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v44);
    }
  }
  else
  {
    LOBYTE(v51[0]) = 0;
    v31 = sub_10007832C();
    v30 = v50;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys, v51, v50, &type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys, v31);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v45);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v14, v30);
}

uint64_t sub_1000771C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000781D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000771E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000781D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100077210()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100077244 + 4 * byte_10008A090[*v0]))(0x69746E6573657270, 0xEA0000000000676ELL);
}

uint64_t sub_100077244()
{
  return 0x65746E6573657270;
}

uint64_t sub_100077274()
{
  return 0x64656C696166;
}

unint64_t sub_100077288()
{
  return 0xD000000000000010;
}

uint64_t sub_1000772A4()
{
  return 0x61546C65636E6163;
}

uint64_t sub_1000772C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100077698(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000772E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100078194();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100077310(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100078194();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100077338(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000782A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100077360(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000782A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100077388(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100078260();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000773B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100078260();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000773D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000782E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100077400(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000782E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100077428(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007832C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100077450(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007832C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100077478(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007821C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000774A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007821C();
  return CodingKey.debugDescription.getter(a1, v2);
}

_OWORD *sub_1000774C8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  _OWORD *result;
  __int128 v5[4];

  result = (_OWORD *)sub_100077944(a1, (uint64_t)v5);
  if (!v2)
    return sub_10006A54C(v5, a2);
  return result;
}

uint64_t sub_10007750C(_QWORD *a1)
{
  __int128 *v1;
  _OWORD v4[4];

  sub_10006A54C(v1, v4);
  return sub_100076BF8(a1);
}

uint64_t sub_100077558()
{
  __int128 *v0;
  _OWORD v2[4];

  sub_10006A54C(v0, v2);
  return sub_100076A24();
}

BOOL sub_10007758C(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *((unsigned __int8 *)a2 + 56);
  if (*((_BYTE *)a1 + 56))
  {
    if (*((_BYTE *)a1 + 56) == 1)
      return v2 == 1;
    v4 = *a1;
    v3 = a1[1];
    v6 = *a2;
    v5 = a2[1];
    v8 = a2[2];
    v7 = a2[3];
    v10 = a2[4];
    v9 = a2[5];
    v11 = a2[6];
    v12 = a1[3];
    v13 = a1[4];
    v14 = a1[2];
    v15 = a1[5] | a1[6];
    v16 = v12 | v14 | v3;
    if (!(v15 | v4 | v13 | v16))
      return v2 == 2 && !(v8 | v5 | v6 | v7 | v10 | v9 | v11);
    v17 = v15 | v13 | v16;
    if (v4 != 1 || v17)
    {
      if (v4 != 2 || v17)
      {
        if (v2 != 2 || v6 != 3)
          return 0;
      }
      else if (v2 != 2 || v6 != 2)
      {
        return 0;
      }
    }
    else if (v2 != 2 || v6 != 1)
    {
      return 0;
    }
    if (!(v8 | v5 | v7 | v10 | v9 | v11))
      return 1;
  }
  else if (!*((_BYTE *)a2 + 56))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100077698(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL)
  {
    v5 = 0xEA0000000000676ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69746E6573657270, 0xEA0000000000676ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064)
  {
    v7 = 0xE900000000000064;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746E6573657270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064)
  {
    v8 = 0xE900000000000064;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657373696D736964, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x64656C696166 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C696166, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x8000000100095270;
    if (a2 == 0x8000000100095270)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100095270, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x61546C65636E6163 && a2 == 0xEC00000064657070)
  {
    swift_bridgeObjectRelease(0xEC00000064657070);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61546C65636E6163, 0xEC00000064657070, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100077944@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[6];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v41 = a2;
  v3 = sub_100004B18(&qword_1000CDB70);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  __chkstk_darwin(v3);
  v44 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100004B18(&qword_1000CDB78);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100004B18(&qword_1000CDB80);
  v38 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v43 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000CDB88);
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  __chkstk_darwin(v8);
  v42 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100004B18(&qword_1000CDB90);
  v31[5] = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v39 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000CDB98);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100004B18(&qword_1000CDBA0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v19 = a1[4];
  v47 = a1;
  sub_100006914(a1, v20);
  v21 = sub_100078194();
  v22 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NearbySharingInteractionViewEvent.CodingKeys, &type metadata for NearbySharingInteractionViewEvent.CodingKeys, v21, v20, v19);
  if (!v22)
  {
    v31[3] = v14;
    v31[1] = v12;
    v31[2] = v11;
    v48 = v16;
    v31[4] = 0;
    v23 = KeyedDecodingContainer.allKeys.getter(v15);
    v24 = v23;
    if (*(_QWORD *)(v23 + 16) == 1)
      __asm { BR              X10 }
    v25 = type metadata accessor for DecodingError(0);
    swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
    v27 = v26;
    sub_100004B18(&qword_1000C7E90);
    *v27 = &type metadata for NearbySharingInteractionViewEvent;
    v28 = KeyedDecodingContainer.codingPath.getter(v15);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v28, 0xD00000000000002BLL, 0x80000001000907B0, 0);
    v29 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow(v29);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v15);
  }
  return sub_10000697C(v47);
}

unint64_t sub_100078194()
{
  unint64_t result;

  result = qword_1000CDBA8;
  if (!qword_1000CDBA8)
  {
    result = swift_getWitnessTable(&unk_10008A790, &type metadata for NearbySharingInteractionViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDBA8);
  }
  return result;
}

unint64_t sub_1000781D8()
{
  unint64_t result;

  result = qword_1000CDBB0;
  if (!qword_1000CDBB0)
  {
    result = swift_getWitnessTable(&unk_10008A740, &type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDBB0);
  }
  return result;
}

unint64_t sub_10007821C()
{
  unint64_t result;

  result = qword_1000CDBB8;
  if (!qword_1000CDBB8)
  {
    result = swift_getWitnessTable(&unk_10008A6F0, &type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDBB8);
  }
  return result;
}

unint64_t sub_100078260()
{
  unint64_t result;

  result = qword_1000CDBC0;
  if (!qword_1000CDBC0)
  {
    result = swift_getWitnessTable(&unk_10008A6A0, &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDBC0);
  }
  return result;
}

unint64_t sub_1000782A4()
{
  unint64_t result;

  result = qword_1000CDBC8;
  if (!qword_1000CDBC8)
  {
    result = swift_getWitnessTable(&unk_10008A650, &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDBC8);
  }
  return result;
}

unint64_t sub_1000782E8()
{
  unint64_t result;

  result = qword_1000CDBD0;
  if (!qword_1000CDBD0)
  {
    result = swift_getWitnessTable(&unk_10008A600, &type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDBD0);
  }
  return result;
}

unint64_t sub_10007832C()
{
  unint64_t result;

  result = qword_1000CDBD8;
  if (!qword_1000CDBD8)
  {
    result = swift_getWitnessTable(&unk_10008A5B0, &type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDBD8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionViewEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000783BC + 4 * byte_10008A0A1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000783F0 + 4 * byte_10008A09C[v4]))();
}

uint64_t sub_1000783F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000783F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100078400);
  return result;
}

uint64_t sub_10007840C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100078414);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100078418(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100078420(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.CodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.PresentingCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.PresentedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.DismissedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys;
}

uint64_t _s13PCViewService33NearbySharingInteractionViewEventO19DismissedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000784B0 + 4 * byte_10008A0A6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000784D0 + 4 * byte_10008A0AB[v4]))();
}

_BYTE *sub_1000784B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000784D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000784D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000784E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000784E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000784F0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.FailedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.CancelTappedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys;
}

unint64_t sub_100078530()
{
  unint64_t result;

  result = qword_1000CDC18;
  if (!qword_1000CDC18)
  {
    result = swift_getWitnessTable(&unk_10008A378, &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC18);
  }
  return result;
}

unint64_t sub_100078578()
{
  unint64_t result;

  result = qword_1000CDC20;
  if (!qword_1000CDC20)
  {
    result = swift_getWitnessTable(&unk_10008A430, &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC20);
  }
  return result;
}

unint64_t sub_1000785C0()
{
  unint64_t result;

  result = qword_1000CDC28;
  if (!qword_1000CDC28)
  {
    result = swift_getWitnessTable(&unk_10008A588, &type metadata for NearbySharingInteractionViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC28);
  }
  return result;
}

unint64_t sub_100078608()
{
  unint64_t result;

  result = qword_1000CDC30;
  if (!qword_1000CDC30)
  {
    result = swift_getWitnessTable(&unk_10008A4A8, &type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC30);
  }
  return result;
}

unint64_t sub_100078650()
{
  unint64_t result;

  result = qword_1000CDC38;
  if (!qword_1000CDC38)
  {
    result = swift_getWitnessTable(&unk_10008A4D0, &type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC38);
  }
  return result;
}

unint64_t sub_100078698()
{
  unint64_t result;

  result = qword_1000CDC40;
  if (!qword_1000CDC40)
  {
    result = swift_getWitnessTable(&unk_10008A458, &type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC40);
  }
  return result;
}

unint64_t sub_1000786E0()
{
  unint64_t result;

  result = qword_1000CDC48;
  if (!qword_1000CDC48)
  {
    result = swift_getWitnessTable(&unk_10008A480, &type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC48);
  }
  return result;
}

unint64_t sub_100078728()
{
  unint64_t result;

  result = qword_1000CDC50;
  if (!qword_1000CDC50)
  {
    result = swift_getWitnessTable(&unk_10008A3A0, &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC50);
  }
  return result;
}

unint64_t sub_100078770()
{
  unint64_t result;

  result = qword_1000CDC58;
  if (!qword_1000CDC58)
  {
    result = swift_getWitnessTable(&unk_10008A3C8, &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC58);
  }
  return result;
}

unint64_t sub_1000787B8()
{
  unint64_t result;

  result = qword_1000CDC60;
  if (!qword_1000CDC60)
  {
    result = swift_getWitnessTable(&unk_10008A2E8, &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC60);
  }
  return result;
}

unint64_t sub_100078800()
{
  unint64_t result;

  result = qword_1000CDC68;
  if (!qword_1000CDC68)
  {
    result = swift_getWitnessTable(&unk_10008A310, &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC68);
  }
  return result;
}

unint64_t sub_100078848()
{
  unint64_t result;

  result = qword_1000CDC70;
  if (!qword_1000CDC70)
  {
    result = swift_getWitnessTable(&unk_10008A298, &type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC70);
  }
  return result;
}

unint64_t sub_100078890()
{
  unint64_t result;

  result = qword_1000CDC78;
  if (!qword_1000CDC78)
  {
    result = swift_getWitnessTable(&unk_10008A2C0, &type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC78);
  }
  return result;
}

unint64_t sub_1000788D8()
{
  unint64_t result;

  result = qword_1000CDC80;
  if (!qword_1000CDC80)
  {
    result = swift_getWitnessTable(&unk_10008A248, &type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC80);
  }
  return result;
}

unint64_t sub_100078920()
{
  unint64_t result;

  result = qword_1000CDC88;
  if (!qword_1000CDC88)
  {
    result = swift_getWitnessTable(&unk_10008A270, &type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC88);
  }
  return result;
}

unint64_t sub_100078968()
{
  unint64_t result;

  result = qword_1000CDC90;
  if (!qword_1000CDC90)
  {
    result = swift_getWitnessTable(&unk_10008A4F8, &type metadata for NearbySharingInteractionViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC90);
  }
  return result;
}

unint64_t sub_1000789B0()
{
  unint64_t result;

  result = qword_1000CDC98;
  if (!qword_1000CDC98)
  {
    result = swift_getWitnessTable(&unk_10008A520, &type metadata for NearbySharingInteractionViewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000CDC98);
  }
  return result;
}

uint64_t PCInteractionDirection.description.getter(uint64_t a1)
{
  Swift::String v2;
  void *object;

  switch(a1)
  {
    case 0:
      return 1701736302;
    case 1:
      return 1752397168;
    case 2:
      return 1819047280;
  }
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000011;
}

uint64_t sub_100078AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100078B78();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100078B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100078B78();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100078B70()
{
  uint64_t *v0;

  return PCInteractionDirection.description.getter(*v0);
}

unint64_t sub_100078B78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CDCA0;
  if (!qword_1000CDCA0)
  {
    type metadata accessor for PCInteractionDirection(255);
    result = swift_getWitnessTable(&unk_10007F990, v1);
    atomic_store(result, (unint64_t *)&qword_1000CDCA0);
  }
  return result;
}

void sub_100078BC4()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;

  v0 = objc_allocWithZone((Class)CULogHandle);
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "initWithSubsystem:category:", v1, v2);

  qword_1000CDCB0 = (uint64_t)v3;
}

os_activity_t _makeActivity(named:dso:)(char *description, int a2, char a3, void *dso)
{
  os_activity_t result;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char descriptiona[8];

  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_1000C5DB8 == -1)
          return _os_activity_create(dso, description, (os_activity_t)qword_1000CDCB8, OS_ACTIVITY_FLAG_DEFAULT);
LABEL_18:
        swift_once(&qword_1000C5DB8, sub_1000795E8);
        return _os_activity_create(dso, description, (os_activity_t)qword_1000CDCB8, OS_ACTIVITY_FLAG_DEFAULT);
      }
      goto LABEL_28;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)description >> 32)
    goto LABEL_17;
  if (description >> 11 == 27)
    goto LABEL_27;
  if (description >> 16 > 0x10)
  {
    __break(1u);
  }
  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      v7 = ((_BYTE)description + 1);
      goto LABEL_12;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = (description & 0x3F) << 8;
  v9 = (v8 | (description >> 6)) + 33217;
  v10 = (v8 | (description >> 6) & 0x3F) << 8;
  v11 = (((v10 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  v12 = (v10 | (description >> 12)) + 8487393;
  if (description >> 16)
    v7 = v11;
  else
    v7 = v12;
  if (description < 0x800)
    v7 = v9;
LABEL_12:
  *(_QWORD *)descriptiona = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v7) & 0x38)) & 0x38));
  if (!dso)
  {
LABEL_28:
    result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001CLL, 0x80000001000952B0, "PCViewService/Transaction.swift", 31, 2, 154, 0);
    __break(1u);
    return result;
  }
  if (qword_1000C5DB8 != -1)
    swift_once(&qword_1000C5DB8, sub_1000795E8);
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_1000CDCB8, OS_ACTIVITY_FLAG_DEFAULT);
}

uint64_t sub_100078E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::String v3;
  void *object;
  void *v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];

  if (*(_QWORD *)(v2 + 64))
  {
    v11[0] = 0x676E6970706F7453;
    v11[1] = 0xE900000000000020;
    v3._countAndFlagsBits = StaticString.description.getter(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32));
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    if (qword_1000C5DB0 != -1)
      swift_once(&qword_1000C5DB0, sub_100078BC4);
    v5 = (void *)qword_1000CDCB0;
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "ulog:message:", 40, v6);
    swift_bridgeObjectRelease(0xE900000000000020);

    swift_beginAccess(v2 + 48, v11, 33, 0);
    os_activity_scope_leave((os_activity_scope_state_t)(v2 + 48));
    swift_endAccess(v11);
    v7 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = 0;
    swift_unknownObjectRelease(v7, v8);
  }
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 40), a2);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 64), v9);
  return swift_deallocClassInstance(v2, 72, 7);
}

unint64_t sub_100078F80(unint64_t *a1, uint64_t *a2)
{
  return sub_1000796DC(*a1, *a2);
}

unint64_t sub_100078F8C()
{
  uint64_t v0;
  unint64_t result;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v15[9];

  Hasher.init(_seed:)(v15, 0);
  result = *(_QWORD *)(v0 + 16);
  LODWORD(v2) = *(unsigned __int8 *)(v0 + 32);
  if ((v2 & 1) == 0)
  {
    if (result)
    {
      v3 = *(_QWORD *)(v0 + 24);
LABEL_11:
      v6 = static String._fromUTF8Repairing(_:)(result, v3);
      v8 = v7;
      String.hash(into:)(v15, v6, v7);
      swift_bridgeObjectRelease(v8);
      return Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_13;
  }
  v2 = HIDWORD(result);
  if (HIDWORD(result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (result >> 11 != 27)
  {
    LODWORD(v2) = WORD1(result);
    if (WORD1(result) > 0x10u)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    if ((result & 0xFFFFFF80) != 0)
    {
LABEL_15:
      v9 = (result & 0x3F) << 8;
      v10 = (v9 | (result >> 6)) + 33217;
      v11 = (v9 | (result >> 6) & 0x3F) << 8;
      v12 = (((v11 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
      v13 = (v11 | (result >> 12)) + 8487393;
      if ((_DWORD)v2)
        v4 = v12;
      else
        v4 = v13;
      if (result < 0x800)
        v4 = v10;
      goto LABEL_10;
    }
    if (result <= 0xFF)
    {
      v4 = (result + 1);
LABEL_10:
      v5 = __clz(v4);
      v3 = 4 - (v5 >> 3);
      v14 = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v5 >> 3)) & 7)));
      result = (unint64_t)&v14;
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000790E4()
{
  return sub_100078F8C();
}

unint64_t sub_100079104(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v1 + 32) & 1) == 0)
  {
    if (result)
    {
      v4 = static String._fromUTF8Repairing(_:)(result, *(_QWORD *)(*(_QWORD *)v1 + 24));
LABEL_8:
      v6 = v5;
      String.hash(into:)(a1, v4, v5);
      return swift_bridgeObjectRelease(v6);
    }
    __break(1u);
    goto LABEL_10;
  }
  if (HIDWORD(result))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (result >> 11 != 27)
  {
    if (WORD1(result) <= 0x10u)
    {
      v4 = sub_100079610(result);
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000791A4(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  result = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v1 + 32) & 1) == 0)
  {
    if (result)
    {
      v3 = static String._fromUTF8Repairing(_:)(result, *(_QWORD *)(*(_QWORD *)v1 + 24));
LABEL_8:
      v5 = v4;
      String.hash(into:)(v6, v3, v4);
      swift_bridgeObjectRelease(v5);
      return Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_10;
  }
  if (HIDWORD(result))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (result >> 11 != 27)
  {
    if (WORD1(result) <= 0x10u)
    {
      v3 = sub_100079610(result);
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100079254(uint64_t a1, uint64_t a2)
{
  return _ss12StaticStringV13PCViewServiceE2eeoiySbAB_ABtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(uint64_t **)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t StaticString.hash(into:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, unint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;

  v5 = result;
  if ((a4 & 1) == 0)
  {
    if (a2)
    {
      v6 = a2;
LABEL_11:
      v10 = static String._fromUTF8Repairing(_:)(v6, a3);
      v12 = v11;
      String.hash(into:)(v5, v10, v11);
      return swift_bridgeObjectRelease(v12);
    }
    __break(1u);
    goto LABEL_13;
  }
  a5 = (unint64_t)a2 >> 32;
  if ((unint64_t)a2 >> 32)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a2 >> 11 != 27)
  {
    LODWORD(a5) = a2 >> 16;
    if (a2 >> 16 > 0x10)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    if ((a2 & 0xFFFFFF80) != 0)
    {
LABEL_15:
      v13 = (a2 & 0x3F) << 8;
      v14 = (v13 | (a2 >> 6)) + 33217;
      v15 = (v13 | (a2 >> 6) & 0x3F) << 8;
      v16 = (((v15 | (a2 >> 12) & 0x3F) << 8) | (a2 >> 18)) - 2122219023;
      v17 = (v15 | (a2 >> 12)) + 8487393;
      if ((_DWORD)a5)
        v8 = v16;
      else
        v8 = v17;
      if (a2 < 0x800)
        v8 = v14;
      goto LABEL_10;
    }
    if (a2 <= 0xFF)
    {
      v8 = ((_BYTE)a2 + 1);
LABEL_10:
      v9 = __clz(v8);
      a3 = 4 - (v9 >> 3);
      v18 = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v9 >> 3)) & 7)));
      v6 = &v18;
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *StaticString.hashValue.getter(uint64_t *a1, uint64_t a2, char a3)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD v21[9];

  result = Hasher.init(_seed:)(v21, 0);
  if ((a3 & 1) == 0)
  {
    if (a1)
    {
      v8 = a1;
      v9 = a2;
LABEL_11:
      v12 = static String._fromUTF8Repairing(_:)(v8, v9);
      v14 = v13;
      String.hash(into:)(v21, v12, v13);
      swift_bridgeObjectRelease(v14);
      return (_QWORD *)Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_13;
  }
  v7 = (unint64_t)a1 >> 32;
  if ((unint64_t)a1 >> 32)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a1 >> 11 != 27)
  {
    LODWORD(v7) = a1 >> 16;
    if (a1 >> 16 > 0x10)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    if ((a1 & 0xFFFFFF80) != 0)
    {
LABEL_15:
      v15 = (a1 & 0x3F) << 8;
      v16 = (v15 | (a1 >> 6)) + 33217;
      v17 = (v15 | (a1 >> 6) & 0x3F) << 8;
      v18 = (((v17 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v19 = (v17 | (a1 >> 12)) + 8487393;
      if ((_DWORD)v7)
        v10 = v18;
      else
        v10 = v19;
      if (a1 < 0x800)
        v10 = v16;
      goto LABEL_10;
    }
    if (a1 <= 0xFF)
    {
      v10 = ((_BYTE)a1 + 1);
LABEL_10:
      v11 = __clz(v10);
      v9 = 4 - (v11 >> 3);
      v20 = (v10 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v11 >> 3)) & 7)));
      v8 = &v20;
      goto LABEL_11;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10007951C()
{
  uint64_t v0;

  return StaticString.hashValue.getter(*(uint64_t **)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_100079528@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;

  return StaticString.hash(into:)(a1, *(uint64_t **)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16), a2);
}

_QWORD *sub_100079534(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  result = Hasher.init(_seed:)(v9, a1);
  if ((v4 & 1) == 0)
  {
    if (v2)
    {
      v6 = static String._fromUTF8Repairing(_:)(v2, v3);
LABEL_8:
      v8 = v7;
      String.hash(into:)(v9, v6, v7);
      swift_bridgeObjectRelease(v8);
      return (_QWORD *)Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_10;
  }
  if (HIDWORD(v2))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 >> 11 != 27)
  {
    if (WORD1(v2) <= 0x10u)
    {
      v6 = sub_100079610(v2);
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000795E8()
{
  qword_1000CDCB8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain(qword_1000CDCB8);
}

uint64_t sub_100079610(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  if (a1 > 0x7F)
  {
    v4 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v5 = (v4 | (a1 >> 6) & 0x3F) << 8;
      v6 = (((v5 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v1 = (v5 | (a1 >> 12)) + 8487393;
      if (HIWORD(a1))
        v1 = v6;
    }
    else
    {
      v1 = (v4 | (a1 >> 6)) + 33217;
    }
  }
  else
  {
    v1 = a1 + 1;
  }
  v2 = __clz(v1);
  v7 = (v1 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v2 >> 3))));
  return static String._fromUTF8Repairing(_:)(&v7, 4 - (v2 >> 3));
}

unint64_t sub_1000796DC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  v4 = a1;
  result = *(_QWORD *)(a1 + 16);
  v6 = *(uint64_t **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  if ((*(_BYTE *)(v4 + 32) & 1) == 0)
  {
    if (result)
    {
      v9 = *(_QWORD *)(v4 + 24);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_27;
  }
  v4 = HIDWORD(result);
  if (HIDWORD(result))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (result >> 11 == 27)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  LODWORD(v4) = WORD1(result);
  if (WORD1(result) > 0x10u)
    goto LABEL_28;
  if ((result & 0xFFFFFF80) == 0)
  {
    if (result > 0xFF)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v10 = (result + 1);
    goto LABEL_10;
  }
LABEL_29:
  v21 = (result & 0x3F) << 8;
  v22 = (v21 | (result >> 6)) + 33217;
  v23 = (v21 | (result >> 6) & 0x3F) << 8;
  v24 = (((v23 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
  v25 = (v23 | (result >> 12)) + 8487393;
  if ((_DWORD)v4)
    v10 = v24;
  else
    v10 = v25;
  if (result < 0x800)
    v10 = v22;
LABEL_10:
  v11 = __clz(v10);
  v9 = 4 - (v11 >> 3);
  v31 = (v10 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v11 >> 3)) & 7)));
  result = (unint64_t)&v31;
LABEL_11:
  result = static String._fromUTF8Repairing(_:)(result, v9);
  v3 = result;
  v2 = v12;
  if ((v8 & 1) == 0)
  {
    if (v6)
    {
      v13 = v6;
      v14 = v7;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_36;
  }
  v4 = (unint64_t)v6 >> 32;
  if ((unint64_t)v6 >> 32)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v6 >> 11 == 27)
  {
LABEL_47:
    __break(1u);
    return result;
  }
  LODWORD(v4) = v6 >> 16;
  if (v6 >> 16 > 0x10)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    v26 = (v6 & 0x3F) << 8;
    v27 = (v26 | (v6 >> 6)) + 33217;
    v28 = (v26 | (v6 >> 6) & 0x3F) << 8;
    v29 = (((v28 | (v6 >> 12) & 0x3F) << 8) | (v6 >> 18)) - 2122219023;
    v30 = (v28 | (v6 >> 12)) + 8487393;
    if ((_DWORD)v4)
      v15 = v29;
    else
      v15 = v30;
    if (v6 < 0x800)
      v15 = v27;
    goto LABEL_20;
  }
  if ((v6 & 0xFFFFFF80) != 0)
    goto LABEL_39;
  if (v6 > 0xFF)
  {
    __break(1u);
    goto LABEL_46;
  }
  v15 = ((_BYTE)v6 + 1);
LABEL_20:
  v16 = __clz(v15);
  v14 = 4 - (v16 >> 3);
  v31 = (v15 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v16 >> 3)) & 7)));
  v13 = &v31;
LABEL_21:
  v18 = static String._fromUTF8Repairing(_:)(v13, v14);
  v19 = v17;
  if (v3 == v18 && v2 == v17)
  {
    v20 = 1;
    v19 = v2;
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v18, v17, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v19);
  return v20 & 1;
}

unint64_t _ss12StaticStringV13PCViewServiceE2eeoiySbAB_ABtFZ_0(unint64_t result, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;

  if ((a3 & 1) == 0)
  {
    if (result)
      goto LABEL_11;
    __break(1u);
  }
  v11 = HIDWORD(result);
  if (HIDWORD(result))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (result >> 11 == 27)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  LODWORD(v11) = WORD1(result);
  if (WORD1(result) > 0x10u)
    goto LABEL_27;
  if ((result & 0xFFFFFF80) == 0)
  {
    if (result > 0xFF)
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v12 = (result + 1);
    goto LABEL_10;
  }
LABEL_28:
  v23 = (result & 0x3F) << 8;
  v24 = (v23 | (result >> 6)) + 33217;
  v25 = (v23 | (result >> 6) & 0x3F) << 8;
  v26 = (((v25 | (result >> 12) & 0x3F) << 8) | (result >> 18)) - 2122219023;
  v27 = (v25 | (result >> 12)) + 8487393;
  if ((_DWORD)v11)
    v12 = v26;
  else
    v12 = v27;
  if (result < 0x800)
    v12 = v24;
LABEL_10:
  v13 = __clz(v12);
  a2 = 4 - (v13 >> 3);
  v33 = (v12 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v13 >> 3)) & 7)));
  result = (unint64_t)&v33;
LABEL_11:
  result = static String._fromUTF8Repairing(_:)(result, a2);
  v7 = result;
  v6 = v14;
  if ((a6 & 1) == 0)
  {
    if (a4)
    {
      v15 = a4;
      v16 = a5;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  v11 = (unint64_t)a4 >> 32;
  if ((unint64_t)a4 >> 32)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (a4 >> 11 == 27)
  {
LABEL_46:
    __break(1u);
    return result;
  }
  LODWORD(v11) = a4 >> 16;
  if (a4 >> 16 > 0x10)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    v28 = (a4 & 0x3F) << 8;
    v29 = (v28 | (a4 >> 6)) + 33217;
    v30 = (v28 | (a4 >> 6) & 0x3F) << 8;
    v31 = (((v30 | (a4 >> 12) & 0x3F) << 8) | (a4 >> 18)) - 2122219023;
    v32 = (v30 | (a4 >> 12)) + 8487393;
    if ((_DWORD)v11)
      v17 = v31;
    else
      v17 = v32;
    if (a4 < 0x800)
      v17 = v29;
    goto LABEL_20;
  }
  if ((a4 & 0xFFFFFF80) != 0)
    goto LABEL_38;
  if (a4 > 0xFF)
  {
    __break(1u);
    goto LABEL_45;
  }
  v17 = ((_BYTE)a4 + 1);
LABEL_20:
  v18 = __clz(v17);
  v16 = 4 - (v18 >> 3);
  v33 = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v18 >> 3)) & 7)));
  v15 = &v33;
LABEL_21:
  v20 = static String._fromUTF8Repairing(_:)(v15, v16);
  v21 = v19;
  if (v7 == v20 && v6 == v19)
  {
    v22 = 1;
    v21 = v6;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, v20, v19, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v21);
  return v22 & 1;
}

unint64_t sub_100079C00()
{
  unint64_t result;

  result = qword_1000CDCC0;
  if (!qword_1000CDCC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticString, &type metadata for StaticString);
    atomic_store(result, (unint64_t *)&qword_1000CDCC0);
  }
  return result;
}

uint64_t type metadata accessor for Transaction()
{
  return objc_opt_self(_TtC13PCViewService11Transaction);
}

unint64_t sub_100079C68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CDEB0;
  if (!qword_1000CDEB0)
  {
    v1 = type metadata accessor for Transaction();
    result = swift_getWitnessTable(&unk_10008A988, v1);
    atomic_store(result, (unint64_t *)&qword_1000CDEB0);
  }
  return result;
}

void sub_100079CAC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  NSString v12;
  void *v13;
  uint64_t v14;
  NSString v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;

  v2 = v1;
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v4._countAndFlagsBits = 0x20676E69726F7453;
  v4._object = (void *)0xEF203A65756C6176;
  String.append(_:)(v4);
  v17 = a1;
  _print_unlocked<A, B>(_:_:)(&v17, &v18, &type metadata for Bool, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5 = v19;
  sub_10001FEA0();
  v7 = v6;
  v8 = objc_allocWithZone((Class)CULogHandle);
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  v11 = objc_msgSend(v8, "initWithSubsystem:category:", v9, v10);

  swift_bridgeObjectRetain(v5);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v11, "ulog:message:", 40, v12);
  swift_bridgeObjectRelease(v5);

  v13 = *(void **)(v2 + 40);
  if (v13)
  {
    LOBYTE(v18) = a1 & 1;
    v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v18, &type metadata for Bool);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setObject:forKey:", v14, v15);
    swift_unknownObjectRelease(v14, v16);

  }
}

uint64_t sub_100079E74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = qword_1000C8348;
  v7 = *(_QWORD *)(v0 + qword_1000C8348);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + qword_1000C8348);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + qword_1000C8340) == 0;
    v10 = 0x4008000000000000;
    if (*(_QWORD *)(v0 + qword_1000C8340))
      v10 = 1;
    v22 = v10;
    if (v9)
      v11 = 10;
    else
      v11 = 0;
    if (v9)
      v12 = 2;
    else
      v12 = 3;
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v13(v5, v0 + qword_1000DF560, v2);
    v14 = type metadata accessor for XPCConnectionManager(0);
    v8 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    v15 = v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate;
    *(_QWORD *)(v15 + 8) = 0;
    swift_unknownObjectWeakInit(v15, 0);
    *(_QWORD *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx) = 0;
    *(_QWORD *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask) = 0;
    *(_QWORD *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries) = 0;
    v13((char *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_id), (uint64_t)v5, v2);
    v16 = v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy;
    *(_QWORD *)v16 = v22;
    *(_QWORD *)(v16 + 8) = v11;
    *(_BYTE *)(v16 + 16) = v12;
    *(_QWORD *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate + 8) = &off_1000B5380;
    swift_unknownObjectWeakAssign();
    swift_retain(v1);
    v17 = sub_10004FF28();
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "ulog:message:", 40, v18);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_release(v1);
    v19 = *(_QWORD *)(v1 + v6);
    *(_QWORD *)(v1 + v6) = v8;
    swift_retain(v8);
    swift_release(v19);
    v7 = 0;
  }
  swift_retain(v7);
  return v8;
}

double sub_10007A07C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSString v13;
  double result;
  id v15;

  sub_10001FD24();
  v1 = v0;
  v2 = objc_allocWithZone((Class)CULogHandle);
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v5 = objc_msgSend(v2, "initWithSubsystem:category:", v3, v4);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "ulog:message:", 40, v6);

  v7 = sub_100079E74();
  v8 = v7;
  v9 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx;
  v10 = *(void **)(v7 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
  if (v10)
  {
    v11 = v10;
    v12 = sub_10004FF28();
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "ulog:message:", 40, v13);

    objc_msgSend(v11, "invalidate");
    v15 = *(id *)(v8 + v9);
    *(_QWORD *)(v8 + v9) = 0;
    swift_release(v8);

  }
  else
  {
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

id sub_10007A214@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "forceKillPCViewService");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10007A244(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setForceKillPCViewService:", *a1);
}

uint64_t *sub_10007A258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge);
  if (v2)
  {
    v3 = *(uint64_t **)(v0
                     + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge);
  }
  else
  {
    v4 = v0;
    v5 = sub_10007A304();
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_daemonBridgeState);
    v7 = type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClient();
    swift_allocObject(v7, 48, 7);
    swift_retain(v6);
    v3 = sub_100049D40(v5, v6);
    v8 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v8);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10007A304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel);
  }
  else
  {
    v4 = v0;
    v5 = sub_100004B18(&qword_1000CE0B8);
    v6 = sub_10000AAFC(&qword_1000CE0C0, &qword_1000CE0B8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v7 = Publisher.eraseToAnyPublisher()(v5, v6);
    v8 = type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientModel();
    v3 = swift_allocObject(v8, 24, 7);
    *(_QWORD *)(v3 + 16) = v7;
    v9 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v9);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t *sub_10007A3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter);
  if (v2)
  {
    v3 = *(uint64_t **)(v0
                     + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter);
  }
  else
  {
    v4 = v0;
    v5 = sub_10007A484();
    v6 = *(_QWORD *)(v4
                   + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_nearbySharingInteractionViewPresenterState);
    v7 = type metadata accessor for NearbySharingInteractionViewPresenter();
    swift_allocObject(v7, 48, 7);
    swift_retain(v6);
    v3 = sub_10004AB74((uint64_t)v5, v6);
    v8 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v8);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

_QWORD *sub_10007A484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _BYTE v12[24];

  v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel);
  if (v2)
  {
    v3 = *(_QWORD **)(v0
                    + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel);
  }
  else
  {
    v4 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_rootViewController);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_host);
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_daemonBridgeState);
    swift_beginAccess(v6 + 16, v12, 0, 0);
    v7 = *(_QWORD *)(v6 + 16);
    v8 = type metadata accessor for NearbySharingInteractionViewPresenterModel();
    v3 = (_QWORD *)swift_allocObject(v8, 40, 7);
    v3[2] = v4;
    v3[3] = v5;
    v3[4] = v7;
    v9 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    v10 = v4;
    swift_unknownObjectRetain(v5);
    swift_retain(v7);
    swift_retain(v3);
    swift_release(v9);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t *sub_10007A568(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t KeyPath;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;

  v6 = v5;
  v81 = a4;
  v82 = a5;
  v75 = a3;
  v9 = *v5;
  v72 = sub_100004B18(&qword_1000CC2F8);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v69 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100004B18(&qword_1000CC300);
  v73 = *(_QWORD *)(v11 - 8);
  v74 = v11;
  __chkstk_darwin(v11);
  v71 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100004B18(&qword_1000CE0C8);
  v14 = *(_QWORD *)(v13 - 8);
  v78 = v13;
  v79 = v14;
  v15 = __chkstk_darwin(v13);
  v77 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[2] = (uint64_t)&_swiftEmptySetSingleton;
  v17 = v5 + 2;
  UUID.init()(v15);
  v18 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment__isActive;
  v19 = sub_100004B18(&qword_1000CC230);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  *(uint64_t *)((char *)v5 + v18) = (uint64_t)sub_100013028(1, 0, 0, 0, 0, 0);
  v20 = (uint64_t *)((char *)v5
                  + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler);
  *v20 = 0;
  v20[1] = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge) = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel) = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter) = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel) = 0;
  v21 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_nearbySharingInteractionViewPresenterState;
  v22 = type metadata accessor for NearbySharingInteractionViewPresenterState();
  v23 = swift_allocObject(v22, 24, 7);
  v76 = sub_100004B18(&qword_1000CE0B8);
  swift_allocObject(v76, *(unsigned int *)(v76 + 48), *(unsigned __int16 *)(v76 + 52));
  *(_QWORD *)(v23 + 16) = PassthroughSubject.init()();
  *(uint64_t *)((char *)v5 + v21) = v23;
  v83 = 0;
  v84 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v24._countAndFlagsBits = 0x6F63203A74696E49;
  v24._object = (void *)0xEE003D747865746ELL;
  String.append(_:)(v24);
  v85 = a1;
  _print_unlocked<A, B>(_:_:)(&v85, &v83, &type metadata for NearbySharingInteractionViewServiceContext, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v25 = v84;
  sub_10003DC3C(v83, v84, 0, v9, (uint64_t)&off_1000B9BF8);
  swift_bridgeObjectRelease(v25);
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_context) = a1;
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_host) = a2;
  v26 = v75;
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_rootViewController) = (uint64_t)v75;
  v27 = *v20;
  v28 = v20[1];
  v29 = v81;
  v30 = v82;
  *v20 = v81;
  v20[1] = v30;
  swift_bridgeObjectRetain(a1);
  v80 = a2;
  swift_unknownObjectRetain(a2);
  v31 = v26;
  sub_100007A80(v29, v30);
  sub_100007A90(v27, v28);
  v32 = type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientState();
  v33 = swift_allocObject(v32, 32, 7);
  v34 = sub_100004B18(&qword_1000CBF58);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  *(_QWORD *)(v33 + 24) = PassthroughSubject.init()();
  swift_beginAccess(v33 + 16, &v83, 33, 0);
  v35 = sub_100004B18(&qword_1000CBBA0);
  swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v36 = swift_bridgeObjectRetain(a1);
  *(_QWORD *)(v33 + 16) = sub_100015A34(v36, 0, 0, 0, 0, 0);
  swift_endAccess(&v83);
  swift_bridgeObjectRelease(a1);
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_daemonBridgeState) = v33;
  v83 = *(_QWORD *)(v33 + 24);
  v37 = v83;
  v38 = swift_allocObject(&unk_1000B9C48, 24, 7);
  swift_weakInit(v38 + 16, v6);
  v39 = sub_10000AAFC(&qword_1000CC308, &qword_1000CBF58, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain(v37);
  v40 = v39;
  v41 = v31;
  v42 = Publisher<>.sink(receiveValue:)(sub_10007B6D4, v38, v34, v40);
  swift_release(v38);
  swift_release(v83);
  swift_beginAccess(v17, &v83, 33, 0);
  AnyCancellable.store(in:)(v17);
  swift_endAccess(&v83);
  swift_release(v42);
  v83 = *(_QWORD *)&v31[OBJC_IVAR___MainViewController_homeGestureEventSubject];
  v43 = v83;
  v44 = swift_allocObject(&unk_1000B9C48, 24, 7);
  swift_weakInit(v44 + 16, v6);
  v45 = swift_allocObject(&unk_1000B9C70, 32, 7);
  *(_QWORD *)(v45 + 16) = sub_10007B6DC;
  *(_QWORD *)(v45 + 24) = v44;
  swift_retain(v43);
  v46 = sub_100004B18(&qword_1000C6688);
  v47 = sub_10000AAFC(&qword_1000CC298, &qword_1000C6688, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v48 = Publisher<>.sink(receiveValue:)(sub_1000537DC, v45, v46, v47);
  swift_release(v45);
  swift_release(v83);
  swift_beginAccess(v17, &v83, 33, 0);
  AnyCancellable.store(in:)(v17);
  swift_endAccess(&v83);
  swift_release(v48);
  v83 = *(_QWORD *)(*(uint64_t *)((char *)v6
                               + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_nearbySharingInteractionViewPresenterState)
                  + 16);
  v49 = v83;
  v50 = sub_10000AAFC(&qword_1000CE0C0, &qword_1000CE0B8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain(v49);
  v51 = v77;
  Publisher.filter(_:)(sub_10007AE70, 0, v76, v50);
  swift_release(v49);
  v52 = swift_allocObject(&unk_1000B9C48, 24, 7);
  swift_weakInit(v52 + 16, v6);
  v53 = sub_10000AAFC(&qword_1000CE0D0, &qword_1000CE0C8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v54 = v78;
  v55 = Publisher<>.sink(receiveValue:)(sub_10007B708, v52, v78, v53);
  swift_release(v52);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v51, v54);
  swift_beginAccess(v17, &v83, 33, 0);
  AnyCancellable.store(in:)(v17);
  swift_endAccess(&v83);
  swift_release(v55);
  v56 = sub_10007A258();
  sub_100049E98();
  swift_release(v56);
  v57 = sub_10007A3D8();
  sub_10004AC84();
  swift_release(v57);
  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v58 = *(_QWORD *)(qword_1000DF570 + 880);
  swift_retain(v58);
  sub_100079CAC(0);
  swift_release(v58);
  if (qword_1000C5DC0 != -1)
    swift_once(&qword_1000C5DC0, sub_10007C988);
  if (qword_1000DF658)
  {
    KeyPath = swift_getKeyPath(&unk_10008AB08);
    v60 = v69;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 5);
    swift_release(KeyPath);
    v61 = sub_10000AAFC(&qword_1000CC310, &qword_1000CC2F8, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    v63 = v71;
    v62 = v72;
    Publisher.filter(_:)(sub_1000059A0, 0, v72, v61);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v60, v62);
    v64 = sub_10000AAFC(qword_1000CC318, &qword_1000CC300, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v65 = v74;
    v66 = Publisher<>.sink(receiveValue:)(sub_10007AF48, 0, v74, v64);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v63, v65);
    swift_beginAccess(v17, &v83, 33, 0);
    AnyCancellable.store(in:)(v17);
    swift_endAccess(&v83);
    sub_100007A90(v81, v82);
    swift_release(v66);
  }
  else
  {
    sub_100007A90(v81, v82);
  }
  swift_unknownObjectRelease(v80, v67);

  return v6;
}

uint64_t sub_10007AD94(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    sub_10007B3C8(v2, v3);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_10007AE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_10007B3C8(0x74756220656D6F48, 0xEB000000006E6F74);
    return swift_release(v3);
  }
  return result;
}

BOOL sub_10007AE70(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((unsigned __int8 *)a1 + 56) < 2u)
    return 0;
  v1 = a1[4];
  v2 = *a1;
  v3 = a1[5] | a1[6];
  v4 = a1[3] | a1[2] | a1[1];
  if (!(v3 | *a1 | v1 | v4))
    return 0;
  v5 = v3 | v1 | v4;
  if (v2 == 1 && v5 == 0)
    return 0;
  return v2 != 2 || v5 != 0;
}

uint64_t sub_10007AED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10007B3C8(0x74206C65636E6143, 0xED00006465707061);
    return swift_release(v4);
  }
  return result;
}

void sub_10007AF48()
{
  uint64_t v0;

  if (qword_1000C5D80 != -1)
    swift_once(&qword_1000C5D80, sub_10003F290);
  v0 = *(_QWORD *)(qword_1000DF570 + 880);
  swift_retain(v0);
  sub_100079CAC(0);
  swift_release(v0);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x800000010008AAD0, "PCViewService/NearbySharingInteractionAlertEnvironment.swift", 60, 2, 104, 0);
  __break(1u);
}

uint64_t sub_10007AFEC()
{
  uint64_t v0;
  id v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_10005356C();
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "ulog:message:", 40, v2);

  sub_10007B25C();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  v3 = v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment__isActive));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_context));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_host), v5);

  sub_100007A90(*(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler), *(_QWORD *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler + 8));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_daemonBridgeState));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_nearbySharingInteractionViewPresenterState));
  return v0;
}

uint64_t sub_10007B138()
{
  uint64_t v0;

  sub_10007AFEC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007B15C()
{
  return type metadata accessor for NearbySharingInteractionAlertEnvironment(0);
}

uint64_t type metadata accessor for NearbySharingInteractionAlertEnvironment(uint64_t a1)
{
  uint64_t result;

  result = qword_1000CDF10;
  if (!qword_1000CDF10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NearbySharingInteractionAlertEnvironment);
  return result;
}

uint64_t sub_10007B1A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = "\b";
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = &unk_10008AA28;
    v4[7] = &unk_10008AA40;
    v4[8] = &unk_10008AA40;
    v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[10] = &unk_10008AA40;
    v4[11] = &unk_10008AA40;
    v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_10007B25C()
{
  id v0;
  NSString v1;
  uint64_t *v2;
  id v3;
  NSString v4;
  uint64_t *v5;
  id v6;
  NSString v7;
  uint64_t v8;
  _BYTE v10[24];

  v0 = sub_10005356C();
  v1 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "ulog:message:", 40, v1);

  v2 = sub_10007A258();
  v3 = sub_100053544();
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "ulog:message:", 40, v4);

  sub_10007A07C();
  swift_release(v2);
  v5 = sub_10007A3D8();
  v6 = sub_100053558();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "ulog:message:", 40, v7);

  swift_beginAccess(v5 + 5, v10, 1, 0);
  v8 = v5[5];
  v5[5] = (uint64_t)&_swiftEmptySetSingleton;
  swift_release(v5);
  return swift_bridgeObjectRelease(v8);
}

id sub_10007B3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  id v10;
  NSString v11;

  v3 = v2;
  String.append(_:)(*(Swift::String *)&a1);
  v4 = sub_10005356C();
  swift_bridgeObjectRetain(0x8000000100094600);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100094600);
  objc_msgSend(v4, "ulog:message:", 40, v5, 0xD00000000000001ALL);
  swift_bridgeObjectRelease(0x8000000100094600);

  v6 = *(void (**)(uint64_t))(v3
                                      + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler);
  if (v6)
  {
    v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler + 8);
    v8 = swift_retain(v7);
    v6(v8);
    return (id)sub_100007A90((uint64_t)v6, v7);
  }
  else
  {
    v10 = sub_10005356C();
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "ulog:message:", 60, v11);

    return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_host), "invalidate");
  }
}

uint64_t sub_10007B514()
{
  return sub_10007B534();
}

uint64_t sub_10007B534()
{
  uint64_t *v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;

  v1._countAndFlagsBits = sub_10003DF3C(*v0);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0x3D64690A3D3D20;
  v3._object = (void *)0xE700000000000000;
  String.append(_:)(v3);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100061E10(&qword_1000CC220, (uint64_t)&protocol conformance descriptor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  return 2112829;
}

uint64_t sub_10007B604@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double sub_10007B64C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment__isActive);
  swift_retain(v3);
  sub_10005012C(a1);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_10007B68C()
{
  return sub_100061E10((unint64_t *)&qword_1000C82E0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_10007B6B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007B6D4(uint64_t *a1)
{
  uint64_t v1;

  return sub_10007AD94(a1, v1);
}

uint64_t sub_10007B6DC()
{
  uint64_t v0;

  return sub_10007AE00(v0);
}

uint64_t sub_10007B6E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007B708(uint64_t a1)
{
  uint64_t v1;

  return sub_10007AED4(a1, v1);
}

id sub_10007B710@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "forceKillPCViewService");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10007B740(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setForceKillPCViewService:", *a1);
}

ValueMetadata *type metadata accessor for PrimaryButtonStyle()
{
  return &type metadata for PrimaryButtonStyle;
}

uint64_t sub_10007B764(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009B358, 1);
}

uint64_t sub_10007B774@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[3];

  v87 = a2;
  v90 = a3;
  v91 = a1;
  v89 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v89);
  v88 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100004B18(&qword_1000C8070);
  __chkstk_darwin(v6);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = v9;
  __chkstk_darwin(v9);
  v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100004B18(&qword_1000CE0D8);
  __chkstk_darwin(v77);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100004B18(&qword_1000CE0E0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100004B18(&qword_1000CE0E8);
  __chkstk_darwin(v78);
  v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100004B18(&qword_1000C7E50);
  __chkstk_darwin(v82);
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100004B18(&qword_1000C7E58);
  __chkstk_darwin(v22);
  v83 = (uint64_t)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_100004B18(&qword_1000CE0F0);
  __chkstk_darwin(v84);
  v79 = (uint64_t)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100004B18(&qword_1000CE0F8);
  v25 = __chkstk_darwin(v86);
  v85 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter(v25);
  v27 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
  v28 = static Font.system(size:weight:design:)(0, 1, v8, 17.0);
  sub_100017AB4((uint64_t)v8, &qword_1000C8070);
  KeyPath = swift_getKeyPath(&unk_10008AB90);
  v30 = v11;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v13, v11);
  v31 = v77;
  v32 = (uint64_t *)&v15[*(int *)(v77 + 36)];
  *v32 = KeyPath;
  v32[1] = v28;
  v33 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v30);
  v34 = static Font.Weight.medium.getter(v33);
  v35 = sub_10007BF6C();
  View.fontWeight(_:)(*(_QWORD *)&v34, 0, v31, v35);
  v36 = sub_100017AB4((uint64_t)v15, &qword_1000CE0D8);
  LOBYTE(v34) = static Edge.Set.horizontal.getter(v36);
  v37 = EdgeInsets.init(_all:)(a4);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v44 = v80;
  v45 = v81;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v19, v17, v81);
  v46 = &v19[*(int *)(v78 + 36)];
  *v46 = LOBYTE(v34);
  *((double *)v46 + 1) = v37;
  *((_QWORD *)v46 + 2) = v39;
  *((_QWORD *)v46 + 3) = v41;
  *((_QWORD *)v46 + 4) = v43;
  v46[40] = 0;
  v47 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v17, v45);
  v48 = static Alignment.center.getter(v47);
  _FrameLayout.init(width:height:alignment:)(v93, 0, 1, 0x4049000000000000, 0, v48, v49);
  sub_100017F28((uint64_t)v19, (uint64_t)v21, &qword_1000CE0E8);
  v50 = &v21[*(int *)(v82 + 36)];
  v51 = v93[1];
  *(_OWORD *)v50 = v93[0];
  *((_OWORD *)v50 + 1) = v51;
  *((_OWORD *)v50 + 2) = v93[2];
  v52 = sub_100017AB4((uint64_t)v19, &qword_1000CE0E8);
  v53 = static Alignment.center.getter(v52);
  v54 = v83;
  sub_100024F34(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v83, 0.0, 1, 0.0, 1, v53, v55);
  sub_100017AB4((uint64_t)v21, &qword_1000C7E50);
  v56 = sub_10007BDBC(v87, &v92);
  v57 = v92;
  LOBYTE(v34) = static Edge.Set.all.getter(v56);
  v58 = v79;
  sub_100017F28(v54, v79, &qword_1000C7E58);
  v59 = v58 + *(int *)(v84 + 36);
  *(_QWORD *)v59 = v57;
  *(_BYTE *)(v59 + 8) = LOBYTE(v34);
  sub_100017AB4(v54, &qword_1000C7E58);
  v60 = v88;
  v61 = &v88[*(int *)(v89 + 20)];
  v62 = enum case for RoundedCornerStyle.continuous(_:);
  v63 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v61, v62, v63);
  __asm { FMOV            V0.2D, #12.0 }
  *v60 = _Q0;
  v69 = (uint64_t)v85;
  v70 = (uint64_t)&v85[*(int *)(v86 + 36)];
  sub_10007C038((uint64_t)v60, v70);
  *(_WORD *)(v70 + *(int *)(sub_100004B18(&qword_1000CB2D0) + 36)) = 256;
  sub_100017F28(v58, v69, &qword_1000CE0F0);
  sub_10007C07C((uint64_t)v60);
  v71 = sub_100017AB4(v58, &qword_1000CE0F0);
  v72 = static Animation.easeOut(duration:)(v71, 0.2);
  LOBYTE(v62) = ButtonStyleConfiguration.isPressed.getter(v72);
  v73 = v90;
  sub_100017F28(v69, v90, &qword_1000CE0F8);
  v74 = v73 + *(int *)(sub_100004B18(&qword_1000CE110) + 36);
  *(_QWORD *)v74 = v72;
  *(_BYTE *)(v74 + 8) = v62 & 1;
  return sub_100017AB4(v69, &qword_1000CE0F8);
}

uint64_t sub_10007BDBC@<X0>(char a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  float v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  char v18;
  void *v19;
  char **v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for Material(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100004B18(&qword_1000CE118);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a1 & 1) != 0)
  {
    v12 = static Material.thin.getter(v9);
    v13 = ButtonStyleConfiguration.isPressed.getter(v12);
    (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(v11, v7, v4);
    v14 = 0.7;
    if ((v13 & 1) == 0)
      v14 = 1.0;
    *(float *)((char *)v11 + *(int *)(v8 + 36)) = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v15 = (void *)sub_10000AAFC(&qword_1000CE120, &qword_1000CE118, (uint64_t)&protocol conformance descriptor for _OpacityShapeStyle<A>);
    v16 = v11;
    v17 = (void *)v8;
  }
  else
  {
    v18 = ButtonStyleConfiguration.isPressed.getter(v9);
    v19 = (void *)objc_opt_self(UIColor);
    v20 = &selRef_systemGray5Color;
    if ((v18 & 1) == 0)
      v20 = &selRef_systemGray6Color;
    v23 = Color.init(_:)(objc_msgSend(v19, *v20));
    v17 = &type metadata for Color;
    v15 = &protocol witness table for Color;
    v16 = &v23;
  }
  result = AnyShapeStyle.init<A>(_:)(v16, v17, v15);
  *a2 = result;
  return result;
}

uint64_t sub_10007BF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10007B774(a1, *(unsigned __int8 *)(v2 + 8), a2, *(double *)v2);
}

unint64_t sub_10007BF6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE100;
  if (!qword_1000CE100)
  {
    v1 = sub_100005F48(&qword_1000CE0D8);
    sub_10007BFF0();
    sub_10000AAFC(&qword_1000C8578, &qword_1000C8580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE100);
  }
  return result;
}

unint64_t sub_10007BFF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE108;
  if (!qword_1000CE108)
  {
    v1 = type metadata accessor for ButtonStyleConfiguration.Label(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ButtonStyleConfiguration.Label, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE108);
  }
  return result;
}

uint64_t sub_10007C038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007C07C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10007C0BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE128;
  if (!qword_1000CE128)
  {
    v1 = sub_100005F48(&qword_1000CE110);
    sub_10007C140();
    sub_10000AAFC(&qword_1000C7E18, &qword_1000C7E20, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE128);
  }
  return result;
}

unint64_t sub_10007C140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE130;
  if (!qword_1000CE130)
  {
    v1 = sub_100005F48(&qword_1000CE0F8);
    sub_10007C1C4();
    sub_10000AAFC(&qword_1000CE168, &qword_1000CB2D0, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE130);
  }
  return result;
}

unint64_t sub_10007C1C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE138;
  if (!qword_1000CE138)
  {
    v1 = sub_100005F48(&qword_1000CE0F0);
    sub_10001C2C4(&qword_1000CE140, &qword_1000C7E58, (void (*)(void))sub_10007C268);
    sub_10000AAFC(&qword_1000CE158, &qword_1000CE160, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE138);
  }
  return result;
}

uint64_t sub_10007C268()
{
  return sub_10001C2C4(&qword_1000CE148, &qword_1000C7E50, (void (*)(void))sub_10007C28C);
}

unint64_t sub_10007C28C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000CE150;
  if (!qword_1000CE150)
  {
    v1 = sub_100005F48(&qword_1000CE0E8);
    v2[0] = sub_100005F48(&qword_1000CE0D8);
    v2[1] = sub_10007BF6C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE150);
  }
  return result;
}

uint64_t sub_10007C320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);

  sub_100007A90(v1, v2);
  return swift_deallocClassInstance(v0, 760, 7);
}

uint64_t type metadata accessor for Spring()
{
  return objc_opt_self(_TtC13PCViewService6Spring);
}

uint64_t sub_10007C384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v2;
  v6 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONEncoder.init()();
  v8 = dispatch thunk of JSONEncoder.encode<A>(_:)(v3, a1, a2);
  swift_release(v7);
  return v8;
}

uint64_t sub_10007C410(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t result;
  Swift::Int v30;
  void (*v31)(_BYTE *, _QWORD);
  void (*v32)(char *);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *);
  uint64_t v49;
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  _BYTE v53[32];
  uint64_t v54;

  v40 = a5;
  v41 = a8;
  v48 = a1;
  v49 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v50 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8), v14, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Element);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = __chkstk_darwin(AssociatedTypeWitness);
  v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_getAssociatedTypeWitness(0, a6, a3, &protocol requirements base descriptor for Collection, &associated type descriptor for Collection.Index);
  v42 = *(_QWORD *)(v22 - 8);
  v43 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v39 - v23;
  v25 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v25)
    return static Array._allocateUninitialized(_:)(0, a4);
  v46 = AssociatedTypeWitness;
  v26 = v8;
  v27 = a4;
  v28 = v25;
  v54 = ContiguousArray.init()(v27);
  v44 = type metadata accessor for ContiguousArray(0, v27);
  ContiguousArray.reserveCapacity(_:)(v28);
  v47 = v26;
  result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v28 & 0x8000000000000000) == 0)
  {
    v30 = v28;
    v45 = v21;
    while (v30)
    {
      v51 = v30;
      v31 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v53, v24, a3, a6);
      v32 = *(void (**)(char *))(v16 + 16);
      v33 = v16;
      v34 = v46;
      v32(v19);
      v31(v53, 0);
      v35 = v24;
      v36 = v19;
      v37 = v45;
      v38 = v52;
      v48(v36, v50);
      if (v38)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
        swift_release(v54);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v41, v50, v40);
      }
      v52 = 0;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v34);
      ContiguousArray.append(_:)(v37, v44);
      result = dispatch thunk of Collection.formIndex(after:)(v35, a3, a6);
      v30 = v51 - 1;
      v16 = v33;
      v19 = v36;
      v24 = v35;
      if (v51 == 1)
      {
        (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
        return v54;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10007C700(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = dispatch thunk of Identifiable.id.getter(a1, a2);
  v9 = UUID.uuidString.getter(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

_UNKNOWN **static Bool.allCases.getter()
{
  return &off_1000B2598;
}

void sub_10007C7B0(_QWORD *a1@<X8>)
{
  *a1 = &off_1000B2210;
}

uint64_t static Optional<A>.allCases.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for CaseIterable, &associated type descriptor for CaseIterable.AllCases);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = &v18[-v6];
  v8 = type metadata accessor for Optional(255, a1);
  v9 = type metadata accessor for _ContiguousArrayStorage(0, v8);
  v10 = swift_allocObject(v9, ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) | 7);
  v11 = static Array._adoptStorage(_:count:)(v10, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v12, 1, 1, a1);
  type metadata accessor for Array(0, v8);
  dispatch thunk of static CaseIterable.allCases.getter(a1, a2);
  v19 = a1;
  v20 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, &protocol requirements base descriptor for CaseIterable, &associated conformance descriptor for CaseIterable.CaseIterable.AllCases: Collection);
  v15 = sub_10007C410((void (*)(char *, char *))sub_10007C9F4, (uint64_t)v18, AssociatedTypeWitness, v8, (uint64_t)&type metadata for Never, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Never, v14);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  v16 = static Array.+ infix(_:_:)(v11, v15, v8);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v15);
  return v16;
}

uint64_t sub_10007C95C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = static Optional<A>.allCases.getter(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
  *a3 = result;
  return result;
}

void sub_10007C988()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  qword_1000DF658 = (uint64_t)v2;
}

uint64_t sub_10007C9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

unint64_t sub_10007CA58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE530;
  if (!qword_1000CE530)
  {
    v1 = sub_100005F48(&qword_1000CE538);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000CE530);
  }
  return result;
}

uint64_t sub_10007CAA4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for [A], a1);
}

uint64_t PCActivityAssetType.description.getter(uint64_t a1)
{
  __CFString *v1;
  uint64_t v2;

  v1 = sub_10007CDB0(a1);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

char *sub_10007CB00@<X0>(char **a1@<X8>)
{
  char *result;

  result = _sSo19PCActivityAssetTypeV13PCViewServiceE8allCasesSayABGvgZ_0();
  *a1 = result;
  return result;
}

uint64_t sub_10007CB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007CED0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10007CB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007CED0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10007CBCC()
{
  uint64_t *v0;
  __CFString *v1;
  uint64_t v2;

  v1 = sub_10007CDB0(*v0);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

char *_sSo19PCActivityAssetTypeV13PCViewServiceE8allCasesSayABGvgZ_0()
{
  uint64_t v0;
  uint64_t inited;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v0 = sub_100004B18(&qword_1000CCA68);
  inited = swift_initStackObject(v0, &v12);
  *(_OWORD *)(inited + 16) = xmmword_100081E70;
  *(_OWORD *)(inited + 32) = xmmword_100081A60;
  *(_QWORD *)(inited + 48) = 2;
  v2 = sub_10005CDC8((char *)1, 6, 1, (char *)inited);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  v5 = v3 >> 1;
  v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    v2 = sub_10005CDC8((char *)(v3 > 1), v4 + 1, 1, v2);
    v3 = *((_QWORD *)v2 + 3);
    v5 = v3 >> 1;
  }
  *((_QWORD *)v2 + 2) = v6;
  *(_QWORD *)&v2[8 * v4 + 32] = 3;
  v7 = v4 + 2;
  if (v5 < (uint64_t)(v4 + 2))
    v2 = sub_10005CDC8((char *)(v3 > 1), v4 + 2, 1, v2);
  *((_QWORD *)v2 + 2) = v7;
  *(_QWORD *)&v2[8 * v6 + 32] = 5;
  v8 = *((_QWORD *)v2 + 3);
  v9 = v4 + 3;
  if ((uint64_t)(v4 + 3) > (uint64_t)(v8 >> 1))
    v2 = sub_10005CDC8((char *)(v8 > 1), v4 + 3, 1, v2);
  *((_QWORD *)v2 + 2) = v9;
  *(_QWORD *)&v2[8 * v7 + 32] = 4;
  v10 = *((_QWORD *)v2 + 3);
  if ((uint64_t)(v4 + 4) > (uint64_t)(v10 >> 1))
    v2 = sub_10005CDC8((char *)(v10 > 1), v4 + 4, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 4;
  *(_QWORD *)&v2[8 * v9 + 32] = 8;
  return v2;
}

__CFString *sub_10007CDB0(uint64_t a1)
{
  __CFString *v1;
  __CFString *v2;

  switch(a1)
  {
    case 1:
      v1 = CFSTR("miniDark");
      goto LABEL_11;
    case 2:
      v1 = CFSTR("miniLight");
      goto LABEL_11;
    case 3:
      v1 = CFSTR("FPO_B");
      goto LABEL_11;
    case 4:
      v1 = CFSTR("FPO_Y");
      goto LABEL_11;
    case 5:
      v1 = CFSTR("FPO_O");
      goto LABEL_11;
    case 6:
      v1 = CFSTR("b620Dark");
      goto LABEL_11;
    case 7:
      v1 = CFSTR("b620Light");
      goto LABEL_11;
    case 8:
      v1 = CFSTR("miniBasalt");
LABEL_11:
      v2 = v1;
      break;
    default:
      v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("? (%ld)"), a1));
      break;
  }
  return v1;
}

unint64_t sub_10007CE84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE540;
  if (!qword_1000CE540)
  {
    v1 = sub_100005F48(&qword_1000CE548);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000CE540);
  }
  return result;
}

unint64_t sub_10007CED0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000CE550;
  if (!qword_1000CE550)
  {
    type metadata accessor for PCActivityAssetType(255);
    result = swift_getWitnessTable(&unk_10007F9C8, v1);
    atomic_store(result, (unint64_t *)&qword_1000CE550);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for HomeAccessoryView(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_retain(v4);
  return a1;
}

uint64_t destroy for HomeAccessoryView(uint64_t a1)
{

  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for HomeAccessoryView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  swift_retain(v8);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for HomeAccessoryView(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for HomeAccessoryView()
{
  return &type metadata for HomeAccessoryView;
}

void sub_10007D01C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  NSString v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;

  v16 = 0;
  v17 = 0xE000000000000000;
  v6._object = (void *)0x800000010008EFD0;
  v6._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x7865746E6F63203ALL;
  v7._object = (void *)0xEA00000000003D74;
  String.append(_:)(v7);
  v8 = sub_100004B18(&qword_1000CE560);
  _print_unlocked<A, B>(_:_:)(a1, &v16, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9 = v17;
  v10 = sub_100053490();
  swift_bridgeObjectRetain(v9);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v10, "ulog:message:", 40, v11);
  swift_bridgeObjectRelease(v9);

  v16 = a2;
  v17 = a3;
  v12 = sub_100004B18(&qword_1000CE568);
  State.wrappedValue.getter(&v15, v12);
  v13 = v15;
  v14 = objc_msgSend(v15, "view");

  if (!v14)
    __break(1u);
}

void sub_10007D16C(uint64_t a1)
{
  uint64_t v1;

  sub_10007D01C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_10007D178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007D23C();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10007D1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007D23C();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10007D218(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007D23C();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10007D23C()
{
  unint64_t result;

  result = qword_1000CE558;
  if (!qword_1000CE558)
  {
    result = swift_getWitnessTable(&unk_10008AE54, &type metadata for HomeAccessoryView);
    atomic_store(result, (unint64_t *)&qword_1000CE558);
  }
  return result;
}

void sub_10007D280(void *a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  NSString v15;
  uint64_t v16;
  unint64_t v17;

  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v4._object = (void *)0x800000010008EFB0;
  v4._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x776569566975203ALL;
  v5._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v5);
  v6 = objc_msgSend(a1, "description", 0);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x747865746E6F6320;
  v11._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v11);
  v12 = sub_100004B18(&qword_1000CE560);
  _print_unlocked<A, B>(_:_:)(a2, &v16, v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v13 = v17;
  v14 = sub_100053490();
  swift_bridgeObjectRetain(v13);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  objc_msgSend(v14, "ulog:message:", 40, v15);
  swift_bridgeObjectRelease(v13);

}

id objc_msgSend__effectiveParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_effectiveParameters");
}

id objc_msgSend__projectedTargetForVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_projectedTargetForVelocity:");
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:");
}

id objc_msgSend_resetImmediatelyToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetImmediatelyToValue:");
}

id objc_msgSend_setRetargetImpulse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetargetImpulse:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracking:");
}

id objc_msgSend_setTrackingParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackingParameters:");
}

id objc_msgSend_step_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "step:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "target");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}
